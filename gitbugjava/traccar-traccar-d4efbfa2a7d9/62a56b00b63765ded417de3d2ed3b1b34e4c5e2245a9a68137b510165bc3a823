{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Ensure we don't read past the expected end index for this TLV block\n            if (endIndex > buf.writerIndex()) {\n                // Log error or break? For now, let's break to prevent IndexOutOfBounds\n                break; // Avoid reading past buffer end\n            }\n\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                     if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    if (length > 0) {\n                        String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (sentence.startsWith(\"*M00\") && sentence.length() >= 15) {\n                            String lockStatus = sentence.substring(8, 8 + 7);\n                            if (lockStatus.length() >= 5) {\n                                try {\n                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                } catch (NumberFormatException e) {\n                                    // Ignore if parsing fails\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x80:\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // This case seems problematic, adjusting endIndex might lead to issues.\n                        // It relies on external method decodeExtension. Assuming decodeExtension handles bounds.\n                        // Let's use the original logic for adjusting endIndex here.\n                        int adjustedEndIndex = buf.writerIndex() - 2; // Original logic\n                        if (adjustedEndIndex > buf.readerIndex()) {\n                            decodeExtension(position, buf, adjustedEndIndex);\n                            // Ensure readerIndex doesn't go beyond the calculated endIndex\n                            // This logic seems risky, it might be better to pass the original length/endIndex\n                            // to decodeExtension if possible. Sticking to original for minimum change.\n                            endIndex = adjustedEndIndex; // Update endIndex based on the case's logic\n                        } else {\n                           // Skip if adjusted end index is invalid\n                        }\n                    }\n                    break;\n                case 0x91:\n                    if (length >= 20) { // Ensure enough bytes for all reads\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort();\n                        buf.readUnsignedInt();\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC: // Fix: Handle subtype 0xBC for driver information\n                    if (length > 0) {\n                        String driver = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                        if (!driver.isEmpty()) {\n                            position.set(\"driver\", driver);\n                        }\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Check length before reading count\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2);\n                        if (length >= expectedLength) { // Check if length matches expected structure\n                           for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                         if (endIndex - buf.readerIndex() < 1 + 6 + 8 + 8) { // Check remaining bytes for full record\n                             break;\n                         }\n                         int sensorIndex = buf.readUnsignedByte();\n                         buf.skipBytes(6); // mac\n                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                         position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // Need at least 2 bytes to read the first short to decide path\n                    if (length >= 2) {\n                        if (buf.getUnsignedShort(buf.readerIndex()) > 200) { // Network Info\n                             if (length >= 3) { // Need MCC (2) + MNC (1)\n                                Network network = new Network();\n                                int mcc = buf.readUnsignedShort();\n                                int mnc = buf.readUnsignedByte();\n                                while (endIndex - buf.readerIndex() >= 5) { // Need LAC (2) + CID (2) + RSSI (1)\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                if (!network.getCellTowers().isEmpty()) {\n                                    position.setNetwork(network);\n                                }\n                             }\n                        } else { // Extended TLVs\n                            while (endIndex - buf.readerIndex() >= 4) { // Need length (2) + type (2)\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                int dataLength = extendedLength - 2; // Type field itself is 2 bytes\n\n                                if (dataLength < 0 || endIndex - buf.readerIndex() < dataLength) {\n                                     break; // Invalid length or not enough data remaining\n                                }\n\n                                switch (extendedType) {\n                                    case 0x0001: // fuel1\n                                        if (dataLength >= 3) {\n                                            position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                            buf.readUnsignedByte(); // unused\n                                        } else { buf.skipBytes(dataLength); }\n                                        break;\n                                    case 0x0023: // fuel2\n                                        if (dataLength >= 6) {\n                                            try {\n                                                 position.set(\"fuel2\", Double.parseDouble(\n                                                        buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                            } catch (Exception e) { /* ignore parsing error */ }\n                                            buf.skipBytes(dataLength - 6); // Skip remaining bytes if any\n                                        } else { buf.skipBytes(dataLength); }\n                                        break;\n                                    case 0x00CE: // power\n                                        if (dataLength >= 2) {\n                                            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                            buf.skipBytes(dataLength - 2);\n                                        } else { buf.skipBytes(dataLength); }\n                                        break;\n                                    case 0x00D8: // cell tower\n                                        if (dataLength >= 8) {\n                                            Network network = new Network();\n                                            network.addCellTower(CellTower.from(\n                                                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                    buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                            position.setNetwork(network);\n                                            buf.skipBytes(dataLength - 8);\n                                         } else { buf.skipBytes(dataLength); }\n                                        break;\n                                    case 0xE1: // battery level\n                                        if (dataLength >= 1) {\n                                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                            buf.skipBytes(dataLength - 1);\n                                        } else { buf.skipBytes(dataLength); }\n                                        break;\n                                    default:\n                                        buf.skipBytes(dataLength);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (length > 0) {\n                        String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                        if (!license.isEmpty()) {\n                           position.set(\"driverLicense\", license);\n                        }\n                    }\n                    break;\n                case 0xEE:\n                    if (length >= 6) { // Ensure enough bytes\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3:\n                    while (endIndex - buf.readerIndex() >= 3) { // Need type (2) + length (1)\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n\n                         if (endIndex - buf.readerIndex() < extendedLength) {\n                             break; // Not enough data for declared length\n                         }\n\n                        switch (extendedType) {\n                            case 0x0002: if (extendedLength >= 2) { position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0003: if (extendedLength >= 2) { position.set(Position.KEY_RPM, buf.readUnsignedShort()); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0004: if (extendedLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0005: if (extendedLength >= 4) { position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); buf.skipBytes(extendedLength - 4); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0007: if (extendedLength >= 2) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0008: if (extendedLength >= 2) { position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0009: if (extendedLength >= 2) { position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x000B: if (extendedLength >= 2) { position.set(\"intakePressure\", buf.readUnsignedShort()); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x000C: if (extendedLength >= 2) { position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x000D: if (extendedLength >= 2) { position.set(\"intakeFlow\", buf.readUnsignedShort()); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x000E: if (extendedLength >= 2) { position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0050: if (extendedLength >= 17) { position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); buf.skipBytes(extendedLength - 17); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0100: if (extendedLength >= 2) { position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0102: if (extendedLength >= 2) { position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0112: if (extendedLength >= 2) { position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0113: if (extendedLength >= 2) { position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0114: if (extendedLength >= 2) { position.set(\"hardCorneringCount\", buf.readUnsignedShort()); buf.skipBytes(extendedLength - 2); } else { buf.skipBytes(extendedLength); } break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 0) { // Need at least 1 byte for mark or battery level\n                        int mark = buf.getUnsignedByte(buf.readerIndex()); // Peek at the first byte\n                        if (mark == 0x7C) {\n                            buf.readUnsignedByte(); // Consume the mark byte\n                            while (endIndex - buf.readerIndex() >= 2) { // Need type (1) + length (1)\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n\n                                if (endIndex - buf.readerIndex() < extendedLength) {\n                                    break; // Not enough data for declared length\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01: // Alarms\n                                        if (extendedLength >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                            buf.skipBytes(extendedLength - 4); // Skip remaining bytes if any\n                                        } else { buf.skipBytes(extendedLength); }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                            // Check if battery level is the last byte after 0x7C block\n                            if (buf.readerIndex() < endIndex) {\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                        } else {\n                            // If mark is not 0x7C, assume the structure might just be battery level?\n                            // Or skip? Original code would read the first byte as battery level in this case.\n                            // Let's tentatively read the first byte as battery level if mark != 0x7C\n                            // This matches the behavior for length=1, maybe it's always battery?\n                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // Skip unknown subtype data explicitly based on length\n                    // buf.skipBytes(length); // Done by readerIndex(endIndex) below\n                    break;\n            }\n            // Ensure reader index is set correctly even if processing within a case reads less/more than length or fails\n            // Protect against reading beyond the buffer if endIndex was calculated incorrectly or buffer is truncated\n             if (endIndex > buf.writerIndex()) {\n                buf.readerIndex(buf.writerIndex()); // Go to end of buffer\n            } else {\n                buf.readerIndex(endIndex); // Go to calculated end of TLV item\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}