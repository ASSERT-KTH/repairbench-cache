{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Basic check to prevent reading beyond buffer if length is invalid\n            if (endIndex > buf.writerIndex()) {\n                 // Log.warning(\"Invalid TLV length in Huabao message, exceeds buffer\");\n                 break;\n            }\n\n            // Ensure we don't try processing TLV if claimed length exceeds available bytes\n            if (length > buf.readableBytes()) {\n                // Log.warning(\"Invalid TLV length in Huabao message, exceeds readable bytes\");\n                break;\n            }\n\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                    if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    // Avoid reading if length is 0, check string bounds before substring\n                    if (length > 0) {\n                        String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (sentence.startsWith(\"*M00\") && sentence.length() >= 15) { // Check length for substring\n                            try {\n                                String lockStatus = sentence.substring(8, 8 + 7);\n                                position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                            } catch (NumberFormatException | IndexOutOfBoundsException e) {\n                                // Log potentially invalid format\n                            }\n                        }\n                    }\n                    break;\n                case 0x80:\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // Original code adjusted endIndex based on writerIndex, which is suspicious.\n                        // Assuming decodeExtension should operate within the TLV bounds.\n                        int decodeExtensionEndIndex = buf.readerIndex() + length - 1; // -1 for content byte read\n                        if (decodeExtensionEndIndex > endIndex) { // Clamp to original TLV end index\n                           decodeExtensionEndIndex = endIndex;\n                        }\n                        // Pass the calculated end index, decodeExtension should respect it\n                        decodeExtension(position, buf, decodeExtensionEndIndex);\n                    }\n                    break;\n                case 0x91:\n                    // Approximate check, requires 2 + 2 + 1 + 1 + 1 + 1 + 2 + 2 + 2 + 4 + 2 + 2 = 24 bytes?\n                    if (length >= 24) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort();\n                        buf.readUnsignedInt();\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                // ******** ADDED CASE ********\n                case 0xBC:\n                    if (length > 0) {\n                        // Trim needed as example data had trailing null bytes included in length\n                        position.set(\"driver\", buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n                    }\n                    break;\n                // **************************\n                case 0xD0:\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 1) { // Need count byte\n                        int count = buf.readUnsignedByte();\n                        // Check if length matches expected size: 1 + count * (5 + 5 + 1 + 2) = 1 + count * 13\n                        int expectedDataLength = count * 13;\n                        if (count > 0 && length == 1 + expectedDataLength && buf.readableBytes() >= expectedDataLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        } else {\n                            // Log invalid count/length?\n                        }\n                    }\n                    break;\n                case 0xDA:\n                     if (length >= 3) { // Need count (2) + status (1)\n                         buf.readUnsignedShort(); // string cut count\n                         int deviceStatus = buf.readUnsignedByte();\n                         position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                         position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                     }\n                     break;\n                case 0xE6:\n                    // Loop should check readerIndex < endIndex\n                    while (buf.readerIndex() < endIndex) {\n                        // Check for minimum bytes needed for one item (index + mac + temp + humidity)\n                        // Size of decodeCustomDouble is unknown, assume minimum 1 + 6 = 7 bytes needed before reading index/mac\n                         if (endIndex - buf.readerIndex() < 7) {\n                             break; // Not enough bytes for index + mac\n                         }\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        // Assuming decodeCustomDouble reads within available bytes or handles errors\n                        if (buf.readerIndex() < endIndex) { // Check before first call\n                             position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        }\n                        if (buf.readerIndex() < endIndex) { // Check before second call\n                             position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                        }\n                    }\n                    break;\n                case 0xEB:\n                    if (length > 0 && buf.readableBytes() >= length) { // Check length and buffer availability\n                        // Check if network cell tower format (first short > 200)\n                        if (length >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                            Network network = new Network();\n                            if (length >= 3) { // Need mcc (2) + mnc (1)\n                                int mcc = buf.readUnsignedShort();\n                                int mnc = buf.readUnsignedByte();\n                                // Cell tower data is 5 bytes each (lac short + cid short + rssi byte)\n                                while (buf.readerIndex() <= endIndex - 5) {\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                if (network.getCellTowers() != null && !network.getCellTowers().isEmpty()) {\n                                    position.setNetwork(network);\n                                }\n                            }\n                        } else { // Inner TLV format\n                            while (buf.readerIndex() <= endIndex - 4) { // Need inner type (2) + inner length (2)\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                // Inner data length = extendedLength - type field size (2)\n                                int extendedDataLength = extendedLength - 2;\n                                int extendedDataEndIndex = buf.readerIndex() + extendedDataLength;\n\n                                // Validate inner TLV boundaries\n                                if (extendedLength < 2 || extendedDataEndIndex > endIndex || extendedDataLength < 0) {\n                                    // Log.warning(\"Invalid inner TLV length/boundary in 0xEB\");\n                                    break;\n                                }\n                                if (buf.readableBytes() < extendedDataLength) {\n                                    // Log.warning(\"Insufficient buffer for inner TLV data in 0xEB\");\n                                    break; // Not enough data in buffer for claimed length\n                                }\n\n                                switch (extendedType) {\n                                    case 0x0001: if (extendedDataLength >= 3) { position.set(\"fuel1\", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } break;\n                                    case 0x0023: if (extendedDataLength >= 6) { try { position.set(\"fuel2\", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (NumberFormatException e) { /* Log */ } } break;\n                                    case 0x00CE: if (extendedDataLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } break;\n                                    case 0x00D8: if (extendedDataLength >= 9) { Network network = new Network(); network.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(network); } break;\n                                    case 0xE1:   if (extendedDataLength >= 1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } break; // Assuming type is 0xE1 not 0x00E1\n                                    default: /* Skip unknown inner type */ break;\n                                }\n                                // Position reader at the end of this inner TLV's data payload\n                                buf.readerIndex(extendedDataEndIndex);\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (length > 0) {\n                        String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                        position.set(\"driverLicense\", license);\n                    }\n                    break;\n                case 0xEE:\n                     // Needs RSSI(1) + Power(2) + Battery(2) + Sats(1) = 6 bytes\n                     if (length >= 6) {\n                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                     }\n                     break;\n                case 0xF3:\n                     // Inner TLV: type(2) + length(1) + data(variable)\n                     while (buf.readerIndex() <= endIndex - 3) { // Need type+length header\n                         int extendedType = buf.readUnsignedShort();\n                         int extendedLength = buf.readUnsignedByte(); // This is data length\n                         int extendedDataEndIndex = buf.readerIndex() + extendedLength;\n\n                         // Validate inner TLV boundaries\n                         if (extendedDataEndIndex > endIndex || extendedLength < 0) {\n                             // Log.warning(\"Invalid inner TLV length/boundary in 0xF3\");\n                             break;\n                         }\n                         if (buf.readableBytes() < extendedLength) {\n                             // Log.warning(\"Insufficient buffer for inner TLV data in 0xF3\");\n                             break; // Not enough data in buffer for claimed length\n                         }\n\n                         switch (extendedType) {\n                             case 0x0002: if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0003: if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                             case 0x0004: if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                             case 0x0005: if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                             case 0x0007: if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0008: if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0009: if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                             case 0x000B: if (extendedLength >= 2) position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                             case 0x000C: if (extendedLength >= 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                             case 0x000D: if (extendedLength >= 2) position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                             case 0x000E: if (extendedLength >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;\n                             case 0x0050: if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                             case 0x0100: if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0102: if (extendedLength >= 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                             case 0x0112: if (extendedLength >= 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                             case 0x0113: if (extendedLength >= 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                             case 0x0114: if (extendedLength >= 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                             default: /* Skip unknown inner type */ break;\n                         }\n                         // Position reader at the end of this inner TLV's data payload\n                         buf.readerIndex(extendedDataEndIndex);\n                     }\n                     break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) { // Needs at least mark byte\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            // Inner TLV format: type(1) + length(1) + data\n                            while (buf.readerIndex() <= endIndex - 2) { // Need inner type + inner length header\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte(); // This is data length\n                                int extendedDataEndIndex = buf.readerIndex() + extendedLength;\n\n                                // Validate inner TLV boundaries\n                                if (extendedDataEndIndex > endIndex || extendedLength < 0) {\n                                    // Log.warning(\"Invalid inner TLV length/boundary in 0xFE\");\n                                    break;\n                                }\n                                if (buf.readableBytes() < extendedLength) {\n                                    // Log.warning(\"Insufficient buffer for inner TLV data in 0xFE\");\n                                    break; // Not enough data in buffer for claimed length\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                        }\n                                        break;\n                                    default: /* Skip unknown inner type */ break;\n                                }\n                                // Position reader at the end of this inner TLV's data payload\n                                buf.readerIndex(extendedDataEndIndex);\n                            }\n                            // Check for potential trailing battery byte if structure implies it\n                            if (buf.readerIndex() == endIndex - 1) {\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                        }\n                        // If mark != 0x7C, original code had ambiguous trailing byte read.\n                        // Assuming structure is unknown/unsupported if mark != 0x7C and length > 1.\n                    }\n                    break;\n                default:\n                    // Data for unknown subtype is skipped by readerIndex adjustment below\n                    break;\n            }\n            // Ensure reader index is set to the end of the TLV block,\n            // even if processing failed or didn't consume all bytes.\n            // This prevents infinite loops on malformed data.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}