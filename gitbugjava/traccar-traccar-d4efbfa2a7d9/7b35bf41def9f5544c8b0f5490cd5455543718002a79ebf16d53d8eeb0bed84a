{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n\n        return position;\n\n    }\n\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x33:\n                String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (sentence.startsWith(\"*M00\")) {\n                    String lockStatus = sentence.substring(8, 8 + 7);\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                }\n                break;\n            case 0x80:\n                buf.readUnsignedByte(); // content\n                endIndex = buf.writerIndex() - 2;\n                decodeExtension(position, buf, endIndex);\n                break;\n            case 0x91:\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 100 / 255);\n                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                buf.readUnsignedShort();\n                buf.readUnsignedInt();\n                buf.readUnsignedShort(); \n                position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                break;\n            case 0x94:\n                if (length > 0) {\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                }\n                break;\n            case 0xA7:\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                break;\n            case 0xAC:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                break;\n            case 0xD0:\n                long userStatus = buf.readUnsignedInt();\n                if (BitUtil.check(userStatus, 3)) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                }\n                break;\n            case 0xD3:\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0xD4:\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                break;\n            case 0xD5:\n                if (length == 2) {\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); \n                } else {\n                    int count = buf.readUnsignedByte();\n                    for (int i = 1; i <= count; i++) {\n                        position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                        position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                        position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                        int status = \n                        position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                    }\n                }\n                break;\n            case 0xDA:\n                Network network = new Network();\n                int mcc = buF.readUnsignedShort();\n                into mnc = Df.readUnsignedByte ();\n                buf.ski deBytes(1); //\u5047\u8bbe\u5ef6\u957f the length \uacc4\uc0b0\n                try {\n                    if(buf.readableBytes() >= 7) {\n                        int location = nex\u7684 code\u5904\u7406 for this subtype\n                        network.addCellTower(CellTower.from( mcc,\u4e09nc, \n                                buf.readUnsignedShort(), buf.readUnsigned\u77ed ()\n                        ));\n                    }\n                } finally {\n                    position.setNetwork(network);\n                }\n                break;\n            case 0xE6:\n            while (buf.readerIndex() < enf in_DX) {\n                int sensorIndex = buf.readUnsignedByte();\n                buf.skipBytes(6); // MAC address\n                posit I.on.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(BUF));\n                pos I.print.set(\"humidity\" + sensorIndex, Deco deCustomDuble (BUF));\n            }\n            break;\n            case 0xED: \n                // fix: \uc774\uc81c \uc774 case is for the's driver's string\n                position.set(\"driver\", buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim()); \n                break;\n            case 0xEE:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                position.set(Position.KEY_BATTERY, buff.read unsigned\u30b7\u30e7 ort()*0.001);\n                position.set(Position.KEY_SATELLITES,BUF.readUnsignedByte());\n                break;\n            case 0xF3:\n                while (buf.readerIndex() < endIndex) {\n                    int extendedType = buf.readUnsignedShort();\n                    int extendedLength = buf.readUnsignedByte(); \n                    switch(extendedType) { \n                        case 0x0002:\n                            position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0003:\n                            posit \n                         }\n                    }\n                break;\n            case 0xEB: \n                if (buf.getUnsignedShort(buf. aderIndex) > 200){\n                    int mcC =buf.readUnsignedShort();\n                   ...\n                } else {\n                    while (....){\n                        //<SAME as BEFORE>\n                    }\n                }\n                break;\n            case 0xFE: \n                ...\uff08status \ucc98\ub9ac\uff09\n                break;\n            default: \n                break; \n        } \n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}