{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        // Check for an older format based on fixed remaining length\n        // This check might be too specific, consider removing if causing issues with newer formats\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        // Process TLV (Type-Length-Value) data\n        while (buf.readableBytes() > 2) { // Need at least type (1 byte) and length (1 byte)\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Ensure length doesn't exceed buffer bounds\n            if (endIndex > buf.writerIndex()) {\n                // Log error or break loop? Breaking to prevent further read errors.\n                break;\n            }\n\n            switch (subtype) {\n                case 0x01: // Odometer\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02: // Fuel Level\n                    if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b: // Fuel Consumption (Total?)\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30: // RSSI\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31: // Satellites\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33: // Lock Status String\n                    if (length > 0) {\n                        String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (sentence.startsWith(\"*M00\")) {\n                            try {\n                                String lockStatus = sentence.substring(8, 8 + 7);\n                                position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                            } catch (IndexOutOfBoundsException | NumberFormatException e) {\n                                // Ignore parsing errors\n                            }\n                        }\n                    }\n                    break;\n                case 0x80: // Extension Data (Nested TLVs)\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content type?\n                        // Pass the original endIndex to the extension decoder\n                        decodeExtension(position, buf, endIndex);\n                    }\n                    break;\n                case 0x91: // OBD Data Block 1\n                    if (length >= 19) { // Check minimum expected length\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // Instant Fuel Consumption (L/100km * 100)\n                        position.set(\"averageFuelConsumption\", buf.readUnsignedShort() * 0.01); // Average Fuel Consumption\n                        buf.readUnsignedShort(); // Driving Time (seconds)\n                        buf.readUnsignedInt();   // Mileage (meters)\n                        buf.readUnsignedShort(); // Total Fuel Consumption (0.01L)\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01); // Error Count Fuel Consumption ?\n                    }\n                    break;\n                case 0x94: // VIN\n                    if (length > 0) {\n                        position.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n                    }\n                    break;\n                case 0xA7: // ADC Values\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC: // Odometer (Alternative)\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC: // Driver License Text\n                    if (length > 0) {\n                        String driverLicenseText = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        int nullTerminator = driverLicenseText.indexOf('\\0'); // Handle potential null padding\n                        if (nullTerminator != -1) {\n                            driverLicenseText = driverLicenseText.substring(0, nullTerminator);\n                        }\n                        position.set(\"driver\", driverLicenseText.trim()); // Key expected by test\n                    }\n                    break;\n                case 0xBD: // Driver Number/ID\n                    if (length > 0) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n                    }\n                    break;\n                case 0xD0: // User Status / Alarm\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                        // Potentially decode other status bits here\n                    }\n                    break;\n                case 0xD3: // External Power Voltage\n                    if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4: // Battery Level Percentage\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5: // Lock Status / Battery\n                    if (length == 2) { // Internal battery voltage\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 1) { // Lock details\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2);\n                        if (length >= expectedLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5)); // Bit 5: 0=Locked, 1=Unlocked\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA: // Device Status (String lock related?)\n                    if (length >= 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0)); // Bit 0: 0=disconnected, 1=connected\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2)); // Bit 2: 0=static, 1=moving\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3)); // Bit 3: 0=closed, 1=opened\n                    }\n                    break;\n                case 0xE6: // Temperature/Humidity Sensors\n                    while (buf.readerIndex() < endIndex) {\n                         if (buf.readableBytes() < 1 + 6 + 4 + 1 + 4 + 1) break; // Rough check for needed bytes\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac address\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB: // Network Info / Extended Data\n                    // Heuristic to differentiate: check if MCC looks valid and length is plausible\n                    if (length >= 5 && buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                             if (buf.readableBytes() < 2 + 2 + 1) break; // Need LAC, CID, RSSI\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), // LAC, CID\n                                    buf.readUnsignedByte())); // RSSI\n                        }\n                        if (!network.getCellTowers().isEmpty()) {\n                            position.setNetwork(network);\n                        }\n                    } else { // Assume Extended Data sub-TLV format\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 4) break; // Need length (2) + type (2)\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            int dataLength = extendedLength - 2; // Actual data length\n                            int extendedEndIndex = buf.readerIndex() + dataLength;\n\n                            if (dataLength < 0 || extendedEndIndex > endIndex) break; // Invalid length or exceeds outer boundary\n\n                            switch (extendedType) {\n                                case 0x0001: // Fuel 1\n                                    if (dataLength >= 3) {\n                                        position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                        buf.readUnsignedByte(); // unused\n                                    }\n                                    break;\n                                case 0x0023: // Fuel 2 (ASCII)\n                                    if (dataLength >= 6) {\n                                        try {\n                                            position.set(\"fuel2\", Double.parseDouble(\n                                                    buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                        } catch (NumberFormatException e) { /* ignore */ }\n                                    }\n                                    break;\n                                case 0x00CE: // External Power Voltage\n                                    if (dataLength >= 2) {\n                                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    }\n                                    break;\n                                case 0x00D8: // Single Cell Tower Info\n                                    if (dataLength >= 9) {\n                                        Network network = new Network();\n                                        network.addCellTower(CellTower.from(\n                                                buf.readUnsignedShort(), buf.readUnsignedByte(), // MCC, MNC\n                                                buf.readUnsignedShort(), buf.readUnsignedInt())); // LAC, CID\n                                        position.setNetwork(network);\n                                    }\n                                    break;\n                                case 0xE1: case 0x00E1: // Battery Level Percentage (Allow both types)\n                                    if (dataLength >= 1) {\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    }\n                                    break;\n                                default:\n                                    // Skip unknown extended data handled below by readerIndex update\n                                    break;\n                            }\n                            // Ensure readerIndex is advanced correctly even if data wasn't read fully or skipped\n                            buf.readerIndex(Math.min(extendedEndIndex, endIndex));\n                        }\n                    }\n                    break;\n                case 0xED: // Driver License / ID (Potentially overlaps with 0xBC/0xBD)\n                    if (length > 0) {\n                        String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                        position.set(\"driverLicense\", license); // Use specific key for this type\n                    }\n                    break;\n                case 0xEE: // Combined status: RSSI, Power, Battery, Satellites\n                    if (length >= 6) { // 1 + 2 + 2 + 1\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3: // OBD data block 2 (Sub-TLV structure)\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes() < 3) break; // Need type (2) and length (1)\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        int extendedEndIndex = buf.readerIndex() + extendedLength;\n\n                        if (extendedEndIndex > endIndex) break; // Exceeds outer boundary\n\n                        switch (extendedType) {\n                            case 0x0002: // OBD Speed (km/h * 10)\n                                if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003: // RPM\n                                if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004: // External Power Voltage (mV)\n                                if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005: // OBD Odometer (m * 100) -> hm\n                                if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007: // Instant Fuel Consumption (L/h * 10)\n                                if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008: // Engine Load (% * 10)\n                                if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009: // Coolant Temp (C + 40 offset)\n                                if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B: // Intake Pressure (kPa)\n                                if (extendedLength >= 2) position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C: // Intake Temp (C + 40 offset)\n                                if (extendedLength >= 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D: // Intake Flow (g/s)\n                                if (extendedLength >= 2) position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E: // Throttle Position (% * 100/255 - needs check, assuming 2 bytes like others)\n                                if (extendedLength >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); // Check scaling\n                                break;\n                            case 0x0050: // VIN\n                                if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100: // Trip Mileage (km * 10)\n                                if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102: // Trip Fuel Consumption (L * 10)\n                                if (extendedLength >= 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112: // Hard Acceleration Count\n                                if (extendedLength >= 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113: // Hard Braking Count\n                                if (extendedLength >= 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114: // Hard Cornering Count\n                                if (extendedLength >= 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                // Skip unknown handled below\n                                break;\n                        }\n                        // Ensure readerIndex is advanced correctly\n                        buf.readerIndex(Math.min(extendedEndIndex, endIndex));\n                    }\n                    break;\n                case 0xFE: // Driving behavior / Battery Level\n                    if (length == 1) { // Only battery level\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 2) { // Sub-TLV structure potentially followed by battery level\n                        int marker = buf.getUnsignedByte(buf.readerIndex()); // Peek at marker\n                        if (marker == 0x7C) {\n                            buf.readUnsignedByte(); // Consume marker\n                            while (buf.readerIndex() < endIndex - 1) { // Read sub-TLVs, leave last byte for battery\n                                if (buf.readableBytes() < 2) break; // Need type (1) and length (1)\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int extendedEndIndex = buf.readerIndex() + extendedLength;\n\n                                if (extendedEndIndex > endIndex - 1) break; // Exceeds boundary before last byte\n\n                                switch (extendedType) {\n                                    case 0x01: // Driving behavior alarms\n                                        if (extendedLength >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) {\n                                                position.add(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            }\n                                            if (BitUtil.check(alarms, 1)) {\n                                                position.add(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            }\n                                            if (BitUtil.check(alarms, 2)) {\n                                                // Use generic cornering alarm; specific direction might be elsewhere\n                                                position.add(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            }\n                                            if (BitUtil.check(alarms, 3)) {\n                                                position.add(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            }\n                                            if (BitUtil.check(alarms, 4)) {\n                                                // Could be ALARM_TAMPERING or ALARM_TOWING depending on context\n                                                position.add(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                            }\n                                            // Add more alarms based on bits if documentation available\n                                        }\n                                        break;\n                                    default:\n                                        // Skip unknown handled below\n                                        break;\n                                }\n                                // Ensure readerIndex is advanced correctly\n                                buf.readerIndex(Math.min(extendedEndIndex, endIndex - 1));\n                            }\n                        }\n                        // Read the last byte as battery level if available and expected\n                        if (buf.readerIndex() == endIndex - 1) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype, skip its content handled below\n                    break;\n            }\n\n            // Ensure reader index is set to the end of the TLV block\n            // This handles cases where data was partially read, skipped, or length was incorrect\n            buf.readerIndex(Math.min(endIndex, buf.writerIndex()));\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}