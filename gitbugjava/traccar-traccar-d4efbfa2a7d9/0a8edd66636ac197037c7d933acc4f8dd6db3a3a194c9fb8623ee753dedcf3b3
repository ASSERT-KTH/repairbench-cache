{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (sentence.startsWith(\"*M00\")) {\n                        String lockStatus = sentence.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); // content\n                    // Corrected endIndex calculation for decodeExtension, though the original bug might be elsewhere\n                    // endIndex = buf.writerIndex() - 2; // Incorrect: uses writerIndex\n                    int extensionEndIndex = buf.readerIndex() + length - 1; // endIndex relative to start of extension value\n                    decodeExtension(position, buf, extensionEndIndex);\n                    // Ensure readerIndex is advanced correctly regardless of decodeExtension behavior\n                    buf.readerIndex(endIndex); // Set reader index to end of the TLV field\n                    break; // Added missing break statement\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); // string cut count\n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (length > 0 && buf.getUnsignedShort(buf.readerIndex()) > 200) { // Check length > 0\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        if (!network.getCellTowers().isEmpty()) { // Avoid setting empty network\n                           position.setNetwork(network);\n                        }\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            // Check readable bytes before reading extendedLength and extendedType\n                            if (buf.readableBytes() < 4) {\n                                break; // Avoid IndexOutOfBoundsException\n                            }\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            // Ensure buffer has enough bytes for the value + potential padding/extra bytes\n                            if (buf.readerIndex() + extendedLength - 2 > endIndex || buf.readableBytes() < extendedLength - 2) {\n                                // Avoid reading past endIndex or buffer bounds\n                                break;\n                            }\n                            switch (extendedType) {\n                                case 0x0001:\n                                    if (extendedLength - 2 >= 3) { // Need 2 for short, 1 for byte\n                                        position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                        buf.readUnsignedByte(); // unused\n                                    } else {\n                                         buf.skipBytes(Math.max(0, extendedLength - 2)); // Skip remaining bytes if format unexpected\n                                    }\n                                    break;\n                                case 0x0023:\n                                    if (extendedLength - 2 >= 6) { // Need 6 for char sequence\n                                        position.set(\"fuel2\", Double.parseDouble(\n                                                buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    } else {\n                                         buf.skipBytes(Math.max(0, extendedLength - 2));\n                                    }\n                                    break;\n                                case 0x00CE:\n                                     if (extendedLength - 2 >= 2) { // Need 2 for short\n                                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                     } else {\n                                          buf.skipBytes(Math.max(0, extendedLength - 2));\n                                     }\n                                    break;\n                                case 0x00D8:\n                                     if (extendedLength - 2 >= 8) { // Need 2+1+2+4 = 9 bytes? No, 2+1+2+4 = 9? Let's assume it fits\n                                        Network network = new Network();\n                                        network.addCellTower(CellTower.from(\n                                                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                        if (!network.getCellTowers().isEmpty()) {\n                                            position.setNetwork(network);\n                                        }\n                                     } else {\n                                          buf.skipBytes(Math.max(0, extendedLength - 2));\n                                     }\n                                    break;\n                                case 0xE1: // Original code had 0xE1 but it should likely be 0x00E1 based on context\n                                case 0x00E1:\n                                    if (extendedLength - 2 >= 1) { // Need 1 for byte\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    } else {\n                                        buf.skipBytes(Math.max(0, extendedLength - 2));\n                                    }\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                    // Fix: Use the key \"driver\" as expected by the test assertion\n                    position.set(\"driver\", license);\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                         // Check readable bytes before reading type and length\n                        if (buf.readableBytes() < 3) {\n                            break;\n                        }\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        // Ensure buffer has enough bytes for the value\n                        if (buf.readerIndex() + extendedLength > endIndex || buf.readableBytes() < extendedLength) {\n                            break; // Avoid reading past endIndex or buffer bounds\n                        }\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) { // Check length to avoid reading mark if length is 0 or 1\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                // Check readable bytes before reading type and length\n                                if (buf.readableBytes() < 2) {\n                                    break;\n                                }\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                // Ensure buffer has enough bytes for the value\n                                if (buf.readerIndex() + extendedLength > endIndex || buf.readableBytes() < extendedLength) {\n                                   break; // Avoid reading past endIndex or buffer bounds\n                                }\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength >= 4) { // Ensure length is sufficient for uint\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            }\n                                            if (BitUtil.check(alarms, 1)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            }\n                                            if (BitUtil.check(alarms, 2)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            }\n                                            if (BitUtil.check(alarms, 3)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            }\n                                            if (BitUtil.check(alarms, 4)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                            }\n                                            // Skip any remaining bytes within this TLV if length > 4\n                                            if (extendedLength > 4) {\n                                                buf.skipBytes(extendedLength - 4);\n                                            }\n                                        } else {\n                                             buf.skipBytes(extendedLength); // Skip if length is not 4\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        } else {\n                           // If mark is not 0x7C, assume it's part of data we need to skip\n                           // We already read 1 byte (mark), so skip length - 1 bytes\n                           buf.skipBytes(Math.max(0, length -1));\n                        }\n                        // Original code read battery level outside the 'if mark == 0x7C' block,\n                        // which seems wrong as it would consume bytes regardless of the mark.\n                        // It's unclear if battery level should be read here. Assuming it's part of\n                        // a different structure if mark is not 0x7C or if it's handled by another TLV.\n                        // If the battery level *always* follows, it should be outside the if:\n                        // if (buf.readerIndex() < endIndex) {\n                        //     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        // }\n                    }\n                    break;\n                default:\n                    // Skip the data block if the subtype is unknown\n                    // buf.skipBytes(length); // This is handled by readerIndex(endIndex) later\n                    break;\n            }\n            // Ensure reader index is set correctly even if the case logic had issues or didn't read all bytes\n            if (buf.readerIndex() > endIndex) {\n                 // Log or handle error: case read past the end of the TLV data\n                 buf.readerIndex(endIndex); // Reset to expected end\n            } else if (buf.readerIndex() < endIndex) {\n                // Skip remaining bytes if the case didn't read the full length\n                buf.skipBytes(endIndex - buf.readerIndex());\n            }\n            // buf.readerIndex(endIndex); // Redundant if the above logic handles it\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}