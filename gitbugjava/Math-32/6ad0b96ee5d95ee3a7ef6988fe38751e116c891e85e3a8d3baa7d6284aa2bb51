{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void computeGeometricalProperties() {\n\n        final Vector2D[][] v = getVertices();\n\n        if (v.length == 0) {\n            final BSPTree<Euclidean2D> tree = getTree(false);\n            final Object attribute = tree.getAttribute(); // Get attribute first\n\n            // Check the type of the attribute before casting\n            if (attribute instanceof Boolean) {\n                if ((Boolean) attribute) {\n                    // the instance covers the whole space\n                    setSize(Double.POSITIVE_INFINITY);\n                    setBarycenter(Vector2D.NaN);\n                } else {\n                    // the instance is empty\n                    setSize(0);\n                    setBarycenter(new Vector2D(0, 0));\n                }\n            } else {\n                 // The attribute is not Boolean (e.g., BoundaryAttribute).\n                 // This might happen for degenerate cases or if getVertices() fails\n                 // to extract vertices for a valid but complex/degenerate region.\n                 // Treat as empty in this case.\n                 setSize(0);\n                 setBarycenter(new Vector2D(0, 0));\n            }\n\n        } else if (v[0][0] == null) {\n            // there is at least one open-loop: the polygon is infinite\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            // all loops are closed, we compute some integrals around the shape\n\n            double sum  = 0;\n            double sumX = 0;\n            double sumY = 0;\n\n            for (Vector2D[] loop : v) {\n                double x1 = loop[loop.length - 1].getX();\n                double y1 = loop[loop.length - 1].getY();\n                for (final Vector2D point : loop) {\n                    final double x0 = x1;\n                    final double y0 = y1;\n                    x1 = point.getX();\n                    y1 = point.getY();\n                    final double factor = x0 * y1 - y0 * x1;\n                    sum  += factor;\n                    sumX += factor * (x0 + x1);\n                    sumY += factor * (y0 + y1);\n                }\n            }\n\n            if (sum < 0) {\n                // the polygon represents a finite hole in an infinite domain\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                // the polygon is finite\n                setSize(sum / 2.0);\n                setBarycenter(new Vector2D(sumX / (3.0 * sum), sumY / (3.0 * sum)));\n            }\n\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}