{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) { // n is init or increment\n            recordDepScope(recordNode, ns);\n          } else { // n is condition\n            recordDepScope(nameNode, ns);\n          }\n        } else if (parent.isCall() && n == parent.getFirstChild()) {\n          // When an assignment is the direct target of a call, like\n          // (foo = function() { ... })()\n          // the dependency scope should be the name node itself.\n          // This allows the name analyzer to potentially remove the variable\n          // if the assignment is the only use. Associating it with recordNode\n          // (the call site or broader context) might incorrectly mark the name\n          // as globally referenced. This mirrors the logic for FOR loop\n          // conditions.\n          recordDepScope(nameNode, ns);\n        } else {\n          // Default case: The assignment context (recordNode) determines the\n          // dependency scope.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}