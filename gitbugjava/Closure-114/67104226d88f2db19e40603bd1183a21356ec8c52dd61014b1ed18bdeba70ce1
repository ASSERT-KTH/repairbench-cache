{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // Check if the assignment is the callee expression in a call.\n          // (e.g., (foo = function() {})())\n          // In this case, the assignment itself doesn't constitute a \"use\"\n          // of the assigned variable 'foo' that should prevent its removal\n          // if it's otherwise unused. The *result* of the assignment (the function)\n          // is used by the call, but not the variable itself via a read operation.\n          boolean isAssignmentUsedAsCallee = parent.isCall() && parent.getFirstChild() == n;\n\n          if (!isAssignmentUsedAsCallee) {\n            // Record the dependency scope unless the assignment is immediately\n            // invoked.\n            recordDepScope(recordNode, ns);\n          }\n          // If isAssignmentUsedAsCallee is true, we do nothing here regarding\n          // the dependency scope for the assigned name. The assignment happens,\n          // but we don't mark it in a way that forces the name to be kept if\n          // it's otherwise unreferenced.\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}