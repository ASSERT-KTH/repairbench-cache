{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else if (parent.isCall() && parent.getFirstChild() == n) {\n          // If the assignment is the function expression being called\n          // (e.g., (func = function() {...})()), the call uses the\n          // *result* of the assignment (RHS value), not the LHS variable name\n          // itself directly in this context.\n          // Do not record the call node (which is 'parent' and typically also\n          // 'recordNode' in this context) as a dependency scope for the LHS name (ns).\n          // The assignment itself is still recorded by createNameInformation.\n          // This prevents the call from incorrectly keeping the LHS variable alive\n          // if it's not used elsewhere.\n          // We assume the RHS's dependencies are handled separately during traversal.\n        } else {\n          // Default case: Record the context node (recordNode)\n          // as the dependency scope for the assigned name.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}