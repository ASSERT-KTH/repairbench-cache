{
    "generation": "    /**\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     *\n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     */\n    public static Date parse(String date, ParsePosition pos) throws ParseException {\n        Exception fail = null;\n        try {\n            int offset = pos.getIndex();\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract month\n            int month = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract day\n            int day = parseInt(date, offset, offset += 2);\n            // default time value\n            int hour = 0;\n            int minutes = 0;\n            int seconds = 0;\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n            // if the value has no time component (and no time zone), we are done\n            boolean hasT = checkOffset(date, offset, 'T');\n\n            if (!hasT && (date.length() <= offset)) {\n                Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n                pos.setIndex(offset);\n                return calendar.getTime();\n            }\n\n            if (hasT) {\n\n                // extract hours, minutes, seconds and milliseconds\n                hour = parseInt(date, offset += 1, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n\n                minutes = parseInt(date, offset, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n                // second and milliseconds can be optional\n                if (date.length() > offset) {\n                    char c = date.charAt(offset);\n                    if (c != 'Z' && c != '+' && c != '-') {\n                        seconds = parseInt(date, offset, offset += 2);\n                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                        // milliseconds can be optional in the format\n                        if (checkOffset(date, offset, '.')) {\n                            offset += 1;\n                            int endOffset = indexOfNonDigit(date, offset + 1); // Find first non-digit\n                            int parseEndOffset = Math.min(endOffset, offset + 3); // Parse up to 3 digits\n                            int fraction = parseInt(date, offset, parseEndOffset);\n                            // compensate for \"missing\" digits\n                            switch (parseEndOffset - offset) { // number of digits parsed\n                                case 2:\n                                    milliseconds = fraction * 10;\n                                    break;\n                                case 1:\n                                    milliseconds = fraction * 100;\n                                    break;\n                                default: // Case 3 or more digits, just use the first 3.\n                                    milliseconds = fraction;\n                            }\n                            offset = endOffset; // Advance past all fractional digits\n                        }\n                    }\n                }\n            }\n\n            // extract timezone\n            if (date.length() <= offset) {\n                throw new IllegalArgumentException(\"No time zone indicator\");\n            }\n\n            TimeZone timezone;\n            char timezoneIndicator = date.charAt(offset);\n\n            if (timezoneIndicator == 'Z') {\n                timezone = TIMEZONE_UTC;\n                offset += 1;\n            } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                String timezoneOffset = date.substring(offset);\n                // Store the original length to advance the offset later\n                int timezoneOffsetOriginalLength = timezoneOffset.length();\n\n                // Normalize timezone offset\n                // Valid formats: +hh, +hhmm, +hh:mm\n                // Need to convert to GMT+hh:mm or GMT-hh:mm for TimeZone.getTimeZone\n                String normalizedTimezoneOffset;\n                if (timezoneOffset.equals(\"+0000\") || timezoneOffset.equals(\"+00:00\") ||\n                    timezoneOffset.equals(\"-0000\") || timezoneOffset.equals(\"-00:00\")) {\n                    // Special case for explicit UTC offsets\n                    timezone = TIMEZONE_UTC;\n                    normalizedTimezoneOffset = \"+00:00\"; // Use a normalized form for consistency if needed\n                } else {\n                    normalizedTimezoneOffset = timezoneOffset;\n                    // Append \":00\" if the offset is in the format \"+hh\" or \"-hh\" (length 3)\n                    if (normalizedTimezoneOffset.length() == 3) {\n                        normalizedTimezoneOffset += \":00\";\n                    }\n                    // Insert \":\" if the offset is in the format \"+hhmm\" or \"-hhmm\" (length 5)\n                    else if (normalizedTimezoneOffset.length() == 5) {\n                        normalizedTimezoneOffset = normalizedTimezoneOffset.substring(0, 3) + \":\" + normalizedTimezoneOffset.substring(3);\n                    }\n\n                    // Check if the resulting offset has the expected format \"+/-hh:mm\" (length 6)\n                    if (normalizedTimezoneOffset.length() != 6) {\n                        throw new IndexOutOfBoundsException(\"Invalid time zone indicator length: \" + timezoneOffset);\n                    }\n\n                    // Construct the timezone ID and attempt to parse it\n                    String timezoneId = \"GMT\" + normalizedTimezoneOffset;\n                    timezone = TimeZone.getTimeZone(timezoneId);\n\n                    // Verify that TimeZone.getTimeZone successfully parsed the specific offset\n                    // It might return GMT (offset 0) for invalid IDs (e.g., GMT+99:99)\n                    String obtainedTimezoneId = timezone.getID();\n                    if (!obtainedTimezoneId.equals(timezoneId)) {\n                        // If the obtained ID doesn't match the requested ID, consider it a failure.\n                        // This handles cases where the offset format is valid but the value is out of range,\n                        // or other parsing issues where TimeZone.getTimeZone defaults to GMT.\n                        throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneOffset + \" given, resolves to \" + obtainedTimezoneId);\n                    }\n                }\n                 // Advance the offset by the length of the original timezone string\n                 offset += timezoneOffsetOriginalLength;\n\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n            // If we get a ParseException it'll already have the right message/offset.\n            // Other exception types can convert here.\n        } catch (IndexOutOfBoundsException e) {\n            fail = e;\n        } catch (NumberFormatException e) {\n            fail = e;\n        } catch (IllegalArgumentException e) {\n            fail = e;\n        }\n        String input = (date == null) ? null : ('\"' + date + \"'\");\n        String msg = fail.getMessage();\n        if (msg == null || msg.isEmpty()) {\n            msg = \"(\" + fail.getClass().getName() + \")\";\n        }\n        ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n        ex.initCause(fail);\n        throw ex;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}