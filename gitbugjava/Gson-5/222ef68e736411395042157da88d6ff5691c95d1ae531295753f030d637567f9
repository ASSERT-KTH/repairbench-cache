{
    "generation": "import java.text.ParseException;\nimport java.text.ParsePosition;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.TimeZone;\n\n/**\n * Contains helper methods for date parsing and formatting.\n */\n// Assume this class exists and provides the necessary helper methods and constants.\nclass Iso8601Utils {\n    // Assume TIMEZONE_UTC is defined correctly, e.g.:\n    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(\"UTC\");\n\n    // Assume helper methods exist and are correct:\n    private static boolean checkOffset(String value, int offset, char expected) {\n        return (offset < value.length()) && (value.charAt(offset) == expected);\n    }\n\n    private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\n        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\n            throw new NumberFormatException(value);\n        }\n        // Check if characters are digits\n        int result = 0;\n        int i = beginIndex;\n        if (i < endIndex) {\n             char c = value.charAt(i);\n             // Check for sign if needed, but ISO dates don't have signed years here typically.\n             // Skip sign handling for simplicity based on context. Assume positive numbers.\n             if(!Character.isDigit(c)) {\n                 throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n             }\n        } else {\n             throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n        }\n\n        while (i < endIndex) {\n            char c = value.charAt(i);\n            if (!Character.isDigit(c)) {\n                 throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n            }\n            result *= 10;\n            result += Character.digit(c, 10);\n            i++;\n        }\n        return result;\n    }\n\n     private static int indexOfNonDigit(String string, int offset) {\n        for (int i = offset; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c < '0' || c > '9') return i;\n        }\n        return string.length();\n    }\n\n\n    /**\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     *\n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     */\n    public static Date parse(String date, ParsePosition pos) throws ParseException {\n        Exception fail = null;\n        try {\n            int offset = pos.getIndex();\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract month\n            int month = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract day\n            int day = parseInt(date, offset, offset += 2);\n            // default time value\n            int hour = 0;\n            int minutes = 0;\n            int seconds = 0;\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n            // if the value has no time component (and no time zone), we are done\n            boolean hasT = checkOffset(date, offset, 'T');\n\n            if (!hasT && (date.length() <= offset)) {\n                // No time, no timezone specified. Original code used default/local timezone. Retain that behavior.\n                Calendar calendar = new GregorianCalendar(year, month - 1, day);\n                pos.setIndex(offset);\n                return calendar.getTime();\n            }\n\n            if (hasT) {\n                offset += 1; // Consume 'T'\n                // extract hours, minutes, seconds and milliseconds\n                hour = parseInt(date, offset, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n\n                minutes = parseInt(date, offset, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n                // second and milliseconds can be optional\n                if (date.length() > offset) {\n                    char c = date.charAt(offset);\n                    if (c != 'Z' && c != '+' && c != '-') {\n                        seconds = parseInt(date, offset, offset += 2);\n                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                        // milliseconds can be optional in the format\n                        if (checkOffset(date, offset, '.')) {\n                            offset += 1;\n                            int endOffset = indexOfNonDigit(date, offset); // Find end of digit sequence\n                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                            int fraction = parseInt(date, offset, parseEndOffset);\n                            // compensate for \"missing\" digits\n                            switch (parseEndOffset - offset) { // number of digits parsed\n                            case 2:\n                                milliseconds = fraction * 10;\n                                break;\n                            case 1:\n                                milliseconds = fraction * 100;\n                                break;\n                            default: // 3 or more digits, only first 3 matter\n                                milliseconds = fraction;\n                            }\n                            offset = endOffset; // Move offset past all fractional second digits\n                        }\n                    }\n                }\n            }\n\n            // extract timezone\n            if (date.length() <= offset) {\n                // If 'T' was present, time zone is mandatory.\n                throw new IllegalArgumentException(\"No time zone indicator found after time\");\n            }\n\n            int timezoneOffsetMillis = 0;\n            char timezoneIndicator = date.charAt(offset);\n\n            if (timezoneIndicator == 'Z') {\n                // UTC timezone\n                offset += 1;\n            } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                String timezoneOffsetStr = date.substring(offset);\n                int sign = timezoneIndicator == '-' ? -1 : 1;\n                int hoursOffset;\n                int minutesOffset = 0; // Default to 0 minutes offset\n\n                // Minimum length is 3 for sign + hh, e.g., \"+01\"\n                if (timezoneOffsetStr.length() >= 3) {\n                    hoursOffset = parseInt(date, offset + 1, offset + 3);\n                    offset += 3; // Consumed sign and hh\n\n                    // Check for optional minutes part: \":mm\" or \"mm\"\n                    if (offset < date.length()) {\n                         if (date.charAt(offset) == ':') {\n                            // Format is +hh:mm\n                            if (offset + 3 <= date.length()) { // Check length for :mm\n                                minutesOffset = parseInt(date, offset + 1, offset + 3);\n                                offset += 3; // Consumed :mm\n                            } else {\n                                throw new IndexOutOfBoundsException(\"Invalid time zone format: incomplete :mm\");\n                            }\n                         } else if (Character.isDigit(date.charAt(offset))) {\n                             // Try format +hhmm\n                             if (offset + 2 <= date.length() && Character.isDigit(date.charAt(offset+1))) {\n                                 minutesOffset = parseInt(date, offset, offset + 2);\n                                 offset += 2; // Consumed mm\n                             } else {\n                                 // Only one digit after hh - invalid format? Or just hh?\n                                 // ISO 8601 allows Z, \u00b1hh:mm, \u00b1hhmm, \u00b1hh.\n                                 // If it's not ':', not 'mm', then it must be just hh.\n                                 // Let minutesOffset remain 0. The offset was already advanced by 3.\n                             }\n                         }\n                         // Else: Character after hh is neither ':' nor digit, implies format was just \u00b1hh.\n                    }\n                    // Format was just \u00b1hh if we reach here without consuming more chars\n\n                    if (hoursOffset > 23 || minutesOffset > 59) {\n                         throw new IllegalArgumentException(\"Invalid time zone offset: \" + timezoneOffsetStr.substring(0, Math.min(timezoneOffsetStr.length(), 6))); // Show only relevant part\n                    }\n\n                    timezoneOffsetMillis = sign * (hoursOffset * 3600 + minutesOffset * 60) * 1000;\n\n                } else {\n                    // Timezone string like \"+\" or \"+1\" is too short\n                    throw new IndexOutOfBoundsException(\"Invalid time zone offset format: \" + timezoneOffsetStr);\n                }\n            } else {\n                 throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");\n            }\n\n            // Use UTC calendar to compute base milliseconds since epoch\n            Calendar calendar = new GregorianCalendar(TIMEZONE_UTC);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            pos.setIndex(offset);\n\n            // Adjust the UTC time by the parsed timezone offset.\n            // calendar.getTimeInMillis() gives the epoch millis if the time (h,m,s) were UTC.\n            // To get the actual epoch millis, we subtract the offset.\n            // Example: 1am +01:00 is midnight UTC. timeInMillis is for 1am UTC. 1am UTC - 1hr = midnight UTC.\n            long timeInMillis = calendar.getTimeInMillis();\n            long adjustedTimeInMillis = timeInMillis - timezoneOffsetMillis;\n\n            return new Date(adjustedTimeInMillis);\n\n        } catch (IndexOutOfBoundsException e) {\n            fail = e;\n        } catch (NumberFormatException e) {\n            fail = e;\n        } catch (IllegalArgumentException e) {\n            fail = e;\n        }\n        String input = (date == null) ? null : ('\"' + date + '\"');\n        String msg = (fail != null) ? fail.getMessage() : \"Unknown error\";\n        if (msg == null || msg.isEmpty()) {\n            msg = \"(\" + fail.getClass().getName() + \")\";\n        }\n        ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n        if (fail != null) {\n             ex.initCause(fail);\n        }\n        throw ex;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}