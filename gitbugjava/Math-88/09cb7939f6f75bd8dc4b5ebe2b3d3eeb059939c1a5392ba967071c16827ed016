{
    "generation": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        // Determine the shift value for potentially unrestricted variables\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        \n        for (int i = 0; i < coefficients.length; i++) {\n            // Find the row corresponding to the i-th variable\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            \n            // The value of the variable is the RHS value in the basic row\n            // or 0 if the variable is non-basic.\n            // Apply the shift adjustment for unrestricted variables.\n            coefficients[i] =\n                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                (restrictToNonNegative ? 0 : mostNegative);\n\n            // The nested loop below was incorrect and caused basic variables\n            // to be wrongly assigned a value of 0. It has been removed.\n            /*\n            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                         coefficients[i] = 0;\n                    }\n                }\n            }\n            */\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}