{
    "generation": "import java.io.IOException;\nimport java.io.Writer;\n\n// Assuming this method is part of a class that has access to an entity lookup mechanism\n// via a method like `this.entityName(int codepoint)` or `this.entityName(char c)`.\n// The fix below adapts the original structure to handle Unicode supplementary characters\n// correctly by iterating through codepoints instead of chars.\n\npublic class StringEscapeUtils { // Placeholder class for context\n\n    // Assuming this method exists and looks up entity names for characters.\n    // It might accept char or int codepoint based on the actual implementation.\n    // The fix below assumes it exists and is named `entityName`.\n    // If it only accepts `char`, the logic handles that case.\n    // If it accepts `int`, the logic can be slightly simplified but the one below works too.\n    private String entityName(int codepoint) {\n        // In a real scenario, this would look up the entity name from a map.\n        // Example for demonstration:\n        if (codepoint == '<') return \"lt\";\n        if (codepoint == '>') return \"gt\";\n        if (codepoint == '&') return \"amp\";\n        if (codepoint == '\"') return \"quot\";\n        // ... etc.\n        // Return null if no specific entity name exists for the codepoint.\n        // This placeholder assumes it can handle int codepoints, but the logic\n        // inside the escape method adapts if it only handles char.\n        if (codepoint > 0xFFFF) { // Supplementary characters rarely have named entities\n             return null;\n        }\n        return entityName((char)codepoint); // Delegate to a hypothetical char version if needed\n    }\n     private String entityName(char c) {\n        // Hypothetical char version for lookup\n        if (c == '<') return \"lt\";\n        if (c == '>') return \"gt\";\n        if (c == '&') return \"amp\";\n        if (c == '\"') return \"quot\";\n         // ... etc. for BMP characters\n         return null;\n     }\n\n\n    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     *\n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     *\n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) {\n            int codePoint = str.codePointAt(i);\n            String entityName = null;\n\n            // Check for named entities only for BMP characters for safety,\n            // assuming entityName might only handle char or basic int codepoints.\n            // Supplementary characters are unlikely to have named entities anyway.\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                entityName = this.entityName(codePoint); // Try lookup using codepoint (might delegate to char version)\n            }\n\n            if (entityName == null) {\n                // No named entity, check if numeric escaping is needed.\n                // Escape characters > 0x7F (non-ASCII)\n                // Also escape supplementary characters (which are > 0x7F anyway)\n                if (codePoint > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint, 10));\n                    writer.write(';');\n                } else {\n                    // ASCII character (0-127) without a named entity, write directly.\n                    writer.write(codePoint);\n                }\n            } else {\n                // Found a named entity\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n\n            // Advance index by 1 for BMP characters, 2 for supplementary characters\n            i += Character.charCount(codePoint);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}