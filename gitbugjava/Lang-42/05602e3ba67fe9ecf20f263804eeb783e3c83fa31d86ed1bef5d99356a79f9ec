{
    "generation": "import java.io.IOException;\nimport java.io.Writer;\n\n// This is a placeholder for the context. The actual class would have the\n// entityName method or access to it.\nabstract class EscapeContext {\n    // Assume this method exists and correctly maps a Unicode codepoint to its HTML entity name\n    abstract String entityName(int codepoint);\n\n    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     *\n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             or {@link Writer#write(String)} methods.\n     *\n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        // Use codePointAt to iterate through Unicode codepoints correctly,\n        // handling supplementary characters (those outside the BMP).\n        for (int i = 0; i < len; ) {\n            int codepoint = str.codePointAt(i);\n            // Check if the codepoint has a known entity name.\n            // Assuming entityName takes an int codepoint.\n            String entityName = this.entityName(codepoint);\n\n            if (entityName == null) {\n                // No specific entity name found.\n                // Escape non-ASCII characters numerically.\n                // This includes supplementary characters and characters > 127\n                // that don't have a named entity.\n                if (codepoint > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codepoint, 10));\n                    writer.write(';');\n                } else {\n                    // Write ASCII characters (<= 0x7F) directly.\n                    // Writer.write(int) handles single chars correctly.\n                    writer.write(codepoint);\n                }\n            } else {\n                // Write the named entity.\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n\n            // Advance the index by the number of characters (UTF-16 code units)\n            // consumed by the current codepoint. This will be 1 for BMP characters\n            // and 2 for supplementary characters (forming a surrogate pair).\n            i += Character.charCount(codepoint);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}