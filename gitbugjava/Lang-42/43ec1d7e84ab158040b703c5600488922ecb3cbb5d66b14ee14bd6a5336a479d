{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) { // Iterate by code point, not char\n            int codePoint = str.codePointAt(i);\n\n            // Handle supplementary characters (those outside the Basic Multilingual Plane)\n            if (Character.isSupplementaryCodePoint(codePoint)) {\n                // Always escape supplementary characters numerically using their code point value\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codePoint, 10));\n                writer.write(';');\n            } else {\n                // Handle BMP characters (like the original logic)\n                char c = (char) codePoint;\n                // Try to find a named entity for the character\n                String entityName = this.entityName(c);\n                if (entityName == null) {\n                    // No named entity found\n                    // If the character is outside ASCII range (0-127), escape it numerically\n                    if (c > 0x7F) {\n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(c, 10)); // Use the char value (same as codePoint for BMP)\n                        writer.write(';');\n                    } else {\n                        // If the character is within ASCII range and has no entity name, write it directly\n                        writer.write(c);\n                    }\n                } else {\n                    // Found a named entity, write it\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            }\n            \n            // Advance the index by the number of characters (char units) used by the current code point\n            // This will be 1 for BMP characters and 2 for supplementary characters\n            i += Character.charCount(codePoint);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}