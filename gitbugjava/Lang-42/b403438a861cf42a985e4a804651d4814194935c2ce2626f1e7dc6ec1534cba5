{
    "generation": "import java.io.IOException;\nimport java.io.Writer;\n\n// Assuming this is part of a class with an entityName(int) method\n// e.g. abstract class Entities { abstract String entityName(int codepoint); ... }\npublic class EscapeFix { // Helper class for context, replace with actual class name if known\n\n    // Assume this method exists and correctly handles lookup for any codepoint\n    // For the fix, we don't need its implementation, just its assumed signature/behavior.\n    private String entityName(int codepoint) {\n        // Dummy implementation for compilation, replace with actual context\n        if (codepoint == '<') return \"lt\";\n        if (codepoint == '>') return \"gt\";\n        if (codepoint == '&') return \"amp\";\n        if (codepoint == '\"') return \"quot\";\n        // ... potentially many more ...\n        return null; // Default: no specific entity name\n    }\n\n    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     *\n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     *\n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            // Use codePointAt to handle supplementary characters (code points > 0xFFFF)\n            int codepoint = str.codePointAt(i);\n\n            // If the code point is supplementary, it consumes two char positions in the string.\n            // Advance the loop index accordingly.\n            if (Character.isSupplementaryCodePoint(codepoint)) {\n                i++;\n            }\n\n            // Check if there's a named entity for this code point\n            String entityName = this.entityName(codepoint); // Pass the full code point\n\n            if (entityName == null) {\n                // No named entity found.\n                // Escape non-ASCII characters (codepoint > 0x7F) using numeric entities.\n                // This now correctly handles supplementary characters as well.\n                if (codepoint > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codepoint, 10)); // Use the full code point value\n                    writer.write(';');\n                } else {\n                    // It's an ASCII character (<= 0x7F) and doesn't have a named entity.\n                    // Write it directly. Writer.write(int) handles this correctly.\n                    writer.write(codepoint);\n                }\n            } else {\n                // Found a named entity (e.g., &amp;, &lt;, &gt;, &quot;). Write it.\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}