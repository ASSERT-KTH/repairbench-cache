{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     *\n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     *\n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            int codepoint = str.codePointAt(i); // Get the codepoint at index i\n\n            // Check if the codepoint is supplementary (requires two chars)\n            if (codepoint > 0xFFFF) {\n                // It's a supplementary character (like U+1D362).\n                // Escape it numerically. Named entities are not typically used for supplementary characters.\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codepoint, 10));\n                writer.write(';');\n                i++; // Increment i because codePointAt() consumed two chars (high and low surrogate)\n            } else {\n                // It's a BMP character (fits in a single char)\n                char c = (char) codepoint; // Cast codepoint to char\n                String entityName = this.entityName(c); // Check for named entity\n                if (entityName == null) {\n                    // No named entity found. Check if the character needs escaping.\n                    // The original code escaped characters > 0x7F numerically.\n                    if (c > 0x7F) {\n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(c, 10)); // Use the char value (codepoint for BMP)\n                        writer.write(';');\n                    } else {\n                        // ASCII character (<= 0x7F), write directly\n                        writer.write(c);\n                    }\n                } else {\n                    // Found a named entity, write it\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}