{
    "generation": "    @Override\n    public String toString() {\n        if (rangesList.isEmpty()) {\n            return \"\"; // Or throw an IllegalArgumentException, depending on desired behavior for empty ranges\n        }\n\n        // If there's only one range clause, we might need to omit outer parentheses\n        // that are typically added for clarity in compound expressions.\n        if (rangesList.size() == 1) {\n            String formattedSingleRange = rangesList.get(0).formatRanges();\n            \n            // Check if the formatted string starts and ends with parentheses and is not just \"()\".\n            // The length check (> 2) prevents issues with empty or single-character strings\n            // and ensures there's content between the parentheses.\n            if (formattedSingleRange.length() > 2 &&\n                formattedSingleRange.startsWith(\"(\") && formattedSingleRange.endsWith(\")\")) {\n                \n                // Perform a balance check to ensure these are truly the outermost enclosing parentheses\n                // and not an internal set of parentheses that are part of a more complex structure.\n                int balance = 0;\n                boolean isEntirelyEnclosed = true;\n                // Iterate through the string segment *between* the assumed outer parentheses.\n                for (int i = 1; i < formattedSingleRange.length() - 1; i++) {\n                    char c = formattedSingleRange.charAt(i);\n                    if (c == '(') {\n                        balance++;\n                    } else if (c == ')') {\n                        balance--;\n                    }\n                    // If balance drops below zero, it means an unmatched closing parenthesis\n                    // was encountered, indicating these are not the simple outermost parentheses.\n                    if (balance < 0) {\n                        isEntirelyEnclosed = false;\n                        break;\n                    }\n                }\n                \n                // If balance is zero at the end, it means all inner parentheses are balanced,\n                // and the outermost ones truly enclose the entire expression.\n                if (balance == 0 && isEntirelyEnclosed) {\n                    return formattedSingleRange.substring(1, formattedSingleRange.length() - 1);\n                }\n            }\n            // If it doesn't meet the criteria for stripping, return as is.\n            return formattedSingleRange;\n        }\n\n        // For multiple range clauses, join them with the OR_JOINER.\n        // Each clause's formatRanges() should ideally already handle its own internal AND/parentheses.\n        return rangesList.stream()\n            .map(RangesList::formatRanges)\n            .collect(joining(OR_JOINER));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}