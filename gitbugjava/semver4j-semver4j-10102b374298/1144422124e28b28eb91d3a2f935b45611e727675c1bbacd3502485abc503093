{
    "generation": "    @Override\n    public String toString() {\n        // Format each individual range set (AND-group)\n        // Assuming RangesList::formatRanges formats a single List<Range> potentially adding parentheses\n        List<String> formattedRanges = rangesList.stream()\n                                          .map(RangesList::formatRanges)\n                                          .collect(Collectors.toList());\n\n        // If there's only one range set, return its representation.\n        // We need to omit the outer parentheses potentially added by formatRanges,\n        // as they are redundant when there's only one set.\n        if (formattedRanges.size() == 1) {\n            String singleRangeString = formattedRanges.get(0);\n            // Simple check to remove potentially added outer parentheses\n            if (singleRangeString.startsWith(\"(\") && singleRangeString.endsWith(\")\")) {\n                // Remove parentheses only if they form a matching pair around the content\n                return singleRangeString.substring(1, singleRangeString.length() - 1);\n            } else {\n                // Return as is if no parentheses or they don't seem to be outer ones\n                return singleRangeString;\n            }\n        } else if (formattedRanges.isEmpty()) {\n             // Define behavior for an empty RangesList, returning \"\" seems reasonable.\n             return \"\";\n        } else {\n            // If there are multiple range sets (OR-groups), join them with the OR_JOINER.\n            // In this case, parentheses added by formatRanges (if any) are useful for grouping.\n            return String.join(OR_JOINER, formattedRanges);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}