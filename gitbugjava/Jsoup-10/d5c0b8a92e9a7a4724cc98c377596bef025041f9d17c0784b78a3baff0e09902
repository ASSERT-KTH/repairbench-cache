{
    "generation": "import java.net.MalformedURLException;\nimport java.net.URL;\nimport org.jsoup.helper.Validate;\n\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        }\n\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl); // If relUrl is absolute, this works. Otherwise, throws MalformedUrlException\n                return abs.toExternalForm();\n            }\n\n            // Manually handle the case where the relative URL starts with \"?\", as java.net.URL struggles with this\n            // See https://stackoverflow.com/questions/8603430/java-net-url-malformedurl P bug\n            if (relUrl.startsWith(\"?\")) {\n                 // Find the position of the existing query string, if any\n                String basePart = baseUri;\n                int queryPos = basePart.indexOf('?');\n                 // If a query string exists, remove it from the base part\n                if (queryPos != -1) {\n                    basePart = basePart.substring(0, queryPos);\n                }\n                 // Manually construct the full URL string by appending the relative query\n                String combinedUrlStr = basePart + relUrl;\n                 // Try parsing the manually constructed URL to ensure it's valid\n                try {\n                    URL combinedUrl = new URL(combinedUrlStr);\n                    return combinedUrl.toExternalForm();\n                } catch (MalformedURLException e) {\n                    // If the combined URL is malformed, return an empty string\n                    return \"\";\n                }\n            }\n\n            // If we are here, baseUri is valid and relUrl doesn't start with '?'\n            // Use the standard URL constructor for resolution\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n\n        } catch (MalformedURLException e) {\n            // This outer catch handles:\n            // 1. MalformedURLException from `new URL(relUrl)` when baseUri is malformed and relUrl is not absolute.\n            // 2. MalformedURLException from `new URL(base, relUrl)` when baseUri is ok but resolution fails.\n            return \"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}