{
    "generation": "import java.net.MalformedURLException;\nimport java.net.URL;\nimport org.jsoup.helper.Validate;\n\n// Assume this code is part of a class that provides the following abstract methods:\n// abstract String attr(String key);\n// abstract boolean hasAttr(String key);\n// abstract String baseUri(); // Method to get the base URI string\n\npublic abstract class NodeStub { // Renamed to NodeStub for clarity in this context\n    abstract String attr(String key);\n    abstract boolean hasAttr(String key);\n    abstract String baseUri();\n\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // Attribute missing, nothing to resolve.\n        }\n\n        String relUrl = attr(attributeKey);\n        // Get base URI string from node. It might be null or empty.\n        String baseUriStr = baseUri();\n\n        URL baseUrl = null;\n        try {\n            // Try to parse the base URI. Handles null or empty strings.\n            try {\n                baseUrl = new URL(baseUriStr);\n            } catch (MalformedURLException e) {\n                // Base URI is invalid. If relUrl is an absolute URL, we can still use it.\n                URL abs = new URL(relUrl); // If relUrl is not absolute, this throws MalformedURLException too\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            // Either baseUriStr was invalid AND relUrl was not a valid absolute URL,\n            // or baseUriStr was null/empty AND relUrl was not absolute.\n            return \"\"; // Cannot make an absolute URL\n        }\n\n        // Base URI was parsed successfully into baseUrl, now resolve the relative URL.\n        try {\n            // FIX: Handle the case where the relative URL starts with \"?\".\n            // java.net.URL class resolution has known bugs handling this correctly\n            // when the base path contains a filename (it might drop the filename).\n            // Example: base=\"http://host/path/file?query\", rel=\"?new\" -> should be \"http://host/path/file?new\"\n            // but constructor might yield \"http://host/path/?new\".\n            // Manually constructing the URL ensures the path part is preserved.\n            if (relUrl.startsWith(\"?\")) {\n                // Find the start of the query or fragment in the base URI string\n                int queryPos = baseUriStr.indexOf('?');\n                int fragmentPos = baseUriStr.indexOf('#');\n                int endPos = -1;\n\n                if (queryPos != -1) {\n                    endPos = queryPos;\n                }\n                // Use the earlier position if both exist\n                if (fragmentPos != -1 && (endPos == -1 || fragmentPos < endPos)) {\n                    endPos = fragmentPos;\n                }\n\n                String basePart;\n                if (endPos != -1) {\n                    // Truncate the base URI string before the query/fragment\n                    basePart = baseUriStr.substring(0, endPos);\n                } else {\n                    // No query or fragment in base URI\n                    basePart = baseUriStr;\n                }\n\n                // Combine the base path part with the new query string.\n                // Create a new URL from the combined string to validate and normalize.\n                URL abs = new URL(basePart + relUrl);\n                return abs.toExternalForm();\n            } else {\n                 // For all other cases (absolute URL, path-relative URL, fragment-only URL, etc.),\n                 // use the standard URL(context, spec) constructor for resolution.\n                URL abs = new URL(baseUrl, relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            // Resolution failed (e.g., relUrl is invalid relative to base, or the manual combination failed)\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}