{
    "generation": "import java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport org.jsoup.helper.Validate; // Assuming Validate is in this package\n\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        }\n\n        String relUrl = attr(attributeKey);\n\n        // Attempt 1: Check if relUrl is already an absolute URL.\n        try {\n            URL abs = new URL(relUrl);\n            // If parsing succeeds, assume it's absolute and return directly.\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            // It's not an absolute URL, or has syntax errors. Fall through to resolve against baseUri.\n        }\n\n        // Attempt 2: Resolve relUrl against the baseUri.\n        // Need a valid baseUri for this.\n        if (baseUri == null || baseUri.isEmpty()) {\n            return \"\"; // No baseUri, cannot resolve.\n        }\n\n        try {\n            URL base;\n            // Check if baseUri is a valid URL.\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // baseUri is malformed, cannot resolve.\n                return \"\";\n            }\n\n            // Use java.net.URI for robust resolution, it handles cases like \"?query\" correctly.\n            // See https://stackoverflow.com/a/42148594/92493 for details.\n            URI baseUriObj = new URI(baseUri);\n            URI resolvedUri = baseUriObj.resolve(relUrl); // Resolve the relative URL\n            return resolvedUri.toURL().toExternalForm(); // Convert resolved URI back to URL string\n\n        } catch (MalformedURLException e) {\n            // Can be thrown by resolvedUri.toURL() if the resolved URI is not a valid URL\n            // (e.g., wrong scheme that URL doesn't support, but URI does).\n            return \"\";\n        } catch (URISyntaxException e) {\n            // Can be thrown by new URI(baseUri) if baseUri has syntax errors not caught by new URL().\n            return \"\";\n        } catch (IllegalArgumentException e) {\n            // Can be thrown by baseUriObj.resolve(relUrl) if relUrl contains invalid characters,\n            // or by new URI(baseUri) if baseUri is opaque.\n            return \"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}