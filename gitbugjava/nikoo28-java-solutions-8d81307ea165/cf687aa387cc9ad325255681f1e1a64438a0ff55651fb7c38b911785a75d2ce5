{
    "generation": "public int[] calculateSpans(int[] prices) {\n    int[] spans = new int[prices.length];\n    if (prices.length == 0) {\n        return spans;\n    }\n    spans[0] = 1; // span of the first element is 1\n    Stack<Integer> indexStack = new Stack<>();\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n        // Pop elements while the top of stack is less than current price\n        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {\n            indexStack.pop();\n        }\n\n        // If stack becomes empty, span is i+1, else i - index of the element\n        if (indexStack.isEmpty()) {\n            spans[i] = i + 1;\n        } else {\n            spans[i] = i - indexStack.peek();\n        }\n\n        // Push current index onto stack\n        indexStack.push(i);\n    }\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}