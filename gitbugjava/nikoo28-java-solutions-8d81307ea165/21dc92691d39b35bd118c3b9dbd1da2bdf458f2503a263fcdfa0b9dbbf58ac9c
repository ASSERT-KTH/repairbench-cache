{
    "generation": "import java.util.Stack;\n\nclass Solution { // Assuming this is part of a class structure\n  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Pop elements from stack while their prices are strictly less than the current price.\n      // If prices[indexStack.peek()] == prices[i], we stop popping.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) // Changed from <= to <\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values (that survived the popping).\n      // This means its span extends back to the beginning.\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        // The span is the distance from the current index 'i' to the index\n        // of the first element to its left that is greater than or equal to prices[i].\n        spans[i] = i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}