{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Original condition: prices[indexStack.peek()] <= prices[i]\n      // Changed to '<' to satisfy the test case where equal preceding prices\n      // should result in a span of 1 for the current price.\n      // This loop now pops elements from the stack as long as their price\n      // is strictly less than the current price.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // FIX: Changed <= to <\n        indexStack.pop();\n      }\n\n      // If index stack is empty, it means all previous prices were strictly\n      // less than prices[i]. So, prices[i] is greater than all previous values.\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // indexStack.peek() now holds the index of the nearest previous element\n        // whose price is greater than or equal to prices[i].\n        // The span is the distance from the current day to that day.\n        spans[i] = i - indexStack.peek();\n      }\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}