{
    "generation": "import java.util.Stack;\n\nclass Solution {\n  /**\n   * Calculates the stock span for each day.\n   * The span of the stock's price on a given day is defined as the maximum\n   * number of consecutive days (starting from that day and going backward)\n   * for which the stock price was less than or equal to the price of that day.\n   *\n   * NOTE: The provided failing test implies a different definition where equal\n   * prices do not extend the span. This fix adheres to the failing test's expectation.\n   *\n   * @param prices An array of stock prices for consecutive days.\n   * @return An array where the i-th element is the span for day i.\n   */\n  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    // Span of first element is always 1\n    if (prices.length == 0) {\n        return spans;\n    }\n    spans[0] = 1;\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Pop indices from stack while stack is not empty and the price at the\n      // top of the stack is strictly less than the current price.\n      // The original code used <=, which caused the test testCalculateSpans6\n      // with input {10, 10, 10, 10} to fail, expecting {1, 1, 1, 1} but getting {1, 2, 3, 4}.\n      // Changing to < makes the code produce {1, 1, 1, 1} for that input.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // Changed <= to <\n        indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values (or equal if < was used)\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // Otherwise, the span is the difference between the current index\n        // and the index at the top of the stack (index of the previous greater element).\n        spans[i] = i - indexStack.peek();\n      }\n      // Push current index onto the stack\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}