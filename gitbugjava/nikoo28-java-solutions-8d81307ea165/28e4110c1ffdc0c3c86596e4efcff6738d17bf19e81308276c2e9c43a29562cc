{
    "generation": "public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] <= prices[i])\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek(); // This line was incorrect\n\n      // Corrected line to calculate span\n      spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();\n\n      // The above correction still doesn't solve it. Let's re-evaluate the logic.\n      // The span is the difference between the current index and the index of the previous \n      // greater or equal price. If the stack is not empty, it means the top of the stack \n      // contains the index of the previous greater or equal price.\n\n      // So the correct logic should be:\n      spans[i] = i - (indexStack.isEmpty() ? -1 : indexStack.peek());\n\n      indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}