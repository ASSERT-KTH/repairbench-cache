{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    // Assuming prices.length >= 1 based on typical problem constraints and spans[0] access.\n    // If prices can be empty, an explicit check for prices.length == 0 would be needed here.\n    // However, the failing test uses a non-empty array.\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // The condition is changed from '<=' to '<'.\n      // This ensures that if prices[indexStack.peek()] == prices[i],\n      // it's treated as a \"blocker\" for the span, similar to a greater price.\n      // Thus, previous equal prices do not extend the span beyond 1 for the current day itself.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // MODIFIED LINE\n        indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values (that were strictly smaller).\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // indexStack.peek() now holds the index of the closest previous day\n        // whose price was greater than or equal to prices[i].\n        spans[i] = i - indexStack.peek();\n      }\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}