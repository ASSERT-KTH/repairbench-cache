{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // The original condition `prices[indexStack.peek()] <= prices[i]`\n      // pops elements that are less than or equal to the current price.\n      // This results in spans that include previous days with equal prices.\n      // For the test case {10, 10, 10, 10} expecting {1, 1, 1, 1},\n      // we need to stop popping when we encounter a price that is\n      // greater than or *equal to* the current price.\n      // Changing the condition to `prices[indexStack.peek()] < prices[i]`\n      // ensures that we stop at the first previous price that is\n      // greater than or equal to the current price, thus correctly\n      // calculating the span for the given test.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) // Changed <= to <\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than or equal to all previous values\n      // (in the context of the modified loop, this means all previous\n      // values were strictly less than prices[i])\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}