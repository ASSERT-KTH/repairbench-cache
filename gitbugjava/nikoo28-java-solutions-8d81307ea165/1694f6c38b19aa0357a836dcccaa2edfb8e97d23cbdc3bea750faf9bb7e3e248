{
    "generation": "import java.util.Stack;\n\n/**\n * Calculates the stock span for each day.\n * The span of the stock's price on a given day is defined as the maximum\n * number of consecutive days (starting from that day and going backward)\n * for which the stock price was less than the price on that day, plus one\n * (for the day itself). This interpretation matches the failing test case.\n *\n * The original code used \"less than or equal to\", which is the standard definition\n * but failed the provided test case. The fix changes the condition to \"less than\".\n *\n * @param prices An array of stock prices for consecutive days.\n * @return An array where the i-th element is the span for the i-th day.\n */\npublic int[] calculateSpans(int[] prices) {\n\n    // Handle empty or null input array\n    if (prices == null || prices.length == 0) {\n        return new int[0];\n    }\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Pop elements from stack while stack is not empty\n      // and the price at the top of the stack is strictly less than the current price.\n      // The original condition was prices[indexStack.peek()] <= prices[i].\n      // Changing to '<' fixes the failing test case, implying a definition where\n      // span counts consecutive preceding days with strictly lower prices + the current day.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // Fix: Changed <= to <\n          indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than or equal to all previous values (based on the '<' condition above).\n      // Meaning all previous prices were strictly less than prices[i].\n      if (indexStack.isEmpty()) {\n          spans[i] = i + 1; // Span includes all days up to i.\n      } else {\n          // indexStack.peek() holds the index 'j' of the nearest previous day\n          // such that prices[j] >= prices[i].\n          // The span is the number of days from j+1 to i, inclusive.\n          spans[i] = i - indexStack.peek();\n      }\n\n      // Push current index onto the stack. It might be a blocker for future days.\n      indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}