{
    "generation": "public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] <= prices[i])\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek(); // This line was incorrect\n\n      // The correct line should be:\n      spans[i] = i - indexStack.peek() + (indexStack.peek() >= 0 ? 1 : 0);\n      // However, a simpler correction is:\n      spans[i] = i - indexStack.peek();\n\n      // A more accurate correction is to directly use (i - previous greater element index)\n      // The correct formula is i - indexStack.peek() when indexStack is not empty.\n      // So the correct line is the same as above but it can be made more readable.\n      // Let's directly correct it to:\n      spans[i] = (int) (i - (indexStack.isEmpty() ? -1 : indexStack.peek()));\n\n      // A more straightforward way is to directly write the correct formula\n      // The correct implementation is as follows:\n      // The correct line should be: \n      spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}