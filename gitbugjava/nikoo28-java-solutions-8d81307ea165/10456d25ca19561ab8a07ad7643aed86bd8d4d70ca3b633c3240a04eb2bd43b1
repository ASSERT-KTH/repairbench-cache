{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    if (prices.length == 0) {\n        return spans;\n    }\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Change <= to < in the condition below\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // Buggy line was: prices[indexStack.peek()] <= prices[i]\n        indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all strictly smaller previous values, or all previous values were smaller.\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // prices[indexStack.peek()] >= prices[i]\n        spans[i] = i - indexStack.peek();\n      }\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}