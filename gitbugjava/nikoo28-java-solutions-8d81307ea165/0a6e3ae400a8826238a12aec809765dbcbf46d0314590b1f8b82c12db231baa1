{
    "generation": "import java.util.Stack;\n\nclass Solution {\n  /**\n   * Calculates the stock span for each day.\n   * The span of the stock's price on a given day i is defined as the maximum\n   * number of consecutive days (starting from day i and going backward)\n   * for which the stock price was less than or equal to the price on day i.\n   *\n   * @param prices An array of stock prices for consecutive days.\n   * @return An array where the i-th element is the span for day i.\n   */\n  public int[] calculateSpans(int[] prices) {\n\n    if (prices == null || prices.length == 0) {\n      return new int[0];\n    }\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    // Stack stores indices of previous days.\n    // The prices corresponding to the indices in the stack are in\n    // monotonically decreasing order from bottom to top.\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Pop elements from stack while stack is not empty and top of\n      // stack is smaller than or equal to prices[i].\n      // The failing test case implies that equal prices should not extend the span,\n      // meaning we should only pop if the previous price is strictly smaller.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] <= prices[i]) // Keep popping elements with price <= current price\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values (or equal to some sequence)\n      if (indexStack.isEmpty())\n        spans[i] = i + 1; // Span extends to the beginning\n      else\n        // Top of stack is the index of the first day (going backward)\n        // whose price is strictly greater than prices[i].\n        // The span is the difference between the current index and that index.\n        spans[i] = i - indexStack.peek();\n\n      // Push current index onto stack\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}