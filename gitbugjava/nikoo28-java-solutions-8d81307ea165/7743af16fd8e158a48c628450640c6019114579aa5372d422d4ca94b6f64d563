{
    "generation": "public int[] calculateSpans(int[] prices) {\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n        while (!indexStack.isEmpty() && prices[indexStack.peek()] <= prices[i]) {\n            indexStack.pop();\n        }\n\n        // If index stack is empty, the price at index 'i'\n        // is greater than all previous values\n        if (indexStack.isEmpty()) {\n            spans[i] = i + 1;\n        } else {\n            spans[i] = i - indexStack.peek();\n        }\n\n        // Fix: Only push the index if the current price is different from the previous one\n        if (i > 0 && prices[i] != prices[i - 1]) {\n            indexStack.push(i);\n        } else {\n            // If prices are the same, the span should be the same as the previous one\n            spans[i] = spans[i - 1];\n        }\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}