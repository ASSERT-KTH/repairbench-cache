{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    // Assuming prices.length >= 1 based on typical problem constraints and\n    // the fact that spans[0]=1 is not guarded.\n    // The failing test has prices.length = 4, so an empty check is not\n    // strictly needed to pass this specific test.\n    if (prices.length == 0) {\n        return spans; // Or return new int[0];\n    }\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Changed condition from <= to <\n      // This ensures that if prices[indexStack.peek()] == prices[i],\n      // indexStack.peek() is NOT popped. It acts as a boundary,\n      // leading to a span of 1 relative to an immediately preceding equal price.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) {\n        indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values (considering that equal previous values now stop the span)\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // indexStack.peek() is the index of the first element to the left of 'i'\n        // whose price is >= prices[i] (due to the modified while condition).\n        spans[i] = i - indexStack.peek();\n      }\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}