{
    "generation": "import java.util.Stack;\n\nclass OnlineStockSpan {\n  public int[] calculateSpans(int[] prices) {\n\n    // Handle empty prices array case\n    if (prices.length == 0) {\n      return new int[0];\n    }\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // FIX: Changed the condition from '<=' to '<'\n      // This ensures that elements with equal prices are not popped from the stack,\n      // aligning with the test case's implicit requirement for equal consecutive prices.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) // Bug fix here\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}