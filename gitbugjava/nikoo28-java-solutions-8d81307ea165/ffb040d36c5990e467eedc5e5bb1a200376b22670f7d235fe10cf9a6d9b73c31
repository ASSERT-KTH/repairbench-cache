{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Pop elements from stack whose prices are strictly less than the current price.\n      // If the price at indexStack.peek() is equal to prices[i], it acts as a boundary\n      // for the span calculation, and should not be popped.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) // Changed from <= to <\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than or equal to all previous values.\n      // Its span is 'i + 1' (from index 0 to 'i').\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        // If index stack is not empty, indexStack.peek() contains the index\n        // of the first element to the left that is greater than or equal to prices[i].\n        // The span is the current index 'i' minus that boundary index.\n        spans[i] = i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}