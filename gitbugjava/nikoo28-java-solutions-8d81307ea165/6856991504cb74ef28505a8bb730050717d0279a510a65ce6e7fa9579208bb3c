{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // While the stack is not empty and the price at the top of the stack\n      // is strictly less than the current price, pop elements.\n      // This is because we are looking for the *first* previous element that is\n      // greater than or equal to the current price. If an element is equal,\n      // it should be considered the \"previous greater or equal\" element,\n      // and not be popped.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) // Changed <= to <\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        // The span is the current index minus the index of the first\n        // previous element that is greater than or equal to the current price.\n        spans[i] = i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}