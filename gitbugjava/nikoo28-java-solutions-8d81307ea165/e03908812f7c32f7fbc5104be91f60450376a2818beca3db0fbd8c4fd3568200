{
    "generation": "public int[] calculateSpans(int[] prices) {\n    int n = prices.length;\n    int[] spans = new int[n];\n    if (n == 0) return spans;\n    \n    Stack<Integer> indexStack = new Stack<>();\n    // Span of first element is always 1\n    spans[0] = 1;\n    indexStack.push(0);\n\n    for (int i = 1; i < n; i++) {\n        // Pop only those indices whose prices are strictly less than current\n        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {\n            indexStack.pop();\n        }\n\n        // If stack is empty, all previous prices were lower\n        spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();\n        indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}