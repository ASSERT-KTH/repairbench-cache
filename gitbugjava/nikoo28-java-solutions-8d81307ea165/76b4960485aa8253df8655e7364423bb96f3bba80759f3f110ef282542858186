{
    "generation": "import java.util.Stack;\n\npublic class OnlineStockSpan {\n  /**\n   * Calculates the stock span for each day.\n   * The span of the stock's price on a given day i is defined as the maximum\n   * number of consecutive days (starting from day i and going backward)\n   * for which the price of the stock was less than or equal to the price on day i.\n   *\n   * Based on the failing test case `testCalculateSpans6`, the behavior for equal\n   * consecutive prices seems to expect a span of 1. This is different from the\n   * standard definition where equal prices extend the span. The fix adjusts the\n   * logic to match the test case's expectation.\n   *\n   * @param prices An array of stock prices for consecutive days.\n   * @return An array where the i-th element is the span for day i.\n   */\n  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    // Span of first element is always 1\n    // Handle empty input array case although not strictly necessary based on constraints\n    if (prices.length == 0) {\n        return spans;\n    }\n    spans[0] = 1;\n\n    // Stack stores indices of previous days.\n    // The stack maintains indices in increasing order,\n    // corresponding to prices in strictly decreasing order from bottom to top.\n    // Or, more accurately, it stores indices `j` such that for any `k` popped before `j`, `prices[k] < prices[i]`.\n    // The element at the top `peek()` is the index of the nearest previous day with a price >= current price.\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // Pop elements from stack while stack is not empty and the price at\n      // the index popped is strictly less than the current price.\n      // The original code used <= which caused the issue with the test case\n      // expecting [1, 1, 1, 1] for [10, 10, 10, 10].\n      // Using < ensures that for equal consecutive prices, the previous index\n      // is not popped, leading to a span calculation of i - (i-1) = 1.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // Changed <= to <\n        indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is strictly greater than all previous values\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // Otherwise, the span is the difference between the current index 'i'\n        // and the index at the top of the stack (the nearest previous day\n        // with price >= prices[i]).\n        spans[i] = i - indexStack.peek();\n      }\n\n      // Push the current index onto the stack\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}