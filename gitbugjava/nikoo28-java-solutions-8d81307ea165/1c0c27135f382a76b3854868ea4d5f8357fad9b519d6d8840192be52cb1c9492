{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // The original condition `prices[indexStack.peek()] <= prices[i]` would pop\n      // elements from the stack even if their price was equal to the current price.\n      // For the test case `prices = {10, 10, 10, 10}`, this would lead to `spans = {1, 2, 3, 4}`\n      // because `prices[0] = 10` would be popped when `prices[1] = 10` is processed,\n      // causing the stack to become empty and `spans[1]` to be `i + 1 = 2`.\n      //\n      // To satisfy the test case `spans = {1, 1, 1, 1}` for `prices = {10, 10, 10, 10}`,\n      // the stack should only pop elements whose prices are STRICTLY LESS than the current price.\n      // This means if `prices[indexStack.peek()]` is equal to `prices[i]`, it should remain on the stack.\n      // Keeping the equal price on the stack will ensure that `i - indexStack.peek()` calculates a span of 1\n      // when the current price is equal to the immediately preceding element on the stack (which would be `i-1` if no elements were popped).\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) // FIX: Changed <= to <\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}