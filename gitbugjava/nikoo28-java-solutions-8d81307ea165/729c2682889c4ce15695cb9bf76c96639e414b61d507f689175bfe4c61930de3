{
    "generation": "import java.util.Stack;\n\npublic class OnlineStockSpan {\n  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    // Assuming prices.length >= 1 based on spans[0]=1 and no explicit test for empty prices.\n    // If prices array can be empty, a check prices.length == 0 should be added at the beginning.\n    if (prices.length == 0) {\n        return spans;\n    }\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // The original condition was: prices[indexStack.peek()] <= prices[i]\n      // This leads to spans like {1, 2, 3, 4} for prices {10, 10, 10, 10}.\n      // The failing test expects {1, 1, 1, 1} for {10, 10, 10, 10}.\n      // To achieve this, if prices[indexStack.peek()] == prices[i], it should act as a \"blocker\".\n      // This means we should only pop from the stack (i.e., extend the span beyond that day)\n      // if prices[indexStack.peek()] is strictly less than prices[i].\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // Changed <= to <\n        indexStack.pop();\n      }\n\n      // If indexStack is empty, it means all prior elements prices[j] (for j < i)\n      // had prices[j] < prices[i]. So, the span covers all elements from index 0 to i.\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // If stack is not empty, indexStack.peek() is the index k of the closest\n        // element to the left of i such that prices[k] >= prices[i].\n        // The span is the number of elements from k (exclusive, if thinking about previous elements)\n        // up to i (inclusive). This count is (i - (k+1) + 1) + 1 = i - k.\n        spans[i] = i - indexStack.peek();\n      }\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}