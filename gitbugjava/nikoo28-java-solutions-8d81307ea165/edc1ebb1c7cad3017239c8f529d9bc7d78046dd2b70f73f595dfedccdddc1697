{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    // It's good practice to handle edge cases like an empty prices array.\n    // However, the problem description and failing test suggest prices.length >= 1.\n    // The original code would fail on prices.length == 0 at spans[0].\n    // Assuming prices.length >= 1 based on typical problem constraints for stock span.\n    if (prices.length == 0) {\n        return new int[0];\n    }\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      // The condition for popping from the stack is modified here.\n      // Original: prices[indexStack.peek()] <= prices[i]\n      // This counted preceding days with equal prices as part of the span.\n      // Modified: prices[indexStack.peek()] < prices[i]\n      // This ensures that if a preceding day has a price equal to the current day's price,\n      // it acts as a boundary, limiting the span, to match the test case's expectation.\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i]) { // Changed from <= to <\n        indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values (that were strictly smaller, based on new logic).\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // indexStack.peek() now holds the index of the first previous element\n        // whose price is greater than or equal to prices[i].\n        // The span is the number of consecutive days including current day i,\n        // up to but not including indexStack.peek().\n        spans[i] = i - indexStack.peek();\n      }\n\n      indexStack.push(i);\n    }\n\n    return spans;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}