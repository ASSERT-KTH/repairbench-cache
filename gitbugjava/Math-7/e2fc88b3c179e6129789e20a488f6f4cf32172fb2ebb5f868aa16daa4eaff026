{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the location of an event cannot be bracketed\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // get state at event time\n                interpolator.setInterpolatedTime(eventT);\n                final double[] eventY = interpolator.getInterpolatedState().clone(); // clone to prevent modification corruption\n\n                // handle the event occurrence, update event state internal data\n                // This might trigger the event action (including stop or reset)\n                currentEvent.stepAccepted(eventT, eventY);\n                isLastStep = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (isLastStep) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length); // Update state vector to event state\n                    // Ensure all event states are synchronized with the final time and state\n                    for (final EventState state : eventsStates) {\n                       if (state != currentEvent) { // Avoid double update on current event\n                           state.stepAccepted(eventT, eventY);\n                       }\n                    }\n                    return eventT;\n                }\n\n                boolean needReset = currentEvent.reset(eventT, eventY);\n                if (needReset) {\n                    // some event handler has triggered changes that\n                    // invalidate the derivatives, we need to recompute them\n                    System.arraycopy(eventY, 0, y, 0, y.length); // Update state vector to event state\n                    computeDerivatives(eventT, y, yDot);\n                    resetOccurred = true;\n                    // Ensure all event states are synchronized with the reset time and state\n                    for (final EventState state : eventsStates) {\n                        if (state != currentEvent) { // Avoid double update on current event\n                           state.stepAccepted(eventT, eventY);\n                        }\n                    }\n                    return eventT;\n                }\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT);\n\n                // check if the same event occurs again in the remaining part of the step\n                if (currentEvent.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(currentEvent);\n                }\n\n            }\n\n            // last part of the step, after the last event.\n            // The step ran from previousT (time of last event or initial time) to currentT\n            interpolator.setInterpolatedTime(currentT);\n            // Clone the state to prevent modifications by handlers corrupting state synchronization\n            final double[] currentY = interpolator.getInterpolatedState().clone();\n\n            // Synchronize all event states to the end of the step\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop(); // Check if any event demands stop at step end\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1); // Check if end time reached\n\n            // handle the final part of the step, from previousT to currentT\n            interpolator.setSoftPreviousTime(previousT); // Set interpolator range for step handler\n            interpolator.setSoftCurrentTime(currentT);\n            interpolator.setInterpolatedTime(currentT); // Set interpolator position for step handler\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            // Step finished normally, update the state vector to the state at currentT\n            System.arraycopy(currentY, 0, y, 0, y.length);\n\n            return currentT;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}