{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n            if (format != null) {\n                JsonFormat.Shape shape = format.getShape();\n                \n            \t// Simple case first: serialize as numeric timestamp?\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // [databind#1183] Need to ensure that shape=Shape.ANY is not block point...\n                // If shape is explicitly String, or 'any' or unspecified AND pattern/locale/timezone is set\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                        || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    // Jackson's own default format; explicit default for annotations is default bean format\n                                    // (which defaults to StdDateFormat.DATE_FORMAT_STR_ISO8601)\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    // Start with locale from annotation, fallback to config default\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    // Similarly, timezone from annotation, then config default (if any); otherwise UTC\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n                // Otherwise, shape is ANY or default (which means Escritor uses default props)\n            }\n        }\n        // No annotation, or annotation specifies default behavior\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}