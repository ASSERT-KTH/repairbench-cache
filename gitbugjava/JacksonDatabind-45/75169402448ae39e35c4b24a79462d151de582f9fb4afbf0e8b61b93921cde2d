{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            // 26-Oct-2015, tatu: Use 'getMember()' instead of 'findFormatOverride' for access\n            //    (NOTE: similar change for deser side in 2.7)\n            // 03-Feb-2017, tatu: but this MUST be guarded by null check(s)\n            AnnotatedMember member = property.getMember();\n            JsonFormat.Value format = null;\n\n            if (member != null) {\n                format = serializers.getAnnotationIntrospector().findFormat(member);\n            }\n            // If nothingoverride found, let's use defaults next\n            if (format == null) {\n                 format = _propertyFormat;\n            }\n\n            if (format != null) {\n                JsonFormat.Shape shape = format.getShape();\n\n                // Simple case first: serialize as numeric timestamp?\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // If shape is STRING, or ANY/empty implies STRING+config, use specified formatting\n                // 04-Feb-2017, tatu: As per [databind#1551], need to ensure A) Shape.ANY implies\n                //    String (unless overridden by global feature), and B) pattern/locale/timezone needs\n                //    to be applied even if Shape is not STRING.\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                        || format.hasLocale() || format.hasTimezone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    // default pattern implementation is complex; leave to StdDateFormat\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n                // Otherwise might be Shape.ANY, which means we should use serialization defaults\n            }\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}