{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase. (If present)\n     * The separator must be an underscore.\n     * The length must be correct for the format.</p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        // Initial check for minimum length and valid language code\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case 1: Language only (e.g., \"en\")\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // Case 2: Language + Country/Variant (e.g., \"en_GB\", \"fr__POSIX\", \"en_GB_xxx\")\n        // Must have an underscore separator and be at least length 5 (ll_CC or ll__v)\n        if (len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        char ch3 = str.charAt(3);\n\n        // Case 2a: Language + Variant (e.g., \"fr__POSIX\") - Country is empty\n        if (ch3 == '_') {\n             // Format ll__variant, requires length >= 5 (ll + __ + non-empty variant)\n             // Already checked len >= 5, check if variant part exists\n            if (len < 5) { // This check is technically redundant due to the earlier len < 5 check\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // Case 2b: Language + Country (e.g., \"en_GB\", \"en_GB_xxx\")\n        char ch4 = str.charAt(4);\n        // Validate country code: 2 uppercase letters\n        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case 2b-i: Language + Country only (e.g., \"en_GB\")\n        if (len == 5) {\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Case 2b-ii: Language + Country + Variant (e.g., \"en_GB_xxx\")\n        // Must have a second underscore separator and be at least length 7 (ll_CC_v)\n        if (len < 7) {\n            // Handles cases like \"en_GBx\" or \"en_GB_\" which are invalid\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Ensure there's something after the _CC_\n        // The substring(6) correctly extracts the variant.\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}