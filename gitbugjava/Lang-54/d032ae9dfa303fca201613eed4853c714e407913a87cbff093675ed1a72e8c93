{
    "generation": "import java.util.Locale;\n\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        // 1. Basic length check (must be at least 2 for language)\n        // Also validates language code early\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        \n        // 2. Handle language-only case (length 2)\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // 3. Must have underscore separator after language part\n        if (str.charAt(2) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // 4. Handle cases with country and/or variant\n        int firstUnderscoreIndex = 2;\n        // Index of the character after the first underscore\n        int CCorVariantIndex = firstUnderscoreIndex + 1; \n        \n        // Find the next underscore, which separates country/variant or indicates empty country\n        int secondUnderscoreIndex = str.indexOf('_', CCorVariantIndex);\n\n        String language = str.substring(0, firstUnderscoreIndex);\n        String country = \"\";\n        String variant = \"\";\n\n        if (secondUnderscoreIndex == -1) {\n            // No second underscore found - implies format ll_CC\n            // String must be exactly 5 chars long (ll_CC)\n            if (len != 5) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Validate country code (must be uppercase)\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            country = str.substring(3, 5);\n            // variant remains \"\"\n        } else {\n            // Second underscore found\n            // Case A: ll__variant (double underscore)\n            if (secondUnderscoreIndex == CCorVariantIndex) { \n                 // e.g. \"fr__POSIX\", second underscore is at index 3 (CCorVariantIndex)\n                 // Country code is empty. Check if variant part exists.\n                if (len <= CCorVariantIndex + 1) { // check length > 4 (\"ll__\" + at least one char)\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                 // country remains \"\"\n                variant = str.substring(CCorVariantIndex + 1); // Variant starts after __\n            } \n            // Case B: ll_CC_variant\n            else if (secondUnderscoreIndex == CCorVariantIndex + 2 && len >= CCorVariantIndex + 3) { \n                // e.g. \"en_GB_xxx\", second underscore is at index 5 (CCorVariantIndex + 2)\n                // Validate country code (must be uppercase)\n                char ch3 = str.charAt(3);\n                char ch4 = str.charAt(4);\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                country = str.substring(3, 5);\n                variant = str.substring(secondUnderscoreIndex + 1); // Variant starts after _CC_\n                 // Check if variant part is non-empty (redundant due to len >= CCorVariantIndex + 3)\n                // if (variant.length() == 0) {\n                //     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                // }\n            } \n            // Case C: Invalid format (e.g. \"ll_C_vv\", \"ll_CCC_vv\")\n            else {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n        \n        return new Locale(language, country, variant);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}