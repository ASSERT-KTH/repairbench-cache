{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        // Valid lengths are 2 (lang), 5 (lang_COUNTRY or lang__variant starting point), >= 7 (lang_COUNTRY_variant)\n        // Also allows lang__variant where variant length > 1, so len can be 6+\n        // Thus, invalid lengths are 1, 3, 4.\n        if (len != 2 && len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        // Language code must be 2 lowercase letters\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        \n        if (len == 2) {\n            // Language only: \"ll\"\n            return new Locale(str, \"\");\n        } else { // len >= 5\n            // Must have underscore after language code\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            \n            char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                // Language and variant: \"ll__variant\"\n                // Variant must exist, so minimum length is 5 (ll__V)\n                if (len < 5) {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            } else {\n                // Language and country (and maybe variant): \"ll_CC...\"\n                char ch4 = str.charAt(4);\n                // Country code must be 2 uppercase letters\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                if (len == 5) {\n                    // Language and country: \"ll_CC\"\n                    return new Locale(str.substring(0, 2), str.substring(3, 5));\n                } else {\n                    // Language, country, and variant: \"ll_CC_variant\"\n                    // Must have underscore after country code and non-empty variant\n                    if (len < 7 || str.charAt(5) != '_') {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}