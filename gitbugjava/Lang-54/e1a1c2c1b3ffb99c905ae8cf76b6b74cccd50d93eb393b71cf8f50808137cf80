{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"en__POSIX\")  = new Locale(\"en\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        // Locale string formats: ll, ll_CC, ll__variant, ll_CC_variant\n        // Basic length validation\n        if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Minimum length is 2\");\n        }\n\n        // Validate language code (first 2 chars)\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Language code must be two lowercase letters\");\n        }\n\n        if (len == 2) {\n            // Case: \"ll\"\n            return new Locale(str, \"\");\n        }\n\n        // Requires underscore separator beyond language code\n        // Valid lengths are 5 (ll_CC or ll__V) or >= 7 (ll_CC_V...)\n        if (len < 5) {\n            // String is length 3 or 4, like \"en_\", \"en_G\"\n            // These are invalid as country code needs 2 chars and variant needs preceding __ or _CC_\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Length must be 2 or >= 5\");\n        }\n\n        // Check for first underscore separator\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Expected underscore separating language/country or language/variant\");\n        }\n\n        char ch3 = str.charAt(3); // Potentially start of country code OR second underscore\n\n        if (ch3 == '_') {\n            // Case: \"ll__variant\" (e.g., \"fr__POSIX\")\n            // Minimum length is ll__V -> 5. This is already guaranteed by the len < 5 check above.\n            // Variant part starts at index 4. Length must be >= 5.\n            if (len < 5) { // Defensive check, already covered by len >= 5 prerequisite\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Variant must follow __\");\n            }\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        } else {\n            // Case: \"ll_CC...\" (e.g., \"en_GB\", \"en_GB_xxx\")\n            // Validate country code (chars at index 3 and 4)\n            // Need length 5 for country code\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Country code must be two uppercase letters\");\n            }\n\n            if (len == 5) {\n                // Case: \"ll_CC\"\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                // Case: \"ll_CC_variant\"\n                // Check for second underscore separator\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Expected underscore separating country/variant\");\n                }\n                // Check that variant part exists and is not empty (minimum length ll_CC_V -> 7)\n                if (len < 7) {\n                    // This case ensures string is not just \"ll_CC_\"\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - Variant must not be empty\");\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}