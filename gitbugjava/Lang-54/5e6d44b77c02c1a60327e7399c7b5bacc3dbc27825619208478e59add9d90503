{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        // Locale string must be at least 2 characters (language code).\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        // Language code must be 2 lowercase letters.\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case 1: \"ll\" format (e.g., \"en\").\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // Format must be \"ll_CC\", \"ll_CC_variant\", or \"ll__variant\".\n        // It requires an underscore at index 2.\n        // Also implicitly checks len >= 3\n        if (str.charAt(2) != '_') {\n             // Covers cases like \"enGB\" where the underscore is missing.\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Need country code or second underscore, implies len >= 5\n        // (e.g., \"ll_CC\" or \"ll__V\")\n        if (len < 5) {\n             // Covers lengths 3 and 4 (\"en_\", \"en_G\")\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        char ch3 = str.charAt(3);\n        // Case 2: \"ll__variant\" format (e.g., \"fr__POSIX\").\n        if (ch3 == '_') {\n            // Requires a non-empty variant after \"__\". Minimum length is 5 (\"ll__V\").\n            // We know len >= 5 from the check above.\n            // Variant starts at index 4.\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // Case 3: \"ll_CC\" or \"ll_CC_variant\" format (e.g., \"en_GB\", \"en_GB_xxx\").\n        // Country code (at indices 3 and 4) must be 2 uppercase letters.\n        char ch4 = str.charAt(4);\n        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case 3a: \"ll_CC\" format.\n        if (len == 5) {\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Case 3b: \"ll_CC_variant\" format.\n        // Requires an underscore separator at index 5. Minimum length is 7 (\"ll_CC_V\").\n        // (Technically len=6 like \"en_GBX\" is invalid length/format).\n        if (str.charAt(5) != '_') {\n            // Covers length 6 like \"en_GBX\" or \"en_GBv\" format error\n            // and formats like \"en_GBvariant\" where the underscore is missing.\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n         // Checks for valid length >= 7 implicitly via previous checks and charAt(5) check.\n         // Variant starts at index 6. Empty variant (\"en_GB_\") was allowed by original code's logic.\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}