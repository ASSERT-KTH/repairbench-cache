{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      // Use an array to allow modification within the anonymous class.\n      final boolean[] foundAssignment = {false};\n\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // Check if this is the left hand side of a simple assignment.\n            boolean isLhsOfAssign = parent != null && parent.isAssign() &&\n                                   parent.getFirstChild() == n;\n\n            if (isLhsOfAssign) {\n              // We found an assignment to the variable within this CFG node.\n              foundAssignment[0] = true;\n              // We don't count the LHS of an assignment as a \"use\".\n            } else {\n              // This is a potential use (read or part of compound assignment/update).\n              // We make a special exception when the entire cfgNode is a chain\n              // of assignments, since in that case the assignment statements\n              // will happen after the inlining of the right hand side.\n              // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n              //   and remove this special case. (Comment retained from original)\n              // Original logic counted all non-ASSIGN LHS occurrences as uses.\n              // Let's retain the original check structure here, focusing on counting reads.\n              // Note: The original check `!(parent.isAssign() && (parent.getFirstChild() == n))`\n              // is implicitly handled by the `if (isLhsOfAssign) {} else {}` structure.\n              // All names that are not LHS of simple assign go here.\n              numUsesWithinCfgNode++;\n            }\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n\n      // If the variable was assigned within the same CFG node where it was used,\n      // treat it as multiple uses to prevent incorrect inlining in cases like\n      // assignments within hooks or comma operators.\n      if (foundAssignment[0] && numUsesWithinCfgNode > 0) {\n         // Set count to 2 (representing multiple uses) to prevent inlining.\n         numUsesWithinCfgNode = 2;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}