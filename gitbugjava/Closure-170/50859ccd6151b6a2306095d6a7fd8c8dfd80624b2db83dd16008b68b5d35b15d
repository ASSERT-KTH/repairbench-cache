{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          // Check if n is a NAME node representing the variable varName.\n          if (n.isName() && n.getString().equals(varName)) {\n\n            // Previously, there was a condition here to exclude the LHS of assignments:\n            // !(parent.isAssign() && (parent.getFirstChild() == n))\n            // This exception caused issues when an assignment occurred within\n            // the same expression (CFG node) as a use, like in hooks or logical operators,\n            // leading to incorrect inlining decisions (e.g., Issue 965).\n            // Example: `cond ? (var = 1) : 0, var`\n            // The assignment `var = 1` modifies the variable within the same expression/node\n            // as the subsequent use of `var`. For safe inlining, the pass needs to know\n            // about this modification. Counting the assignment LHS as a reference\n            // within the node helps signal this complexity.\n            // We now count all references, including assignment LHS, within the node.\n            // TODO(blickly): The original comment mentioned making SIDE_EFFECT_PREDICATE\n            //   check more exact. This change addresses the specific issue, but\n            //   side effect analysis might need further refinement.\n            numUsesWithinCfgNode++;\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}