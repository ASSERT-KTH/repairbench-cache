{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          // Check if n is a NAME node representing the variable of interest.\n          if (n.isName() && n.getString().equals(varName)) {\n            // Check if n is being used as a value (RHS) rather than being assigned to (LHS)\n            // or modified (e.g. i++). NodeUtil.isLhs checks for assignments, inc/dec,\n            // destructuring patterns, etc.\n            if (!NodeUtil.isLhs(n, parent)) {\n              numUsesWithinCfgNode++;\n            }\n          }\n        }\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}