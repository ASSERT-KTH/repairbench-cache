{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   *     been visited\n   * @param currentProperties The property names in the super interface\n   *     that have been visited, mapped to the interface definition node\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames;\n    if (implicitProto != null) {\n      // This can be the case if interfaceType is proxy to a non-existent\n      // object (which is a bad type annotation, but shouldn't crash).\n      currentPropertyNames = implicitProto.getOwnPropertyNames();\n    } else {\n      // If the implicit prototype is null, it means the interface couldn't be\n      // fully resolved (e.g., @extends non-existent type).\n      // There are no properties to check on this specific interface type.\n      currentPropertyNames = java.util.Collections.emptySet();\n    }\n\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      ObjectType currentType = currentProperties.get(name);\n      // If the property is defined on the current interface and not previously\n      // defined on other interfaces then record it.\n      // If the property is defined on the current interface and also defined\n      // on other interfaces then check for conflicts.\n      if (oType != null && currentType == null) {\n          // Check for conflicts only if the property was defined previously\n          // in a different interface branch. currentProperties tracks properties\n          // found in the current specific branch of the interface hierarchy.\n          // properties tracks all properties found across all branches.\n          if (!interfaceType.getPropertyType(name).isEquivalentTo(\n              oType.getPropertyType(name))) {\n              compiler.report(\n                  t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                      functionName, name, oType.toString(),\n                      interfaceType.toString()));\n            }\n      }\n      // Record the property definition from the current interface.\n      currentProperties.put(name, interfaceType);\n      // Keep track of the property existence across all interfaces.\n      // Use the current interfaceType if it's the first time seeing the property,\n      // otherwise keep the existing oType.\n      properties.putIfAbsent(name, interfaceType);\n    }\n\n    // Check recursively declared interfaces\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      HashMap<String, ObjectType> interfaceProperties =\n          new HashMap<>(currentProperties);\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          interfaceProperties, iType);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}