{
    "generation": "  @Override\n  public boolean equals(Object object) {\n    if (this == object) {\n      return true;\n    }\n    if (!(object instanceof KeyPair)) {\n      return false;\n    }\n\n    KeyPair other = (KeyPair) object;\n\n    // Compare mPrivateKey, ensuring null-safety\n    boolean privateKeysEqual;\n    if (this.mPrivateKey == null) {\n      privateKeysEqual = (other.mPrivateKey == null);\n    } else {\n      // this.mPrivateKey is not null.\n      // The equals method of mPrivateKey should handle other.mPrivateKey being null (by returning false).\n      privateKeysEqual = this.mPrivateKey.equals(other.mPrivateKey);\n    }\n\n    // If private keys are not equal, the objects are not equal.\n    if (!privateKeysEqual) {\n      return false;\n    }\n\n    // Compare mPublicKey, ensuring null-safety\n    boolean publicKeysEqual;\n    if (this.mPublicKey == null) {\n      publicKeysEqual = (other.mPublicKey == null);\n    } else {\n      // this.mPublicKey is not null.\n      // The equals method of mPublicKey should handle other.mPublicKey being null.\n      publicKeysEqual = this.mPublicKey.equals(other.mPublicKey);\n    }\n    \n    // Both private and public key comparisons must be true for the objects to be equal.\n    // Since we already returned false if privateKeysEqual was false,\n    // we just need to return the result of publicKeysEqual.\n    return publicKeysEqual;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}