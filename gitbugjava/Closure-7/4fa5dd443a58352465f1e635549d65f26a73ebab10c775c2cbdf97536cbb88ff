{
    "generation": "    @Override\n    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (resultEqualsValue) {\n          // Handle 'typeof x == \"function\"' or 'goog.isFunction(x)'\n          // Restrict 'type' to Function, returning the greatest subtype intersection.\n          JSType result = type.getGreatestSubtype(ctorType);\n          // If the intersection is empty (bottom type), it indicates a contradiction.\n          return result.isBottomType() ? null : result;\n        } else {\n          // Handle 'typeof x != \"function\"' or '!goog.isFunction(x)'\n          // Restrict 'type' to exclude Function.\n          // The JSType#restrictByNotTypeOf method handles removing the possibility\n          // of being a function from the type.\n          // For instance, if type is (Object|Number) and we restrict by not Function,\n          // the result should be (Object|Number). If type is Function, the result\n          // should be bottom (null). If type is (Object|Function), the result\n          // should be Object (if ObjectType represents non-function objects).\n          // If type is (Object|Number|String|Boolean), restricting by not function\n          // should still leave (Object|Number|String|Boolean).\n          return type.restrictByNotTypeOf(ctorType);\n        }\n      }\n\n      // Fallback logic for other typeof strings like \"object\".\n      // This part remains unchanged as the provided tests focus on \"function\".\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}