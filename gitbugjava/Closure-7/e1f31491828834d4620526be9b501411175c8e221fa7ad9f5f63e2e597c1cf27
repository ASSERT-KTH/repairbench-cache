{
    "generation": "    @Override\n    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        boolean typeIsGuaranteedFunction = type.isFunctionType(); // e.g., Function, an interface\n\n        // Check if the original type is potentially compatible with the typeof result\n        if (resultEqualsValue) {\n          // Case: typeof x == 'function'\n          // This is possible if the type is Function or a supertype like Object or Unknown.\n          // It means the original type must be a supertype of Function.\n          boolean possible = ctorType.isSubtype(type);\n          // If possible, the refined type is Function. Otherwise, this condition branch is impossible.\n          return possible ? ctorType : null;\n        } else {\n          // Case: typeof x != 'function'\n          // This is possible if the type can yield something other than 'function'.\n          // If the type *must* yield 'function' (guaranteed function type), then this is impossible.\n          if (typeIsGuaranteedFunction) {\n            return null;\n          } else {\n            // Otherwise, the type might yield 'function' or 'object' (or others if it's a Union).\n            // The condition `!= 'function'` rules out the 'function' case.\n            // The remaining possibilities (e.g., non-function objects, null) are still consistent\n            // with the original ObjectType `type` (since it wasn't *purely* Function).\n            // Return the original type, indicating it can satisfy the condition.\n            // Further refinement (like removing Function from a Union) happens elsewhere.\n            return type;\n          }\n        }\n      }\n\n      // Original logic for typeof x == 'object' etc.\n      // Assumes matchesExpectation checks if the type potentially matches the value based on resultEqualsValue.\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}