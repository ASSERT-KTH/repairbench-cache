{
    "generation": "    @Override\n    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (resultEqualsValue) {\n          // typeof x == 'function' is true. Check if type is function-like.\n          // If it is, restrict to Function. If not, it's impossible.\n          return ctorType.isSubtype(type) ? ctorType : null;\n        } else {\n          // typeof x == 'function' is false. Check if type is NOT function-like.\n          // If 'type' could be a function, it's ruled out by this condition.\n          // Otherwise (e.g., a plain object), it's still possible.\n          return type.isSubtype(ctorType) ? null : type;\n        }\n      }\n      // Handle typeof x == 'object' etc.\n      // If typeof x is 'object', any object type is possible.\n      // If typeof x is not 'object', then an object type is impossible.\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}