{
    "generation": "    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n        final int dimension = init.length;\n\n        // Check dimension consistency for bounds if they are provided\n        if (lB != null && lB.length != dimension) {\n            throw new DimensionMismatchException(lB.length, dimension);\n        }\n        if (uB != null && uB.length != dimension) {\n            throw new DimensionMismatchException(uB.length, dimension);\n        }\n\n        // Checks whether there is at least one finite bound value.\n        boolean hasFiniteBounds = false;\n        if (lB != null && uB != null) { // Bounds are relevant only if both are provided\n            for (int i = 0; i < dimension; i++) {\n                if (!Double.isInfinite(lB[i]) ||\n                    !Double.isInfinite(uB[i])) {\n                    hasFiniteBounds = true;\n                    break;\n                }\n            }\n        }\n\n        // Checks whether there is at least one infinite bound value among the finite bounds.\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) { // This check is only meaningful if finite bounds exist\n            for (int i = 0; i < dimension; i++) {\n                if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                // XXX This restriction could be lifted in the future.\n                throw new MathUnsupportedOperationException(LocalizedFormats.UNSUPPORTED_OPERATION);\n            } else {\n                // All bounds are finite.\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB.clone(); // Clone to prevent external modification\n                boundaries[1] = uB.clone(); // Clone to prevent external modification\n\n                // Check bounds validity and potential overflow for normalization.\n                for (int i = 0; i < dimension; i++) {\n                    final double lower = boundaries[0][i];\n                    final double upper = boundaries[1][i];\n\n                    // Check if lower bound is strictly greater than upper bound.\n                    if (lower > upper) {\n                        throw new NumberIsTooSmallException(lower, upper, true);\n                    }\n\n                    // Check for potential overflow when calculating the range (upper - lower).\n                    // This can happen if upper is large positive and lower is large negative.\n                    // Overflow here would lead to +Infinity range, causing issues (e.g., NaN)\n                    // in the 'encode' method during normalization.\n                    final double range = upper - lower;\n                    if (Double.isInfinite(range)) {\n                         // If range is infinite, check if it's due to overflow of finite bounds\n                         // (The case of infinite bounds themselves is handled by hasInfiniteBounds check)\n                         if (!Double.isInfinite(lower) && !Double.isInfinite(upper)) {\n                             // Overflow occurred with finite bounds.\n                             // Throw the exception expected by the test MATH-865.\n                             throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,\n                                                                 range, Double.MAX_VALUE, false);\n                         }\n                    }\n                }\n            }\n        } else {\n            // No finite bounds detected (either no bounds provided, or all were infinite).\n            // Handles unbounded optimization internally.\n            boundaries = null;\n        }\n\n        // Check inputSigma if provided\n        if (inputSigma != null) {\n            if (inputSigma.length != dimension) {\n                throw new DimensionMismatchException(inputSigma.length, dimension);\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                // Check sigma relative to boundaries only if boundaries are finite\n                if (boundaries != null) { // Implies finite bounds due to logic above\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    // Check if sigma is larger than the available range.\n                    // range cannot be infinite here if the previous checks passed.\n                    if (inputSigma[i] > range) {\n                         throw new OutOfRangeException(inputSigma[i], 0, range);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}