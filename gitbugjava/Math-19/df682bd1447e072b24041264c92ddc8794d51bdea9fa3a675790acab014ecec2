{
    "generation": "    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n        final int dimension = init.length;\n\n        if (lB == null ||\n            uB == null) {\n            // This should not happen, as the SimpleBounds constructor should\n            // have handled this.\n             boundaries = null;\n             return; // Nothing else to check\n        }\n        // Check bounds dimensions.\n        if (lB.length != dimension) {\n            throw new DimensionMismatchException(lB.length, dimension);\n        }\n        if (uB.length != dimension) {\n            throw new DimensionMismatchException(uB.length, dimension);\n        }\n\n        // Checks whether there is at least one finite bound value.\n        boolean hasFiniteBounds = false;\n        for (int i = 0; i < dimension; i++) {\n            if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i])) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n        // Checks whether there is at least one infinite bound value.\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) {\n            for (int i = 0; i < dimension; i++) {\n                if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new MathUnsupportedOperationException(LocalizedFormats.REQUESTED_OPERATION_NOT_SUPPORTED);\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                // Check for overflow when calculating the range.\n                for (int i = 0; i < dimension; i++) {\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    if (range < 0) { // Check lower <= upper already done by SimpleBounds\n                         throw new NumberIsTooSmallException(boundaries[1][i], boundaries[0][i], true);\n                    }\n                    if (Double.isInfinite(range)) {\n                        throw new NumberIsTooLargeException(LocalizedFormats.BOUNDARY_RANGE,\n                                                            range, Double.MAX_VALUE, false);\n                    }\n                }\n            }\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != dimension) {\n                throw new DimensionMismatchException(inputSigma.length, dimension);\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    // Note: range is guaranteed not to be infinite here due to the earlier check.\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    if (inputSigma[i] > range) {\n                        throw new OutOfRangeException(inputSigma[i], 0, range);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}