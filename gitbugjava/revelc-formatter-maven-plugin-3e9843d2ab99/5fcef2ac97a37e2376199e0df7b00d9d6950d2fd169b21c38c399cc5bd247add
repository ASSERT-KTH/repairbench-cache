{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        // Configure the formatter for line endings based on the 'ending' parameter.\n        // This addresses the \"FIXME Handle linux vs windows since this formatter does not accept line endings\"\n        // by overriding the hardcoded LF setting from the CssFormatter constructor.\n        if (ending == LineEnding.LF) {\n            this.formatter.setForceLF(true);\n            // Ensure CRLF is off if LF is forced (though setForceLF should handle this internally)\n            this.formatter.setForceCRLF(false);\n        } else if (ending == LineEnding.CRLF) {\n            this.formatter.setForceCRLF(true);\n            // Ensure LF is off if CRLF is forced (though setForceCRLF should handle this internally)\n            this.formatter.setForceLF(false);\n        } else {\n            // For other LineEnding types (e.g., SYSTEM, MIXED),\n            // revert to the formatter's default behavior (which might be LF or platform dependent).\n            // Explicitly setting both to false ensures no forcing is applied.\n            this.formatter.setForceLF(false);\n            this.formatter.setForceCRLF(false);\n        }\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}