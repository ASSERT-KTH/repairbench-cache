{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n\n        // Clone the existing formatter settings to apply the requested line ending\n        // without modifying the shared 'this.formatter' instance permanently.\n        // CSSWriterSettings implements ICloneable, so getClone() is available.\n        final var currentFormatterSettings = this.formatter.getClone();\n        currentFormatterSettings.setNewlineString(ending.getCharacters());\n\n        var formattedCode = sheet.getCssText(currentFormatterSettings);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // The contract is to return null if no changes were made.\n        // If the formatted code (which now respects the 'ending' parameter) is\n        // identical to the original input code, then null is returned.\n        // Otherwise, the newly formatted code is returned.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}