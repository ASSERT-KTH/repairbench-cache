{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        // Normalize all line endings in the input string to LF ('\\n')\n        // This ensures that the parser receives a consistent representation of newlines,\n        // preventing issues where ph-css might mishandle '\\r' characters from CRLF or CR line endings,\n        // especially within comments, leading to incorrect output line endings.\n        final String codeWithLfEndings = code.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\");\n\n        final var source = new InputSource(new StringReader(codeWithLfEndings));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        \n        // this.formatter is already configured with the target 'ending' via the init method\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // If the formatted code (with potentially different line endings than input if 'ending' differs\n        // from original line endings in 'code', or other formatting changes)\n        // is identical to the original 'code', it means no formatting changes were needed or made.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}