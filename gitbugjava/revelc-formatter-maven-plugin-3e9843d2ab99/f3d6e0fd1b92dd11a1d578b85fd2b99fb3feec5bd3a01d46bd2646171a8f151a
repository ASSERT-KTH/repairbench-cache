{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        // Parse the stylesheet to a CSSStyleSheetImpl object\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        // Get the formatted CSS text using the configured formatter instance\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        // This replacement is applied to the output of the CSS parser/formatter.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // Normalize line endings of the formatted code to match the desired 'ending' parameter.\n        // First, standardize all existing line endings (CRLF, CR) to LF.\n        formattedCode = formattedCode.replace(\"\\r\\n\", \"\\n\").replace('\\r', '\\n');\n        // Then, convert to the target line ending (CRLF if specified).\n        if (ending == LineEnding.CRLF) {\n            formattedCode = formattedCode.replace(\"\\n\", \"\\r\\n\");\n        }\n\n        // To determine if the code was actually changed by formatting,\n        // we need to compare the formatted code with the original code,\n        // ensuring both use the same line ending convention for a fair comparison.\n        // First, normalize the original code's line endings to LF.\n        String normalizedOriginalCode = code.replace(\"\\r\\n\", \"\\n\").replace('\\r', '\\n');\n        // Then, convert to the target line ending (CRLF if specified).\n        if (ending == LineEnding.CRLF) {\n            normalizedOriginalCode = normalizedOriginalCode.replace(\"\\n\", \"\\r\\n\");\n        }\n        \n        // The patch for '\\t;' to '\\9;' is applied to the formatted code to correct for parser behavior.\n        // For the comparison to work correctly when the original code *also* had this hack,\n        // `normalizedOriginalCode` must reflect the original content accurately, which means\n        // if the original code contained `\\9;`, it should remain `\\9;` in `normalizedOriginalCode`.\n        // The formatter's output is adjusted to match the original, so `normalizedOriginalCode`\n        // should *not* have the `\\t;` to `\\9;` patch applied to it.\n\n        // If the formatted code (after line ending normalization and '\\9' patch) is identical\n        // to the original code (after line ending normalization), it means no effective\n        // formatting changes occurred, so return null.\n        if (normalizedOriginalCode.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}