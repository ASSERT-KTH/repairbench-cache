{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final CSSStyleSheetImpl sheet;\n        try {\n            // It's important to handle potential parsing errors from cssparser\n            sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n            if (sheet == null) {\n                // Handle case where parsing might return null, e.g., for empty input\n                // Although typically it might throw exceptions for invalid CSS.\n                // Returning original code might be safe, or throw an exception.\n                // Let's assume for non-empty valid CSS, sheet is non-null.\n                // If code was empty, formatted code would likely also be empty or minimal \"{}\",\n                // so the equality check later might handle it returning null.\n            }\n        } catch (final Exception e) {\n            // Catching generic Exception is broad, but cssparser might throw unchecked exceptions.\n            // Re-throwing as IOException to match method signature and indicate failure.\n            throw new IOException(\"Failed to parse CSS: \" + e.getMessage(), e);\n        }\n\n        // Get formatted text using the configured formatter.\n        // We assume this.formatter is configured correctly (including potentially line endings)\n        // during the Formatter initialization phase based on the 'ending' parameter passed there.\n        // The cssparser library's CssWriter uses the provided CssFormat.\n        final var formattedCode = sheet.getCssText(this.formatter);\n\n        // The problematic patch for IE hacks (`\\9`) is removed.\n        // This patch (`formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");`) was likely\n        // too aggressive, potentially corrupting CSS that genuinely uses a tab followed\n        // by a semicolon, or it might be outdated if cssparser's handling of `\\9` changed.\n        // Removing it makes the formatting rely solely on the cssparser library's output.\n\n        // Check if formatting resulted in any change. If not, return null.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}