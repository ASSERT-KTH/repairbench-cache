{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        // According to CSSOMParser Javadoc, null error handler defaults to standard error handler which throws exceptions\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n\n        // Use a writer settings object based on the default formatter configuration,\n        // but override the line ending with the one requested for this specific operation.\n        final var writerSettings = new CSSWriterSettings(this.formatter);\n        writerSettings.setNewLineString(ending.getChars());\n\n        // Generate the formatted code using the adjusted settings\n        var formattedCode = sheet.getCssText(writerSettings);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        // Note: This replacement relies on the specific behavior of the parser changing '\\9' to '\\t'.\n        // If the parser behavior changes in future versions, this might need adjustment.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // Check if formatting actually changed the code\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}