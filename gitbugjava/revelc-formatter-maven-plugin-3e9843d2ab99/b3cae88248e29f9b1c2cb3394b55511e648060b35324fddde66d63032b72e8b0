{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        // Configure the formatter to use the specified line ending\n        switch (ending) {\n            case LF:\n                this.formatter.setNewLineMode(com.helger.css.writer.ECSSNewLineMode.LF);\n                break;\n            case CRLF:\n                this.formatter.setNewLineMode(com.helger.css.writer.ECSSNewLineMode.CRLF);\n                break;\n            case CR:\n                this.formatter.setNewLineMode(com.helger.css.writer.ECSSNewLineMode.CR);\n                break;\n            case SYSTEM:\n                // Fallthrough intended for SYSTEM and any other unspecified cases\n            default:\n                this.formatter.setNewLineMode(com.helger.css.writer.ECSSNewLineMode.SYSTEM_DEFAULT);\n                break;\n        }\n\n        final var source = new org.xml.sax.InputSource(new java.io.StringReader(code));\n        final var parser = new com.helger.css.parser.CSSOMParser(new com.helger.css.parser. Dr\u017eavni ZborSACParserCSS3());\n        final var sheet = (com.helger.css.decl.CSSStyleSheet) parser.parseStyleSheet(source, null, null);\n        // getCssText uses the configured formatter, including the newline mode set above\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}