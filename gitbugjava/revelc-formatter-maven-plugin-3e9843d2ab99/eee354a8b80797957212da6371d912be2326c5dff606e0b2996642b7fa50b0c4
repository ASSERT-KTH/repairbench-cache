{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        // Create a new CSSWriterSettings based on the formatter settings configured during init.\n        // this.formatter can have its newline string set to \"\" if optimizedOutput is active,\n        // and its indent string set to \"\" initially if optimizedOutput is active (though CssFormatter.init\n        // later sets a specific indent).\n        final var writerSettings = new CSSWriterSettings(this.formatter);\n\n        // Override the new line string to use the one requested for this specific formatting operation.\n        // This ensures that the 'ending' parameter is respected, regardless of optimization settings\n        // that might have removed newlines in this.formatter.\n        writerSettings.setNewLineString(ending.getChars());\n        // Indentation settings from this.formatter are copied by CSSWriterSettings constructor\n        // and should be appropriate (e.g. \"  \" or user-defined indent).\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n\n        // Handle case where parsing might fail and return a null sheet,\n        // though this would likely indicate invalid CSS input.\n        if (sheet == null) {\n            // Or throw an exception, or return code unmodified, depending on desired behavior for parse errors.\n            // For now, mimic original behavior which would NPE if sheet is null.\n            // To be robust, one might want to handle this, e.g., by logging and returning original code or null.\n            // However, to match likely expectations of a formatter (valid input CSS), we proceed.\n            // If an NPE is not desired, this check should be more thorough.\n        }\n        \n        var formattedCode = sheet.getCssText(writerSettings); // Use the locally-adjusted writerSettings\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}