{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n\n        // Ensure the formatter uses the requested line ending\n        this.formatter.setLineSeparator(ending.getChars());\n\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        // Need to handle potential variations in whitespace generated by the formatter.\n        // Regex ensures we replace \\t; possibly surrounded by whitespace, but preserves the \\9; structure.\n        formattedCode = formattedCode.replaceAll(\"\\\\s*\\\\t\\\\s*;\", \"\\\\\\\\9;\");\n\n        // Remove potential trailing newline added by the formatter if the original code didn't have one\n        // and if the formatted code is not empty. The comparison check later handles the empty case.\n        if (!code.endsWith(ending.getChars()) && formattedCode.endsWith(ending.getChars())) {\n             // Check if the only difference is the trailing newline\n             if (code.equals(formattedCode.substring(0, formattedCode.length() - ending.getChars().length()))) {\n                 formattedCode = formattedCode.substring(0, formattedCode.length() - ending.getChars().length());\n             }\n        }\n\n        // Avoid returning unchanged code, which signals no formatting was needed.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n\n        return formattedCode;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}