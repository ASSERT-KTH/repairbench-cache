{
    "generation": "@Override\nprotected String doFormat(final String code, final LineEnding ending) throws IOException {\n    // preserve leading comments and whitespace\n    int prefixEnd = 0;\n    int len = code.length();\n    while (true) {\n        int idx = prefixEnd;\n        // skip any whitespace\n        while (idx < len && Character.isWhitespace(code.charAt(idx))) {\n            idx++;\n        }\n        // if we see a comment, include it in the prefix\n        if (idx + 1 < len && code.charAt(idx) == '/' && code.charAt(idx + 1) == '*') {\n            int endComment = code.indexOf(\"*/\", idx + 2);\n            if (endComment < 0) {\n                // unterminated comment\u2014stop here\n                break;\n            }\n            prefixEnd = endComment + 2;\n        } else {\n            break;\n        }\n    }\n    String prefix = code.substring(0, prefixEnd);\n    String body = code.substring(prefixEnd);\n\n    // parse and re\u2010serialize the CSS body\n    final var source = new InputSource(new StringReader(body));\n    final var parser = new CSSOMParser(new SACParserCSS3());\n    final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n    String formattedBody = sheet.getCssText(this.formatter);\n\n    // Patch converted 'tab' back to '\\9' for the IE 7,8,9 hack\n    formattedBody = formattedBody.replace(\"\\t;\", \"\\\\9;\");\n\n    String formatted = prefix + formattedBody;\n    // if nothing really changed, return null so caller knows it's already formatted\n    if (code.equals(formatted)) {\n        return null;\n    }\n    return formatted;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}