{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        // Configure the formatter with the correct line ending *before* parsing,\n        // although CSSOMParser might not use it directly during parsing,\n        // setting it ensures the writer uses the correct ending.\n        // More importantly, the CSSWriterSettings needs the correct line ending for output generation.\n        this.formatter.setNewLineString(ending.getChars());\n\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        // Check if parsing was successful and a sheet was created\n        if (sheet == null) {\n            // Handle parsing error, e.g., return original code or throw exception\n            // Depending on desired behavior. Returning null signifies no change/formatting needed,\n            // but maybe an error state is more appropriate if parsing fails.\n            // For now, let's assume returning null implies no formatting could be applied or was needed.\n             return null;\n         }\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        // This patch should ideally happen only if the original code contained '\\9'.\n        // However, without tracking this, we apply it globally. This might be fragile.\n        // A more robust solution might involve a custom CSSNodeVisitor or post-processing based on original content analysis.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // Normalize line endings in the original code for fair comparison\n        // Or rely on the fact that if formatting changes anything (including line endings), it's different.\n        // The current check `code.equals(formattedCode)` might fail if only line endings differ,\n        // which might be intended (report change) or unintended (don't report if only endings change).\n        // Given the test expects specific line endings, reporting changes seems correct.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}