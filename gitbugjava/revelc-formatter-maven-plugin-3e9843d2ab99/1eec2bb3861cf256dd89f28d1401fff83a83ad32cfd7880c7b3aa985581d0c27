{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // The following line was a patch to convert tabs generated by cssparser back to '\\9' for IE 7,8, and 9 hacks.\n        // However, this patch can inadvertently convert legitimate tab characters (e.g., for indentation)\n        // into '\\9;', leading to incorrect formatting, especially if the underlying cssparser\n        // library has been updated to handle '\\9' correctly or if the input does not contain the IE hack.\n        // Removing this specific replacement as it is likely causing the checksum mismatch in general CSS formatting tests.\n        // formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}