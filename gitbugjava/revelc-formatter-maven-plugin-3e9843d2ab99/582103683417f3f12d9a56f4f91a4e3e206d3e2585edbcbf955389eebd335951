{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        \n        // Create a copy of the base formatter settings.\n        // This allows customizing settings like line endings for this specific format operation\n        // without altering the template 'this.formatter' used for other operations.\n        final var writerSettings = new CSSWriterSettings(this.formatter);\n\n        // Configure the line ending mode on our copy of the settings.\n        // The 'ending' parameter is expected to be a specific type (LF, CRLF, or CR)\n        // as resolved by the calling context (e.g., AbstractCacheableFormatter).\n        if (LineEnding.LF.equals(ending)) {\n            writerSettings.setNewLineMode(ECSSNewLineMode.LF);\n        } else if (LineEnding.CRLF.equals(ending)) {\n            writerSettings.setNewLineMode(ECSSNewLineMode.CRLF);\n        } else if (LineEnding.CR.equals(ending)) {\n            writerSettings.setNewLineMode(ECSSNewLineMode.CR);\n        }\n        // Note: If 'ending' could be other values like SYSTEM, UNKNOWN, AUTO,\n        // additional logic would be needed here to resolve them. However,\n        // current usage in AbstractCacheableFormatter resolves it before calling doFormat.\n\n        // Generate the CSS text using the customized writer settings.\n        // sheet.getCssText() may return null if the sheet contains no rules (e.g., empty input, or only comments).\n        var formattedCode = sheet.getCssText(writerSettings);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack.\n        // cssparser library might convert '\\9' (an IE-specific suffix) into a literal tab character '\\t'.\n        // This replacement restores the intended '\\9;' sequence.\n        // A null check is added for robustness, in case formattedCode is null from getCssText.\n        if (formattedCode != null) {\n            formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n        }\n\n        // If formatting did not change the code, return null to signify no changes.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}