{
    "generation": "import com.helger.css.om.CSSStyleSheetImpl;\nimport com.helger.css.parser.CSSOMParser;\nimport com.helger.css.parser.ParseException;\nimport com.helger.css.parser.SACParserCSS3;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport net.revelc.code.formatter.LineEnding;\nimport org.xml.sax.InputSource;\n\n// Assuming 'formatter' is a field of type com.helger.css.writer.CSSWriterSettings available in the containing class.\n\n    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n        // Configure the CSS writer to use the line ending specified by the caller for this format operation.\n        // This is crucial because the original code didn't seem to use the 'ending' parameter.\n        this.formatter.setNewLineString(ending.getChars());\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        CSSStyleSheetImpl sheet;\n        try {\n            // Parse the CSS input string into an object model.\n            sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n            // Check if parsing was successful; some parsers might return null on error.\n            if (sheet == null) {\n                throw new IOException(\"Failed to parse CSS: CSSOMParser returned null StyleSheet\");\n            }\n        } catch (final ParseException e) {\n            // Catch and wrap specific parsing exceptions.\n            throw new IOException(\"Failed to parse CSS\", e);\n        } catch (final Exception e) {\n            // Catch other potential runtime exceptions during parsing.\n            throw new IOException(\"An unexpected error occurred during CSS parsing\", e);\n        }\n\n        // Generate the formatted CSS string from the object model using the configured settings.\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        // Retain this patch as it was likely added to handle a specific behavior of the cssparser library version used.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // Return null if the formatting process resulted in code identical to the original input.\n        // This prevents unnecessary file writes if the code is already formatted.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n\n        // Return the formatted code string.\n        return formattedCode;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}