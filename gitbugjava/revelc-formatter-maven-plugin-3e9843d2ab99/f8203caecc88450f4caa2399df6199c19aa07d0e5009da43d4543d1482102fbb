{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        var formattedCode = sheet.getCssText(this.formatter);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // Normalize line endings to the desired type.\n        // Most CSSOM implementations produce LF, so we first ensure all newlines are LF,\n        // then convert them to the target line ending.\n        formattedCode = formattedCode.replace(\"\\r\\n\", \"\\n\"); // Convert CRLF to LF\n        formattedCode = formattedCode.replace(\"\\r\", \"\\n\");   // Convert CR to LF\n        formattedCode = formattedCode.replace(\"\\n\", ending.getChars()); // Convert LF to target line ending\n\n        // Always return the formatted code. The calling logic will decide if it's different\n        // from the input and if it needs to be written. This is crucial for cases where\n        // internal processing (like the \\9; patch) makes the output identical to input,\n        // but it still represents a 'formatted' state.\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}