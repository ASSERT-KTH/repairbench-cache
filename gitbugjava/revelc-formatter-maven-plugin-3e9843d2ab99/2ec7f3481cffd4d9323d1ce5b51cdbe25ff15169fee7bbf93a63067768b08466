{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n        // Create settings for this specific call based on the base settings\n        // Ensure base formatter settings are initialized (e.g., in init method)\n        if (this.formatter == null) {\n            throw new IllegalStateException(\"CssFormatter is not initialized.\");\n        }\n        final var settings = new CSSWriterSettings(this.formatter); // Use copy constructor\n\n        // Set the line ending requested by the caller\n        settings.setNewLineString(ending.getChars());\n        // Ensure optimized output is off if readability/consistency is desired over size\n        // settings.setOptimizedOutput(false); // Keep the default from this.formatter unless specified otherwise\n\n        CascadingStyleSheet sheet = null;\n        try {\n            // Use CSSReader to parse the code.\n            // Using a logging error handler, but could use ThrowingCSSParseErrorHandler for stricter parsing.\n            // Assuming UTF-8 encoding is appropriate here.\n            sheet = CSSReader.readFromString(code, StandardCharsets.UTF_8, ECSSVersion.CSS30,\n                    new LoggingCSSParseErrorHandler());\n        } catch (final Exception e) {\n            // Wrap parsing exceptions in IOException as per method signature\n             // Log the error for diagnostics\n             // Using System.err here as logger might not be configured; replace with actual logger if available\n             System.err.println(\"CSS parsing failed: \" + e.getMessage());\n             // Rethrow as IOException or a more specific formatting exception if available\n             throw new IOException(\"Failed to parse CSS\", e);\n        }\n\n        // Check if parsing was successful (CSSReader returns null on empty/null input or severe errors depending on handler)\n        if (sheet == null) {\n            // Log warning or debug message\n            // System.err.println(\"CSS parsing resulted in a null sheet. Input might be empty or invalid.\");\n            // Return null if the sheet couldn't be parsed, implying no change or failure state\n            // Check if input code was empty or just whitespace\n             if (code == null || code.trim().isEmpty()) {\n                 return code; // Return original empty/whitespace code\n             } else {\n                 // Parsing failed for non-empty code, treat as unformattable / error\n                 // Depending on desired behavior, could return original 'code' or throw exception\n                 // Returning null implies \"no formatting applied\", which might be misleading here.\n                 // Let's return the original code to indicate no successful formatting occurred.\n                 // Or align with original behavior which seems to return null on failure implicitly.\n                 // Let's stick to returning null for now to match original structure's potential failure path.\n                 return null;\n             }\n        }\n\n        // Get the formatted CSS text using CSSWriter and the configured settings\n        final var writer = new CSSWriter(settings);\n        var formattedCode = writer.getCSSAsString(sheet);\n\n        // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser might switch it to 'tab'.\n        // This needs verification if still required with com.helger.css library. Keeping for compatibility.\n        if (formattedCode != null) {\n            formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n        }\n\n        // Handle case where formatting results in null or empty string unexpectedly\n        if (formattedCode == null) {\n             // Log this case?\n             return null; // Nothing to return\n        }\n\n        // Check if the formatted code is identical to the original code\n        if (code.equals(formattedCode)) {\n            return null; // Return null signifies no changes were made\n        }\n\n        return formattedCode;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}