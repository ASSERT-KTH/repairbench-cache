{
    "generation": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n        // Create a copy of the base formatter settings for this specific formatting operation.\n        // This allows modification of settings like line endings without affecting the shared base configuration.\n        // this.formatter is typically initialized once, but doFormat can be called with different 'ending' requirements.\n        final com.helger.css.writer.CSSWriterSettings currentWriterSettings =\n                new com.helger.css.writer.CSSWriterSettings(this.formatter);\n        currentWriterSettings.setNewLineString(ending.getChars());\n\n        final var source = new org.xml.sax.InputSource(new StringReader(code));\n        // Ensure the correct parser class is referenced.\n        final var parser = new com.helger.css.parser.CSSOMParser(\n                new com.helger.css.parser.SACParserCSS3());\n        \n        // CSSOMParser.parseStyleSheet returns com.helger.css.om.CSSStyleSheet.\n        // It can return null if the CSS input is empty or contains only comments,\n        // though some versions/configurations might return an empty sheet object instead.\n        // It's safer to handle the null case explicitly.\n        final com.helger.css.om.CSSStyleSheet sheet = parser.parseStyleSheet(source, null, null);\n\n        String formattedCode;\n        if (sheet == null) {\n            // If the sheet is null (e.g., due to empty input or a parse error leading to a null sheet),\n            // consider the formatted code as an empty string. This is consistent with CSSWriter's behavior\n            // when trying to get CSS string from a null sheet object.\n            formattedCode = \"\";\n        } else {\n            // Use CSSWriter for formatting, as recommended by the ph-css library.\n            // The original code's use of CSSStyleSheetImpl.getCssText() is deprecated\n            // and internally performs a similar operation: new CSSWriter().getCSSAsString().\n            final var writer = new com.helger.css.writer.CSSWriter(currentWriterSettings);\n            formattedCode = writer.getCSSAsString(sheet);\n        }\n\n        // Patch: cssparser converts '\\9' (an IE hack) into a literal tab character during parsing.\n        // This patch aims to convert such tab characters back to the '\\9' sequence in the formatted output.\n        // The CSS writer settings (ECSSOutputStyle.EXPANDED by default for non-optimized output)\n        // typically add a space before \"!important\". So, a property like \"foo: bar\\9 !important;\"\n        // would become \"foo : bar<TAB> !important;\" after parsing and formatting.\n        // The order of these two replacements generally doesn't matter as \"\\t;\" is not a substring of \"\\t !important;\"\n        // in a way that would cause issues, and vice-versa.\n        formattedCode = formattedCode.replace(\"\\t !important;\", \"\\\\9 !important;\");\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n        // If the formatted code is identical to the original input, return null\n        // to signify that no changes were made by the formatting process.\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}