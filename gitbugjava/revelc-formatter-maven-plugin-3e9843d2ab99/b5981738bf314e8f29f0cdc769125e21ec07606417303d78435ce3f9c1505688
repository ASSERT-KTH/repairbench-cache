{
    "generation": "@Override\nprotected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n    // Ensure that the input code uses the correct line endings\n    String normalizedCode = code;\n    if (ending == LineEnding.CRLF && !code.contains(\"\\r\\n\")) {\n        normalizedCode = code.replace(\"\\n\", \"\\r\\n\");\n    } else if (ending == LineEnding.LF && !code.contains(\"\\n\") && code.contains(\"\\r\\n\")) {\n        normalizedCode = code.replace(\"\\r\\n\", \"\\n\");\n    }\n\n    final var source = new InputSource(new StringReader(normalizedCode));\n    final var parser = new CSSOMParser(new SACParserCSS3());\n    final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n    var formattedCode = sheet.getCssText(this.formatter);\n\n    // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n    formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n    // Normalize the formatted code to match the expected line ending format\n    if (ending == LineEnding.CRLF) {\n        formattedCode = formattedCode.replace(\"\\n\", \"\\r\\n\");\n    } else if (ending == LineEnding.LF) {\n        formattedCode = formattedCode.replace(\"\\r\\n\", \"\\n\");\n    }\n\n    if (normalizedCode.equals(formattedCode)) {\n        return null;\n    }\n    return formattedCode;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}