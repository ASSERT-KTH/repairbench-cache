{
    "generation": "@Override\nprotected String doFormat(final String code, final LineEnding ending) throws IOException {\n\n    final var source = new InputSource(new StringReader(code));\n    final var parser = new CSSOMParser(new SACParserCSS3());\n    // Catch exceptions to avoid potential issues\n    final CSSStyleSheet sheet = parser.parseStyleSheet(source, null, null);\n\n    // Use the correct line ending for the formatter\n    var formattedCode = sheet.getCssText(this.formatter);\n    formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n    // Normalize line endings\n    if (ending == LineEnding.LF) {\n        formattedCode = formattedCode.replace(\"\\r\\n\", \"\\n\");\n    } else if (ending == LineEnding.CRLF) {\n        formattedCode = formattedCode.replace(\"\\r\", \"\");\n        formattedCode = formattedCode.replace(\"\\n\", \"\\r\\n\");\n    }\n\n    // The original check if necessary, depends on test conditions\n    if (code.equals(formattedCode)) {\n        return null;\n    }\n    return ending.toString() + formattedCode;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}