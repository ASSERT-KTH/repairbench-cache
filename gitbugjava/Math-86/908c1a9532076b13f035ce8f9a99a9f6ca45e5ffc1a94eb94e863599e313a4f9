{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix symmetry and initialize the lower triangle (below diagonal) to 0\n        // This loop assumes the decomposition will compute L^T in the upper triangle in-place.\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = lJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Store 0 in the lower triangle part, as we work with L^T in the upper triangle\n                lJ[i] = 0;\n           }\n        }\n\n        // transform the matrix\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // check diagonal element (after updates from previous iterations)\n            // This is the value a_ii - sum_{k=0}^{i-1} (L^T_{ki})^2 which must be positive\n            if (ltI[i] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]); // Calculate L^T_{ii}\n            final double inverse = 1.0 / ltI[i];\n\n            // Calculate the rest of the i-th row of L^T and update the trailing submatrix\n            for (int q = order - 1; q > i; --q) { // Work on columns j > i (stored in L^T as (i, q))\n                ltI[q] *= inverse; // Compute L^T_{iq} = (a_{iq} - sum) / L^T_{ii}\n                                   // (Assuming ltI[q] contains the updated a_{iq} - sum)\n\n                final double[] ltQ = lTData[q]; // Get row q (where q > i)\n                // Update the lower right submatrix A_{qp} = A_{qp} - L^T_{iq} * L^T_{ip}\n                // for p >= q > i\n                for (int p = q; p < order; ++p) {\n                    // Note: ltI[p] is L^T_{ip} which has been computed in this loop or previous iterations of i\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}