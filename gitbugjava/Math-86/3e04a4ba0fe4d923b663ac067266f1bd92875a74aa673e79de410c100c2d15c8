{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData(); // Use getData to access internal array, assumes modification is allowed or getData returns a copy.\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix symmetry and initialize the lower triangle for L^T storage\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i]; // Row i\n\n            // Check symmetry (comparing A[i][j] with A[j][i])\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j]; // Row j\n                final double lIJ = lI[j];      // A[i][j]\n                final double lJI = lJ[i];      // A[j][i]\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Zero the lower triangle part, as we work with L^T in the upper triangle\n                lJ[i] = 0.0;\n           }\n        }\n\n        // transform the matrix in-place to store L^T in the upper triangle\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i]; // Row i of the matrix being transformed\n\n            // Calculate the diagonal element L^T[i][i] (U_ii)\n            // This requires the value A[i][i] - sum_{k=0}^{i-1} (L^T[k][i])^2\n            // which is the value currently stored in ltI[i] after previous updates.\n            final double diagonalElement = ltI[i];\n\n            // Check for positive definiteness: diagonal element must be positive\n            if (diagonalElement < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // Calculate L^T[i][i] = sqrt(diagonalElement)\n            ltI[i] = Math.sqrt(diagonalElement);\n            final double inverse = 1.0 / ltI[i]; // 1.0 / L^T[i][i]\n\n            // Calculate the elements L^T[i][q] for q > i\n            // And update the trailing submatrix A[q][p] -= L^T[i][q] * L^T[i][p]\n            for (int q = order - 1; q > i; --q) {\n                // Calculate L^T[i][q] = (A[i][q] - sum_{k=0}^{i-1} L^T[k][i] * L^T[k][q]) / L^T[i][i]\n                // The numerator is the value currently stored in ltI[q]\n                ltI[q] *= inverse; // Now ltI[q] holds L^T[i][q]\n                final double L_T_iq = ltI[q]; // L^T[i][q]\n\n                final double[] ltQ = lTData[q]; // Row q\n                // Update A[q][p] for p >= q using the calculated L^T[i][q] and L^T[i][p]\n                // Note: L^T[i][p] is stored in ltI[p] (calculated in previous steps of this q-loop or current step if p=q)\n                for (int p = q; p < order; ++p) {\n                    // A'[q][p] = A[q][p] - L^T[i][q] * L^T[i][p]\n                    ltQ[p] -= L_T_iq * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}