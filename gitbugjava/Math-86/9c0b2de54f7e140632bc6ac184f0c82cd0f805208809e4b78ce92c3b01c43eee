{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData(); // Represents L^T in the end, computed in place\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check the matrix symmetry\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j]; // A[i][j]\n                final double lJI = lJ[i]; // A[j][i]\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    // Matrix is not symmetric enough relative to the threshold\n                    throw new NotSymmetricMatrixException();\n                }\n                // Do not zero out elements (lJ[i] = 0) here.\n                // The algorithm computes L^T in the upper triangle in place.\n                // The lower triangle elements (lJ[i]) are needed for intermediate calculations\n                // implicitly or explicitly depending on the exact algorithm variant.\n           }\n        }\n\n        // Transform the matrix to L^T in place (upper triangle)\n        // This version modifies the input matrix data directly.\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i]; // Row i\n\n            // Calculate the diagonal element L^T[i][i]\n            // First, update A[i][i] to A[i][i] - sum(L^T[k][i]^2 for k < i)\n            // This update happens implicitly via the inner loop calculations in previous iterations (p=i case).\n            // So, ltI[i] already contains the value A[i][i] - sum(L^T[k][i]^2 for k < i).\n\n            // Check for positive definiteness: diagonal element must be strictly positive\n            // This check must happen *before* taking the square root.\n            if (ltI[i] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]); // Calculate L^T[i][i]\n            final double inverse = 1.0 / ltI[i]; // Inverse of L^T[i][i] for efficiency\n\n            // Calculate the elements L^T[i][q] for q > i (rest of row i)\n            // and update the Schur complement (lower right submatrix A[i+1:n, i+1:n])\n            for (int q = order - 1; q > i; --q) { // Iterate over columns q to the right of i (decreasing index)\n                // Calculate L^T[i][q] = (A[i][q] - sum(L^T[k][i] * L^T[k][q] for k < i)) / L^T[i][i]\n                // The value (A[i][q] - sum(...)) is already stored in ltI[q] due to previous updates\n                ltI[q] *= inverse; // Compute L^T[i][q]\n\n                // Update the submatrix A[q:n, q:n] by subtracting the outer product L^T[i][q:n]^T * L^T[i][q:n]\n                // Specifically, update A[r][c] -= L^T[i][r] * L^T[i][c] for r >= q, c >= r\n                final double[] ltQ = lTData[q]; // Row q (where q > i)\n                for (int p = q; p < order; ++p) { // Iterate over columns p >= q\n                    // Update A[q][p] using L^T[i][q] and L^T[i][p]\n                    // L^T[i][q] is ltI[q] (just computed)\n                    // L^T[i][p] is ltI[p] (computed in a previous step of this q-loop when q was p, or already available if p > q)\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}