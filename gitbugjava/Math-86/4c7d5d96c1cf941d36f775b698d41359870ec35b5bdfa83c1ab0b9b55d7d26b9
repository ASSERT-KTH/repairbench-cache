{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData(); // Use a copy to avoid modifying the original matrix\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix symmetry\n        for (int i = 0; i < order; ++i) {\n            final double[] rowI = lTData[i];\n            for (int j = i + 1; j < order; ++j) {\n                final double[] rowJ = lTData[j];\n                final double mij = rowI[j];\n                final double mji = rowJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(mij), Math.abs(mji));\n                if (Math.abs(mij - mji) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Do not zero out lower triangle elements here, the algorithm below uses them if needed,\n                // or computes L^T in the upper triangle.\n           }\n        }\n\n        // Perform Cholesky decomposition (calculating L^T in place in the upper triangle)\n        for (int i = 0; i < order; ++i) {\n            final double[] ltI = lTData[i]; // Row i of matrix being transformed (stores L^T)\n\n            // Calculate diagonal element L^T[i][i]\n            double d = ltI[i]; // Element A[i][i] initially\n            for (int k = 0; k < i; ++k) {\n                // In L^T, the elements below diagonal are not used/calculated by standard Cholesky for L^T.\n                // We need L^T[k][i] which is element (k,i) in lTData.\n                double lki = lTData[k][i];\n                d -= lki * lki;\n            }\n\n            // Check for positive definiteness: diagonal elements must be positive\n            // The check is done here, using the value d = L^T[i][i]^2\n            if (d <= absolutePositivityThreshold) {\n                 throw new NotPositiveDefiniteMatrixException();\n            }\n            ltI[i] = Math.sqrt(d); // Calculate L^T[i][i]\n            final double lTii = ltI[i];\n            final double inverse = 1.0 / lTii;\n\n            // Calculate elements L^T[i][j] for j > i in row i\n            for (int j = i + 1; j < order; ++j) {\n                double sum = lTData[i][j]; // Element A[i][j] initially\n                for (int k = 0; k < i; ++k) {\n                     // We need L^T[k][i] (lTData[k][i]) and L^T[k][j] (lTData[k][j])\n                     sum -= lTData[k][i] * lTData[k][j];\n                }\n                ltI[j] = sum * inverse; // L^T[i][j] = sum / L^T[i][i]\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}