{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix symmetry and clear the lower triangle\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n\n            // check off-diagonal elements symmetry\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = lJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Clear the lower triangle element, the algorithm operates on the upper triangle\n                lJ[i] = 0.0;\n           }\n           // The initial check for diagonal element positivity here was removed,\n           // as it's insufficient. The check must be done during the transformation.\n        }\n\n        // transform the matrix into its L^T Cholesky decomposition\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i]; // Row i of the matrix (transforming to L^T row i)\n\n            // check diagonal element positivity: A[i][i] - sum_{k=0}^{i-1} L[i][k]^2 > 0\n            // The value ltI[i] at this point holds the value which must be positive\n            final double diagonalElement = ltI[i];\n            if (diagonalElement < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // Compute L^T[i][i] = sqrt( A[i][i] - sum_{k=0}^{i-1} L^T[k][i]^2 )\n            ltI[i] = Math.sqrt(diagonalElement);\n            final double inverse = 1.0 / ltI[i]; // Cache 1.0 / L^T[i][i]\n\n            // Compute the elements L^T[i][j] for j > i in the i-th row\n            // and update the lower right submatrix A[j][k] -= L^T[i][j] * L^T[i][k]\n            for (int q = order - 1; q > i; --q) { // q iterates through columns j > i\n                // Compute L^T[i][q] = (A[i][q] - sum_{k=0}^{i-1} L^T[k][i] * L^T[k][q]) / L^T[i][i]\n                // The value A[i][q] - sum... is already stored in ltI[q] due to previous updates\n                ltI[q] *= inverse; // Compute and store L^T[i][q]\n                final double ltIQ = ltI[q]; // Cache L^T[i][q]\n\n                // Update the submatrix A[q][p] for p >= q\n                // A[q][p] -= L^T[i][q] * L^T[i][p]\n                final double[] ltQ = lTData[q]; // Row q\n                for (int p = q; p < order; ++p) { // p iterates through columns k >= q\n                    ltQ[p] -= ltIQ * ltI[p]; // Update A[q][p] using computed L^T elements\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}