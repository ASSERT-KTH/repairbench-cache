{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData(); // In-place decomposition of the matrix data\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check the matrix symmetry and clear the lower triangle\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i]; // Row i\n\n            // Check off-diagonal elements for symmetry\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j]; // Row j\n                final double lIJ = lI[j]; // Element (i, j)\n                final double lJI = lJ[i]; // Element (j, i)\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                lJ[i] = 0.0; // Clear the lower triangular element (optional, does not affect L^T)\n           }\n        }\n\n        // Transform the matrix (compute L^T in the upper triangle, in-place)\n        // using the Right-Looking Cholesky algorithm (variant)\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i]; // Row i of the matrix being transformed (stores L^T eventually)\n\n            // Check diagonal element positivity before taking the square root\n            // At step i, the element lTData[i][i] should contain the updated value\n            // A_ii - sum_{k=0}^{i-1} (L^T_ki)^2\n            // This value must be strictly positive for a positive definite matrix.\n            if (ltI[i] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // Compute L^T_ii = sqrt( A_ii - sum_{k=0}^{i-1} (L^T_ki)^2 )\n            ltI[i] = Math.sqrt(ltI[i]);\n            final double inverse = 1.0 / ltI[i]; // Precompute 1 / L^T_ii for efficiency\n\n            // Compute the rest of row i (L^T_ij for j > i) and update the trailing submatrix\n            // This loop structure implicitly performs the updates needed for subsequent steps\n            for (int q = order - 1; q > i; --q) { // q represents the column index j > i, iterating downwards\n                // Compute L^T_iq = (A_iq - sum_{k=0}^{i-1} L^T_ki * L^T_kq) / L^T_ii\n                // The value ltI[q] currently holds the numerator part due to updates from previous outer loop iterations (k < i)\n                ltI[q] *= inverse; // Divide by L^T_ii to get the final L^T_iq\n\n                // Update the trailing submatrix A(q:n, q:n) using the computed row i elements\n                final double[] ltQ = lTData[q]; // Row q (where q > i)\n                for (int p = q; p < order; ++p) { // p represents the column index (p >= q > i)\n                    // Update element A_qp = A_qp - L^T_iq * L^T_ip\n                    // where L^T_iq = ltI[q] (computed above)\n                    // and L^T_ip = ltI[p] (computed in a previous iteration of this q-loop or is L^T_ii if p=i, which is handled by loop bounds)\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}