{
    "generation": "    // switching the chartset midstream when a meta http-equiv tag defines the charset.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        // Note: Bypasses UTF-8 detection from BOM - relies on meta or specified charset.\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            \n            // Strip BOM if present\n            if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                docData = docData.substring(1);\n            }\n\n            doc = parser.parseInput(docData, baseUri); // Initial parse\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            String foundCharset = null;\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                 foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                // Charset found requires re-decode. Update charset name.\n                charsetName = foundCharset; \n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                // Strip BOM again if present after re-decode\n                if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                    docData = docData.substring(1);\n                }\n                doc = null; // discard first doc, need to reparse\n            } else { // Meta found but charset is default, or meta not found. Stick with initial parse.\n                 // Ensure charsetName is set to the default charset used for the parse.\n                 charsetName = defaultCharset;\n                 // doc holds the initial parse result and is used.\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n            // Strip BOM if present\n            if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                docData = docData.substring(1);\n            }\n            // doc is left null, so the main parse below executes.\n        }\n\n        if (doc == null) {\n            // We need to parse docData:\n            // 1. When charsetName was provided (previous section), doc is null.\n            // 2. When charsetName was null, detected different charset, re-decoded, doc is null.\n            // In both cases, docData has been decoded and BOM stripped.\n            doc = parser.parseInput(docData, baseUri);\n        }\n        \n        // Set the final charset determined for the document.\n        // It will be either the specified charset, the detected charset, or the default charset.\n        doc.outputSettings().charset(charsetName);\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}