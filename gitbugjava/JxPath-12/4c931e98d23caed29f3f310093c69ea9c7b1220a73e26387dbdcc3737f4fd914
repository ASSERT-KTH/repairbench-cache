{
    "generation": "    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            // Node must be an element to have a name test match.\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            // The namespace URI required by the test (null if node must be in null namespace, or from prefix mapping)\n            String requiredNS = nodeNameTest.getNamespaceURI();\n            // Is the test name component '*' (e.g., 'prefix:*' or '*')?\n            boolean isTestNameWildcard = nodeNameTest.isWildcard();\n            // The local name required by the test (e.g., \"ElementB\", \"*\")\n            String testLocalName = testName.getName();\n            // The prefix used in the XPath expression (e.g., \"B\", \"*\", or null)\n            // This helps differentiate 'name' (null prefix, requires null/default ns) from '*:name' (* prefix, requires any ns)\n            String testPrefix = testName.getPrefix();\n\n            // Handle '*' node test (match any element name in any namespace)\n            // This corresponds to: name='*', prefix=null, requiredNS=null\n            if (isTestNameWildcard && testPrefix == null) {\n                 return true;\n            }\n\n            // Check local name match if the test name is not a wildcard.\n            String nodeLocalName = DOMNodePointer.getLocalName(node);\n            // We need an equalStrings helper that handles nulls safely (like Objects.equals)\n            // Assuming equalStrings exists and works like Objects.equals\n            if (!isTestNameWildcard && !equalStrings(testLocalName, nodeLocalName)) {\n                return false; // Local names don't match\n            }\n\n            // At this point, local names match, or the test name is a wildcard (case 'prefix:*').\n\n            // Handle '*:name' node test (match specific name in any namespace)\n            // This corresponds to: name='name', prefix='*', requiredNS=null\n            // The key identifier is testPrefix being \"*\"\n            if (testPrefix != null && testPrefix.equals(\"*\")) {\n                 // Local name already matched above (since !isTestNameWildcard is true here).\n                 // Namespace condition is wildcard ('any'), so return true.\n                 return true;\n            }\n\n            // Handle remaining cases: 'prefix:name', 'name', 'prefix:*'\n            // These all require matching the namespace URI.\n            // 'prefix:name' -> requiredNS=uri, isTestNameWildcard=false. Match requiredNS against nodeNS.\n            // 'name' -> requiredNS=null (or default), isTestNameWildcard=false. Match requiredNS against nodeNS.\n            // 'prefix:*' -> requiredNS=uri, isTestNameWildcard=true. Match requiredNS against nodeNS.\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n            // Compare required namespace with actual node namespace\n            return equalStrings(requiredNS, nodeNS);\n\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    // Definition of node() test varies. JXPath spec says any node.\n                    // This code originally matched only ELEMENT and DOCUMENT.\n                    // Keep original behavior unless test indicates otherwise.\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    // This tests for the PI type, does not match PI target name\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false; // Unknown NodeTypeTest type\n        }\n        if (test instanceof ProcessingInstructionTest) {\n            // This handles PI test with specific target name.\n            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n                String testPI = ((ProcessingInstructionTest) test).getTarget();\n                String nodePI = ((ProcessingInstruction) node).getTarget();\n                // Assuming String.equals is sufficient (null target names not expected?)\n                // Use equalStrings for safety? Let's stick to original .equals\n                return testPI.equals(nodePI);\n            }\n            // Node is not a PI node.\n            return false;\n        }\n        // Unrecognized test type or node type mismatch for PI test.\n        return false;\n    }\n\n    /**\n     * Helper method to compare two strings for equality, handling nulls safely.\n     * Assumed to be available based on original code's usage.\n     * @param s1 First string\n     * @param s2 Second string\n     * @return true if strings are equal (or both null)\n     */\n    private static boolean equalStrings(String s1, String s2) {\n        if (s1 == null) {\n            return s2 == null;\n        }\n        return s1.equals(s2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}