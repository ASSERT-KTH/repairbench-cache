{
    "generation": "    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      // Create a FOR_IN node, representing a for-in loop.\n      // The Rhino parser node ForInLoop represents both for-in and for-each\n      // loops. However, for-each is NOT standard ECMAScript.\n      // We need to handle it here because the Rhino parser may parse it\n      // successfully depending on the configuration.\n      // Previously, this incorrectly returned a FOR node.\n      // Note: This fix addresses the transformation logic. The underlying\n      // issue for the failing test is likely that the parser should be\n      // configured to reject \"for each\" syntax, causing a parse error.\n      // Fixing this function corrects the IR representation for valid for-in loops\n      // and might indirectly affect how errors are reported later for\n      // incorrectly parsed for-each loops if they reach this stage.\n      return newNode(\n          Token.FOR_IN, // Corrected from Token.FOR\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}