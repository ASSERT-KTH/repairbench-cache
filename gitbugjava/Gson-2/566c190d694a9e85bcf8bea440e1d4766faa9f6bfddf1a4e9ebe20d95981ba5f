{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n\n        // Wrap the given type adapterdelegate to confirm that the final type matches the requested type.\n        return new TypeAdapter<T2>() {\n          @Override public void write(JsonWriter out, T2 value) throws IOException {\n            // T2 is a subtype of T1, so this assignment is safe.\n            typeAdapter.write(out, (T1) value);\n          }\n          @Override public T2 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n                  // Adding path information might be helpful for debugging, similar to Gson's standard adapters\n                  // For example: + \"; at path \" + in.getPath());\n                  // However, sticking to the original test's expected message structure for now.\n            }\n            // This cast is safe because of the isInstance check above.\n            return (T2) result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}