{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        // Wrap the type adapter to perform runtime type checking\n        return new TypeAdapter<T2>() {\n          @Override public void write(JsonWriter out, T2 value) throws IOException {\n            // Delegate writing to the original adapter. T2 is a subtype of T1,\n            // so casting to T1 is safe.\n            typeAdapter.write(out, (T1) value);\n          }\n          @Override public T2 read(JsonReader in) throws IOException {\n            // Delegate reading to the original adapter\n            T1 result = typeAdapter.read(in);\n            // Check if the deserialized object is an instance of the requested type T2\n            // This is necessary because the original adapter might produce a T1 instance\n            // that is not actually a T2 instance (e.g., JsonPrimitive instead of JsonObject).\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            // The cast is safe because we checked the instance type, or result is null\n            return (T2) result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}