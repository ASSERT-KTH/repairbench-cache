{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * The MRT requires the pivot element (entry in the pivot column) to be strictly positive.\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio, or {@code null} if no suitable pivot row exists (unbounded solution)\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Check if the entry in the pivot column is strictly positive\n            // (denominator must be positive in the Minimum Ratio Test)\n            if (MathUtils.compareTo(entry, 0, epsilon) > 0) { // FIX: Ensure pivot entry is strictly positive\n                final double ratio = rhs / entry;\n                // Note: relationship comparison handles NaN results implicitly, as\n                // NaN < anything is false.\n                // Use \"<\" comparison to select the row with the lowest index in case of ties.\n                // This implicitly implements a part of Bland's rule to avoid cycling.\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i;\n                }\n            }\n        }\n        return minRatioPos;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}