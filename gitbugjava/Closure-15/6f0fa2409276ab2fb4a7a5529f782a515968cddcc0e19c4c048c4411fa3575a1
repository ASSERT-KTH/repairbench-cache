{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function. (The current implementation is broader).\n\n        // Check for nodes types that modify state or have clear side effects.\n        // These types are generally considered side-effecting regardless of context.\n        if (NodeUtil.isAssignmentOp(n)\n            || NodeUtil.isUpdateOp(n)\n            || n.isDelProp()\n            || n.isThrow()) {\n          return true;\n        }\n\n        // Check CALL and NEW using context-sensitive analysis, as not all\n        // calls/constructors have side effects.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        // Hook and Tagged Template Literals might have side effects\n        // We rely on the recursive checks for these node types as specific analysis might be complex.\n        // For example, a hook's side effects depend on its children.\n        // A tagged template literal's side effects depend on the tag function call.\n        // The existing CALL check should handle the tagged template literal case via the tag function.\n\n        // Recursively check children, skipping control flow structures.\n        // The CFG traversal handles side effects within those structures.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // Don't descend into control structures or functions (handled by CFG)\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n             // If a descendant has side effects, propagate the result up.\n             if (apply(c)) {\n               return true;\n             }\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}