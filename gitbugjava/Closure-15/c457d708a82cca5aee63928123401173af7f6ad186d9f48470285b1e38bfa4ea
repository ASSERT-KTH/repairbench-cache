{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function. // Note: This comment seems outdated compared to the implementation.\n\n        // Check for nodes known to have side effects.\n        // Use specific helpers for CALL and NEW as they might be more precise\n        // (e.g., respecting @nosideeffects annotations).\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        // Add checks for other operators that modify state.\n        if (NodeUtil.isAssignmentOp(n) || // =, +=, -=, etc.\n            n.isInc() ||                  // ++\n            n.isDec() ||                  // --\n            n.isDelProp()) {              // delete\n          return true;\n        }\n\n\n        // If the node itself doesn't have side-effects according to the checks above,\n        // recursively check its children.\n        // We skip children that represent the start of a new control flow graph node\n        // (like function bodies, loop bodies) because side effects within those\n        // structures are typically handled by the broader flow analysis, not by this\n        // local predicate checking for side effects within a single expression or statement.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}