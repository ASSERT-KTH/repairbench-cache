{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // Check for nodes that modify state directly.\n        // Examples: assignments, inc/dec, delete\n        int type = n.getType();\n        if (NodeUtil.isAssignmentOp(n) || // Check all ASSIGN_* types\n            type == Token.INC ||\n            type == Token.DEC ||\n            type == Token.DELPROP) {\n          return true;\n        }\n\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function. The checks below are more general.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        // For other node types (like IN, GETPROP, NAME, constants, arithmetic ops),\n        // side effects depend on their children/operands.\n        // Recursively check children.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // Don't traverse into nodes that start a new CFG basic block,\n          // as side effects there are handled by the CFG traversal.\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}