{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    // Parse cell towers\n    int cellCount;\n    try {\n        cellCount = Integer.parseInt(values[index++]);\n    } catch (Exception e) {\n        cellCount = 0;\n    }\n    if (cellCount > 0) {\n        // skip timing advance\n        index++;\n\n        // MCC\n        int mcc;\n        if (index < values.length) {\n            String mccStr = values[index++];\n            try {\n                mcc = Integer.parseInt(mccStr);\n            } catch (NumberFormatException ex) {\n                try {\n                    mcc = Integer.parseInt(mccStr, 16);\n                } catch (Exception ex2) {\n                    mcc = 0;\n                }\n            }\n        } else {\n            mcc = 0;\n        }\n\n        // MNC\n        int mnc;\n        if (index < values.length) {\n            String mncStr = values[index++];\n            try {\n                mnc = Integer.parseInt(mncStr);\n            } catch (NumberFormatException ex) {\n                try {\n                    mnc = Integer.parseInt(mncStr, 16);\n                } catch (Exception ex2) {\n                    mnc = 0;\n                }\n            }\n        } else {\n            mnc = 0;\n        }\n\n        // if MCC/MNC both 0xFFFF, skip all cell entries as invalid\n        if (mcc != 0xFFFF || mnc != 0xFFFF) {\n            for (int i = 0; i < cellCount; i++) {\n                if (index + 2 < values.length) {\n                    int lac;\n                    try {\n                        lac = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException ex) {\n                        try {\n                            lac = Integer.parseInt(values[index - 1], 16);\n                        } catch (Exception ex2) {\n                            lac = 0;\n                        }\n                    }\n                    int cid;\n                    try {\n                        cid = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException ex) {\n                        try {\n                            cid = Integer.parseInt(values[index - 1], 16);\n                        } catch (Exception ex2) {\n                            cid = 0;\n                        }\n                    }\n                    String rssiStr = values[index++];\n                    if (!rssiStr.isEmpty()) {\n                        try {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));\n                        } catch (NumberFormatException ex) {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                        }\n                    } else {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                }\n            }\n        } else {\n            // skip invalid cell data tokens\n            index += cellCount * 3;\n        }\n    }\n\n    // Parse Wi\u2011Fi access points\n    if (index < values.length && !values[index].isEmpty()) {\n        int wifiCount;\n        try {\n            wifiCount = Integer.parseInt(values[index++]);\n        } catch (Exception e) {\n            wifiCount = 0;\n        }\n        for (int i = 0; i < wifiCount; i++) {\n            // skip SSID\n            if (index < values.length) {\n                index++;\n            }\n            if (index < values.length) {\n                String mac = values[index++];\n                String rssiStr = index < values.length ? values[index++] : \"\";\n                if (!mac.isEmpty() && !mac.equals(\"0\") && !rssiStr.isEmpty()) {\n                    try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(mac, Integer.parseInt(rssiStr)));\n                    } catch (NumberFormatException ex) {\n                        // ignore invalid rssi\n                    }\n                }\n            }\n        }\n    }\n\n    if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}