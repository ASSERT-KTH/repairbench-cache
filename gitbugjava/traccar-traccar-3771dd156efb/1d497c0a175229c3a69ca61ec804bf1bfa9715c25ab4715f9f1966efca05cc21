{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    // Helper methods to safely parse integers, ignore empty/FFFF/FFFE/FF values.\n    java.util.function.Function<String, Integer> safeParseInt = s -> {\n        if (s == null || s.isEmpty() \n            || s.equalsIgnoreCase(\"FFFF\") || s.equalsIgnoreCase(\"FFFE\") || s.equalsIgnoreCase(\"FF\")) {\n            return 0;\n        }\n        try {\n            // Handle some cell fields like LAC/CID can be hex (with only digits/letters)\n            // but usually they are decimal. Let Integer.parseInt auto failover.\n            if (s.startsWith(\"0x\") || s.startsWith(\"0X\")) {\n                return Integer.parseInt(s.substring(2), 16);\n            }\n            return Integer.parseInt(s);\n        } catch (NumberFormatException e) {\n            try {\n                // try hex if can't parse as decimal\n                return Integer.parseInt(s, 16);\n            } catch (NumberFormatException e2) {\n                return 0;\n            }\n        }\n    };\n\n    int cellCount = 0;\n    if (index < values.length && !values[index].isEmpty()) {\n        cellCount = safeParseInt.apply(values[index++]);\n    }\n    if (cellCount > 0) {\n        index += 1; // timing advance, skip one\n        int mcc = 0, mnc = 0;\n        if (index < values.length && !values[index].isEmpty()) {\n            mcc = safeParseInt.apply(values[index++]);\n        }\n        if (index < values.length && !values[index].isEmpty()) {\n            mnc = safeParseInt.apply(values[index++]);\n        }\n\n        for (int i = 0; i < cellCount; i++) {\n            Integer lac = 0;\n            Integer cid = 0;\n            String rssi = null;\n            if (index < values.length) {\n                lac = safeParseInt.apply(values[index++]);\n            }\n            if (index < values.length) {\n                cid = safeParseInt.apply(values[index++]);\n            }\n            if (index < values.length) {\n                rssi = values[index++];\n            }\n            if (rssi != null && !rssi.isEmpty()\n                    && !rssi.equalsIgnoreCase(\"FFFF\") && !rssi.equalsIgnoreCase(\"FFFE\") && !rssi.equalsIgnoreCase(\"FF\")) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, safeParseInt.apply(rssi)));\n            } else {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n            }\n        }\n    }\n\n    // If there are more values, next could be wifi count (could be omitted/missing)\n    if (index < values.length && !values[index].isEmpty()\n            && !values[index].equalsIgnoreCase(\"FFFF\")\n            && !values[index].equalsIgnoreCase(\"FFFE\")\n            && !values[index].equalsIgnoreCase(\"FF\")) {\n\n        int wifiCount = safeParseInt.apply(values[index++]);\n\n        for (int i = 0; i < wifiCount; i++) {\n            index += 1; // skip wifi name/SSID\n            String macAddress = \"\";\n            String rssi = \"\";\n            if (index < values.length) {\n                macAddress = values[index++];\n            }\n            if (index < values.length) {\n                rssi = values[index++];\n            }\n            if (macAddress != null && !macAddress.isEmpty() && !macAddress.equals(\"0\")\n                    && rssi != null && !rssi.isEmpty()\n                    && !rssi.equalsIgnoreCase(\"FFFF\") && !rssi.equalsIgnoreCase(\"FFFE\") && !rssi.equalsIgnoreCase(\"FF\")) {\n                try {\n                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                } catch (NumberFormatException e) {\n                    // just skip this wifi if rssi invalid\n                }\n            }\n        }\n    }\n\n    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty()) ||\n        (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}