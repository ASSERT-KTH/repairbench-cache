{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    // Defensive: Check if there is at least one value for cell/wifi count\n    if (values.length > 0 && !values[index].isEmpty()) {\n        int cellCount = 0;\n        try {\n            cellCount = Integer.parseInt(values[index++]);\n        } catch (NumberFormatException e) {\n            cellCount = 0;\n        }\n\n        if (cellCount > 0) {\n            // Defensive: skip timing advance only if available\n            if (index < values.length) {\n                index += 1; // skip timing advance\n            }\n\n            int mcc = 0;\n            int mnc = 0;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    mcc = Integer.parseInt(values[index]);\n                } catch (NumberFormatException e) {\n                    mcc = 0;\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    mnc = Integer.parseInt(values[index]);\n                } catch (NumberFormatException e) {\n                    mnc = 0;\n                }\n            }\n            index++;\n\n            for (int i = 0; i < cellCount; i++) {\n                if (index + 2 < values.length) {\n                    int lac = 0, cid = 0, rssiInt = 0;\n                    String rssi = \"\";\n                    try {\n                        lac = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        lac = 0;\n                        index++;\n                    }\n                    try {\n                        cid = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        cid = 0;\n                        index++;\n                    }\n                    rssi = values[index++];\n                    if (!rssi.isEmpty()) {\n                        try {\n                            rssiInt = Integer.parseInt(rssi);\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiInt));\n                        } catch (NumberFormatException e) {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid)); // fallback\n                        }\n                    } else {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                } else {\n                    // Not enough fields for another cell entry\n                    break;\n                }\n            }\n        }\n\n        // Parse WiFi access points, if present\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = 0;\n            try {\n                wifiCount = Integer.parseInt(values[index++]);\n            } catch (NumberFormatException e) {\n                wifiCount = 0;\n            }\n\n            for (int i = 0; i < wifiCount; i++) {\n                // skip wifi name\n                if (index < values.length) {\n                    index++;\n                }\n                // Mac address\n                String macAddress = \"\";\n                if (index < values.length) {\n                    macAddress = values[index++];\n                }\n                // RSSI\n                String rssi = \"\";\n                if (index < values.length) {\n                    rssi = values[index++];\n                }\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                    } catch (NumberFormatException e) {\n                        // Ignore\n                    }\n                }\n            }\n        }\n    }\n\n    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())\n            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}