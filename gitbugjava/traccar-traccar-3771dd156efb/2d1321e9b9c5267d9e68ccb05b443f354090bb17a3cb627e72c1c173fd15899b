{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        int cellCount = 0;\n        if (index < values.length && !values[index].isEmpty()) {\n            try {\n                cellCount = Integer.parseInt(values[index]);\n            } catch (NumberFormatException e) {\n                // cellCount remains 0 if parsing fails\n            }\n        }\n        index++; // Consumed cellCount field\n\n        // Skip Timing Advance field, it's present regardless of cellCount in some messages\n        if (index < values.length) {\n            index++; // timing advance\n        }\n\n        String mccStr = \"\";\n        String mncStr = \"\";\n\n        if (index < values.length) {\n            mccStr = values[index++];\n        }\n        if (index < values.length) {\n            mncStr = values[index++];\n        }\n\n        if (cellCount > 0) {\n            int mcc = 0;\n            if (!mccStr.isEmpty()) {\n                if (mccStr.equalsIgnoreCase(\"FFFF\")) {\n                    mcc = 0; // \"FFFF\" for MCC likely means unknown\n                } else {\n                    try {\n                        mcc = Integer.parseInt(mccStr); // Assume decimal for non-\"FFFF\" MCC\n                    } catch (NumberFormatException e) { /* mcc remains 0 */ }\n                }\n            }\n\n            int mnc = 0;\n            if (!mncStr.isEmpty()) {\n                if (mncStr.equalsIgnoreCase(\"FFFF\")) {\n                    mnc = 0; // \"FFFF\" for MNC likely means unknown\n                } else {\n                    try {\n                        mnc = Integer.parseInt(mncStr); // Assume decimal for non-\"FFFF\" MNC\n                    } catch (NumberFormatException e) { /* mnc remains 0 */ }\n                }\n            }\n\n            for (int i = 0; i < cellCount; i++) {\n                if (index + 2 >= values.length) { // Check if enough data for lac, cid, rssi\n                    break; \n                }\n                String lacStr = values[index++];\n                String cidStr = values[index++];\n                String rssiStr = values[index++];\n                \n                int lac = 0;\n                if (!lacStr.isEmpty()) {\n                    boolean lacIsHex = false;\n                    for (char c : lacStr.toCharArray()) {\n                        if ((c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) {\n                            lacIsHex = true;\n                            break;\n                        }\n                    }\n                    try {\n                        if (lacIsHex) {\n                            lac = Integer.parseInt(lacStr, 16);\n                        } else {\n                            lac = Integer.parseInt(lacStr);\n                        }\n                    } catch (NumberFormatException e) { /* lac remains 0 */ }\n                }\n\n                int cid = 0;\n                if (!cidStr.isEmpty()) {\n                    boolean cidIsHex = false;\n                    for (char c : cidStr.toCharArray()) {\n                        if ((c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) {\n                            cidIsHex = true;\n                            break;\n                        }\n                    }\n                    try {\n                        if (cidIsHex) {\n                            cid = Integer.parseInt(cidStr, 16);\n                        } else {\n                            cid = Integer.parseInt(cidStr);\n                        }\n                    } catch (NumberFormatException e) { /* cid remains 0 */ }\n                }\n                \n                if (!rssiStr.isEmpty()) {\n                    try {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));\n                    } catch (NumberFormatException e) { /* if rssiStr is not a number, skip adding with RSSI */\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        }\n        // If cellCount was 0, index has already been advanced past cellCount, TA, MCC, MNC placeholders.\n\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = 0;\n            try {\n                wifiCount = Integer.parseInt(values[index]);\n            } catch (NumberFormatException e) { /* wifiCount remains 0 */ }\n            index++;\n\n\n            for (int i = 0; i < wifiCount; i++) {\n                if (index < values.length) { // Check for wifi name\n                    index += 1; // wifi name (not used directly, but field exists)\n                } else { break; }\n\n                String macAddress = \"\";\n                if (index < values.length) {\n                    macAddress = values[index++];\n                } else { break; }\n\n                String rssiWifiStr = \"\";\n                if (index < values.length) {\n                    rssiWifiStr = values[index++];\n                } else { break; }\n\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssiWifiStr.isEmpty()) {\n                    try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssiWifiStr)));\n                    } catch (NumberFormatException e) { /* ignore if RSSI is not a valid number */ }\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}