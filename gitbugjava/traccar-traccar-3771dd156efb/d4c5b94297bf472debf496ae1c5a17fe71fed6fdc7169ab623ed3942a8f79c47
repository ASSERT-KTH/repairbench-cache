{
    "generation": "import org.traccar.helper.BitUtil;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\nimport org.traccar.model.WifiAccessPoint;\nimport org.traccar.session.DeviceSession;\nimport java.util.function.Function;\n\npublic class WatchProtocolDecoder { // Assuming this is part of a larger class context\n\n    // Assuming PATTERN_POSITION and getProtocolName() are defined elsewhere in the class.\n    // For example:\n    private String PATTERN_POSITION = \"\"; // Placeholder, actual pattern would be complex\n    protected String getProtocolName() { return \"watch\"; }\n    protected String decodeAlarm(int status) {\n        // Placeholder for decodeAlarm logic, which could be in a utility class or base class.\n        // Based on the test, it seems to map status bits to alarm types.\n        if (BitUtil.check(status, 20)) {\n            return Position.ALARM_SOS;\n        }\n        if (BitUtil.check(status, 17)) {\n            return Position.ALARM_POWER_OFF;\n        }\n        if (BitUtil.check(status, 19)) {\n            return Position.ALARM_GPS_ANTENNA_CUT;\n        }\n        if (BitUtil.check(status, 16)) {\n            return Position.ALARM_LOW_BATTERY;\n        }\n        if (BitUtil.check(status, 21)) {\n            return Position.ALARM_VIBRATION;\n        }\n        if (BitUtil.check(status, 18)) {\n            return Position.ALARM_REMOVING;\n        }\n        return null;\n    }\n\n\n    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        // Helper function to parse integer values from string,\n        // attempting decimal first, then hexadecimal, defaulting to 0.\n        // This handles cases like \"FFFF\" or large hex CIDs which caused NumberFormatException.\n        Function<String, Integer> parseFlexibleInt = s -> {\n            if (s == null || s.isEmpty()) {\n                return 0;\n            }\n            try {\n                return Integer.parseInt(s);\n            } catch (NumberFormatException e) {\n                try {\n                    // Try parsing as hex if it's not a standard decimal.\n                    // This handles cases like \"FFFF\" (for MCC/MNC/LAC) or \"3B882A2\" (for CID)\n                    return Integer.parseInt(s, 16);\n                } catch (NumberFormatException hexE) {\n                    return 0; // Fallback for truly unparseable strings\n                }\n            }\n        };\n\n        // cellCount is typically a small decimal number, so Integer.parseInt is usually fine.\n        // However, using the flexible parser adds robustness without harming common cases.\n        int cellCount = parseFlexibleInt.apply(values[index++]);\n        \n        if (cellCount > 0) {\n            index += 1; // timing advance\n            \n            // Apply the flexible integer parsing for MCC, MNC, LAC, and CID\n            // which can sometimes be represented in hexadecimal (e.g., FFFF, FFFE, large CIDs).\n            int mcc = parseFlexibleInt.apply(values[index++]);\n            int mnc = parseFlexibleInt.apply(values[index++]);\n\n            for (int i = 0; i < cellCount; i++) {\n                int lac = parseFlexibleInt.apply(values[index++]);\n                int cid = parseFlexibleInt.apply(values[index++]);\n                String rssi = values[index++];\n                if (!rssi.isEmpty()) {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        }\n\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = Integer.parseInt(values[index++]);\n\n            for (int i = 0; i < wifiCount; i++) {\n                index += 1; // wifi name\n                String macAddress = values[index++];\n                String rssi = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}