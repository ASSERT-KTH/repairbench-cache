{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String networkData = parser.next(); // Get the network data string\n        if (networkData == null || networkData.isEmpty()) {\n            // No network data present\n            return position;\n        }\n\n        String[] values = networkData.split(\",\");\n        int index = 0;\n\n        // Check if there's at least one value (for cellCount)\n        if (index >= values.length) {\n            return position;\n        }\n\n        Network network = new Network();\n\n        int cellCount = Integer.parseInt(values[index++]);\n        // Check if there's enough data for timing advance, mcc, and mnc\n        if (cellCount > 0 && index + 2 < values.length) {\n            index += 1; // timing advance (skip values[index])\n            String mccString = values[index++];\n            String mncString = values[index++];\n\n            int mcc = 0;\n            if (!mccString.isEmpty()) {\n                // Use radix 16 if contains hex letters (A-F), else 10\n                mcc = Integer.parseInt(mccString, mccString.matches(\".*[a-fA-F].*\") ? 16 : 10);\n            }\n\n            int mnc = 0;\n            if (!mncString.isEmpty()) {\n                // Use radix 16 if contains hex letters (A-F), else 10\n                mnc = Integer.parseInt(mncString, mncString.matches(\".*[a-fA-F].*\") ? 16 : 10);\n            }\n\n\n            for (int i = 0; i < cellCount; i++) {\n                // Check if there's enough data for lac, cid, rssi for this cell\n                if (index + 2 >= values.length) {\n                    break; // Not enough data for the remaining cells\n                }\n                String lacString = values[index++];\n                String cidString = values[index++];\n                String rssiString = values[index++];\n\n                // Check for empty strings before parsing LAC/CID\n                if (lacString.isEmpty() || cidString.isEmpty()) {\n                    continue; // Skip cell if LAC or CID is empty\n                }\n\n                // Use radix 16 if contains hex letters (A-F), else 10\n                int lac = Integer.parseInt(lacString, lacString.matches(\".*[a-fA-F].*\") ? 16 : 10);\n                int cid = Integer.parseInt(cidString, cidString.matches(\".*[a-fA-F].*\") ? 16 : 10);\n\n                if (!rssiString.isEmpty()) {\n                    // Assume RSSI is always decimal\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        } else if (cellCount > 0) {\n            // If cellCount > 0 but not enough data for TA, MCC, MNC, skip remaining cell processing\n             index = values.length; // Effectively skip cell processing loop by advancing index\n        }\n\n\n        // Check if there's still data left for potential WiFi count\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = Integer.parseInt(values[index++]);\n\n            for (int i = 0; i < wifiCount; i++) {\n                // Check bounds for wifi name, mac, rssi\n                if (index + 2 >= values.length) {\n                    break; // Not enough data for the remaining wifi APs\n                }\n                index += 1; // wifi name (skipped values[index])\n                String macAddress = values[index++];\n                String rssi = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    // Assume WiFi RSSI is always decimal\n                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}