{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String networkData = parser.next();\n        if (networkData == null || networkData.isEmpty()) {\n            return position; // No network data to parse\n        }\n\n        String[] values = networkData.split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        // Check if there's enough data for cellCount\n        if (index >= values.length || values[index].isEmpty()) {\n            return position;\n        }\n        int cellCount = Integer.parseInt(values[index++]);\n\n        if (cellCount > 0) {\n            // Check for timing advance, mcc, mnc presence\n            if (index + 2 >= values.length) {\n                return position; // Not enough data for mcc, mnc\n            }\n            index += 1; // timing advance (ignore)\n            String mccString = values[index++];\n            String mncString = values[index++];\n\n            int mcc = 0;\n            int mnc = 0;\n\n            // Try parsing MCC (decimal first, then hex, handle FFFF)\n            if (!mccString.isEmpty()) {\n                if (mccString.equalsIgnoreCase(\"FFFF\")) {\n                    mcc = 0; // Treat FFFF as invalid/unknown\n                } else {\n                    try {\n                        mcc = Integer.parseInt(mccString);\n                    } catch (NumberFormatException e1) {\n                        try {\n                            mcc = Integer.parseUnsignedInt(mccString, 16);\n                        } catch (NumberFormatException e2) {\n                            // Failed both decimal and hex parsing\n                        }\n                    }\n                }\n            }\n\n            // Try parsing MNC (decimal first, then hex, handle FFFF)\n            if (!mncString.isEmpty()) {\n                if (mncString.equalsIgnoreCase(\"FFFF\")) {\n                    mnc = 0; // Treat FFFF as invalid/unknown\n                } else {\n                    try {\n                        mnc = Integer.parseInt(mncString);\n                    } catch (NumberFormatException e1) {\n                        try {\n                            mnc = Integer.parseUnsignedInt(mncString, 16);\n                        } catch (NumberFormatException e2) {\n                            // Failed both decimal and hex parsing\n                        }\n                    }\n                }\n            }\n\n\n            for (int i = 0; i < cellCount; i++) {\n                // Check for lac, cid, rssi presence\n                if (index + 2 >= values.length) {\n                    break; // Not enough data for this cell tower\n                }\n                String lacString = values[index++];\n                String cidString = values[index++];\n                String rssiString = values[index++];\n\n                int lac = 0;\n                int cid = 0;\n\n                // Try parsing LAC (decimal first, then hex)\n                if (!lacString.isEmpty()) {\n                     if (lacString.equalsIgnoreCase(\"FFFF\") || lacString.equalsIgnoreCase(\"FFFE\")) {\n                        lac = 0; // Treat FFFF/FFFE as invalid/unknown\n                    } else {\n                        try {\n                            lac = Integer.parseInt(lacString);\n                        } catch (NumberFormatException e1) {\n                            try {\n                                lac = Integer.parseUnsignedInt(lacString, 16);\n                            } catch (NumberFormatException e2) {\n                                // Failed both decimal and hex parsing\n                            }\n                        }\n                    }\n                }\n\n                // Try parsing CID (decimal first, then hex)\n                if (!cidString.isEmpty()) {\n                     if (cidString.equalsIgnoreCase(\"FFFF\") || cidString.equalsIgnoreCase(\"FFFE\")) {\n                        cid = 0; // Treat FFFF/FFFE as invalid/unknown\n                    } else {\n                        try {\n                            cid = Integer.parseInt(cidString);\n                        } catch (NumberFormatException e1) {\n                            try {\n                                cid = Integer.parseUnsignedInt(cidString, 16);\n                            } catch (NumberFormatException e2) {\n                                // Failed both decimal and hex parsing\n                            }\n                        }\n                    }\n                }\n\n                // Add cell tower if identifiers are valid (basic check)\n                if (mcc != 0 || mnc != 0 || lac != 0 || cid != 0) {\n                    if (!rssiString.isEmpty()) {\n                        try {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));\n                        } catch (NumberFormatException e) {\n                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid)); // Add without RSSI if parse fails\n                        }\n                    } else {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                }\n            }\n        }\n\n        // Check for wifiCount presence\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = Integer.parseInt(values[index++]);\n\n            for (int i = 0; i < wifiCount; i++) {\n                // Check for wifi name, mac, rssi presence\n                if (index + 2 >= values.length) {\n                    break; // Not enough data for this wifi AP\n                }\n                index += 1; // wifi name (ignore)\n                String macAddress = values[index++];\n                String rssiString = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssiString.isEmpty()) {\n                     try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(\n                                macAddress.replace('-', ':'), Integer.parseInt(rssiString)));\n                    } catch (NumberFormatException e) {\n                        // Failed parsing RSSI, skip this AP\n                    }\n                }\n            }\n        }\n\n        if (network.hasCell() || network.hasWifi()) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}