{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    // Cell info\n    if (index < values.length && !values[index].isEmpty()) {\n        int cellCount;\n        try {\n            cellCount = Integer.parseInt(values[index++]);\n        } catch (NumberFormatException e) {\n            cellCount = 0;\n            index++;\n        }\n        if (cellCount > 0) {\n            if (index < values.length) { // skip timing advance if present\n                index += 1;\n            }\n            int mcc = 0;\n            int mnc = 0;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    mcc = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    mcc = 0;\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    mnc = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    mnc = 0;\n                    index++;\n                }\n            } else {\n                index++;\n            }\n\n            for (int i = 0; i < cellCount; i++) {\n                int lac = 0;\n                int cid = 0;\n                String rssi = \"\";\n                if (index < values.length) {\n                    try {\n                        lac = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        lac = 0;\n                        index++;\n                    }\n                }\n                if (index < values.length) {\n                    try {\n                        cid = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        cid = 0;\n                        index++;\n                    }\n                }\n                if (index < values.length) {\n                    rssi = values[index++];\n                }\n\n                if (!rssi.isEmpty()) {\n                    try {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));\n                    } catch (NumberFormatException e) {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        }\n    }\n\n    // Wifi info\n    if (index < values.length && !values[index].isEmpty()) {\n        int wifiCount;\n        try {\n            wifiCount = Integer.parseInt(values[index++]);\n        } catch (NumberFormatException e) {\n            wifiCount = 0;\n            index++;\n        }\n        for (int i = 0; i < wifiCount; i++) {\n            if (index + 2 < values.length) {\n                index++; // skip wifi name\n                String macAddress = values[index++];\n                String rssi = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                    } catch (NumberFormatException e) {\n                        // ignore malformed Wi-Fi rssi\n                    }\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())\n            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}