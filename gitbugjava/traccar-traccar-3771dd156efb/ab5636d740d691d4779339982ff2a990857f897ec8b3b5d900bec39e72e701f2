{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    // Network information\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    // Cell towers\n    int cellCount;\n    try {\n        cellCount = Integer.parseInt(values[index++]);\n    } catch (Exception e) {\n        cellCount = 0;\n    }\n    if (cellCount > 0) {\n        // Skip timing advance\n        index++;\n        // MCC\n        int mcc;\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            try {\n                mcc = Integer.parseInt(s);\n            } catch (NumberFormatException e) {\n                try {\n                    mcc = Integer.parseInt(s, 16);\n                } catch (Exception ex) {\n                    mcc = 0;\n                }\n            }\n        } else {\n            mcc = 0;\n        }\n        // MNC\n        int mnc;\n        s = values[index++];\n        if (!s.isEmpty()) {\n            try {\n                mnc = Integer.parseInt(s);\n            } catch (NumberFormatException e) {\n                try {\n                    mnc = Integer.parseInt(s, 16);\n                } catch (Exception ex) {\n                    mnc = 0;\n                }\n            }\n        } else {\n            mnc = 0;\n        }\n        // Cells\n        for (int i = 0; i < cellCount && index + 2 < values.length; i++) {\n            // LAC\n            int lac;\n            s = values[index++];\n            try {\n                lac = Integer.parseInt(s);\n            } catch (NumberFormatException e) {\n                try {\n                    lac = Integer.parseInt(s, 16);\n                } catch (Exception ex) {\n                    lac = 0;\n                }\n            }\n            // CID\n            int cid;\n            s = values[index++];\n            try {\n                cid = Integer.parseInt(s);\n            } catch (NumberFormatException e) {\n                try {\n                    cid = Integer.parseInt(s, 16);\n                } catch (Exception ex) {\n                    cid = 0;\n                }\n            }\n            // RSSI\n            String rssiStr = values[index++];\n            if (!rssiStr.isEmpty()) {\n                int cellRssi;\n                try {\n                    cellRssi = Integer.parseInt(rssiStr);\n                } catch (NumberFormatException e) {\n                    cellRssi = 0;\n                }\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, cellRssi));\n            } else {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n            }\n        }\n    }\n\n    // Wi-Fi access points\n    if (index < values.length && !values[index].isEmpty()) {\n        int wifiCount;\n        try {\n            wifiCount = Integer.parseInt(values[index++]);\n        } catch (Exception e) {\n            wifiCount = 0;\n        }\n        for (int i = 0; i < wifiCount && index + 2 < values.length; i++) {\n            // Skip Wi\u2011Fi name\n            index++;\n            String macAddress = values[index++];\n            String rssiStr = values[index++];\n            if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssiStr.isEmpty()) {\n                int wifiRssi;\n                try {\n                    wifiRssi = Integer.parseInt(rssiStr);\n                } catch (NumberFormatException e) {\n                    wifiRssi = 0;\n                }\n                network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, wifiRssi));\n            }\n        }\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}