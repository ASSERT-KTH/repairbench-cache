{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    // Parse network information\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n    Network network = new Network();\n\n    // --- Process cell tower data ---\n    if (values.length > index) {\n        int cellCount = Integer.parseInt(values[index++]);\n        if (cellCount > 0) {\n            // skip timing advance\n            index++;\n\n            // Parse MCC; if token equals \"FFFF\" then treat as 0\n            int mcc = 0;\n            if (index < values.length && !values[index].isEmpty() && !values[index].equalsIgnoreCase(\"FFFF\")) {\n                mcc = Integer.parseInt(values[index]);\n            }\n            index++;\n\n            // Parse MNC\n            int mnc = 0;\n            if (index < values.length && !values[index].isEmpty() && !values[index].equalsIgnoreCase(\"FFFF\")) {\n                mnc = Integer.parseInt(values[index]);\n            }\n            index++;\n\n            for (int i = 0; i < cellCount; i++) {\n                // LAC: if equals \"FFFF\" or \"FFFE\", use 0\n                int lac = 0;\n                if (index < values.length && !values[index].isEmpty()\n                        && !values[index].equalsIgnoreCase(\"FFFF\")\n                        && !values[index].equalsIgnoreCase(\"FFFE\")) {\n                    lac = Integer.parseInt(values[index]);\n                }\n                index++;\n\n                // CID: if token contains letters, parse as hex, else as decimal\n                int cid = 0;\n                if (index < values.length && !values[index].isEmpty()) {\n                    String cidStr = values[index];\n                    if (cidStr.matches(\"\\\\d+\")) {\n                        cid = Integer.parseInt(cidStr);\n                    } else {\n                        cid = Integer.parseInt(cidStr, 16);\n                    }\n                }\n                index++;\n\n                // Cell tower RSSI: treat \"FFFF\" or \"FFFE\" as 0\n                int cellRssi = 0;\n                if (index < values.length && !values[index].isEmpty()\n                        && !values[index].equalsIgnoreCase(\"FFFF\")\n                        && !values[index].equalsIgnoreCase(\"FFFE\")) {\n                    cellRssi = Integer.parseInt(values[index]);\n                }\n                index++;\n\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, cellRssi));\n            }\n        }\n    }\n\n    // --- Process Wi\u2011Fi data ---\n    if (values.length > index && !values[index].isEmpty()) {\n        int wifiCount = Integer.parseInt(values[index++]);\n\n        for (int i = 0; i < wifiCount; i++) {\n            // Skip wifi name\n            index++;\n            String macAddress = index < values.length ? values[index++] : \"\";\n            String wifiRssiStr = index < values.length ? values[index++] : \"\";\n            // If the MAC or RSSI value is missing or the RSSI token equals \"FFFF\" or \"FFFE\", skip it.\n            if (!macAddress.isEmpty() && !macAddress.equals(\"0\")\n                    && !wifiRssiStr.isEmpty()\n                    && !wifiRssiStr.equalsIgnoreCase(\"FFFF\")\n                    && !wifiRssiStr.equalsIgnoreCase(\"FFFE\")) {\n                network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(wifiRssiStr)));\n            }\n        }\n    }\n\n    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())\n            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}