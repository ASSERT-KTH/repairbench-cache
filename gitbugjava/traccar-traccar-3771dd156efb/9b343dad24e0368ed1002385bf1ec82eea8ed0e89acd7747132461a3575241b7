{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    int cellCount = 0;\n    try {\n        if (index < values.length && !values[index].isEmpty()) {\n            cellCount = Integer.parseInt(values[index++]);\n        }\n    } catch (NumberFormatException e) {\n        // Skip if can't parse cellCount\n    }\n\n    try {\n        if (cellCount > 0) {\n            index += 1; // timing advance\n            int mcc = 0;\n            int mnc = 0;\n            if (index < values.length && !values[index].isEmpty()) {\n                mcc = Integer.parseInt(values[index++]);\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                mnc = Integer.parseInt(values[index++]);\n            }\n\n            for (int i = 0; i < cellCount && index + 3 <= values.length; i++) {\n                try {\n                    int lac = 0;\n                    int cid = 0;\n                    String rssi = \"\";\n\n                    if (!values[index].isEmpty()) {\n                        lac = Integer.parseInt(values[index++]);\n                    } else {\n                        index++;\n                        continue;\n                    }\n\n                    if (!values[index].isEmpty()) {\n                        cid = Integer.parseInt(values[index++]);\n                    } else {\n                        index++;\n                        continue;\n                    }\n\n                    rssi = values[index++];\n                    if (!rssi.isEmpty()) {\n                        try {\n                            int rssiValue = Integer.parseInt(rssi);\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));\n                        } catch (NumberFormatException e) {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                        }\n                    } else {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                } catch (Exception e) {\n                    // Skip this cell if parsing fails\n                    index += 3;\n                }\n            }\n        }\n    } catch (Exception e) {\n        // Ignore cell parsing errors\n    }\n\n    if (index < values.length && !values[index].isEmpty()) {\n        try {\n            int wifiCount = Integer.parseInt(values[index++]);\n\n            for (int i = 0; i < wifiCount && index + 3 <= values.length; i++) {\n                try {\n                    index += 1; // wifi name\n                    String macAddress = values[index++];\n                    String rssi = values[index++];\n                    if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                        try {\n                            int rssiValue = Integer.parseInt(rssi);\n                            network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssiValue));\n                        } catch (NumberFormatException e) {\n                            // Skip if rssi is not a valid number\n                        }\n                    }\n                } catch (Exception e) {\n                    // Skip this wifi entry if parsing fails\n                    index += 3;\n                }\n            }\n        } catch (NumberFormatException e) {\n            // Skip if wifiCount parsing fails\n        }\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}