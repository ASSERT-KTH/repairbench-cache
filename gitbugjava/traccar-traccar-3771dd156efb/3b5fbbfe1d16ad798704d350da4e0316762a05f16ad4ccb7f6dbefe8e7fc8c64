{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n    Network network = new Network();\n\n    // parse cell towers\n    int cellCount = 0;\n    if (index < values.length) {\n        try {\n            cellCount = Integer.parseInt(values[index]);\n        } catch (NumberFormatException e) {\n        }\n        index++;\n    }\n    if (cellCount > 0 && index + 2 < values.length) {\n        // timing advance\n        index++;\n\n        // MCC\n        int mcc = 0;\n        if (index < values.length) {\n            String mccStr = values[index];\n            if (!mccStr.isEmpty() && !mccStr.equalsIgnoreCase(\"FFFF\")) {\n                try {\n                    mcc = Integer.parseInt(mccStr);\n                } catch (NumberFormatException e) {\n                }\n            }\n            index++;\n        }\n\n        // MNC\n        int mnc = 0;\n        if (index < values.length) {\n            String mncStr = values[index];\n            if (!mncStr.isEmpty() && !mncStr.equalsIgnoreCase(\"FFFF\")) {\n                try {\n                    mnc = Integer.parseInt(mncStr);\n                } catch (NumberFormatException e) {\n                }\n            }\n            index++;\n        }\n\n        for (int i = 0; i < cellCount && index + 2 <= values.length; i++) {\n            // LAC\n            int lac = 0;\n            String lacStr = values[index++];\n            if (!lacStr.isEmpty()) {\n                try {\n                    // most trackers send LAC/CID in hex\n                    lac = Integer.parseInt(lacStr, 16);\n                } catch (NumberFormatException e1) {\n                    try {\n                        lac = Integer.parseInt(lacStr);\n                    } catch (NumberFormatException e2) {\n                    }\n                }\n            }\n            // CID\n            int cid = 0;\n            String cidStr = values[index++];\n            if (!cidStr.isEmpty()) {\n                try {\n                    cid = Integer.parseInt(cidStr, 16);\n                } catch (NumberFormatException e1) {\n                    try {\n                        cid = Integer.parseInt(cidStr);\n                    } catch (NumberFormatException e2) {\n                    }\n                }\n            }\n            // RSSI\n            String rssiStr = values[index++];\n            if (!rssiStr.isEmpty()) {\n                try {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));\n                } catch (NumberFormatException e) {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            } else {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n            }\n        }\n    }\n\n    // parse Wi\u2011Fi\n    if (index < values.length) {\n        int wifiCount = 0;\n        try {\n            wifiCount = Integer.parseInt(values[index]);\n        } catch (NumberFormatException e) {\n        }\n        index++;\n        for (int i = 0; i < wifiCount && index + 2 <= values.length; i++) {\n            // skip SSID\n            index++;\n            String mac = values[index++];\n            String rssi = values[index++];\n            if (!mac.isEmpty() && !mac.equals(\"0\") && !rssi.isEmpty()) {\n                try {\n                    network.addWifiAccessPoint(WifiAccessPoint.from(mac, Integer.parseInt(rssi)));\n                } catch (NumberFormatException e) {\n                }\n            }\n        }\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}