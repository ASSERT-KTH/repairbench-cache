{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    // parse network info\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    int cellCount = Integer.parseInt(values[index++]);\n    if (cellCount > 0) {\n        // skip timing advance\n        index++;\n        // ensure there is at least MCC and MNC\n        if (values.length > index + 1) {\n            String mccStr = values[index++];\n            String mncStr = values[index++];\n            // skip the block if MCC or MNC is the invalid marker \"FFFF\"\n            if (!mccStr.isEmpty() && !mncStr.isEmpty()\n                    && !mccStr.equalsIgnoreCase(\"FFFF\") && !mncStr.equalsIgnoreCase(\"FFFF\")) {\n                int mcc = Integer.parseInt(mccStr);\n                int mnc = Integer.parseInt(mncStr);\n                for (int i = 0; i < cellCount; i++) {\n                    if (index + 2 >= values.length) {\n                        break;\n                    }\n                    int lac = Integer.parseInt(values[index++]);\n                    int cid = Integer.parseInt(values[index++]);\n                    String rssiStr = values[index++];\n                    if (!rssiStr.isEmpty()) {\n                        network.addCellTower(\n                            CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));\n                    } else {\n                        network.addCellTower(\n                            CellTower.from(mcc, mnc, lac, cid));\n                    }\n                }\n            } else {\n                // skip over the invalid cell fields\n                index += cellCount * 3;\n            }\n        }\n    }\n\n    // parse Wi\u2011Fi info\n    if (index < values.length && !values[index].isEmpty()) {\n        int wifiCount = Integer.parseInt(values[index++]);\n        for (int i = 0; i < wifiCount; i++) {\n            index++; // skip wifi name\n            if (index + 1 >= values.length) {\n                break;\n            }\n            String macAddress = values[index++];\n            String rssi = values[index++];\n            if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                network.addWifiAccessPoint(\n                    WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n            }\n        }\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}