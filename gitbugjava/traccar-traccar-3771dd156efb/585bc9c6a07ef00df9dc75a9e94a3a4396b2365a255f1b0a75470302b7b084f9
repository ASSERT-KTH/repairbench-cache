{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        int cellCount = 0;\n        if (index < values.length && !values[index].isEmpty()) {\n            try {\n                cellCount = Integer.parseInt(values[index]);\n            } catch (NumberFormatException e) {\n                // cellCount is not a number, keep as 0\n            }\n        }\n        index++; // Consume cellCount field position\n\n        if (cellCount > 0) {\n            if (index < values.length) {\n                index++; // timing advance, consume and skip\n            }\n\n            int mcc = 0;\n            if (index < values.length) { // Check if MCC field exists\n                String mccField = values[index];\n                if (!mccField.isEmpty()) {\n                    if (mccField.equalsIgnoreCase(\"FFFF\")) {\n                        mcc = 0; // Sentinel for unknown\n                    } else {\n                        try {\n                            mcc = Integer.parseInt(mccField); // Assume decimal\n                        } catch (NumberFormatException e) {\n                            // mccField not \"FFFF\" and not decimal, keep mcc = 0\n                        }\n                    }\n                }\n            }\n            index++; // Consume MCC field position\n\n            int mnc = 0;\n            if (index < values.length) { // Check if MNC field exists\n                String mncField = values[index];\n                if (!mncField.isEmpty()) {\n                    if (mncField.equalsIgnoreCase(\"FFFF\")) {\n                        mnc = 0; // Sentinel for unknown\n                    } else {\n                        try {\n                            mnc = Integer.parseInt(mncField); // Assume decimal\n                        } catch (NumberFormatException e) {\n                            // mncField not \"FFFF\" and not decimal, keep mnc = 0\n                        }\n                    }\n                }\n            }\n            index++; // Consume MNC field position\n\n            for (int i = 0; i < cellCount; i++) {\n                // Need 3 fields for lac, cid, rssi. values[index], values[index+1], values[index+2]\n                if (index + 2 >= values.length) {\n                    break; // Not enough data for a full cell tower entry\n                }\n\n                int lac = 0;\n                String lacString = values[index];\n                if (!lacString.isEmpty()) {\n                    try {\n                        lac = Integer.parseInt(lacString, 16); // LAC is hexadecimal\n                    } catch (NumberFormatException e) {\n                        // lacString is not a valid hex. Keep lac = 0.\n                    }\n                }\n                index++; // Consume LAC\n\n                int cid = 0;\n                String cidString = values[index];\n                if (!cidString.isEmpty()) {\n                    try {\n                        cid = Integer.parseInt(cidString, 16); // CID is hexadecimal\n                    } catch (NumberFormatException e) {\n                        // cidString is not a valid hex. Keep cid = 0.\n                    }\n                }\n                index++; // Consume CID\n\n                String rssiString = values[index];\n                index++; // Consume RSSI\n                \n                if (!rssiString.isEmpty()) {\n                    try {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));\n                    } catch (NumberFormatException e) { // rssiString not a valid integer\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid)); // Add without RSSI\n                    }\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        }\n\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = 0;\n            try {\n                wifiCount = Integer.parseInt(values[index]);\n            } catch (NumberFormatException e) {\n                // wifiCount is not a number, keep as 0\n            }\n            index++; // Consume wifiCount field position\n\n            for (int i = 0; i < wifiCount; i++) {\n                // Need 3 fields for wifi name, mac, rssi. values[index], values[index+1], values[index+2]\n                if (index + 2 >= values.length) {\n                    break; // Not enough data for a full wifi entry\n                }\n                \n                index++; // wifi name (SSID), consume and skip\n\n                String macAddress = values[index];\n                index++; // Consume MAC Address\n                \n                String rssi = values[index];\n                index++; // Consume RSSI\n\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                    } catch (NumberFormatException e) {\n                        // RSSI is not a valid integer, skip this access point\n                    }\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}