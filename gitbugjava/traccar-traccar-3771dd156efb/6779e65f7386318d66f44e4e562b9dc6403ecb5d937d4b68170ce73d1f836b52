{
    "generation": "import org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\nimport org.traccar.model.WifiAccessPoint;\nimport org.traccar.BaseProtocolDecoder;\nimport org.traccar.DeviceSession;\nimport org.traccar.helper.BitUtil;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.helper.PatternBuilder;\nimport org.traccar.helper.Parser;\n\nimport java.util.regex.Pattern;\n\npublic class WatchProtocolDecoder extends BaseProtocolDecoder {\n\n    private static final Pattern PATTERN_POSITION = new PatternBuilder()\n            .text(\"UD\")\n            .expression(\"2?,\") // type\n            .number(\"(dd)(dd)(dd),\")    // date (DDMMYY)\n            .number(\"(dd)(dd)(dd),\")    // time (HHMMSS)\n            .expression(\"([AV]),\")      // validity\n            .number(\"(-?d+.d+),\")       // latitude\n            .expression(\"([NS]),\")\n            .number(\"(-?d+.d+),\")       // longitude\n            .expression(\"([EW]),\")\n            .number(\"(d+.d+),\")         // speed\n            .number(\"(d+.d+),\")         // course\n            .number(\"(-?d+.d+),\")       // altitude\n            .number(\"(d+),\")            // satellites\n            .number(\"(d+),\")            // rssi\n            .number(\"(d+),\")            // battery\n            .number(\"(d+),\")            // steps\n            .number(\"(d+),\")            // reserved\n            .number(\"(x+),\")            // status\n            .number(\"(d+),\")            // alarm (0)\n            .number(\"(d+)\")             // alarm (1)\n            .group(\"(.+)\")              // cell and wifi\n            .compile();\n\n    public WatchProtocolDecoder(WatchProtocol protocol) {\n        super(protocol);\n    }\n\n    private String decodeAlarm(int status) {\n        if (BitUtil.check(status, 0)) {\n            return Position.ALARM_SOS;\n        } else if (BitUtil.check(status, 1)) {\n            return Position.ALARM_LOW_BATTERY;\n        } else if (BitUtil.check(status, 2)) {\n            return Position.ALARM_FALL;\n        } else if (BitUtil.check(status, 3)) {\n            return Position.ALARM_OVERSPEED;\n        } else if (BitUtil.check(status, 5)) {\n            return Position.ALARM_GEOFENCE_EXIT;\n        } else if (BitUtil.check(status, 6)) {\n            return Position.ALARM_GEOFENCE_ENTER;\n        } else if (BitUtil.check(status, 7)) {\n            return Position.ALARM_VIBRATION;\n        } else if (BitUtil.check(status, 8)) {\n            return Position.ALARM_POWER_OFF;\n        } else if (BitUtil.check(status, 9)) {\n            return Position.ALARM_DOOR;\n        } else if (BitUtil.check(status, 10)) {\n            return Position.ALARM_TAMPERING;\n        } else if (BitUtil.check(status, 11)) {\n            return Position.ALARM_REMOVING;\n        }\n        return null;\n    }\n\n    // Helper method to parse integer values that might be hex-encoded or sentinel values\n    private int readInt(String value) {\n        if (value.isEmpty() || value.equalsIgnoreCase(\"FFFF\") || value.equalsIgnoreCase(\"FFFE\")) {\n            return 0; // Map unknown/invalid to 0\n        }\n        try {\n            return Integer.parseInt(value); // Try parsing as decimal first\n        } catch (NumberFormatException e) {\n            try {\n                return Integer.parseInt(value, 16); // If decimal fails, try parsing as hex\n            } catch (NumberFormatException ex) {\n                return 0; // Fallback for truly unparseable values\n            }\n        }\n    }\n\n    @Override\n    protected Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        int cellCount = readInt(values[index++]); // Use helper for cellCount\n        if (cellCount > 0) {\n            index += 1; // timing advance\n            int mcc = readInt(values[index++]); // Use helper for mcc\n            int mnc = readInt(values[index++]); // Use helper for mnc\n\n            for (int i = 0; i < cellCount; i++) {\n                int lac = readInt(values[index++]); // Use helper for lac\n                int cid = readInt(values[index++]); // Use helper for cid\n                String rssi = values[index++];\n                if (!rssi.isEmpty()) {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        }\n\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = readInt(values[index++]); // Use helper for wifiCount\n\n            for (int i = 0; i < wifiCount; i++) {\n                index += 1; // wifi name\n                String macAddress = values[index++];\n                String rssi = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}