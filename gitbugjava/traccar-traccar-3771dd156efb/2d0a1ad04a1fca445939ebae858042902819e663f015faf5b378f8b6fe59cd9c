{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        // Helper function to safely parse integer values, handling common sentinel values and hex\n        // This is placed as a nested private method for conciseness in this context.\n        // In a real project, it might be a static helper in the class or a utility.\n        class LocalParser {\n            private int parseOptionalInt(String value) {\n                if (value == null || value.isEmpty()) {\n                    return 0; // Default for null or empty string\n                }\n                try {\n                    return Integer.parseInt(value); // Try parsing as decimal\n                } catch (NumberFormatException e) {\n                    try {\n                        // If decimal parsing fails, try parsing as hex,\n                        // common for sentinel values like \"FFFF\", \"FFFE\", or large CIDs\n                        return Integer.parseInt(value, 16);\n                    } catch (NumberFormatException e2) {\n                        return 0; // If neither decimal nor hex parsing works\n                    }\n                }\n            }\n        }\n        LocalParser localParser = new LocalParser();\n\n        int cellCount = localParser.parseOptionalInt(values[index++]);\n        if (cellCount > 0) {\n            index += 1; // timing advance\n            int mcc = localParser.parseOptionalInt(values[index++]);\n            int mnc = localParser.parseOptionalInt(values[index++]);\n\n            for (int i = 0; i < cellCount; i++) {\n                int lac = localParser.parseOptionalInt(values[index++]);\n                int cid = localParser.parseOptionalInt(values[index++]);\n                String rssi = values[index++];\n                if (!rssi.isEmpty()) {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        }\n\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = localParser.parseOptionalInt(values[index++]);\n\n            for (int i = 0; i < wifiCount; i++) {\n                index += 1; // wifi name\n                String macAddress = values[index++];\n                String rssi = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}