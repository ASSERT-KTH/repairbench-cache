{
    "generation": "import org.traccar.helper.Log;\nimport org.traccar.helper.Parser;\nimport org.traccar.helper.PatternBuilder;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\nimport org.traccar.model.WifiAccessPoint;\nimport org.traccar.helper.BitUtil;\n\n// Add necessary imports for Log, UnitsConverter, BitUtil etc. if not already present at the class level.\n\n    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        if (decodeAlarm(status) != null) {\n            position.set(Position.KEY_ALARM, decodeAlarm(status));\n        }\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String rawNetworkData = parser.next(); // Get the network data string\n        if (rawNetworkData == null || rawNetworkData.isEmpty()) {\n             // No network data, just return the position\n             return position;\n        }\n        String[] values = rawNetworkData.split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        // Ensure index is within bounds before accessing values[index] for cell count\n        if (index >= values.length || values[index].isEmpty()) {\n             Log.warning(\"Missing or invalid cell count in network data\");\n             return position;\n        }\n\n        int cellCount = 0;\n        try {\n            cellCount = Integer.parseInt(values[index++]);\n        } catch (NumberFormatException e) {\n            Log.warning(\"Failed to parse cell count: \" + values[index - 1], e);\n            return position; // Cannot proceed without valid cell count\n        }\n\n        // Process cell towers\n        // Check required length for cell tower data header (count + ta + mcc + mnc)\n        if (cellCount > 0 && index + 2 < values.length) { // Need at least index for TA, index+1 for MCC, index+2 for MNC\n            index++; // timing advance (skip)\n\n            String mccString = values[index++];\n            String mncString = values[index++];\n            int mcc = 0, mnc = 0;\n\n            // Parse MCC (Try decimal, fallback to hex)\n            if (!mccString.isEmpty()) {\n                try {\n                    mcc = Integer.parseInt(mccString);\n                } catch (NumberFormatException e1) {\n                    try {\n                        mcc = (int) Long.parseLong(mccString, 16);\n                    } catch (NumberFormatException e2) {\n                        Log.warning(\"Failed to parse MCC value: \" + mccString + \" as decimal or hex\", e1);\n                    }\n                }\n            }\n\n            // Parse MNC (Try decimal, fallback to hex)\n            if (!mncString.isEmpty()) {\n                 try {\n                    mnc = Integer.parseInt(mncString);\n                } catch (NumberFormatException e1) {\n                    try {\n                        mnc = (int) Long.parseLong(mncString, 16);\n                    } catch (NumberFormatException e2) {\n                        Log.warning(\"Failed to parse MNC value: \" + mncString + \" as decimal or hex\", e1);\n                    }\n                }\n            }\n\n\n            for (int i = 0; i < cellCount; i++) {\n                // Check required length for each cell tower entry (lac + cid + rssi)\n                if (index + 2 >= values.length) { // Need index for LAC, index+1 for CID, index+2 for RSSI\n                    Log.warning(\"Incorrect number of network data fields for cell tower \" + i);\n                    break; // Stop processing cells if data is truncated\n                }\n\n                String lacString = values[index++];\n                String cidString = values[index++];\n                String rssiString = values[index++];\n                int lac = 0, cid = 0;\n\n                // Parse LAC (Try decimal, fallback to hex)\n                if (!lacString.isEmpty()) {\n                     try {\n                        lac = Integer.parseInt(lacString);\n                    } catch (NumberFormatException e1) {\n                        try {\n                            lac = (int) Long.parseLong(lacString, 16);\n                        } catch (NumberFormatException e2) {\n                            Log.warning(\"Failed to parse LAC value: \" + lacString + \" as decimal or hex\", e1);\n                        }\n                    }\n                }\n\n                // Parse CID (Try decimal, fallback to hex)\n                if (!cidString.isEmpty()) {\n                    try {\n                        cid = Integer.parseInt(cidString);\n                    } catch (NumberFormatException e1) {\n                        try {\n                            cid = (int) Long.parseLong(cidString, 16);\n                        } catch (NumberFormatException e2) {\n                            Log.warning(\"Failed to parse CID value: \" + cidString + \" as decimal or hex\", e1);\n                        }\n                    }\n                }\n\n                // Parse RSSI (Decimal only)\n                if (!rssiString.isEmpty()) {\n                     try {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));\n                     } catch (NumberFormatException e) {\n                         Log.warning(\"Failed to parse cell RSSI value: \" + rssiString + \", adding tower without RSSI\", e);\n                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid)); // Add without RSSI\n                     }\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        } else if (cellCount > 0) {\n             Log.warning(\"Incorrect number of network data fields for cell header\");\n             // Adjust index to potentially skip to WiFi section if possible, or return\n             // Assuming the rest of the data might be wifi, try to continue parsing from current index\n        }\n\n\n        // Process WiFi access points\n        // Check if index is still valid and potentially points to wifi count\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = 0;\n            try {\n                 wifiCount = Integer.parseInt(values[index++]);\n            } catch (NumberFormatException e) {\n                 Log.warning(\"Failed to parse WiFi count: \" + values[index - 1], e);\n                 wifiCount = 0; // Skip WiFi processing if count is invalid\n            }\n\n            for (int i = 0; i < wifiCount; i++) {\n                 // Check required length for each wifi entry (name + mac + rssi)\n                 if (index + 2 >= values.length) { // Need index for name, index+1 for MAC, index+2 for RSSI\n                    Log.warning(\"Incorrect number of network data fields for wifi AP \" + i);\n                    break; // Stop processing wifi if data is truncated\n                 }\n                index += 1; // wifi name (skip)\n                String macAddress = values[index++];\n                String rssiString = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssiString.isEmpty()) {\n                     try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(\n                                macAddress.replace('-', ':'), Integer.parseInt(rssiString))); // Standardize MAC format\n                     } catch (NumberFormatException e) {\n                          Log.warning(\"Failed to parse WiFi RSSI value: \" + rssiString, e);\n                          // Skip this AP if RSSI is invalid, as WifiAccessPoint requires RSSI\n                     }\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}