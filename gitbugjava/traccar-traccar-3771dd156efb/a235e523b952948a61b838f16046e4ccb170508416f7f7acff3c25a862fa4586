{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        if (index < values.length && !values[index].isEmpty()) {\n            int cellCount = Integer.parseInt(values[index++]);\n            if (cellCount > 0) {\n                if (index < values.length) { // Skip timing advance if present\n                    index += 1; // timing advance\n                }\n\n                int mcc = 0;\n                if (index < values.length) {\n                    String mccString = values[index++];\n                    if (!mccString.isEmpty()) {\n                        if (mccString.equalsIgnoreCase(\"FFFF\")) {\n                            mcc = 0;\n                        } else {\n                            mcc = Integer.parseInt(mccString);\n                        }\n                    }\n                }\n\n                int mnc = 0;\n                if (index < values.length) {\n                    String mncString = values[index++];\n                    if (!mncString.isEmpty()) {\n                        if (mncString.equalsIgnoreCase(\"FFFF\")) {\n                            mnc = 0;\n                        } else {\n                            mnc = Integer.parseInt(mncString);\n                        }\n                    }\n                }\n\n                for (int i = 0; i < cellCount; i++) {\n                    if (index + 2 < values.length) { // Ensure lac, cid, rssi strings are available\n                        String lacString = values[index++];\n                        int lac;\n                        if (lacString.isEmpty()) {\n                            lac = 0;\n                        } else {\n                            boolean lacContainsLetter = false;\n                            for (char c : lacString.toCharArray()) {\n                                if (Character.isLetter(c)) {\n                                    lacContainsLetter = true;\n                                    break;\n                                }\n                            }\n                            if (lacContainsLetter) {\n                                lac = org.traccar.helper.DataConverter.parseHexInt(lacString);\n                            } else {\n                                lac = Integer.parseInt(lacString);\n                            }\n                        }\n\n                        String cidString = values[index++];\n                        int cid;\n                        if (cidString.isEmpty()) {\n                            cid = 0;\n                        } else {\n                            boolean cidContainsLetter = false;\n                            for (char c : cidString.toCharArray()) {\n                                if (Character.isLetter(c)) {\n                                    cidContainsLetter = true;\n                                    break;\n                                }\n                            }\n                            if (cidContainsLetter) {\n                                cid = org.traccar.helper.DataConverter.parseHexInt(cidString);\n                            } else {\n                                cid = Integer.parseInt(cidString);\n                            }\n                        }\n\n                        String rssiString = values[index++];\n                        if (!rssiString.isEmpty()) {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiString)));\n                        } else {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                        }\n                    } else {\n                        break; // Not enough data fields for a full cell tower entry\n                    }\n                }\n            }\n        }\n\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = Integer.parseInt(values[index++]);\n            for (int i = 0; i < wifiCount; i++) {\n                if (index < values.length) { // wifi name\n                    index += 1; \n                } else {\n                    break;\n                }\n                if (index + 1 < values.length) { // macAddress and rssi\n                    String macAddress = values[index++];\n                    String rssi = values[index++];\n                    if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                    }\n                } else {\n                    break; \n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}