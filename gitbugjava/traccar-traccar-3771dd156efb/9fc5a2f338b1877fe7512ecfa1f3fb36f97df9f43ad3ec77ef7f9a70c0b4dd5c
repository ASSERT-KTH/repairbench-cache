{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    // Split the network part; note that in some messages the network numeric fields \n    // may be provided in hexadecimal (for example with letter characters) while in others\n    // they are in decimal. We use a small lambda to auto-detect the radix.\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    int cellCount = Integer.parseInt(values[index++]);\n    if (cellCount > 0) {\n        index += 1; // skip timing advance\n\n        // Local helper: if the string consists entirely of digits (optionally with a '-' sign), parse in base 10,\n        // otherwise assume hexadecimal.\n        java.util.function.Function<String, Integer> parseIntAuto = s -> {\n            if (s == null || s.isEmpty()) {\n                return 0;\n            }\n            return s.matches(\"-?\\\\d+\") ? Integer.parseInt(s, 10) : Integer.parseInt(s, 16);\n        };\n\n        int mcc = !values[index].isEmpty() ? parseIntAuto.apply(values[index++]) : 0;\n        int mnc = !values[index].isEmpty() ? parseIntAuto.apply(values[index++]) : 0;\n\n        for (int i = 0; i < cellCount; i++) {\n            int lac = parseIntAuto.apply(values[index++]);\n            int cid = parseIntAuto.apply(values[index++]);\n            String cellRssi = values[index++];\n            if (!cellRssi.isEmpty()) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(cellRssi)));\n            } else {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n            }\n        }\n    }\n\n    if (index < values.length && !values[index].isEmpty()) {\n        int wifiCount = Integer.parseInt(values[index++]);\n        for (int i = 0; i < wifiCount; i++) {\n            index += 1; // skip wifi name\n            String macAddress = values[index++];\n            String wifiRssi = values[index++];\n            if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !wifiRssi.isEmpty()) {\n                network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(wifiRssi)));\n            }\n        }\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}