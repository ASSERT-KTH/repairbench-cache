{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String networkData = parser.next();\n        if (networkData == null || networkData.isEmpty()) {\n             return position; // No network data to parse\n        }\n\n        String[] values = networkData.split(\",\");\n        int index = 0;\n\n        Network network = new Network();\n\n        int cellCount = 0;\n        if (index < values.length && !values[index].isEmpty()) {\n            try {\n                cellCount = Integer.parseInt(values[index]);\n            } catch (NumberFormatException e) {\n                // Ignore invalid cell count\n            }\n        }\n        index++;\n\n        // Check if there are enough elements for timing advance, mcc, mnc\n        if (cellCount > 0 && index + 2 < values.length) {\n            index += 1; // timing advance\n\n            int mcc = 0;\n            String mccString = values[index++];\n            if (!mccString.isEmpty()) {\n                try {\n                    mcc = Integer.parseInt(mccString); // Try decimal\n                } catch (NumberFormatException e1) {\n                    try {\n                        mcc = Integer.parseInt(mccString, 16); // Try hexadecimal\n                    } catch (NumberFormatException e2) {\n                        // Ignore invalid MCC\n                    }\n                }\n            }\n\n            int mnc = 0;\n            String mncString = values[index++];\n             if (!mncString.isEmpty()) {\n                 try {\n                     mnc = Integer.parseInt(mncString); // Try decimal\n                 } catch (NumberFormatException e1) {\n                     try {\n                         mnc = Integer.parseInt(mncString, 16); // Try hexadecimal\n                     } catch (NumberFormatException e2) {\n                         // Ignore invalid MNC\n                     }\n                 }\n             }\n\n\n            for (int i = 0; i < cellCount; i++) {\n                 // Check if there are enough elements for lac, cid, rssi\n                 if (index + 2 >= values.length) {\n                     break; // Stop processing cells if data is truncated\n                 }\n\n                int lac = 0;\n                String lacString = values[index++];\n                if (!lacString.isEmpty()) {\n                    try {\n                        lac = Integer.parseInt(lacString); // Try decimal\n                    } catch (NumberFormatException e1) {\n                        try {\n                            lac = Integer.parseInt(lacString, 16); // Try hexadecimal\n                        } catch (NumberFormatException e2) {\n                            // Ignore invalid LAC\n                        }\n                    }\n                }\n\n                int cid = 0;\n                String cidString = values[index++];\n                 if (!cidString.isEmpty()) {\n                     try {\n                         cid = Integer.parseInt(cidString); // Try decimal\n                     } catch (NumberFormatException e1) {\n                         try {\n                             cid = Integer.parseInt(cidString, 16); // Try hexadecimal\n                         } catch (NumberFormatException e2) {\n                             // Ignore invalid CID\n                         }\n                     }\n                 }\n\n                String rssi = values[index++];\n                int signalStrength = 0;\n                boolean rssiPresent = !rssi.isEmpty();\n                if (rssiPresent) {\n                    try {\n                        signalStrength = Integer.parseInt(rssi);\n                    } catch (NumberFormatException e) {\n                        rssiPresent = false; // Ignore invalid RSSI\n                    }\n                }\n\n                if (mcc != 0 || mnc != 0 || lac != 0 || cid != 0) { // Add tower only if some identifier is non-zero\n                    if (rssiPresent) {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, signalStrength));\n                    } else {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                }\n            }\n        } else if (cellCount > 0) {\n             // Cell count positive but not enough fields, advance index past expected fields\n             index += 1; // timing advance\n             index += 2; // mcc, mnc\n             index += cellCount * 3; // lac, cid, rssi for each cell\n        }\n\n\n        // Wifi processing\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = 0;\n            try {\n                wifiCount = Integer.parseInt(values[index]);\n            } catch (NumberFormatException e) {\n                // Ignore invalid wifi count\n            }\n            index++;\n\n            for (int i = 0; i < wifiCount; i++) {\n                 // Check if there are enough elements for name, mac, rssi\n                 if (index + 2 >= values.length) {\n                    break; // Stop processing wifi if data is truncated\n                 }\n                index += 1; // wifi name\n                String macAddress = values[index++];\n                String rssi = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                     try {\n                         int signalStrength = Integer.parseInt(rssi);\n                         network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, signalStrength));\n                     } catch (NumberFormatException e) {\n                         // Ignore wifi point if RSSI is invalid\n                     }\n                }\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}