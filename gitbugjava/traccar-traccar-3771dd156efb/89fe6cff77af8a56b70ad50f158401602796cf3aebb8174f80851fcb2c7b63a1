{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    // parse cell towers\n    int cellCount = 0;\n    if (index < values.length) {\n        String cellCountStr = values[index++];\n        if (!cellCountStr.isEmpty()) {\n            try {\n                cellCount = Integer.parseInt(cellCountStr);\n            } catch (NumberFormatException e) {\n                try {\n                    cellCount = Integer.parseInt(cellCountStr, 16);\n                } catch (NumberFormatException ignore) {\n                }\n            }\n        }\n    }\n    if (cellCount > 0 && index < values.length) {\n        // skip timing advance\n        index++;\n        // parse MCC\n        int mcc = 0;\n        if (index < values.length) {\n            String mccStr = values[index++];\n            if (!mccStr.isEmpty()) {\n                try {\n                    mcc = Integer.parseInt(mccStr);\n                } catch (NumberFormatException e) {\n                    try {\n                        mcc = Integer.parseInt(mccStr, 16);\n                    } catch (NumberFormatException ignore) {\n                    }\n                }\n            }\n        }\n        // parse MNC\n        int mnc = 0;\n        if (index < values.length) {\n            String mncStr = values[index++];\n            if (!mncStr.isEmpty()) {\n                try {\n                    mnc = Integer.parseInt(mncStr);\n                } catch (NumberFormatException e) {\n                    try {\n                        mnc = Integer.parseInt(mncStr, 16);\n                    } catch (NumberFormatException ignore) {\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < cellCount && index < values.length; i++) {\n            int lac = 0;\n            if (index < values.length) {\n                String lacStr = values[index++];\n                if (!lacStr.isEmpty()) {\n                    try {\n                        lac = Integer.parseInt(lacStr);\n                    } catch (NumberFormatException e) {\n                        try {\n                            lac = Integer.parseInt(lacStr, 16);\n                        } catch (NumberFormatException ignore) {\n                        }\n                    }\n                }\n            }\n            int cid = 0;\n            if (index < values.length) {\n                String cidStr = values[index++];\n                if (!cidStr.isEmpty()) {\n                    try {\n                        cid = Integer.parseInt(cidStr);\n                    } catch (NumberFormatException e) {\n                        try {\n                            cid = Integer.parseInt(cidStr, 16);\n                        } catch (NumberFormatException ignore) {\n                        }\n                    }\n                }\n            }\n            String rssiStr = \"\";\n            if (index < values.length) {\n                rssiStr = values[index++];\n            }\n            if (!rssiStr.isEmpty()) {\n                int rssiValue = 0;\n                try {\n                    rssiValue = Integer.parseInt(rssiStr);\n                } catch (NumberFormatException e) {\n                    try {\n                        rssiValue = Integer.parseInt(rssiStr, 16);\n                    } catch (NumberFormatException ignore) {\n                    }\n                }\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));\n            } else {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n            }\n        }\n    }\n\n    // parse Wi\u2011Fi access points\n    if (index < values.length && !values[index].isEmpty()) {\n        String wifiCountStr = values[index++];\n        int wifiCount = 0;\n        if (!wifiCountStr.isEmpty()) {\n            try {\n                wifiCount = Integer.parseInt(wifiCountStr);\n            } catch (NumberFormatException e) {\n                try {\n                    wifiCount = Integer.parseInt(wifiCountStr, 16);\n                } catch (NumberFormatException ignore) {\n                }\n            }\n        }\n        for (int i = 0; i < wifiCount; i++) {\n            // skip Wi\u2011Fi name\n            index++;\n            String macAddress = index < values.length ? values[index++] : \"\";\n            String rssiStr = index < values.length ? values[index++] : \"\";\n            if (!macAddress.isEmpty() && !\"0\".equals(macAddress) && !rssiStr.isEmpty()) {\n                int rssiValue = 0;\n                try {\n                    rssiValue = Integer.parseInt(rssiStr);\n                } catch (NumberFormatException e) {\n                    try {\n                        rssiValue = Integer.parseInt(rssiStr, 16);\n                    } catch (NumberFormatException ignore) {\n                    }\n                }\n                network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssiValue));\n            }\n        }\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}