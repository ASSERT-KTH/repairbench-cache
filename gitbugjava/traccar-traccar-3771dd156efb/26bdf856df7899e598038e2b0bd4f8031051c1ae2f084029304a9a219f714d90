{
    "generation": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n\n        String networkData = parser.next(); // Get the network string\n        if (networkData != null && !networkData.isEmpty()) { // Check if network data exists\n            String[] values = networkData.split(\",\");\n            int index = 0;\n\n            Network network = new Network();\n\n            // Check for cell count availability and parse safely\n            int cellCount = 0;\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    cellCount = Integer.parseInt(values[index]);\n                } catch (NumberFormatException e) {\n                    // cellCount remains 0 if parsing fails, loop below won't execute\n                }\n            }\n            index++;\n\n            if (cellCount > 0) {\n                // Check index bounds before accessing timing advance, mcc, mnc\n                // Need at least 3 more fields: timing advance, mcc, mnc\n                if (values.length > index + 2) {\n                    index += 1; // timing advance (skip)\n\n                    int mcc = 0, mnc = 0;\n                    String mccString = values[index++];\n                    String mncString = values[index++];\n\n                    // Parse MCC (try decimal, fallback hex)\n                    if (mccString != null && !mccString.isEmpty()) {\n                        try {\n                            mcc = Integer.parseInt(mccString);\n                        } catch (NumberFormatException e1) {\n                            try {\n                                mcc = (int) Long.parseLong(mccString, 16);\n                            } catch (NumberFormatException e2) {\n                                mcc = 0; // Default on double failure\n                            }\n                        }\n                    }\n\n                    // Parse MNC (try decimal, fallback hex)\n                    if (mncString != null && !mncString.isEmpty()) {\n                        try {\n                            mnc = Integer.parseInt(mncString);\n                        } catch (NumberFormatException e1) {\n                            try {\n                                mnc = (int) Long.parseLong(mncString, 16);\n                            } catch (NumberFormatException e2) {\n                                mnc = 0; // Default on double failure\n                            }\n                        }\n                    }\n\n\n                    for (int i = 0; i < cellCount; i++) {\n                        // Check index bounds for lac, cid, rssi within the loop\n                        // Need at least 3 more fields per cell\n                        if (values.length > index + 2) {\n                            int lac = 0;\n                            long cidLong = 0;\n                            String lacString = values[index++];\n                            String cidString = values[index++];\n                            String rssiString = values[index++];\n\n                            // Parse LAC (try decimal, fallback hex)\n                            if (lacString != null && !lacString.isEmpty()) {\n                                try {\n                                    lac = Integer.parseInt(lacString);\n                                } catch (NumberFormatException e1) {\n                                    try {\n                                        lac = (int) Long.parseLong(lacString, 16);\n                                    } catch (NumberFormatException e2) {\n                                        lac = 0; // Default on double failure\n                                    }\n                                }\n                            }\n\n                            // Parse CID (try decimal, fallback hex using Long)\n                             if (cidString != null && !cidString.isEmpty()) {\n                                try {\n                                    cidLong = Long.parseLong(cidString);\n                                } catch (NumberFormatException e1) {\n                                    try {\n                                        cidLong = Long.parseLong(cidString, 16);\n                                    } catch (NumberFormatException e2) {\n                                        cidLong = 0; // Default on double failure\n                                    }\n                                }\n                             }\n                            int cid = (int) cidLong; // Cast to int for CellTower.from\n\n                            // Parse RSSI safely\n                            Integer rssiValue = null;\n                            if (rssiString != null && !rssiString.isEmpty()) {\n                                try {\n                                    rssiValue = Integer.parseInt(rssiString);\n                                } catch (NumberFormatException e) {\n                                    // ignore invalid RSSI\n                                }\n                            }\n\n                            // Add cell tower\n                            if (rssiValue != null) {\n                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));\n                            } else {\n                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                            }\n                        } else {\n                            // Not enough data for this cell tower, break loop\n                            break;\n                        }\n                    }\n                }\n                // If not enough data for timing advance, mcc, mnc after cellCount > 0,\n                // cell processing loop is skipped. Index remains pointing after cellCount.\n            }\n\n            // WIFI Parsing part (add boundary checks and safe parsing)\n            int wifiCount = 0;\n            if (index < values.length && !values[index].isEmpty()) {\n                 try {\n                    wifiCount = Integer.parseInt(values[index]);\n                } catch (NumberFormatException e) {\n                    // wifiCount remains 0\n                }\n            }\n            index++;\n\n            for (int i = 0; i < wifiCount; i++) {\n                 // Check index bounds for wifi data (name, mac, rssi)\n                 // Need at least 3 more fields per wifi network\n                if (values.length > index + 2) {\n                    index += 1; // wifi name (skip)\n                    String macAddress = values[index++];\n                    String rssiString = values[index++];\n                    if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && rssiString != null && !rssiString.isEmpty()) {\n                        try {\n                            network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssiString)));\n                        } catch (NumberFormatException e) {\n                            // Ignore invalid wifi RSSI or invalid MAC format potentially caught by WifiAccessPoint.from\n                        } catch (IllegalArgumentException e) {\n                             // Ignore invalid MAC format potentially caught by WifiAccessPoint.from\n                        }\n                    }\n                } else {\n                     // Not enough data for this wifi point, break loop\n                     break;\n                }\n            }\n\n            if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n                 position.setNetwork(network);\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}