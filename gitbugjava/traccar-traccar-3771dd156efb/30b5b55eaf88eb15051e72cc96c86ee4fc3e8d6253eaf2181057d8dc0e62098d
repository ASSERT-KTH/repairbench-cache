{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    // parse optional network information\n    String networkData = parser.next();\n    if (!networkData.isEmpty()) {\n        String[] values = networkData.split(\",\");\n        int idx = 0;\n        Network network = new Network();\n        try {\n            // cells\n            int cellCount = Integer.parseInt(values[idx++]);\n            if (cellCount > 0) {\n                idx++; // skip timing advance\n                String mccStr = values[idx++];\n                String mncStr = values[idx++];\n                // skip if invalid markers\n                if (!\"FFFF\".equalsIgnoreCase(mccStr) && !\"FFFF\".equalsIgnoreCase(mncStr)) {\n                    int mcc = mccStr.isEmpty() ? 0 : Integer.parseInt(mccStr);\n                    int mnc = mncStr.isEmpty() ? 0 : Integer.parseInt(mncStr);\n                    for (int i = 0; i < cellCount; i++) {\n                        int lac = Integer.parseInt(values[idx++]);\n                        int cid = Integer.parseInt(values[idx++]);\n                        String rssiStr = values[idx++];\n                        if (!rssiStr.isEmpty()) {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));\n                        } else {\n                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                        }\n                    }\n                } else {\n                    // skip invalid cell entries\n                    idx += cellCount * 3;\n                }\n            }\n            // wifis\n            if (idx < values.length && !values[idx].isEmpty()) {\n                int wifiCount = Integer.parseInt(values[idx++]);\n                for (int i = 0; i < wifiCount; i++) {\n                    idx++; // skip SSID\n                    String mac = values[idx++];\n                    String rssiStr = values[idx++];\n                    if (!mac.isEmpty() && !\"0\".equals(mac) && !rssiStr.isEmpty()) {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(mac, Integer.parseInt(rssiStr)));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            // ignore any malformed network data\n        }\n        if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {\n            position.setNetwork(network);\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}