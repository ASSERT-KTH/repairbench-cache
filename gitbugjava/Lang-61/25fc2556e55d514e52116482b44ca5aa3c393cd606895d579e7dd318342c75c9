{
    "generation": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     *\n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        // Calculate the maximum possible starting index based on 'size'\n        // The loop should not search beyond the actual content defined by 'size'.\n        // The last possible starting index 'i' is such that 'i + strLen <= size'.\n        int loopEnd = size - strLen;\n        outer:\n        // Loop from the given startIndex up to the maximum valid starting index.\n        for (int i = startIndex; i <= loopEnd; i++) {\n            for (int j = 0; j < strLen; j++) {\n                // Compare characters. Access 'thisBuf[i + j]' is safe because:\n                // max i = size - strLen\n                // max j = strLen - 1\n                // max index = (size - strLen) + (strLen - 1) = size - 1\n                // Since size <= buffer.length, size - 1 < buffer.length.\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            // Inner loop completed without mismatch, found the string.\n            return i;\n        }\n        // String not found.\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}