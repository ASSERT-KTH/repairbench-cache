{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at. If {@code chars} is {@code null}, this is the starting code point. If {@code chars} is not {@code null}, this is the starting index in the {@code chars} array.\n     * @param end  the position in set of chars to end before. If {@code chars} is {@code null}, this is the ending code point (exclusive). If {@code chars} is not {@code null}, this is the ending index in the {@code chars} array (exclusive).\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars based on {@code start}/{@code end} code points.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if {@code start} or {@code end} are out of bounds for the {@code chars} array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided {@code chars} array is empty, or {@code end <= start}.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        // Check chars array before manipulating start/end based on its properties\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The Array of chars must not be empty\");\n        }\n\n        int E = end; // Use local copies of start/end to allow modification for defaults\n        int S = start;\n\n        if (chars == null) {\n            // Case 1: Generate characters based on code points\n            if (S == 0 && E == 0) {\n                // Default range: ASCII printable or full range\n                if (!letters && !numbers) {\n                    // Original code used Integer.MAX_VALUE. Sticking to it for minimal change,\n                    // although Character.MAX_CODE_POINT+1 would be more correct for full Unicode.\n                    // The generation logic (casting to char) is flawed for supplementary chars anyway.\n                    E = Integer.MAX_VALUE;\n                } else {\n                    E = 'z' + 1; // exclusive\n                    S = ' ';     // inclusive\n                }\n            } else if (E <= S) {\n                // Explicitly provided range must be valid (end > start)\n                throw new IllegalArgumentException(\"Parameter end (\" + E + \") must be greater than start (\" + S + \")\");\n            }\n        } else {\n            // Case 2: Generate characters by picking from the 'chars' array using indices\n            if (S == 0 && E == 0) {\n                // Default range: Use the entire 'chars' array\n                E = chars.length; // end index is exclusive\n                S = 0;            // start index is inclusive\n                // No need to check E <= S here, as array is non-empty (checked above).\n            } else if (E <= S) {\n                 // Explicitly provided range must be valid (end > start)\n                 throw new IllegalArgumentException(\"Parameter end (\" + E + \") must be greater than start (\" + S + \")\");\n            }\n            // Note: Bounds check for S and E against chars.length is implicit.\n            // Accessing chars[random.nextInt(gap) + S] will throw AIOOBE if S < 0 or S >= chars.length\n            // or if E > chars.length leading to an index >= chars.length.\n            // This matches the Javadoc's mention of AIOOBE.\n        }\n\n        char[] buffer = new char[count];\n        int gap = E - S; // The number of values (codepoints or indices) to choose from\n\n        while (count-- != 0) { // Decrement count after checking condition\n            char ch;\n            if (chars == null) {\n                // Generate a random integer in [S, E) and cast to char\n                // Flawed for supplementary characters, but consistent with original code.\n                ch = (char) (random.nextInt(gap) + S);\n            } else {\n                // Generate a random index in [S, E) and get char from array\n                // This was the source of the AIOOBE in the original code.\n                ch = chars[random.nextInt(gap) + S];\n            }\n\n            // Apply filters (letters/numbers)\n            if ( (letters && Character.isLetter(ch))\n                    || (numbers && Character.isDigit(ch))\n                    || (!letters && !numbers) ) {\n\n                // Original surrogate handling logic. Applied regardless of 'chars' parameter.\n                // This block attempts to fix issues if a lone surrogate was generated,\n                // particularly in the (chars == null) case. It modifies 'count' to retry or insert pairs.\n                if(ch >= 56320 && ch <= 57343) { // ch is a low surrogate\n                    if(count == 0) {\n                        count++; // Need space for companion high surrogate, retry last char\n                    } else {\n                        // Add low surrogate, then randomly generate and add high surrogate before it\n                        buffer[count] = ch;\n                        count--; // Use previous buffer spot\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // Random high surrogate\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // ch is a high surrogate\n                    if(count == 0) {\n                        count++; // Need space for companion low surrogate, retry last char\n                    } else {\n                        // Add randomly generated low surrogate, then add high surrogate before it\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // Random low surrogate\n                        count--; // Use previous buffer spot\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // Private Use Area high surrogate?\n                    // Skip this character, retry\n                    count++;\n                } else {\n                    // ch is a valid non-surrogate char, add it to buffer\n                    buffer[count] = ch;\n                }\n            } else {\n                // Filter failed (e.g., requested letters only, got a digit), retry\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}