{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        // Check if the provided chars array is empty, as documented and tested.\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The provided chars array is empty.\");\n        }\n\n        if (start == 0 && end == 0) {\n            // If chars array is specified, default start/end to its bounds.\n            if (chars != null) {\n                end = chars.length;\n                // start remains 0\n            } else {\n                // If no chars array, use default range based on letters/numbers flags.\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                    // start remains 0\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';\n                }\n            }\n        } else {\n            // Ensure end > start if not zero, otherwise random.nextInt(gap) will fail.\n            // This check prevents IllegalArgumentException from random.nextInt( <= 0 ).\n            if (end <= start) {\n                 throw new IllegalArgumentException(\n                     String.format(\"Parameter end (%d) must be greater than start (%d)\", end, start));\n            }\n        }\n\n        // If the range is invalid relative to the chars array, AIOOBE will be thrown later.\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            int codePoint = random.nextInt(gap) + start;\n\n            if (chars == null) {\n                ch = (char) codePoint;\n            } else {\n                // Accessing chars array - may throw AIOOBE if start/end indices are\n                // invalid wrt array length, leading to out-of-bounds codePoint.\n                ch = chars[codePoint];\n            }\n\n            // Filter and handle surrogates (original logic)\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                // This logic requires the loop variable 'count' to be manipulated\n                // to ensure the correct number of characters are generated.\n\n                if(ch >= 56320 && ch <= 57343) { // low surrogate DC00-DFFF\n                    if(count == 0) { // Not enough room for second character.\n                        count++; // Roll back decrement to retry.\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch; // Put low surrogate\n                        count--; // Decrement count for the high surrogate\n                        // Check if count is still valid before assigning to buffer\n                        if (count < 0) { throw new IllegalStateException(\"Logic error: count became negative\"); } // Should not happen\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // Put high surrogate (D800-D87F)\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // high surrogate D800-DB7F\n                    if(count == 0) { // Not enough room for second character.\n                        count++; // Roll back decrement to retry.\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        // The low surrogate goes into the buffer first at current 'count' index\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // Put low surrogate (DC00-DC7F)\n                        count--; // Decrement count for the high surrogate\n                         // Check if count is still valid before assigning to buffer\n                        if (count < 0) { throw new IllegalStateException(\"Logic error: count became negative\"); } // Should not happen\n                        buffer[count] = ch; // Put high surrogate\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // private high surrogate DB80-DBFF\n                    // skip it and retry\n                    count++; // Roll back decrement.\n                } else { // normal character (BMP non-surrogate or astral)\n                    buffer[count] = ch; // Put character in buffer.\n                }\n            } else { // character filtered out\n                count++; // Roll back decrement to retry.\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}