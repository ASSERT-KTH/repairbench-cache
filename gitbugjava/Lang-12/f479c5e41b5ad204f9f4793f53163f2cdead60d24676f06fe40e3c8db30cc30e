{
    "generation": "import java.util.Random;\n\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is null, this is the starting character code.\n     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is null, this is the ending character code (exclusive).\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars within the range defined by start/end.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if {@code chars} is not null and {@code start < 0} or {@code end > chars.length}.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or {@code start >= end} (unless start and end are both 0 and chars is null) or the provided {@code chars} array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        // Ensure chars array is usable if provided\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        int gap;\n        int effectiveStart = start;\n        int effectiveEnd = end;\n\n        if (chars == null) {\n            // Logic when character set is not provided: start/end refer to code points.\n            if (effectiveStart == 0 && effectiveEnd == 0) {\n                // Default range behavior\n                if (!letters && !numbers) {\n                    // If no specific type requested, use a very broad range (0 to Integer.MAX_VALUE)\n                    // Note: This range includes surrogates and undefined code points.\n                    effectiveStart = 0;\n                    effectiveEnd = Integer.MAX_VALUE;\n                } else {\n                    // Default to ASCII printable characters ' ' to 'z'\n                    effectiveStart = ' '; // Inclusive start\n                    effectiveEnd = 'z' + 1; // Exclusive end\n                }\n            } else if (effectiveEnd <= effectiveStart) {\n                 // Range must be valid (end > start)\n                 throw new IllegalArgumentException(\n                     \"Parameter end (\" + effectiveEnd + \") must be greater than start (\" + effectiveStart + \")\");\n            }\n        } else {\n            // Logic when character set is provided: start/end refer to indices in the chars array.\n            if (effectiveStart == 0 && effectiveEnd == 0) {\n                // Default to using the entire chars array if start and end are 0.\n                effectiveEnd = chars.length; // Exclusive end index is the array length\n                // effectiveStart remains 0 (inclusive start index)\n            } else {\n                // Validate the provided start/end indices against the array bounds.\n                if (effectiveEnd > chars.length) {\n                    throw new ArrayIndexOutOfBoundsException(\n                        \"Parameter end (\" + effectiveEnd + \") must not be greater than the length of chars (\" + chars.length + \")\");\n                }\n                if (effectiveStart < 0) {\n                     throw new ArrayIndexOutOfBoundsException(\n                        \"Parameter start (\" + effectiveStart + \") must be non-negative.\");\n                }\n                if (effectiveStart >= effectiveEnd) {\n                     // Range must include at least one index (start < end).\n                     throw new IllegalArgumentException(\n                         \"Parameter start (\" + effectiveStart + \") must be strictly less than end (\" + effectiveEnd + \")\");\n                }\n            }\n        }\n\n        // Calculate the size of the range for random selection.\n        gap = effectiveEnd - effectiveStart;\n\n        char[] buffer = new char[count];\n        int charsAdded = 0; // Tracks the number of characters added to the buffer.\n\n        // Loop until the buffer is filled to the requested count.\n        while (charsAdded < count) {\n            char ch;\n            if (chars == null) {\n                // Generate a random code point within the effective range [start, end).\n                int codePoint = random.nextInt(gap) + effectiveStart;\n                // Cast the code point to char. This might result in a surrogate character.\n                ch = (char) codePoint;\n            } else {\n                // Generate a random index within the effective range [start, end) of the chars array.\n                int randomIndex = random.nextInt(gap) + effectiveStart;\n                // Select the character from the specified set at the random index.\n                ch = chars[randomIndex];\n            }\n\n            // Check if the generated character meets the filter criteria (letters/numbers).\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) { // Always true if letters and numbers are false.\n\n                // Handle surrogate characters to ensure the resulting string is valid Unicode.\n                if (Character.isSurrogate(ch)) {\n                    // Need two positions in the buffer to store a surrogate pair.\n                    if (charsAdded < count - 1) {\n                        if (Character.isLowSurrogate(ch)) {\n                            // Generated a low surrogate. Need a preceding high surrogate.\n                            // Generate a random high surrogate (using the original code's limited range).\n                            buffer[charsAdded++] = (char) (55296 + random.nextInt(128)); // Random high surrogate U+D800..U+D87F\n                            buffer[charsAdded++] = ch; // The generated low surrogate\n                        } else { // Must be a high surrogate (Character.isHighSurrogate(ch))\n                            // Check if it's in the private use high surrogate range (U+DB80 to U+DBFF), which the original code skipped.\n                            if (ch >= 56192 && ch <= 56319) {\n                                // Skip this private use character and try generating another one.\n                                continue;\n                            } else {\n                                // Standard high surrogate (U+D800 to U+DB7F). Need a following low surrogate.\n                                buffer[charsAdded++] = ch; // The generated high surrogate\n                                // Generate a random low surrogate (using the original code's limited range).\n                                buffer[charsAdded++] = (char) (56320 + random.nextInt(128)); // Random low surrogate U+DC00..U+DC7F\n                            }\n                        }\n                    } else {\n                        // Not enough space left in the buffer for a surrogate pair.\n                        // Skip this character and try generating another one.\n                        continue;\n                    }\n                } else {\n                    // The character is not a surrogate. Add it directly to the buffer.\n                    buffer[charsAdded++] = ch;\n                }\n            } else {\n                // The character was filtered out (e.g., generated a number when only letters allowed).\n                // Skip this character and try generating another one.\n                continue; // Redundant as it's the end of the loop body, but clarifies intent.\n            }\n        }\n        // Return the final random string.\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}