{
    "generation": "import java.util.Random;\n\npublic class RandomStringUtils { // Added class wrapper for context, provide only the method below\n\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Character.MAX_CODE_POINT}.\n     *\n     * <p>If set ('chars') is not {@code null}, characters between start (inclusive) and\n     * end (exclusive) are chosen from the set. If start and end are both {@code 0},\n     * the whole array is used.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at (inclusive, >= 0) or the starting character code point\n     * @param end  the position in set of chars to end before (exclusive) or the ending character code point (exclusive)\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars within the specified code point range.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if {@code start} or {@code end} are out of bounds for the {@code chars} array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided {@code chars} array is empty,\n     *  or {@code start} &gt;= {@code end} (for code points or array indices).\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        // Validate chars array if provided BEFORE buffer creation or other logic\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The provided chars array is empty.\");\n        }\n\n        char[] buffer = new char[count];\n        int bufferPos = 0; // Tracks position in buffer, fills forwards\n        int gap; // Stores the size of the selection range\n\n        if (chars != null) {\n            // Case 1: Choose characters from the provided 'chars' array.\n            int effectiveStart = start;\n            int effectiveEnd = end;\n\n            // Default to whole array if start and end are 0.\n            if (effectiveStart == 0 && effectiveEnd == 0) {\n                 effectiveEnd = chars.length;\n                 // effectiveStart remains 0\n            } else {\n                // Validate user-provided start/end indices against array bounds.\n                if (effectiveEnd > chars.length) {\n                    throw new ArrayIndexOutOfBoundsException(\n                        \"Upper bound (\" + effectiveEnd + \") exceeds array length (\" + chars.length + \")\");\n                }\n                if (effectiveStart < 0) {\n                     throw new ArrayIndexOutOfBoundsException(\n                        \"Lower bound (\" + effectiveStart + \") is negative\");\n                }\n                if (effectiveStart >= effectiveEnd) {\n                     throw new IllegalArgumentException(\n                        \"Lower bound (\" + effectiveStart + \") must be less than upper bound (\" + effectiveEnd + \")\");\n                 }\n            }\n\n            gap = effectiveEnd - effectiveStart;\n\n            while (bufferPos < count) {\n                // Select a random character from the specified range in the chars array\n                int randomIndex = random.nextInt(gap) + effectiveStart;\n                char ch = chars[randomIndex];\n\n                // Apply filtering (letters/numbers constraints).\n                if ((letters && Character.isLetter(ch))\n                        || (numbers && Character.isDigit(ch))\n                        || (!letters && !numbers)) {\n                    // If the character matches criteria, add it to the buffer.\n                    buffer[bufferPos++] = ch;\n                }\n                // If criteria not met, loop again to pick another character (retry).\n            }\n        } else {\n            // Case 2: Generate characters based on code points in the range [start, end).\n            int effectiveStart = start;\n            int effectiveEnd = end;\n\n            // Adjust start/end if they are 0 (default case).\n            if (effectiveStart == 0 && effectiveEnd == 0) {\n                if (!letters && !numbers) {\n                    // Default to any valid Unicode character.\n                    effectiveStart = 0;\n                    effectiveEnd = Character.MAX_CODE_POINT + 1; // end is exclusive.\n                } else {\n                    // Default range ' ' to 'z' inclusive for letters/numbers.\n                    effectiveStart = ' ';\n                    effectiveEnd = 'z' + 1; // end is exclusive.\n                }\n            } else {\n                 // Validate range if explicitly provided.\n                 if (effectiveEnd <= effectiveStart) {\n                     throw new IllegalArgumentException(\n                         \"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n                 }\n                 // Assume valid code point range inputs, rely on isValidCodePoint check later.\n            }\n\n            gap = effectiveEnd - effectiveStart;\n\n            while (bufferPos < count) {\n                // Generate a random code point within the range [effectiveStart, effectiveEnd).\n                int codePoint = random.nextInt(gap) + effectiveStart;\n\n                // Check filter criteria based on the generated code point.\n                boolean criteriaMet = (letters && Character.isLetter(codePoint))\n                                   || (numbers && Character.isDigit(codePoint))\n                                   || (!letters && !numbers);\n\n                // Ensure the code point is valid (not a surrogate) and meets criteria.\n                // Character.isValidCodePoint excludes surrogates U+D800 to U+DFFF.\n                if (criteriaMet && Character.isValidCodePoint(codePoint)) {\n                    if (Character.isSupplementaryCodePoint(codePoint)) {\n                        // Supplementary character needs two char positions in the buffer.\n                        // Check if there's enough space left for both chars.\n                        if (bufferPos < count - 1) {\n                            buffer[bufferPos++] = Character.highSurrogate(codePoint);\n                            buffer[bufferPos++] = Character.lowSurrogate(codePoint);\n                        }\n                        // If not enough space, loop continues (retry hoping for a BMP char).\n                    } else {\n                        // Basic Multilingual Plane (BMP) character (valid, not surrogate, meets criteria).\n                        buffer[bufferPos++] = (char) codePoint;\n                    }\n                }\n                // If criteria not met or code point invalid (e.g., a surrogate),\n                // loop continues without incrementing bufferPos (retry).\n            }\n        }\n        // Return the string constructed from the buffer.\n        return new String(buffer);\n    }\n} // End of class wrapper",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}