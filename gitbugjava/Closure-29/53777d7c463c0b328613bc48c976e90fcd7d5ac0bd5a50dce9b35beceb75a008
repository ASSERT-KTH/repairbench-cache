{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false; // Cannot inline x if x.y() is called\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n\n          // Check if the property access is the left-hand side of an assignment.\n          boolean isLhsOfAssign = gramps.isAssign() && gramps.getFirstChild() == parent;\n\n          // If the property access is NOT the LHS of an assignment (i.e., it's a read),\n          // then we bail out. This is a conservative approach to prevent issues with\n          // properties inherited from the prototype (like toString) or properties\n          // accessed before they are assigned (which this pass doesn't handle perfectly).\n          // While this might prevent some valid inlining cases (like reading a property\n          // assigned after the literal), it avoids incorrect inlining.\n          if (!isLhsOfAssign) {\n            return false; // Bail out on property reads like f(x.prop) or x.prop + 1\n          }\n\n          // If it IS the LHS of an assignment (e.g., x.prop = 1), this reference\n          // itself is okay. The inlining mechanism will handle creating a variable\n          // for 'prop' if necessary. We continue checking other references.\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n\n          Node childVal = child.getLastChild(); // Use getLastChild for STRING_KEY, GETTER_DEF, SETTER_DEF\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen. Note: Check childVal and its children, not just ancestors.\n          for (Reference t : refs) {\n             // Check if any reference node is beneath the value part of the object literal property\n            if (childVal != null && NodeUtil.isAncestor(childVal, t.getNode())) {\n                 // There's a self-referential assignment like x = {a: x} or x = {a: x.b}\n                 return false;\n            }\n          }\n        }\n\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}