{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            int j = input.length; // Use 'j' for length for brevity\n            // BOM:\n            // Use && for logical AND, not & (bitwise AND) although it works here due to implicit conversion\n            if (j >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            // Iterate through the bytes starting from index 'i'\n            for (; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII character (0xxxxxxx), move to next byte\n                }\n\n                // Check for UTF-8 leading byte patterns\n                if ((o & 0xE0) == 0xC0) {        // 110xxxxx (2-byte sequence)\n                    end = i + 1; // Expect 1 continuation byte\n                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx (3-byte sequence)\n                    end = i + 2; // Expect 2 continuation bytes\n                } else if ((o & 0xF8) == 0xF0) { // 11110xxx (4-byte sequence)\n                    end = i + 3; // Expect 3 continuation bytes\n                } else {\n                    // Not a valid UTF-8 start byte (could be 10xxxxxx or 11111xxx)\n                    return false;\n                }\n\n                // Crucial check: Ensure the sequence doesn't extend beyond the array bounds.\n                // 'end' is the index of the last byte expected in the sequence.\n                // The indices to be checked are i+1 up to end.\n                // Therefore, the index 'end' must be less than the length 'j'.\n                if (end >= j) {\n                    return false; // Sequence truncated\n                }\n\n                // Check continuation bytes (must be 10xxxxxx)\n                // This loop advances 'i' to check each expected continuation byte\n                while (i < end) {\n                    i++; // Move to the next byte index\n                    o = input[i]; // Get the continuation byte\n                    if ((o & 0xC0) != 0x80) { // Check if it has the 10xxxxxx pattern\n                        return false; // Invalid continuation byte\n                    }\n                }\n                // After the while loop, 'i' points to the last byte of the sequence.\n                // The outer loop's ++i will correctly move 'i' to the start of the next character.\n            }\n            // If loop completes without returning false, the byte array looks like valid UTF-8\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}