{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) { // Note: & used for boolean checks originally, but should be &&. Left as is to minimize changes outside the core bug fix.\n                i = 3;\n            }\n\n            int len = input.length;\n            while (i < len) {\n                int o = input[i] & 0xFF; // Treat byte as unsigned\n\n                if ((o & 0x80) == 0) {\n                    // ASCII (0xxxxxxx) - 1 byte\n                    i++;\n                    continue;\n                }\n\n                // Check for UTF-8 leading byte patterns and determine required continuation bytes\n                int remainingBytes;\n                if ((o & 0xE0) == 0xC0) { // 110xxxxx - 2 bytes\n                    remainingBytes = 1;\n                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx - 3 bytes\n                    remainingBytes = 2;\n                } else if ((o & 0xF8) == 0xF0) { // 11110xxx - 4 bytes\n                    remainingBytes = 3;\n                } else {\n                    // Not a valid UTF-8 leading byte (or a continuation byte 10xxxxxx found where it shouldn't be)\n                    return false;\n                }\n\n                // Check if there are enough bytes left for the sequence\n                // Must have 1 byte for lead and 'remainingBytes' for continuation\n                if (i + remainingBytes >= len) {\n                    return false; // Truncated sequence\n                }\n\n                // Check continuation bytes (must start with 10xxxxxx)\n                for (int k = 1; k <= remainingBytes; k++) {\n                    int nextByte = input[i + k] & 0xFF;\n                    if ((nextByte & 0xC0) != 0x80) {\n                        return false; // Invalid continuation byte\n                    }\n                }\n\n                // Move index past the entire UTF-8 sequence (1 lead + remainingBytes continuation)\n                i += (1 + remainingBytes);\n            }\n\n            // If we reached here, all bytes conform to UTF-8 structure\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}