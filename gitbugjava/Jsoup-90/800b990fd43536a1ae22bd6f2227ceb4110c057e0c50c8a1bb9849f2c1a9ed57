{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            int length = input.length;\n\n            // BOM: EF BB BF\n            if (length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) { // Use &&, not &\n                i = 3;\n            }\n\n            int end;\n            for (; i < length; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII 0xxxxxxx\n                }\n\n                // Check for valid UTF-8 multi-byte lead byte\n                if ((o & 0xE0) == 0xC0) { // 110xxxxx (2 bytes)\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx (3 bytes)\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) { // 11110xxx (4 bytes)\n                    end = i + 3;\n                } else {\n                    // Invalid starting byte (e.g., 10xxxxxx or 11111xxx)\n                    return false;\n                }\n\n                // Check if the sequence is truncated (i.e., not enough bytes left for the continuation bytes)\n                // 'end' is the index of the last expected continuation byte. It must be < length.\n                if (end >= length) {\n                    return false;\n                }\n\n                // Check validity of continuation bytes (must be 10xxxxxx)\n                // This inner loop iterates through the expected continuation bytes\n                // starting from index i + 1 up to 'end'.\n                int check_i = i; // Use a separate index for checking continuation bytes\n                                 // The outer loop's 'i' should remain at the lead byte for now.\n                while (check_i < end) {\n                    check_i++; // Move to the next byte position\n                    int continuationByte = input[check_i];\n                    if ((continuationByte & 0xC0) != 0x80) {\n                        // Does not have the form 10xxxxxx\n                        return false;\n                    }\n                }\n                // If all continuation bytes are valid, advance the outer loop's 'i'\n                // past the entire multi-byte sequence.\n                i = end; // Set 'i' to the index of the last byte of the sequence.\n                         // The outer loop's ++i will then advance it to the start of the next char.\n            }\n\n            // If the loop completes without returning false, the byte array appears to be valid UTF-8\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}