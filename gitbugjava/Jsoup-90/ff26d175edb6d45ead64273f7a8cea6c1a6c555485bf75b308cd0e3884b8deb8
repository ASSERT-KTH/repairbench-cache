{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            final int length = input.length;\n\n            // Check for optional BOM (Byte Order Mark)\n            if (length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3; // Skip BOM\n            }\n\n            int nBytes; // Number of bytes in the current UTF-8 sequence\n            while (i < length) {\n                int currentByte = input[i] & 0xFF; // Treat byte as unsigned value\n\n                if ((currentByte & 0x80) == 0) {\n                    // 0xxxxxxx : ASCII character\n                    i++;\n                    continue; // Move to the next byte\n                }\n\n                // Determine the expected number of bytes in the sequence based on the leading byte\n                if ((currentByte & 0xE0) == 0xC0) {      // 110xxxxx : 2-byte sequence\n                    nBytes = 2;\n                } else if ((currentByte & 0xF0) == 0xE0) { // 1110xxxx : 3-byte sequence\n                    nBytes = 3;\n                } else if ((currentByte & 0xF8) == 0xF0) { // 11110xxx : 4-byte sequence\n                    nBytes = 4;\n                } else {\n                    // Invalid UTF-8 start byte (e.g., 10xxxxxx or 11111xxx)\n                    return false;\n                }\n\n                // Check if the declared sequence length extends beyond the input array\n                if (i + nBytes > length) {\n                    // Incomplete sequence at the end of the input\n                    return false;\n                }\n\n                // Check that the following bytes are valid continuation bytes (10xxxxxx)\n                for (int k = 1; k < nBytes; k++) {\n                    int nextByte = input[i + k] & 0xFF; // Treat byte as unsigned\n                    if ((nextByte & 0xC0) != 0x80) {\n                        // Invalid continuation byte\n                        return false;\n                    }\n                }\n\n                // Move the index past the validated UTF-8 sequence\n                i += nBytes;\n            }\n\n            // If the loop completes without returning false, the input looks like valid UTF-8\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}