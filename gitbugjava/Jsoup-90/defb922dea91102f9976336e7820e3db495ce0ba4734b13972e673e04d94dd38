{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            int length = input.length;\n\n            // BOM:\n            if (length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            // Use length instead of input.length in loop condition\n            for (; i < length; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII (0xxxxxxx)\n                }\n\n                // Determine the number of continuation bytes expected\n                int requiredBytes;\n                if ((o & 0xE0) == 0xC0) { // 110xxxxx (2 bytes)\n                    requiredBytes = 1;\n                    end = i + requiredBytes;\n                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx (3 bytes)\n                    requiredBytes = 2;\n                    end = i + requiredBytes;\n                } else if ((o & 0xF8) == 0xF0) { // 11110xxx (4 bytes)\n                    requiredBytes = 3;\n                    end = i + requiredBytes;\n                } else {\n                    // Invalid UTF-8 leading byte (e.g., 10xxxxxx or 11111xxx)\n                    return false;\n                }\n\n                // Check if there are enough bytes left in the input for the sequence.\n                // The required continuation bytes are at indices i+1, ..., end.\n                // So, the last required index 'end' must be less than 'length'.\n                if (end >= length) {\n                    return false; // Sequence extends beyond input length\n                }\n\n                // Check that the required number of continuation bytes follow (10xxxxxx)\n                while (i < end) {\n                    i++; // Move to the next byte index\n                    // No need to check i < length here because we already checked end < length\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) { // Check for 10xxxxxx pattern\n                        return false; // Invalid continuation byte\n                    }\n                }\n                // The outer loop's ++i will advance 'i' past the last byte of the validated sequence\n            }\n            // If the loop completes without returning false, it looks like UTF-8\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}