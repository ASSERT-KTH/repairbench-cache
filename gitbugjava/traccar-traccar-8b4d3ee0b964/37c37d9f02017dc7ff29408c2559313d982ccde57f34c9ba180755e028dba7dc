{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n\n    // Registration message\n    if (sentence.startsWith(\"!1,\")) {\n        int index = sentence.indexOf(',', 3);\n        if (index < 0) {\n            index = sentence.length();\n        }\n        // store device session by IMEI\n        getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n        return null;\n    }\n\n    // All other messages require a valid session\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // Determine message type\n    String type = sentence.substring(1, 2);\n    switch (type) {\n\n        // Acknowledgment\n        case \"3\":\n            // just return empty attributes\n            return new HashMap<String, Object>();\n\n        // Phone numbers configuration\n        case \"4\": {\n            String[] values = sentence.split(\",\");\n            Map<String, Object> result = new HashMap<>();\n            if (values.length >= 3 && !values[2].isEmpty()) {\n                result.put(\"phone1\", values[2]);\n            }\n            if (values.length >= 4 && !values[3].isEmpty()) {\n                result.put(\"phone2\", values[3]);\n            }\n            if (values.length >= 5 && !values[4].isEmpty()) {\n                result.put(\"phone3\", values[4]);\n            }\n            return result;\n        }\n\n        // Status (battery level)\n        case \"5\": {\n            String[] values = sentence.split(\",\");\n            Map<String, Object> result = new HashMap<>();\n            if (values.length >= 4) {\n                try {\n                    result.put(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            return result;\n        }\n\n        // Location reports\n        case \"B\":\n        case \"D\": {\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.set(Position.KEY_TYPE, type);\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n            return position;\n        }\n\n        case \"C\": {\n            Parser parser = new Parser(PATTERN_C, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.set(Position.KEY_TYPE, type);\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            return position;\n        }\n\n        case \"A\": {\n            Parser parser = new Parser(PATTERN_A, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.set(Position.KEY_TYPE, type);\n            decodeFix(position, parser);\n            return position;\n        }\n\n        default:\n            return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}