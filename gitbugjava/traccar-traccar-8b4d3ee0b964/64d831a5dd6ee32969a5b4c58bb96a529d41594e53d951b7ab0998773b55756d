{
    "generation": "@Override\nprotected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n    String sentence = (String) msg;\n    \n    if (sentence.startsWith(\"!1,\")) {\n        int index = sentence.indexOf(',', 3);\n        if (index < 0) {\n            index = sentence.length();\n        }\n        getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n        return null;\n    }\n    \n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null || !sentence.matches(\"![345A-D],.*\")) {\n        return null;\n    }\n    \n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    \n    String type = sentence.substring(1, 2);\n    position.set(Position.KEY_TYPE, type);\n    \n    if (type.equals(\"3\")) {\n        getLastLocation(position, null);\n        position.set(Position.KEY_RESULT, sentence.substring(3));\n        return position;\n    } else if (type.equals(\"4\")) {\n        // For type \"4\" messages, extract phone number from the third field.\n        String[] values = sentence.split(\",\");\n        getLastLocation(position, null);\n        if (values.length > 2 && values[2] != null && !values[2].isEmpty()) {\n            position.set(\"phone1\", values[2]);\n        }\n        return position;\n    } else if (type.equals(\"5\")) {\n        String[] values = sentence.split(\",\");\n        getLastLocation(position, null);\n        position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n        if (values.length >= 4 && values[3] != null && !values[3].isEmpty()) {\n            position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n        }\n        return position;\n    } else if (type.equals(\"B\") || type.equals(\"D\")) {\n        Parser parser = new Parser(PATTERN_BD, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        decodeFix(position, parser);\n        decodeState(position, parser);\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n        position.set(Position.KEY_HDOP, parser.nextDouble(0));\n        return position;\n    } else if (type.equals(\"C\")) {\n        Parser parser = new Parser(PATTERN_C, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        decodeFix(position, parser);\n        decodeState(position, parser);\n        return position;\n    } else if (type.equals(\"A\")) {\n        Parser parser = new Parser(PATTERN_A, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        decodeFix(position, parser);\n        return position;\n    }\n    \n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}