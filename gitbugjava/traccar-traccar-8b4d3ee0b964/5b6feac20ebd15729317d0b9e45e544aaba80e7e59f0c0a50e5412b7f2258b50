{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n\n    if (sentence.startsWith(\"!1,\")) {\n        int index = sentence.indexOf(',', 3);\n        if (index < 0) {\n            index = sentence.length();\n        }\n        // If device session cannot be found, just return null\n        if (getDeviceSession(channel, remoteAddress, sentence.substring(3, index)) == null) {\n            return null;\n        }\n        // Additional parsing for \"!1,\" type messages if needed, but for now just return null\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null || !sentence.matches(\"![35ABCD],.*\")) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    String type = sentence.substring(1, 2);\n    position.set(Position.KEY_TYPE, type);\n\n    if (type.equals(\"3\")) {\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_RESULT, sentence.substring(3));\n\n        return position;\n\n    } else if (type.equals(\"5\")) {\n\n        String[] values = sentence.split(\",\");\n\n        getLastLocation(position, null);\n\n        if (values.length > 1 && !values[1].isEmpty()) {\n            try {\n                position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n            } catch (NumberFormatException error) {\n                // ignore\n            }\n        }\n        if (values.length >= 4 && !values[3].isEmpty()) {\n            try {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n            } catch (NumberFormatException error) {\n                // ignore\n            }\n        }\n\n        // For MiniFinder protocol, \"!5,<rssi>,V,<battery>\" or \"!5,<rssi>,V\"\n        return position;\n\n    } else if (type.equals(\"B\") || type.equals(\"D\")) {\n\n        Parser parser = new Parser(PATTERN_BD, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        decodeFix(position, parser);\n        decodeState(position, parser);\n\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n        position.set(Position.KEY_HDOP, parser.nextDouble(0));\n\n        return position;\n\n    } else if (type.equals(\"C\")) {\n\n        Parser parser = new Parser(PATTERN_C, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        decodeFix(position, parser);\n        decodeState(position, parser);\n\n        return position;\n\n    } else if (type.equals(\"A\")) {\n\n        Parser parser = new Parser(PATTERN_A, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        decodeFix(position, parser);\n\n        return position;\n\n    } else if (type.equals(\"4\")) { // handle \"!4,...\" report phone numbers\n\n        String[] values = sentence.split(\",\", -1); // allow trailing empty strings\n        // Typical: !4,10,040123,,,1.0,110,0,0S,33\n        if (values.length >= 3) {\n            String phone = values[2];\n            if (!phone.isEmpty()) {\n                position.set(\"phone1\", phone);\n            }\n        }\n        return position;\n\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}