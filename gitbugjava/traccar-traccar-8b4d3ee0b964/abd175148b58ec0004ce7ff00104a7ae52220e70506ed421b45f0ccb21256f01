{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        String sentence = (String) msg;\n        if (sentence.startsWith(\"!1,\")) {\n            int index = sentence.indexOf(',', 3);\n            if (index < 0) {\n                index = sentence.length();\n            }\n            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        return decode(deviceSession, sentence);\n    }\n\n    private Position decode(DeviceSession deviceSession, String sentence) {\n        Position position = deviceSession.getPosition();\n        if (position == null) {\n            position = new Position();\n            deviceSession.setPosition(position);\n        }\n        String type = sentence.substring(0, 1);\n        if (type.equals(\"0\")) {\n            Parser parser = new Parser(PATTERN_0, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n            return position;\n        } else if (type.equals(\"1\")) {\n            Parser parser = new Parser(PATTERN_1, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n            return position;\n        } else if (type.equals(\"2\")) {\n            Parser parser = new Parser(PATTERN_2, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n            return position;\n        } else if (type.equals(\"5\")) {\n            String[] values = sentence.split(\",\");\n            getLastLocation(position, null);\n            position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n            if (values.length >= 4) {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n            }\n            return position;\n        } else if (type.equals(\"B\") || type.equals(\"D\")) {\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n            return position;\n        } else if (type.equals(\"C\")) {\n            Parser parser = new Parser(PATTERN_C, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            return position;\n        } else if (type.equals(\"A\")) {\n            Parser parser = new Parser(PATTERN_A, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            return position;\n        }\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}