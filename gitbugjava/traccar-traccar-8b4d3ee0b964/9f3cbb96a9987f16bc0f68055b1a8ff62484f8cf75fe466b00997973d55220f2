{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n\n    if (sentence.startsWith(\"!1,\")) {\n        int index = sentence.indexOf(',', 3);\n        if (index == -1) {\n            index = sentence.length();\n        }\n        getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null || !sentence.matches(\"![35A-D],.*\")) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    String type = sentence.substring(1, 2);\n    position.set(Position.KEY_TYPE, type);\n\n    switch (type) {\n        case \"3\":\n            getLastLocation(position, null);\n            position.set(Position.KEY_RESULT, sentence.substring(3));\n            return position;\n\n        case \"5\":\n            String[] values = sentence.split(\",\");\n            if (values.length > 1) {\n                getLastLocation(position, null);\n                position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n                if (values.length >= 4) {\n                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n                }\n                return position;\n            }\n            break;\n\n        case \"B\":\n        case \"D\":\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n            decodeState(position, parser);\n\n            int satellites = parser.nextInt(0);\n            int satellitesVisible = parser.nextInt(0);\n            double hdop = parser.nextDouble(0);\n\n            position.set(Position.KEY_SATELLITES, satellites);\n            position.set(Position.KEY_SATELLITES_VISIBLE, satellitesVisible);\n            position.set(Position.KEY_HDOP, hdop);\n\n            return position;\n\n        case \"C\":\n            Parser parserC = new Parser(PATTERN_C, sentence);\n            if (!parserC.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parserC);\n            decodeState(position, parserC);\n\n            return position;\n\n        case \"A\":\n            Parser parserA = new Parser(PATTERN_A, sentence);\n            if (!parserA.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parserA);\n            return position;\n\n        default:\n            return null;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}