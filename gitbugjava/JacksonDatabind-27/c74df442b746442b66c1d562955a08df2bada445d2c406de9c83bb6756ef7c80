{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        // Note: Do not use TokenBuffer; problems with handling of values HAve been reported,\n        // plus it adds memory overhead. Instead, just process properties sequentially.\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Check if value might contain external type id: should receive property value, pass buffer\n                // 11-Jan-2017, tatu: ^^^ note sure about above comment; trying to align with issue #2\u5916\u90e8 type id case?\n                // Let's just handle as regular creator property, see if that works:\n                // If it's referring to the external type id, it needs to be handled by ext handler\n                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                    continue; // handler buffered/queued value; good\n                }\n\n                // If not handled by external handler, buffer it for the creator.\n                // Value deserialization happens here, but build is deferred.\n                Object value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);\n                if (buffer.assignParameter(creatorProp, value)) {\n                    // We have all creator parameters; but MUST NOT create bean quite yet.\n                    // We may need Type Id to know type of creator parameter, OR there may be other properties\n                    // to deserialize after creation.\n                    // So: DO NOT create bean instance, let `ext.complete()` do it.\n                    // Must continue processing properties.\n                }\n                 // Need to continue even if not all creator parameters assigned yet.\n                 continue; // Always process next property\n            }\n\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n\n            // Regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n\n            // External type id (or property that depends on it)?\n            // Here we pass null buffer to indicate it's not parameter value:\n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n\n            // Ignorable property?\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n\n            // \"any property\"?\n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue; // Add explicit continue\n            }\n            // Unknown property?\n            handleUnknownVanilla(p, ctxt, handledType(), propName);\n        } // end of loop for properties\n\n        // We hit END_OBJECT. Build the object using collected info.\n        try {\n            // 24-Aug-2017, tatu: As per [databind#1771] need to pass buffer AND creator\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (Exception e) {\n            // Aug 1/2019, tatu: As per [databind#2426], need to wrap instantiation checks\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}