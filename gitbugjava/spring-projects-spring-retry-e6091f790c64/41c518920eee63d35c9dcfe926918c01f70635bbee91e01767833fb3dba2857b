{
    "generation": "/**\n * Builds the {@link BackOffPolicy} with the given parameters.\n * @return the {@link BackOffPolicy} instance\n */\npublic BackOffPolicy build() {\n    // Exponential backoff if a multiplier is set or supplied\n    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {\n        ExponentialBackOffPolicy policy;\n        if (Boolean.TRUE.equals(this.random)) {\n            policy = new ExponentialRandomBackOffPolicy();\n        }\n        else {\n            policy = new ExponentialBackOffPolicy();\n        }\n        // initial interval (static + supplier if needed)\n        if (this.delaySupplier != null) {\n            long initial = this.delaySupplier.get();\n            policy.setInitialInterval(initial);\n            policy.initialIntervalSupplier(this.delaySupplier);\n        }\n        else if (this.delay != null) {\n            policy.setInitialInterval(this.delay);\n        }\n        // multiplier (static + supplier if needed)\n        if (this.multiplierSupplier != null) {\n            double mult = this.multiplierSupplier.get();\n            policy.setMultiplier(mult);\n            policy.multiplierSupplier(this.multiplierSupplier);\n        }\n        else if (this.multiplier != null) {\n            policy.setMultiplier(this.multiplier);\n        }\n        // max interval (static + supplier if needed)\n        if (this.maxDelaySupplier != null) {\n            long max = this.maxDelaySupplier.get();\n            policy.setMaxInterval(max);\n            policy.maxIntervalSupplier(this.maxDelaySupplier);\n        }\n        else if (this.maxDelay != null) {\n            if (this.delay != null) {\n                policy.setMaxInterval(\n                    this.maxDelay > this.delay ? this.maxDelay\n                                               : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL\n                );\n            }\n            else {\n                policy.setMaxInterval(this.maxDelay);\n            }\n        }\n        // sleeper\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    // Uniform random backoff if a range is provided\n    if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n        if (this.delaySupplier != null) {\n            long min = this.delaySupplier.get();\n            policy.setMinBackOffPeriod(min);\n            policy.minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        else {\n            policy.setMinBackOffPeriod(this.delay);\n        }\n        if (this.maxDelaySupplier != null) {\n            long max = this.maxDelaySupplier.get();\n            policy.setMaxBackOffPeriod(max);\n            policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n        else {\n            policy.setMaxBackOffPeriod(this.maxDelay);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    // Fixed backoff\n    FixedBackOffPolicy policy = new FixedBackOffPolicy();\n    if (this.delaySupplier != null) {\n        policy.setBackOffPeriod(this.delaySupplier.get());\n    }\n    else if (this.delay != null) {\n        policy.setBackOffPeriod(this.delay);\n    }\n    if (this.sleeper != null) {\n        policy.setSleeper(this.sleeper);\n    }\n    return policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}