{
    "generation": "\t/**\n\t * Builds the {@link BackOffPolicy} with the given parameters.\n\t * @return the {@link BackOffPolicy} instance\n\t */\n\tpublic BackOffPolicy build() {\n\t\tif (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {\n\t\t\tExponentialBackOffPolicy policy;\n\t\t\tif (Boolean.TRUE.equals(this.random)) {\n\t\t\t\tpolicy = new ExponentialRandomBackOffPolicy();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpolicy = new ExponentialBackOffPolicy();\n\t\t\t}\n\t\t\t// Apply suppliers first, then concrete values if supplier not present\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.initialIntervalSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\telse if (this.delay != null) {\n\t\t\t\tpolicy.setInitialInterval(this.delay);\n\t\t\t}\n\n\t\t\tif (this.multiplierSupplier != null) {\n\t\t\t\tpolicy.multiplierSupplier(this.multiplierSupplier);\n\t\t\t}\n\t\t\telse if (this.multiplier != null) {\n\t\t\t\tpolicy.setMultiplier(this.multiplier);\n\t\t\t}\n\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxIntervalSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\t// Set maxInterval directly if maxDelay is provided and no supplier exists.\n\t\t\t// Removed the check against delay and the conditional setting to DEFAULT_MAX_INTERVAL.\n\t\t\telse if (this.maxDelay != null) {\n\t\t\t\tpolicy.setMaxInterval(this.maxDelay);\n\t\t\t}\n\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\t\t// Check for UniformRandom only if not Exponential\n\t\t// Ensure both delay and maxDelay are provided and maxDelay > delay\n\t\tif (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay && this.maxDelaySupplier == null && this.delaySupplier == null) {\n\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\n\t\t\t// Set min period from delay\n\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t\t// Set max period from maxDelay\n\t\t\tpolicy.setMaxBackOffPeriod(this.maxDelay);\n\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\t\t// Check for UniformRandom with suppliers\n\t\telse if (this.maxDelaySupplier != null && this.delaySupplier != null) {\n\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\t\t// Set suppliers\n\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t\tpolicy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\n\t\t}\n\t\t// Default to FixedBackOffPolicy if neither Exponential nor UniformRandom conditions are met\n\t\tFixedBackOffPolicy policy = new FixedBackOffPolicy();\n\t\t// Note: FixedBackOffPolicy likely doesn't support suppliers for backOffPeriod.\n\t\tif (this.delay != null) {\n\t\t\tpolicy.setBackOffPeriod(this.delay);\n\t\t}\n\t\tif (this.sleeper != null) {\n\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t}\n\t\treturn policy;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}