{
    "generation": "/**\n * Builds the {@link BackOffPolicy} with the given parameters.\n * @return the {@link BackOffPolicy} instance\n */\npublic BackOffPolicy build() {\n\tif ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {\n\t\tExponentialBackOffPolicy policy;\n\t\tif (Boolean.TRUE.equals(this.random)) {\n\t\t\tpolicy = new ExponentialRandomBackOffPolicy();\n\t\t}\n\t\telse {\n\t\t\tpolicy = new ExponentialBackOffPolicy();\n\t\t}\n\t\tif (this.delay != null) {\n\t\t\tpolicy.setInitialInterval(this.delay);\n\t\t}\n\t\tif (this.delaySupplier != null) {\n\t\t\tpolicy.initialIntervalSupplier(this.delaySupplier);\n\t\t}\n\t\tif (this.multiplier != null) {\n\t\t\tpolicy.setMultiplier(this.multiplier);\n\t\t}\n\t\tif (this.multiplierSupplier != null) {\n\t\t\tpolicy.multiplierSupplier(this.multiplierSupplier);\n\t\t}\n\t\tif (this.maxDelay != null) { // fixed line: allow maxDelay < delay, just set as is\n\t\t\tpolicy.setMaxInterval(this.maxDelay);\n\t\t}\n\t\tif (this.maxDelaySupplier != null) {\n\t\t\tpolicy.maxIntervalSupplier(this.maxDelaySupplier);\n\t\t}\n\t\tif (this.sleeper != null) {\n\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t}\n\t\treturn policy;\n\t}\n\tif (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\tif (this.delay != null) {\n\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t}\n\t\tif (this.delaySupplier != null) {\n\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t}\n\t\tif (this.maxDelay != null) {\n\t\t\tpolicy.setMaxBackOffPeriod(this.maxDelay);\n\t\t}\n\t\tif (this.maxDelaySupplier != null) {\n\t\t\tpolicy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n\t\t}\n\t\tif (this.sleeper != null) {\n\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t}\n\t\treturn policy;\n\t}\n\tFixedBackOffPolicy policy = new FixedBackOffPolicy();\n\tif (this.delay != null) {\n\t\tpolicy.setBackOffPeriod(this.delay);\n\t}\n\tif (this.sleeper != null) {\n\t\tpolicy.setSleeper(this.sleeper);\n\t}\n\treturn policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}