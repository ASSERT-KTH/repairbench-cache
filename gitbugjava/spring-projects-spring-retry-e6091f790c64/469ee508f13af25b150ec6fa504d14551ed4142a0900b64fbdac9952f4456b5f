{
    "generation": "\t/**\n\t * Builds the {@link BackOffPolicy} with the given parameters.\n\t * @return the {@link BackOffPolicy} instance\n\t */\n\tpublic BackOffPolicy build() {\n\t\t// Check for Exponential BackOff criteria\n\t\tif (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {\n\t\t\tExponentialBackOffPolicy policy;\n\t\t\t// Determine if random exponential backoff is needed\n\t\t\tif (Boolean.TRUE.equals(this.random)) {\n\t\t\t\tpolicy = new ExponentialRandomBackOffPolicy();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpolicy = new ExponentialBackOffPolicy();\n\t\t\t}\n\t\t\t// Set initial interval if delay is provided\n\t\t\tif (this.delay != null) {\n\t\t\t\tpolicy.setInitialInterval(this.delay);\n\t\t\t}\n\t\t\t// Set initial interval supplier if provided\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.initialIntervalSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\t// Set multiplier if provided\n\t\t\tif (this.multiplier != null) {\n\t\t\t\tpolicy.setMultiplier(this.multiplier);\n\t\t\t}\n\t\t\t// Set multiplier supplier if provided\n\t\t\tif (this.multiplierSupplier != null) {\n\t\t\t\tpolicy.multiplierSupplier(this.multiplierSupplier);\n\t\t\t}\n\t\t\t// Set max interval if maxDelay is provided\n\t\t\t// The original condition incorrectly depended on 'delay' being non-null\n\t\t\t// and used a potentially confusing comparison 'maxDelay > delay'.\n\t\t\t// Setting maxInterval should just depend on whether maxDelay was provided.\n\t\t\t// The policy itself enforces maxInterval >= initialInterval.\n\t\t\tif (this.maxDelay != null) {\n\t\t\t\tpolicy.setMaxInterval(this.maxDelay);\n\t\t\t}\n\t\t\t// Set max interval supplier if provided\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxIntervalSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\t// Set sleeper if provided\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\n\t\t// Check for Uniform Random BackOff criteria (only if not Exponential)\n\t\t// Requires both min (delay) and max (maxDelay) periods, with max > min.\n\t\tif (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\t\t// Set min backoff period (from delay)\n\t\t\t// Note: Redundant null checks for delay/maxDelay within this block,\n\t\t\t// as they are already checked in the outer 'if', but harmless.\n\t\t\tif (this.delay != null) {\n\t\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t\t}\n\t\t\t// Set min backoff period supplier\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\t// Set max backoff period (from maxDelay)\n\t\t\tif (this.maxDelay != null) {\n\t\t\t\tpolicy.setMaxBackOffPeriod(this.maxDelay);\n\t\t\t}\n\t\t\t// Set max backoff period supplier\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\t// Set sleeper if provided\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\n\t\t// Default to Fixed BackOff if neither Exponential nor Uniform Random criteria are met\n\t\tFixedBackOffPolicy policy = new FixedBackOffPolicy();\n\t\t// Set backoff period if delay is provided\n\t\tif (this.delay != null) {\n\t\t\tpolicy.setBackOffPeriod(this.delay);\n\t\t}\n\t\t// Note: FixedBackOffPolicy doesn't seem to support a supplier for the backoff period.\n\t\t// If delaySupplier is set but delay is not, it won't be used here.\n\n\t\t// Set sleeper if provided\n\t\tif (this.sleeper != null) {\n\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t}\n\t\treturn policy;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}