{
    "generation": "\t/**\n\t * Builds the {@link BackOffPolicy} with the given parameters.\n\t * @return the {@link BackOffPolicy} instance\n\t */\n\tpublic BackOffPolicy build() {\n\t\t// Prioritize random back-off policies if random is explicitly true.\n\t\tif (Boolean.TRUE.equals(this.random)) {\n\t\t\t// Exponential Random BackOff Policy if a multiplier is defined.\n\t\t\t// Multiplier must be >= 1.0 as per ExponentialBackOffPolicy contract.\n\t\t\tif ((this.multiplier != null && this.multiplier >= 1.0) || this.multiplierSupplier != null) {\n\t\t\t\tExponentialRandomBackOffPolicy policy = new ExponentialRandomBackOffPolicy();\n\t\t\t\tif (this.delay != null) {\n\t\t\t\t\tpolicy.setInitialInterval(this.delay);\n\t\t\t\t}\n\t\t\t\tif (this.delaySupplier != null) {\n\t\t\t\t\tpolicy.initialIntervalSupplier(this.delaySupplier);\n\t\t\t\t}\n\t\t\t\tif (this.multiplier != null) {\n\t\t\t\t\tpolicy.setMultiplier(this.multiplier);\n\t\t\t\t}\n\t\t\t\tif (this.multiplierSupplier != null) {\n\t\t\t\t\tpolicy.multiplierSupplier(this.multiplierSupplier);\n\t\t\t\t}\n\t\t\t\tif (this.maxDelay != null) {\n\t\t\t\t\t// Apply maxInterval, ensuring it's not less than initial if delay is set.\n\t\t\t\t\t// If maxDelay is 0 and delay is positive, it uses DEFAULT_MAX_INTERVAL.\n\t\t\t\t\tif (this.delay != null) {\n\t\t\t\t\t\tpolicy.setMaxInterval(\n\t\t\t\t\t\t\t\tthis.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpolicy.setMaxInterval(this.maxDelay);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\t\tpolicy.maxIntervalSupplier(this.maxDelaySupplier);\n\t\t\t\t}\n\t\t\t\tif (this.sleeper != null) {\n\t\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t\t}\n\t\t\t\treturn policy;\n\t\t\t}\n\t\t\t// Uniform Random BackOff Policy if a min/max range is explicitly defined (maxDelay > delay).\n\t\t\t// This path is taken only if no multiplier was specified.\n\t\t\telse if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n\t\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\t\t\t// The null checks for delay and maxDelay are redundant here due to the outer condition.\n\t\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t\t\tif (this.delaySupplier != null) {\n\t\t\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t\t\t}\n\t\t\t\tpolicy.setMaxBackOffPeriod(this.maxDelay);\n\t\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\t\tpolicy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n\t\t\t\t}\n\t\t\t\tif (this.sleeper != null) {\n\t\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t\t}\n\t\t\t\treturn policy;\n\t\t\t}\n\t\t\t// If 'random' is true but no multiplier and no valid max > delay range,\n\t\t\t// default to UniformRandomBackOffPolicy with fixed min/max (set to delay).\n\t\t\t// FixedBackOffPolicy is not compatible with 'random' flag.\n\t\t\telse {\n\t\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\t\t\tif (this.delay != null) {\n\t\t\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t\t\t\tpolicy.setMaxBackOffPeriod(this.delay); // For fixed random behavior\n\t\t\t\t} else if (this.delaySupplier != null) {\n\t\t\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t\t\t\tpolicy.maxBackOffPeriodSupplier(this.delaySupplier); // For fixed random behavior\n\t\t\t\t}\n\t\t\t\t// If no delay or delaySupplier, UniformRandomBackOffPolicy uses its own defaults (1000L).\n\t\t\t\tif (this.sleeper != null) {\n\t\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t\t}\n\t\t\t\treturn policy;\n\t\t\t}\n\t\t}\n\n\t\t// Non-random policy selection (or if random was false/null, or if random was true but didn't match above)\n\t\t// Exponential BackOff Policy if a multiplier is defined.\n\t\t// Multiplier must be >= 1.0 as per ExponentialBackOffPolicy contract.\n\t\tif ((this.multiplier != null && this.multiplier >= 1.0) || this.multiplierSupplier != null) {\n\t\t\tExponentialBackOffPolicy policy = new ExponentialBackOffPolicy();\n\t\t\tif (this.delay != null) {\n\t\t\t\tpolicy.setInitialInterval(this.delay);\n\t\t\t}\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.initialIntervalSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\tif (this.multiplier != null) {\n\t\t\t\tpolicy.setMultiplier(this.multiplier);\n\t\t\t}\n\t\t\tif (this.multiplierSupplier != null) {\n\t\t\t\tpolicy.multiplierSupplier(this.multiplierSupplier);\n\t\t\t}\n\t\t\tif (this.maxDelay != null) {\n\t\t\t\tif (this.delay != null) {\n\t\t\t\t\tpolicy.setMaxInterval(\n\t\t\t\t\t\t\tthis.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n\t\t\t\t} else {\n\t\t\t\t\tpolicy.setMaxInterval(this.maxDelay);\n\t\t\t\t}\n\t\t\t} else if (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxIntervalSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\t\t// Uniform Random BackOff Policy if a min/max range is explicitly defined (maxDelay > delay).\n\t\t// This branch is only taken if no multiplier was specified.\n\t\tif (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\tpolicy.setMaxBackOffPeriod(this.maxDelay);\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\n\t\t// Default fallback: Fixed BackOff Policy.\n\t\t// This is chosen if no multiplier is set and no valid min/max range for uniform random is specified.\n\t\tFixedBackOffPolicy policy = new FixedBackOffPolicy();\n\t\tif (this.delay != null) {\n\t\t\tpolicy.setBackOffPeriod(this.delay);\n\t\t}\n\t\tif (this.sleeper != null) {\n\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t}\n\t\treturn policy;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}