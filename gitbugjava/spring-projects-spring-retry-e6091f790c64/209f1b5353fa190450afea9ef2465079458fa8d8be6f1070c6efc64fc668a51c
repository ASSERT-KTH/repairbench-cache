{
    "generation": "@Override\npublic BackOffPolicy build() {\n    // Determine which back\u2011off settings have been supplied\n    boolean hasDelayValue = (this.delay != null);\n    boolean hasDelaySupplier = (this.delaySupplier != null);\n    boolean hasMultiplierValue = (this.multiplier != null && this.multiplier > 0);\n    boolean hasMultiplierSupplier = (this.multiplierSupplier != null);\n    boolean hasMaxDelayValue = (this.maxDelay != null);\n    boolean hasMaxDelaySupplier = (this.maxDelaySupplier != null);\n\n    // 1) Exponential back\u2011off if a multiplier was provided\n    if (hasMultiplierValue || hasMultiplierSupplier) {\n        ExponentialBackOffPolicy policy = Boolean.TRUE.equals(this.random)\n                ? new ExponentialRandomBackOffPolicy()\n                : new ExponentialBackOffPolicy();\n\n        // Initial interval\n        if (hasDelaySupplier) {\n            policy.initialIntervalSupplier(this.delaySupplier);\n        }\n        else if (hasDelayValue) {\n            policy.setInitialInterval(this.delay);\n        }\n\n        // Multiplier\n        if (hasMultiplierSupplier) {\n            policy.multiplierSupplier(this.multiplierSupplier);\n        }\n        else {\n            policy.setMultiplier(this.multiplier);\n        }\n\n        // Max interval\n        if (hasMaxDelaySupplier) {\n            policy.maxIntervalSupplier(this.maxDelaySupplier);\n        }\n        else if (hasMaxDelayValue) {\n            policy.setMaxInterval(this.maxDelay);\n        }\n\n        // Sleeper\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n\n    // 2) Uniform random back\u2011off if only max\u2011delay was provided\n    if (hasMaxDelayValue || hasMaxDelaySupplier) {\n        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\n        // Min back\u2011off period\n        if (hasDelaySupplier) {\n            policy.minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        else if (hasDelayValue) {\n            policy.setMinBackOffPeriod(this.delay);\n        }\n\n        // Max back\u2011off period\n        if (hasMaxDelaySupplier) {\n            policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n        else {\n            policy.setMaxBackOffPeriod(this.maxDelay);\n        }\n\n        // Sleeper\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n\n    // 3) Fixed back\u2011off otherwise\n    FixedBackOffPolicy policy = new FixedBackOffPolicy();\n    if (hasDelayValue) {\n        policy.setBackOffPeriod(this.delay);\n    }\n    if (this.sleeper != null) {\n        policy.setSleeper(this.sleeper);\n    }\n    return policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}