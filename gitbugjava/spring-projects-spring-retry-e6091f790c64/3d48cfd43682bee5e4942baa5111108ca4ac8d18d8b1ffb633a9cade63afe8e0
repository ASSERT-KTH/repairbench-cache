{
    "generation": "public BackOffPolicy build() {\n    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {\n        ExponentialBackOffPolicy policy = Boolean.TRUE.equals(this.random)\n                ? new ExponentialRandomBackOffPolicy()\n                : new ExponentialBackOffPolicy();\n        if (this.delay != null) {\n            policy.setInitialInterval(this.delay);\n        }\n        if (this.delaySupplier != null) {\n            policy.initialIntervalSupplier(this.delaySupplier);\n        }\n        if (this.multiplier != null) {\n            policy.setMultiplier(this.multiplier);\n        }\n        if (this.multiplierSupplier != null) {\n            policy.multiplierSupplier(this.multiplierSupplier);\n        }\n        if (this.maxDelay != null) {\n            // If a delay value is available, ensure maxDelay is greater than it;\n            // otherwise fall back to the policy\u2019s default max interval.\n            if (this.delay != null && this.maxDelay <= this.delay) {\n                policy.setMaxInterval(ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n            }\n            else {\n                policy.setMaxInterval(this.maxDelay);\n            }\n        }\n        if (this.maxDelaySupplier != null) {\n            policy.maxIntervalSupplier(this.maxDelaySupplier);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n        policy.setMinBackOffPeriod(this.delay);\n        if (this.delaySupplier != null) {\n            policy.minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        policy.setMaxBackOffPeriod(this.maxDelay);\n        if (this.maxDelaySupplier != null) {\n            policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    FixedBackOffPolicy policy = new FixedBackOffPolicy();\n    if (this.delay != null) {\n        policy.setBackOffPeriod(this.delay);\n    }\n    if (this.sleeper != null) {\n        policy.setSleeper(this.sleeper);\n    }\n    return policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}