{
    "generation": "public BackOffPolicy build() {\n    // Exponential back off if a multiplier or multiplier-supplier is provided\n    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {\n        ExponentialBackOffPolicy policy =\n                Boolean.TRUE.equals(this.random) ? new ExponentialRandomBackOffPolicy() : new ExponentialBackOffPolicy();\n        // initial interval (literal or expression)\n        if (this.delaySupplier != null) {\n            long initial = this.delaySupplier.get();\n            policy.setInitialInterval(initial);\n            policy.initialIntervalSupplier(this.delaySupplier);\n        }\n        else if (this.delay != null) {\n            policy.setInitialInterval(this.delay);\n        }\n        // multiplier (literal or expression)\n        if (this.multiplierSupplier != null) {\n            double mult = this.multiplierSupplier.get();\n            policy.setMultiplier(mult);\n            policy.multiplierSupplier(this.multiplierSupplier);\n        }\n        else if (this.multiplier != null) {\n            policy.setMultiplier(this.multiplier);\n        }\n        // max interval (literal or expression)\n        if (this.maxDelaySupplier != null) {\n            long max = this.maxDelaySupplier.get();\n            policy.setMaxInterval(max);\n            policy.maxIntervalSupplier(this.maxDelaySupplier);\n        }\n        else if (this.maxDelay != null) {\n            long initial = policy.getInitialInterval();\n            if (this.maxDelay > initial) {\n                policy.setMaxInterval(this.maxDelay);\n            }\n            else {\n                policy.setMaxInterval(ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n            }\n        }\n        // custom sleeper\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n\n    // Uniform random back off if only delay & maxDelay are provided and maxDelay > delay\n    if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n        if (this.delaySupplier != null) {\n            long min = this.delaySupplier.get();\n            policy.setMinBackOffPeriod(min);\n            policy.minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        else {\n            policy.setMinBackOffPeriod(this.delay);\n        }\n        if (this.maxDelaySupplier != null) {\n            long max = this.maxDelaySupplier.get();\n            policy.setMaxBackOffPeriod(max);\n            policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n        else {\n            policy.setMaxBackOffPeriod(this.maxDelay);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n\n    // Fixed back off as default\n    FixedBackOffPolicy policy = new FixedBackOffPolicy();\n    if (this.delay != null) {\n        policy.setBackOffPeriod(this.delay);\n    }\n    if (this.sleeper != null) {\n        policy.setSleeper(this.sleeper);\n    }\n    return policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}