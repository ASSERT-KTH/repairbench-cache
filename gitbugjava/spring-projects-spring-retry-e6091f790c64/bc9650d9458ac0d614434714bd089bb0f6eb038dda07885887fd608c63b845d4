{
    "generation": "public BackOffPolicy build() {\n    if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {\n        boolean isRandom = Boolean.TRUE.equals(this.random);\n        // Ensure exponentialRandom is used if any suppliers are present\n        if (this.delaySupplier != null || this.multiplierSupplier != null || this.maxDelaySupplier != null) {\n            isRandom = true;\n        }\n        ExponentialBackOffPolicy policy;\n        if (isRandom) {\n            policy = new ExponentialRandomBackOffPolicy();\n        } else {\n            policy = new ExponentialBackOffPolicy();\n        }\n\n        if (this.delay != null) {\n            policy.setInitialInterval(this.delay);\n        }\n        if (this.delaySupplier != null) {\n            policy.initialIntervalSupplier(this.delaySupplier);\n        }\n\n        if (this.multiplier != null) {\n            policy.setMultiplier(this.multiplier);\n        }\n        if (this.multiplierSupplier != null) {\n            policy.multiplierSupplier(this.multiplierSupplier);\n        }\n\n        if (this.maxDelay != null && this.delay != null) {\n            policy.setMaxInterval(\n                    this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n        }\n        if (this.maxDelaySupplier != null) {\n            policy.maxIntervalSupplier(this.maxDelaySupplier);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n        if (this.delay != null) {\n            policy.setMinBackOffPeriod(this.delay);\n        }\n        if (this.delaySupplier != null) {\n            policy.minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        if (this.maxDelay != null) {\n            policy.setMaxBackOffPeriod(this.maxDelay);\n        }\n        if (this.maxDelaySupplier != null) {\n            policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    FixedBackOffPolicy policy = new FixedBackOffPolicy();\n    if (this.delay != null) {\n        policy.setBackOffPeriod(this.delay);\n    }\n    if (this.sleeper != null) {\n        policy.setSleeper(this.sleeper);\n    }\n    return policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}