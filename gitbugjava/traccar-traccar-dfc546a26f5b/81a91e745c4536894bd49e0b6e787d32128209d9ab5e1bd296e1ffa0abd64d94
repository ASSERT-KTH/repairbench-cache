{
    "generation": "import io.netty.buffer.ByteBuf;\nimport io.netty.channel.Channel;\nimport java.net.SocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.traccar.BaseProtocolDecoder;\nimport org.traccar.DeviceSession;\nimport org.traccar.Protocol;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.Position;\n\n// Add dummy classes and interfaces required for compilation if they are not present\n// This is just for making the code snippet compilable in isolation\ninterface Channel {\n}\ninterface SocketAddress {\n}\ninterface ByteBuf {\n    int readerIndex();\n    int writerIndex();\n    int indexOf(int readerIndex, int writerIndex, byte value);\n    ByteBuf readerIndex(int index);\n    ByteBuf readSlice(int length);\n    String toString(java.nio.charset.Charset charset);\n    ByteBuf skipBytes(int length);\n    long readUnsignedIntLE();\n    int readUnsignedShortLE();\n    short readShortLE();\n    int readIntLE();\n    int readUnsignedByte();\n    int getUnsignedByte(int index);\n    int readUnsignedShort();\n}\nclass BaseProtocolDecoder {\n     public BaseProtocolDecoder(Protocol protocol) {}\n     protected String getProtocolName() { return \"meitrack\"; }\n     protected DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) { return new DeviceSession(0); }\n}\nclass Protocol {}\nclass Position {\n    public static final String KEY_EVENT = \"event\";\n    public static final String KEY_SATELLITES = \"sat\";\n    public static final String KEY_RSSI = \"rssi\";\n    public static final String KEY_OUTPUT = \"output\";\n    public static final String KEY_INPUT = \"input\";\n    public static final String KEY_LOCK = \"lock\";\n    public static final String KEY_THROTTLE = \"throttle\";\n    public static final String KEY_FUEL_LEVEL = \"fuelLevel\";\n    public static final String KEY_BATTERY_LEVEL = \"batteryLevel\";\n    public static final String KEY_HDOP = \"hdop\";\n    public static final String KEY_BATTERY = \"battery\";\n    public static final String KEY_POWER = \"power\";\n    public static final String KEY_OBD_SPEED = \"obdSpeed\";\n    public static final String KEY_FUEL_USED = \"fuelUsed\";\n    public static final String KEY_RPM = \"rpm\";\n    public static final String KEY_COOLANT_TEMP = \"coolantTemp\";\n    public static final String KEY_FUEL_CONSUMPTION = \"fuelConsumption\";\n    public static final String KEY_ODOMETER = \"odometer\";\n    public static final String KEY_DRIVER_UNIQUE_ID = \"driverUniqueId\";\n    public static final String PREFIX_ADC = \"adc\";\n    public static final String PREFIX_TEMP = \"temp\";\n\n    public Position(String protocol) {}\n    public void setDeviceId(long id) {}\n    public void set(String key, Object value) {}\n    public void setValid(boolean valid) {}\n    public void setSpeed(double speed) {}\n    public void setCourse(double course) {}\n    public void setAltitude(double altitude) {}\n    public void setLatitude(double lat) {}\n    public void setLongitude(double lon) {}\n    public void setTime(Date time) {}\n}\nclass DeviceSession {\n    public DeviceSession(long deviceId) { this.deviceId = deviceId; }\n    private long deviceId;\n    public long getDeviceId() { return deviceId; }\n}\nclass UnitsConverter {\n    public static double knotsFromKph(double kph) { return kph / 1.852; }\n}\n\n\npublic class MeitrackProtocolDecoderFixed extends BaseProtocolDecoder {\n\n    public MeitrackProtocolDecoderFixed(Protocol protocol) {\n        super(protocol);\n    }\n\n    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        if (length >= 3) { // label (1) + value (2)\n                            buf.readUnsignedByte(); // label\n                            position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                            buf.skipBytes(length - 3); // Skip remaining bytes if any\n                        } else {\n                            buf.skipBytes(length); // Skip if length is incorrect\n                        }\n                        break;\n                    case 0xFE31:\n                        if (length >= 2) { // alarm protocol (1) + alarm type (1)\n                            buf.readUnsignedByte(); // alarm protocol\n                            buf.readUnsignedByte(); // alarm type\n                            buf.skipBytes(length - 2); // Skip remaining bytes if any\n                        } else {\n                            buf.skipBytes(length); // Skip if length is incorrect\n                        }\n                        break;\n                    case 0xFEA8: // Handle potential battery level parameter found in test data\n                        if (length >= 2) {\n                            buf.readUnsignedByte(); // Skip first byte (e.g., type 0x02)\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // Read second byte (0x4d = 77)\n                            buf.skipBytes(length - 2); // Skip remaining bytes if any\n                        } else {\n                           buf.skipBytes(length); // Skip if length < 2\n                        }\n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n\n            positions.add(position);\n        }\n\n        return positions;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}