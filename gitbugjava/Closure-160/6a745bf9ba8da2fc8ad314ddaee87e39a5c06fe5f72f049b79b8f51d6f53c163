{
    "generation": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is disabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    // Add the guard specified by the options (e.g., from --jscomp_error flags)\n    WarningsGuard optionsGuard = options.getWarningsGuard();\n    guards.add(optionsGuard);\n\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If checkSymbols is off\n    // (e.g. due to --warning_level=QUIET), we disable the checkVariables\n    // warnings, UNLESS the user explicitly overrides the error level for\n    // that group via flags.\n    DiagnosticGroup checkVariablesGroup = DiagnosticGroups.CHECK_VARIABLES;\n    boolean checkVarsExplicitlySet = false;\n    // Check if optionsGuard explicitly sets a level for the CHECK_VARIABLES group.\n    if (checkVariablesGroup != null && !checkVariablesGroup.getErrors().isEmpty()) {\n      // Create a dummy JSError; only its type (and thus group) matters for level checking.\n      DiagnosticType representativeError = checkVariablesGroup.getErrors().iterator().next();\n      JSError dummyError = JSError.make(representativeError);\n      if (optionsGuard.level(dummyError) != null) {\n        // A non-null level indicates the user explicitly set the level for this group.\n        checkVarsExplicitlySet = true;\n      }\n    }\n\n    // If checkSymbols is disabled (e.g., by QUIET level) AND the user hasn't\n    // explicitly set a level for CHECK_VARIABLES, then add a guard to disable it.\n    if (!options.checkSymbols && !checkVarsExplicitlySet) {\n      if (checkVariablesGroup != null) { // Ensure group is valid before using\n          guards.add(new DiagnosticGroupWarningsGuard(\n              checkVariablesGroup, CheckLevel.OFF));\n      }\n    }\n\n    // Compose the final warnings guard. The order ensures that explicit settings\n    // in optionsGuard are consulted, and the checkSymbols guard is added only if needed.\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}