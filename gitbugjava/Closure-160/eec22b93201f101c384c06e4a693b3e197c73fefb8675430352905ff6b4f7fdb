{
    "generation": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is disabled, then turn off the\n      // parser type warnings. Note that this is different from the\n      // logic above, because the default is STANDARD WARNINGS, not\n      // OFF.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    // Add the user-specified guards first.\n    guards.add(options.getWarningsGuard());\n\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If checkSymbols is disabled,\n    // we may need to disable the checkVariables warnings explicitly,\n    // but only if the user hasn't already explicitly enabled them.\n    boolean checkVariablesExplicitlyEnabled =\n        options.jscompError.containsKey(DiagnosticGroups.CHECK_VARIABLES) ||\n        options.jscompWarning.containsKey(DiagnosticGroups.CHECK_VARIABLES);\n\n    // If checkSymbols is off AND the user hasn't explicitly enabled\n    // CHECK_VARIABLES warnings/errors, add a guard to turn them off.\n    // This ensures VarCheck runs for synthesis but respects user's choice\n    // on whether to see the warnings/errors. This guard is added AFTER\n    // the user's guards, so it takes precedence in ComposeWarningsGuard\n    // if added.\n    if (!options.checkSymbols && !checkVariablesExplicitlyEnabled) {\n        // Check if the warning level implicitly enables check variables.\n        // If the effective level from user guards is OFF, then we don't need\n        // to add our suppressing guard. However, checking effective level is hard.\n        // Instead, we rely on the fact that if checkSymbols is false, the default\n        // behavior should be to suppress checkVariable warnings unless explicitly enabled.\n        // The logic above handles the explicit enablement case. So, if not explicitly\n        // enabled, and checkSymbols is false, suppress it.\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}