{
    "generation": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n\n    // 1. Suppress specific warnings like DocWarnings (lowest precedence).\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n\n    // 2. Guard based on options (--warning_level, --jscomp_error, etc.).\n    // This guard should reflect the configuration explicitly set by the user.\n    WarningsGuard optionsGuard = options.getWarningsGuard();\n    guards.add(optionsGuard);\n\n\n    // 3. Override based on checkSymbols (highest precedence).\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If checkSymbols is off,\n    // we disable CHECK_VARIABLES warnings, *unless* the user explicitly\n    // enabled them via options (e.g., --jscomp_error=checkVars).\n    if (!options.checkSymbols &&\n        !optionsGuard.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      // If checkSymbols is off AND CHECK_VARIABLES is not already enabled by options,\n      // add a guard to turn CHECK_VARIABLES off. This guard will be checked first\n      // by ComposeWarningsGuard due to being added last to the list, effectively\n      // giving it the highest precedence among these standard guards.\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    // Compose the guards. Guards added later in the list have higher precedence\n    // when ComposeWarningsGuard evaluates levels.\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}