{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n\n        // Calculate the starting index\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            // start is not in the series, find the insertion point\n            startIndex = -(startIndex + 1);\n            // The insertion point is the index of the first item >= start\n        }\n\n        // Calculate the ending index\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {\n            // end is not in the series, find the insertion point\n            endIndex = -(endIndex + 1);\n            // The insertion point is the index of the first item > end\n            endIndex = endIndex - 1;\n            // So this is the index of the last item <= end\n        }\n\n        // Check for cases where the resulting range is empty\n        // 1. startIndex is past the end of the data\n        // 2. endIndex is before the start of the data\n        // 3. calculated startIndex is greater than calculated endIndex\n        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {\n            // Create an empty copy\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList();\n            return copy;\n        }\n        else {\n            // The range [startIndex, endIndex] is valid and non-empty\n            return createCopy(startIndex, endIndex);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}