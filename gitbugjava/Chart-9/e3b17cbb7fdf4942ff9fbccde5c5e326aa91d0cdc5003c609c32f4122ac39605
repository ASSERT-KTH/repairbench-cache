{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n        boolean emptyRange = false;\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1); // Calculate insertion point\n            // If the insertion point is the size of the list, the start period\n            // is after all the existing data points.\n            if (startIndex == this.data.size()) {\n                emptyRange = true;  // start is after last data item\n            }\n        }\n\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {             // end period is not in original series\n            endIndex = -(endIndex + 1); // this is insertion point for end\n            endIndex = endIndex - 1;    // so this is last item index <= end\n        }\n        \n        // Check if the calculated end index is negative. This happens if the\n        // 'end' period is before the first data item in the series.\n        if (endIndex < 0) {\n            emptyRange = true;\n        }\n\n        // After calculating both indices, check if the start index is actually\n        // after the end index. This can happen if the specified range falls\n        // entirely between two existing data points. It also covers the case\n        // where 'end' is before the first item (endIndex becomes -1), although\n        // that is already explicitly handled above.\n        // We only perform this check if we haven't already determined the range is empty.\n        if (!emptyRange && startIndex > endIndex) {\n             emptyRange = true;\n        }\n\n\n        if (emptyRange) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            // Ensure the list of data items is empty\n            copy.data = new java.util.ArrayList();\n            return copy;\n        }\n        else {\n            // If we get here, we know that 0 <= startIndex <= endIndex < data.size()\n            // (or potentially startIndex = endIndex = 0 if there's only one item\n            // and it falls within the range).\n            return createCopy(startIndex, endIndex);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}