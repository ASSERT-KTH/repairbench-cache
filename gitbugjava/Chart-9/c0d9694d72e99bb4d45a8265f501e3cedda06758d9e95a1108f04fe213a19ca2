{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the first time period to copy (<code>null</code> not\n     *         permitted).\n     * @param end  the last time period to copy (<code>null</code> not\n     *         permitted).\n     *\n     * @return A time series containing a copy of this time series from start\n     *         until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n        boolean emptyRange = false;\n        int startIndex = getIndex(start);\n        // startIndex is the index of the item matching start, or -(insertionPoint + 1)\n        if (startIndex < 0) {\n            // start is not in the series, find the insertion point\n            startIndex = -(startIndex + 1);\n            // start index is now the index of the first item >= start period\n            if (startIndex == this.data.size()) {\n                // start is after the last item in the series\n                emptyRange = true;\n            }\n        }\n        // startIndex is now the index of the first item >= start period, or data.size()\n\n        int endIndex = getIndex(end);\n        // endIndex is the index of the item matching end, or -(insertionPoint + 1)\n        if (endIndex < 0) {\n            // end is not in the series, find the insertion point\n            endIndex = -(endIndex + 1);\n            // endIndex is now the index of the first item strictly > end period\n            endIndex = endIndex - 1;\n            // endIndex is now the index of the last item <= end period\n        }\n        // endIndex is now the index of the last item <= end period. Can be -1 if end is before first item.\n\n        if (endIndex < 0) {\n            // end period is before the first item in the series\n            emptyRange = true;\n        }\n\n        // Check if the calculated indices result in an empty range\n        // This can happen if startIndex points after endIndex\n        // (e.g., the interval [start, end] falls between two data points)\n        if (!emptyRange && startIndex > endIndex) {\n             emptyRange = true;\n        }\n\n        if (emptyRange) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList();\n            return copy;\n        }\n        else {\n            // Given the checks above, we should have 0 <= startIndex <= endIndex < data.size()\n            return createCopy(startIndex, endIndex);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}