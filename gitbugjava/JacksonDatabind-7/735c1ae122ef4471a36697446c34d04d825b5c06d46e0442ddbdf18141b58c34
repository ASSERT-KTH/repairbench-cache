{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        JsonToken t = jp.currentToken();\n\n        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n         *    to assume one did exist.\n         */\n        if (t == JsonToken.FIELD_NAME) {\n            // First: can't move, must copy current FIELD_NAME and value\n            writeStartObject(); // \"virtual\" start marker\n            do {\n                copyCurrentStructure(jp);\n            } while ((t = jp.nextToken()) == JsonToken.FIELD_NAME);\n\n            // Loop ended, should find END_OBJECT?\n            if (t != JsonToken.END_OBJECT) {\n                 // [databind#881] Verify we have the expected END_OBJECT\n                 // 11-Jun-2015, tatu: Should perhaps report proper error dependency... for now, fine?\n                 ctxt.reportWrongTokenException(TokenBuffer.class, JsonToken.END_OBJECT,\n                         \"Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got \"+t);\n                 // but should not proceed further, so either throw or:\n                 // return this; // (probably need to add error marker of some sort)\n            }\n             // important: need matching end marker\n             writeEndObject();\n        } else { // START_OBJECT, START_ARRAY, scalar\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}