{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     *\n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n         *    to assume one did exist.\n         */\n        // 01-Aug-2018, tatu: As per [databind#2079], structure may be deeper than just\n        //    object contents, that is, FIELD_NAME may be followed by START_OBJECT etc.\n        //    Need to use `copyCurrentStructure()`.\n\n        JsonToken t = jp.getCurrentToken(); // Check the current token\n\n        // If the parser is pointing to a FIELD_NAME, it means we are inside an object,\n        // but the START_OBJECT was consumed before buffering started (e.g., by a delegating creator).\n        // We need to manually add the START_OBJECT to the buffer first.\n        if (t == JsonToken.FIELD_NAME) {\n            // First write the START_OBJECT token that was implicitly skipped\n            writeStartObject();\n            // Then, copy the rest of the structure, which will include the FIELD_NAME,\n            // its value, any subsequent field/value pairs, and the closing END_OBJECT.\n            copyCurrentStructure(jp);\n        } else {\n            // Otherwise (if starting with START_OBJECT, START_ARRAY, a scalar value, or null),\n            // just copy the structure directly.\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}