{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        // Need to check the initial token\n        JsonToken t = jp.currentToken();\n        // sanity check; shouldn't occur but better safe than sorry\n        if (t == null) {\n            t = jp.nextToken();\n            if (t == null) { // empty input?\n                return this;\n            }\n        }\n\n        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n         *    to assume one did exist.\n         */\n        if (t == JsonToken.FIELD_NAME) {\n            // If starting with field name, write synthesized START_OBJECT\n            writeStartObject();\n            // Need to copy current structure (field name + value)\n            // and then loop for any more fields\n            do {\n                // NOTE: copyCurrentStructure auto-advances past current FIELD_NAME or START_OBJECT/ARRAY\n                //       so we don't need explicit call to jp.nextToken() here\n                 copyCurrentStructure(jp);\n                 // After copyCurrentStructure, jp points to the token AFTER the copied value.\n                 // This token should be the next FIELD_NAME or END_OBJECT.\n                 t = jp.nextToken(); // Advance to check if the next token is a FIELD_NAME\n            } while (t == JsonToken.FIELD_NAME);\n\n            // After the loop, we must find an END_OBJECT\n            if (t != JsonToken.END_OBJECT) {\n                // If not, it's an error state\n                throw ctxt.mappingException(\"Expected END_OBJECT after copying fields for \"+getClass().getName()+\", found \"+t);\n            }\n            // and write the closing END_OBJECT\n            writeEndObject();\n        } else {\n            // Otherwise, just copy the current thing\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}