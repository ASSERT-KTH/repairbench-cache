{
    "generation": "    /** {@inheritDoc} */\n    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            // The reciprocal of 0 + 0i is defined as Complex Infinity.\n            // See testReciprocalZero().\n            return INF;\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        // Standard formula: 1 / (a + bi) = (a - bi) / (a^2 + b^2)\n        // To avoid overflow/underflow in computing a^2 + b^2, scale by the component with\n        // the largest absolute value.\n\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            // Scale by imaginary part\n            double q = real / imaginary; // q = a / b\n            // Denominator is (a*q + b) = (a*(a/b) + b) = (a^2/b + b) = (a^2 + b^2) / b\n            double scale = 1. / (real * q + imaginary);\n            // Real part = scale * q = (b / (a^2+b^2)) * (a/b) = a / (a^2+b^2)\n            // Imaginary part = -scale = -b / (a^2 + b^2)\n            return createComplex(scale * q, -scale);\n        } else {\n            // Scale by real part\n            double q = imaginary / real; // q = b / a\n            // Denominator is (b*q + a) = (b*(b/a) + a) = (b^2/a + a) = (b^2 + a^2) / a\n            double scale = 1. / (imaginary * q + real);\n            // Real part = scale = a / (a^2 + b^2)\n            // Imaginary part = -scale * q = -(a / (a^2+b^2)) * (b/a) = -b / (a^2 + b^2)\n            return createComplex(scale, -scale * q);\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}