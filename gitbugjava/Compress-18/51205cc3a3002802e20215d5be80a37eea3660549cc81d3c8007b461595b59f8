{
    "generation": "    /**\n     * Writes a PAX extended header with the given map as contents.\n     * @since 1.4\n     */\n    void writePaxHeaders(String entryName,\n                         Map<String, String> headers) throws IOException {\n        // PAX header names are formatted as ./PaxHeaders.X/<filename>\n        // where <filename> is a version of the original filename stripped of\n        // any non-7bit ASCII characters. It should not end in \"/\".\n        String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n        // Ensure the name doesn't end with a slash, as PAX header entries are\n        // regular files, not directories. This can happen if the original\n        // entryName was a directory.\n        if (name.endsWith(\"/\")) {\n            name = name.substring(0, name.length() - 1);\n        }\n\n        // Ensure the name fits within the TAR header limits.\n        // Truncate from the end if necessary.\n        if (name.length() >= TarConstants.NAMELEN) {\n            name = name.substring(0, TarConstants.NAMELEN - 1);\n        }\n        // It's unlikely, but truncation might leave a trailing slash. Remove it if present.\n        if (name.endsWith(\"/\")) {\n             name = name.substring(0, name.length() - 1);\n        }\n\n        // Create the TarArchiveEntry for the PAX header.\n        // Using the specific type 'x' for PAX headers.\n        TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n        // Use a StringWriter to build the PAX header content.\n        StringWriter w = new StringWriter();\n        // Iterate through the headers map to format each entry according to PAX standard.\n        for (Map.Entry<String, String> h : headers.entrySet()) {\n            String key = h.getKey();\n            String value = h.getValue();\n            // Calculate the initial guess for the length of the entry line.\n            // Format: <length> <key>=<value>\\n\n            // The length field specifies the total number of bytes in the line,\n            // including the length field itself, the space, key, '=', value, and newline.\n            int len = key.length() + value.length()\n                + 3 /* space, equals and newline */\n                + 2 /* initial guess for the length field itself (e.g., \"99\") */;\n            String line = len + \" \" + key + \"=\" + value + \"\\n\";\n            // Calculate the actual byte length using UTF-8 encoding.\n            int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            // Loop until the calculated length ('len') matches the actual byte length.\n            // This handles cases where the number of digits in the length field changes,\n            // or when UTF-8 encoding results in a byte length different from the char length.\n            while (len != actualLength) {\n                // Update the length field value based on the previous calculation.\n                len = actualLength;\n                // Re-create the line with the updated length.\n                line = len + \" \" + key + \"=\" + value + \"\\n\";\n                // Recalculate the actual byte length.\n                actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            }\n            // Write the correctly formatted PAX header line.\n            w.write(line);\n        }\n        // Get the complete PAX header content as UTF-8 bytes.\n        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n        // Set the size of the PAX header entry. This is crucial.\n        pex.setSize(data.length);\n        // Write the TAR header for the PAX entry to the output stream.\n        putArchiveEntry(pex);\n        // Write the actual PAX header data.\n        write(data);\n        // Close the PAX header entry.\n        closeArchiveEntry();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}