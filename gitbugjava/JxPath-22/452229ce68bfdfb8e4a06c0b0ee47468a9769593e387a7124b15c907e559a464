{
    "generation": "    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            // Handle empty document or document with no root element\n            if (node == null) {\n                return null;\n            }\n        }\n\n        // Namespace URIs are primarily relevant for elements in JXPath context.\n        // Return null for node types that don't have a namespace URI in this way.\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            // Note: Attr nodes have namespaceURI in DOM Level 3, but this method's\n            // lookup logic is designed for resolving element namespaces.\n            return null;\n        }\n\n        Element element = (Element) node;\n\n        // Step 1: Use the standard DOM Level 3 method first.\n        String uri = element.getNamespaceURI();\n\n        // Step 2: If the standard method returns null, it might indicate the null\n        // namespace, or it could be due to an older/incomplete DOM implementation.\n        // Attempt a manual lookup for the namespace declaration attribute (xmlns:prefix or xmlns).\n        if (uri == null) {\n            // We need the prefix of the element to find the corresponding xmlns declaration.\n            // Assuming getPrefix helper handles potential nuances of Node.getPrefix().\n            String prefix = getPrefix(node);\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            Node aNode = node; // Start search from the element itself\n            while (aNode != null) {\n                // Look for the namespace declaration attribute only on ELEMENT nodes.\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        // Found the relevant xmlns attribute. Its value is the URI.\n                        uri = attr.getValue();\n                        // Declaration found, use the innermost one.\n                        break;\n                    }\n                }\n                // Move up to the parent node to check for inherited namespaces.\n                aNode = aNode.getParentNode();\n            }\n        }\n\n        // Step 3: Normalize the result. In DOM, an empty string \"\" URI typically\n        // signifies the null namespace (e.g., resulting from xmlns=\"\").\n        // JXPath's name tests for unqualified names operate in the null namespace,\n        // which it represents internally with null. Therefore, map \"\" to null.\n        if (uri != null && uri.length() == 0) {\n            return null;\n        }\n\n        // Return the resolved namespace URI. This can be null if the element\n        // genuinely belongs to the null namespace and no xmlns=\"\" was involved,\n        // or if a prefix was used but no corresponding xmlns:prefix declaration was found.\n        return uri;\n    }\n\n    // Assuming getPrefix is available in the same class or context.\n    // It should return the prefix of the node, or null if there is none.\n    // private static String getPrefix(Node node) { return node.getPrefix(); }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}