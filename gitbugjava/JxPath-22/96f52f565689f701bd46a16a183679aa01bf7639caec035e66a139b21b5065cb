{
    "generation": "    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            // Handle case where document might be empty\n            if (node == null) {\n                return null;\n            }\n        }\n\n        // Ensure node is an element before proceeding. Namespace URIs primarily apply to elements.\n        // Other node types (Text, Comment, PI) don't have namespace URIs in the same sense.\n        // Attributes have namespace URIs, but their lookup is different and typically handled\n        // by attribute-specific methods. Returning null for non-elements is safe here.\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return null;\n        }\n\n        Element element = (Element) node;\n\n        // Get the namespace URI assigned to the element when it was created (DOM Level 2+).\n        // This might be null for DOM Level 1 nodes or if created with a null URI.\n        String uri = element.getNamespaceURI();\n\n        // If the creation-time URI is null, we need to find the effective namespace\n        // by looking at xmlns attributes in the element's scope (ancestor-or-self).\n        if (uri == null) {\n            String prefix = getPrefix(node); // Determine the element's prefix (null if none)\n            // Determine the xmlns attribute name to search for based on the prefix\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            Node aNode = node; // Start search from the element itself upwards\n            while (aNode != null) {\n                // Only Elements can declare namespaces\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    // Check if the current element declares the namespace\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        // Found the relevant xmlns declaration\n                        String value = attr.getValue();\n                        // FIX: Handle xmlns=\"\" for the default namespace.\n                        // An empty value for the 'xmlns' attribute means the default namespace\n                        // is undeclared (elements without prefixes are in 'no namespace').\n                        // DOM Level 3's lookupNamespaceURI(null) returns null in this case.\n                        // We mimic that behavior by returning null instead of \"\".\n                        if (prefix == null && value.length() == 0) {\n                            return null;\n                        }\n                        // Return the declared namespace URI\n                        return value;\n                    }\n                }\n                // Move up to the parent node\n                aNode = aNode.getParentNode();\n            }\n            // If the loop completes, no declaration was found for the prefix (or default).\n            // This implies the prefix is unbound or it's an unprefixed element in 'no namespace'.\n            // In either scenario, the effective namespace URI is null.\n            return null;\n        }\n\n        // If element.getNamespaceURI() returned a non-null value, return it.\n        // This preserves the original behavior for DOM Level 2+ nodes created with an explicit namespace URI.\n        return uri;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}