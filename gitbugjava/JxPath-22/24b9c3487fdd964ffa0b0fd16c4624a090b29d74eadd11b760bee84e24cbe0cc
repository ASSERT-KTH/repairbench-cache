{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\n// Assume getPrefix(Node) is defined elsewhere in the original class or context\n// and correctly returns the prefix of the node (e.g., \"b\" for \"b:foo\") or null if no prefix.\n\n/**\n * Get the ns uri of the specified node. Correctly handles default namespaces\n * and resolves namespaces by searching ancestor nodes if necessary.\n * Maps the empty string namespace URI (from xmlns=\"\") to null, as per\n * XML Namespace specification requirements for \"no namespace\".\n *\n * @param node Node to check\n * @return String ns uri, or null if the node has no namespace.\n */\npublic static String getNamespaceURI(Node node) {\n    if (node == null) {\n         return null;\n    }\n\n    // If node is Document, check its document element instead\n    if (node.getNodeType() == Node.DOCUMENT_NODE) {\n        node = ((Document) node).getDocumentElement();\n        // If document has no root element, it has no namespace context\n        if (node == null) {\n            return null;\n        }\n    }\n\n    String uri = null;\n\n    // Handle Elements: Try direct URI retrieval first. If null, perform ancestor lookup.\n    if (node.getNodeType() == Node.ELEMENT_NODE) {\n        Element element = (Element) node;\n        // Use the standard DOM Level 2/3 method to get the namespace URI.\n        // This might be null if the DOM implementation is older, if the node\n        // was created using DOM Level 1 methods, or if it's in no namespace.\n        uri = element.getNamespaceURI();\n\n        // If the direct method returns null, we need to manually look up\n        // the namespace declaration (xmlns or xmlns:prefix) in the hierarchy.\n        if (uri == null) {\n            // Assuming getPrefix(Node) helper exists from the original context.\n            String prefix = getPrefix(node);\n            // Determine the attribute name to look for (xmlns for default, xmlns:prefix otherwise)\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            // Search the element itself and its ancestors for the declaration\n            Node ancestor = node;\n            while (ancestor != null && ancestor.getNodeType() == Node.ELEMENT_NODE) {\n                Element ancestorElement = (Element) ancestor;\n                Attr attr = ancestorElement.getAttributeNode(qname);\n                if (attr != null) {\n                    // Found the relevant namespace declaration attribute.\n                    uri = attr.getValue();\n                    // Stop searching, the closest declaration takes precedence.\n                    break;\n                }\n                // Move up to the parent node.\n                ancestor = ancestor.getParentNode();\n            }\n        }\n    } else {\n        // For non-element nodes (e.g., Attributes, Text, Comments, PIs),\n        // rely on the standard Node.getNamespaceURI().\n        // For attributes (Attr nodes), this returns the namespace URI based on the attribute's prefix.\n        // For most other node types, this correctly returns null.\n        uri = node.getNamespaceURI();\n    }\n\n    // Final correction based on XML Namespaces spec:\n    // An empty string URI, typically resulting from xmlns=\"\", signifies \"no namespace\".\n    // The standard representation for \"no namespace\" in APIs like DOM and JAXP is null.\n    if (\"\".equals(uri)) {\n        return null;\n    } else {\n        return uri;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}