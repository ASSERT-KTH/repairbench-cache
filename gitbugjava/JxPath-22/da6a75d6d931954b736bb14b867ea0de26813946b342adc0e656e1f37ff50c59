{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\n// Assuming the context provides a way to get the prefix, e.g., DOMUtils.getPrefix(Node)\n// This is just for compilation, the actual implementation might differ.\nclass DOMUtilsPlaceholder {\n    public static String getPrefix(Node node) {\n        return node.getPrefix();\n    }\n}\n\n\n    /**\n     * Get the ns uri of the specified node. Correctly handles explicit\n     * empty namespace declarations (xmlns=\"\") by returning null.\n     * @param node Node to check\n     * @return String ns uri, or null if the node has no namespace.\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            // If document has no root element, node might become null\n            if (node == null) {\n                return null;\n            }\n        }\n\n        // Only elements have namespace URIs in the context of finding declarations.\n        // Other node types (attributes, text, comments etc.) handled differently or return null.\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            // Attributes have their own namespace URI via attr.getNamespaceURI()\n            // but the logic here is for elements finding their applicable ns.\n            // Return null for non-elements seems appropriate here.\n            return null;\n        }\n\n        Element element = (Element) node;\n\n        // Use the DOM Level 2 standard method first.\n        String uri = element.getNamespaceURI();\n\n        // If the standard method returns null, it might be because the node truly\n        // has no namespace, or because it's defined in an ancestor (common in DOM Level 1\n        // or when default namespace is used), or explicitly undefined (xmlns=\"\").\n        // We need to check ancestors.\n        if (uri == null) {\n            // Determine the prefix of the element to find the correct xmlns attribute.\n            // Assuming getPrefix(Node) is available from the original class context.\n            String prefix = DOMUtilsPlaceholder.getPrefix(node); // Use the actual getPrefix method\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            // Search ancestors for the relevant namespace declaration attribute.\n            Node aNode = node;\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        // Found the declaration (e.g., xmlns=\"uri\" or xmlns:pfx=\"uri\").\n                        uri = attr.getValue();\n                        break; // Stop searching up the tree.\n                    }\n                }\n                // Move to the parent node.\n                aNode = aNode.getParentNode();\n            }\n            // If no declaration was found walking up the tree, uri remains null.\n        }\n\n        // IMPORTANT FIX: The XML Namespaces specification states that an empty URI means\n        // the element has *no* namespace. In the DOM API and XPath data model,\n        // \"no namespace\" is represented by null. Therefore, normalize \"\" to null.\n        // This handles cases like <element xmlns=\"\"/> correctly.\n        if (uri != null && uri.isEmpty()) {\n            return null;\n        }\n\n        // Return the found URI, or null if no namespace applies.\n        return uri;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}