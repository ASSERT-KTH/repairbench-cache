{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\n    /**\n     * Get the ns uri of the specified node.\n     * Handles cases like xmlns=\"\" correctly by returning null for the namespace URI.\n     * @param node Node to check\n     * @return String ns uri, or null for no namespace.\n     */\n    public static String getNamespaceURI(Node node) {\n        // Handle Document node: use the root element\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            // If document has no root element, node becomes null.\n            if (node == null) {\n                return null;\n            }\n        }\n\n        int type = node.getNodeType();\n\n        // Handle Element nodes\n        if (type == Node.ELEMENT_NODE) {\n            Element element = (Element) node;\n            // Try the direct DOM method first (handles createElementNS cases)\n            String uri = element.getNamespaceURI();\n\n            // If the standard DOM method returns a non-null URI, use it.\n            // DOM Level 3 compliant parsers might return \"\" for xmlns=\"\",\n            // map this to null as JXPath expects null for the null namespace.\n            if (uri != null) {\n                return \"\".equals(uri) ? null : uri;\n            }\n\n            // If element.getNamespaceURI() is null, it might be in a default namespace\n            // not reported by getNamespaceURI, or it might truly be in no namespace.\n            // Manually search for relevant xmlns or xmlns:prefix attributes upwards.\n            String prefix = getPrefix(node); // Assumes getPrefix utility method is available\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            Node aNode = node;\n            // Walk up the element hierarchy\n            while (aNode != null && aNode.getNodeType() == Node.ELEMENT_NODE) {\n                Attr attr = ((Element) aNode).getAttributeNode(qname);\n                if (attr != null) {\n                    String attrValue = attr.getValue();\n                    // Found namespace declaration. Map \"\" value (xmlns=\"\") to null namespace.\n                    return \"\".equals(attrValue) ? null : attrValue;\n                }\n                // Move up to the parent element\n                aNode = aNode.getParentNode();\n            }\n\n            // No namespace declaration found for this element/prefix in the hierarchy.\n            // Therefore, the element belongs to the null namespace.\n            return null;\n        }\n        // Handle Attribute nodes\n        else if (type == Node.ATTRIBUTE_NODE) {\n            Attr attr = (Attr) node;\n            // Use the attribute's namespace URI directly.\n            String uri = attr.getNamespaceURI();\n            // Per DOM specification:\n            // - Unprefixed attributes have null namespace URI.\n            // - Prefixed attributes have the namespace URI bound to the prefix.\n            // - xmlns/xmlns:prefix attributes belong to \"http://www.w3.org/2000/xmlns/\".\n            // It's unlikely for an attribute's namespace URI to be \"\", but handle\n            // it consistently by mapping to null.\n            return \"\".equals(uri) ? null : uri;\n        }\n        // Handle other node types (Text, Comment, PI, DocumentType, etc.)\n        else {\n            // These nodes do not have their own namespace URI.\n            // node.getNamespaceURI() typically returns null for these types.\n            return null;\n        }\n    }\n\n    /*\n     * Note: The above code assumes the existence of a static method 'getPrefix(Node node)'\n     * in the same class or context, which returns the prefix of the node (e.g., \"b\" for \"b:foo\").\n     * Example signature: private static String getPrefix(Node node)\n     */",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}