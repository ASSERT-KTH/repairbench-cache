{
    "generation": "    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri, or null if the node has no namespace.\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            // Handle case where Document has no root element\n            if (node == null) {\n                return null;\n            }\n        }\n\n        // This method is primarily designed for Elements.\n        // Original code would throw ClassCastException if node wasn't Element after Document check.\n        // We maintain this assumption for minimal change.\n        if (!(node instanceof Element)) {\n            // If not an element, it doesn't have a namespace URI in the XML sense,\n            // except for prefixed attributes, which require different handling.\n            // Returning null seems appropriate for non-elements in this context.\n            // However, to strictly match original behavior's failure mode on bad input:\n             Element elementCheck = (Element) node; // This line potentially throws ClassCastException\n            // If the code reaches here, it means node was an Element, but the check failed? Unlikely.\n            // The primary purpose of the original cast was likely just type conversion.\n            // Safest change respecting original logic's implicit assumption: proceed with cast.\n        }\n\n        Element element = (Element) node;\n\n        // Try the standard DOM Level 3 method first.\n        String uri = element.getNamespaceURI();\n\n        // If the standard method returns null, attempt manual lookup.\n        // This handles cases where DOM might not resolve namespace correctly (e.g., not namespace-aware)\n        // or provides robustness for specific cases like default namespace inheritance.\n        if (uri == null) {\n            // Determine the prefix (null for default namespace).\n            // Assumes getPrefix is available and works correctly for Elements.\n            String prefix = getPrefix(node); // Use the node itself (which is an Element).\n            // Determine the attribute name to look for (xmlns or xmlns:prefix).\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            // Search the element and its ancestors for the namespace declaration.\n            Node aNode = element; // Start search from the element itself.\n            while (aNode != null) {\n                // Only consider Element nodes for namespace declarations.\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        // Declaration found, get its value.\n                        String value = attr.getValue();\n                        // FIX: Check for the xmlns=\"\" case. If we were looking for the\n                        // default namespace (prefix is null) and the attribute value\n                        // is an empty string, it signifies *no* namespace. Return null.\n                        if (prefix == null && value.length() == 0) {\n                            return null; // Explicitly in no namespace\n                        }\n                        // Otherwise, return the found namespace URI.\n                        return value;\n                    }\n                }\n                // Move up to the parent node.\n                aNode = aNode.getParentNode();\n            }\n            // No namespace declaration found in the hierarchy. Element is in no namespace.\n            return null;\n        }\n        // If the standard method returned a non-null URI, check if it's an empty string.\n        // According to Namespaces in XML 1.0, an empty URI is not strictly a namespace name.\n        // JXPath likely expects null for \"no namespace\". Normalize \"\" returned by DOM to null.\n        else if (uri.length() == 0) {\n            return null;\n        }\n\n        // Standard method returned a valid, non-empty URI. Return it.\n        return uri;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}