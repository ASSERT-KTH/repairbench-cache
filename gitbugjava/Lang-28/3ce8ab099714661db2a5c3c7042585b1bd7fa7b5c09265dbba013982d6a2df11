{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check if '&#' characters are present and within bounds\n        // TODO: Protect from ArrayIndexOutOfBounds - Added checks below\n        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            // Check if there's anything after \"&#\"\n            if (start == seqEnd) {\n                return 0; // Incomplete entity: \"&#\" at the end\n            }\n\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            // Check for hex indicator 'x' or 'X'\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                // Check if there's anything after \"&#x\"\n                if (start == seqEnd) {\n                    return 0; // Incomplete entity: \"&#x\" at the end\n                }\n                isHex = true;\n            }\n\n            int end = start;\n            // Find the terminating semicolon, staying within bounds\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // Check if semicolon was found and if there were digits between '#'/'x' and ';'\n            if (end == seqEnd || end == start) {\n                return 0; // Incomplete entity: No digits or no semicolon found before end of sequence\n            }\n\n            int entityValue;\n            try {\n                // Parse the number (decimal or hexadecimal)\n                CharSequence numericEntity = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(numericEntity.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(numericEntity.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                 // The sequence between #/x and ; is not a valid number\n                return 0;\n            }\n\n            // Convert the code point to char(s) and write to the output writer.\n            // This handles BMP characters (one char) and supplementary characters (two chars using surrogate pairs).\n            // Previously, out.write(entityValue) truncated supplementary characters.\n            // Also handles potentially invalid code points if Integer.parseInt allows values outside Unicode range,\n            // though Character.toChars might throw IllegalArgumentException for invalid code points.\n            // Assuming valid Unicode code points as per test cases.\n            out.write(Character.toChars(entityValue));\n\n\n            // Return the total number of characters consumed (from '&' to ';')\n            // Calculation: (index of ';' + 1) - start index ('&')\n            return (end + 1) - index;\n        }\n        // The sequence does not start with \"&#\", so it's not a numeric entity we handle here\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}