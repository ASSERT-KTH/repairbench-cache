{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank()) return;\n\n            // Indenting logic for non-blank text nodes:\n            if (!isBlank()) { // Only consider indenting non-blank text nodes.\n                // Original condition 1: Is this the first significant child of a block-formatting parent?\n                boolean firstInBlock = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock());\n                \n                // Original condition 2: Is outline mode active?\n                boolean outlineMode = (out.outline() && siblingNodes().size() > 0);\n                \n                // New condition 3: Does this text node follow a <br> tag within a block-formatting parent context?\n                boolean followsBrInBlockContext = false;\n                Node prev = previousSibling();\n                if (prev instanceof Element && ((Element)prev).tagName().equalsIgnoreCase(\"br\")) {\n                    // Check if the parent context is one that would typically indent its children.\n                    // This is true if the parent is an Element that formats as block,\n                    // or if the parent is a Document (and we're not in outline mode, as outline has its own rules).\n                    if (parent != null && parent.tag().formatAsBlock()) {\n                        followsBrInBlockContext = true;\n                    } else if (parentNode instanceof Document && !out.outline()) {\n                        // If parent is Document and not in outline mode, children are typically indented.\n                        // If outline mode is active, the 'outlineMode' condition (c2) would handle it.\n                        followsBrInBlockContext = true;\n                    }\n                }\n                \n                if (firstInBlock || outlineMode || followsBrInBlockContext) {\n                    indent(accum, depth, out);\n                }\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}