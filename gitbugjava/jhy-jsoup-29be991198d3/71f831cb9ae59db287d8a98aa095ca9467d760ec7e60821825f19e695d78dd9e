{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank()) return;\n\n            // Indentation logic for non-blank text nodes in normalizable whitespace context\n            if (!isBlank()) { // Only consider indenting if the text node is not blank.\n                // Condition 1: This text node is the first significant child of a block-formatting parent.\n                boolean firstInBlock = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock());\n\n                // Condition 2: Outline mode is on, and this text node has siblings (i.e., it's part of a list).\n                // siblingNodes().size() > 0 is defensive, as a node with a parent should be in parent's child list.\n                boolean outlineMode = (out.outline() && siblingNodes().size() > 0);\n\n                // Condition 3: This text node immediately follows a <br> tag.\n                boolean afterBr = false;\n                Node prev = this.previousSibling();\n                if (prev instanceof Element && ((Element) prev).tag().getName().equals(\"br\")) {\n                    afterBr = true;\n                }\n\n                if (firstInBlock || outlineMode || afterBr) {\n                    indent(accum, depth, out);\n                }\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}