{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            // isBlank() is a method of TextNode. 'this' is the current TextNode.\n            boolean thisIsBlank = isBlank();\n\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && thisIsBlank) return;\n\n            // Check if the previous sibling was a <br> tag.\n            Node prev = this.previousSibling();\n            boolean precededByBr = (prev instanceof Element && ((Element)prev).tag().getName().equals(\"br\"));\n\n            // Indentation logic:\n            // Original conditions:\n            // A: First non-blank child of a block-formatting parent.\n            // B: Outline mode active, non-blank, has siblings.\n            // Added condition C: Preceded by a <br> tag and non-blank.\n            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !thisIsBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !thisIsBlank) ||\n                (precededByBr && !thisIsBlank) // New condition for <br>\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}