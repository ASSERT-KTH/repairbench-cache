{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // Original logic to check next node and decide to skip\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank()));\n\n        // Additional check to handle cases where next is a <br> followed by text\n        if (!couldSkip && next instanceof Element && ((Element) next).tagName.equals(\"br\")) {\n            // Check the node after <br> to see if it's text that needs wrapping\n            Node nextNext = next.nextSibling();\n            if (nextNext instanceof TextNode && prettyPrint) {\n                couldSkip = true;\n            }\n        }\n\n        if (couldSkip && isBlank()) return;\n\n        // Apply existing wrapping logic and check if adding a line break is needed\n        boolean wrapAfterBr = prettyPrint && \"br\".equalsIgnoreCase(parent.tag()) && next instanceof TextNode;\n        if (wrapAfterBr) {\n            // Determine if new line is needed\n            boolean addLineBreak = true;\n\n            // Check the node that follows the <br>\n            Node nodeAfterBr = next instanceof TextNode ? ((TextNode) next).nextSibling() : next.nextSibling();\n            if (nodeAfterBr != null && nodeAfterBr instanceof Element && ((Element) nodeAfterBr).tag().isBlock()) {\n                addLineBreak = true;\n            } else if (next instanceof TextNode && !((TextNode) next).isBlank()) {\n                addLineBreak = true;\n            } else {\n                addLineBreak = false;\n            }\n\n            if (addLineBreak) {\n                indent(accum, depth, out);\n            }\n        }\n\n        // Existing condition for wrapping\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}