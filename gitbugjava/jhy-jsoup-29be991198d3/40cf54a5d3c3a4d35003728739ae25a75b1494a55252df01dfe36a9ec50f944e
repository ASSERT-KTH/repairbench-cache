{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock())\n            || parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n            || (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && isBlank()) {\n            return;\n        }\n\n        // indent if first text in a block, after a <br>, or in outline mode\n        Node prev = this.previousSibling();\n        boolean prevIsBr = prev instanceof Element && ((Element) prev).tagName().equals(\"br\");\n        if (((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock())\n                || prevIsBr\n                || (out.outline() && siblingNodes().size() > 0))\n            && !isBlank()) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}