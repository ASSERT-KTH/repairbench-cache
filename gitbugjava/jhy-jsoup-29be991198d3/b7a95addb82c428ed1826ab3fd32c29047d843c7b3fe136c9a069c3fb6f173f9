{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank()) return;\n\n            boolean indentBefore = false;\n            // Default indent conditions:\n            // 1. First node in a block parent (and this text node is not blank)\n            if (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) {\n                indentBefore = true;\n            }\n            // 2. Outline mode, has siblings, and this text node is not blank\n            else if (out.outline() && siblingNodes().size() > 0 && !isBlank()) {\n                indentBefore = true;\n            }\n            // 3. New: If previous sibling was a <br> tag and this text node is not blank\n            else {\n                Node prev = previousSibling();\n                if (prev instanceof Element && ((Element) prev).tag().getNameIs(\"br\") && !isBlank()) {\n                    indentBefore = true;\n                }\n            }\n\n            if (indentBefore) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}