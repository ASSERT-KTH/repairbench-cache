{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // if this text is just whitespace, and the next node will cause an indent, skip this text:\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n        if (couldSkip && isBlank())\n            return;\n\n        // Add indentation if:\n        // (a) this is the first sibling, the parent formats as block, not blank\n        // (b) or we are outlining, have siblings, not blank\n        // (c) or the previous sibling is <br> - ensure indentation follows <br> inside a block element\n        boolean indentFirst = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank());\n        boolean indentOutline = (out.outline() && siblingNodes().size() > 0 && !isBlank());\n        boolean indentAfterBr = false;\n        if (!isBlank() && parent != null && parent.tag().isBlock() && siblingIndex > 0) {\n            Node prev = siblingIndex > 0 ? siblingNodes().get(siblingIndex -1) : null;\n            if (prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n                indentAfterBr = true;\n        }\n        if (indentFirst || indentOutline || indentAfterBr)\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}