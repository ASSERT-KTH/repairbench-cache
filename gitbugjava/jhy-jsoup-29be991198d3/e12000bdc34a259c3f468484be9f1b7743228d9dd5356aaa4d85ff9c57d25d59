{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // Check if the next node causes an indent and is an Element that should indent\n        Node next = this.nextSibling();\n        boolean nextCausesIndent = (next instanceof Element && ((Element) next).shouldIndent(out));\n\n        // Indent if the next node causes an indent and the current node is not blank\n        if (nextCausesIndent && !isBlank()) {\n            indent(accum, depth, out);\n            return;\n        }\n\n        // Skip text if it's just whitespace and the next node will cause an indent\n        if (isBlank() && nextCausesIndent) {\n            return;\n        }\n\n        // Original indent condition\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}