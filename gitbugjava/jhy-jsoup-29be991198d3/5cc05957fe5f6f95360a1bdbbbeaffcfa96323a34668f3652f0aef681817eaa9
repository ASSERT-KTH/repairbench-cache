{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        // Determine if previous sibling is a block element\n        boolean previousIsBlock = false;\n        Node previous = previousSibling();\n        if (previous instanceof Element) {\n            previousIsBlock = ((Element) previous).tag().isBlock();\n        }\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || previousIsBlock || (parentNode instanceof Document);\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // Determine if we can skip this text\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n        if (couldSkip && isBlank()) return;\n\n        // Check if we need to indent, either due to previous block element or standard conditions\n        boolean shouldIndent = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())\n                || (out.outline() && siblingNodes().size() > 0 && !isBlank())\n                || (previousIsBlock && !isBlank());\n        if (shouldIndent) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}