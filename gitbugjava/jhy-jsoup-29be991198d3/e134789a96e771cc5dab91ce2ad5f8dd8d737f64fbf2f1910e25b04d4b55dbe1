{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        // Fix: Check previous sibling is a <br> and indent if so\n        Node prev = previousSibling();\n        Node next = nextSibling();\n\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock())\n            || parentNode instanceof Document;\n        trimTrailing = next == null && parent != null && parent.tag().isBlock();\n\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n            || (next instanceof TextNode && (((TextNode) next).isBlank()));\n        if (couldSkip && isBlank()) return;\n\n        // Fix: Indent after <br>\n        if ((prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) && !isBlank()) {\n            indent(accum, depth, out);\n        } else if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}