{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n// buggy code\n//             Node next = this.nextSibling();\n//             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n//                 || (next instanceof TextNode && (((TextNode) next).isBlank())); \n//             if (couldSkip && isBlank()) return;\n//             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n//                 (out.outline() && siblingNodes().size() > 0 && !isBlank()))\n                        if (nextSibling() != null) {\n                Node next = this.nextSibling();\n                boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                    || (next instanceof TextNode && (((TextNode) next).isBlank())); \n                if (couldSkip && isBlank()) return;\n            }\n            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n                (out.outline() && siblingNodes().size() > 1 && !isBlank()))\n\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}