{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank()) return;\n\n            boolean doIndent = false;\n            if (!isBlank()) { // only indent if the text node is not blank\n                // Condition 1: First child of a block-formatting parent, AND outline mode is on.\n                // e.g. <p>Text</p> in outline mode becomes <p>\\n Text\\n</p>\n                // (If not in outline mode, <p>Text</p> should remain as is, not <p>\\n Text</p>)\n                if (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && out.outline()) {\n                    doIndent = true;\n                }\n\n                // Condition 2: Outline mode is on (general case for text nodes in outline mode).\n                // e.g. <title>Text</title> in outline mode becomes <title>\\n Text\\n</title>\n                // Note: siblingNodes().size() > 0 is effectively always true for 'this' node itself.\n                // This condition handles cases like <title> where parent.tag().formatAsBlock() is false.\n                if (out.outline() && siblingNodes().size() > 0) {\n                    doIndent = true;\n                }\n\n                // Condition 3: Text node follows a <br> tag.\n                // e.g. <p>Hello<br>Text</p> becomes <p>Hello<br>\\n Text</p>\n                Node previous = previousSibling();\n                if (previous instanceof Element && ((Element) previous).tag().getName().equals(\"br\")) {\n                    doIndent = true;\n                }\n            }\n\n            if (doIndent) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}