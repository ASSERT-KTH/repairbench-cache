{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // If the parent element preserves whitespace, normalization and pretty-printing shouldn't adjust spacing\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // Determine if this node's leading/trailing whitespace should be trimmed. Trim if first/last node in block parent.\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document; // Trim leading if first node in document\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock(); // Trim trailing if last node in block parent\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next element will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, possibly from re-parenting\n            if (couldSkip && isBlank()) return; // Don't print blank text node if the next sibling will indent or is also blank\n\n            // Determine if this node should be indented:\n            boolean indent = false;\n            // Indent in outline mode if non-blank.\n            if (out.outline() && siblingNodes().size() > 0 && !isBlank()) {\n                 indent = true;\n            }\n\n            // Indent if the previous sibling was a <br> element.\n            Node previousSibling = previousSibling();\n            if (previousSibling instanceof Element && ((Element) previousSibling).tag().getName().equals(\"br\") && !isBlank()) {\n                 indent = true;\n            }\n            // (Removed original first child indent logic: `siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()`)\n\n            if (indent)\n                indent(accum, depth, out);\n        }\n\n        // Now print the text, deferred from the indent check phase above\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}