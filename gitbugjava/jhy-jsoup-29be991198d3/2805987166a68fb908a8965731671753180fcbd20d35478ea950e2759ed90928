{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // Determine if leading or trailing whitespace should be trimmed\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n\n            // Check if previous node is a <br> tag; if so, the current node should be on a new line\n            if (previousSibling() instanceof Element && ((Element) previousSibling()).tag().getName().equals(\"br\")) {\n                trimLeading = true;\n                if (prettyPrint) {\n                    indent(accum, depth, out);\n                    if (out.outline()) {\n                        accum.append('\\n');\n                    }\n                }\n            } else {\n                trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n            }\n\n            // Check if the next node would cause an indent and if we can skip this text\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // Next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // Next is blank text from re-parenting\n\n            if (couldSkip && isBlank()) return;\n\n            // Check if we need to indent\n            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n                indent(accum, depth, out);\n            }\n        }\n\n       Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}