{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // trimLeading/trimTrailing whitespace based on sibling position and parent block status\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank()) return;\n\n            // Indent text if:\n            // 1. It's in outline mode (special debug/structured output), and not blank.\n            // 2. In pretty print, it follows a <br> tag (which forces a line break).\n            //    The previous condition for `siblingIndex == 0` for TextNodes was removed\n            //    as it caused unwanted leading newlines for text content that is the\n            //    first child of a block parent (e.g., <p>Hello</p>).\n            Node prev = prevSibling();\n            boolean prevIsBr = (prev instanceof Element && ((Element) prev).tag().getName().equals(\"br\"));\n\n            if ((out.outline() && siblingNodes().size() > 0 && !isBlank()) ||\n                (prettyPrint && prevIsBr)) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}