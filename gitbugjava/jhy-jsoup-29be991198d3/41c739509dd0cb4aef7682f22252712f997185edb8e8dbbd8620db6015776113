{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // Trim leading whitespace for block-level elements or document root\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            // Trim trailing whitespace if this is the last sibling of a block-level element\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank()) return;\n\n            // Determine if a newline and indent should be added before this text node.\n            boolean forceNewlineAndIndent = false;\n\n            // New condition: If the previous sibling is a <br> tag, force a newline.\n            Node prev = this.previousSibling();\n            if (prev instanceof Element && ((Element)prev).tag().getName().equals(\"br\")) {\n                forceNewlineAndIndent = true;\n            }\n\n            // Existing condition: If outlining is enabled and there are siblings, force a newline.\n            // This part should remain as it's a specific output setting.\n            if (out.outline() && siblingNodes().size() > 0 && !isBlank()) {\n                forceNewlineAndIndent = true;\n            }\n\n            // Removed the original condition for indenting the first child of a block.\n            // Original: `(siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())`\n            // This condition caused incorrect indentation for text nodes that are the first children\n            // of block elements (e.g., \"Hello\" in \"<p>Hello...</p>\"), leading to an undesired leading newline.\n            // Text nodes within a block element generally flow inline unless a specific rule (like after <br>) applies.\n\n            if (forceNewlineAndIndent) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}