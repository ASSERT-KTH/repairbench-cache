{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // trimLeading and trimTrailing logic for text content itself (e.g., \"  Hello\" -> \"Hello\")\n            // This applies to the *value* of the text node, not for adding indents/newlines before it.\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank()) return;\n\n            // Determine if an indent (newline + spaces) should be added before this TextNode.\n            boolean doIndent = false;\n            if (out.outline()) {\n                // If in outline debug mode, always indent.\n                doIndent = true;\n            } else {\n                Node prev = previousSibling();\n                if (prev != null) {\n                    if (prev instanceof Element) {\n                        Element prevEl = (Element) prev;\n                        // Indent if previous sibling is a block element, or a self-closing empty element like <br>\n                        // which typically causes a line break in pretty-printed HTML.\n                        if (prevEl.tag().formatAsBlock() || (prevEl.tag().isSelfClosing() && prevEl.tag().isEmpty())) {\n                            doIndent = true;\n                        }\n                    }\n                    // If previous sibling is a TextNode, no additional indent is needed by this logic.\n                    // Whitespace between TextNodes is handled by normaliseWhite and trimLeading/trimTrailing.\n                }\n                // If prev is null (this is the first child of its parent), doIndent remains false.\n                // This correctly prevents indenting the first text node of a block (e.g., <p>Hello).\n            }\n\n            // Apply indentation if determined necessary.\n            // The isBlank() check is implicitly handled by the early return for couldSkip && isBlank().\n            if (doIndent) {\n                indent(accum, depth, out);\n            }\n        }\n\n        // Escape and append the text content to the accumulator.\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}