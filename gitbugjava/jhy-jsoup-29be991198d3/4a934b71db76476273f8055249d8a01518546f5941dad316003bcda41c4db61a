{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // if this text is just whitespace, and the next node will cause an indent, skip this text:\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n            || (next instanceof TextNode && (((TextNode) next).isBlank()));\n        if (couldSkip && isBlank())\n            return;\n\n        boolean shouldIndent = false;\n        // NEW: if the previous sibling is a <br> then force an indent.\n        Node prev = this.previousSibling();\n        if (prev instanceof Element && ((Element) prev).tag().getName().equals(\"br\")) {\n            shouldIndent = true;\n        } else if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())\n            || (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            shouldIndent = true;\n        }\n        if (shouldIndent)\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}