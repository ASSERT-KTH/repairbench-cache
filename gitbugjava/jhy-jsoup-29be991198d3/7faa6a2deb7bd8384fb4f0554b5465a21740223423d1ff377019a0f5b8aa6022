{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = (parentNode instanceof Element) ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    boolean isPreviousElement = false;\n\n    if (normaliseWhite) {\n        // determine if previous node is element when in block parent\n        if (parent != null && parent.tag().isBlock()) {\n            if (siblingIndex > 0) {\n                Node previous = siblingNodes().get(siblingIndex - 1);\n                isPreviousElement = previous instanceof Element;\n            }\n        }\n\n        // Update trimLeading condition to check previous node\n        trimLeading = (parent != null && parent.tag().isBlock()\n            && (siblingIndex == 0 || isPreviousElement)) \n            || (parentNode instanceof Document);\n\n        trimTrailing = nextSibling() == null && \n            (parent != null && parent.tag().isBlock());\n\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n            || (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && isBlank()) return;\n\n        // Check if either first sibling, previous was element (in block parent), or outline conditions\n        if (\n            ( (siblingIndex == 0 || isPreviousElement) \n             && parent != null \n             && parent.tag().isBlock()\n             && !isBlank() )\n            || \n            (out.outline() && siblingNodes().size() > 0 && !isBlank()) \n        ) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}