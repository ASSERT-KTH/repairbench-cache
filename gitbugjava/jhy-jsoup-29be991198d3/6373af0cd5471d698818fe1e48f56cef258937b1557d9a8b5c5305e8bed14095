{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    boolean precedingElement = false;\n    \n    // Check if the previous sibling is an Element\n    if (siblingIndex > 0 && parent != null) {\n        Node previous = parent.childNode(siblingIndex - 1);\n        precedingElement = previous instanceof Element;\n    }\n\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || \n                      (parentNode instanceof Document);\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // Skip if the text is blank and the next node could cause an indent or a blank text\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||\n                            (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && isBlank()) return;\n\n        // Now include the condition where trailing element may trigger indent\n        if (( (siblingIndex == 0 || precedingElement) && \n               parent != null && \n               parent.tag().isBlock() && \n               !isBlank()) || \n            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}