{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            (parentNode instanceof Document);\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // if this text is just whitespace, and the next node will cause an indent, skip this text:\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n        if (couldSkip && isBlank()) return;\n\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            indent(accum, depth, out);\n        }\n    }\n\n    // Handle indentation when the element is a BR and we are inside a block element\n    if (out.prettyPrint() && parent != null && parent.tag().isBlock()) {\n        if (parent.getChildren().indexOf(this) > 0 && siblingNodes().size() > 0 && !isBlank()) {\n            if (parent.getChildren().get(parent.getChildren().size() - 1) != this) {\n                accum.append(Format.NewLine.Char0);\n                indent(accum, depth + 1, out);\n            }\n        }\n        if (isBr()) {\n            if (trimLeading) {\n                trimTrailing = true;\n            }\n            accum.append(Format.NewLine.Char0);\n        }\n        if (!trimLeading || !isBlank()) {\n            accum.append(Format.NewLine.Char0);\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}