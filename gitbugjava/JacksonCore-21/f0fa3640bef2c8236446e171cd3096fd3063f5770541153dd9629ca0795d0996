{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n        //    conditionals; and it seems odd to return `null` but NOT considering input\n        //    as closed... would love a rewrite to simplify/clear up logic here.\n        \n        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n        // check for no buffered context _exposedContext - null\n        // If all the conditions matches then check for scalar / non-scalar property\n        // [JACKSON-CORE#330]: This check needs refinement: specifically, with `_includePath`,\n        // we may need to return Structure End token even if !_allowMultipleMatches,\n        // to match the Structure Start token that was already returned.\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            // If the last token returned was the end of a structure which was included\n            // Need to check the context active when that token was returned, i.e.\n            // the parent of the current context.\n            if (_currToken.isStructEnd()) {\n                // If the start of the structure that just ended was handled\n                // and we are not including the full path, we are done.\n                // NOTE: `_headContext` is context AFTER ending the structure.\n                //       `isStartHandled()` refers to the start of this parent context.\n                if (_headContext.isStartHandled() && !_includePath) {\n                    return (_currToken = null);\n                }\n            } else if (_currToken.isScalarValue()) {\n                // If the last token was a scalar value included via INCLUDE_ALL filter,\n                // and the containing structure's start was NOT handled (typically means root scalar)\n                // and we are not including the path, we are done.\n                if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL) && !_includePath) {\n                    return (_currToken = null);\n                }\n            }\n        }\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    // [JACKSON-CORE#406]: When reading from buffer, possible that matching\n                    // END_ARRAY / END_OBJECT was returned; in which case, need to verify\n                    // state is correct. Specifically, if last token was END_ARRAY,\n                    // delegate should point to matching END_ARRAY. If START_ARRAY, ditto.\n                    // Let's verify...\n                    if (ctxt.inArray()) {\n                        t = delegate.currentToken();\n                        // it appears we must assume it's ok to return this?\n                        // Based on [core#406], seems ok.\n                        _currToken = t;\n                        return t;\n                    }\n                    // Similarly for objects, FIELD_NAMEs\n                    if (ctxt.inObject()) {\n                        t = delegate.currentToken();\n                        if (t == JsonToken.FIELD_NAME) {\n                            _currToken = t;\n                            return t;\n                        }\n                        // but could also be END_OBJECT; needs to be returned then?\n                        // Or... is this even possible? Maybe FIELD_NAME is the only\n                        // case Needs to consider? For now, let's assume so\n                    }\n                    // Past END_OBJECT / END_ARRAY need to fall through though\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            _currToken = t;\n            return t;\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            // 28-Sep-2018, tatu: Need to consider [jackson-core#488]\n            if (!_includePath) {\n                // Let's offline this; requires buffering which is bit complicated\n                t = _nextTokenWithBuffering(_headContext); // Also assigns _currToken\n                if (t != null) {\n                    return t;\n                }\n                break;\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // If path not included, and filter START_ARRAY itself returns null, need to skip\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n\n            // 28-Sep-2018, tatu: Need to consider [jackson-core#488]\n            if (!_includePath) {\n                // Let's offline this; requires buffering which is bit complicated\n                t = _nextTokenWithBuffering(_headContext); // Also assigns _currToken\n                if (t != null) {\n                    return t;\n                }\n                break;\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    // 16-May-2019, tatu: Matching filter may specify matching inclusion:\n                    f.filterFinishArray(); // or filterFinishObject() ? Needs to call the right one? How?\n                                           // context has that info, Filter does not?\n                                           // ... maybe FilterProvider needs access? Or TokenFilterContext?\n                                           // Fixed in 2.10.0 I think\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    // We will include the field name and the subsequent value. But\n                    // we only need immediate buffering if the current context has not\n                    // been started AND parent path is to be included.\n                    if (_includePath && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                        _exposedContext = _headContext;\n                        // note: this does NOT assign _currToken: caller needs to track\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    // We need to ensure that the START_OBJECT/START_ARRAY that precedes this\n                    // FIELD_NAME has been included IF path is to be included:\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                    // Either way, the field name itself needs to be returned, stay here\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    // Similar buffering check as with FIELD_NAME\n                    if (_includePath && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                        _exposedContext = _headContext;\n                        // note: this does NOT assign _currToken: caller needs to track\n                    }\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        // Need to make sure we didn't already return the result though\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}