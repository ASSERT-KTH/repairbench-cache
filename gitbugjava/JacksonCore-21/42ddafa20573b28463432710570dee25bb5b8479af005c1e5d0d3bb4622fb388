{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n        //    conditionals; and it seems odd to return `null` but NOT considering input\n        //    as closed... would love a rewrite to simplify/clear up logic here.\n\n        // Check for _allowMultipleMatches = false and single match found and structure ended.\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            // If the previous token was the end of a structure, and we are now back at the root,\n            // the match is complete. Signal completion.\n            // Fix for [core#330]\n            if (_currToken.isStructEnd()) {\n                // Error fix: Changed the condition here to check if context is back at root\n                if (_headContext.inRoot()) { \n                    return (_currToken = null);\n                }\n            // Original check for scalar values; needed for cases like root-level scalars?\n            // Or maybe cases where includePath=false?\n            } else if (_currToken.isScalarValue()) {\n                 if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                     // Related to [core#60] ?\n                     return (_currToken = null);\n                 }\n            }\n        }\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of\n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            _currToken = t;\n            return t;\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n\n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip-all\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) { // filter indicates skip-all\n                delegate.skipChildren();\n                break;\n            }\n            // But perhaps we need to include this array?\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            // Still not included, but need to traverse.\n            // Perhaps due to ancestor filter inclusion (aka include path)\n            _headContext = _headContext.createChildArrayContext(f, false);\n\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                 // But do we need to include root-level array START_ARRAY? Yes.\n                 // Or, if property is included, need START_ARRAY\n                 JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                 if (t2 != null) {\n                     _currToken = t2;\n                     return t2;\n                 }\n            }\n            // If not including path, need to skip current START_ARRAY: handled by looping\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip-all\n                delegate.skipChildren();\n                break;\n            }\n            // If not include-all, first check if parent requires value:\n            f = _headContext.checkValue(f);\n            if (f == null) { // filter indicates skip-all\n                delegate.skipChildren();\n                break;\n            }\n            // Maybe include? If not, calculate filter for contents\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            // Not included, but need to traverse (maybe include path?)\n             _headContext = _headContext.createChildObjectContext(f, false);\n\n             // Also: only need buffering if parent path to be included\n             if (_includePath) {\n                 JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                 if (t2 != null) {\n                     _currToken = t2;\n                     return t2;\n                 }\n             }\n             // If not including path, handled by loop: START_OBJECT not returned, loop back\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    // 18-Sep-2019, tatu: This seems wrong, filter applied AFTER structure finished?\n                    //    Need to reconsider. However, let's keep the structure from the input code.\n                    //    Note: original code only called filterFinishArray() regardless of token type.\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                // Important: value filter should be cleared, parent node's filter restored\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            // If not returning, loop: will scan till something is included\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree?\n                    _itemFilter = f;\n                    // we may also need to consider parent path if we are filtering based\n                    // on it\n                     if (_includePath) {\n                        // If path is included, FIELD_NAME is always returned:\n                        // Also, need to initiate buffering if parent context wasn't included\n                         JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                         if (t2 != null) {\n                             _currToken = t2;\n                             return t2;\n                         }\n                     // Minor twist here: if parent NOT included, may need to induce output of\n                     // surrounding START_OBJECT/END_OBJECT (if _includeImmediateParent enabled)\n                     } else if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        // If parent not included, still need to output the START_OBJECT (if available)\n                         JsonToken t2 = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                        _exposedContext = _headContext;\n                        // Note: This case is only relevant if _includePath is false.\n                        // Also note: may return null, but that's fine\n                        if (t2 != null) {\n                            _currToken = t2;\n                            return t2;\n                        }\n                     }\n                    // otherwise return token after potentially starting buffering\n                    return (_currToken = t);\n                }\n                if (f == null) { // explicit exclusion\n                    // need to skip field's value\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                // But maybe FIELD_NAME itself needs to be included? Or its value?\n                f = f.includeProperty(name);\n                if (f == null) { // skip\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree?\n                     if (_includePath) {\n                         // analogous to when starting with INCLUDE_ALL filter:\n                         JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                         if (t2 != null) {\n                             _currToken = t2;\n                             return t2;\n                         }\n                         // otherwise fall through and return FIELD_NAME\n                     // If path not included, but property is, may need START_OBJECT\n                     } else if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        JsonToken t2 = _headContext.nextTokenToRead();\n                        _exposedContext = _headContext;\n                         if (t2 != null) {\n                            _currToken = t2;\n                            return t2;\n                        }\n                     }\n                     // if no path inclusion or buffering, FIELD_NAME is still the token to return\n                     return (_currToken = t);\n                }\n\n                 // Ok; not-including-all, but FIELD_NAME might be included,\n                 // if path is included:\n                 if (_includePath) {\n                     JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                     if (t2 != null) {\n                         _currToken = t2;\n                         return t2;\n                     }\n                 }\n                 // Otherwise, need to skip the FIELD_NAME, but DON'T skip value.\n\n                // Fall through: will recurse, skip FIELD_NAME, find value etc\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                // Need to check buffering state regardless\n                 if (_includePath) {\n                     JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                     if (t2 != null) {\n                         _currToken = t2;\n                         return t2;\n                     }\n                 }\n                // If no buffering, just return\n                return (_currToken = t);\n            }\n            if (f != null) {\n                // but included by parent?\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        // or by value itself?\n                        || ((f != null) && f.includeValue(delegate))) {\n                    // Need to check buffering state regardless\n                    if (_includePath) {\n                        JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                        if (t2 != null) {\n                            _currToken = t2;\n                            return t2;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        // (rare case; only happens if buffering was needed but did not\n        // produce tokens, OR if we had to skip FIELD_NAME)\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}