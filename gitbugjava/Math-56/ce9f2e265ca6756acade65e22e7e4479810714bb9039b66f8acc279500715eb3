{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            // Use the specific exception class from the original code if available,\n            // otherwise use a standard one like IndexOutOfBoundsException or IllegalArgumentException.\n            // Assuming OutOfRangeException is defined elsewhere as in the original context.\n            throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize - 1);\n            // Note: The original exception message implies the upper bound is exclusive (totalSize),\n            // but standard range exceptions often use inclusive bounds (totalSize - 1).\n            // Adjusting to match typical exception constructor semantics if OutOfRangeException\n            // expects inclusive upper bound. If it expects exclusive, use totalSize.\n            // Sticking to the original usage for minimal change:\n            // throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n\n        int currentRemainder = index; // Initialize remainder with the index\n\n        // Compute indices for dimensions 0 to dimension - 2\n        for (int i = 0; i < last; i++) { // 'last' is dimension - 1\n            // The offset uniCounterOffset[i] corresponds to the number of elements\n            // represented by a change in the i-th dimension's index.\n            final int offset = uniCounterOffset[i];\n            // The index for the current dimension 'i' is found by integer division.\n            indices[i] = currentRemainder / offset;\n            // The remainder is used for calculating the indices of subsequent dimensions.\n            currentRemainder = currentRemainder % offset;\n        }\n\n        // The index for the last dimension is the final remainder.\n        // The implicit offset for the last dimension is 1.\n        // indices[last] = currentRemainder / 1;\n        indices[last] = currentRemainder;\n\n        return indices;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}