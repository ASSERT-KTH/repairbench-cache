{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n\n        return position;\n\n    }\n\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x33:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = stringValue.substring(8, 8 + 7);\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                }\n                break;\n            case 0x80:\n            }\n            case 0xAC:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                break;\n            case 0xBC:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(\"driver\", stringValue.trim());\n                break;\n            case 0xBD:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                break;\n            case 0xDA:\n                int deviceStatus = buf.readUnsignedByte();\n                position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                break;\n            case 0xE6:\n                while (buf.readerIndex() < endIndex) {\n                    int sensorIndex = buf.readUnsignedByte();\n                    buf.skipBytes(6); // mac\n                    position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                    position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                }\n                break;\n            case 0xEB:\n                // Fix for extendedLength and extendedType reading as bytes\n                if (buf.getUnsignedByte() > 200) { // Check first byte instead of two (assuming condition needs adjustment)\n                    int mccFirstByte = buf.readUnsignedByte();\n                    int mcc = (mccFirstByte << 8) | buf.readUnsignedByte(); // Handle as two bytes for MCC\n                    int mnc = buf.readUnsignedByte();\n                    Network network = new Network();\n                    while (buf.readerIndex() < endIndex) {\n                        network.addCellTower(CellTower.from(\n                                mcc & 0xFFFF,\n                                mnc,\n                                buf.readUnsignedShort(),\n                                buf.readUnsignedInt()));\n                    }\n                    position.setNetwork(network);\n                } else {\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedLength = buf.readUnsignedByte();\n                        int extendedType = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x01:\n                                position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                // data length: extendedLength - 2 (since 2 bytes consumed by length and type)\n                                break;\n                            case 0x23:\n                                position.set(\"fuel2\", Double.parseDouble(\n                                        buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                break;\n                            case 0xCE:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0xD8: // network data as single byte processing\n                                int mnc = buf.readUnsignedByte();\n                                Network network = new Network();\n                                network.addCellTower(CellTower.from(\n                                        buf.readUnsignedShort(), mnc,\n                                        buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                position.setNetwork(network);\n                                break;\n                            case 0xE1:\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength - 2);\n                                break;\n                        }\n                    }\n                }\n                break;\n            case 0xED:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(Position.KEY_CARD, stringValue.trim());\n                break;\n            case 0xEE:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0xF3:\n                int extendedLength1 = buf.readUnsignedByte(); \n                while (buf.readerIndex() < endIndex) {\n                    int extendedType = buf.readUnsignedShort();\n                    int lengthTemp = buf.readUnsignedByte();\n                    switch (extendedType) {\n                        case 0x0002:\n                            position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0003:\n                            position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                            break;\n                        case 0x0004: \n                            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                            break;\n                        case 0x0005:\n                            position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                            break;\n                        case 0x0007:\n                            position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0008:\n                            position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0009:\n                            position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                            break;\n                        case 0x000B:\n                            position.set(\"intakePressure\", buf.readUnsignedShort());\n                            break;\n                        case 0x000C:\n                            position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                            break;\n                        case 0x000D:\n                            position.set(\"intakeFlow\", buf.readUnsignedShort());\n                            break;\n                        case 0x000E:\n                        }\n                    }\n                }\n                break;\n            case 0xFE:\n                // handled properly\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}