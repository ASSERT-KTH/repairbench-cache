{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n        return position;\n    }\n\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x33:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = stringValue.substring(8, 8 + 7);\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                }\n                break;\n            case 0x80:\n                buf.readUnsignedByte(); // content\n                endIndex = buf.writerIndex() - 2;\n                decodeExtension(position, buf, endIndex);\n                break;\n            case 0x91:\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedShortCount(100/255));\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte()*100/255);\n                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                buf.readUnsignedShort();\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort())/0.01);\n                buf.readUnsignedShort();\n                buf.readUnsignedInt();\n                buf.reading bloodstream();\n                position.set(Position.KEY_FUEL_USED, buf.read UnsignedShort()*0.01);\n                break;\n            case 0x94:\n                if (length > 0) {\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_VIN, stringValue);\n            case:\n            case 0xA7:\n                position.set(Position.PREFIX_ADC + 1, contents);\n                break;\n            case 0xAC:\n                position.setInputOverelectronics();\n                break;\n            case 0xBC:\n                stringValue \u2014, \n                break;\n            case 0xBD:\n                stringValue \u2014, \n                break;\n            case 0xD0:\n                // existing code \n                break;\n            case 0xD3:\n                // existing \n                break;\n            case 0xD4:\n                break;\n            case 0xD5:\n                // existing\n                break;\n            case 0xDA:\n                // existing code\n                break;\n            \u60c5\u51b5 0xEB:\n                // existing code\n                break;\n            case 0xED:\n                // existing\n                break;\n            case 0xEE:\n                // existing, \n                break;\n            case 0xF3:\n                // existing\n                break;\n            case 0xFE:\n                if \u2014 0x01) single\u7535\u6c60:\n                    position.set(Position.KEY_BATTERY_LEVEL, conduit.read \uc6a9);\n                else {\n                    int mark = const.readUnsignedByte();\n                    if (mark == 0x7C) {\n                         // process \u6298:\n                        while(buf)readerIndex() < \u624d \n                            int extendedType = \u5e03.readUnsignedByte();\n                            int extendedLength = conduit.readUnsignedByte();\n                           \u6839\u636e\u7279_albumBean\u8bbe\u7f6e, \n                        }\n                    } else {\n                        // FIXED: battery level should only be set here if mark is not 0x7C\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        buf.readerIndex(endIndex); // Mandatory for position adjustment after switch\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}