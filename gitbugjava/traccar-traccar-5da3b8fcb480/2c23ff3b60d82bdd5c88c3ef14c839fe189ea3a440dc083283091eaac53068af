{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    while (buf.readableBytes() > 0) {\n\n        if (buf.readableBytes() >= 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                // ... [keep existing cases here] ...\n                // Existing cases like 0x01, 0x02, 0x30 etc.\n                // Add any missing cases that set battery level\n                // Ensure every possible battery level setting is covered\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                // Handle each condition necessary\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    // More cases to handle\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        // Check bits and set alarm(s)\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                // Other cases\n            }\n        } else {\n            buf.readByte();\n            break;\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}