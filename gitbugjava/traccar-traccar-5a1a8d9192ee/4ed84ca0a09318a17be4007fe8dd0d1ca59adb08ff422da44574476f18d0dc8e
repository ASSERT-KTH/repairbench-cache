{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // protocol revision\n        buf.readUnsignedShort(); // length\n        buf.readUnsignedByte(); // header indicator\n        buf.readUnsignedShort(); // header length\n        buf.readUnsignedInt(); // reference\n\n        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedByte(); // session status\n        buf.readUnsignedShort(); // originator index\n        buf.readUnsignedShort(); // transfer index\n        buf.readUnsignedInt(); // session time (ignored for position time)\n        buf.readUnsignedByte(); // payload indicator\n        buf.readUnsignedShort(); // payload length\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        List<Integer> parameters = getParameters(deviceSession.getDeviceId());\n\n        // Constant for seconds between Unix epoch (1970-01-01 00:00:00 UTC)\n        // and the protocol's epoch (2000-01-01 00:00:00 UTC).\n        // 30 years = (30 * 365 + 7 leap days) = 10957 days\n        // 10957 days * 86400 seconds/day = 946684800 seconds.\n        final long EPOCH_OFFSET_2000 = 946684800L;\n\n        for (int parameter : parameters) {\n            switch (parameter) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x04:\n                    // Time is reported as seconds since 2000-01-01 00:00:00 UTC\n                    long secondsSince2000 = buf.readUnsignedIntLE();\n                    position.setTime(new Date((secondsSince2000 + EPOCH_OFFSET_2000) * 1000));\n                    break;\n                case 0x05:\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x0B:\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x0C:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x0D:\n                    // Assuming this represents seconds, convert to milliseconds for KEY_HOURS\n                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L);\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x19:\n                    // Store battery level as voltage (e.g., value is in centivolts)\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() / 100.0);\n                    break;\n                case 0x1A:\n                     // Store power/voltage (e.g., value is in centivolts)\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() / 100.0);\n                    break;\n                case 0x1B:\n                    buf.readUnsignedByte(); // geofence\n                    break;\n                default:\n                    // Unknown parameter, skip if possible (requires knowing parameter lengths)\n                    // For now, just ignore.\n                    break;\n            }\n        }\n\n        // If the position time was not set (e.g. parameter 0x04 was not included in the format string)\n        // potentially use the session time from the header as a fallback?\n        // This part depends on protocol specification, leaving as is for now.\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}