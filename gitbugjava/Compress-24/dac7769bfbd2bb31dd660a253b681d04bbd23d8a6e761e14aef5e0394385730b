{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * <p>This method also supports parsing of numbers that exceed the\n     * official limit of 11 octal digits if the trailing space/NUL\n     * is missing.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing *and* the last\n     * character is not an octal digit, or if an invalid byte is detected before the end.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle starting NUL\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // If all characters were leading spaces\n        if (start == end) {\n             return 0L;\n        }\n\n        // Trim trailing NULs and spaces, handling implementations that omit the trailer.\n        // Ensure the method is robust against index out of bounds errors if start==end after trimming.\n        byte trailer = buffer[end - 1];\n\n        if (trailer == 0 || trailer == ' ') {\n            end--; // Consume the first trailer\n\n            // Trim *additional* NULs or spaces from the end\n            // Example: \"123 \\0\\0\" -> end=N-1 -> end=N-2 -> end=N-3\n            // Example: \"  \\0\" -> start=1, end=3 -> end=2 -> end=1 (start==end)\n            while (start < end) {\n                byte currentTrailer = buffer[end - 1];\n                if (currentTrailer == 0 || currentTrailer == ' ') {\n                    end--;\n                } else {\n                    // Stop trimming if we encounter a non-NUL/non-space character (i.e., a digit)\n                    break;\n                }\n            }\n        } else {\n            // If the last character is not NUL/space, check if it's an octal digit.\n            // Allows formats that omit the trailing NUL/space (e.g., \"777777777777\").\n            if (trailer < '0' || trailer > '7') {\n                // Use a helper method for exception message generation (assumed to exist)\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, end - 1, trailer));\n            }\n            // If it's a valid digit, `end` remains unchanged, and the digit will be parsed.\n        }\n\n        // After trimming spaces and NULs, start may equal end if the buffer was all spaces/NULs\n        // or became empty after trimming (e.g., \" \\0\"). The loop condition handles this.\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                 // Use a helper method for exception message generation (assumed to exist)\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Assume exceptionMessage helper method exists elsewhere in the class, e.g.:\n    // private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) { ... }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}