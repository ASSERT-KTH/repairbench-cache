{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim trailing NULs and spaces.\n        // Unlike the previous behavior, we will not throw an exception if the trailing space/NUL is missing.\n        // This allows for parsing fields like \"777777777777\" where the number occupies the entire field.\n        // Iterate backwards from the end, reducing 'end' until a non-space/NUL character is found\n        // or the start position is reached.\n        int C = end - 1; // Index of the last character\n        while (C >= start) {\n            final byte ch = buffer[C];\n            if (ch == 0 || ch == ' ') {\n                C--;\n            } else {\n                // Found the last non-null/space character.\n                // The number ends at index C, so the new 'end' should be C + 1.\n                break;\n            }\n        }\n        // Update end to point just past the last octal digit (or to start if all were spaces/NULs)\n        end = C + 1;\n\n        // If, after trimming spaces/NULs, start >= end, it implies the field was empty or contained only spaces/NULs.\n        // The loop below will not run, and the initial result of 0L will be returned, which is correct.\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Assuming exceptionMessage() is defined elsewhere and handles message formatting.\n                // It needs buffer, offset, length, the failing index (start), and the invalid byte.\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method used by the original code's exception messages.\n    // Included definition is illustrative, assuming it exists elsewhere in the actual TarUtils class.\n    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, byte currentByte) {\n        // A possible implementation (adapt as needed based on the original class context)\n        String EOL = System.getProperty(\"line.separator\", \"\\n\");\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Invalid byte \").append(currentByte).append(\" at offset \").append(idx - offset);\n        sb.append(\" in '\");\n        try {\n            // Attempt to show the relevant portion of the buffer as a string\n            // Be mindful of potential IndexOutOfBounds if offset/length are invalid, though checks should prevent this.\n            int displayLength = Math.min(length, buffer.length - offset);\n            sb.append(new String(buffer, offset, displayLength, java.nio.charset.StandardCharsets.ISO_8859_1));\n        } catch (Exception e) {\n            // Fallback if string conversion fails\n            sb.append(java.util.Arrays.toString(java.util.Arrays.copyOfRange(buffer, offset, offset + length)));\n        }\n        sb.append(\"' len=\").append(length);\n        return sb.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}