{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL according to the TAR specification,\n     * and may contain an additional trailing space or NUL.</p>\n     * <p>This method allows the trailing space/NUL to be omitted to handle\n     * implementations that use the space for an extra digit.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if an invalid octal digit is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases of leading NUL or buffer entirely NULs.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' '){\n            start++;\n        }\n\n        // Find the end of the octal digits by scanning backwards from the end,\n        // trimming trailing spaces and NUL bytes. This allows parsing numbers\n        // that are not terminated by NUL or space.\n        int digitEnd = end;\n        // Trim trailing NULs and spaces from the end\n        // This loop needs to handle the case where the buffer content after skipping\n        // leading spaces might be all spaces/NULs.\n        // It stops when it hits a non-space/NUL byte or when digitEnd <= start.\n        while (digitEnd > start) {\n            final byte currentByte = buffer[digitEnd - 1];\n            if (currentByte == ' ' || currentByte == 0) {\n                digitEnd--;\n            } else {\n                // Found the last character that is potentially part of the octal number.\n                // The parsing loop below will validate if it's actually an octal digit.\n                break;\n            }\n        }\n\n        // If after skipping leading spaces and trimming trailing terminators,\n        // the sequence is empty, return 0. Handles inputs like \" \", \"   \\0\", etc.\n        // It also handles the case where the input was just spaces/NULs originally.\n        if (start == digitEnd) {\n            return 0L;\n        }\n\n        // Parse the octal digits in the identified range [start, digitEnd)\n        for ( ;start < digitEnd; start++) {\n            final byte currentByte = buffer[start];\n\n            // CheckStyle:MagicNumber OFF\n            // Check if the character is a valid octal digit '0'-'7'\n            if (currentByte < '0' || currentByte > '7'){\n                // This assumes exceptionMessage helper exists and works as in the original class\n                // It's defined in the TarUtils class itself.\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Assume the helper method exceptionMessage exists elsewhere in the class as it was not provided\n    // in the buggy function snippet but is used by it.\n    // private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) { ... }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}