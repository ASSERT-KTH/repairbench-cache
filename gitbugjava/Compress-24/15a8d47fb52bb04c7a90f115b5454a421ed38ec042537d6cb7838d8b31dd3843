{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer may contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     * <p>This requirement regarding a trailing space or NUL is relaxed\n     * compared to the POSIX standard. The parser will stop when it\n     * encounters the first non-octal digit after the initial octal digits.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the length is less than 2 or if any\n     * non-octal digit, non-space, and non-NUL character is detected in the\n     * supposed octal area.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL or cases where the buffer starts with NUL (e.g., all NULs).\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Find the effective end by skipping ALL trailing NULs and spaces.\n        // This allows parsing numbers like \"777777777777\" which fill the buffer\n        // without a trailing NUL or space.\n        int effectiveEnd = end;\n        // Loop backwards from the end, decrementing effectiveEnd as long as we see NUL or space.\n        while (effectiveEnd > start) {\n             final byte trailer = buffer[effectiveEnd - 1];\n             if (trailer == 0 || trailer == ' '){\n                 effectiveEnd--;\n             } else {\n                 // Found the first character from the end that is not NUL or space.\n                 // This is the potential end of the octal number.\n                 break;\n             }\n        }\n\n        // If all characters after leading spaces were spaces or NULs (e.g. \"   \\0 \\0\" or \"   \")\n        if (effectiveEnd == start) {\n            return 0L;\n        }\n\n        // Parse octal digits from start up to (but not including) effectiveEnd\n        for ( ;start < effectiveEnd; start++) { // Note: loop modifies 'start' variable\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // Ensure the character is an octal digit\n            if (currentByte < '0' || currentByte > '7'){\n                // If a non-octal digit is found within the identified range, it's an error.\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist from original code context.\n    // Included here definition for completeness if needed, otherwise remove.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {\n        String s;\n        try {\n            s = new String(buffer, offset, length, \"UTF-8\"); // Or appropriate charset\n        } catch (Exception e) {\n            s = new String(buffer, offset, length); // Fallback\n        }\n        // Adjust offset to be relative to the start of the relevant buffer part\n        int relativeOffset = currentOffset - offset;\n        return \"Invalid byte \" + currentByte + \" at relative offset \" + relativeOffset + \" in '\" + s + \"' len=\" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}