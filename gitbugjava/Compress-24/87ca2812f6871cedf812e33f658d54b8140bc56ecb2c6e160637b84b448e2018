{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * <p>This method allows numbers that are not terminated by NUL or\n     * space according to the POSIX standard, as some old tar\n     * implementations used the full field length for the number.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     *                                   (Note: Throws only if an invalid byte is detected within the number)\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL explicitly as per Javadoc\n        // Check offset to avoid ArrayIndexOutOfBoundsException is not necessary\n        // because length is enforced to be >= 2\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // Find the end of the octal digits, which ideally ends in NUL or space,\n        // but might fill the entire field.\n        int parseEnd = end;\n        // Scan backwards from end to find the first non NUL/space character.\n        while (parseEnd > start) {\n            final byte currentByte = buffer[parseEnd - 1];\n            if (currentByte == 0 || currentByte == ' ') {\n                parseEnd--;\n            } else {\n                // Found a non-NUL/space character. This is where parsing should stop.\n                break;\n            }\n        }\n\n        // If all characters were spaces or NULs (or buffer was empty after skipping spaces)\n        if (parseEnd <= start) {\n            return 0L;\n        }\n\n        // Parse octal digits from start up to parseEnd\n        for ( ;start < parseEnd; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // Ensure current byte is an octal digit\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method to generate the exception message (assumed to exist elsewhere)\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {\n        String prefix = \"Invalid byte \" + currentByte + \" at offset \" + (idx - offset) + \" in '\";\n        // Try to decode the buffer segment as ASCII/ISO-8859-1 for display\n        // Replace NUL chars for better readability\n        String content = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1)\n                             .replace(\"\\0\", \"{NUL}\");\n        return prefix + content + \"' len=\" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}