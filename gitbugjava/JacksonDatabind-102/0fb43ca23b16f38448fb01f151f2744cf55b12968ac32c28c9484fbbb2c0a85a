{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Note! Should not skip if `property` null since that'd skip check\n        // for config overrides, in case of root value\n        //\n        // Original buggy code:\n        // if (property == null) { // <<<< BUG: This prevented checking config overrides\n        //    return this;\n        // }\n        // Fixed code: Proceed even if property is null to check config overrides\n\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n\n        // 18-Nov-2018, tatu: For [databind#2192], must check shape explicitly,\n        //    even if there's pattern\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        // Need to retain this code for custom patterns\n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            // Not sure if this is the best way to support TZs, but let's try\n            // either from explicit definition, or from serializers\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            // 20-Mar-2019, tatu: [databind#2275] Need to ensure TimeZone set for `SimpleDateFormat`\n            // NOTE: requires 1.7+\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        // Shape change only considered if neither explicit pattern nor number shape specified:\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        // No changes if nothing specified\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        /* Any changes? Need to create new instance; otherwise can return `this`.\n         * We will need a DateFormat, so we start with the default one...\n         */\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            // Let's see if we can perhaps just configure with StdDateFormat features?\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n        // 17-Jan-2018, tatu: As per [databind#1871], need to ensure we know what we are cloning\n        if (!(df0 instanceof SimpleDateFormat)) {\n            // 15-Sep-2019, tatu: Let's try to handle Shapes other than STRING here too,\n            //    possibly. But for now, require pattern for others.\n            // 24-Oct-2021, tatu: Make explicit that `Shape.STRING` is fine\n            if (asString) { // like, explicit JsonFormat.Shape.STRING? Fine.\n                // but otherwise must be a problem, can't re-configure\n            } else {\n                 serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n            }\n            // 19-Sep-2022, tatu: Should probably return `this` here...\n            return this;\n        }\n        // Either way, need to create copy, then modify.\n        // For serialization, `DateFormat`s are not thread-safe, must create copy separate copy\n        SimpleDateFormat df = (SimpleDateFormat) df0.clone(); // we know it's SimpleDateFormat\n        if (hasLocale) {\n            // Ugh. No way to change `Locale`, create copy; must re-create completely:\n            // 24-Oct-2021, tatu: Looks like `clone()` is not enough, locale not copied reliably?!\n            //    So need to create from scratch. Seems suspicious, may need reverting...\n            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        }\n        // And timezone may need to be set as well\n        TimeZone newTz = format.hasTimeZone() ? format.getTimeZone() : null;\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        // And finally, if shape was specified as String, need to ensure that's used\n        return withFormat(Boolean.FALSE, df);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}