{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    // Note: We want to resolve the prototype object, not the prototype\n    // property of the function. See PrototypeObjectType#resolveInternal.\n    if (prototype != null) {\n      prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n    }\n\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    // typeOfThis is declared as JSType, so the cast was incorrect.\n    typeOfThis = safeResolve(typeOfThis, t, scope);\n\n    boolean changed = false;\n    if (implementedInterfaces != null) {\n      ImmutableList.Builder<ObjectType> resolvedInterfaces =\n          ImmutableList.builder();\n      for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n      }\n      if (changed) {\n        implementedInterfaces = resolvedInterfaces.build();\n      }\n    }\n\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}