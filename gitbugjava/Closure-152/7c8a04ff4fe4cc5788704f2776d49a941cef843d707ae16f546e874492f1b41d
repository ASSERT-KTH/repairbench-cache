{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    // Resolve typeOfThis, but only update the field if it's actually an ObjectType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    // Don't cast if it's not an object type. The warning is generated\n    // upstream.\n    // TODO(dimvar): This is not ideal. The error should be generated here,\n    // but we must wait until the type is resolved. We should change the code\n    // structure to make this possible.\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n      // If resolvedTypeOfThis is not an ObjectType, we don't update typeOfThis.\n      // This avoids the ClassCastException. The invalid @this annotation should\n      // be reported by the type checker using the original annotation type\n      // or the resolved non-object type. Leave typeOfThis as potentially\n      // unresolved or holding its previous value.\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      // Similarly, check before casting. Although interfaces are generally expected\n      // to be ObjectTypes, resolve could theoretically return something else\n      // if the definition is invalid or involves unions/typedefs resolving late.\n      // However, the original code cast directly, implying this might be safe\n      // or handled differently. Let's stick to fixing only the reported bug\n      // for typeOfThis for now.\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}