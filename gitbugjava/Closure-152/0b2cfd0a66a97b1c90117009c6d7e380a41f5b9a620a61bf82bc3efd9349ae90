{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Resolve typeOfThis\n    // The result of resolution might be any JSType, including UnionType or primitives.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n\n    // The field typeOfThis requires an ObjectType.\n    // If resolution yielded an ObjectType, use it.\n    // Otherwise, use the generic ObjectType as a placeholder.\n    // Warnings about invalid @this types (non-object) are handled upstream (TypeCheck),\n    // as indicated by the original comment and TODO.\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n      // Use the built-in Object type as a fallback when the resolved type is not an ObjectType.\n      // This prevents ClassCastException and satisfies the field's type requirement.\n      // Assumes 'registry' field is available in FunctionType (which it typically is).\n      // If resolvedTypeOfThis was null, this also assigns a non-null default.\n      typeOfThis = registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      // Assuming interfaces always resolve to ObjectType. If not, this cast could also fail.\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        // Assuming subtypes always resolve to FunctionType. If not, this cast could fail.\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}