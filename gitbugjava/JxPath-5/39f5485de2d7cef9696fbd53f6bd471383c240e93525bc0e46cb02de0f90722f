{
    "generation": "    private int compareNodePointers(\n        NodePointer p1,\n        int depth1,\n        NodePointer p2,\n        int depth2)\n    {\n        if (depth1 < depth2) {\n            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n            return r == 0 ? -1 : r;\n        }\n        if (depth1 > depth2) {\n            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n            return r == 0 ? 1 : r;\n        }\n\n        // Depths are equal\n        if (p1 == null && p2 == null) {\n            return 0;\n        }\n        // If pointers are identical, they are equal\n        // We check identity because equals() might be too expensive.\n        if (p1 == p2) {\n            return 0;\n        }\n        // If p1 is null, p1 < p2, otherwise fall through\n        // After this, p1 is never null\n        if (p1 == null) {\n            return -1;\n        }\n        // If p2 is null, p1 > p2, otherwise fall through\n        // After this, p2 is never null\n        if (p2 == null) {\n            return 1;\n        }\n\n        // This handles the case p1 == p2 for non-null pointers\n        // Use equals for potentially different pointer implementations that are logically equal\n        if (p1.equals(p2)) {\n            return 0;\n        }\n\n        // If we are at the root level (depth == 1) and pointers are different,\n        // we need to handle comparisons between potentially different types of roots\n        // (like VariablePointer vs. Document root).\n        if (depth1 == 1) {\n            boolean p1IsVar = p1 instanceof VariablePointer;\n            boolean p2IsVar = p2 instanceof VariablePointer;\n\n            if (p1IsVar && p2IsVar) {\n                // Both are variables, compare their QNames\n                // QName implements Comparable\n                return ((VariablePointer) p1).getName().compareTo(\n                           ((VariablePointer) p2).getName());\n            }\n            else if (p1IsVar) { // p1 is variable, p2 is not\n                // Define an order: variables come before non-variables\n                return -1;\n            }\n            else if (p2IsVar) { // p2 is variable, p1 is not\n                // Define an order: non-variables come after variables\n                return 1;\n            }\n            else {\n                // Neither is a variable pointer, but they are different root pointers\n                // (e.g., roots of different documents). Comparing them is problematic\n                // as they don't belong to the same tree structure.\n                // Throwing an exception here indicates this unsupported comparison.\n                throw new JXPathException(\n                        \"Cannot compare pointers that do not belong to the same tree: '\"\n                                + p1 + \"' and '\" + p2 + \"'\");\n            }\n        }\n\n        // If depths are equal (> 1) and pointers are different,\n        // recursively compare their parents.\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n        if (r != 0) {\n            // If parents (or ancestors) have a defined order, use that order.\n            return r;\n        }\n\n        // If parents are the same (r == 0), it means p1 and p2 are siblings.\n        // Compare them based on their relative position under the common parent.\n        // We should have p1.parent != null because depth1 > 1\n        return p1.parent.compareChildNodePointers(p1, p2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}