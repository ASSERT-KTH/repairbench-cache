{
    "generation": "    private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments) {\n      int refCount = referenceInfo.references.size();\n      Reference declaration = referenceInfo.references.get(0);\n      Reference init = referenceInfo.getInitializingReference();\n      // If init is null, it means the variable is never initialized.\n      // The first reference after init (if init exists) is either the 2nd\n      // (if declaration and init are same) or 3rd reference overall.\n      // If init is null, the first reference after declaration is the 1st read (index 1).\n      int firstRefAfterInitIndex = (init == null) ? 1 : (declaration == init) ? 2 : 3;\n\n\n      if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n          value = init.getAssignedValue();\n        } else {\n          // Create a new node for variable that is never initialized.\n          Node srcLocation = declaration.getNode();\n          value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        // Value can be null if init node is VAR and has no assigned value.\n        // Example: var x; This case should be handled by isImmutableAndWellDefinedVariable check.\n        Preconditions.checkNotNull(value, \"Value is null for %s\", v.getName());\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      } else if (init != null && refCount == firstRefAfterInitIndex) {\n        // The variable likely only read once after initialization.\n        // Try some more complex inlining heuristics.\n        Reference reference = referenceInfo.references.get(\n            firstRefAfterInitIndex - 1);\n        Node value = init.getAssignedValue();\n        // Value could be null for `var x = void 0;` or `var x = undefined;`\n        // Ensure value is not null before proceeding with checks that depend on it.\n        // Also, canInline function likely expects a non-null value.\n        if (value == null) {\n             // Cannot inline null value using this heuristic.\n             return;\n        }\n\n        // Fix for issue 1053: Don't inline single-use variables initialized\n        // with names of non-constant variables. The value assigned might change\n        // between the initialization and the read due to side effects, and the\n        // current canInline check might not be sufficient for this specific case.\n        boolean valueIsPotentiallyChangingName = false;\n        if (value.isName() && !NodeUtil.isImmutableValue(value)) {\n          // Check if the assigned variable is known via scope analysis and not marked constant.\n          Var valueVar = init.getScope().getVar(value.getString());\n          if (valueVar == null || !isMarkedConstant(valueVar)) {\n             // If var is unknown (e.g., implicit global) or known but not constant,\n             // assume it might change between init and the single read.\n             valueIsPotentiallyChangingName = true;\n          }\n        }\n\n        // Only call canInline if the value is not a potentially changing variable name.\n        // Let canInline handle other cases (e.g., immutable values, literals, potentially safe names).\n        if (!valueIsPotentiallyChangingName && canInline(declaration, init, reference)) {\n          inline(v, declaration, init, reference);\n          staleVars.add(v);\n        }\n      } else if (declaration != init && init != null && refCount == 2) {\n         // This case means the variable is declared, initialized, and never read.\n         // init != null check added for safety.\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n          // The only reference is the initialization, remove the assignment and\n          // the variable declaration.\n          Node value = init.getAssignedValue();\n          // Value could be null for var x = void 0;\n          if (value != null) {\n             // Original code uses inlineWellDefinedVariable here. It replaces\n             // all references (just the init one) with the value.\n             inlineWellDefinedVariable(v, value, referenceInfo.references);\n             staleVars.add(v);\n          }\n           // If value is null, there's nothing to inline. Let RemoveUnusedVariables handle it.\n        }\n      }\n\n      // If this variable was not inlined normally, check if we can\n      // inline an alias of it. (If the variable was inlined, then the\n      // reference data is out of sync. We're better off just waiting for\n      // the next pass.)\n      if (!maybeModifiedArguments &&\n          !staleVars.contains(v) &&\n          referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n          // Inlining the variable based solely on well-defined and assigned\n          // once is *NOT* correct. We relax the correctness requirement if\n          // the variable is declared constant.\n        List<Reference> refs = referenceInfo.references;\n        // Start checking from the first reference that isn't the init/declaration.\n        int firstReadIndex = referenceInfo.getInitializeIndex();\n        if (firstReadIndex < 0) { // check if init exists\n             firstReadIndex = referenceInfo.getDeclarationIndex();\n        }\n        firstReadIndex++; // Start after init/declaration.\n\n\n        if (firstReadIndex < refs.size()) {\n            for (int i = firstReadIndex; i < refs.size(); i++) {\n              Node nameNode = refs.get(i).getNode();\n              // Check aliasCandidates only for NAME nodes that are being read.\n              if (nameNode != null && nameNode.isName() && aliasCandidates.containsKey(nameNode)) {\n                AliasCandidate candidate = aliasCandidates.get(nameNode);\n                // Check if the alias is valid and not already handled.\n                if (candidate != null && candidate.alias != v && // Don't alias self\n                    candidate.refInfo != null && // Safety check\n                    !staleVars.contains(candidate.alias) &&\n                    !isVarInlineForbidden(candidate.alias)) {\n\n                  Reference aliasInit = candidate.refInfo.getInitializingReference();\n                  // Ensure the alias has a valid initialization.\n                  if (aliasInit != null) {\n                      Node aliasValue = aliasInit.getAssignedValue();\n                      if (aliasValue != null) {\n                          // Attempt to inline the alias.\n                          inlineWellDefinedVariable(candidate.alias,\n                              aliasValue,\n                              candidate.refInfo.references);\n                          staleVars.add(candidate.alias);\n                          // Note: inlining the alias here might affect future alias lookups\n                          // if not careful, but staleVars check should prevent re-inlining.\n                      }\n                  }\n                }\n              }\n            }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}