{
    "generation": "    /**\n     * Method called to find out possible type refinements to use\n     * for deserialization.\n     *\n     * @since 2.7\n     */\n    public JavaType refineSerializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n\n        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n        //    now-deprecated secondary methods; this because while\n        //    direct sub-class not yet retrofitted may only override\n        //    those methods. With 2.8 or later we may consider removal\n        //    of these methods\n\n\n        // Ok: start by refining the main type itself; common to all types\n        Class<?> serClass = findSerializationType(a);\n        if (serClass != null) {\n            if (type.hasRawClass(serClass)) {\n                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n                //    static typing this way\n                type = type.withStaticTyping();\n            } else {\n                // 19-May-2016, tatu: As per [databind#1231], may need to allow specialization (narrowing)\n                //   as well as widening (generalization).\n                 Class<?> currRaw = type.getRawClass();\n                 try {\n                     // Check if widening is possible\n                     if (serClass.isAssignableFrom(currRaw)) { // common case\n                         type = tf.constructGeneralizedType(type, serClass);\n                     }\n                     // Check if narrowing is possible\n                     else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well\n                         // If so, should we force static typing? For now, yes seems like a safe choice\n                         // (note: same logic is used for serialization key/value types)\n                         type = tf.constructSpecializedType(type, serClass);\n                         // 22-May-2019, tatu: [databind#2352] make sure static typing is enabled\n                         type = type.withStaticTyping();\n                     }\n                     // If neither, incompatible type\n                     else {\n                         throw new JsonMappingException(null,\n                                 String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                         type, serClass.getName()));\n                     }\n                 // Should not get other exceptions, but never say never:\n                 } catch (IllegalArgumentException iae) {\n                      throw new JsonMappingException(null,\n                              String.format(\"Failed to refine serialization type %s with concrete-type annotation (value %s), from '%s': %s\",\n                                      type, serClass.getName(), a.getName(), iae.getMessage()),\n                                      iae);\n                 }\n            }\n        }\n        // Then further processing for container types\n\n        // First, key type (for Maps, Map-like types):\n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            // 20-Oct-2016, tatu: Need to skip for `EnumMap`s, see [databind#1384]\n            //    (key is always `Enum` class, can't override)\n            if (keyType != null) {\n                Class<?> keyClass = findSerializationKeyType(a, keyType);\n                if (keyClass != null) {\n                    if (keyType.hasRawClass(keyClass)) {\n                        keyType = keyType.withStaticTyping();\n                    } else {\n                        Class<?> currRaw = keyType.getRawClass();\n                        try {\n                            // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\n                            //   specialize (narrow) type sometimes, even if more commonly opposite\n                            //   is needed.\n                            if (keyClass.isAssignableFrom(currRaw)) { // common case\n                                keyType = tf.constructGeneralizedType(keyType, keyClass);\n                            } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                                keyType = tf.constructSpecializedType(keyType, keyClass);\n                                keyType = keyType.withStaticTyping(); // need static typing in this case\n                            } else {\n                                throw new JsonMappingException(null,\n                                        String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                                keyType, keyClass.getName()));\n                            }\n                        } catch (IllegalArgumentException iae) {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Failed to refine key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                            type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                            iae);\n                        }\n                    }\n                    type = ((MapLikeType) type).withKeyType(keyType);\n                }\n            }\n        }\n\n        JavaType contentType = type.getContentType();\n        if (contentType != null) { // collection[like], map[like], array, reference\n            // And then value types for all containers:\n           Class<?> contentClass = findSerializationContentType(a, contentType);\n           if (contentClass != null) {\n               if (contentType.hasRawClass(contentClass)) {\n                   contentType = contentType.withStaticTyping();\n               } else {\n                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\n                   //   specialize (narrow) type sometimes, even if more commonly opposite\n                   //   is needed.\n                   Class<?> currRaw = contentType.getRawClass();\n                   try {\n                       if (contentClass.isAssignableFrom(currRaw)) { // common case\n                           contentType = tf.constructGeneralizedType(contentType, contentClass);\n                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                           contentType = tf.constructSpecializedType(contentType, contentClass);\n                           contentType = contentType.withStaticTyping(); // need static typing in this case\n                       } else {\n                           throw new JsonMappingException(null,\n                                   String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                           contentType, contentClass.getName()));\n                       }\n                   } catch (IllegalArgumentException iae) { // shouldn't really happen\n                       throw new JsonMappingException(null,\n                               String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                       type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                       iae);\n                   }\n               }\n               type = type.withContentType(contentType);\n           }\n        }\n        return type;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}