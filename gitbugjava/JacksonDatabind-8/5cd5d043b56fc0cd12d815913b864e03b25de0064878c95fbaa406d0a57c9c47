{
    "generation": "    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n    {\n        final int mask = (1 << typeIndex);\n        _hasNonDefaultCreator = true;\n        AnnotatedWithParams oldOne = _creators[typeIndex];\n        if (oldOne != null) {\n            boolean oldExplicit = (_explicitCreators & mask) != 0;\n\n            if (oldExplicit) { // If the existing creator was explicit...\n                // ...and new one is NOT, ignore new one\n                if (!explicit) {\n                    return; // Keep existing explicit one\n                }\n                // Both explicit: verify, but only if they are in same class\n                // (sub-class definition overrides parent)\n                if (oldOne.getClass() == newOne.getClass()) {\n                    // Both explicit, same class: conflict.\n                    // Note: Parameter handling could be added here to refine conflict detection,\n                    // but for the reported bug, simply ensuring this check only happens for\n                    // explicit creators is the key.\n                    throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                            +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n                }\n                // Otherwise, different classes: new explicit one overrides old explicit one (subclass override)\n                // Fall through to replace below.\n\n            } else { // Existing creator was implicit.\n                // New one is explicit? New one is the winner. Fall through to replace.\n                // New one is also implicit? Let new one win. Fall through to replace.\n                // This removes the original bug where an exception was thrown for duplicate implicit\n                // creators found in the same class.\n            }\n            // If we reach here, the new creator is allowed to replace the old one.\n        }\n\n        // Ok, we'll replace or add 'newOne'. Need to register associated explicit marker:\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n        _creators[typeIndex] = _fixAccess(newOne);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}