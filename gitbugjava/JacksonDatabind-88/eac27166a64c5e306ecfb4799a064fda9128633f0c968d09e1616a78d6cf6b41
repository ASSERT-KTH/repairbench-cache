{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n         *    check if any generics info is added; and only then ask factory\n         *    to do translation when necessary\n         */\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // note: may want to try combining with specialization (esp for EnumMap)?\n            JavaType t;\n            try {\n                // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n                //    compatibility -- needed later anyway, and not doing so may open\n                //    security issues.\n                 t = tf.constructFromCanonical(id);\n            } catch (IllegalArgumentException e) {\n                 // 25-Nov-2017, tatu: Need to wrap exception type for test\n                 throw new IllegalArgumentException(\"Invalid type id '\"+id+\"': \"+e.getMessage(), e);\n            }\n            // We must be assignable to the base type too\n            if (!_baseType.getRawClass().isAssignableFrom(t.getRawClass())) {\n                 // 11-Nov-2017, tatu: Need to actually verify type compatibility,\n                 //    if not, handle error same way as resolution failure\n                 // 25-Nov-2017, tatu: Also needs specific exception, message\n                 throw ctxt.invalidTypeIdException(_baseType, id, String.format(\n                         \"Specified type (%s) not subtype of base type (%s)\",\n                         t.getRawClass().getName(), _baseType));\n            }\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //   DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            // ... meaning that we really should never get here.\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        // 28-Aug-2017, tatu: As per [databind#1735], need to ensure type compatibility\n        //    Also, should reuse existing method, not create new type\n        if (!_baseType.getRawClass().isAssignableFrom(cls)) {\n             throw ctxt.invalidTypeIdException(_baseType, id, String.format(\n                     \"Specified type (%s) not subtype of base type (%s)\",\n                     cls.getName(), _baseType));\n        }\n        return tf.constructSpecializedType(_baseType, cls);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}