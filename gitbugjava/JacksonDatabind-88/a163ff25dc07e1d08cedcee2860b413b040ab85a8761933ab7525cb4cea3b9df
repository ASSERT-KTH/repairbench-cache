{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n         *    check if any generics info is added; and only then ask factory\n         *    to do translation when necessary\n         */\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // note: may want to try combining with specialization (esp for EnumMap)?\n            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n            //    compatibility -- needed later anyway, and not doing so may open\n            //    security issues.\n            JavaType t = tf.constructFromCanonical(id);\n                // Probably cleaner to have a method in `TypeFactory` but can't add in patch\n            // 06-Jan-2018, tatu: Important: prevent invalid subtypes, combine checks.\n            //    Usually checked later on, but for canonical type ids it is possible\n            //    we may miss the check otherwise. Let's add specifically here, just in case\n            //    Also: let's not block conversion to `Object.class` ever.\n            if (!_baseType.isJavaLangObject()) {\n                // Note: we are trying to use the BAD type id for error reporting, NOT the resolved\n                // one (which is typically what is passed to error handler)\n                if (!t.isAssignableTo(_baseType)) {\n                    throw ctxt.invalidTypeIdException(_baseType, id, String.format(\n\"Not a subtype of endpoint type %s\", _baseType.getRawClass().getName()));\n                }\n            }\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //   DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            // ... meaning that we really should never get here.\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        // 11-Oct-2015, tatu: Important: must narrow down type to `cls`, from `_baseType`.\n        // 29-Sep-2017, tatu: And ensure this is compatible type...\n        JavaType subType = tf.constructSpecializedType(_baseType, cls);\n        if (!_baseType.isAssignableTo(subType)) {\n            // 13-Oct-2017, tatu: Perhaps slightly cleaner way... requires bit more digging tho\n             throw ctxt.invalidTypeIdException(_baseType, id, String.format(\n\"Not a subtype of endpoint type %s\", _baseType.getRawClass().getName()));\n        }\n        return subType;\n//        return tf.constructSpecializedType(_baseType, cls);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}