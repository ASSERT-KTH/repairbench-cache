{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n         *    check if any generics info is added; and only then ask factory\n         *    to do translation when necessary\n         */\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // note: may want to try combining with specialization (esp for EnumMap)?\n            JavaType t = tf.constructFromCanonical(id);\n            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n            //    compatibility -- needed later anyway, and not doing so may open\n            //    security issues.\n             if (_baseType != null) {\n                 // 18-Aug-2017, tatu: Ideally would allow specialization BUT that won't work\n                 //    with canonical types. So... requires exact match? Or, for reading,\n                 //    perhaps ok to requires subtype? For now, must be raw supertype\n                 Class<?> raw = t.getRawClass();\n                 Class<?> baseRaw = _baseType.getRawClass();\n                 if (!baseRaw.isAssignableFrom(raw)) {\n                     // 13-Mar-2019, tatu: Ran into an issue here; nominal type may be abstract,\n                     //   but actual type concrete. Eg base `Object`, actual `String`.\n                     //   Need to allow this. May need to revisit this topic in future.\n                     // NOTE! We are only checking RAW types, not generic parameters.\n                     // Fine for now.\n                     // TODO: try to figure out if we can get full check working\n                      throw ctxt.invalidTypeIdException(_baseType, id, String.format(\n                              \"Not a subtype of baseline type %s\", _baseType.toCanonical()));\n                 }\n                 // TODO: 13-Mar-2019, tatu: For 2.10 should figure out how to implement\n                 //   actual specialization...\n             }\n             return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //   DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            // ... meaning that we really should never get here.\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        // 18-Aug-2017, tatu: This is really the desired path for all cases, but\n        //   unfortunately does not work for generic types\n        // TODO: try to reconcile in 2.10\n        if (_baseType != null && _baseType.getRawClass() == cls) {\n            // 19-Dec-2017, tatu: A work-around: if type is the same, can just use base type,\n            //    since it has richer information\n            return _baseType;\n        }\n        return tf.constructSpecializedType(_baseType, cls);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}