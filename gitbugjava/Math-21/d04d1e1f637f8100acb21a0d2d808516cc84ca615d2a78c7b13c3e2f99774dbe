{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData(); // Note: This might modify the input matrix data if getData() returns a reference.\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            swap[r] = r;\n            for (int i = r + 1; i < order; ++i) {\n                int ii  = index[i];\n                int isi = index[swap[r]];\n                if (c[ii][ii] > c[isi][isi]) {\n                    swap[r] = i;\n                }\n            }\n\n\n            // swap elements\n            if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n            }\n\n            // check diagonal element\n            int ir = index[r];\n            if (c[ir][ir] < small) {\n                // Found a diagonal element below the threshold.\n\n                // Check remaining diagonal elements for significant negative values,\n                // indicating the matrix is not positive semidefinite.\n                for (int i = r; i < order; ++i) {\n                    if (c[index[i]][index[i]] < -small) {\n                        // there is at least one sufficiently negative diagonal element,\n                        // the symmetric positive semidefinite matrix is wrong\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);\n                    }\n                }\n\n                // All remaining diagonal elements are close to zero or small positive.\n                // Consider the rank to be 'r' (the number of steps completed successfully).\n                // Stop the decomposition.\n                loop = false; // Exit the loop.\n                // DO NOT increment r here. The rank is the number of columns successfully processed.\n\n            } else {\n                // Diagonal element is large enough, perform Cholesky step.\n\n                // transform the matrix\n                final double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt;\n                final double inverse  = 1.0 / sqrt; // Use 1.0 to ensure double division\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i];\n                    final double e = inverse * c[ii][ir];\n                    b[i][r] = e;\n                    // Update Schur complement in matrix c\n                    c[ii][ii] -= e * e;\n                    for (int j = r + 1; j < i; ++j) {\n                        final int ij = index[j];\n                        final double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f; // Maintain symmetry\n                    }\n                }\n\n                // prepare next iteration\n                // Increment rank and check if loop should continue\n                loop = ++r < order;\n            }\n        } // end main loop\n\n        // build the root matrix\n        rank = r; // The final rank is the value of r reached.\n        root = MatrixUtils.createRealMatrix(order, rank);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < rank; ++j) {\n                // Permute rows of b back to original order for root matrix L\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}