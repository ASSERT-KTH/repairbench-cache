{
    "generation": "    /**\n     * @param contentTypeSer Optional explicit type information serializer\n     *    to use for contained values (only used for properties that are\n     *    of container type)\n     */\n    @SuppressWarnings(\"deprecation\")\n    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // do we have annotation that forces type to use (to declared type or its super type)?\n        JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n\n        // Container types can have separate type serializers for content (value / element) type\n        if (contentTypeSer != null) {\n            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is\n             *    type information for contents. Should work well (for JAXB case); can be\n             *    revisited if this causes problems.\n             */\n            if (serializationType == null) {\n//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            // Not exactly sure why, but this used to occur; better check explicitly:\n            if (ct == null) {\n                // 03-Jun-2016, tatu: Let's add some sanity checks for common issues, like\n                //    trying to apply refersializers on non-container types\n                if (declaredType.isContainerType() || declaredType.isReferenceType()) {\n                    throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property '\"\n                            +propDef.getName()+\"' (of type \"+_beanDesc.getType()+\"); serialization type \"+serializationType+\" has no content\");\n                }\n                // otherwise, let's just quietly ignore \u063a seems likely to be a configuration/setup error...\n                // -> 18-Oct-2016, tatu: Actually, let's not do that: configuration by itself should not hide things.\n                //    But ideally we'd only fail if there's relevant annotation? For now, keep failing\n                throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property '\"\n                        +propDef.getName()+\"' (of type \"+_beanDesc.getType()+\"); serialization type \"+serializationType+\" has no content\");\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n            ct = serializationType.getContentType();\n        }\n        \n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n\n        // 18-Oct-2016, tatu: [databind#1361] Need to ensure that default value is calculated\n        //  using the property definition, not from global defaults, for structure types\n        //  since they are unlikely to have global defaults.\n        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(), _defaultInclusion)\n                .withOverrides(propDef.findInclusion());\n\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n        \n        switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // 18-Oct-2016, tatu: As per [databind#1361], need calculation refinement, check\n            //   POJO properties for objects, exclusion values for primitives\n\n            Object defValue;\n            if (actualType.isContainerType() || actualType.isReferenceType()) {\n                 // 23-Apr-2018, tatu: For [databind#1998], need to separate default value definition\n                 //    (fixed, structural) from possibly changing inclusion criteria. Let's fetch\n                 //    default value first:\n                 defValue = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            } else if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {\n                defValue = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } else {\n                defValue = getDefaultValue(actualType);\n            }\n            if (defValue == null) {\n                suppressNulls = true;\n            } else {\n                 // 23-Apr-2018, tatu: For [databind#1998], need to ensure that \"empty\" marker\n                 //    is NOT used as default value, but only for deciding whether to\n                 //    consider property itself potentially suppressable\n                 if (defValue == BeanPropertyWriter.MARKER_FOR_EMPTY) {\n                     // For container/reference types, leave valueToSuppress as null, keep suppressNulls false,\n                     // and let `BeanPropertyWriter.serializeAsField` handle the logic for non-empty/present checks\n                 } else {\n                     valueToSuppress = defValue;\n                     if (defValue.getClass().isArray()) {\n                         valueToSuppress = ArrayBuilders.getArrayComparator(defValue);\n                     }\n                 }\n            }\n            // 23-Apr-2018, tatu: [databind#1998] Need to ensure that default check is properly done,\n            //    so let `BeanPropertyWriter` do it. Note that `valueToSuppress` is only\n            //    used for initial check: it is NOT the value used for comparisons.\n            //    Need to keep `suppressNulls` as `false` pending check for actual default value comparison.\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            // 12-Jul-2016, tatu: [databind#1256] Need to use `actualType` not `declaredType`\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            // 12-Jul-2016, tatu: [databind#1256] Need to use `actualType` not `declaredType`\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }\n        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n        // How about custom null serializer?\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n        // And then, handling of unwrapping\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n        return bpw;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}