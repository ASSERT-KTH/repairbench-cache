{
    "generation": "  /** {@inheritDoc} */\n  @Override\n  public void integrate(final ExpandableStatefulODE equations, final double t)\n      throws MathIllegalStateException, MathIllegalArgumentException {\n\n    sanityChecks(equations, t);\n    setEquations(equations);\n    final boolean forward = t > equations.getTime();\n\n    // create some internal working arrays\n    final double[] y0  = equations.getCompleteState();\n    final double[] y = y0.clone();\n    final int stages = c.length + 1;\n    final double[][] yDotK = new double[stages][y.length];\n    final double[] yTmp    = y0.clone();\n    final double[] yDotTmp = new double[y.length];\n\n    // set up an interpolator sharing the integrator arrays\n    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n    interpolator.reinitialize(this, yTmp, yDotK, forward,\n                              equations.getPrimaryMapper(), equations.getSecondaryMappers());\n    interpolator.storeTime(equations.getTime());\n\n    // set up integration control objects\n    stepStart         = equations.getTime();\n    double  hNew      = 0;\n    boolean firstTime = true;\n    initIntegration(equations.getTime(), y0, t);\n\n    // main integration loop\n    isLastStep = false;\n    do {\n\n      interpolator.shift();\n\n      // iterate over step size, ensuring local normalized error is smaller than 1\n      double error = 10;\n      while (error >= 1.0) {\n\n        if (firstTime || !fsal) {\n          // first stage\n          computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        if (firstTime) {\n          final double[] scale = new double[mainSetDimension];\n          if (vecAbsoluteTolerance == null) {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n              }\n          } else {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);\n              }\n          }\n          // Initialize the step size proposal\n          hNew = initializeStep(forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n          firstTime = false;\n        }\n        // else: hNew has been computed in the previous iteration after a rejection\n\n        // Filter the proposed step size for the current attempt.\n        // This ensures the step size respects the final time t, min/max step bounds.\n        final boolean isLastStepAttempt = forward ? (stepStart + hNew >= t) : (stepStart + hNew <= t);\n        stepSize = filterStep(hNew, forward, isLastStepAttempt);\n\n\n        // next stages: compute derivatives using the filtered stepSize\n        for (int k = 1; k < stages; ++k) {\n\n          for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n              sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n          }\n\n          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n        }\n\n        // estimate the state at the end of the step using the filtered stepSize\n        for (int j = 0; j < y0.length; ++j) {\n          double sum    = b[0] * yDotK[0][j];\n          for (int l = 1; l < stages; ++l) {\n            sum    += b[l] * yDotK[l][j];\n          }\n          yTmp[j] = y[j] + stepSize * sum;\n        }\n\n        // estimate the error at the end of the step using the filtered stepSize\n        error = estimateError(yDotK, y, yTmp, stepSize);\n        if (error >= 1.0) {\n          // reject the step and propose a new step size for the next attempt\n          final double factor =\n              FastMath.min(maxGrowth,\n                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n          // Propose the step size for the next attempt based on the current rejected stepSize.\n          // Do not filter here; filtering happens at the top of the loop.\n          hNew = stepSize * factor;\n        }\n        // else: error < 1.0, the loop will exit, step accepted.\n\n      } // End of while (error >= 1.0)\n\n      // local error is small enough: accept the step, trigger events and step handlers\n      // The accepted step size is the value of 'stepSize' from the last iteration.\n      interpolator.storeTime(stepStart + stepSize);\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);\n      stepStart = acceptStep(interpolator, y, yDotTmp, t); // updates stepStart, isLastStep\n      System.arraycopy(y, 0, yTmp, 0, y.length); // Update yTmp for interpolator internal state?\n\n      if (!isLastStep) {\n\n          // prepare next step\n          interpolator.storeTime(stepStart);\n\n          if (fsal) {\n              // save the last evaluation for the next step\n              System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);\n          }\n\n          // stepsize control for next step\n          // Propose the step size for the *next* integration step based on the accepted stepSize and error\n          final double factor =\n              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp))); // error is < 1.0 here\n          final double scaledH = stepSize * factor;\n          final double nextT = stepStart + scaledH; // stepStart has been updated by acceptStep\n          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n          // Filter the proposal for the next integration step.\n          // This value 'hNew' will be used in the next iteration of the do-while loop.\n          hNew = filterStep(scaledH, forward, nextIsLast);\n\n          // Removed the potentially problematic final adjustment block, filterStep should handle it.\n          // final double  filteredNextT      = stepStart + hNew;\n          // final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);\n          // if (filteredNextIsLast) {\n          //     hNew = t - stepStart;\n          // }\n\n      }\n\n    } while (!isLastStep);\n\n    // dispatch results\n    equations.setTime(stepStart);\n    equations.setCompleteState(y);\n\n    resetInternalState();\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}