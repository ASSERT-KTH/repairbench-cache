{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    if (type == MSG_LOGIN) {\n\n        // ... original MSG_LOGIN branch ...\n\n    } else if (type == MSG_HEARTBEAT) {\n\n        // ... original MSG_HEARTBEAT branch ...\n\n    } else if (type == MSG_ADDRESS_REQUEST) {\n\n        // ... original MSG_ADDRESS_REQUEST branch ...\n\n    } else if (type == MSG_TIME_REQUEST) {\n\n        // ... original MSG_TIME_REQUEST branch ...\n\n    } else if (type == MSG_X1_GPS) {\n\n        // ... original MSG_X1_GPS branch ...\n\n    } else if (type == MSG_X1_PHOTO_INFO) {\n\n        // ... original MSG_X1_PHOTO_INFO branch ...\n\n    } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n\n        // ... original MSG_WIFI branches ...\n\n    } else if (type == MSG_INFO) {\n\n        // ... original MSG_INFO branch ...\n\n    } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n\n        // ... original MSG_LBS_MULTIPLE_3 branch ...\n\n    } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n            || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n            || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n\n        // ... original multi-LBS/WIFI branches ...\n\n    } else if (type == MSG_STRING) {\n\n        // ... original MSG_STRING branch ...\n\n    } else if (type == MSG_BMS) {\n\n        // ... original MSG_BMS branch ...\n\n    } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n\n        // ... original MSG_STATUS (22\u2010byte) branch ...\n\n    } else if (isSupported(type)) {\n\n        if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n            return null; // multi-lbs message\n        }\n\n        // First handle GPS or last location\n        if (hasGps(type)) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        } else {\n            getLastLocation(position, null);\n        }\n\n        // ======== New handling for ASCII event file lists ========\n        // If the remaining payload contains \"EVENT_\", treat it as a follow-up\n        // to a prior alarm event and extract the alarm code from the last\n        // course byte parsed by decodeGps (low byte of course).\n        String ascii = buf.toString(buf.readerIndex(), buf.readableBytes(), StandardCharsets.US_ASCII);\n        if (ascii.contains(\"EVENT_\")) {\n            // The low byte of the course field was the last byte read by decodeGps.\n            // readerIndex() now points just after course LSB, so LSB is at readerIndex()-1.\n            int eventType = buf.getUnsignedByte(buf.readerIndex() - 1);\n            position.set(Position.KEY_ALARM, decodeAlarm(eventType));\n            return position;\n        }\n        // =============================================================\n\n        if (hasLbs(type) && buf.readableBytes() > 6) {\n            boolean hasLength = hasStatus(type)\n                    && type != MSG_LBS_STATUS\n                    && type != MSG_LBS_ALARM\n                    && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);\n            decodeLbs(position, buf, type, hasLength);\n        }\n\n        if (hasStatus(type)) {\n            decodeStatus(position, buf);\n            if (variant == Variant.OBD6) {\n                int signal = buf.readUnsignedShort();\n                int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                position.set(Position.KEY_SATELLITES, satellites);\n                position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                buf.readUnsignedByte(); // language\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                buf.readUnsignedByte(); // working mode\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n            } else {\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n            }\n        }\n\n        // ... rest of isSupported(type) branch unchanged ...\n\n    } else if (type == MSG_ALARM) {\n\n        // ... original MSG_ALARM branch ...\n\n    } else {\n\n        if (dataLength > 0) {\n            buf.skipBytes(dataLength);\n        }\n        if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n        return null;\n\n    }\n\n    if (hasLanguage(type)) {\n        buf.readUnsignedShort();\n    }\n\n    if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n        position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n    }\n\n    sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}