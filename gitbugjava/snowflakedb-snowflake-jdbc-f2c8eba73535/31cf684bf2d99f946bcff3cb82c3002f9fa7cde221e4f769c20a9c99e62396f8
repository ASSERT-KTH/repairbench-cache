{
    "generation": "  static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {\n    // Check if the response is null first. If null, it implies an error occurred before getting a response,\n    // which might be retryable depending on the context, but this function focuses on HTTP status codes.\n    // The original logic effectively returned false for null response due to the first `response != null && ...` condition.\n    // We maintain this behavior.\n    if (response == null) {\n      return false; // Cannot determine non-retryable status from a null response.\n    }\n    int statusCode = response.getStatusLine().getStatusCode();\n\n    // A status code is considered non-retryable if it meets all the following conditions:\n    // 1. It's not a server error (5xx). Codes < 500 or >= 600 pass this check.\n    // 2. It's not 408 (Request Timeout), which is typically retryable.\n    // 3. It's not 429 (Too Many Requests), which is typically retryable after a delay.\n    // 4. It's not 403 (Forbidden) *if* the `retryHTTP403` flag is set to true.\n    return (statusCode < 500 || statusCode >= 600) // Condition 1: Exclude 5xx server errors\n        && statusCode != 408 // Condition 2: Exclude 408 Request Timeout\n        && statusCode != 429 // Condition 3: Exclude 429 Too Many Requests (Fix for the failing test)\n        && (!retryHTTP403 || statusCode != 403); // Condition 4: Exclude 403 if retry is enabled for it\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}