{
    "generation": "  static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {\n    // A non-retryable response is one where the status code indicates a final state\n    // or an error that shouldn't be retried automatically.\n    // Retryable codes typically include:\n    // - Server errors (5xx)\n    // - Request Timeout (408)\n    // - Too Many Requests (429)\n    // - Forbidden (403) if retryHTTP403 is true\n\n    // The function returns true if the code IS non-retryable, false otherwise.\n    if (response == null) {\n      return true; // Cannot determine status, assume non-retryable\n    }\n    int statusCode = response.getStatusLine().getStatusCode();\n\n    // Check for explicitly retryable codes first (makes logic clearer)\n    if (statusCode >= 500 && statusCode < 600) { // Server Errors (5xx) are generally retryable\n      return false;\n    }\n    if (statusCode == 408) { // Request Timeout\n      return false;\n    }\n    if (statusCode == 429) { // Too Many Requests\n      return false;\n    }\n    if (retryHTTP403 && statusCode == 403) { // Forbidden, but retry is requested\n      return false;\n    }\n\n    // If none of the above retryable conditions are met, the code is considered non-retryable.\n    // This includes 1xx, 2xx, 3xx, most 4xx (except 408, 429, and 403 when retry is enabled), and 6xx+ codes.\n    return true;\n\n    /* Original logic explanation and why it failed:\n     * return response != null\n     *     && (response.getStatusLine().getStatusCode() < 500 // True for 1xx, 2xx, 3xx, 4xx\n     *         || response.getStatusLine().getStatusCode() >= 600) // True for 6xx+\n     *     // The above condition intends to exclude 5xx codes (making them retryable)\n     *     && response.getStatusLine().getStatusCode() != 408 // Excludes 408 (making it retryable)\n     *     && (!retryHTTP403 || response.getStatusLine().getStatusCode() != 403); // Excludes 403 if retryHTTP403 is true (making it retryable)\n     *\n     * The bug was that HTTP 429 was not explicitly excluded.\n     * For statusCode = 429:\n     * - (429 < 500 || 429 >= 600) -> true\n     * - 429 != 408 -> true\n     * - (!retryHTTP403 || 429 != 403) -> true (regardless of retryHTTP403)\n     * Result: true && true && true && true -> true (Non-retryable), which is incorrect.\n     *\n     * Minimal Fix by adding '&& response.getStatusLine().getStatusCode() != 429':\n     * static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {\n     *   return response != null\n     *       && (response.getStatusLine().getStatusCode() < 500\n     *           || response.getStatusLine().getStatusCode() >= 600)\n     *       && response.getStatusLine().getStatusCode() != 408 // request timeout\n     *       && response.getStatusLine().getStatusCode() != 429 // too many requests\n     *       && (!retryHTTP403 || response.getStatusLine().getStatusCode() != 403);\n     * }\n     * This also works, but the refactored version above might be slightly clearer by explicitly checking retryable cases.\n     * Providing the minimally changed version as requested.\n     */\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}