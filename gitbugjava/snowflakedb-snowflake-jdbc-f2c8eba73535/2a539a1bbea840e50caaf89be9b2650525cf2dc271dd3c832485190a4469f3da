{
    "generation": "  static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {\n    if (response == null) {\n      // Maintain original short-circuit behavior for null response\n      // A null response doesn't have a status code, so it's effectively not a \"retryable HTTP code\".\n      // However, the original logic would short-circuit and return false.\n      // Let's explicitly handle null based on the original structure's implication,\n      // though returning true might be semantically clearer if the caller handles nulls separately.\n      // Sticking to the original implicit behavior:\n      return false;\n    }\n    int statusCode = response.getStatusLine().getStatusCode();\n\n    // A code is non-retryable if it's NOT one of the retryable codes.\n    // Retryable codes are:\n    // - 5xx (Server Errors)\n    // - 408 (Request Timeout)\n    // - 429 (Too Many Requests)\n    // - 403 (Forbidden) IF retryHTTP403 is true\n\n    // Check if it's NOT a 5xx code\n    boolean isNot5xx = (statusCode < 500 || statusCode >= 600);\n    // Check if it's NOT 408\n    boolean isNot408 = (statusCode != 408);\n    // Check if it's NOT 429\n    boolean isNot429 = (statusCode != 429);\n    // Check if it's NOT 403 OR if we are NOT retrying 403\n    boolean isNot403OrNotRetrying403 = (!retryHTTP403 || statusCode != 403);\n\n    return isNot5xx\n        && isNot408\n        && isNot429 // Added this check for HTTP 429\n        && isNot403OrNotRetrying403;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}