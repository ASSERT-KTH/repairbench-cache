{
    "generation": "  static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {\n    if (response == null) {\n      // Consistent with original behavior: (response != null && ...) makes a null response retryable.\n      return false;\n    }\n    int statusCode = response.getStatusLine().getStatusCode();\n\n    // A status code is considered non-retryable if all the following conditions are true:\n    // 1. The status code is NOT a server error (500-599). Server errors are retryable.\n    //    (statusCode < 500 || statusCode >= 600) is false for 5xx codes, making them retryable.\n    // 2. The status code is NOT 408 (Request Timeout), which is retryable.\n    //    (statusCode != 408) is false for 408, making it retryable.\n    // 3. The status code is NOT 429 (Too Many Requests), which is retryable. This is the fix.\n    //    (statusCode != 429) is false for 429, making it retryable.\n    // 4. The handling for 403 (Forbidden):\n    //    - If retryHTTP403 is true and statusCode is 403, it's retryable.\n    //      In this case, (!retryHTTP403 || statusCode != 403) evaluates to (false || false) = false, making it retryable.\n    //    - Otherwise (e.g., retryHTTP403 is false for a 403, or statusCode is not 403),\n    //      this condition part evaluates to true, contributing to non-retryable status.\n    return (statusCode < 500 || statusCode >= 600)\n        && statusCode != 408\n        && statusCode != 429 // Added: 429 (Too Many Requests) should be retryable\n        && (!retryHTTP403 || statusCode != 403);\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}