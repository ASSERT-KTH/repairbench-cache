{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    // Check if the call target is the global function \"String\".\n    // We don't want to fold methods named \"String\".\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      //\n      // This optimization is only valid if String is the global String\n      // function and if the argument is an immutable primitive. We rely\n      // on the VarCheck pass to ensure that String has not been redefined.\n      Node value = callTarget.getNext();\n\n      // Check for exactly one argument that is an immutable value.\n      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n        // Detach the value before associating it with the new ADD node.\n        Node detachedValue = value.detach();\n\n        // Create the ADD node: '' + value\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget), // Use callTarget's source info for the empty string\n            detachedValue);                   // Attach the detached value here\n        addition.srcrefTree(n); // Copy source info from the original CALL node\n\n        // Replace the original CALL node with the new ADD node.\n        n.replaceWith(addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}