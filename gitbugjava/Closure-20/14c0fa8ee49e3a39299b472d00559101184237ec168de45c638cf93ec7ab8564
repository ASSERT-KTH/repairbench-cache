{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    // Check if the call target is the global constructor String.\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations.\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      //\n      // We only handle the case with one argument, e.g. String(a).\n      // String() is handled by FoldConstants.tryFoldStringJoin().\n      // String(a, b) is not handled. The behavior is undefined in JS spec.\n\n      Node value = callTarget.getNext();\n      // Check that there is exactly one argument and it is immutable.\n      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detach()); // Use detach() instead of detachFromParent()\n        // Copy source information and other properties from the original call node.\n        addition.copyInformationFromForTree(n); // Use copyInformationFromForTree for potentially deeper copies if needed\n                                                // or copyInformationFrom(n) if that's standard.\n\n        n.replaceWith(addition); // Use replaceWith for cleaner replacement\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}