{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n\n    // Check if it's a call to the global String function like String(foo).\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n\n      // Check for the single argument case: String(argument).\n      Node value = callTarget.getNext();\n      // Make sure there's exactly one argument, and it's not null.\n      if (value != null && value.getNext() == null) {\n\n        // Fold String(a) to '' + (a) on immutable literals,\n        // which allows further optimizations.\n        //\n        // We can't do this in the general case, because String(a) has\n        // slightly different semantics than '' + (a). See\n        // http://code.google.com/p/closure-compiler/issues/detail?id=759\n        //\n        // This optimization is only valid if the argument is an immutable\n        // primitive (number, string, boolean, null, undefined).\n        if (NodeUtil.isImmutableValue(value)) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detach()); // Detach value before adding it elsewhere\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          // Return the new node so that the peephole optimizer can continue\n          // optimizations on it.\n          return addition;\n        }\n      }\n    }\n    // If the optimization conditions aren't met, return the original node.\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}