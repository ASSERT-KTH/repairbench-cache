{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    // Check if the target is the String function e.g. String(1)\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n\n      Node value = callTarget.getNext();\n      // Check that there is exactly one argument and it's an immutable value.\n      // We can't fold String(foo) if foo has valueOf defined, unless foo is a primitive.\n      // NodeUtil.isImmutableValue checks for primitives (string, number, boolean,\n      // null, undefined/void 0).\n      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n        // Fold String(a) to '' + (a) on immutable literals.\n        // This allows further optimizations. For example,\n        // String(1) + String(2) -> '' + 1 + '' + 2 -> '1' + '2' -> '12'\n        // We can't do this in the general case, because String(a) has\n        // slightly different semantics than '' + (a). See\n        // http://code.google.com/p/closure-compiler/issues/detail?id=759\n\n        Node emptyString = IR.string(\"\");\n        // Ensure the new node has the same source information as the original call.\n        emptyString.srcref(n);\n\n        Node addition = IR.add(\n            emptyString,\n            value.detach());\n        // Make the ADD node inherit the source information from the original CALL node.\n        addition.srcrefTree(n);\n\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}