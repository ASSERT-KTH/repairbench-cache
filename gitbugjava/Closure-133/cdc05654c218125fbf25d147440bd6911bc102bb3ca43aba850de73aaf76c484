{
    "generation": "  /**\n   * Returns the remainder of the line, starting form the current position.\n   * This function is extracted from the JsDocStream, because the JsDocStream\n   * version tries to read the entire rest of the stream, not just the line.\n   */\n  private String getRemainingJSDocLine() {\n    StringBuilder builder = new StringBuilder();\n    while (true) {\n      // Peek the next character. We don't want to consume the EOL character,\n      // because the parser handles it separately.\n      int c = stream.peek();\n\n      // Check for end of line or end of stream.\n      // JsDocStream.EOF is typically -1.\n      if (c == '\\n' || c == '\\r' || c == JsDocStream.EOF) {\n        break;\n      }\n\n      // Consume the character and append it to the result.\n      builder.append((char) stream.getChar());\n    }\n    // We do not consume the EOL character(s) here. The parser advances past them.\n    return builder.toString();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}