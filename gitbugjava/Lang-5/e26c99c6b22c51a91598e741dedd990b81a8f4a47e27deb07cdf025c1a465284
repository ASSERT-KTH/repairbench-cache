{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_xxx\")    = new Locale(\"\", \"GB\", \"xxx\")     (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase letters.\n     * The country code must be uppercase letters.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // Handle NLS locales starting with an underscore (_CC or _CC_VVV)\n        if (str.startsWith(\"_\")) {\n            if (len < 3) { // Must be at least _CC\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Validate country code: uppercase letters\n            if (!Character.isLetter(ch1) || !Character.isLetter(ch2) ||\n                !Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) { // _CC format\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            if (len < 5) { // Must be at least _CC_V\n                 // This catches formats like _CC_ which has an empty variant\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(3) != '_') { // Separator missing before variant\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // _CC_VVV format: The variant (substring(4)) can be anything and must not be empty (checked by len < 5).\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n        }\n\n        // Standard locales (ll, ll_CC, ll__V, ll_CC_VVV)\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        // Validate language code: lowercase letters\n        if (!Character.isLetter(ch0) || !Character.isLetter(ch1) ||\n            !Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 2) { // ll format\n            return new Locale(str.substring(0, 2)); // Using substring for consistency\n        }\n\n        // Must have an underscore component now (Country or Variant)\n        if (len < 5) {\n             // Needs to be at least ll_CC or ll__V\n             // This catches formats like ll_, ll_C, ll__, etc.\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(2) != '_') { // Separator missing after language\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch3 = str.charAt(3);\n        if (ch3 == '_') { // ll__V format (language and variant)\n            // Format is ll__VVV..., length must be >= 5\n            // The check \"len < 5\" above ensures the variant part (substring(4)) is not empty.\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // ll_CC... format\n        final char ch4 = str.charAt(4);\n        // Validate country code: uppercase letters\n        if (!Character.isLetter(ch3) || !Character.isLetter(ch4) ||\n            !Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 5) { // ll_CC format\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // ll_CC_VVV format\n        if (len < 7) { // Must be at least ll_CC_V\n            // This catches formats like ll_CC_ which has an empty variant\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(5) != '_') { // Separator missing before variant\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // ll_CC_VVV format: The variant (substring(6)) can be anything and must not be empty (checked by len < 7).\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}