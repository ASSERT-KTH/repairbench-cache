{
    "generation": "import java.util.Locale;\n\n/**\n * Test class for automated program repair.\n * This class is not part of the solution but needed for compilation.\n */\nclass LocaleUtils { // Wrapper class for the provided method\n\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")\n     *   LocaleUtils.toLocale(\"en__POSIX\")  = new Locale(\"en\", \"\", \"POSIX\")\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\", \"\")\n     *   LocaleUtils.toLocale(\"_GB_POSIX\")  = new Locale(\"\", \"GB\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly according to the following format rules:\n     * <ul>\n     *  <li>Locale strings must be non-null.</li>\n     *  <li>Format ll: Language code (2 lowercase letters). Length is 2.</li>\n     *  <li>Format ll_CC: Language code (2 lowercase letters), Country code (2 uppercase letters), separated by underscore. Length is 5.</li>\n     *  <li>Format ll_CC_variant: Language code (2 lowercase letters), Country code (2 uppercase letters), Variant (any characters), separated by underscores. Length is >= 7.</li>\n     *  <li>Format ll__variant: Language code (2 lowercase letters), empty Country code, Variant (any characters), separated by underscores. Length is >= 5.</li>\n     *  <li>Format _CC: Empty language code, Country code (2 uppercase letters). String must start with an underscore. Length is 3.</li>\n     *  <li>Format _CC_variant: Empty language code, Country code (2 uppercase letters), Variant (any characters), separated by underscores. String must start with an underscore. Length is >= 5.</li>\n     * </ul>\n     * The country code must consist of exactly two uppercase letters.\n     * The language code must consist of exactly two lowercase letters.\n     * The separator must be an underscore where expected.\n     * The length must be correct for the detected format. Any other format throws IllegalArgumentException.</p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        // Validate general length constraints: minimum 2, cannot be 4\n        if (len < 2 || len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n        if (ch0 == '_') {\n            // Handle formats: _CC, _CC_variant\n            // Check length: must be 3 (_CC) or >= 5 (_CC_variant)\n            if (len < 3) { // Catches len=2 cases like \"_G\" which passed the initial check\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" (must be _CC or _CC_variant format)\");\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Validate country code: must be 2 uppercase letters\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" (invalid country code in _CC.. format)\");\n            }\n\n            if (len == 3) { // Format: _CC\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // Format: _CC_variant (len >= 5)\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" (missing underscore after country in _CC_variant format)\");\n            }\n            // Variant part must exist, length check len >= 5 is implicit here\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n\n        } else {\n            // Handle formats: ll, ll_CC, ll__variant, ll_CC_variant\n            // Length must be 2 or >= 5\n            final char ch1 = str.charAt(1);\n            // Validate language code: must be 2 lowercase letters\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" (invalid language code in ll.. format)\");\n            }\n\n            if (len == 2) { // Format: ll\n                return new Locale(str);\n            }\n\n            // Format: ll_... (len >= 5)\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" (missing underscore after language in ll_.. format)\");\n            }\n\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') { // Format: ll__variant (len >= 5)\n                // Variant part must exist, length check len >= 5 is implicit\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n\n            // Format: ll_CC or ll_CC_variant (len >= 5)\n            final char ch4 = str.charAt(4);\n            // Validate country code: must be 2 uppercase letters\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" (invalid country code in ll_CC.. format)\");\n            }\n\n            if (len == 5) { // Format: ll_CC\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n\n            // Format: ll_CC_variant (len >= 7 required)\n            if (len < 7 || str.charAt(5) != '_') { // Check for separator and minimum length for variant part\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" (requires format ll_CC_variant with length >= 7 and correct separators)\");\n            }\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }\n} // End of wrapper class",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}