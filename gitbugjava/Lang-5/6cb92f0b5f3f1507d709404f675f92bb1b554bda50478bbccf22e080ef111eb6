{
    "generation": "import java.util.Locale;\n\n// Class definition added for context, replace with actual class if needed.\nclass LocaleUtils {\n\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"en__POSIX\")  = new Locale(\"en\", \"\", \"POSIX\")\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\", \"\")\n     *   LocaleUtils.toLocale(\"_GB_POSIX\")  = new Locale(\"\", \"GB\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase letters.\n     * The country code must be uppercase letters.\n     * The separator must be an underscore.\n     * The length must be correct for the format.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        // Validate basic structure lengths: ll (2), _CC (3), ll_CC (5), ll__V (>=5), _CC_V (>=5), ll_CC_V (>=7)\n        if (len != 2 && len != 3 && len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n        if (ch0 == '_') {\n            // Format: _CC or _CC_VVV\n            if (len < 3) { // Need _CC\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Rejects \"_\" and \"_G\"\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                // Test cases explicitly require uppercase letters for country code.\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Rejects \"_Gb\", \"_gB\", \"_1B\", \"_G1\"\n            }\n            if (len == 3) { // Format _CC\n                return new Locale(\"\", str.substring(1, 3)); // Accepts \"_GB\"\n            }\n            // Format _CC_VVV expected\n            if (len < 5) { // Need _CC_V, rejects \"_GB_\" (len 4)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Rejects \"_GBAP\"\n            }\n            // Format _CC_VVV, variant VVV must not be empty (len >= 5 ensures this)\n            return new Locale(\"\", str.substring(1, 3), str.substring(4)); // Accepts \"_GB_P\", \"_GB_POSIX\"\n        } else {\n            // Format: ll, ll_CC, ll__VVV, ll_CC_VVV\n            // Validate language code: ll\n            // Length check `len < 2` is covered by initial check.\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Rejects \"EN\", \"eN\", \"1n\"\n            }\n            if (len == 2) { // Format ll\n                return new Locale(str); // Accepts \"en\"\n            }\n            // Length must be >= 5 now\n            // Check `len < 5` is covered by initial check. Rejects \"en_\", \"en_G\" etc.\n            if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Rejects \"enGB\", \"en G\"\n            }\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') { // Format ll__VVV\n                // Variant VVV must not be empty (len >= 5 ensures this)\n                if (len < 5) { // Should be covered by initial checks, but protects against \"ll__\" (len 4)\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), \"\", str.substring(4)); // Accepts \"en__P\", \"en__POSIX\"\n            } else { // Format ll_CC or ll_CC_VVV\n                // Validate country code: CC\n                final char ch4 = str.charAt(4);\n                if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                     // Test cases explicitly require uppercase letters for country code.\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Rejects \"en_gB\", \"en_Gb\", \"en_1G\"\n                }\n                if (len == 5) { // Format ll_CC\n                    return new Locale(str.substring(0, 2), str.substring(3, 5)); // Accepts \"en_GB\"\n                }\n                // Format ll_CC_VVV expected\n                if (len < 7) { // Need ll_CC_V, rejects \"en_GB_\" (len 6)\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                if (str.charAt(5) != '_') {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Rejects \"en_GBAP\"\n                }\n                // Format ll_CC_VVV, variant VVV must not be empty (len >= 7 ensures this)\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); // Accepts \"en_GB_P\", \"en_GB_xxx\"\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}