{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 / LANG-346 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        // see http://issues.apache.org/jira/browse/LANG-346\n        //\n        // Manually modify milliseconds, seconds and minutes fields for rounding/truncation based on the 'round' flag.\n        // This avoids potential side effects of Calendar methods like set() affecting larger fields.\n        // It also ensures that the lower fields are appropriately modified (truncated or left as-is)\n        // before the main loop determines the rounding direction (roundUp) based on the next lower field's value.\n        // The 'done' flag prevents modification of fields greater than or equal to the target field.\n\n        Date date = val.getTime(); // Store original value\n        long time = date.getTime(); // Work with time in milliseconds\n        boolean done = false;\n\n        // Modify milliseconds\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) { // If truncating or rounding down milliseconds\n            time = time - millisecs; // Subtract milliseconds\n        }\n        // Stop processing lower fields if the target field is SECOND\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // Modify seconds\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) { // If not done and (truncating or rounding down seconds)\n            time = time - (seconds * 1000L); // Subtract seconds in milliseconds\n        }\n        // Stop processing lower fields if the target field is MINUTE\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // Modify minutes\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) { // If not done and (truncating or rounding down minutes)\n             time = time - (minutes * 60000L); // Subtract minutes in milliseconds\n        }\n        \n        // Reset time based on modifications, but only if time actually changed.\n        // This prevents unnecessary Calendar object creation/setTime calls.\n        if (date.getTime() != time) {\n            date.setTime(time); // Update Date object\n            val.setTime(date); // Update Calendar object to reflect modified lower fields\n        }\n        // ----------------- Fix for LANG-59 / LANG-346 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                //Calculate the offset from the minimum allowed value\n                // Note: val.get() returns the current value, which might have been modified by the LANG-59 block above.\n                offset = val.get(fields[i][0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field (set to minimum value)\n            if (offset != 0) {\n                 // Set the field to the minimum value by subtracting the offset calculated from the minimum.\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}