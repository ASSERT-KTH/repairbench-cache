{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int limit = startPos + width;\n\n        // Check if the potential wrap position is at or beyond the end of the text.\n        if (limit >= text.length())\n        {\n            // No wrap needed, the rest fits.\n            return -1;\n        }\n\n        // Check for the first newline or tab character occurring before the limit.\n        // This behavior is preserved from the original code.\n        int EOLpos = text.indexOf('\\n', startPos);\n        int TABpos = text.indexOf('\\t', startPos);\n        int breakPos = -1;\n\n        if (EOLpos != -1 && (TABpos == -1 || EOLpos < TABpos)) {\n            breakPos = EOLpos;\n        } else {\n            // breakPos will be TABpos value, including -1 if not found\n            breakPos = TABpos; \n        }\n\n        // If a newline/tab is found before the width limit, wrap after it.\n        if (breakPos != -1 && breakPos < limit) {\n             // Return position AFTER the newline/tab, consistent with original behavior\n             // for these characters and required by how renderWrappedText uses the result.\n            return breakPos + 1;\n        }\n\n        // Look for the last whitespace character strictly BEFORE the calculated limit.\n        // Search backwards from limit - 1 down to startPos.\n        int wsPos = -1;\n        // Start search from one character before the limit\n        int searchFrom = limit - 1; \n        for (int i = searchFrom; i >= startPos; i--)\n        {\n            char c = text.charAt(i);\n            // Use Character.isWhitespace() for robustness (covers space, \\n, \\r, \\t, etc.)\n            // Original code checked for ' ', '\\n', '\\r' explicitly here.\n            if (Character.isWhitespace(c))\n            {\n                wsPos = i;\n                break;\n            }\n        }\n\n        // If we found a whitespace character strictly after startPos\n        if (wsPos > startPos)\n        {\n            // Return the position of the whitespace character found.\n            // The tests expect the index *of* the whitespace (e.g., 7 for \"This is a test.\").\n            // The calling method (renderWrappedText) handles trimming the space.\n            return wsPos;\n        }\n        \n        // No whitespace found in (startPos, limit-1]. We have to cut the word.\n        // Return the calculated limit (startPos + width) as the cut position.\n        // This matches test expectation \"wrap position 3 expected:<3>\" when width is 3.\n        return limit;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}