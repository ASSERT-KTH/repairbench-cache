{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a\n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return position on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int endPos = startPos + width; // The potential wrap position if we have to cut the word\n\n        // Check if the potential wrap position is at or beyond the end of the text\n        if (endPos >= text.length()) {\n            return -1; // Indicates end of text, no wrap needed.\n        }\n\n        // Check for the first explicit newline or tab within the wrap width [startPos, endPos].\n        // If found, we must wrap just after it.\n        int explicitBreakPos = -1;\n        int LFlowPos = text.indexOf('\\n', startPos);\n        int tabPos   = text.indexOf('\\t', startPos);\n\n        if ( LFlowPos != -1 && ( tabPos == -1 || LFlowPos < tabPos ) ) {\n            explicitBreakPos = LFlowPos;\n        } else {\n            explicitBreakPos = tabPos;\n        }\n\n        // If an explicit break is found within the line segment [startPos, endPos]\n        if ( explicitBreakPos != -1 && explicitBreakPos <= endPos ) {\n            return explicitBreakPos + 1; // Wrap position is after the break char\n        }\n\n        // Look for the last whitespace character (space, newline, carriage return)\n        // in the range ]startPos, endPos]. Search backwards from endPos.\n        // Note: \\t was handled above as an explicit break.\n        int pos = endPos;\n\n        // Search backwards for the last whitespace character at or before endPos\n        while (pos > startPos) {\n             // Check boundary charAt(pos) - position pos is guaranteed to be < text.length()\n             // due to the initial check (endPos < text.length()) and pos <= endPos.\n             char c = text.charAt(pos);\n             if (c == ' ' || c == '\\n' || c == '\\r') {\n                 // Found whitespace. As per tests, return the position *of* the whitespace.\n                 // This implies the line break occurs *before* this character.\n                 return pos;\n             }\n             pos--;\n        }\n\n        // No whitespace found between startPos + 1 and endPos.\n        // We must cut the word at endPos.\n        return endPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}