{
    "generation": "    /**\n     * Checks whether the given column is basic. A basic column corresponds to a basic\n     * variable and must contain exactly one entry equal to 1.0 (within epsilon) in the\n     * constraint rows, and all other entries in the constraint rows must be 0.0 (within epsilon).\n     * @param col index of the column to check\n     * @return the row index where the single 1.0 entry is found if the column is basic,\n     *         otherwise returns null.\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // Check if the entry is approximately 1.0\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // If we have already found a row with '1.0' in this column\n                if (row != null) {\n                    // The column is not basic because it contains more than one '1.0'\n                    return null;\n                }\n                // Record the row where '1.0' is found\n                row = i;\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // If the entry is non-zero but not approximately 1.0,\n                // the column cannot be basic.\n                return null;\n            }\n            // If the entry is approximately 0.0, continue to the next row\n        }\n        // Return the index of the row containing the single '1.0',\n        // or null if no '1.0' was found or the column violated basic conditions.\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}