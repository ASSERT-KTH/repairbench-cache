{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        // Iterate over constraint rows (skipping objective function rows)\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // Check if the entry is approximately 1.0 using epsilon comparison\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // If this is the first '1' found in this column\n                if (row == null) {\n                    // Record the row index\n                    row = i;\n                } else {\n                    // If we have already found a '1' in a previous row for this column,\n                    // then the column is not basic (more than one '1'). Return null.\n                    return null;\n                }\n            // Check if the entry is significantly different from 0.0 (and not 1.0, checked above)\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // If an entry in this column is non-zero but not one, the column is not basic.\n                // A basic column must have only one '1' and the rest '0's in the constraint rows.\n                return null;\n            }\n            // If entry is approximately 0.0, continue checking next row\n        }\n        // If the loop completes, 'row' will be non-null only if exactly one '1.0' entry\n        // was found, and all other entries in the constraint rows were '0.0'.\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}