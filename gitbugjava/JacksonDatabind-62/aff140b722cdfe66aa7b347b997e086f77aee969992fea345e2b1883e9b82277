{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        // [databind#1484]: Make sure to use existing delegate ref, if any\n        JsonDeserializer<Object> delegateDeser = _delegateDeserializer;\n        ValueInstantiator valueInstantiator = _valueInstantiator;\n\n        if (valueInstantiator != null) {\n            // Check if creator needs contextualization? No. Resolve delegate? Yes.\n            if (valueInstantiator.canCreateUsingDelegate()) {\n                JavaType delegateType = valueInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                // And find the value deserializer for the delegate type\n                // must be contextualized for the property access\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n            // Otherwise, we may have property-based creator, accessible either via\n            // default creator plus setters, or taking arguments? Just need ValueInstantiator, configuration settings\n            // No: need contextual info too. If so, maybe this does not belong here...\n            /*\n            else if (valueInstantiator.canCreateFromObjectWith()) {\n                SettableBeanProperty[] creatorProps = valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n                 valueInstantiator = valueInstantiator.configureCreatorPropertyBased(ctxt, creatorProps);\n                 // TBDEL?\n            }\n            */\n        }\n\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n\n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        // Note: We pass ValueInstantiator unchanged, but delegate deserializer potentially resolved\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}