{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // For contextualization, handlers may be re-configured; start with current/defaults,\n        // then potentially update based on context.\n\n        ValueInstantiator valueInst = _valueInstantiator;\n        // Keep references to current deserializers in case resolution does not change them\n        JsonDeserializer<Object> delegateDeser = _delegateDeserializer;\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        // By default, retain existing setting for inclusion of single value:\n        Boolean unwrapSingle = _unwrapSingle;\n\n        // May need to resolve types for delegate-based creators:\n        if (valueInst != null && valueInst.canCreateUsingDelegate()) {\n            JavaType delegateType = valueInst.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(String.format(\n                        \"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\",\n                        _collectionType, valueInst.getClass().getName()));\n            }\n            // Resolve delegate deserializer contextually\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        Boolean override = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        if (override != null) {\n             unwrapSingle = override; // Update setting if override is found\n        }\n\n        // Resolve value deserializer:\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n\n        // Resolve value type deserializer:\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n\n        // Call withResolved using the possibly updated values\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}