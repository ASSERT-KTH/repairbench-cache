{
    "generation": "import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\n\n// Class definition and other methods are omitted for brevity.\n\n    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n     *\n     * @param field\n     * @return The Class of the first generic type argument, or the raw type if the first argument is also generic, or Object.class if not determinable.\n     */\n    public Class<?> getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        if (generic instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) generic;\n            Type[] actualTypeArguments = pt.getActualTypeArguments();\n\n            // Ensure there is at least one type argument\n            if (actualTypeArguments.length > 0) {\n                 Type firstTypeArgument = actualTypeArguments[0];\n\n                 if (firstTypeArgument instanceof Class) {\n                     // Handles cases like List<String> -> String.class\n                     return (Class<?>) firstTypeArgument;\n                 } else if (firstTypeArgument instanceof ParameterizedType) {\n                     // Handles nested generics like List<Set<String>> -> Set.class\n                     // The first type argument is Set<String> (a ParameterizedType)\n                     // We return its raw type, which is Set.class\n                     Type rawType = ((ParameterizedType) firstTypeArgument).getRawType();\n                     if (rawType instanceof Class) {\n                         return (Class<?>) rawType;\n                     }\n                 }\n                 // Other potential types for firstTypeArgument (like TypeVariable, WildcardType, GenericArrayType)\n                 // are not explicitly handled here and will fall through to return Object.class.\n                 // This maintains the original behavior for types it couldn't resolve to a simple Class.\n            }\n        }\n\n        // If the field's type is not parameterized, has no type arguments,\n        // or the first type argument is not a Class or ParameterizedType with a Class raw type,\n        // return Object.class.\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}