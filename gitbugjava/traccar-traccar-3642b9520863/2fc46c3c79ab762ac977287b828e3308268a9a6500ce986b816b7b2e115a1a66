{
    "generation": "private Position decodePosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int status = buf.readUnsignedShort();\n\n    position.setValid(BitUtil.check(status, 15));\n    position.set(Position.KEY_STATUS, status);\n    position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n    int event = buf.readUnsignedShort();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, event);\n\n    // Read the time field; some devices send a fixed 12-digit (yyMMddHHmmss)\n    // timestamp while others omit leading zeroes, resulting in a variable-length string.\n    String timeString = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n    Date time;\n    if (timeString.length() == 12) {\n        // Fixed format: yyMMddHHmmss\n        int year = Integer.parseInt(timeString.substring(0, 2));\n        int month = Integer.parseInt(timeString.substring(2, 4));\n        int day = Integer.parseInt(timeString.substring(4, 6));\n        int hour = Integer.parseInt(timeString.substring(6, 8));\n        int minute = Integer.parseInt(timeString.substring(8, 10));\n        int second = Integer.parseInt(timeString.substring(10, 12));\n        year += (year < 70 ? 2000 : 1900);\n        time = new DateBuilder()\n                .setYear(year)\n                .setMonth(month)\n                .setDay(day)\n                .setHour(hour)\n                .setMinute(minute)\n                .setSecond(second)\n                .getDate();\n    } else {\n        // Variable-length format, e.g. \"137191681\" representing 13, 7, 19, 16, 8, 1\n        int pos = 0;\n        int year = Integer.parseInt(timeString.substring(pos, pos + 2));\n        pos += 2;\n        int month;\n        if (pos + 2 <= timeString.length()\n                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 12) {\n            month = Integer.parseInt(timeString.substring(pos, pos + 2));\n            pos += 2;\n        } else {\n            month = Integer.parseInt(timeString.substring(pos, pos + 1));\n            pos += 1;\n        }\n        int day;\n        if (pos + 2 <= timeString.length()\n                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 31) {\n            day = Integer.parseInt(timeString.substring(pos, pos + 2));\n            pos += 2;\n        } else {\n            day = Integer.parseInt(timeString.substring(pos, pos + 1));\n            pos += 1;\n        }\n        int hour;\n        if (pos + 2 <= timeString.length()\n                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 23) {\n            hour = Integer.parseInt(timeString.substring(pos, pos + 2));\n            pos += 2;\n        } else {\n            hour = Integer.parseInt(timeString.substring(pos, pos + 1));\n            pos += 1;\n        }\n        int minute;\n        if (pos + 2 <= timeString.length()\n                && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 59) {\n            minute = Integer.parseInt(timeString.substring(pos, pos + 2));\n            pos += 2;\n        } else {\n            minute = Integer.parseInt(timeString.substring(pos, pos + 1));\n            pos += 1;\n        }\n        int second = 0;\n        if (pos < timeString.length()) {\n            if (pos + 2 <= timeString.length()\n                    && Integer.parseInt(timeString.substring(pos, pos + 2)) <= 59) {\n                second = Integer.parseInt(timeString.substring(pos, pos + 2));\n            } else {\n                second = Integer.parseInt(timeString.substring(pos));\n            }\n        }\n        year += (year < 70 ? 2000 : 1900);\n        time = new DateBuilder()\n                .setYear(year)\n                .setMonth(month)\n                .setDay(day)\n                .setHour(hour)\n                .setMinute(minute)\n                .setSecond(second)\n                .getDate();\n    }\n    position.setTime(time);\n\n    position.setLongitude(buf.readInt() * 0.00001);\n    position.setLatitude(buf.readInt() * 0.00001);\n\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n    position.setCourse(buf.readUnsignedShort());\n    position.setAltitude(buf.readUnsignedShort());\n\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n    Network network = new Network();\n\n    while (buf.readableBytes() > 4) {\n        int subtype = buf.readUnsignedShort();\n        int length = buf.readUnsignedShort() - 4;\n        int endIndex = buf.readerIndex() + length;\n        switch (subtype) {\n            case 0x0001:\n                int coolantTemperature = buf.readUnsignedByte() - 40;\n                if (coolantTemperature <= 215) {\n                    position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                }\n                int rpm = buf.readUnsignedShort();\n                if (rpm <= 65535) {\n                    position.set(Position.KEY_RPM, rpm);\n                }\n                position.set(\"averageSpeed\", buf.readUnsignedByte());\n                buf.readUnsignedShort(); // interval fuel consumption\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                buf.readUnsignedInt(); // trip id\n                if (buf.readerIndex() < endIndex) {\n                    position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                }\n                break;\n            case 0x0005:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                buf.readUnsignedInt(); // run time\n                break;\n            case 0x0009:\n                position.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                break;\n            case 0x0011:\n                position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                break;\n            case 0x0014:\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                break;\n            case 0x0020:\n                String[] cells = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                for (String cell : cells) {\n                    String[] values = cell.split(\"@\");\n                    network.addCellTower(CellTower.from(\n                            Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                            Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                }\n                break;\n            case 0x0021:\n                String[] points = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                for (String point : points) {\n                    String[] values = point.split(\"@\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                }\n                break;\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}