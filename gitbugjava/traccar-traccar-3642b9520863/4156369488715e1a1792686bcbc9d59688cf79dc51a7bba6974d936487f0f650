{
    "generation": "private Position decodePosition(\n        Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int status = buf.readUnsignedShort();\n    position.setValid(BitUtil.check(status, 15));\n    position.set(Position.KEY_STATUS, status);\n    position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n    int event = buf.readUnsignedShort();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, event);\n\n    String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n    DateBuilder dateBuilder = new DateBuilder()\n            .setYear(Integer.parseInt(time.substring(0, 2)))\n            .setMonth(Integer.parseInt(time.substring(2, 4)))\n            .setDay(Integer.parseInt(time.substring(4, 6)))\n            .setHour(Integer.parseInt(time.substring(6, 8)))\n            .setMinute(Integer.parseInt(time.substring(8, 10)))\n            .setSecond(Integer.parseInt(time.substring(10, 12)));\n    position.setTime(dateBuilder.getDate());\n\n    position.setLongitude(buf.readInt() * 0.00001);\n    position.setLatitude(buf.readInt() * 0.00001);\n\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n    position.setCourse(buf.readUnsignedShort());\n    position.setAltitude(buf.readUnsignedShort());\n\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n    Network network = new Network();\n\n    while (buf.readableBytes() > 4) {\n        int subtype = buf.readUnsignedShort();\n        int length = buf.readUnsignedShort() - 4;\n        int endIndex = buf.readerIndex() + length;\n        switch (subtype) {\n\n            case 0x0001:\n                int coolantTemperature = buf.readUnsignedByte() - 40;\n                if (coolantTemperature <= 215) {\n                    position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                }\n                int rpm = buf.readUnsignedShort();\n                if (rpm <= 65535) {\n                    position.set(Position.KEY_RPM, rpm);\n                }\n                position.set(\"averageSpeed\", buf.readUnsignedByte());\n                buf.readUnsignedShort(); // interval fuel consumption\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                buf.readUnsignedInt(); // trip id\n                if (buf.readerIndex() < endIndex) {\n                    position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                }\n                break;\n\n            case 0x0005:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                buf.readUnsignedInt(); // run time\n                break;\n\n            case 0x0009:\n                position.set(Position.KEY_VIN,\n                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                break;\n\n            case 0x0011:\n                position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                break;\n\n            case 0x0012:\n                {\n                    // Diagnostic Trouble Codes\n                    char[] dtcChars = {'P', 'C', 'B', 'U'};\n                    StringBuilder sb = new StringBuilder();\n                    // read all 2\u2011byte codes in this block\n                    while (buf.readerIndex() + 2 <= endIndex) {\n                        int code = buf.readUnsignedShort();\n                        int number = code & 0x3FFF;\n                        // only include real DTCs (skip any < 0x0100)\n                        if (number >= 0x0100) {\n                            if (sb.length() > 0) {\n                                sb.append(' ');\n                            }\n                            sb.append(String.format(\"%c%04X\",\n                                    dtcChars[code >> 14], number));\n                        }\n                    }\n                    if (sb.length() > 0) {\n                        position.set(Position.KEY_DTCS, sb.toString());\n                    }\n                }\n                break;\n\n            case 0x0014:\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                break;\n\n            case 0x0020:\n                {\n                    // Cell towers: MCC@MNC@LAC@CID+...\n                    String text = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    for (String cell : text.split(\"\\\\+\")) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]),\n                                Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2]),\n                                Integer.parseInt(values[3])));\n                    }\n                }\n                break;\n\n            case 0x0021:\n                {\n                    // Wi\u2011Fi APs: MAC@signal+...\n                    String text = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    for (String ap : text.split(\"\\\\+\")) {\n                        String[] values = ap.split(\"@\");\n                        network.addWifiAccessPoint(\n                                WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                }\n                break;\n\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}