{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(2000 + Integer.parseInt(time.substring(0, 2))) // years are parsed as 2000 +, since two digits\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        int altitude = buf.readUnsignedShort();\n        if (altitude > 65535-20000) {  \n            //\u56fa\u5b9a altitude\u53ea if plausible\uff08 \u8003\u8651 to 20000\u306e reasonable, as jenis's high data could be 11,123.5 \ub4f1\uff09 \n            position.setAltitude(altitude); \n        }\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort(); //\u53bb\u6389\u4e3a the '-4'\u662f\uff0c corrected length calc\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); // interval fuel consumption\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // trip id\n                        if (buf.readerIndex() < endIndex) {\n                            position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                        }\n                    } else {\n                        if (buf.readerIndex() < endIndex) {\n                            position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                        }\n                    }\n                    break;\n                case 0x0005:\n                    if (buf.readableBytes() < 6) break; // added:\u786e\u4fdd the subtype's data length dict the mandatory fields. \n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    position.set(\"runTime\", buf.readUnsignedInt());\n                    break;\n                case 0x0009:\n                    if (buf.readableBytes() >= length) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n                    } else {\n                        // handle if read\u5c11\u4e8e the needed, maybe skip\u6216\u5176\u4ed6 \n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0011:\n                    int fans = buf.readUnsignedInt() * 0.05;\n                    if (fans >=0) position.set(Position.KEY_HOURS, fans); \n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0); \n                    // the other reads\u786e\u4fdd they consume the length @ further. \n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5); \n                    int fd = buf.readUnsignedByte() -40; \n                    if (fd > -40 && fd < 215) position.set(\"airTemp\", fd); \n                    position.set(\"airFlow\", buf.readUnsignedShort()*0.01); \n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte()/255.0); \n                    break;\n                case 0x0020:\n                    \n                    if (buf.readableBytes() < length) break; // guard \n                    String cellData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                    //\u7f51\u7edc\u6570\u636e sometimes upto \ub294\ub370 the '@@'\u540e\u2460of:\u7684 split. this\u5904\u7406 possible empty parts\n                    String[] cells = cellData.split(\"\\\\+\");\n                    for (String cell : cells) {\n                        if (cell.isEmpty()) continue;\n                        String[] values = cell.split(\"@\", -1); // use length for split. \n                        //\u786e\u4fdd the split has atleast 4 parts \n                        if (values.length <4) { \n                            break; // skip processing this cell\u5854 If \u6570\u636e realizar incomplete\n                        }\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]),\n                                Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16),\n                                Integer.parseInt(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    if (buf.readableBytes() < length) break; \n                    String wifiData =                 \nbuf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                    String[] points = wifiData.split(\"\\\\+\");\n                    for (String point : points) {\n                        if (point.isEmpty()) continue;\n                        String[] values = point.split(\"@\", -1);\n                        if (values.length >= 2) {\n                            network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                        }\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n\n            // Ensure that endIndex is within buffer bounds to prevent overflow \n            if (endIndex > buf.readableBytes()) throw new \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442 exception;\n        \n            // normalize the readerIndex \n            while (buf.readerIndex() < endIndex) { \n                continue;\n            }\n            // replace with \n            buf.readerIndex(endIndex);\n        }\n\n        if (network.getCellTowers() != null ||  noted\u7f51\u7edc. getWifiAccessPoints() !+ null) {\n            position.setNetwork(network);\n        }\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n        return positIOn;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}