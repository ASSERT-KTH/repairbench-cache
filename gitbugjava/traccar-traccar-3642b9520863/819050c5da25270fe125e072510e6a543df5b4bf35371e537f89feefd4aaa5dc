{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000L); // Use long literal for multiplication\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4;\n            int endIndex = buf.readerIndex() + length;\n            if (length < 0 || length > buf.readableBytes()) {\n                // Invalid length, break to avoid issues\n                break;\n            }\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) { // No check needed for unsigned short\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); // interval fuel consumption\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); // trip id\n                    if (buf.readerIndex() < endIndex) {\n                        position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); // run time\n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    String cellData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    String[] cells = cellData.split(\"\\\\+\");\n                    for (String cell : cells) {\n                        if (cell.isEmpty()) {\n                            continue;\n                        }\n                        String[] values = cell.split(\"@\");\n                        if (values.length >= 4) {\n                            try {\n                                int mcc = Integer.parseInt(values[0]);\n                                int mnc = Integer.parseInt(values[1]);\n                                int lac, cid;\n                                try {\n                                    // Try parsing LAC and CID as hexadecimal first\n                                    lac = (int) Long.parseLong(values[2], 16);\n                                    cid = (int) Long.parseLong(values[3], 16);\n                                } catch (NumberFormatException eHex) {\n                                    // Fallback to decimal parsing if hex fails\n                                    try {\n                                        lac = Integer.parseInt(values[2]);\n                                        cid = Integer.parseInt(values[3]);\n                                    } catch (NumberFormatException eDec) {\n                                        // If both fail, log and skip\n                                        // Log.w(TAG, \"Failed to parse cell tower LAC/CID as hex or decimal: \" + cell, eDec);\n                                        continue; // Skip this cell tower\n                                    }\n                                }\n                                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n                                // Log failure to parse MCC/MNC or invalid format\n                                // Log.w(TAG, \"Failed to parse cell tower data: \" + cell, e);\n                            }\n                        } else {\n                             // Log format error\n                             // Log.w(TAG, \"Invalid cell tower format: \" + cell);\n                        }\n                    }\n                    break;\n                case 0x0021:\n                    String wifiData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    String[] points = wifiData.split(\"\\\\+\");\n                    for (String point : points) {\n                        if (point.isEmpty()) {\n                            continue;\n                        }\n                        String[] values = point.split(\"@\");\n                        if (values.length >= 2) {\n                            try {\n                                network.addWifiAccessPoint(WifiAccessPoint.from(\n                                        values[0], Integer.parseInt(values[1])));\n                            } catch (NumberFormatException e) {\n                                // Log failure to parse RSSI\n                                // Log.w(TAG, \"Failed to parse WiFi RSSI: \" + point, e);\n                            }\n                        } else {\n                            // Log format error\n                            // Log.w(TAG, \"Invalid WiFi access point format: \" + point);\n                        }\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n            // Ensure reader index is set correctly even if parsing failed or data was skipped\n            if (buf.readerIndex() > endIndex) {\n                 // Log error or handle overrun if necessary\n                 break; // Prevent potential infinite loop if readerIndex went too far\n            }\n            buf.readerIndex(endIndex);\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}