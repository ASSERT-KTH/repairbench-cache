{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT: // BITNOT is a unary operator.\n        // Make sure it has one child before recursing\n        if (val.hasOneChild()) {\n          return isValidDefineValue(val.getFirstChild(), defines);\n        }\n        // If not one child, it's invalid, fall through to return false.\n        break;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD: // ADD needs to be supported for string concatenation.\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        // Make sure it has two children before recursing\n        if (val.hasTwoChildren()) {\n           Node left = val.getFirstChild();\n           Node right = val.getLastChild();\n           // Both children must be valid define values.\n           return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n        }\n        // If not two children, it's invalid, fall through to return false.\n        break;\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        // If not a qualified name or not in defines, fall through to return false.\n        break;\n    }\n    // Value is not a string, number, boolean, valid operator expression,\n    // or a known define name.\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}