{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   * Defines may be assigned expressions involving defines:\n   *   A) Literals: string, number, true, false\n   *   B) Defines: references to other defines\n   *   C) Unary operators: !, -, ~ applied to A), B) or C)\n   *   D) Binary operators: &, |, ^, +, applied to A), B), C) or D)\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      // A) Literals\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // B) Defines names\n      case Token.NAME:\n      case Token.GETPROP: // object.property or object['property']\n        // For defines, it must be a qualified name that refers to a define.\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        break; // Not a valid qualified name define reference\n\n      // C) Unary operators\n      case Token.NOT: // !\n      case Token.NEG: // -\n      case Token.BITNOT: // ~\n        // Recurse on the operand.\n        Node firstChild = val.getFirstChild();\n        return firstChild != null && isValidDefineValue(firstChild, defines);\n\n      // D) Binary operators\n      case Token.BITAND: // &\n      case Token.BITOR:  // |\n      case Token.BITXOR: // ^\n      case Token.ADD:    // +\n        // Recurse on both operands.\n        Node left = val.getFirstChild();\n        Node right = val.getLastChild();\n        return left != null && right != null // Ensure both children exist\n            && isValidDefineValue(left, defines)\n            && isValidDefineValue(right, defines);\n\n    }\n    // Anything else is invalid.\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}