{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * This method assumes the initial parse position is *after* the opening quote.\n     *\n     * @param pattern pattern to parse\n     * @param pos current parse position (just after opening quote)\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes ('')\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        // Keep track of the start index of the quoted string content for error reporting\n        // The start index is the character *after* the opening quote.\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        // Store the start index of the current segment to append\n        int lastHold = start;\n\n        while (pos.getIndex() < pattern.length()) {\n            int currentIndex = pos.getIndex();\n            // Check for QUOTE first, as it terminates the loop\n            if (c[currentIndex] == QUOTE) {\n                // Check if it's an escaped quote ('') if escaping is on\n                if (escapingOn && currentIndex + 1 < pattern.length() && c[currentIndex + 1] == QUOTE) {\n                    // Append segment before escaped quote\n                    if (appendTo != null) {\n                        appendTo.append(c, lastHold, currentIndex - lastHold);\n                    }\n                    // Append the single quote represented by the escape\n                    if (appendTo != null) {\n                        appendTo.append(QUOTE);\n                    }\n                    // Advance position past escaped quote ('')\n                    pos.setIndex(currentIndex + 2); // Advance by 2 for ''\n                    // Update start of next segment\n                    lastHold = pos.getIndex();\n                } else {\n                    // Found the closing quote\n                    // Append the final segment\n                    if (appendTo != null) {\n                        appendTo.append(c, lastHold, currentIndex - lastHold);\n                    }\n                    // Advance position past the closing quote\n                    next(pos); // Advances by 1\n                    return appendTo; // Success\n                }\n            } else {\n                // Regular character, just advance position\n                next(pos); // Advances by 1\n            }\n        }\n\n        // End of pattern reached without finding a closing quote\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string starting at position \" + (start - 1));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}