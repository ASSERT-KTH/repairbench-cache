{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * The input ParsePosition should be pointing to the character *after* the\n     * opening quote.\n     *\n     * @param pattern pattern to parse\n     * @param pos current parse position (just after opening quote)\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes ('')\n     * @return <code>appendTo</code>\n     * @throws IllegalArgumentException if unterminated quote is found\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        // Record the starting index (after opening quote) for error message reporting\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        // lastHold tracks the starting index of the current segment of characters to append\n        int lastHold = pos.getIndex();\n\n        // Loop while the current position is within the pattern's bounds\n        while (pos.getIndex() < pattern.length()) {\n            int currentPos = pos.getIndex();\n            char currentChar = c[currentPos];\n\n            // Check for an escaped quote ('') if escaping is enabled\n            // An escaped quote is represented by two consecutive QUOTE characters\n            if (escapingOn && currentChar == QUOTE && currentPos + 1 < pattern.length() && c[currentPos + 1] == QUOTE) {\n                // Append the segment of text accumulated since the last marker (lastHold)\n                if (appendTo != null) {\n                    // Append characters from lastHold up to the start of the escaped quote\n                    appendTo.append(c, lastHold, currentPos - lastHold);\n                    // Append the literal single quote value resulting from the escape sequence\n                    appendTo.append(QUOTE);\n                }\n                // Advance the parse position past the escaped quote ('')\n                pos.setIndex(currentPos + 2); // Move past both quotes\n                // Update lastHold to the new position after the escaped quote\n                lastHold = pos.getIndex();\n            } else if (currentChar == QUOTE) {\n                // Found the terminal closing quote for the string\n                // Advance the position past the closing quote\n                next(pos); // Equivalent to pos.setIndex(currentPos + 1);\n                // Append the final segment of text\n                if (appendTo != null) {\n                    // Append characters from lastHold up to (but not including) the closing quote\n                    appendTo.append(c, lastHold, currentPos - lastHold);\n                }\n                // Successfully consumed the quoted string, return the buffer (or null if none was provided)\n                return appendTo;\n            } else {\n                // Current character is a regular character within the quoted string\n                // Simply advance the parse position to check the next character\n                next(pos); // Equivalent to pos.setIndex(currentPos + 1);\n            }\n        }\n\n        // If the loop completes without finding a closing quote, the string is unterminated.\n        // Report the error using the starting position recorded at the beginning.\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string starting at position \" + start);\n    }\n\n    // Helper method assumed to exist in the surrounding class (e.g., ExtendedMessageFormat)\n    // private static final char QUOTE = '\\'';\n    // private static final String ESCAPED_QUOTE = \"''\"; // No longer needed directly\n\n    /**\n     * Advances the parse position by one character.\n     * @param pos The ParsePosition to advance.\n     */\n     private void next(ParsePosition pos) {\n         pos.setIndex(pos.getIndex() + 1);\n     }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}