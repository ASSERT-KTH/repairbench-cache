{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified. This function assumes the parser is currently positioned\n     * at the opening quote character. It consumes the content including the\n     * closing quote, handling escaped quotes ('') inside.\n     *\n     * @param pattern pattern to parse\n     * @param pos current parse position (should point at the opening quote)\n     * @param appendTo optional StringBuffer to append the processed content (without surrounding quotes)\n     * @param escapingOn whether to process escaped quotes ('')\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex(); // Position of the opening quote, for error message\n\n        // Ensure the pattern has an opening quote at the current position\n        if (pattern.charAt(start) != QUOTE) {\n            // This case should not happen if called correctly by the parser\n            throw new IllegalArgumentException(\n                \"Parser processing error: appendQuotedString called without opening quote at position \" + start);\n        }\n\n        // Consume the opening quote\n        pos.setIndex(start + 1);\n        int lastHold = pos.getIndex(); // Position after the opening quote, start of content\n\n        // Loop through the string starting from the character after the opening quote\n        while (pos.getIndex() < pattern.length()) {\n            int currentIndex = pos.getIndex();\n            char currentChar = pattern.charAt(currentIndex);\n\n            // Check for escaped quote ''\n            // Need to ensure we don't read past the end of the pattern\n            if (escapingOn && currentChar == QUOTE && currentIndex + 1 < pattern.length() &&\n                    pattern.charAt(currentIndex + 1) == QUOTE) {\n\n                // Append the segment of text before the escaped quote\n                if (appendTo != null) {\n                    // append(CharSequence s, int start, int end) appends substring s[start..end-1]\n                    appendTo.append(pattern, lastHold, currentIndex);\n                    // Append the literal single quote value for ''\n                    appendTo.append(QUOTE);\n                }\n\n                // Advance position past the escaped quote ''\n                pos.setIndex(currentIndex + 2); // Move past both quotes\n                // Update the start index for the next segment\n                lastHold = pos.getIndex();\n\n            } else if (currentChar == QUOTE) { // Check for the closing quote '\n                // Append the final segment of text before the closing quote\n                if (appendTo != null) {\n                    appendTo.append(pattern, lastHold, currentIndex);\n                }\n\n                // Advance position past the closing quote\n                pos.setIndex(currentIndex + 1); // Move past the closing quote\n\n                // Successfully parsed quoted string\n                return appendTo;\n\n            } else {\n                // It's a regular character within the quoted string.\n                // Simply advance the position. The segment containing this character\n                // will be appended later when an escape or the closing quote is found.\n                pos.setIndex(currentIndex + 1); // Move to the next character\n            }\n        }\n\n        // If the loop finishes, it means we reached the end of the pattern\n        // without finding the closing quote character.\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string starting at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}