{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     *\n     * @param pattern pattern to parse\n     * @param pos current parse position (should point AT the opening quote)\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes ('')\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex(); // Location of the opening quote\n        char[] c = pattern.toCharArray(); // Access pattern as char array\n\n        // Ensure the current position is indeed a quote\n        if (start >= c.length || c[start] != QUOTE) {\n            // This indicates a logic error in the caller or an unexpected pattern format.\n            // However, consistent with original behavior, we proceed, but the original's\n            // initial 'if' block is removed as it caused issues with 'escapingOn'.\n            // throw new IllegalArgumentException(\"Quoted string does not start with quote at position \" + start);\n        }\n\n        // Advance position past the opening quote\n        pos.setIndex(start + 1);\n\n        int lastHold = pos.getIndex(); // Start index of the content inside the quotes\n\n        // Iterate through the pattern starting from the character after the opening quote\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            char currentChar = c[i];\n\n            // Check for escaped quote ('')\n            // Need to look ahead one character\n            if (escapingOn && currentChar == QUOTE && i + 1 < pattern.length() && c[i+1] == QUOTE) {\n                // Append the segment before the escaped quote\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                    // Append the literal quote character\n                    appendTo.append(QUOTE);\n                }\n                // Advance the loop index past the second quote of the pair ''\n                i++;\n                // Update the parse position to be after the escaped quote ('')\n                pos.setIndex(i + 1);\n                // Update lastHold to the position after the escaped quote\n                lastHold = pos.getIndex();\n                // Continue to the next iteration of the loop\n                continue;\n            }\n\n            // Check for the non-escaped closing quote (')\n            if (currentChar == QUOTE) {\n                // Found the closing quote\n                // Update the parse position to be past the closing quote\n                pos.setIndex(i + 1);\n                // Append the final segment of the string content (from lastHold to current position i)\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                }\n                // Successfully parsed the quoted string, return the buffer\n                return appendTo;\n            }\n\n            // If it's a regular character inside the quotes, just continue the loop.\n            // The content will be appended in chunks when an escaped quote or the closing quote is found.\n        }\n\n        // If the loop completes without finding a closing quote, the string is unterminated.\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string starting at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}