{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex(); // Position of the opening quote\n        char[] c = pattern.toCharArray();\n\n        // Assume c[start] == QUOTE is true (guaranteed by caller)\n\n        next(pos); // Move past the opening quote\n        int lastHold = pos.getIndex(); // Start index of segment to append\n\n        while (pos.getIndex() < pattern.length()) {\n            int currentPos = pos.getIndex();\n            char currentChar = c[currentPos];\n\n            if (escapingOn && currentChar == QUOTE && currentPos + 1 < pattern.length() && c[currentPos + 1] == QUOTE) {\n                // Found escaped quote ''\n                if (appendTo != null) {\n                    // Append segment before ''\n                    appendTo.append(c, lastHold, currentPos - lastHold);\n                    // Append the literal quote character\n                    appendTo.append(QUOTE);\n                }\n                // Skip both quotes\n                next(pos);\n                next(pos);\n                // Update start index for the next segment\n                lastHold = pos.getIndex();\n            } else if (currentChar == QUOTE) {\n                // Found the closing quote\n                next(pos); // Move past the closing quote\n                if (appendTo != null) {\n                    // Append the final segment\n                    appendTo.append(c, lastHold, currentPos - lastHold);\n                }\n                return appendTo; // Successfully consumed quoted string\n            } else {\n                // Regular character, just advance position\n                next(pos);\n            }\n        }\n\n        // If loop finishes, closing quote was not found\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string starting at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}