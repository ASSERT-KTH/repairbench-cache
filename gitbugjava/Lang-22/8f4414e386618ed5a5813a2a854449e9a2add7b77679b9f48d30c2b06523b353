{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     * <p>\n     * Special cases:\n     * <ul>\n     *  <li>The invocations {@code greatestCommonDivisor(Integer.MIN_VALUE, Integer.MIN_VALUE)},\n     *      {@code greatestCommonDivisor(Integer.MIN_VALUE, 0)} and\n     *      {@code greatestCommonDivisor(0, Integer.MIN_VALUE)} throw an\n     *      {@code ArithmeticException}, because the result would be 2^31, which\n     *      is too large for an int value.</li>\n     *  <li>The result of {@code greatestCommonDivisor(x, x)}, {@code greatestCommonDivisor(0, x)} and\n     *      {@code greatestCommonDivisor(x, 0)} is the absolute value of {@code x}, except\n     *      for the special cases above.</li>\n     *  <li>The invocation {@code greatestCommonDivisor(0, 0)} is 0.</li>\n     * </ul>\n     *\n     * @param u  a number\n     * @param v  a number\n     * @return the greatest common divisor, never negative\n     * @throws ArithmeticException if the result cannot be represented as a non-negative int value\n     * @since 2.1\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // Handle GCD(0,v) = |v|, GCD(u,0) = |u|, GCD(0,0) = 0\n        // Need special handling for MIN_VALUE because Math.abs(MIN_VALUE) = MIN_VALUE (which is negative)\n        if (u == 0 || v == 0) {\n            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(u) + Math.abs(v);\n        }\n\n        // From Commons Math:\n        // Initial check for |u| <= 1 or |v| <= 1 removed - it was incorrect for MIN_VALUE\n\n        // Keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u > 0) { u = -u; } // make u negative\n        if (v > 0) { v = -v; } // make v negative\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n            u /= 2; v /= 2; k++; // cast out twos.\n        }\n        if (k == 31) {\n             // This condition implies that u = v = Integer.MIN_VALUE\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n\n        do {\n            /* assert u<0 && v<0 */ // Invariants maintained: u and v are negative and odd\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                 // N.B. Integer.MIN_VALUE is even. (-1 * 2^31)\n                 // The loop terminates when t becomes odd or 0.\n                 // It always terminates because t will eventually become odd or 0.\n                t /= 2; // cast out twos\n            }\n\n            // B5 [reset max(u,v)]\n            // Now t is odd.\n            if (t > 0) { // t is positive odd\n                u = -t; // u is now negative odd\n            } else {    // t is negative odd (or 0 if loop terminates)\n                v = t;  // v is now negative odd (or 0)\n            }\n\n            // B6/B3. at this point both u and v should be negative and odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n            // If v == u, then t is 0, loop terminates.\n            // Since u and v are both odd, v-u is even, so division by 2 is exact.\n        } while (t != 0);\n\n        // gcd is |u| * 2^k or |v| * 2^k\n        // Since u is kept negative, the final |gcd| is -u\n        // Add back common powers of 2\n        return -u * (1 << k); // gcd is |u| * 2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}