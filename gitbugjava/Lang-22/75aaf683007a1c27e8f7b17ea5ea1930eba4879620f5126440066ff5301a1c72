{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // From Commons Math:\n        // Initial check for |u| <= 1 or |v| <= 1 removed as it was incorrect\n        // for Integer.MIN_VALUE due to Math.abs(Integer.MIN_VALUE) overflowing.\n        // The binary algorithm below handles gcd(x, 1) and gcd(x, -1) correctly.\n\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        // Handle Integer.MIN_VALUE carefully.\n        if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n            // If either is Integer.MIN_VALUE, we cannot make them positive.\n            // Need to handle this case specifically or ensure the algorithm works with MIN_VALUE.\n            // The binary algorithm works with negative numbers, so MIN_VALUE is handled.\n            // Check for the case gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)\n            if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {\n                 throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            // If only one is MIN_VALUE, the relative magnitude logic might need adjustment?\n            // Let's verify the binary algorithm logic with MIN_VALUE.\n            // The core issue was the Math.abs() check, removing it might be sufficient.\n            // Let's proceed with the standard binary algorithm implementation\n            // which keeps numbers negative.\n        }\n\n        // Make u and v negative, if necessary. Handles MIN_VALUE correctly.\n        if (u>0) { u=-u; } // make u negative\n        if (v>0) { v=-v; } // make v negative\n\n        // B1. [Find power of 2]\n        int k=0;\n        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n            u/=2; v/=2; k++; // cast out twos.\n        }\n        // This check is needed because the final multiplication -u * (1 << k)\n        // can overflow if k = 31. For k=31, gcd is 2^31, which is Integer.MIN_VALUE\n        // if treated as signed, or abs(Integer.MIN_VALUE).\n        if (k==31) {\n            // This condition implies u = v = Integer.MIN_VALUE originally. Handled above?\n            // No, can happen if u = MIN_VALUE, v = 0, but v is non-zero by Javadoc.\n            // Can happen if u = MIN_VALUE, v = MIN_VALUE.\n            // It indicates that the gcd is 2^31.\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        // Note: -(u/2) could overflow if u = Integer.MIN_VALUE.\n        // Example: u = MIN_VALUE, v = -1 (after B1). u is even. t = -(MIN_VALUE/2) = -(-2^30) = 2^30. OK.\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t&1)==0) { // while t is even..\n                t/=2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            // Update u or v based on sign of t\n            if (t>0) {\n                // u = -t, where t is positive and odd.\n                // Cannot overflow, as max t = 2^30 if derived from -(MIN_VALUE/2).\n                u = -t;\n            } else {\n                // v = t, where t is negative and odd.\n                // Max magnitude of t is MAX_VALUE + 1 = MIN_VALUE? No.\n                // If initial u = odd, t=v. If initial v = MIN_VALUE, t = MIN_VALUE.\n                // After casting out twos, t could be -1.\n                // If initial u=even(MIN_VALUE), v=odd, t=-(u/2)=positive. This path OK.\n                // If initial u=odd, v=even(MIN_VALUE), t=v=MIN_VALUE.\n                // Cast out twos from MIN_VALUE: t = MIN_VALUE/2 ... /2 = -1.\n                // So v = t assignment is safe.\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be negative and odd.\n            // t = (v - u)/2;\n            // u and v are negative. Let u = -a, v = -b, where a,b are positive odd.\n            // t = (-b - (-a))/2 = (a - b)/2. This is safe from overflow.\n            t = (v - u)/2;\n            // |u| larger: |-a| > |-b| -> a > b -> a-b > 0 -> t positive (replace u)\n            // |v| larger: |-b| > |-a| -> b > a -> a-b < 0 -> t negative (replace v)\n        } while (t!=0);\n        // When t=0, u=v. gcd is -u * 2^k.\n        // Since u is negative and cannot be MIN_VALUE at this point (as that would imply k=31 case),\n        // -u is positive and <= MAX_VALUE.\n        // Result = -u * (1 << k). Max k is 30. Max result is MAX_VALUE * 2^30, fits in long.\n        // Can it overflow int? Yes, if -u * (1 << k) > MAX_VALUE.\n        // e.g. gcd(2^30, 3*2^30) = 2^30. u = -2^30, v= -3*2^30. k=30. u=-1, v=-3.\n        // B2: u odd, t=v=-3.\n        // B4: t=-3.\n        // B5: v=-3. u=-1, v=-3.\n        // B6: t=(v-u)/2 = (-3 - (-1))/2 = -1.\n        // Loop:\n        // B4: t=-1.\n        // B5: v=-1. u=-1, v=-1.\n        // B6: t = (-1 - (-1))/2 = 0.\n        // Exit loop. Return -u * (1 << k) = -(-1) * (1 << 30) = 1 * 2^30 = 1073741824. OK.\n        // e.g. gcd(Integer.MAX_VALUE, 1) = 1. u=-(MAX_VALUE), v=-1. k=0.\n        // B2: u odd. t=v=-1.\n        // B4: t=-1.\n        // B5: v=-1. u=-(MAX_VALUE), v=-1.\n        // B6: t = (-1 - (-(MAX_VALUE)))/2 = (MAX_VALUE - 1)/2. Positive.\n        // Loop:\n        // B4: t=(MAX_VALUE - 1)/2 (odd).\n        // B5: u = -t = -(MAX_VALUE - 1)/2. u=-(MAX_VALUE - 1)/2, v=-1.\n        // B6: t = (v-u)/2 = (-1 - (-(MAX_VALUE - 1)/2))/2 = ((MAX_VALUE - 1)/2 - 1) / 2 = (MAX_VALUE - 3)/4. Positive.\n        // ... eventually u will become -1.\n        // Suppose final u=-1. Return -u * (1<<k) = -(-1) * (1 << 0) = 1. OK.\n\n        return -u * (1 << k); // gcd is -u*2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}