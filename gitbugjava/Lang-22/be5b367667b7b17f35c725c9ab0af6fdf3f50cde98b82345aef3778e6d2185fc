{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // From Commons Math:\n        //if either operand is abs 1, return 1:\n        // The original check: Math.abs(u) <= 1 || Math.abs(v) <= 1\n        // was flawed because Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE.\n        if (u == 1 || u == -1 || v == 1 || v == -1) {\n             return 1;\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        // Note: Integer.MIN_VALUE stays Integer.MIN_VALUE\n        if (u>0) { u=-u; } // make u negative\n        if (v>0) { v=-v; } // make v negative\n        // B1. [Find power of 2]\n        int k=0;\n        // The check k<31 is necessary to prevent overflow in the final shift.\n        // It also catches the case gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) automatically.\n        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n            u/=2; v/=2; k++; // cast out twos.\n        }\n        if (k==31) {\n            // This condition occurs if u = MIN_VALUE and v = MIN_VALUE\n            // or u = MIN_VALUE and v = 0 (if 0 allowed) or vice-versa.\n            // gcd is 2^31, which cannot be represented as a positive int.\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */ // u and v are kept negative or MIN_VALUE\n            // B4/B3: cast out twos from t.\n            while ((t&1)==0) { // while t is even..\n                t/=2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            // Now t is odd. Update u or v.\n            // if t>0, |v|<|u|, set u = -t\n            // if t<0, |v|>|u|, set v = t\n            if (t>0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd and negative.\n            t = (v - u)/2;\n            // If |u| larger, u is more negative, v-u is positive -> t positive (replace u)\n            // If |v| larger, v is more negative, v-u is negative -> t negative (replace v)\n        } while (t!=0);\n        // gcd is -u*2^k where u is the negative number\n        // analogous to Euclid's algorithm returning the last non-zero remainder.\n        // -u is the absolute value of the final u\n        return -u*(1<<k); // gcd is |u|*2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}