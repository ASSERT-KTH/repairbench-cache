{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // From Commons Math:\n        // Initial check forkBtu special cases involving 0 or 1.\n        // Note: The original code's check Math.abs(u) <= 1 || Math.abs(v) <= 1 was incorrect\n        // because Math.abs(Integer.MIN_VALUE) returns Integer.MIN_VALUE, which is <= 1.\n        // We handle the special case of 1 or -1 first.\n        if (u == 0 || v == 0) {\n            // Gcd(0,x) := |x|, as per Knuth V.2 section 4.5.2 algorithm A.\n            // The Euclidean algorithm, upon which the binary algorithm is based,\n            // also follows this behavior.\n            // See https:// DRAFT :: N1570 Committee Draft April 12, 2011 WG14/N1570 state=mathml http%3A//www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf K.5.6.4.2\n            // However, Javadoc says inputs are non-zero. Adding this check defensively or\n            // assuming this method is only called with non-zero inputs per its contract.\n            // If inputs can be zero, the code needs adjustment. Assuming non-zero based on Javadoc.\n            // If Math.abs(u) or Math.abs(v) is Integer.MIN_VALUE, it means u or v is MIN_VALUE.\n            // Need to handle GCD with MIN_VALUE appropriately.\n            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n                 throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(u) + Math.abs(v); // If one is 0, |u| + |v| = |non-zero value|.\n        }\n\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u>0) { u=-u; } // make u negative\n        if (v>0) { v=-v; } // make v negative\n\n        // Correct check for |u|=1 or |v|=1.\n        // After negation, u and v are <= -1.\n        // If either u or v is -1, the greatest common divisor is 1.\n        if (u == -1 || v == -1) {\n             return 1;\n        }\n\n        // B1. [Find power of 2]\n        int k=0;\n        // This loop must terminate after at most 31 iterations if u or v is != 0.\n        // If u = MIN_VALUE and v = MIN_VALUE, k will reach 31.\n        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n            u/=2; v/=2; k++; // cast out twos.\n        }\n        if (k==31) {\n            // Handles the case u=MIN_VALUE, v=MIN_VALUE. GCD is 2^31.\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        // u and v are still negative. K is the power of 2 removed.\n        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        // Note: If u is even, u/2 is negative, -u/2 is positive and won't overflow.\n        do {\n            /* assert u<0 && v<0; */ // u and v stay negative, non-zero.\n            // B4/B3: cast out twos from t.\n            // while t is even..\n            // The check (t&1)==0 is equivalent to (t%2)==0\n            // N.B. Integer division \"/\" rounds towards zero. Results may differ from Knuth's needs.\n            // However, this seems ok as the loop just extracts factors of 2.\n            // Example: If t = -4, t/2 = -2. If t = -6, t/2 = -3.\n            while ((t&1)==0) { // while t is even..\n                 // This division is safe because t!=0 (loop condition is t!=0)\n                t/=2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            // Now t is odd.\n            // N.B. u and v are kept negative. Store negative values:\n            if (t>0) { // t is positive odd\n                u = -t; // u is negative odd\n            } else { // t is negative odd\n                v = t; // v is negative odd\n            }\n            // B6/B3. at this point both u and v should be odd and negative.\n            // t = (v - u)/2; // Replace the negative of the larger value\n            // Knuth Algorithm B step B6: t := (v-u)/2\n            // Since u, v are negative, v-u is (-ve) - (-ve) = difference.\n            // If |v| > |u|, v is more negative, v-u is negative. e.g. v=-8, u=-2, v-u = -6.\n            // If |u| > |v|, u is more negative, v-u is positive. e.g. v=-2, u=-8, v-u = 6.\n            t = (v - u)/2;\n            // For negative numbers, |v| larger means v < u. Then v - u < 0. t is negative. Store in v.\n            // For negative numbers, |u| larger means u < v. Then v - u > 0. t is positive. Store in u (as -t).\n            // The logic in B5 seems correct.\n\n            // Integer division t = (v-u)/2 rounds towards zero. Knuth needs exact division.\n            // Since u and v are now both odd, v-u is always even, so division by 2 is exact.\n        } while (t!=0);\n        // gcd is |u|*2^k = -u*2^k\n        // The result is -u * (1 << k). Check for overflow.\n        // At this point, -u is the odd part of the gcd. It's > 0.\n        // k is the power of 2. (1<<k) is 2^k.\n        // The gcd is (-u) * 2^k.\n        // The only case where the result can be 2^31 (MIN_VALUE) is gcd(MIN_VALUE, MIN_VALUE),\n        // which was already handled by the k=31 check.\n        // Otherwise, the gcd is <= 2^30, which fits in a positive int.\n        // The multiplication -u * (1 << k) should not overflow.\n        return -u*(1<<k); // gcd is u*2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}