{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // Case 1: Type ID not resolved by TypeIdResolver\n\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // No default implementation found. Try DeserializationProblemHandler\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // what should this be taken to mean?\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...\n                        // If handler indicated \"just skip\" (by returning `Void.class` or `null`), or\n                        // failed to handle, we get `null` back. Just returning `null` problematic;\n                        // better return `UnknownTypeDeserializer` instance.\n                        // (note: caller is likely to cache resolution to `null`...)\n                        deser = ctxt.getUnknownTypeDeserializer(null); // pass null as we don't know expected type\n                        // If this returns null, we are out of luck; needs to be reported by caller\n                        if (deser == null) {\n                            return null;\n                        }\n                        // Should we cache this? Let's assume we should NOT, to avoid\n                        // cluttering cache with failures. Let caller do that if necessary.\n                    } else {\n                        // Handler provided a concrete type.\n                        // Need to apply specialization logic same way as below\n                        if ((_baseType != null)\n                                && _baseType.getClass() == actual.getClass()\n                                && !actual.hasGenericTypes()) {\n                             actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass());\n                         }\n                        // ... would this actually work? Needs context:\n                        deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    }\n                }\n            } else {\n                // Case 2: Type ID resolved by TypeIdResolver\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                 // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                 //   generic type with custom type resolvers. If so, should try to retain them.\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()\n                        && !type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            // 28-Nov-2019, tatu: Only cache if we actually found a deserializer (see above)\n            //    and it's not the placeholder for \"unknown\"\n            if (deser != null && !(deser instanceof com.fasterxml.jackson.databind.deser.impl.UnknownTypeDeserializer)) {\n                _deserializers.put(typeId, deser);\n            }\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}