{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // what should this be taken to mean?\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but fail:\n                         // Note: before 2.10, returned `null` here\n                         return (JsonDeserializer<Object>) ctxt.reportBadDefinition(_baseType,\n                                 String.format(\"Could not resolve type id '%s' as a subtype of %s: problem handler returned null\",\n                                         typeId, _baseType));\n                    }\n                    // 18-Jun-2019, tatu: As per [databind#2221], may need to actually DONE: handle `Void` type being returned\n                    //    specifically, produce `null value` deserializer:\n                    if (actual.hasRawClass(Void.class)) {\n                        deser = NullifyingDeserializer.instance;\n                    } else {\n                        // ... would this actually work?\n                        deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    }\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                     *   but it appears to check that JavaType impl class is the same which is\n                     *   important for some reason?\n                     *   Disabling the check will break 2 Enum-related tests.\n                     */\n                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                    //   generic type with custom type resolvers. If so, should try to retain them.\n                    //  Whether this is sufficient to avoid problems remains to be seen, but for\n                    //  now it should improve things.\n                    if (!type.hasGenericTypes()) {\n                        // 21-Feb-2019, tatu: Need to make sure we don't accidentally downgrade\n                        // a Optimized(EnumMap) type to Simple(Map) type -- would be better handled by TypeFactory\n                        try {\n                            type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                        } catch (IllegalArgumentException e) {\n                            // 04-Mar-2019, tatu: For [databind#2255], probably should not fail?\n                             ctxt.reportBadDefinition(_baseType, String.format(\n\"Failed to specialize base type %s with concrete type %s, problem: %s\",\n_baseType, type.getRawClass().getName(), e.getMessage()), e);\n                             // And maybe just return the default implementation?\n                             deser = _findDefaultImplDeserializer(ctxt);\n                             // This may seem odd but has to do with the fact that we really shouldn't use this branch\n                             // any more -- it will be removed in 2.10 or later -- until then, need to try to make work\n                             if (deser == null) {\n                                 return (JsonDeserializer<Object>) ctxt.reportBadDefinition(_baseType, String.format(\n\"Failed to specialize base type %s with concrete type %s, problem: %s\",\n_baseType, type.getRawClass().getName(), e.getMessage()), e);\n                             }\n                             // also: cache this choice? Seems prudent\n                             _deserializers.put(typeId, deser);\n                             return deser;\n                        }\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}