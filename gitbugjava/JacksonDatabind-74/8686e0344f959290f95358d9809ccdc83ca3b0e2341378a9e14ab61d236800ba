{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // [databind#1533]: First check allows \"\" to be null\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\n            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                String str = p.getText().trim();\n                 if (str.isEmpty()) {\n                    return null;\n                 }\n            }\n        }\n\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n\n        // 13-Oct-2016, tatu: We already handled VALUE_STRING=\"\" above, explicitly,\n        // so no need to re-check here. But other scalar values may indicate issues.\n\n        // 17-Jan-2018, tatu: Most likely indicates missing type id, so provide\n        //   meaningful error message. Note that we could get `VALUE_STRING` here\n        //   for example, with non-empty value etc.\n        JsonToken t = JsonToken.FIELD_NAME;\n        // If we did not buffer, we may have different current token...\n        if (tb == null) {\n             // do we know it should be FIELD_NAME? It is the common case for AS_PROPERTY\n//        \t t = p.getCurrentToken();\n        }\n        // 17-Jan-2018, tatu: Let's report FIELD_NAME as expected, seems reasonable\n        ctxt.reportWrongTokenException(p, t,\n                \"missing type id property '\"+_typePropertyName+\"' (for POJO property '\"+baseTypeName()+\"')\");\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}