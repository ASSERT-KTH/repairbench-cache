{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // First check for potential null-equivalent values\n        // (NOTE: We do not have an instance yet so can't call contextual handlers)\n        // (Also note: we can NOT yet check value contents easily if buffered.)\n        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n            if (tb == null && p.hasToken(JsonToken.VALUE_STRING)) {\n                 String str = p.getText();\n                 if (str.isEmpty()) {\n                      return null;\n                 }\n            }\n        }\n\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n\n        // 29-Mar-2021, tatu: As per [databind#3095], need to use `reportMissingTypeId`\n        String msg = String.format(\"missing type id property '%s'\", _typePropertyName);\n        // Any extra context?\n        if (_property != null) {\n            msg = String.format(\"%s (for POJO property '%s')\", msg, _property.getName());\n        }\n        // Pass `null` for base value because it's assumed to be the containing POJO\n        // Must pass type id resolver for handler lookups\n        // Important: pass 'p' from argument, not one possibly created from buffer\n        return ctxt.reportMissingTypeId(p, _idResolver, msg);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}