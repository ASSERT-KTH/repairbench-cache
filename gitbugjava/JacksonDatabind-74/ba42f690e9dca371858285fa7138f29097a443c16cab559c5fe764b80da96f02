{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // [databind#1533]: First, check for potentially null-indicating empty Value String\n        // NOTE: Only applies if `tb` is null, meaning we didn't buffer anything;\n        // otherwise we have structured content for which this does not apply.\n        if (tb == null) { // Check applicability only if we have non-buffered \"raw\" token\n             JsonToken t = p.currentToken();\n             if (t == JsonToken.VALUE_STRING) {\n                 if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                      String str = p.getText();\n                      // Note: cannot use `trim()` as that could change value interpretation\n                      if (str != null && str.isEmpty()) {\n                           // Important: MUST consume the token to be compatible, avoid infinite loop\n                           p.nextToken();\n                           // Return null as directed by feature\n                           return null;\n                      }\n                  }\n              }\n             // 10-Jun-2020, tatu: As per [databind#2714], consider other \"natural\" types\n             //    as well -- perhaps even START_ARRAY? But let's handle specific case first.\n         }\n\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            // Deserializer should consume token(s) it needs\n            return deser.deserialize(p, ctxt);\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        // Note: deserializeIfNatural consumes the token IF it finds a match and returns non-null\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.currentToken() == JsonToken.START_ARRAY) {\n            // deserializeTypedFromArray consumes tokens\n            return super.deserializeTypedFromArray(p, ctxt);\n        }\n\n        // If we get here, we either have token that was not handled, or for buffered\n        // content, we failed to find type id and have no default impl\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null; // never reached\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}