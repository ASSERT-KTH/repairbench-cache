{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     *\n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.\n     * @throws IOException if there is a problem reading the stream or the end of stream is detected:\n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        // Removed redundant cases for CR, LF, FF, TAB, BACKSPACE\n        // They are handled by the default case if they are not special escape sequences.\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Escape character followed by anything else is treated literally.\n            // This includes escaping the escape character, quote char, delimiter, etc.\n            // It also includes non-standard sequences like \\N or \\a -> N or a.\n            return c;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}