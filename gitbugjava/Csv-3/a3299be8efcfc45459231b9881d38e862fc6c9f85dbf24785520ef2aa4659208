{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or the escape character itself if the character following the escape is not a meta character.\n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally this.escape)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Check if the character following the escape is a meta character or line ending.\n            // Meta characters defined in the format: delimiter, escape, quote, comment marker.\n            // Line endings (CR, LF) are also treated as meta for escaping purposes here,\n            // meaning escaping them results in the line ending character itself.\n            boolean isMeta = (c == this.delimiter ||\n                            c == this.escape ||\n                            c == this.quoteChar ||\n                            (this.format.isCommentMarkerSet() && c == this.commentStart) ||\n                            c == CR ||\n                            c == LF);\n\n            if (isMeta) {\n                // If 'c' is a meta char (or CR/LF), return 'c' itself (e.g., \\, -> ,, \\\\ -> \\).\n                return c;\n            }\n            \n            // If 'c' is not a known escape sequence (r,n,t,b,f) and not a meta char,\n            // the tests indicate that the escape character itself should be returned.\n            // The character 'c' will then be processed in the next iteration of the lexer. (e.g., \\N -> \\ followed by N).\n            return this.escape;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}