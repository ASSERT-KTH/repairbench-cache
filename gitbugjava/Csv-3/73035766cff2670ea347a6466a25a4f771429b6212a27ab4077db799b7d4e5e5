{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     *\n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.\n     * @throws IOException if there is a problem reading the stream or the end of stream is detected:\n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        // Note: escape sequences for CR, LF, FF, TAB, BACKSPACE are not handled here\n        // as they are not standard CSV escapes. They fall through to the default\n        // case which means the character following the escape is returned literally.\n        // For example, \\X -> X\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Default behavior is to return the character literally.\n            // This allows escaping of meta characters (delimiter, quote, escape char itself)\n            // and treats other sequences like \\L as L.\n            return c;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}