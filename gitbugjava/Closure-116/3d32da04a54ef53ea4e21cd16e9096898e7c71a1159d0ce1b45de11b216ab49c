{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * 2) If the function body has side effects, arguments that might be affected\n   * by those side effects (e.g. are not literals or local variables) must\n   * not be used within the function body, as the order of evaluation would\n   * change.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { x=1; return a; }\n   *     y = foo(x); // x might be changed by x=1 before being used.\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    // Check for side effects in the function body. This check is potentially expensive,\n    // so we do it once outside the loop.\n    boolean functionBodyHasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list. Adjust cArg accordingly.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value. Currently,\n        // if 'this' is passed explicitly and it's not the global 'this',\n        // we don't inline.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        // Skip the 'this' argument.\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Iterate through parameters and arguments simultaneously.\n    while (fnParam != null || cArg != null) {\n      // Check constraints on the current parameter and argument pair.\n      if (fnParam != null && cArg != null) {\n        String paramName = fnParam.getString();\n        // If the parameter is unused, skip side effect checks for this pair.\n        // An unused parameter does not cause the argument to be evaluated more\n        // than once, nor does it matter if side effects in the body change\n        // the argument value before the parameter is used (since it isn't used).\n        int refCount = NodeUtil.getNameReferenceCount(block, paramName);\n        if (refCount > 0) {\n            // Rule 1: If argument evaluation has side effects, the parameter must be used at most once.\n            // Note: refCount > 0 is checked above, so we only need check > 1 here.\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler) && refCount > 1) {\n                return CanInlineResult.NO;\n            }\n\n            // Rule 2: If function body has side-effects, and this parameter is used,\n            // the argument must be something safe (like a literal or local variable)\n            // whose value cannot be affected by the function body's side effects\n            // before the parameter is used. Approximated by evaluatesToLocalValue.\n            // This prevents Issue 1101 where `f(a) { SIDE_EFFECT; USE a; }` called with\n            // `f(x)` could evaluate x differently after inlining.\n            if (functionBodyHasSideEffects && !NodeUtil.evaluatesToLocalValue(cArg)) {\n                return CanInlineResult.NO;\n            }\n        }\n      }\n\n      // Check constraints on extra arguments (passed but no corresponding parameter).\n      if (cArg != null && fnParam == null) {\n          // If an extra argument has side effects, its evaluation must be preserved.\n          // Direct inlining can't guarantee this, so disallow.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n              return CanInlineResult.NO;\n          }\n      }\n\n      // Move to the next parameter and argument.\n      if (fnParam != null) {\n        fnParam = fnParam.getNext();\n      }\n      if (cArg != null) {\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}