{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * 2) If the function has side effects, none of the arguments can be expressions\n   * that might be affected by the function's side effects. This is a conservative\n   * check, assuming that any non-literal argument might be affected.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a){ x=1; return a; }\n   *     y = foo(x); // 'x' might be affected if x=1 runs before 'a' is used.\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    // Check for side effects in the function body once.\n    boolean functionHasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check related conditions.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check 1: Argument potentially affects mutable state AND the\n          // parameter is used multiple times.\n          // Example: foo(i++) where foo(a){ return a+a; }\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n\n          // Check 2: Function body has side effects AND argument is not a literal.\n          // This prevents potential issues where the side effect changes state\n          // used by the argument expression before the parameter is referenced.\n          // Example: foo(x) where foo(a){ modify(); return a; }\n          if (functionHasSideEffects && !NodeUtil.isLiteralValue(cArg)) {\n             return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next parameter.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match. This handles remaining args\n      // and ensures order of argument evaluation side effects.\n      // Example: foo(i++, j++)\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}