{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * 2) If the function body has side effects, arguments must not have side\n   * effects or refer to objects whose state may be changed by the body's\n   * side effects. This prevents reordering of side effects.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { x=1; return a; }\n   *     y = foo(x); // If x=0 initially, returns 0, but x becomes 1.\n   *                 // Inlined: { x=1; y=x; } which results in y=1.\n   *     function bar(a) { return a; }\n   *     bar(x=1); // Argument has side effect. If inlined into a function\n   *               // with side effects, order might change.\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Check for side-effect interactions early.\n    boolean functionBodyHasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n    // Arguments start after the call target.\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Handle 'this' in .call and .apply\n    boolean isCallOrApply = false;\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        isCallOrApply = true;\n        // TODO(johnlenz): Support replace this with a value.\n        // Parameter list does not include the 'this' argument.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext(); // Skip 'this', move to real arguments.\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // If the function body has side-effects, check for arguments that have\n    // side-effects or that reference aliased state. This prevents the order of\n    // side-effects from changing.\n    if (functionBodyHasSideEffects) {\n        Node currentArg = cArg;\n        while (currentArg != null) {\n            // An argument is problematic if it has side effects or refers to\n            // names/properties that might be affected by the function body's\n            // side effects (captured by canBeSideEffected).\n            if (NodeUtil.mayHaveSideEffects(currentArg, compiler)\n                || NodeUtil.canBeSideEffected(currentArg)) {\n                 return CanInlineResult.NO;\n            }\n            currentArg = currentArg.getNext();\n        }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Check each parameter/argument pair.\n    while (cArg != null || fnParam != null) {\n      // Check arguments (cArg) first.\n      if (cArg != null) {\n        // Check for arguments with side effects that are evaluated more than once.\n        if (fnParam != null) {\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Check arguments that are not used by the function.\n        // If the function body has no side-effects, an argument function call\n        // will be preserved by the FunctionArgumentInjector. However, this is\n        // probably not what the user expects, so we don't inline.\n        // This is the original Check #2. Let's keep it for safety, as removing it\n        // caused issues in the past (see comments in original code/history).\n        // It prevents `foo(modify())` where `foo(){}` from being inlined to `{}`.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           // This check might be too strict if functionBodyHasSideEffects is false,\n           // but better safe than sorry without deeper analysis of argument injector guarantees.\n           // The check above already handled the functionBodyHasSideEffects=true case.\n           if (!functionBodyHasSideEffects) {\n                return CanInlineResult.NO;\n           }\n           // If body had side effects, the check at the top would have returned NO already.\n        }\n\n        cArg = cArg.getNext();\n      }\n\n      // Move to the next parameter.\n      if (fnParam != null) {\n        fnParam = fnParam.getNext();\n      }\n    }\n\n    return CanInlineResult.YES; // Passed all checks.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}