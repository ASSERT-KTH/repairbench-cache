{
    "generation": "    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (offset < 0 || len < 0) {\n            throw new IndexOutOfBoundsException(\"offset=\" + offset + \", len=\" + len);\n        } else if (offset > b.length || offset + len > b.length) {\n            throw new IndexOutOfBoundsException(\"offset=\" + offset + \", len=\" + len + \", b.length=\" + b.length);\n        } else if (len == 0) {\n            return 0;\n        } else {\n            int readLen = 0;\n            /*\n             Rationale for while-loop on (readLen == 0):\n             -----\n             Base64.readResults() usually returns > 0 or EOF (-1).  In the\n             rare case where it returns 0, we just keep trying.\n\n             This is essentially an undocumented contract for InputStream\n             implementors that want their code to work properly with\n             java.io.InputStreamReader, since the latter hates it when\n             InputStream.read(byte[]) returns a zero.  Unfortunately our\n             readResults() call must return 0 if a large amount of the data\n             being decoded was non-base64, so this while-loop enables proper\n             interop with InputStreamReader for that scenario.\n             -----\n             This is a fix for CODEC-101\n            */\n            while (readLen == 0) {\n                if (!base64.hasData()) { // Check if internal buffer has data\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf); // Try reading from underlying stream\n                    if (c == -1) { // Reached EOF of underlying stream\n                        base64.eof(); // Signal EOF to Base64 codec\n                        // Don't return -1 yet, base64 might still have data to return\n                        // The loop will continue, and readResults should eventually return -1\n                        // if no more data is available.\n                    } else if (c > 0) { // Process the data read\n                        if (doEncode) {\n                            base64.encode(buf, 0, c);\n                        } else {\n                            base64.decode(buf, 0, c);\n                        }\n                    }\n                    // If c == 0 from in.read(), just loop again.\n                }\n                \n                // Try to fill the user buffer with processed data from Base64 codec\n                readLen = base64.readResults(b, offset, len);\n                \n                // If readLen is 0, the loop will continue. This handles the\n                // case where decode/encode consumed data but produced no new\n                // output bytes yet, or if EOF was reached and finalizing produced no data.\n                // The Base64 class's readResults method is responsible for returning -1\n                // eventually after eof() has been called and all buffered data is drained.\n                if (readLen == 0 && base64.isEof()) {\n                    // Optimization: If EOF has been signaled and readResults returns 0,\n                    // we know no more data will ever be produced. We can stop looping.\n                    // The final return value should be -1 in this case.\n                    // However, readResults should return -1 itself in this state.\n                    // Let's rely on readResults to return -1 eventually.\n                    // The while loop condition handles termination correctly when readLen becomes non-zero.\n                }\n            }\n            // Returns the number of bytes read (>0) or -1 if EOF reached.\n            return readLen; \n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}