{
    "generation": "    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     *\n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     *\n     * @return number of bytes read, or -1 for EOF\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    @Override\n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        // consolidated bounds check\n        } else if (offset < 0 || len < 0 || len > b.length - offset) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        } else {\n            /*\n             Rationale for while-loop on (readLen == 0):\n             -----\n             Base64.readResults() usually returns > 0 or EOF (-1). In the\n             rare case where it returns 0, we just keep trying.\n\n             This is essentially an undocumented contract for InputStream\n             implementors that want their code to work properly with\n             java.io.InputStreamReader, since the latter hates it when\n             InputStream.read(byte[]) returns a zero. Unfortunately our\n             readResults() call must return 0 if a large amount of the data\n             being decoded was non-base64, so this while-loop enables proper\n             interop with InputStreamReader for that scenario.\n             -----\n             This is a fix for CODEC-101\n            */\n            int readLen = 0;\n            while (readLen == 0) {\n                 // Check EOF status *before* attempting to read more\n                 // Note: isEof() is checked again after readResults() below.\n                if (base64.isEof()) {\n                    return -1; // Base64 processor has already processed EOF\n                }\n                // If the base64 processor doesn't have data ready, read from underlying stream\n                if (!base64.hasData()) {\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf); // Read from underlying stream\n                    if (c == -1) { // End of underlying stream reached\n                        // Signal EOF to the Base64 processor to flush remaining data\n                        // and set its internal EOF flag.\n                        if (doEncode) {\n                            base64.encode(buf, 0, -1);\n                        } else {\n                            base64.decode(buf, 0, -1);\n                        }\n                    } else if (c > 0) { // Data read from underlying stream\n                        // Feed the read data to the Base64 processor\n                        if (doEncode) {\n                            base64.encode(buf, 0, c);\n                        } else {\n                            base64.decode(buf, 0, c);\n                        }\n                    }\n                    // If c == 0, we loop again, possibly waiting for data or EOF.\n                }\n\n                // Attempt to read processed data from Base64 processor into output buffer 'b'\n                readLen = base64.readResults(b, offset, len);\n\n                // After attempting to read results, check EOF state again.\n                // If readResults still returned 0, but the processor now indicates EOF\n                // (because we fed it -1 in this iteration or it processed all data),\n                // then we are truly at the end.\n                if (readLen == 0 && base64.isEof()) {\n                    return -1;\n                }\n                // Loop continues if readLen == 0 and not EOF.\n                // Loop terminates if readLen > 0 (data read) or readLen == -1 (EOF from readResults).\n            }\n            return readLen;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}