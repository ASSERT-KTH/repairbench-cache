{
    "generation": "  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      // Functions in the \"Math\" namespace have no side effects.\n      if (nameNode.getFirstChild().isName() &&\n          \"Math\".equals(nameNode.getFirstChild().getString())) {\n        return false;\n      }\n\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        // TODO(nicksantos): This is not technically correct. For example,\n        // o.toString() is not side-effect free if o has a weird toString\n        // method. But this seems to happen rarely in practice.\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n\n      // Check for RegExp and String method calls with no side-effects.\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        Node obj = nameNode.getFirstChild();\n        String method = nameNode.getLastChild().getString();\n        if (obj.getType() == Token.REGEXP && REGEXP_METHODS.contains(method)) {\n          return false;\n        } else if (obj.getType() == Token.STRING && STRING_REGEXP_METHODS.contains(method)) {\n          Node param = nameNode.getNext();\n          // Most String methods are not side-effect free, but methods that take\n          // a RegExp are not currently modeled in the externs. Assume that\n          // if the RegExp object has no global properties, these methods are\n          // side effect free. Note: This check still incorrectly assumes that\n          // String.prototype.search is side-effect free, because it does not\n          // check the properties of the RegExp object.\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}