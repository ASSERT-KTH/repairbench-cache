{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                //   as only former is lower-case in case-insensitive case.\n                // 11-Nov-2023, fix for [#1493], use the key from hash area, not property name.\n                // Note: _hashArea[i-1] contains the canonical key (String)\n                Object K = _hashArea[i-1];\n                // Let's be safe though, maybe null marker or sth?\n                // (although nulls shouldn't be added)\n                if (key.equals(K)) {\n                    found = true;\n                    // need to leave a hole here\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    continue; // skip adding to new list\n                }\n            }\n            // If not the removed property, add to the list of properties to keep\n            props.add(prop);\n        }\n\n        // Should be found, always, for this call, so:\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        // Rebuild the map with the remaining properties\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}