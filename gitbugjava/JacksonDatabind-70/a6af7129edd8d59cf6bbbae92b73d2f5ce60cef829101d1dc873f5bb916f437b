{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        // 'key' is the canonical name (potentially lower-case if case-insensitive)\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        // _hashArea contains [key1, value1, key2, value2, ...]\n        // We iterate starting from index 1 (the first value), stepping by 2\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            // 'prop' is the value (SettableBeanProperty) at index i\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) { // skip removed entries\n                continue;\n            }\n            if (!found) {\n                // We need to compare the canonical key of the property to remove ('key')\n                // with the canonical key stored in the hash area. The stored key is\n                // at index i-1. This handles case-insensitivity correctly as the\n                // stored key (_hashArea[i-1]) and 'key' are both canonicalized (e.g., lower-cased).\n                Object storedKey = _hashArea[i-1];\n                if (key.equals(storedKey)) { // FIX: Compare canonical key against stored key\n                    found = true;\n                    // Found the property to remove. Mark it as removed in the ordered list.\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    // Continue to the next iteration without adding this property to 'props'.\n                    continue;\n                }\n            }\n            // If this property is not the one to remove, add it to the list of properties to keep.\n            props.add(prop);\n        }\n\n        // After iterating through all entries, if the property was not found, throw an exception.\n        if (!found) {\n            // Use the original property name in the error message for clarity.\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        // Re-initialize the internal structures with the remaining properties.\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}