{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        // Use the canonical name (potentially lowercased)\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        // _hashArea alternates key/value, so check value slots (odd indices i=1, 3, ...)\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            // current property\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) { // sanity check; shouldn't occur? Or maybe placeholder\n                continue;\n            }\n            if (!found) {\n                // Compare the canonical key we are looking for with the key stored in the hash area\n                // Key is stored at index i-1\n                String currentKey = (String) _hashArea[i - 1];\n                // NOTE: `key` is canonical, `currentKey` should also be.\n                // This is the main fix: compare `key` against the stored key (`_hashArea[i-1]`),\n                // NOT against `prop.getName()`, which might have different casing.\n                if (key.equals(currentKey)) {\n                    // We found the property to remove.\n                    // Remove it from the ordered list (_propsInOrder)\n                     _propsInOrder[_findFromOrdered(prop)] = null;\n                     found = true;\n                    // Do not add it to the 'props' list; skip to next iteration\n                    continue;\n                }\n            }\n            // If it wasn't the property to remove, or if we already found the one to remove,\n            // add the current property to our list of properties to keep.\n            props.add(prop);\n        }\n\n        // After iterating through all slots, check if we actually found it\n        if (!found) {\n            // Use the original property name in the error message for clarity\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        // Re-initialize the map with the filtered properties\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}