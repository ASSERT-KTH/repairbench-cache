{
    "generation": "    private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#parsing-main-inrawtext\n        // specific handling for tags like <style> and <script> where we need to handle tags specially.\n        tb.insert(startTag);\n\n        // According to the spec, the self-closing flag should be ignored for these tags.\n        // However, existing tests expect that a self-closing tag like <style/> is immediately closed.\n        // To match this behavior, we process an end tag token immediately if the start tag is self-closing.\n        if (startTag.isSelfClosing()) {\n            // Process the implied end tag token. This will pop the element correctly\n            // based on the current insertion mode's handling of the end tag.\n            // We don't transition to Rawtext/Text modes in this case.\n            tb.process(new Token.EndTag(startTag.tagName()));\n            // The tokeniser would have already consumed the \"/>\" as part of the start tag.\n            // We don't need tb.tokeniser.acknowledgeSelfClosingFlag() here, the parser handles it.\n        } else {\n            // Standard behavior for non-self-closing rawtext tags:\n            // Switch tokeniser state to Rawtext to capture literal content.\n            tb.tokeniser.transition(TokeniserState.Rawtext);\n            // Mark the current insertion mode to return to it after the rawtext content.\n            tb.markInsertionMode();\n            // Switch the parser's insertion mode to Text to handle the content and the closing tag.\n            tb.transition(Text);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}