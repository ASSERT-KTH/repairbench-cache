{
    "generation": "    private Position decodePosition(\n            Channel channel, DeviceSession deviceSession, ByteBuf buf, int type, int index, ByteBuf imei) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_INDEX, index);\n\n        if (header != 0x2727) {\n\n            buf.readUnsignedShort(); // acc on interval\n            buf.readUnsignedShort(); // acc off interval\n            buf.readUnsignedByte(); // angle compensation\n            buf.readUnsignedShort(); // distance compensation\n\n            position.set(Position.KEY_RSSI, BitUtil.to(buf.readUnsignedShort(), 7));\n\n        }\n\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_SATELLITES, BitUtil.to(status, 5));\n\n        if (header != 0x2727) {\n\n            buf.readUnsignedByte(); // gsensor manager status\n            buf.readUnsignedByte(); // other flags\n            buf.readUnsignedByte(); // heartbeat\n            buf.readUnsignedByte(); // relay status\n            buf.readUnsignedShort(); // drag alarm setting\n\n            int io = buf.readUnsignedShort();\n            position.set(Position.KEY_IGNITION, BitUtil.check(io, 14));\n            position.set(\"ac\", BitUtil.check(io, 13));\n            position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 12));\n            position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 11));\n\n            if (type == MSG_GPS_2 || type == MSG_ALARM_2) {\n                position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                buf.readUnsignedByte(); // reserved\n            } else {\n                position.set(Position.KEY_OUT + 1, BitUtil.check(io, 7));\n                position.set(Position.KEY_OUT + 2, BitUtil.check(io, 8));\n                position.set(Position.KEY_OUT + 3, BitUtil.check(io, 9));\n            }\n\n            if (header != 0x2626) {\n\n                int adcCount = type == MSG_GPS_2 || type == MSG_ALARM_2 ? 5 : 2; // ADC count is 5 or 2\n                for (int i = 1; i <= adcCount; i++) {\n\n                    // \u6b63\u786e\u8bfb\u53d6\u4e24\u4e2a\u5b57\u8282\u5e76\u8f6c\u4e3a\u6574\u6570\uff0c\u907f\u514dHEX\u89e3\u6790\u7684\u95ee\u9898:\n                    int adcValue = buf.readUnsignedShort();\n                    if (adcValue != 0xffff) {  // \u6bd4\u8f83\u5341\u516d\u8fdb\u5236\u6570\u503c\n                        position.set(Position.KEY_ADC + i, adcValue * 0.01); \n                    }\n\n                }\n            }\n\n        }\n\n        int alarm = buf.readUnsignedByte();\n        position.set(Position.KEY_ALARM, header != 0x2727 ? decodeAlarm1(alarm) : decodeAlarm2(alarm));\n        position.set(\"alarmCode\", alarm);\n\n        if (header != 0x2727) {\n\n            buf.readUnsignedByte(); // reserved\n\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n            int battery = BcdUtil.readInteger(buf, 2);\n            position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);\n\n        }\n\n        if (BitUtil.check(status, 6)) {\n\n            position.setValid(true);\n            position.setTime(readDate(buf));\n            position.setAltitude(buf.readFloatLE());\n            position.setLongitude(buf.readFloatLE());\n            position.setLatitude(buf.readFloatLE());\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf,4) *0.1));\n            position.setCourse(buf.readUnsignedShort());\n\n        } else {\n\n            getLastLocation(position, readDate(buf));\n\n            int mcc = buf.readUnsignedShortLE();\n            int mnc = buf.readUnsignedShortLE();\n\n            if (mcc != 0xffff && mnc != 0xffff) {\n                Network network = new Network();\n                for (int i = 0; i < 3; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE()));\n                }\n                position.setNetwork(network);\n            }\n        }\n\n        if (header == 0x2727) {\n\n            byte[] accelerationBytes = new byte[5];\n            buf.readBytes(accelerationBytes);\n            long acceleration = new BigInteger(accelerationBytes).longValue();\n            double accelerationZ = BitUtil.between(acceleration, 8, 15) + BitUtil.between(acceleration, 4, 8) * 0.1;\n            if (!BitUtil.check(acceleration, 15)) {\n                accelerationZ = -accelerationZ;\n            }\n            double accelerationY = BitUtil.between(acceleration, 20, 27) + BitUtil.between(acceleration, 16, 20) * 0.1;\n            if (!BitUtil.check(acceleration, 27)) {\n                accelerationY = -accelerationY;\n            }\n            double accelerationX = BitUtil.between(acceleration, 28, 32) + BitUtil.between(acceleration, 32, 39) * 0.1;\n            if (!BitUtil.check(acceleration, 39)) {\n                accelerationX = -accelerationX;\n            }\n            position.set(Position.KEY_G_SENSOR, \"[\" + accelerationX + \",\" + accelerationY + \",\" + accelerationZ + \"]\");\n\n            int battery = BcdUtil.readInteger(buf, 2);\n            position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);\n            position.set(Position.KEY_DEVICE_TEMP, (int) buf.readByte());\n            position.set(\"lightSensor\", BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(Position.KEY_BATTERY, BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(\"solarPanel\", BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n            int inputStatus = buf.readUnsignedShort();\n            position.set(Position.KEY_IGNITION, BitUtil.check(inputStatus, 2));\n            position.set(Position.KEY_RSSI, BitUtil.between(inputStatus,4,11)); // \u8fd9\u91cc\u5047\u8bbe\u9700\u8bfb\u53d6 4\u523011 bits? \n\n            position.set(Position.KEY_INPUT, inputStatus);\n\n            buf.readUnsignedShort(); // ignition upload interval\n            buf.readUnsignedInt(); \n            // etc \n\n        } else { // \u5f53header !=2727\u65f6\u7684else\u5757:\n\n            // (First section)\n          if (buf.readableBytes() >=2) { position.set( ... using BCDUtil. \n\n                 \u8fd9\u4e2a\u5730\u65b9\u7684\u53c2\u6570\u662f\u5426\u6b63\u786e?\n\n    \u539f\u4ee3\u7801\u7684 BCD readInteger(buf,4) \u5bf9\u5e94\u7684\u662f4\u4f4dBCD\u6570\uff082\u5b57\u8282\uff09 \u2192 \u9700\u8981\u786e\u4fdd\u8db3\u591f\u8bfb2\u5b57\u8282\u800c\u4e0d\u662f4. \u4f46 if condition is readable>2 which is okay. \n\n            }\n\n            // second part, the second condition's changed code: \n            if (buf.readableBytes() >=19) {\n\n                position.set(Position.KEY_OBD_SPEED, BcdUtil.readInteger(buf, 4)*0.01); // 4\u4e2adigits\u662f2 bytes\n\n                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001); \u2192 4 bytes (32\u4f4d?) \u2192 uint32\n\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt() *0.001);\n\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n\n                \n                // \u72ec\u81ea\u8fdb\u884c\u66f4\u591areads:\n                int airInput = buf.readUnsignedByte();\n                if (airInput != 0xFF) { \n                    position.set(\"airInput\", airInput);\n                }\n\n                int airPressure = buf.readUnsignedByte();\n                if (airPressure !=0xFF) {\n                    position.set(\"airPressure\", airPressure);\n                }\n\n                int coolantTemp = buf.readUnsignedByte();\n                if (coolantTemp !=0xFF) {\n                    position.set(Position.KEY_COOLANT_TEMP, coolantTemp -40);\n                }\n\n                int airTemp = buf.readUnsignedByte();\n                if (airTemp !=0xFF) {\n                    position.set(\"airTemp\", airTemp-40);\n                }\n\n                int engineLoad = buf.readUnsignedByte();\n                if (engineLoad !=0xFF) {\n                    position.set(Position.KEY_ENGINE_LOAD, engineLoad);\n                }\n\n                int throttle = buf.readUnsignedByte();\n                if (throttle !=0xFF) {\n                    position.set(Position.KEY_THROTTLE, throttle);\n                }\n\n                int fuelLevel = buf.readUnsignedByte();\n                if (fuelLevel !=0xFF) {\n                    position.set(Position.KEY_FUEL_LEVEL, fuelLevel);\n                }\n            }\n\n        }\n\n        boolean acknowledgement = AttributeUtil.lookup(\n                getCacheManager(), Keys.PROTOCOL_ACK.withPrefix(getProtocolName()), deviceSession.getDeviceId());\n        if (acknowledgement || type == MSG_ALARM || type == MSG_ALARM_2) {\n            sendResponse(channel, header, type, index, imei, alarm);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}