{
    "generation": "    /**\n     * Variant called when creation of the POJO involves buffering of creator properties\n     * as well as property-based creator.\n     */\n    public Object complete(JsonParser p, DeserializationContext ctxt,\n            PropertyValueBuffer buffer, PropertyBasedCreator creator)\n        throws IOException\n    {\n        // first things first: deserialize all data buffered:\n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            if (typeId == null) {\n                // let's allow missing both type and property (may already have been set, too)\n                if (_tokens[i] == null) {\n                    continue;\n                }\n                // but not just one\n                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n                if (!extProp.hasDefaultType()) {\n                    // 11-Sep-2019, tatu: Probably could decent default value but...\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                    // fall through just in case we ignore error\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                // 11-Sep-2019, tatu: Need to allow default value, if any, for property too\n                if (prop.isRequired() || ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {\n                    ctxt.reportInputMismatch(_beanType,\n                        \"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), extProp.getTypePropertyName());\n                } else {\n                    // Important: support default value for the property.\n                    values[i] = prop.getNullValueProvider().getNullValue(ctxt);\n                    // We don't actually have the property token, so null is fine?\n                    // Or should we retain the typeId somehow?\n                    // NNO! Cannot skip processing as we may need this for creator call.\n                    // continue;\n                }\n            }\n\n            // 11-Sep-2019, tatu: May need this for default value too\n            if (values[i] == null) {\n                values[i] = _deserialize(p, ctxt, i, typeId);\n            }\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            // also: if it's creator prop, fill in\n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                // [databind#999] And maybe there's creator property for type id too?\n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                // for now, should only be needed for creator properties, too\n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    Object typeValueToAssign;\n                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                    //    apply deserializer... fun fun.\n                    // 10-Jun-2020, tatu: As per [databind#2733], may need conversion based on\n                    //    target type; not just Enum but other scalar types too.\n                    final Class<?> typeMeta = typeProp.getType().getRawClass();\n                    if (typeMeta.isAssignableFrom(String.class)) {\n                       typeValueToAssign = typeId;\n                    } else {\n                        // Use TokenBuffer to wrap the String typeId and parse it using the property's deserializer\n                        com.fasterxml.jackson.databind.util.TokenBuffer tb = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n                        tb.writeString(typeId);\n\n                        // important: need to use existing parser, context\n                        JsonDeserializer<Object> deser = typeProp.getValueDeserializer();\n                        // 10-Jun-2020, tatu: Should not really happen but...\n                        if (deser == null) {\n                            ctxt.reportInputMismatch(typeProp,\n                                    \"Missing JsonDeserializer for type id property '%s' (type %s)\",\n                                    typeProp.getName(), typeProp.getType());\n                            // should perhaps not assign? Or what? For now, null? Seems suboptimal\n                            typeValueToAssign = null; // Or... String? null seems safer if there's error\n                        } else {\n                            try (JsonParser p2 = tb.asParserOnFirstToken()) { // requires p2.nextToken()\n                                // Need to advance parser to the first token\n                                if (p2.nextToken() == null) {\n                                    // Should not happen if we wrote a string\n                                    ctxt.reportInputMismatch(typeProp, \"Internal error: failed parsing type id '%s' for property '%s'\",\n                                            typeId, typeProp.getName());\n                                    typeValueToAssign = null;\n                                } else {\n                                    typeValueToAssign = deser.deserialize(p2, ctxt);\n                                }\n                            }\n                        }\n                        tb.close();\n                    }\n                    buffer.assignParameter(typeProp, typeValueToAssign);\n                }\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        // third: assign non-creator properties\n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}