{
    "generation": "    /**\n     * Variant called when creation of the POJO involves buffering of creator properties\n     * as well as property-based creator.\n     */\n    public Object complete(JsonParser p, DeserializationContext ctxt,\n            PropertyValueBuffer buffer, PropertyBasedCreator creator)\n        throws IOException\n    {\n        // first things first: deserialize all data buffered:\n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            if (typeId == null) {\n                // let's allow missing both type and property (may already have been set, too)\n                if (_tokens[i] == null) {\n                    continue;\n                }\n                // but not just one\n                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n                if (!extProp.hasDefaultType()) {\n                    // 11-Sep-2019, tatu: For [databind#2434], need to consider null type id:\n                    //    is this ok? Needs further work but for now must be accepted.\n                    // Let's see... We may need to default to `null` in buffer, but value may be needed for Creator\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing external type id property '%s' (and no 'defaultImpl' specified)\",\n                            extProp.getTypePropertyName());\n                 } else {\n                    typeId = extProp.getDefaultTypeId();\n                    if (typeId == null) {\n                        ctxt.reportInputMismatch(_beanType,\n                                \"Invalid default type id for property '%s': `null` returned by TypeIdResolver\",\n                                extProp.getTypePropertyName());\n                    }\n                 }\n            } else if (_tokens[i] == null) {\n                // Conversely, got type id, but not property value. This is an error.\n                SettableBeanProperty prop = extProp.getProperty();\n                // 13-Nov-2015, tatu: Let's try to report actual type name, if available\n                if (prop.isRequired() || ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing property '%s' for external type id '%s'\",\n                            prop.getName(), _properties[i].getTypePropertyName());\n                } else {\n                    // We could leave entry as null; or, use \"missing\" value\n                    // Need to consider what Creator property might expect. Let's leave as null for now.\n                    values[i] = null;\n                    // but do make sure associated type property is passed if need be:\n                    if (prop.getCreatorIndex() >= 0) { // should be true actually...\n                        SettableBeanProperty typeProp = extProp.getTypeProperty();\n                        if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                            // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                            //    apply deserializer... fun fun.\n                            // 19-Jun-2018, tatu: Rather than TokenBuffer, simpler to use `ObjectMapper.valueToTree`\n                            //    equivalent combination:\n                            Object typeValue;\n                            if (typeProp.getType().hasRawClass(String.class)) {\n                                typeValue = typeId;\n                            } else {\n                                // Use context's node factory and object mapper (via context) to convert\n                                JsonNode node = ctxt.getNodeFactory().textNode(typeId);\n                                typeValue = ctxt.readTreeAsValue(node, typeProp.getType());\n                            }\n                            buffer.assignParameter(typeProp, typeValue);\n                        }\n                    }\n                    continue;\n                }\n            }\n\n            // Minor complication: type id itself may be needed as Creator param:\n            // If typeId is null, it's handled above, so it should not be null here\n            values[i] = _deserialize(p, ctxt, i, typeId);\n            final SettableBeanProperty prop = extProp.getProperty();\n            // also: if it's creator prop, fill in\n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                // [databind#999] And maybe there's creator property for type id too?\n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                // for now, should only be needed for creator properties, too\n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                    //    apply deserializer... fun fun.\n                    // 19-Jun-2018, tatu: Rather than TokenBuffer, simpler to use `ObjectMapper.valueToTree`\n                    //    equivalent combination:\n                    Object typeValue;\n                    // NOTE: We should perhaps not hard code String.class comparison? But for now, works.\n                    if (typeProp.getType().hasRawClass(String.class)) {\n                        typeValue = typeId;\n                    } else {\n                        // Use context's node factory and object mapper (via context) to convert\n                        JsonNode node = ctxt.getNodeFactory().textNode(typeId);\n                        typeValue = ctxt.readTreeAsValue(node, typeProp.getType());\n                    }\n                    buffer.assignParameter(typeProp, typeValue);\n                }\n            }\n        }\n\n        // Optimization: maybe we have all creator properties? If so, short-cut\n        Object bean = creator.build(ctxt, buffer);\n\n        // third: assign non-creator properties\n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                // 11-Sep-2019, tatu: [databind#2434] Need to consider `values[i]` possibly\n                //    being null if type id was missing for non-required property\n                Object value = values[i];\n                if (value != null) {\n                    prop.set(bean, value);\n                 } else {\n                    // 11-Sep-2019, tatu: Related to [databind#2434], it seems we should not\n                    //   attempt buffer property if we are missing type id AND value tokens... right?\n                    //   Need test case but seems plausible.\n                    if ((_typeIds[i] == null) && (_tokens[i] == null)) { // both missing is fine\n                        ;\n                    } else { // otherwise should be ok to set `null`\n                         // 19-Jan-2020, tatu: Actually, `prop.set(bean, null)` might fail, if setter has\n                         //    `@JsonSetter(nulls=JsonInclude.Include.FAIL)`.\n                         //    ... but maybe this is acceptable. Let's assume so for now.\n                        prop.set(bean, value);\n                    }\n                 }\n            }\n        }\n        return bean;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}