{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    // Line numbers are 1-based. Disallow 0 or negative.\n    if (lineNumber <= 0) {\n        return null;\n    }\n\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than or\n    // equal to the one we're searching for, then start at that point.\n    // Otherwise, start from the beginning.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    } else {\n      // Requested line is before the cached line, reset cache and start over.\n      // Although not strictly necessary for correctness (the loop would still work),\n      // resetting the cache state is cleaner.\n      lastLine = 1;\n      lastOffset = 0;\n      // pos and startLine are already 0 and 1.\n    }\n\n    // Iterate through lines until we reach the start of the desired line number.\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // We've reached the end of the string before finding the start\n        // of the requested line number.\n        return null;\n      }\n      // Move position to the character immediately following the newline,\n      // which is the start of the next line.\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset (the start of the current line) for the next search.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of the current line.\n    int endpos = js.indexOf('\\n', pos);\n\n    if (endpos == -1) {\n      // No newline found after 'pos'.\n      // This means we are on the last line of the file, or the file is empty,\n      // or we are trying to access a line beyond the end of a file ending with a newline.\n\n      // Check if 'pos' is actually within the bounds of the string content.\n      // If pos >= js.length(), it means the line we are looking for starts\n      // at or after the end of the file content. This happens for:\n      // - Empty file (js=\"\", lineNumber=1 => pos=0, length=0)\n      // - File ending with newline (\"abc\\n\", lineNumber=2 => loop sets pos=4, length=4)\n      if (pos >= js.length()) {\n          // The requested line number is out of bounds.\n          return null;\n      } else {\n          // 'pos' points to the start of the last line, and there's content\n          // from 'pos' to the end of the string. Return this content.\n          return js.substring(pos);\n      }\n    } else {\n      // Found a newline at 'endpos'. The line content is from 'pos' up to\n      // (but not including) the newline character.\n      return js.substring(pos, endpos);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}