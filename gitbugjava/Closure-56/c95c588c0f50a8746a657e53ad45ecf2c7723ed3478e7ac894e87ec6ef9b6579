{
    "generation": "  /**\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   */\n  public String getLine(int lineNumber) {\n    // Ensure lineNumber is positive\n    if (lineNumber <= 0) {\n      return null;\n    }\n\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than or equal to\n    // the one we're searching for, then start at that point.\n    // Check >= here to handle potential repeated requests for the same line.\n    // Note: This optimization assumes `getCode` always returns the same String object\n    // or that the content has not changed between calls.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    // Iterate to find the starting position ('pos') of the requested lineNumber.\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // We've reached the end of the string before finding the start\n        // of the requested line number. This means the line doesn't exist.\n        return null;\n      }\n      // Move position past the newline character for the next iteration.\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset and line number for the next search we do.\n    // Setting this here ensures that if we returned null above, we don't\n    // incorrectly cache a position for a non-existent line.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Find the end of the line (the next newline character).\n    int endpos = js.indexOf('\\n', pos);\n\n    if (endpos == -1) {\n      // No newline found after 'pos'. This means we are on the last line,\n      // or the file is empty, or pos is past the end of the content.\n      // If pos is at or past the end of the string, the requested line doesn't exist\n      // (e.g., empty file requested line 1, or file ends in \\n and line after that is requested).\n      if (pos >= js.length()) {\n        return null;\n      } else {\n        // We are on a valid line (likely the last line) and it doesn't end with a newline.\n        // Return the rest of the string from 'pos'.\n        return js.substring(pos);\n      }\n    } else {\n      // Found a newline. Return the substring representing the line content\n      // between pos (inclusive) and endpos (exclusive).\n      return js.substring(pos, endpos);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}