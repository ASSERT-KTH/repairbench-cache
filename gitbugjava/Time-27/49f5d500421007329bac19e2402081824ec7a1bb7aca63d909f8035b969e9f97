{
    "generation": "    //-----------------------------------------------------------------------\n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        // The following block was removed as it incorrectly handled leading separators.\n        // It recursively processed the tail of the list, finished the leading separator\n        // using the tail's formatter, but then discarded the tail's formatter,\n        // returning a formatter based only on the leading separator.\n        // This logic was flawed and likely unnecessary, as createComposite should handle\n        // all element combinations correctly.\n        // if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        //     Separator sep = (Separator) elementPairs.get(0);\n        //     PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n        //     sep = sep.finish(f.getPrinter(), f.getParser());\n        //     return new PeriodFormatter(sep, sep);\n        // }\n\n        // Rely on createComposite to build the printer/parser pair from all elements.\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            // Only parser requested.\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            // Only printer requested.\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            // Both printer and parser requested.\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}