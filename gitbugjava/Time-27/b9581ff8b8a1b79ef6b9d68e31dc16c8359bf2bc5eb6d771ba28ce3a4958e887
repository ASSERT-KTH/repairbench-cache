{
    "generation": "    //-----------------------------------------------------------------------\n    /**\n     * Creates a PeriodFormatter from the specified list of printers and parsers.\n     * <p>\n     * The list elements are printers and parsers. They will be analysed and\n     * combined to form a new formatter. Each element is either a PeriodPrinter,\n     * a PeriodParser or an object that is both.\n     * <p>\n     * The returned formatter will be based on the first element in the list.\n     * If the first element is a Separator, then the returned formatter will be\n     * that separator, but with the subsequent list analysed and formed into\n     * formatters that are passed into the separator.\n     *\n     * @param elementPairs  list of printers and parsers, not null\n     * @param notPrinter  true if shouldn't function as a printer\n     * @param notParser  true if shouldn't function as a parser\n     */\n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        // Removed the incorrect handling for a leading separator which discarded subsequent elements.\n        // The createComposite method is responsible for correctly handling separators within the list.\n        /*\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {\n                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                return new PeriodFormatter(sep, sep);\n            }\n        }\n        */\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}