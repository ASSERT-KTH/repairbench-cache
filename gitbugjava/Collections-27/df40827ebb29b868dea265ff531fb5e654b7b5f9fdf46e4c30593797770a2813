{
    "generation": "import org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.functors.ReflectionFactory;\n\nimport java.io.IOException;\nimport java.io.InvalidObjectException;\nimport java.io.ObjectInputStream;\nimport java.lang.reflect.Field;\nimport java.util.Collection;\nimport java.util.Map;\n\n    /**\n     * Read the map in using custom serialization implementations.\n     *\n     * @param in the input stream\n     * @throws IOException            if an I/O error occurs\n     * @throws ClassNotFoundException if the stream contains an object which class can not be loaded\n     * @throws UnsupportedOperationException if the stream contains an invalid collection class\n     */\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject(); // Reads the collectionClass field.\n\n        // Validate the collectionClass straight away\n        if (collectionClass == null) {\n            throw new InvalidObjectException(\"collectionClass is null during deserialization\");\n        }\n        if (!Collection.class.isAssignableFrom(collectionClass)) {\n            throw new UnsupportedOperationException(\"Deserialized collection class \" + collectionClass.getName() +\n                                                    \" is not assignable to Collection\");\n        }\n\n        // Recreate the transient factory - needs reflection to set final field\n        final Factory<? extends Collection<V>> factory = new ReflectionFactory<>(collectionClass);\n        try {\n            final Field factoryField = MultiValueMap.class.getDeclaredField(\"collectionFactory\");\n            factoryField.setAccessible(true);\n            factoryField.set(this, factory);\n        } catch (final NoSuchFieldException | IllegalAccessException e) {\n            // This should not happen if the field exists and security policy allows access\n            throw new InvalidObjectException(\"Unable to initialize transient final field collectionFactory: \" + e.getMessage());\n        }\n\n        // Read the decorated map\n        @SuppressWarnings(\"unchecked\") // Keep CCE type safety via convention\n        final Map<K, ? super Collection<V>> map = (Map<K, ? super Collection<V>>) in.readObject();\n        // Set the map in the superclass (AbstractMultiValuedMap)\n        setMap(map);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}