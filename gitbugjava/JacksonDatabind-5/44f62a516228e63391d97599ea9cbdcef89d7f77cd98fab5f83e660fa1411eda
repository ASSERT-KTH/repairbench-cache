{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        // Ok, first: find overriding mix-in methods, if any:\n        // (note: assumes `mixInCls` is direct mix-in)\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        // 03-Aug-2017, tatu: As per [databind#1702], need to handle super-interfaces as well.\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        for (Class<?> mixin : parents) {\n            for (Method m : ClassUtil.getDeclaredMethods(mixin)) { // Use ClassUtil for potentially better handling\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n                /* Do we already have a method to augment (from sub-class\n                 * that will mask this mixIn)? If so, add if visible\n                 * without masking (no such annotation)\n                 */\n                if (am != null) {\n                    _addMixUnders(m, am);\n                    /* Otherwise will have precedence, but must wait\n                     * until we find the real method (mixIn methods are\n                     * just placeholder, can't be called)\n                     */\n                } else {\n                    // Well, or, as per [databind#515], multi-level merge within mixins...\n                    // Need to check if we already have added definition from a more\n                    // specific mix-in class (or this same class).\n                    // 16-May-2018, tatu: As per [databind#1973], need to ensure we do not\n                    //   add multiple mix-ins, starting with most specific one.\n                    //   Hence, only add if we don't already have it.\n                    if (mixIns.find(m) == null) {\n                        mixIns.add(_constructMethod(m));\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}