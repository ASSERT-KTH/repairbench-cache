{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        // Find supertypes of the mixin class up to Object, passing targetClass as context (used?)\n        // although null or Object.class might be cleaner stop condition.\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        // Iterate through the mixin hierarchy, starting from the most specific class\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n                /* If target class (or its supertypes) already has the method,\n                 * we will augment it with annotations from the mixin.\n                 */\n                if (am != null) {\n                    _addMixUnders(m, am);\n                /* Otherwise, it's a method solely introduced by the mixin hierarchy.\n                 * Add it to the separate mixIns map.\n                 */\n                } else {\n                    // Add to mixIns map only if a method with the same signature\n                    // hasn't already been added from a more specific mixin subclass.\n                    // The iteration order ensures subclasses are processed first.\n                    if (mixIns.find(m) == null) {\n                        mixIns.add(_constructMethod(m));\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}