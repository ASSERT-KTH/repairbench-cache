{
    "generation": "    /**\n     * Look for a type declaration on a property assignment\n     * (in an ASSIGN or an object literal key).\n     *\n     * @param info The doc info for this property.\n     * @param lValue The l-value node.\n     * @param rValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      if (info != null && info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n      } else if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n      } else if (info != null) {\n        if (info.hasEnumParameterType()) {\n          if (rValue != null && rValue.isObjectLit()) {\n            return rValue.getJSType();\n          } else {\n            return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        } else if (info.isConstructor() || info.isInterface()) {\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        } else {\n          // Check if this is constant, and if it has a known type.\n          if (info.isConstant()) {\n            if (rValue != null) {\n              JSType knownType = rValue.getJSType();\n              // If rValue has a type-cast, we use the type in the type-cast.\n              // If rValue's type was already computed during scope creation,\n              // then we can safely use that.\n              if (knownType != null && !knownType.isUnknownType()) {\n                return knownType;\n              } else if (rValue.isCast()) {\n                // Handling for a standalone variable annotated @const\n                // whose definition is a cast expression, like:\n                // /** @const */ var x = /** @type {Foo} */ (foo());\n                // The rValue JSType might not be set yet. We try to determine\n                // the type directly from the cast annotation.\n                JSDocInfo castInfo = rValue.getJSDocInfo();\n                if (castInfo != null && castInfo.hasType()) {\n                  // Pass rValue as the lValue node, because that's the node\n                  // the castInfo is attached to.\n                  return getDeclaredTypeInAnnotation(sourceName, rValue, castInfo);\n                }\n              } else if (rValue.isOr()) {\n                // Check for a very specific JS idiom:\n                // var x = x || TYPE;\n                // This is used by Closure's base namespace for esoteric\n                // reasons.\n                Node firstClause = rValue.getFirstChild();\n                Node secondClause = firstClause.getNext();\n                boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());\n                if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType()) {\n                  return secondClause.getJSType();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Fallback: use the type in the @type annotation if any.\n      // Includes the case where rValue is null, like /** @type {foo} */ var x;\n      // Includes the case where rValue is present but doesn't have a known type,\n      // like /** @type {foo} */ var x = function() {};\n      // Includes the case where the @const doesn't have an rValue type that\n      // we can figure out.\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}