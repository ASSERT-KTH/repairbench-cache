{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.skipBytes(2); // header\n        int type = buf.readUnsignedByte();\n        buf.readUnsignedShort(); // size of payload up to (but not including) checksum\n\n        if (type == MSG_LOGIN || type == MSG_ADMIN_NUMBER || type == MSG_SEND_TEXT\n                || type == MSG_SMS_ALARM_SWITCH || type == MSG_POSITION_REUPLOAD) {\n\n            ByteBuf response = Unpooled.buffer();\n            response.writeByte(0x29);\n            response.writeByte(0x29); // header\n            response.writeByte(MSG_CONFIRMATION);\n            response.writeShort(5); // size of this confirmation's payload\n            response.writeByte(buf.getByte(buf.writerIndex() - 2)); // serial (checksum byte of incoming msg)\n            response.writeByte(type); // echo original message type\n            response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0); // 10th byte of original raw message (index 9)\n            response.writeByte(Checksum.xor(response.nioBuffer()));\n            response.writeByte(0x0D); // ending\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n\n        }\n\n        if (type == MSG_ON_DEMAND || type == MSG_POSITION_UPLOAD || type == MSG_POSITION_REUPLOAD\n                || type == MSG_ALARM || type == MSG_REPLY || type == MSG_PERIPHERAL) {\n\n            Position position = new Position(getProtocolName());\n\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(buf, 2))\n                    .setMonth(BcdUtil.readInteger(buf, 2))\n                    .setDay(BcdUtil.readInteger(buf, 2))\n                    .setHour(BcdUtil.readInteger(buf, 2))\n                    .setMinute(BcdUtil.readInteger(buf, 2))\n                    .setSecond(BcdUtil.readInteger(buf, 2));\n            position.setTime(dateBuilder.getDate());\n\n            position.setLatitude(BcdUtil.readCoordinate(buf));\n            position.setLongitude(BcdUtil.readCoordinate(buf));\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4)));\n            position.setCourse(BcdUtil.readInteger(buf, 4));\n            position.setValid((buf.readUnsignedByte() & 0x80) != 0);\n\n            if (type != MSG_ALARM) {\n\n                int odometer = buf.readUnsignedMedium();\n                if (BitUtil.to(odometer, 16) > 0) {\n                    position.set(Position.KEY_ODOMETER, odometer);\n                } else if (odometer > 0) {\n                    position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));\n                }\n\n                position.set(Position.KEY_STATUS, buf.readUnsignedInt());\n\n                buf.readUnsignedShort();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n\n                position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n\n                if (type == MSG_PERIPHERAL) {\n\n                    int peripheralDataBlockLength = buf.readUnsignedShort(); // This length includes its own 2 bytes\n\n                    if (peripheralDataBlockLength >= 2) { // Must be at least 2 for the length field itself\n                        int itemsTotalLength = peripheralDataBlockLength - 2;\n                        int itemsEndIndex = buf.readerIndex() + itemsTotalLength;\n\n                        while (buf.readerIndex() < itemsEndIndex) {\n                            if (buf.readableBytes() < 2) { // Not enough for Type + Length of next item\n                                break; \n                            }\n                            int itemDataType = buf.readUnsignedByte();\n                            int itemContentLength = buf.readUnsignedByte();\n\n                            if (buf.readableBytes() < itemContentLength) { // Not enough for Value part of item\n                                buf.readerIndex(itemsEndIndex); // Consume rest of peripheral block\n                                break; \n                            }\n                            \n                            int itemValueStartIndex = buf.readerIndex();\n\n                            switch (itemDataType) {\n                                case 0x01: // Fuel Level\n                                    if (itemContentLength == 2) {\n                                        position.set(Position.KEY_FUEL_LEVEL,\n                                                buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                                    } else {\n                                        buf.skipBytes(itemContentLength);\n                                    }\n                                    break;\n                                case 0x02: // Temperature\n                                    if (itemContentLength == 2) {\n                                        position.set(Position.PREFIX_TEMP + 1,\n                                                buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                                    } else {\n                                        buf.skipBytes(itemContentLength);\n                                    }\n                                    break;\n                                case 0x18: // Multiple fuel sensor values\n                                    if (itemContentLength == 8) {\n                                        for (int i = 1; i <= 4; i++) {\n                                            double value = buf.readUnsignedShort();\n                                            if (value > 0x0000 && value < 0xFFFF) {\n                                                position.set(\"fuel\" + i, value / (double) 0xFFFE);\n                                            }\n                                        }\n                                    } else {\n                                        buf.skipBytes(itemContentLength);\n                                    }\n                                    break;\n                                case 0x20: // Battery Level\n                                    if (itemContentLength == 1) {\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    } else {\n                                        buf.skipBytes(itemContentLength);\n                                    }\n                                    break;\n                                case 0x23: // Network Cell Tower Data (LBS)\n                                    if (itemContentLength > 0) { \n                                        int count = buf.readUnsignedByte(); // 1 byte for count\n                                        int expectedLbsDataBytes = count * 8; // Each tower info is 8 bytes\n                                        // itemContentLength must be 1 (for count) + length of tower data\n                                        if (itemContentLength == 1 + expectedLbsDataBytes) {\n                                            if (buf.readableBytes() >= expectedLbsDataBytes) {\n                                                Network network = new Network();\n                                                for (int i = 0; i < count; i++) {\n                                                    network.addCellTower(CellTower.from(\n                                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                            buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                                                }\n                                                if (count > 0) {\n                                                    position.setNetwork(network);\n                                                }\n                                            } else { // Not enough readable bytes for all towers\n                                                buf.readerIndex(itemValueStartIndex); // Reset to start of item value\n                                                buf.skipBytes(itemContentLength);     // Skip entire item\n                                            }\n                                        } else {\n                                            // Mismatch in length. We read 'count' (1 byte). Skip rest of itemContentLength.\n                                            buf.skipBytes(itemContentLength - 1);\n                                        }\n                                    } else { // itemContentLength is 0.\n                                        // Skip 0 bytes (do nothing). Implies empty LBS data.\n                                    }\n                                    break;\n                                default:\n                                    buf.skipBytes(itemContentLength); // Skip unknown peripheral data type\n                                    break;\n                            }\n                            // Ensure reader index is advanced correctly if a case didn't consume full itemContentLength\n                            if (buf.readerIndex() < itemValueStartIndex + itemContentLength) {\n                                buf.readerIndex(itemValueStartIndex + itemContentLength);\n                            } else if (buf.readerIndex() > itemValueStartIndex + itemContentLength) {\n                                // Over-read within an item case, critical error. Force to expected end of item.\n                                buf.readerIndex(itemValueStartIndex + itemContentLength);\n                            }\n                        }\n                        // Ensure the full peripheral items block is consumed\n                        if (buf.readerIndex() < itemsEndIndex) {\n                            buf.skipBytes(itemsEndIndex - buf.readerIndex());\n                        } else if (buf.readerIndex() > itemsEndIndex) {\n                            buf.readerIndex(itemsEndIndex); // Correct over-read past items block\n                        }\n                    } else if (peripheralDataBlockLength > 0 && peripheralDataBlockLength < 2) {\n                        // Invalid length (e.g. 1). Block requires at least 2 bytes for length field. Skip these.\n                        buf.skipBytes(peripheralDataBlockLength);\n                    }\n                    // If peripheralDataBlockLength is 0, do nothing (no block).\n                }\n\n            }  else { // type == MSG_ALARM\n\n                buf.readUnsignedByte(); // overloaded state\n                buf.readUnsignedByte(); // logging status\n\n                byte[] alarmStatus = new byte[8];\n                buf.readBytes(alarmStatus);\n\n                decodeAlarmStatus(position, alarmStatus);\n\n            }\n\n            return position;\n\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}