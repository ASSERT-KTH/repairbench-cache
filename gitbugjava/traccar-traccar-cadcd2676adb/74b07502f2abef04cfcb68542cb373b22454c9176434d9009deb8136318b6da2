{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // Skip header and read packet type and size\n    buf.skipBytes(2);\n    int type = buf.readUnsignedByte();\n    buf.readUnsignedShort(); // size\n\n    // Always send confirmation for these message types\n    if (type == MSG_LOGIN\n            || type == MSG_ADMIN_NUMBER\n            || type == MSG_SEND_TEXT\n            || type == MSG_SMS_ALARM_SWITCH\n            || type == MSG_POSITION_REUPLOAD) {\n\n        // Build and send confirmation response\n        ByteBuf response = Unpooled.buffer();\n        response.writeByte(0x29);\n        response.writeByte(0x29);\n        response.writeByte(MSG_CONFIRMATION);\n        response.writeShort(5);\n        response.writeByte(buf.getByte(buf.writerIndex() - 2));\n        response.writeByte(type);\n        response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0);\n        response.writeByte(Checksum.xor(response.nioBuffer()));\n        response.writeByte(0x0D);\n\n        if (channel != null) {\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        // For LOGIN messages, also parse and return a Position with battery level\n        if (type == MSG_LOGIN) {\n            // Read identifiers and establish device session\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));\n            if (deviceSession == null) {\n                return null;\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            // Battery percent is the low byte of the 2-byte field located at writerIndex - 20\n            int battery = buf.getUnsignedByte(buf.writerIndex() - 20);\n            position.set(Position.KEY_BATTERY_LEVEL, battery);\n            return position;\n        }\n    }\n\n    // All other position\u2010reporting message types\n    if (type == MSG_ON_DEMAND\n            || type == MSG_POSITION_UPLOAD\n            || type == MSG_POSITION_REUPLOAD\n            || type == MSG_ALARM\n            || type == MSG_REPLY\n            || type == MSG_PERIPHERAL) {\n\n        Position position = new Position(getProtocolName());\n\n        // Read identifiers and establish device session\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        // Timestamp\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(BcdUtil.readInteger(buf, 2))\n                .setMonth(BcdUtil.readInteger(buf, 2))\n                .setDay(BcdUtil.readInteger(buf, 2))\n                .setHour(BcdUtil.readInteger(buf, 2))\n                .setMinute(BcdUtil.readInteger(buf, 2))\n                .setSecond(BcdUtil.readInteger(buf, 2));\n        position.setTime(dateBuilder.getDate());\n\n        // Coordinates, speed, course, validity\n        position.setLatitude(BcdUtil.readCoordinate(buf));\n        position.setLongitude(BcdUtil.readCoordinate(buf));\n        position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4)));\n        position.setCourse(BcdUtil.readInteger(buf, 4));\n        position.setValid((buf.readUnsignedByte() & 0x80) != 0);\n\n        if (type != MSG_ALARM) {\n\n            // Odometer or fuel level\n            int odometer = buf.readUnsignedMedium();\n            if (BitUtil.to(odometer, 16) > 0) {\n                position.set(Position.KEY_ODOMETER, odometer);\n            } else if (odometer > 0) {\n                position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));\n            }\n\n            // Status\n            position.set(Position.KEY_STATUS, buf.readUnsignedInt());\n\n            // Skip reserved fields\n            buf.readUnsignedShort();\n            buf.readUnsignedByte();\n            buf.readUnsignedByte();\n            buf.readUnsignedByte();\n            buf.readUnsignedByte();\n            buf.readUnsignedByte();\n\n            // Result code\n            position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n\n            // Peripheral data\n            if (type == MSG_PERIPHERAL) {\n                buf.readUnsignedShort(); // data length\n                int dataType = buf.readUnsignedByte();\n                buf.readUnsignedByte();   // content length\n                switch (dataType) {\n                    case 0x01:\n                        position.set(Position.KEY_FUEL_LEVEL,\n                                buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                        break;\n                    case 0x02:\n                        position.set(Position.PREFIX_TEMP + 1,\n                                buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                        break;\n                    case 0x18:\n                        for (int i = 1; i <= 4; i++) {\n                            double value = buf.readUnsignedShort();\n                            if (value > 0x0000 && value < 0xFFFF) {\n                                position.set(\"fuel\" + i, value / 0xFFFE);\n                            }\n                        }\n                        break;\n                    case 0x23:\n                        Network network = new Network();\n                        int count = buf.readUnsignedByte();\n                        for (int i = 0; i < count; i++) {\n                            network.addCellTower(CellTower.from(\n                                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                    buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                        }\n                        if (count > 0) {\n                            position.setNetwork(network);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n        } else {\n\n            // Alarm-specific data\n            buf.readUnsignedByte(); // overloaded state\n            buf.readUnsignedByte(); // logging status\n            byte[] alarmStatus = new byte[8];\n            buf.readBytes(alarmStatus);\n            decodeAlarmStatus(position, alarmStatus);\n        }\n\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}