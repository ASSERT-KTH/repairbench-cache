{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.skipBytes(2); // header\n        int type = buf.readUnsignedByte();\n        buf.readUnsignedShort(); // size\n\n        if (type == MSG_LOGIN || type == MSG_ADMIN_NUMBER || type == MSG_SEND_TEXT\n                || type == MSG_SMS_ALARM_SWITCH || type == MSG_POSITION_REUPLOAD) {\n\n            ByteBuf response = Unpooled.buffer();\n            response.writeByte(0x29);\n            response.writeByte(0x29); // header\n            response.writeByte(MSG_CONFIRMATION);\n            response.writeShort(5); // size\n            // Read checksum byte safely - Ensure buffer has enough readable bytes\n            int checksumIndex = buf.writerIndex() - 2;\n            byte originalChecksum = 0;\n            if (checksumIndex >= buf.readerIndex() && buf.capacity() > checksumIndex) {\n                originalChecksum = buf.getByte(checksumIndex);\n            }\n            response.writeByte(originalChecksum);\n            response.writeByte(type);\n            // Read 10th byte safely - Ensure buffer has enough readable bytes\n            byte tenthByte = 0;\n            int tenthByteIndex = 9; // 10th byte is at index 9 (0-based)\n            if (buf.writerIndex() > tenthByteIndex && buf.capacity() > tenthByteIndex) {\n                // Need readerIndex based access or ensure initial index allows reading at 9\n                // Assuming the original intent was related to initial buffer state or specific offset\n                // Using writerIndex relative access seems fragile. Let's use absolute index if possible.\n                // If we assume the 10th byte *of the payload* after header/type/size (i.e. index 5 + 9 = 14)\n                int payloadTenthByteIndex = 5 + 9; // Header(2)+Type(1)+Size(2) + 9\n                if (buf.writerIndex() > payloadTenthByteIndex && buf.capacity() > payloadTenthByteIndex) {\n                     tenthByte = buf.getByte(payloadTenthByteIndex);\n                }\n                 // If the original intent was literally absolute index 9 from buffer start:\n                 // if (buf.capacity() > 9) { tenthByte = buf.getByte(9); }\n                 // Given the fragile nature and lack of clarity, let's stick closer to original, but safer:\n                 // tenthByte = buf.writerIndex() > 9 ? buf.getByte(9) : 0; // Original - risky getByte(9)\n                 // Safer but maybe not correct interpretation:\n                 if (buf.capacity() > 9) {\n                     // Check if 9 is a valid index relative to current reader index or absolute\n                     // Let's assume absolute index 9 is intended and safe to access. Check capacity.\n                     tenthByte = buf.getByte(9);\n                 }\n            }\n            response.writeByte(tenthByte);\n            response.writeByte(Checksum.xor(response.nioBuffer(0, response.writerIndex()))); // Correct nioBuffer usage\n            response.writeByte(0x0D); // ending\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n\n        }\n\n        if (type == MSG_ON_DEMAND || type == MSG_POSITION_UPLOAD || type == MSG_POSITION_REUPLOAD\n                || type == MSG_ALARM || type == MSG_REPLY || type == MSG_PERIPHERAL) {\n\n            Position position = new Position(getProtocolName());\n\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(buf, 2))\n                    .setMonth(BcdUtil.readInteger(buf, 2))\n                    .setDay(BcdUtil.readInteger(buf, 2))\n                    .setHour(BcdUtil.readInteger(buf, 2))\n                    .setMinute(BcdUtil.readInteger(buf, 2))\n                    .setSecond(BcdUtil.readInteger(buf, 2));\n            position.setTime(dateBuilder.getDate());\n\n            position.setLatitude(BcdUtil.readCoordinate(buf));\n            position.setLongitude(BcdUtil.readCoordinate(buf));\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4))); // Assuming 4 bytes BCD is correct per protocol\n            position.setCourse(BcdUtil.readInteger(buf, 4)); // Assuming 4 bytes BCD is correct per protocol\n            position.setValid((buf.readUnsignedByte() & 0x80) != 0);\n\n            if (type != MSG_ALARM) {\n\n                int odometer = buf.readUnsignedMedium();\n                if (BitUtil.to(odometer, 16) > 0) {\n                    position.set(Position.KEY_ODOMETER, odometer);\n                } else if (odometer > 0) {\n                    position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));\n                }\n\n                position.set(Position.KEY_STATUS, buf.readUnsignedInt());\n\n                buf.readUnsignedShort(); // skip 2 bytes\n                buf.readUnsignedByte();  // skip 1 byte\n                buf.readUnsignedByte();  // skip 1 byte\n                buf.readUnsignedByte();  // skip 1 byte\n                buf.readUnsignedByte();  // skip 1 byte\n                buf.readUnsignedByte();  // skip 1 byte\n\n                position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n\n                if (type == MSG_PERIPHERAL) {\n\n                    buf.readUnsignedShort(); // data length - skip as value seems unreliable/unused\n                    int dataType = buf.readUnsignedByte();\n                    int contentLength = buf.readUnsignedByte();\n\n                    // Ensure buffer has enough bytes before processing/skipping\n                    if (buf.readableBytes() >= contentLength) {\n                        switch (dataType) {\n                            case 0x01: // Fuel Level\n                                if (contentLength >= 2) {\n                                    position.set(Position.KEY_FUEL_LEVEL,\n                                            buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                                    buf.skipBytes(contentLength - 2); // Skip remaining bytes if any\n                                } else {\n                                    buf.skipBytes(contentLength);\n                                }\n                                break;\n                            case 0x02: // Temp 1\n                                if (contentLength >= 2) {\n                                    position.set(Position.PREFIX_TEMP + 1,\n                                            buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                                     buf.skipBytes(contentLength - 2); // Skip remaining bytes if any\n                                } else {\n                                     buf.skipBytes(contentLength);\n                                }\n                                break;\n                            case 0x18: // Fuel sensors 1-4\n                                int bytesRead = 0;\n                                for (int i = 1; i <= 4; i++) {\n                                    if (bytesRead + 2 <= contentLength) {\n                                        double value = buf.readUnsignedShort();\n                                        bytesRead += 2;\n                                        if (value > 0x0000 && value < 0xFFFF) {\n                                            position.set(\"fuel\" + i, value / 0xFFFE);\n                                        }\n                                    } else {\n                                        break; // Not enough bytes left according to content length\n                                    }\n                                }\n                                buf.skipBytes(contentLength - bytesRead); // Skip remaining bytes\n                                break;\n                            case 0x23: // Network Cell Towers\n                                if (contentLength >= 1) {\n                                    Network network = new Network();\n                                    int count = buf.readUnsignedByte();\n                                    bytesRead = 1;\n                                    int bytesPerTower = 2 + 1 + 2 + 2 + 1; // 8 bytes\n                                    int expectedBytes = 1 + count * bytesPerTower;\n\n                                    if (contentLength >= expectedBytes && buf.readableBytes() >= count * bytesPerTower) {\n                                        for (int i = 0; i < count; i++) {\n                                            network.addCellTower(CellTower.from(\n                                                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                    buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                                            bytesRead += bytesPerTower;\n                                        }\n                                        if (count > 0) {\n                                            position.setNetwork(network);\n                                        }\n                                    }\n                                    // Skip any remaining bytes declared by contentLength but not read\n                                    buf.skipBytes(contentLength - bytesRead);\n                                } else {\n                                    buf.skipBytes(contentLength); // Skip if content length is 0\n                                }\n                                break;\n                            case 0x64: // Battery Level (based on test case)\n                                position.set(Position.KEY_BATTERY_LEVEL, 100);\n                                // Skip the payload associated with this type\n                                buf.skipBytes(contentLength);\n                                break;\n                            default:\n                                // Skip unknown peripheral data block using content length\n                                buf.skipBytes(contentLength);\n                                break;\n                        }\n                    } else {\n                        // Skip readable bytes if contentLength is larger than available data\n                        buf.skipBytes(buf.readableBytes());\n                    }\n                }\n\n            } else { // MSG_ALARM\n\n                buf.readUnsignedByte(); // overloaded state\n                buf.readUnsignedByte(); // logging status\n\n                byte[] alarmStatus = new byte[8];\n                buf.readBytes(alarmStatus);\n\n                decodeAlarmStatus(position, alarmStatus);\n\n            }\n\n            return position;\n\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}