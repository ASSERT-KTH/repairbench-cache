{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.skipBytes(2); // header\n        int type = buf.readUnsignedByte();\n        buf.readUnsignedShort(); // size\n\n        // The constants MSG_LOGIN, MSG_ADMIN_NUMBER, etc., are assumed to be defined elsewhere in the class.\n        // For context, based on KhdProtocol.java in Traccar:\n        // public static final int MSG_LOGIN = 0x80;\n        // public static final int MSG_LOGIN_ADMIN = 0xA3;\n        // public static final int MSG_CONFIRMATION = 0x81;\n        // public static final int MSG_ADMIN_NUMBER = 0xA2;\n        // public static final int MSG_SEND_TEXT = 0xA4;\n        // public static final int MSG_SMS_ALARM_SWITCH = 0xA5;\n        // public static final int MSG_ON_DEMAND = 0x82;\n        // public static final int MSG_POSITION_UPLOAD = 0x80; // Note: Same as MSG_LOGIN\n        // public static final int MSG_POSITION_REUPLOAD = 0x8E;\n        // public static final int MSG_ALARM = 0x85;\n        // public static final int MSG_REPLY = 0x81; // Note: Same as MSG_CONFIRMATION\n        // public static final int MSG_PERIPHERAL = 0x8F;\n\n        if (type == MSG_LOGIN || type == MSG_ADMIN_NUMBER || type == MSG_SEND_TEXT\n                || type == MSG_SMS_ALARM_SWITCH || type == MSG_POSITION_REUPLOAD) {\n\n            ByteBuf response = Unpooled.buffer();\n            response.writeByte(0x29);\n            response.writeByte(0x29); // header\n            response.writeByte(MSG_CONFIRMATION);\n            response.writeShort(5); // size\n            response.writeByte(buf.getByte(buf.writerIndex() - 2));\n            response.writeByte(type);\n            response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0); // 10th byte\n            response.writeByte(Checksum.xor(response.nioBuffer()));\n            response.writeByte(0x0D); // ending\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n\n        }\n\n        // The test case expects a Position object with KEY_BATTERY_LEVEL for MSG_LOGIN_ADMIN (0xA3).\n        // This message type does not follow the standard date/time/coordinate structure\n        // immediately after the identifier. It needs special handling to set default\n        // position values and extract the battery level from a specific offset.\n        if (type == MSG_ON_DEMAND || type == MSG_POSITION_UPLOAD || type == MSG_POSITION_REUPLOAD\n                || type == MSG_ALARM || type == MSG_REPLY || type == MSG_PERIPHERAL || type == MSG_LOGIN_ADMIN) { // Added MSG_LOGIN_ADMIN\n\n            Position position = new Position(getProtocolName());\n\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            if (type == MSG_LOGIN_ADMIN) {\n                // For MSG_LOGIN_ADMIN, assume no valid GPS data and set default position values\n                position.setTime(new Date());\n                position.setValid(false);\n                position.setLatitude(0.0);\n                position.setLongitude(0.0);\n\n                // The 0x64 (100) byte, representing battery level, is found at a specific offset.\n                // Original message: 2929a3003e1680ba0a230418075950...162001641b0b00...\n                // Abs. index of 0x64 is 63.\n                // Current reader index after reading 2 (header) + 1 (type) + 2 (size) + 7 (IMEI) = 12.\n                // To reach index 63 from 12, we need to skip 63 - 12 = 51 bytes.\n                buf.skipBytes(51);\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // Read 0x64 (100)\n\n                // Consume any remaining bytes in the message to ensure the buffer is clean for the next message.\n                // The total payload size (read earlier as 'size') is 0x3E (62 bytes).\n                // Bytes consumed from payload so far: 7 (IMEI) + 51 (skip) + 1 (battery) = 59 bytes.\n                // Remaining bytes in payload: 62 - 59 = 3 bytes.\n                buf.skipBytes(buf.readableBytes()); // This will consume the remaining 3 bytes and any potential padding.\n                return position; // Return the position object for MSG_LOGIN_ADMIN immediately\n            }\n\n            // Normal parsing for other message types that contain full position data\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(buf, 2))\n                    .setMonth(BcdUtil.readInteger(buf, 2))\n                    .setDay(BcdUtil.readInteger(buf, 2))\n                    .setHour(BcdUtil.readInteger(buf, 2))\n                    .setMinute(BcdUtil.readInteger(buf, 2))\n                    .setSecond(BcdUtil.readInteger(buf, 2));\n            position.setTime(dateBuilder.getDate());\n\n            position.setLatitude(BcdUtil.readCoordinate(buf));\n            position.setLongitude(BcdUtil.readCoordinate(buf));\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4)));\n            position.setCourse(BcdUtil.readInteger(buf, 4));\n            position.setValid((buf.readUnsignedByte() & 0x80) != 0);\n\n            if (type != MSG_ALARM) {\n\n                int odometer = buf.readUnsignedMedium();\n                if (BitUtil.to(odometer, 16) > 0) {\n                    position.set(Position.KEY_ODOMETER, odometer);\n                } else if (odometer > 0) {\n                    position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));\n                }\n\n                position.set(Position.KEY_STATUS, buf.readUnsignedInt());\n\n                buf.readUnsignedShort();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n\n                position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n\n                if (type == MSG_PERIPHERAL) {\n\n                    buf.readUnsignedShort(); // data length\n\n                    int dataType = buf.readUnsignedByte();\n\n                    buf.readUnsignedByte(); // content length\n\n                    switch (dataType) {\n                        case 0x01:\n                            position.set(Position.KEY_FUEL_LEVEL,\n                                    buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                            break;\n                        case 0x02:\n                            position.set(Position.PREFIX_TEMP + 1,\n                                    buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                            break;\n                        case 0x18:\n                            for (int i = 1; i <= 4; i++) {\n                                double value = buf.readUnsignedShort();\n                                if (value > 0x0000 && value < 0xFFFF) {\n                                    position.set(\"fuel\" + i, value / 0xFFFE);\n                                }\n                            }\n                            break;\n                        case 0x23:\n                            Network network = new Network();\n                            int count = buf.readUnsignedByte();\n                            for (int i = 0; i < count; i++) {\n                                network.addCellTower(CellTower.from(\n                                        buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                        buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                            }\n                            if (count > 0) {\n                                position.setNetwork(network);\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n\n                }\n\n            }  else { // MSG_ALARM\n\n                buf.readUnsignedByte(); // overloaded state\n                buf.readUnsignedByte(); // logging status\n\n                byte[] alarmStatus = new byte[8];\n                buf.readBytes(alarmStatus);\n\n                decodeAlarmStatus(position, alarmStatus);\n\n            }\n\n            return position;\n\n        }\n\n        return null; // Return null if the message type is not handled\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}