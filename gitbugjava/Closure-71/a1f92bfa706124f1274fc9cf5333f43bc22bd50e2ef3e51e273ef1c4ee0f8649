{
    "generation": "  /**\n   * Determines whether the given property is visible in the current context.\n   * @param t The current traversal.\n   * @param getprop The getprop node.\n   * @param parent The parent of the getprop node.\n   */\n  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    if (objectType == null) {\n      return; // Nothing to check\n    }\n    String propertyName = getprop.getLastChild().getString();\n\n    // An override is specifically an assignment to a property that exists\n    // on a supertype.\n    boolean isAssignment = parent.getType() == Token.ASSIGN &&\n                           parent.getFirstChild() == getprop;\n\n    // We need to find the property definition, potentially searching differently\n    // depending on whether it's an assignment (override attempt) or not.\n    JSDocInfo docInfo = null;\n    ObjectType ownerObjectType = null; // The type that owns the property definition found\n\n    // If it's an assignment, check for the property on the superclass chain first.\n    ObjectType lookupType = isAssignment ? objectType.getImplicitPrototype() : objectType;\n    boolean foundOnSuperChain = false;\n\n    for (; lookupType != null; lookupType = lookupType.getImplicitPrototype()) {\n      docInfo = lookupType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        ownerObjectType = lookupType; // Found the definition\n        if (isAssignment) {\n            foundOnSuperChain = true; // Found on super chain during assignment check\n        }\n        break;\n      }\n    }\n\n    // If it was an assignment but we didn't find the property on the super chain,\n    // it might be defining a new property, or overriding a property defined\n    // on the objectType itself (not inherited). Check objectType itself.\n    // This handles assignments like `this.prop = ...` where `prop` was defined\n    // by `@private` in the *same* class's constructor.\n    // If we didn't find it on the super chain OR it wasn't an assignment, check the full chain.\n    if (!foundOnSuperChain) {\n        lookupType = objectType; // Start search from the object type itself\n        docInfo = null; // Reset search state\n        ownerObjectType = null;\n        for (; lookupType != null; lookupType = lookupType.getImplicitPrototype()) {\n            docInfo = lookupType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null &&\n                docInfo.getVisibility() != Visibility.INHERITED) {\n                ownerObjectType = lookupType;\n                break;\n            }\n        }\n    }\n\n\n    // Determine if this is effectively an override based on finding the property\n    // on the super chain during an assignment.\n    boolean isOverride = isAssignment && foundOnSuperChain;\n\n    // If we didn't find any property with visibility, assume public access.\n    if (ownerObjectType == null) {\n      return;\n    }\n\n    // We found the property with visibility info (docInfo) on ownerObjectType.\n    Visibility visibility = docInfo.getVisibility();\n    // Make sure ownerType is the class/interface JSType, not the instance/prototype\n    JSType ownerType = normalizeClassType(ownerObjectType);\n    boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n\n    if (isOverride) {\n      // Check an ASSIGN statement that's trying to override a property on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ?\n          Visibility.INHERITED : overridingInfo.getVisibility();\n\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        // Overriding a private property from a different file is never allowed.\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE, ownerType.toString()));\n      } else if (overridingVisibility != Visibility.INHERITED &&\n                 overridingVisibility != visibility) {\n        // NOTE: This check might be too simplistic regarding whether visibility increases or decreases.\n        // It flags any difference. Keeping original logic as it's not the cause of the failing tests.\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), ownerType.toString(),\n                overridingVisibility.name()));\n      }\n      // Note: No explicit check needed for overriding protected from subclass here,\n      // because if it's an override (!sameInput, visibility=PROTECTED),\n      // the normal access check in the 'else' block doesn't apply. Access\n      // during override definition is implicitly allowed if visibility matches/increases.\n      // The VISIBILITY_MISMATCH check handles invalid visibility changes.\n\n    } else { // Normal property access or assignment to property defined in the same class/not on super chain\n      if (sameInput) {\n        // private/protected access is always allowed in the same file.\n        return;\n      }\n\n      // Access from a different file.\n      if (visibility == Visibility.PRIVATE) {\n        // Private access is not allowed outside the file (handled by !sameInput),\n        // unless it's a whitelisted constructor access.\n        if (!(docInfo.isConstructor() && isValidPrivateConstructorAccess(parent))) {\n           compiler.report(\n               t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                   propertyName,\n                   validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected access from outside file only allowed from within a subclass.\n        // currentClass is the JSType of the class containing the access, if any.\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n      }\n      // Public access is allowed.\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}