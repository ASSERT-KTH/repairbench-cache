{
    "generation": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            // Check buffer readability before each read to prevent IndexOutOfBoundsException\n            // Note: This doesn't fix misalignment from unknown keys, but makes existing reads safer.\n            switch (key) {\n                case \"SA\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"MV\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"BV\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"GQ\":\n                    if (buf.isReadable(1)) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n                    break;\n                case \"CE\":\n                    if (buf.isReadable(4)) {\n                        cellTower.setCellId(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"LC\":\n                    if (buf.isReadable(2)) {\n                        cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    }\n                    break;\n                case \"CN\":\n                    if (buf.isReadable(4)) {\n                        int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn\n                        cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                        cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    }\n                    break;\n                case \"RL\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // rxlev\n                    }\n                    break;\n                case \"PC\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"AT\":\n                    if (buf.isReadable(4)) {\n                        position.setAltitude(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"RP\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"GS\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"DT\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    }\n                    break;\n                case \"VN\":\n                    // Assuming readString handles buffer checks internally or reads till null\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    if (buf.isReadable(2)) {\n                        buf.readUnsignedShort(); // mass air flow rate\n                    }\n                    break;\n                case \"EL\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // engine load\n                    }\n                    break;\n                case \"TR\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ET\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"FL\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ML\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // mil status\n                    }\n                    break;\n                case \"FC\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"CI\":\n                    readString(buf); // format string - Assuming readString handles buffer checks\n                    break;\n                case \"AV1\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"NC\":\n                    readString(buf); // gsm neighbor cell info - Assuming readString handles buffer checks\n                    break;\n                case \"SM\":\n                    if (buf.isReadable(2)) {\n                        buf.readUnsignedShort(); // max speed between reports\n                    }\n                    break;\n                case \"GL\":\n                    readString(buf); // google link - Assuming readString handles buffer checks\n                    break;\n                case \"MA\":\n                    readString(buf); // mac address - Assuming readString handles buffer checks\n                    break;\n                case \"PD\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // pending code status\n                    }\n                    break;\n                case \"CD\":\n                    position.set(Position.KEY_ICCID, readString(buf)); // Assuming readString handles buffer checks\n                    break;\n                case \"CM\":\n                    if (buf.isReadable(8)) {\n                        buf.readLong(); // imsi\n                    }\n                    break;\n                case \"GN\":\n                    if (buf.isReadable(60)) {\n                        buf.skipBytes(60); // g sensor data\n                    }\n                    break;\n                case \"GV\":\n                    if (buf.isReadable(6)) {\n                        buf.skipBytes(6); // maximum g force\n                    }\n                    break;\n                case \"ME\":\n                    if (buf.isReadable(8)) {\n                        buf.readLong(); // imei\n                    }\n                    break;\n                case \"IA\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // intake air temperature\n                    }\n                    break;\n                case \"MP\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // manifold absolute pressure\n                    }\n                    break;\n                case \"EO\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));\n                    }\n                    break;\n                case \"EH\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000L); // Use long literal\n                    }\n                    break;\n                case \"ZO1\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // brake stroke status\n                    }\n                    break;\n                case \"ZO2\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // warning indicator status\n                    }\n                    break;\n                case \"ZO3\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // abs control status\n                    }\n                    break;\n                case \"ZO4\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case \"ZO5\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // parking brake status\n                    }\n                    break;\n                case \"ZO6\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);\n                    }\n                    break;\n                case \"ZO7\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // cruise control status\n                    }\n                    break;\n                case \"ZO8\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // accelector pedal position\n                    }\n                    break;\n                case \"ZO9\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);\n                    }\n                    break;\n                case \"ZO10\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);\n                    }\n                    break;\n                case \"ZO11\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // engine oil pressure\n                    }\n                    break;\n                case \"ZO12\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // boost pressure\n                    }\n                    break;\n                case \"ZO13\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // intake temperature\n                    }\n                    break;\n                case \"ZO14\":\n                    if (buf.isReadable(1)) {\n                        // Handle potential negative result correctly\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    }\n                    break;\n                case \"ZO15\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // brake application pressure\n                    }\n                    break;\n                case \"ZO16\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // brake primary pressure\n                    }\n                    break;\n                case \"ZO17\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // brake secondary pressure\n                    }\n                    break;\n                case \"ZH1\":\n                    if (buf.isReadable(2)) {\n                        buf.readUnsignedShort(); // cargo weight\n                    }\n                    break;\n                case \"ZH2\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);\n                    }\n                    break;\n                case \"ZH3\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);\n                    }\n                    break;\n                case \"ZL1\":\n                    if (buf.isReadable(4)) {\n                        buf.readUnsignedInt(); // fuel used (natural gas)\n                    }\n                    break;\n                case \"ZL2\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161L); // Use long literal\n                    }\n                    break;\n                case \"ZL3\":\n                    if (buf.isReadable(4)) {\n                        buf.readUnsignedInt(); // vehicle hours\n                    }\n                    break;\n                case \"ZL4\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L); // Use long literals\n                    }\n                    break;\n                case \"ZS1\":\n                    position.set(Position.KEY_VIN, readString(buf)); // Assuming readString handles buffer checks\n                    break;\n                case \"JO1\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // pedals\n                    }\n                    break;\n                case \"JO2\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // power takeoff device\n                    }\n                    break;\n                case \"JO3\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // accelector pedal position\n                    }\n                    break;\n                case \"JO4\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"JO5\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case \"JO6\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // fms vehicle interface\n                    }\n                    break;\n                case \"JO7\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // driver 2\n                    }\n                    break;\n                case \"JO8\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // driver 1\n                    }\n                    break;\n                case \"JO9\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // drivers\n                    }\n                    break;\n                case \"JO10\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // system information\n                    }\n                    break;\n                case \"JO11\":\n                    if (buf.isReadable(1)) {\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    }\n                    break;\n                case \"JO12\":\n                    if (buf.isReadable(1)) {\n                        buf.readUnsignedByte(); // pto engaged\n                    }\n                    break;\n                case \"JH1\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);\n                    }\n                    break;\n                case \"JH2\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);\n                    }\n                    break;\n                case \"JH3\":\n                case \"JH4\":\n                case \"JH5\":\n                case \"JH6\":\n                case \"JH7\":\n                    if (buf.isReadable(2)) {\n                        int index = Integer.parseInt(key.substring(2)) - 2;\n                        position.set(\"axleWeight\" + index, buf.readUnsignedShort() * 0.5);\n                    }\n                    break;\n                case \"JH8\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5L); // Use long literal\n                    }\n                    break;\n                case \"JH9\":\n                    if (buf.isReadable(2)) {\n                        buf.readUnsignedShort(); // tachograph speed\n                    }\n                    break;\n                case \"JH10\":\n                    if (buf.isReadable(2)) {\n                        buf.readUnsignedShort(); // ambient air temperature\n                    }\n                    break;\n                case \"JH11\":\n                    if (buf.isReadable(2)) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);\n                    }\n                    break;\n                case \"JH12\":\n                    if (buf.isReadable(2)) {\n                        buf.readUnsignedShort(); // fuel economy\n                    }\n                    break;\n                case \"JL1\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);\n                    }\n                    break;\n                case \"JL2\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L); // Use long literals\n                    }\n                    break;\n                case \"JL3\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L); // Use long literal\n                    }\n                    break;\n                case \"JL4\":\n                    if (buf.isReadable(4)) {\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                    }\n                    break;\n                case \"JS1\":\n                    position.set(Position.KEY_VIN, readString(buf)); // Assuming readString handles buffer checks\n                    break;\n                case \"JS2\":\n                    readString(buf); // fms version supported - Assuming readString handles buffer checks\n                    break;\n                case \"JS3\":\n                    position.set(\"driver1\", readString(buf)); // Assuming readString handles buffer checks\n                    break;\n                case \"JS4\":\n                    position.set(\"driver2\", readString(buf)); // Assuming readString handles buffer checks\n                    break;\n                case \"JN1\":\n                    if (buf.isReadable(4)) {\n                        buf.readUnsignedInt(); // cruise control distance\n                    }\n                    break;\n                case \"JN2\":\n                    if (buf.isReadable(4)) {\n                        buf.readUnsignedInt(); // excessive idling time\n                    }\n                    break;\n                case \"JN3\":\n                    if (buf.isReadable(4)) {\n                        buf.readUnsignedInt(); // excessive idling fuel\n                    }\n                    break;\n                case \"JN4\":\n                    if (buf.isReadable(4)) {\n                        buf.readUnsignedInt(); // pto time\n                    }\n                    break;\n                case \"JN5\":\n                    if (buf.isReadable(4)) {\n                        buf.readUnsignedInt(); // pto fuel\n                    }\n                    break;\n                default:\n                    // Unknown key: The protocol doesn't specify the length for unknown keys.\n                    // Doing nothing (just breaking) is the original behavior and will lead\n                    // to buffer misalignment if unknown keys are present.\n                    // A real fix requires knowing the length of data associated with each\n                    // key or having the caller manage the buffer position based on an\n                    // overall length field provided elsewhere in the message.\n                    // Log.warning(\"Unknown custom data key: \" + key); // Requires logger setup\n                    break;\n            }\n        }\n\n        // Set network data if available\n        if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            // Fallback to setting RSSI if only signal strength is available from custom data\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}