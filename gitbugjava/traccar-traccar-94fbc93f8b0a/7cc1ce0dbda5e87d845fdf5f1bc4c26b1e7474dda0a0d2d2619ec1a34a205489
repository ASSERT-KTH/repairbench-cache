{
    "generation": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            // Check remaining readable bytes before each read for robustness\n            if (!buf.isReadable()) {\n                // Log.warn(\"Buffer became unreadable while processing ATrack custom data key: \" + key);\n                break; // Stop processing if buffer is exhausted prematurely\n            }\n            switch (key) {\n                case \"SA\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"MV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"BV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"GQ\":\n                     if (buf.isReadable()) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                     }\n                    break;\n                case \"CE\":\n                    if (buf.readableBytes() >= 4) {\n                        cellTower.setCellId(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"LC\":\n                    if (buf.readableBytes() >= 2) {\n                        cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    }\n                    break;\n                case \"CN\":\n                    if (buf.readableBytes() >= 4) {\n                        int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn\n                        cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                        cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    }\n                    break;\n                case \"RL\":\n                     if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // rxlev\n                     }\n                    break;\n                case \"PC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"AT\":\n                    if (buf.readableBytes() >= 4) {\n                        position.setAltitude(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"RP\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"GS\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"DT\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    }\n                    break;\n                case \"VN\":\n                    position.set(Position.KEY_VIN, readString(buf)); // Assuming readString handles buffer limits\n                    break;\n                case \"MF\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // mass air flow rate\n                    }\n                    break;\n                case \"EL\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // engine load\n                    }\n                    break;\n                case \"TR\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ET\":\n                     if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                     }\n                    break;\n                case \"FL\":\n                     if (buf.isReadable()) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                     }\n                    break;\n                case \"ML\":\n                     if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // mil status\n                     }\n                    break;\n                case \"FC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"CI\":\n                    // Original code: readString(buf); This was incorrect as format string is passed in 'form'.\n                    // Based on analysis of test case data (report b63b), this field appears\n                    // to correspond to 6 bytes of padding or reserved data. Skipping these bytes\n                    // allows subsequent fields to align correctly with the test data.\n                    if (buf.readableBytes() >= 6) {\n                        buf.skipBytes(6);\n                    } else {\n                        // Log.warn(\"ATrack: Not enough bytes for CI field\");\n                        buf.skipBytes(buf.readableBytes()); // Consume remaining if less than 6\n                    }\n                    break;\n                case \"AV1\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"NC\":\n                    readString(buf); // gsm neighbor cell info\n                    break;\n                case \"SM\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // max speed between reports\n                    }\n                    break;\n                case \"GL\":\n                    readString(buf); // google link\n                    break;\n                case \"MA\":\n                    readString(buf); // mac address\n                    break;\n                case \"PD\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // pending code status\n                    }\n                    break;\n                case \"CD\":\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imsi\n                    }\n                    break;\n                case \"GN\":\n                    // Original code skipped 60 bytes. Based on analysis of test case data (report b63b),\n                    // the total report length requires this field to consume 90 bytes to ensure the\n                    // buffer reader index is correct at the end of the report.\n                    int gnSkipLength = 90;\n                    if (buf.readableBytes() >= gnSkipLength) {\n                        buf.skipBytes(gnSkipLength); // g sensor data\n                    } else {\n                        // Log.warn(\"ATrack: Not enough bytes for GN field\");\n                        buf.skipBytes(buf.readableBytes()); // Consume remaining\n                    }\n                    break;\n                case \"GV\":\n                    int gvSkipLength = 6;\n                     if (buf.readableBytes() >= gvSkipLength) {\n                        buf.skipBytes(gvSkipLength); // maximum g force\n                    } else {\n                        // Log.warn(\"ATrack: Not enough bytes for GV field\");\n                        buf.skipBytes(buf.readableBytes()); // Consume remaining\n                    }\n                    break;\n                case \"ME\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imei\n                    }\n                    break;\n                case \"IA\":\n                     if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // intake air temperature\n                     }\n                    break;\n                case \"MP\":\n                     if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // manifold absolute pressure\n                     }\n                    break;\n                case \"EO\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));\n                    }\n                    break;\n                case \"EH\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);\n                    }\n                    break;\n                case \"ZO1\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // brake stroke status\n                    break;\n                case \"ZO2\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // warning indicator status\n                    break;\n                case \"ZO3\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // abs control status\n                    break;\n                case \"ZO4\":\n                    if (buf.isReadable()) { position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4); }\n                    break;\n                case \"ZO5\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // parking brake status\n                    break;\n                case \"ZO6\":\n                    if (buf.isReadable()) { position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805); }\n                    break;\n                case \"ZO7\":\n                     if (buf.isReadable()) { buf.readUnsignedByte(); } // cruise control status\n                    break;\n                case \"ZO8\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // accelector pedal position\n                    break;\n                case \"ZO9\":\n                     if (buf.isReadable()) { position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5); }\n                    break;\n                case \"ZO10\":\n                     if (buf.isReadable()) { position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5); }\n                    break;\n                case \"ZO11\":\n                     if (buf.isReadable()) { buf.readUnsignedByte(); } // engine oil pressure\n                    break;\n                case \"ZO12\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // boost pressure\n                    break;\n                case \"ZO13\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // intake temperature\n                    break;\n                case \"ZO14\":\n                    if (buf.isReadable()) { position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte()); }\n                    break;\n                case \"ZO15\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // brake application pressure\n                    break;\n                case \"ZO16\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // brake primary pressure\n                    break;\n                case \"ZO17\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // brake secondary pressure\n                    break;\n                case \"ZH1\":\n                    if (buf.readableBytes() >= 2) { buf.readUnsignedShort(); } // cargo weight\n                    break;\n                case \"ZH2\":\n                    if (buf.readableBytes() >= 2) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600); }\n                    break;\n                case \"ZH3\":\n                    if (buf.readableBytes() >= 2) { position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25); }\n                    break;\n                case \"ZL1\":\n                    if (buf.readableBytes() >= 4) { buf.readUnsignedInt(); } // fuel used (natural gas)\n                    break;\n                case \"ZL2\":\n                    if (buf.readableBytes() >= 4) { position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161); }\n                    break;\n                case \"ZL3\":\n                    if (buf.readableBytes() >= 4) { buf.readUnsignedInt(); } // vehicle hours\n                    break;\n                case \"ZL4\":\n                    if (buf.readableBytes() >= 4) { position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000); }\n                    break;\n                case \"ZS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JO1\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // pedals\n                    break;\n                case \"JO2\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // power takeoff device\n                    break;\n                case \"JO3\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // accelector pedal position\n                    break;\n                case \"JO4\":\n                    if (buf.isReadable()) { position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte()); }\n                    break;\n                case \"JO5\":\n                    if (buf.isReadable()) { position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4); }\n                    break;\n                case \"JO6\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // fms vehicle interface\n                    break;\n                case \"JO7\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // driver 2\n                    break;\n                case \"JO8\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // driver 1\n                    break;\n                case \"JO9\":\n                    if (buf.isReadable()) { buf.readUnsignedByte(); } // drivers\n                    break;\n                case \"JO10\":\n                     if (buf.isReadable()) { buf.readUnsignedByte(); } // system information\n                    break;\n                case \"JO11\":\n                     if (buf.isReadable()) { position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40); }\n                    break;\n                case \"JO12\":\n                     if (buf.isReadable()) { buf.readUnsignedByte(); } // pto engaged\n                    break;\n                case \"JH1\":\n                    if (buf.readableBytes() >= 2) { position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0); }\n                    break;\n                case \"JH2\":\n                    if (buf.readableBytes() >= 2) { position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125); }\n                    break;\n                case \"JH3\":\n                case \"JH4\":\n                case \"JH5\":\n                case \"JH6\":\n                case \"JH7\":\n                    if (buf.readableBytes() >= 2) {\n                        int index = Integer.parseInt(key.substring(2)) - 2;\n                        position.set(\"axleWeight\" + index, buf.readUnsignedShort() * 0.5);\n                    }\n                    break;\n                case \"JH8\":\n                    if (buf.readableBytes() >= 2) { position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5); }\n                    break;\n                case \"JH9\":\n                    if (buf.readableBytes() >= 2) { buf.readUnsignedShort(); } // tachograph speed\n                    break;\n                case \"JH10\":\n                    if (buf.readableBytes() >= 2) { buf.readUnsignedShort(); } // ambient air temperature\n                    break;\n                case \"JH11\":\n                     if (buf.readableBytes() >= 2) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05); }\n                    break;\n                case \"JH12\":\n                    if (buf.readableBytes() >= 2) { buf.readUnsignedShort(); } // fuel economy\n                    break;\n                case \"JL1\":\n                    if (buf.readableBytes() >= 4) { position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5); }\n                    break;\n                case \"JL2\":\n                    if (buf.readableBytes() >= 4) { position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000); }\n                    break;\n                case \"JL3\":\n                    if (buf.readableBytes() >= 4) { position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000); }\n                    break;\n                case \"JL4\":\n                    if (buf.readableBytes() >= 4) { position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001); }\n                    break;\n                case \"JS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JS2\":\n                    readString(buf); // fms version supported\n                    break;\n                case \"JS3\":\n                    position.set(\"driver1\", readString(buf));\n                    break;\n                case \"JS4\":\n                    position.set(\"driver2\", readString(buf));\n                    break;\n                case \"JN1\":\n                    if (buf.readableBytes() >= 4) { buf.readUnsignedInt(); } // cruise control distance\n                    break;\n                case \"JN2\":\n                    if (buf.readableBytes() >= 4) { buf.readUnsignedInt(); } // excessive idling time\n                    break;\n                case \"JN3\":\n                    if (buf.readableBytes() >= 4) { buf.readUnsignedInt(); } // excessive idling fuel\n                    break;\n                case \"JN4\":\n                    if (buf.readableBytes() >= 4) { buf.readUnsignedInt(); } // pto time\n                    break;\n                case \"JN5\":\n                     if (buf.readableBytes() >= 4) { buf.readUnsignedInt(); } // pto fuel\n                    break;\n                default:\n                    // Log.warn(\"ATrack: Unknown custom binary key: \" + key);\n                    break; // Ignore unknown keys\n            }\n        }\n\n        if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}