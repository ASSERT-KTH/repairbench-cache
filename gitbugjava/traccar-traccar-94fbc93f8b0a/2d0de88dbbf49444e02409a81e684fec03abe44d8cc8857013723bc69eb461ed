{
    "generation": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            // Check buffer readable bytes before reading. Optional but good practice.\n            // Example: if (!buf.isReadable()) break;\n            switch (key) {\n                case \"SA\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"MV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.1); // Assuming Little Endian based on typical GPS devices\n                    }\n                    break;\n                case \"BV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.1); // Assuming Little Endian\n                    }\n                    break;\n                case \"GQ\":\n                    if (buf.isReadable()) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n                    break;\n                case \"CE\":\n                    if (buf.readableBytes() >= 4) {\n                        cellTower.setCellId(buf.readUnsignedIntLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"LC\":\n                    if (buf.readableBytes() >= 2) {\n                        cellTower.setLocationAreaCode(buf.readUnsignedShortLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"CN\":\n                    if (buf.readableBytes() >= 4) {\n                        int combinedMobileCodes = (int) (buf.readUnsignedIntLE() % 100000); // cccnn, Assuming Little Endian\n                        cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                        cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    }\n                    break;\n                case \"RL\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // rxlev\n                    }\n                    break;\n                case \"PC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedIntLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"AT\":\n                    if (buf.readableBytes() >= 4) {\n                        position.setAltitude(buf.readUnsignedIntLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"RP\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"GS\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"DT\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    }\n                    break;\n                case \"VN\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShortLE(); // mass air flow rate // Assuming Little Endian\n                    }\n                    break;\n                case \"EL\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // engine load\n                    }\n                    break;\n                case \"TR\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ET\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"FL\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ML\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // mil status\n                    }\n                    break;\n                case \"FC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"CI\":\n                    // This key likely indicates the presence/format of custom data\n                    // but doesn't correspond to data to be read from the buffer itself.\n                    // Reading a string here caused buffer desynchronization.\n                    // readString(buf); // format string - Removed Fix\n                    break;\n                case \"AV1\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE()); // Assuming Little Endian\n                    }\n                    break;\n                case \"NC\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    readString(buf); // gsm neighbor cell info\n                    break;\n                case \"SM\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShortLE(); // max speed between reports // Assuming Little Endian\n                    }\n                    break;\n                case \"GL\":\n                case \"MA\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    readString(buf); // google link or mac address\n                    break;\n                case \"PD\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // pending code status\n                    }\n                    break;\n                case \"CD\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLongLE(); // imsi // Assuming Little Endian\n                    }\n                    break;\n                case \"GN\":\n                    buf.skipBytes(Math.min(60, buf.readableBytes())); // g sensor data\n                    break;\n                case \"GV\":\n                    buf.skipBytes(Math.min(6, buf.readableBytes())); // maximum g force\n                    break;\n                case \"ME\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLongLE(); // imei // Assuming Little Endian\n                    }\n                    break;\n                case \"IA\":\n                case \"MP\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // intake air temperature or manifold absolute pressure\n                    }\n                    break;\n                case \"EO\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedIntLE())); // Assuming Little Endian\n                    }\n                    break;\n                case \"EH\":\n                    if (buf.readableBytes() >= 4) {\n                        // Original code multiplied by 360000 (0.1 hours to ms)\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 360_000L); // Assuming Little Endian\n                    }\n                    break;\n                case \"ZO1\":\n                case \"ZO2\":\n                case \"ZO3\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // brake stroke, warning indicator, abs control status\n                    }\n                    break;\n                case \"ZO4\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case \"ZO5\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // parking brake status\n                    }\n                    break;\n                case \"ZO6\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);\n                    }\n                    break;\n                case \"ZO7\":\n                case \"ZO8\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // cruise control status or accelerator pedal position\n                    }\n                    break;\n                case \"ZO9\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);\n                    }\n                    break;\n                case \"ZO10\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);\n                    }\n                    break;\n                case \"ZO11\":\n                case \"ZO12\":\n                case \"ZO13\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // engine oil pressure, boost pressure, intake temperature\n                    }\n                    break;\n                case \"ZO14\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte()); // Note: J1939 PGN 65262 uses -40 offset\n                    }\n                    break;\n                case \"ZO15\":\n                case \"ZO16\":\n                case \"ZO17\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // brake application/primary/secondary pressure\n                    }\n                    break;\n                case \"ZH1\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShortLE(); // cargo weight // Assuming Little Endian\n                    }\n                    break;\n                case \"ZH2\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 16.428 / 3600); // Assuming Little Endian\n                    }\n                    break;\n                case \"ZH3\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE() * 0.25); // Assuming Little Endian\n                    }\n                    break;\n                case \"ZL1\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedIntLE(); // fuel used (natural gas) // Assuming Little Endian\n                    }\n                    break;\n                case \"ZL2\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE() * 161L); // Assuming Little Endian\n                    }\n                    break;\n                case \"ZL3\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedIntLE(); // vehicle hours // Assuming Little Endian\n                    }\n                    break;\n                case \"ZL4\":\n                    if (buf.readableBytes() >= 4) {\n                        // Original code: 5 * 36000 = 180000 (0.05 hours to ms?)\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 180_000L); // Assuming Little Endian\n                    }\n                    break;\n                case \"ZS1\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JO1\":\n                case \"JO2\":\n                case \"JO3\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // pedals, power takeoff device, accelerator pedal position\n                    }\n                    break;\n                case \"JO4\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"JO5\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case \"JO6\":\n                case \"JO7\":\n                case \"JO8\":\n                case \"JO9\":\n                case \"JO10\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // fms vehicle interface, drivers, system info\n                    }\n                    break;\n                case \"JO11\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40); // J1939 PGN 65262 offset\n                    }\n                    break;\n                case \"JO12\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // pto engaged\n                    }\n                    break;\n                case \"JH1\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE() / 256.0); // Assuming Little Endian\n                    }\n                    break;\n                case \"JH2\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE() * 0.125); // Assuming Little Endian\n                    }\n                    break;\n                case \"JH3\":\n                case \"JH4\":\n                case \"JH5\":\n                case \"JH6\":\n                case \"JH7\":\n                    if (buf.readableBytes() >= 2) {\n                        int index = Integer.parseInt(key.substring(2)) - 2; // Check key length first?\n                        position.set(\"axleWeight\" + index, buf.readUnsignedShortLE() * 0.5); // Assuming Little Endian\n                    }\n                    break;\n                case \"JH8\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShortLE() * 5L); // Assuming Little Endian\n                    }\n                    break;\n                case \"JH9\":\n                case \"JH10\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShortLE(); // tachograph speed or ambient air temperature // Assuming Little Endian\n                    }\n                    break;\n                case \"JH11\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.05); // Assuming Little Endian\n                    }\n                    break;\n                case \"JH12\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShortLE(); // fuel economy // Assuming Little Endian\n                    }\n                    break;\n                case \"JL1\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.5); // Assuming Little Endian\n                    }\n                    break;\n                case \"JL2\":\n                    if (buf.readableBytes() >= 4) {\n                        // Same as ZL4: 5 * 36000 = 180000 (0.05 hours to ms?)\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 180_000L); // Assuming Little Endian\n                    }\n                    break;\n                case \"JL3\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE() * 1000L); // Assuming Little Endian\n                    }\n                    break;\n                case \"JL4\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Assuming Little Endian\n                    }\n                    break;\n                case \"JS1\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JS2\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    readString(buf); // fms version supported\n                    break;\n                case \"JS3\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    position.set(\"driver1\", readString(buf));\n                    break;\n                case \"JS4\":\n                    // Assuming readString handles buffer checks internally or need try-catch\n                    position.set(\"driver2\", readString(buf));\n                    break;\n                case \"JN1\":\n                case \"JN2\":\n                case \"JN3\":\n                case \"JN4\":\n                case \"JN5\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedIntLE(); // cruise control distance, idling time/fuel, pto time/fuel // Assuming Little Endian\n                    }\n                    break;\n                default:\n                    // Log unknown key? Or ignore?\n                    // Log.warning(\"Unknown custom data key: \" + key);\n                    break;\n            }\n            // Optional: break loop if buffer becomes unreadable\n            // if (!buf.isReadable()) { break; }\n        }\n\n        // Check CellTower data validity before creating Network object\n        if (cellTower.getMobileCountryCode() != null\n                && cellTower.getMobileNetworkCode() != null\n                && cellTower.getCellId() != null && cellTower.getCellId() != 0 && cellTower.getCellId() != -1 // Consider other invalid IDs?\n                && cellTower.getLocationAreaCode() != null && cellTower.getLocationAreaCode() != 0 && cellTower.getLocationAreaCode() != -1) { // Consider other invalid LACs?\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null && cellTower.getSignalStrength() != 0) { // Don't overwrite valid GS with invalid GQ\n            // Only set RSSI from cell tower if Network wasn't set and signal strength is valid\n            if (position.getNetwork() == null) {\n                position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}