{
    "generation": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            // Check remaining buffer size to prevent IndexOutOfBoundsException\n            // This might help diagnose issues if the format string expects more data than available\n            if (!buf.isReadable()) {\n                // Log warning or break if buffer is unexpectedly empty\n                // Log.warning(\"Buffer empty while processing custom data key: \" + key);\n                break; \n            }\n            switch (key) {\n                case \"SA\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"MV\":\n                     if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"BV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"GQ\":\n                    if (buf.readableBytes() >= 1) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n                    break;\n                case \"CE\":\n                    if (buf.readableBytes() >= 4) {\n                        cellTower.setCellId(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"LC\":\n                    if (buf.readableBytes() >= 2) {\n                        cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    }\n                    break;\n                case \"CN\":\n                    if (buf.readableBytes() >= 4) {\n                        long combinedMobileCodes = buf.readUnsignedInt(); // Use long to handle full unsigned range\n                        // Apply modulo 100000 based on comment \"cccnn\" implying 5 digits\n                        // Some devices might send raw MCC/MNC without this encoding, protocol docs are key\n                        int networkData = (int) (combinedMobileCodes % 100000); \n                        cellTower.setMobileCountryCode(networkData / 100);\n                        cellTower.setMobileNetworkCode(networkData % 100);\n                    }\n                    break;\n                case \"RL\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // rxlev\n                    }\n                    break;\n                case \"PC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"AT\":\n                    if (buf.readableBytes() >= 4) {\n                        // Assuming altitude is in meters, check if value needs scaling or offset\n                        position.setAltitude(buf.readInt()); // Use readInt() if altitude can be negative\n                    }\n                    break;\n                case \"RP\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"GS\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"DT\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    }\n                    break;\n                case \"VN\":\n                    // Assuming readString handles buffer checks internally or length is known\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // mass air flow rate\n                    }\n                    break;\n                case \"EL\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // engine load\n                    }\n                    break;\n                case \"TR\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ET\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"FL\":\n                     if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ML\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // mil status\n                    }\n                    break;\n                case \"FC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"CI\":\n                    // Assuming readString handles buffer checks internally\n                    readString(buf); // format string for cell info? seems redundant if form is already known\n                    break;\n                case \"AV1\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"NC\":\n                     // Assuming readString handles buffer checks internally\n                    readString(buf); // gsm neighbor cell info\n                    break;\n                case \"SM\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // max speed between reports\n                    }\n                    break;\n                case \"GL\":\n                    // Assuming readString handles buffer checks internally\n                    readString(buf); // google link\n                    break;\n                case \"MA\":\n                    // Assuming readString handles buffer checks internally\n                    readString(buf); // mac address\n                    break;\n                case \"PD\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // pending code status\n                    }\n                    break;\n                case \"CD\":\n                    // Assuming readString handles buffer checks internally\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imsi\n                    }\n                    break;\n                case \"GN\":\n                    if (buf.readableBytes() >= 60) {\n                        buf.skipBytes(60); // g sensor data\n                    } else {\n                        // Skip only readable bytes if less than 60 are available\n                        buf.skipBytes(buf.readableBytes());\n                    }\n                    break;\n                case \"GV\":\n                     if (buf.readableBytes() >= 6) {\n                        buf.skipBytes(6); // maximum g force\n                    } else {\n                        buf.skipBytes(buf.readableBytes());\n                    }\n                    break;\n                case \"ME\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imei\n                    }\n                    break;\n                case \"IA\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // intake air temperature\n                    }\n                    break;\n                case \"MP\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // manifold absolute pressure\n                    }\n                    break;\n                case \"EO\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));\n                    }\n                    break;\n                case \"EH\":\n                    if (buf.readableBytes() >= 4) {\n                        // Multiplication factor might overflow integer, ensure calculation uses long\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000L);\n                    }\n                    break;\n                case \"ZO1\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // brake stroke status\n                    }\n                    break;\n                case \"ZO2\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // warning indicator status\n                    }\n                    break;\n                case \"ZO3\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // abs control status\n                    }\n                    break;\n                case \"ZO4\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case \"ZO5\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // parking brake status\n                    }\n                    break;\n                case \"ZO6\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);\n                    }\n                    break;\n                case \"ZO7\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // cruise control status\n                    }\n                    break;\n                case \"ZO8\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // accelector pedal position\n                    }\n                    break;\n                case \"ZO9\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);\n                    }\n                    break;\n                case \"ZO10\":\n                     if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);\n                    }\n                    break;\n                case \"ZO11\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // engine oil pressure\n                    }\n                    break;\n                case \"ZO12\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // boost pressure\n                    }\n                    break;\n                case \"ZO13\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // intake temperature\n                    }\n                    break;\n                case \"ZO14\":\n                     if (buf.readableBytes() >= 1) {\n                         // Temperature might be signed or require offset\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readByte()); // Assuming signed byte C\n                    }\n                    break;\n                case \"ZO15\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // brake application pressure\n                    }\n                    break;\n                case \"ZO16\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // brake primary pressure\n                    }\n                    break;\n                case \"ZO17\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // brake secondary pressure\n                    }\n                    break;\n                case \"ZH1\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // cargo weight\n                    }\n                    break;\n                case \"ZH2\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);\n                    }\n                    break;\n                case \"ZH3\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);\n                    }\n                    break;\n                case \"ZL1\":\n                     if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // fuel used (natural gas)\n                    }\n                    break;\n                case \"ZL2\":\n                    if (buf.readableBytes() >= 4) {\n                        // Factor 161 seems specific, check units (e.g., 0.1 miles to meters?)\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161L);\n                    }\n                    break;\n                case \"ZL3\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // vehicle hours\n                    }\n                    break;\n                case \"ZL4\":\n                    if (buf.readableBytes() >= 4) {\n                         // Factor seems large, ensure correct units (e.g., 0.05 hr to ms?)\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L);\n                    }\n                    break;\n                case \"ZS1\":\n                     // Assuming readString handles buffer checks internally\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JO1\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // pedals\n                    }\n                    break;\n                case \"JO2\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // power takeoff device\n                    }\n                    break;\n                case \"JO3\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // accelector pedal position\n                    }\n                    break;\n                case \"JO4\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"JO5\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case \"JO6\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // fms vehicle interface\n                    }\n                    break;\n                case \"JO7\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // driver 2\n                    }\n                    break;\n                case \"JO8\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // driver 1\n                    }\n                    break;\n                case \"JO9\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // drivers\n                    }\n                    break;\n                case \"JO10\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // system information\n                    }\n                    break;\n                case \"JO11\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readByte() - 40); // Offset by -40C\n                    }\n                    break;\n                case \"JO12\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // pto engaged\n                    }\n                    break;\n                case \"JH1\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);\n                    }\n                    break;\n                case \"JH2\":\n                     if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);\n                    }\n                    break;\n                case \"JH3\":\n                case \"JH4\":\n                case \"JH5\":\n                case \"JH6\":\n                case \"JH7\":\n                    if (buf.readableBytes() >= 2) {\n                        int index = Integer.parseInt(key.substring(2)) - 2; // index = 1..5\n                        position.set(\"axleWeight\" + index, buf.readUnsignedShort() * 0.5);\n                    }\n                    break;\n                case \"JH8\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5L);\n                    }\n                    break;\n                case \"JH9\":\n                     if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // tachograph speed\n                    }\n                    break;\n                case \"JH10\":\n                     if (buf.readableBytes() >= 2) {\n                         // Ambient temp likely signed short C with scaling?\n                        buf.readUnsignedShort(); // ambient air temperature\n                    }\n                    break;\n                case \"JH11\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);\n                    }\n                    break;\n                case \"JH12\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // fuel economy\n                    }\n                    break;\n                case \"JL1\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);\n                    }\n                    break;\n                case \"JL2\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L);\n                    }\n                    break;\n                case \"JL3\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n                    }\n                    break;\n                case \"JL4\":\n                     if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                    }\n                    break;\n                case \"JS1\":\n                     // Assuming readString handles buffer checks internally\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JS2\":\n                     // Assuming readString handles buffer checks internally\n                    readString(buf); // fms version supported\n                    break;\n                case \"JS3\":\n                     // Assuming readString handles buffer checks internally\n                    position.set(\"driver1\", readString(buf));\n                    break;\n                case \"JS4\":\n                    // Assuming readString handles buffer checks internally\n                    position.set(\"driver2\", readString(buf));\n                    break;\n                case \"JN1\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // cruise control distance\n                    }\n                    break;\n                case \"JN2\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // excessive idling time\n                    }\n                    break;\n                case \"JN3\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // excessive idling fuel\n                    }\n                    break;\n                case \"JN4\":\n                    if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // pto time\n                    }\n                    break;\n                case \"JN5\":\n                     if (buf.readableBytes() >= 4) {\n                        buf.readUnsignedInt(); // pto fuel\n                    }\n                    break;\n                default:\n                     // Optional: Log unknown key if necessary\n                     // Log.warning(\"Unknown custom data key: \" + key);\n                    break;\n            }\n        }\n\n        // Check if critical cell info fields were successfully populated before creating Network object\n        if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0 && !cellTower.getCellId().equals(Long.MAX_VALUE) // Check for potentially invalid large Cell IDs\n            && cellTower.getLocationAreaCode() != null) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            // Fallback to setting RSSI if full network info isn't available but signal strength is\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }\n\n    // Define or ensure the existence of readString helper method\n    // Example placeholder (actual implementation might differ):\n    private String readString(ByteBuf buf) {\n        int length = buf.bytesBefore((byte) 0);\n        if (length < 0 && buf.readableBytes() > 0) {\n            // Handle case where null terminator is missing or at the very end\n            length = buf.readableBytes(); \n            String s = buf.readCharSequence(length, java.nio.charset.StandardCharsets.US_ASCII).toString();\n            // No null terminator to skip\n             return s;\n        } else if (length >= 0 && buf.readableBytes() >= length + 1) {\n            String s = buf.readCharSequence(length, java.nio.charset.StandardCharsets.US_ASCII).toString();\n            buf.skipBytes(1); // Skip the null terminator\n            return s;\n        } else {\n             // Not enough bytes for string or terminator, or empty buffer\n             if (length == 0 && buf.readableBytes() > 0 && buf.getByte(buf.readerIndex()) == 0) {\n                 buf.skipBytes(1); // Consume the null byte for an empty string\n             }\n             return \"\"; // Return empty string if unterminated/unreadable\n        }\n    }\n\n    // Define or ensure the existence of UnitsConverter helper class/method\n    // Example placeholder:\n    private static class UnitsConverter {\n        public static double metersFromMiles(long miles) {\n            return miles * 1609.34;\n        }\n    }\n\n    // Define or ensure the existence of Position class constants/methods\n    // Example placeholders:\n    private static class Position {\n        public static final String KEY_SATELLITES = \"sat\";\n        public static final String KEY_POWER = \"power\";\n        public static final String KEY_BATTERY = \"batteryLevel\"; // Example, adjust if needed\n        public static final String KEY_RPM = \"rpm\";\n        public static final String KEY_RSSI = \"rssi\";\n        public static final String KEY_ARCHIVE = \"archive\";\n        public static final String KEY_VIN = \"vin\";\n        public static final String KEY_THROTTLE = \"throttle\";\n        public static final String KEY_FUEL_LEVEL = \"fuelLevel\";\n        public static final String KEY_FUEL_CONSUMPTION = \"fuelConsumption\";\n        public static final String KEY_ICCID = \"iccid\";\n        public static final String KEY_ODOMETER = \"odometer\";\n        public static final String KEY_HOURS = \"hours\";\n        public static final String KEY_OBD_SPEED = \"obdSpeed\";\n        public static final String KEY_ENGINE_LOAD = \"engineLoad\";\n        public static final String KEY_COOLANT_TEMP = \"coolantTemp\";\n        public static final String KEY_ODOMETER_SERVICE = \"serviceOdometer\";\n        public static final String KEY_FUEL_USED = \"fuelUsed\";\n        public static final String PREFIX_COUNT = \"count\";\n        public static final String PREFIX_TEMP = \"temp\";\n        public static final String PREFIX_ADC = \"adc\";\n\n        public void set(String key, Object value) {/*...*/}\n        public void setAltitude(double altitude) {/*...*/}\n        public void setNetwork(Network network) {/*...*/}\n    }\n\n    // Define or ensure the existence of CellTower and Network classes\n    // Example placeholders:\n    private static class CellTower {\n        private Integer signalStrength;\n        private Long cellId;\n        private Integer locationAreaCode;\n        private Integer mobileCountryCode;\n        private Integer mobileNetworkCode;\n\n        public void setSignalStrength(Integer signalStrength) { this.signalStrength = signalStrength; }\n        public Integer getSignalStrength() { return signalStrength; }\n        public void setCellId(Long cellId) { this.cellId = cellId; }\n        public Long getCellId() { return cellId; }\n        public void setLocationAreaCode(Integer locationAreaCode) { this.locationAreaCode = locationAreaCode; }\n        public Integer getLocationAreaCode() { return locationAreaCode; }\n        public void setMobileCountryCode(Integer mobileCountryCode) { this.mobileCountryCode = mobileCountryCode; }\n        public Integer getMobileCountryCode() { return mobileCountryCode; }\n        public void setMobileNetworkCode(Integer mobileNetworkCode) { this.mobileNetworkCode = mobileNetworkCode; }\n        public Integer getMobileNetworkCode() { return mobileNetworkCode; }\n    }\n\n    private static class Network {\n        public Network(CellTower cellTower) {/*...*/}\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}