{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      // If the value is null, this indicates a removed object literal.\n      // This can happen in rare cases like var x = obj.o = {}.\n      if (val == null) {\n        return;\n      }\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        // Check added for Issue 763: Don't handle getter/setter definitions.\n        if (key.isGetterDef() || key.isSetterDef()) {\n          continue;\n        }\n\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO(user): Copy type information.\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n      }\n\n      // TODO(user): Better source information.\n      for (String var : all) {\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));\n      }\n\n      Node replacement;\n        // All assignments evaluate to true, so make sure that the\n        // expr statement evaluates to true in case it matters.\n        nodes.add(new Node(Token.TRUE));\n\n        // Handle the case where the object literal was empty.\n        if (nodes.size() == 1) {\n            // If the object literal was empty, nodes only contains TRUE.\n            replacement = nodes.get(0);\n        } else {\n          // Join these using COMMA. A COMMA node must have 2 children, so we\n          // create a tree. In the tree the first child be the COMMA to match\n          // the parser, otherwise tree equality tests fail.\n          // This logic correctly builds COMMA(COMMA(assign1, assign2), TRUE)\n          // for nodes = [assign1, assign2, TRUE]\n          nodes = Lists.reverse(nodes); // e.g., [TRUE, assign2, assign1]\n          replacement = new Node(Token.COMMA);\n          Node cur = replacement;\n          int i;\n          // Build the left spine of the COMMA tree.\n          for (i = 0; i < nodes.size() - 2; i++) {\n            cur.addChildToFront(nodes.get(i)); // Add right-most operand (e.g., TRUE)\n            Node t = new Node(Token.COMMA);\n            cur.addChildToFront(t);           // Add placeholder COMMA for left operand\n            cur = t;                          // Move to placeholder\n          }\n          // Add the final two operands to the left-most COMMA node.\n          cur.addChildToFront(nodes.get(i));     // Add second element (e.g., assign2)\n          cur.addChildToFront(nodes.get(i + 1)); // Add first element (e.g., assign1)\n        }\n\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n\n      if (replace.getType() == Token.VAR) {\n        // If the original was 'var x = {...}', replace the VAR node\n        // with an EXPR_RESULT node containing the comma expression.\n        replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));\n      } else {\n        // If the original was 'x = {}' (ASSIGN) or part of a larger expression,\n        // replace the parent of the reference (which is the ASSIGN node)\n        // with the comma expression.\n        replace.getParent().replaceChild(replace, replacement);\n      }\n      // Something changed, notify the compiler.\n      ref.getCompiler().reportCodeChange();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}