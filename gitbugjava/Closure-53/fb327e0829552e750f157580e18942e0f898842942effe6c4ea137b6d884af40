{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      // Make sure that the value is not used in the assignment.\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild(); // remove value node from key\n        // TODO(user): Copy type information.\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n      }\n\n      // Add assignments for keys that weren't specified in the literal.\n      // TODO(user): Better source information.\n      for (String var : all) {\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));\n      }\n\n      Node replacement;\n      // All assignments evaluate to true, so make sure that the\n      // expr statement evaluates to true in case it matters.\n      nodes.add(new Node(Token.TRUE)); // Ensures nodes is never empty\n\n      // Create the replacement node.\n      if (nodes.size() == 1) {\n        replacement = nodes.get(0); // Just the TRUE node\n      } else {\n        // Build comma tree: (node[0], (node[1], ... (node[N-1], node[N])))\n        // A COMMA node must have 2 children.\n        int last = nodes.size() - 1;\n        replacement = new Node(Token.COMMA, nodes.get(last - 1), nodes.get(last));\n        for (int i = last - 2; i >= 0; i--) {\n          replacement = new Node(Token.COMMA, nodes.get(i), replacement);\n        }\n      }\n\n\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n\n      // Replace the original node depending on the context.\n      if (replace.getType() == Token.VAR) {\n        // If the original was a VAR declaration, replace it with an expression statement.\n        Node exprResult = NodeUtil.newExpr(replacement);\n        replace.getParent().replaceChild(replace, exprResult);\n      } else {\n        // Otherwise, just replace the assignment node directly.\n        replace.getParent().replaceChild(replace, replacement);\n      }\n      // Report the change\n      compiler.reportCodeChange();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}