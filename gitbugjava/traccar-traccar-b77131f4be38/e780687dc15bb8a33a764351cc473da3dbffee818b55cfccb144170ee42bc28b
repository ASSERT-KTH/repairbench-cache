{
    "generation": "@Override\nprotected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n    ByteBuf buf = (ByteBuf) msg;\n\n    // Skip the starting '['\n    buf.skipBytes(1); \n    // Read the two\u2010character manufacturer field\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // skip the '*' delimiter\n\n    // Read the device id (up to the next '*')\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (idIndex < 0) {\n        return null;\n    }\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n    buf.skipBytes(1); // skip '*' after id\n\n    String index = null;\n    if (\"ZJ\".equals(manufacturer)) {\n        // For ZJ messages, the next field is the index field,\n        // and then a 4-digit length field is expected.\n        int indexDelimiter = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n        if (indexDelimiter < 0) {\n            return null;\n        }\n        // Read the index field (should be 4 bytes)\n        index = buf.readSlice(indexDelimiter - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); // skip '*' after index\n\n        // Now skip the 4-digit length field and its trailing '*' delimiter.\n        if (buf.readableBytes() < 5) {\n            return null;\n        }\n        buf.skipBytes(4); // skip length field\n        buf.skipBytes(1); // skip '*' delimiter\n    } else {\n        // For non-ZJ messages, consume the third field (often a dummy or message sequence) and ignore it.\n        int thirdFieldDelimiter = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n        if (thirdFieldDelimiter < 0) {\n            return null;\n        }\n        // Simply skip over this field.\n        buf.readerIndex(thirdFieldDelimiter + 1);\n    }\n\n    // Trim off the ending ']' from the message\n    buf.writerIndex(buf.writerIndex() - 1);\n\n    // Read the payload type (up to the first comma, if any)\n    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (contentIndex < 0) {\n        contentIndex = buf.writerIndex();\n    }\n    String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    if (contentIndex < buf.writerIndex()) {\n        buf.readerIndex(contentIndex + 1);\n    }\n\n    // Process by message type\n    if (type.equals(\"INIT\")) {\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    } else if (type.equals(\"LK\")) {\n        sendResponse(channel, id, index, \"LK\");\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n                return position;\n            }\n        }\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n        if (type.startsWith(\"AL\")) {\n            if (position != null) {\n                // For AL messages, set alarm type to REMOVING (instead of GENERAL)\n                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n        return position;\n\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n        sendResponse(channel, id, index, type);\n\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n        if (buf.isReadable()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, new Date());\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int valueIndex = 0;\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                // btemp2 messages include a flag and then the temperature value\n                if (Integer.parseInt(values[valueIndex++]) > 0) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    position.set(\"pressureHigh\", values[valueIndex++]);\n                    position.set(\"pressureLow\", values[valueIndex++]);\n                }\n                if (valueIndex <= values.length - 1) {\n                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                }\n            }\n            return position;\n        }\n\n    } else if (type.equalsIgnoreCase(\"TEMP\")) {\n        // New branch to handle TEMP messages (e.g. \"[ZJ*5678901234*0001*0009*TEMP,36.5]\")\n        if (buf.isReadable()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, new Date());\n            double temp = Double.parseDouble(buf.toString(StandardCharsets.US_ASCII).trim());\n            position.set(Position.PREFIX_TEMP + 1, temp);\n            sendResponse(channel, id, index, \"TEMP\");\n            return position;\n        }\n\n    } else if (type.equals(\"img\")) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        buf.readerIndex(timeIndex + 12 + 2);\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n        return position;\n\n    } else if (type.equals(\"JXTK\")) {\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n        sendResponse(channel, id, index, \"JXTKR,1\");\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    } else if (type.equals(\"TK\")) {\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n        return position;\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}