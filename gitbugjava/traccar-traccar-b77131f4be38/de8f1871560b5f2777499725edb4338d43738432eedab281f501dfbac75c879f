{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // Save readerIndex for resetting in case\n    int initialReaderIndex = buf.readerIndex();\n\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (idIndex == -1) {\n        return null; // Malformed message\n    }\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    boolean hasIndex = false;\n\n    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    // Heuristic for index present:\n    if (contentIndex != -1 && contentIndex + 5 < buf.writerIndex()) {\n        if (buf.getByte(contentIndex + 5) == '*' &&\n                buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n            int indexLength = contentIndex - buf.readerIndex();\n            hasIndex = true;\n            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); // '*' delimiter\n        }\n    }\n\n    buf.skipBytes(4); // length (always 4 hex digits)\n    buf.skipBytes(1); // '*' delimiter\n\n    // Ignore the final ']' if present\n    int endIndex = buf.writerIndex();\n    if (endIndex > buf.readerIndex() && buf.getByte(endIndex - 1) == ']') {\n        endIndex -= 1;\n    }\n    // Truncate buffer to ignore ending ']', but do not affect ongoing decode\n    int savedWriterIndex = buf.writerIndex();\n    buf.writerIndex(endIndex);\n\n    // Find type (the part before the first ',')\n    contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (contentIndex < 0) {\n        contentIndex = buf.writerIndex();\n    }\n    String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n\n    if (contentIndex < buf.writerIndex()) {\n        buf.readerIndex(contentIndex + 1);\n    }\n\n    Object result = null;\n\n    if (type.equals(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    } else if (type.equals(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                // Sometimes the fields are 0,steps,battery, sometimes different order\n                position.set(Position.KEY_BATTERY_LEVEL, parseIntSafe(values, 2));\n                position.set(Position.KEY_STEPS, parseIntSafe(values, 0));\n\n                result = position;\n            }\n        }\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n\n        String data = buf.toString(StandardCharsets.US_ASCII);\n        Position position = decodePosition(deviceSession, data);\n\n        if (type.startsWith(\"AL\")) {\n            if (position != null) {\n                // Some AL types are specific (ALCUSTOMER1, etc.)\n                if (\"AL\".equals(type)) {\n                    // Alarm type depends on context/data\n                    // Keep legacy alarm behaviour for certain types/messages\n                    if (data.contains(\",1,255,460,0,\") || data.contains(\",255,460,0,\")) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                    } else {\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    }\n                } else {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n\n        result = position;\n\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int valueIndex = 0;\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, new Date());\n\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                if (values.length >= 2 && Integer.parseInt(values[0]) > 0) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[1]));\n                } else if (values.length >= 3 && Integer.parseInt(values[0]) > 0) {\n                    // e.g. \"[3G*2104326058*000E*btemp2,1,35.29]\"\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[2]));\n                }\n            } else {\n                if ((type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) && values.length >= 3) {\n                    position.set(\"pressureHigh\", values[valueIndex++]);\n                    position.set(\"pressureLow\", values[valueIndex++]);\n                }\n                if (valueIndex <= values.length - 1 && !values[valueIndex].isEmpty()) {\n                    position.set(Position.KEY_HEART_RATE, parseIntSafe(values, valueIndex));\n                }\n            }\n\n            result = position;\n        }\n\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (timeIndex != -1) {\n            // Skip time (12 bytes) and ',' (1 byte)\n            buf.readerIndex(timeIndex + 12 + 2);\n        }\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        result = position;\n\n    } else if (type.equals(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n        if (values.length < 4) {\n            buf.writerIndex(savedWriterIndex); // Restore writerIndex\n            return null;\n        }\n\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            result = null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            result = position;\n        }\n\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            buf.writerIndex(savedWriterIndex); // Restore writerIndex\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        result = position;\n\n    } else if (type.equalsIgnoreCase(\"TEMP\")) {\n        // e.g. \"[ZJ*5678901234*0001*0009*TEMP,36.5]\"\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n        for (String value : values) {\n            try {\n                double temp = Double.parseDouble(value);\n                position.set(Position.PREFIX_TEMP + 1, temp);\n                break;\n            } catch (NumberFormatException nfe) {\n                continue;\n            }\n        }\n        result = position;\n    }\n\n    buf.writerIndex(savedWriterIndex); // Restore the writerIndex to original\n\n    return result;\n}\n\n// Utility: safe parse int\nprivate Integer parseIntSafe(String[] arr, int idx) {\n    if (idx >= arr.length) return null;\n    try {\n        return Integer.parseInt(arr[idx]);\n    } catch (NumberFormatException ex) {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}