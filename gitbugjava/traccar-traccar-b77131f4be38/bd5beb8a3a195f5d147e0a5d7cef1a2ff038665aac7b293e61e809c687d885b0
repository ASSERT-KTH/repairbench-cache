{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    boolean hasIndex = false;\n    int readerIdx = buf.readerIndex();\n\n    // Try to detect optional index\n    int nextAsteriskIdx = buf.indexOf(readerIdx, buf.writerIndex(), (byte) '*');\n    if (nextAsteriskIdx - readerIdx == 4 &&\n            nextAsteriskIdx + 1 + 4 <= buf.writerIndex()) {\n        String maybeHex = buf.toString(readerIdx, 4, StandardCharsets.US_ASCII);\n        // 4 hex digits for index, check there's another asterisk after\n        if (maybeHex.matches(\"\\\\p{XDigit}+\")) {\n            hasIndex = true;\n            index = buf.readSlice(4).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); // '*' delimiter\n        }\n    }\n\n    // Length - always present and 4 bytes\n    buf.skipBytes(4);\n    buf.skipBytes(1); // '*' delimiter\n\n    // Move writerIndex to ignore trailing ']'\n    buf.writerIndex(buf.writerIndex() - 1); // ignore ']'\n\n    // Find comma delimiter for type, if not present - use to end\n    int typeCommaIdx = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (typeCommaIdx < 0) {\n        typeCommaIdx = buf.writerIndex();\n    }\n\n    String type = buf.readSlice(typeCommaIdx - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n\n    if (typeCommaIdx < buf.writerIndex()) {\n        buf.readerIndex(typeCommaIdx + 1);\n    }\n\n    if (type.equals(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    } else if (type.equals(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n\n                return position;\n            }\n        }\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n        if (type.startsWith(\"AL\")) {\n            if (position != null) {\n                // ALARM REMOVING: If input starts with 'AL', set the alarm key\n                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n\n        return position;\n\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n\n        if (buf.isReadable()) {\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int valueIndex = 0;\n\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                if (values.length > valueIndex && Integer.parseInt(values[valueIndex++]) > 0\n                        && values.length > valueIndex) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                }\n            } else {\n                if ((type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\"))\n                        && values.length > valueIndex + 1) {\n                    position.set(\"pressureHigh\", values[valueIndex++]);\n                    position.set(\"pressureLow\", values[valueIndex++]);\n                }\n                if (values.length > valueIndex && !values[valueIndex].isEmpty()) {\n                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                }\n            }\n\n            return position;\n\n        }\n\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (timeIndex >= 0 && (timeIndex + 12 + 2) <= buf.writerIndex()) {\n            buf.readerIndex(timeIndex + 12 + 2);\n        } else {\n            buf.readerIndex(buf.writerIndex());\n        }\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        return position;\n\n    } else if (type.equals(\"JXTK\")) {\n\n        // Find the index of 4th comma, since data header is: JXTK,0,watch_7...\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        return position;\n\n    } else if (type.toUpperCase().startsWith(\"TEMP\")) {\n        // For temperature packets: [ZJ*...*TEMP,36.5]\n        String temperatureStr = buf.toString(StandardCharsets.US_ASCII).trim();\n        if (!temperatureStr.isEmpty()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            String[] parts = temperatureStr.split(\",\");\n            double tempValue;\n            // Some packets are: TEMP,36.5\n            if (parts.length >= 2 && parts[1].matches(\"[-+]?\\\\d*\\\\.?\\\\d+\")) {\n                tempValue = Double.parseDouble(parts[1]);\n            } else if (parts.length == 1 && parts[0].matches(\"[-+]?\\\\d*\\\\.?\\\\d+\")) {\n                tempValue = Double.parseDouble(parts[0]);\n            } else {\n                tempValue = Double.NaN;\n            }\n\n            if (!Double.isNaN(tempValue)) {\n                position.set(Position.PREFIX_TEMP + 1, tempValue);\n                return position;\n            }\n        }\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}