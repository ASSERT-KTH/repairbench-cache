{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    // reset index flag on each call\n    hasIndex = false;\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // skip '[' header\n    buf.skipBytes(1);\n    // manufacturer, 2 chars\n    manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    // skip '*' delimiter\n    buf.skipBytes(1);\n\n    // read device id\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // skip '*' delimiter\n    buf.skipBytes(1);\n\n    // optional sequence index\n    String index = null;\n    int starIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    // detect if there is an index before the length (4 hex digits)\n    if (starIndex + 5 < buf.writerIndex()\n            && buf.getByte(starIndex + 5) == '*'\n            && buf.toString(starIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n        int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*')\n                - buf.readerIndex();\n        hasIndex = true;\n        index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n        // skip '*' delimiter\n        buf.skipBytes(1);\n    }\n\n    // skip length (4 chars) and '*' delimiter\n    buf.skipBytes(4);\n    buf.skipBytes(1);\n\n    // drop trailing ']'\n    buf.writerIndex(buf.writerIndex() - 1);\n\n    // parse message type\n    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (commaIndex < 0) {\n        commaIndex = buf.writerIndex();\n    }\n    String type = buf.readSlice(commaIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    if (commaIndex < buf.writerIndex()) {\n        buf.readerIndex(commaIndex + 1);\n    }\n\n    // handle INIT\n    if (type.equals(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    // handle heartbeat / link\n    } else if (type.equals(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n                return position;\n            }\n        }\n\n    // handle simple temperature report\n    } else if (type.equalsIgnoreCase(\"TEMP\")) {\n\n        if (buf.isReadable()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            // attach last known location timestamp\n            getLastLocation(position, new Date());\n            // parse temperature value\n            double temp = Double.parseDouble(buf.toString(StandardCharsets.US_ASCII));\n            // sensor channel is the sequence index if present, else 1\n            int sensor = hasIndex ? Integer.parseInt(index) : 1;\n            position.set(Position.PREFIX_TEMP + sensor, temp);\n            return position;\n        }\n\n    // handle UD*, AL*, WT*\n    } else if (type.startsWith(\"UD\")\n            || type.startsWith(\"AL\")\n            || type.startsWith(\"WT\")) {\n\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n        if (type.startsWith(\"AL\")) {\n            // acknowledge alarm\n            sendResponse(channel, id, index, \"AL\");\n        }\n        return position;\n\n    // handle TKQ acknowledgements\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    // handle health sensors: PULSE, HEART, BLOOD, BPHRT, btemp2\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n\n        if (buf.isReadable()) {\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int valueIndex = 0;\n\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                if (Integer.parseInt(values[valueIndex++]) > 0) {\n                    position.set(Position.PREFIX_TEMP + 1,\n                            Double.parseDouble(values[valueIndex]));\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    position.set(\"pressureHigh\", values[valueIndex++]);\n                    position.set(\"pressureLow\", values[valueIndex++]);\n                }\n                if (valueIndex <= values.length - 1) {\n                    position.set(Position.KEY_HEART_RATE,\n                            Integer.parseInt(values[valueIndex]));\n                }\n            }\n\n            return position;\n        }\n\n    // handle image upload\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        buf.readerIndex(timeIndex + 12 + 2);\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        return position;\n\n    // handle JXTK audio fragments\n    } else if (type.equals(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)\n                .toString().split(\",\");\n\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    // handle direct audio\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}