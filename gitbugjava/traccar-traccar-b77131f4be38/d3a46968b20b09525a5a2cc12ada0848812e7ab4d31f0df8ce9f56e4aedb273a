{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // Reset index flag for each message\n    hasIndex = false;\n\n    buf.skipBytes(1); // '[' header\n    manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    // Read device ID\n    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    // Optional index field\n    String index = null;\n    int starPos = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (starPos + 5 < buf.writerIndex()\n            && buf.getByte(starPos + 5) == '*'\n            && buf.toString(starPos + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n        int len = starPos - buf.readerIndex();\n        hasIndex = true;\n        index = buf.readSlice(len).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); // '*' after index\n    }\n\n    // Skip length (or index, if no real length field)\n    buf.skipBytes(4);\n    buf.skipBytes(1); // '*' delimiter\n\n    // Drop trailing ']'\n    buf.writerIndex(buf.writerIndex() - 1);\n\n    // Read message type\n    int commaPos = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (commaPos < 0) {\n        commaPos = buf.writerIndex();\n    }\n    String type = buf.readSlice(commaPos - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    if (commaPos < buf.writerIndex()) {\n        buf.readerIndex(commaPos + 1);\n    }\n\n    // INIT\n    if (type.equals(\"INIT\")) {\n        if (index != null) {\n            sendResponse(channel, id, index, \"INIT,1\");\n        }\n        return null;\n    }\n\n    // LK\n    if (type.equals(\"LK\")) {\n        if (index != null) {\n            sendResponse(channel, id, index, \"LK\");\n        }\n        if (buf.isReadable()) {\n            String[] parts = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (parts.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_STEPS, Integer.parseInt(parts[0]));\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(parts[2]));\n                return position;\n            }\n        }\n        return null;\n    }\n\n    // UD / AL / WT\n    if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n        if (type.startsWith(\"AL\")) {\n            // send only, do not override alarm set by decodePosition\n            if (index != null) {\n                sendResponse(channel, id, index, \"AL\");\n            }\n        }\n        return position;\n    }\n\n    // TKQ / TKQ2\n    if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n        if (index != null) {\n            sendResponse(channel, id, index, type);\n        }\n        return null;\n    }\n\n    // PULSE, HEART, BLOOD, BPHRT, btemp2, TEMP\n    if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")\n            || type.equals(\"TEMP\")) {\n\n        if (!buf.isReadable()) {\n            return null;\n        }\n\n        // Handle simple TEMP message\n        if (type.equals(\"TEMP\")) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            String v = buf.toString(StandardCharsets.US_ASCII).trim();\n            if (!v.isEmpty()) {\n                position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(v));\n            }\n            return position;\n        }\n\n        // Other sensor readings\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, new Date());\n        String[] parts = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n        int idx = 0;\n\n        if (type.equalsIgnoreCase(\"btemp2\")) {\n            if (Integer.parseInt(parts[idx++]) > 0) {\n                position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(parts[idx]));\n            }\n        } else {\n            if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                position.set(\"pressureHigh\", parts[idx++]);\n                position.set(\"pressureLow\", parts[idx++]);\n            }\n            if (idx < parts.length) {\n                position.set(Position.KEY_HEART_RATE, Integer.parseInt(parts[idx]));\n            }\n        }\n        return position;\n    }\n\n    // IMG\n    if (type.equals(\"img\")) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        int t = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        buf.readerIndex(t + 12 + 2);\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n        return position;\n    }\n\n    // JXTK (audio chunks)\n    if (type.equals(\"JXTK\")) {\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] parts = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)\n                .toString().split(\",\");\n        int current = Integer.parseInt(parts[2]);\n        int total = Integer.parseInt(parts[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        if (index != null) {\n            sendResponse(channel, id, index, \"JXTKR,1\");\n        }\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n    }\n\n    // TK (final audio)\n    if (type.equals(\"TK\")) {\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}