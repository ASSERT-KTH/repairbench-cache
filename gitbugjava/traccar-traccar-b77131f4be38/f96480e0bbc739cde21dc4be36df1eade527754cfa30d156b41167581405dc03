{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    if (buf.readableBytes() < 4) {\n        return null;  // Ensure enough space for minimal header\n    }\n\n    buf.skipBytes(1); // Skip '['\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // Skip '*'\n\n    int idStart = buf.readerIndex();\n    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (idEnd == -1) return null;\n\n    String id = buf.readSlice(idEnd - idStart).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // Skip '*'\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    int indexStart = buf.readerIndex();\n    int indexEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (indexEnd == -1) return null;\n\n    String index = null;\n    if (indexEnd + 5 < buf.writerIndex() &&\n        buf.getByte(indexEnd + 5) == '*' &&\n        buf.toString(indexEnd + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n\n        int indexLength = indexEnd - indexStart;\n        index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1);  // '*', skip index delimiter\n    } else {\n        // Skip \"length\" fields (4 bytes + '*'), if present\n        if (buf.readableBytes() >= 5) {\n            buf.skipBytes(5); // \"length\" + '*'\n        }\n    }\n\n    buf.writerIndex(buf.writerIndex() - 1); // Remove ']' from the end\n\n    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (contentIndex == -1) {\n        contentIndex = buf.writerIndex();\n    }\n\n    String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n\n    if (contentIndex < buf.writerIndex()) {\n        buf.readerIndex(contentIndex + 1);\n    }\n\n    String[] values = null;\n    if (buf.isReadable()) {\n        values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n    }\n\n    if (type.equals(\"INIT\")) {\n        sendResponse(channel, id, index, \"INIT,1\");\n        return null;\n\n    } else if (type.equals(\"LK\")) {\n        sendResponse(channel, id, index, \"LK\");\n\n        if (values != null && values.length >= 3) {\n            Position position = new Position(\"watch\");  // Safe default protocol name\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n            position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n            return position;\n        }\n        return null;\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n        if (buf.isReadable()) {\n            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n            if (type.startsWith(\"AL\")) {\n                if (position != null) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n                sendResponse(channel, id, index, \"AL\");\n            }\n            return position;\n        }\n        return null;\n\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n        sendResponse(channel, id, index, type);\n        return null;\n\n    } else if (type.equalsIgnoreCase(\"PULSE\") ||\n               type.equalsIgnoreCase(\"HEART\") ||\n               type.equalsIgnoreCase(\"BLOOD\") ||\n               type.equalsIgnoreCase(\"BPHRT\") ||\n               type.equalsIgnoreCase(\"btemp2\")) {\n\n        Position position = new Position(\"watch\");\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, new Date());\n\n        if (values != null && values.length > 0) {\n            int valueIndex = 0;\n\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                if (Integer.parseInt(values[valueIndex++]) > 0) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    position.set(\"pressureHigh\", values[valueIndex++]);\n                    position.set(\"pressureLow\", values[valueIndex++]);\n                }\n                if (valueIndex < values.length) {\n                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                }\n            }\n\n            return position;\n        }\n\n        return null;\n\n    } else if (type.equals(\"img\")) {\n        Position position = new Position(\"watch\");\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (timeIndex == -1) return null;\n        buf.readerIndex(timeIndex + 12 + 2);  // Skip over time info\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n        return position;\n\n    } else if (type.equals(\"JXTK\")) {\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4);\n        if (dataIndex == -1) return null;\n\n        dataIndex = dataIndex + 1; // Consume the comma\n\n        String[] values1 = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n        int current = Integer.parseInt(values1[2]);\n        int total = Integer.parseInt(values1[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(\"watch\");\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    } else if (type.equals(\"TK\")) {\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n        Position position = new Position(\"watch\");\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n        return position;\n\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}