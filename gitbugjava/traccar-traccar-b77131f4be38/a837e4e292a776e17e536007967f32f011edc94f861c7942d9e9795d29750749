{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idDelim = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idDelim - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    boolean hasIndex = false;\n\n    int possibleIndexEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (possibleIndexEnd > 0) {\n        // Read next 5 chars and check if typical index found (delimiter after 4 digits)\n        if (possibleIndexEnd + 5 < buf.writerIndex()\n                && buf.getByte(possibleIndexEnd + 5) == '*'\n                && buf.toString(possibleIndexEnd + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n            hasIndex = true;\n            int indexLen = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();\n            index = buf.readSlice(indexLen).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); // '*' delimiter\n        }\n    }\n\n    buf.skipBytes(4); // length\n    buf.skipBytes(1); // '*' delimiter\n\n    // Ignore last \"]\"\n    if (buf.writerIndex() > 0 && buf.getByte(buf.writerIndex() - 1) == ']') {\n        buf.writerIndex(buf.writerIndex() - 1);\n    }\n\n    int typeEndIdx = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    String type;\n    if (typeEndIdx < 0) {\n        type = buf.readSlice(buf.writerIndex() - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    } else {\n        type = buf.readSlice(typeEndIdx - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n        buf.readerIndex(typeEndIdx + 1);\n    }\n\n    if (type.equals(\"INIT\")) {\n        sendResponse(channel, id, index, \"INIT,1\");\n        return null;\n    } else if (type.equals(\"LK\")) {\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                // Battery typically in third value\n                try {\n                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2].trim()));\n                } catch (NumberFormatException ignore) {}\n                try {\n                    position.set(Position.KEY_STEPS, Integer.parseInt(values[0].trim()));\n                } catch (NumberFormatException ignore) {}\n\n                return position;\n            }\n        }\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n        String content = buf.toString(StandardCharsets.US_ASCII);\n        Position position = decodePosition(deviceSession, content);\n\n        if (type.startsWith(\"AL\")) {\n            if (position != null) {\n                // Alarm type customization, for \"AL\" packet, check for removing alarm\n                // (some implementations may require checking specific value in buffer)\n                // Otherwise, the default is general alarm\n                // Some protocols may encode 'removing' in a particular field, which you might extract from content\n                // Here, we set alarm as removing if \"remov\" appears in content\n                if (content.toLowerCase().contains(\"remov\")) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                } else {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n        return position;\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n        sendResponse(channel, id, index, type);\n        return null;\n    } else if (type.equalsIgnoreCase(\"TEMP\")) {\n        // For packets like [ZJ*5678901234*0001*0009*TEMP,36.5]\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 2) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                try {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[1].trim()));\n                } catch (NumberFormatException ignore) {}\n                return position;\n            }\n        }\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n        if (buf.isReadable()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int valueIndex = 0;\n\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                // Example: btemp2,1,35.29\n                try {\n                    if (Integer.parseInt(values[valueIndex++].trim()) > 0 && valueIndex < values.length) {\n                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex].trim()));\n                    }\n                } catch (NumberFormatException ignore) {}\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    // bphrt,120,79,73,,,,]\n                    if (values.length >= valueIndex + 2) {\n                        position.set(\"pressureHigh\", values[valueIndex++].trim());\n                        position.set(\"pressureLow\", values[valueIndex++].trim());\n                    }\n                }\n                if (values.length > valueIndex) {\n                    try {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex].trim()));\n                    } catch (NumberFormatException ignore) {}\n                }\n            }\n            return position;\n        }\n    } else if (type.equalsIgnoreCase(\"img\")) {\n        // skipping comma\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (timeIndex > 0 && (timeIndex + 12 + 2) < buf.writerIndex()) {\n            buf.readerIndex(timeIndex + 12 + 2);\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n            return position;\n        }\n    } else if (type.equals(\"JXTK\")) {\n        // The fourth comma separates segments\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                        dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)\n                .toString().split(\",\");\n        int current = 0, total = 0;\n        try {\n            current = Integer.parseInt(values[2].trim());\n            total = Integer.parseInt(values[3].trim());\n        } catch (Exception ignore) {}\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n    } else if (type.equals(\"TK\")) {\n        if (buf.readableBytes() <= 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        return position;\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}