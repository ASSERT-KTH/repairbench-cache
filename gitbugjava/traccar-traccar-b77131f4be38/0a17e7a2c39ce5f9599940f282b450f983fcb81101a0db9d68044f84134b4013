{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        if (buf.readByte() != '[') { // Ensure the header is '['\n            return null;\n        }\n\n        String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n        if (buf.readByte() != '*') { // Ensure the delimiter is '*' after manufacturer\n            return null;\n        }\n\n        String id = buf.readSlice(buf.readerIndex(), buf.indexOf(buf.readerIndex(), buf.writerIndex(), '*')).toString(StandardCharsets.US_ASCII);\n        if (buf.readByte() != '*') { // Ensure the delimiter is '*' after id\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        String index = null;\n        int indexIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), '*');\n        if (indexIndex + 5 < buf.writerIndex() && buf.getByte(indexIndex + 5) == '*' &&\n                buf.toString(indexIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n            index = buf.readSlice(buf.readerIndex(), indexIndex).toString(StandardCharsets.US_ASCII);\n            buf.readByte(); // Skip the '*'\n        }\n\n        buf.readByte(); // Skip the header length\n        buf.readByte(); // Skip the '*'\n\n        buf.readerIndex(buf.readerIndex() - 1); // ']' ignore ending\n\n        String type = buf.readSlice(buf.readerIndex(), buf.indexOf(buf.readerIndex(), buf.writerIndex(), ',')).toString(StandardCharsets.US_ASCII);\n\n        if (type.equals(\"INIT\")) {\n            sendResponse(channel, id, index, \"INIT,1\");\n\n        } else if (type.equals(\"LK\")) {\n            sendResponse(channel, id, index, \"LK\");\n\n            if (buf.isReadable()) {\n                String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                if (values.length >= 3) {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n\n                    getLastLocation(position, null);\n\n                    if (values.length >= 3) {\n                        position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                    }\n\n                    if (values.length >= 2) {\n                        position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n                    }\n\n                    return position;\n                }\n            }\n\n        } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n            if (type.startsWith(\"AL\")) {\n                if (position != null) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n                sendResponse(channel, id, index, \"AL\");\n            }\n\n            return position;\n\n        } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n            sendResponse(channel, id, index, type);\n\n        } else if (type.equalsIgnoreCase(\"PULSE\")\n                || type.equalsIgnoreCase(\"HEART\")\n                || type.equalsIgnoreCase(\"BLOOD\")\n                || type.equalsIgnoreCase(\"BPHRT\")\n                || type.equalsIgnoreCase(\"btemp2\")) {\n\n            if (buf.isReadable()) {\n\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, new Date());\n\n                String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                int valueIndex = 0;\n\n                if (type.equalsIgnoreCase(\"bTemp2\")) {\n                    if (Integer.parseInt(values[valueIndex++]) > 0) {\n                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                    }\n                } else {\n                    if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                        position.set(\"pressureHigh\", values[valueIndex++]);\n                        position.set(\"pressureLow\", values[valueIndex++]);\n                    }\n                    if (valueIndex <= values.length - 1) {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                    }\n                }\n\n                return position;\n\n            }\n\n        } else if (type.equals(\"img\")) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, null);\n\n            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), ',');\n            buf.readerIndex(timeIndex);\n            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n            return position;\n\n        } else if (type.equals(\"JXTK\")) {\n            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), ',', 4) + 1;\n            String[] values = buf.readCharSequence(\n                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n            int current = Integer.parseInt(values[2]);\n            int total = Integer.parseInt(values[3]);\n\n            if (audio == null) {\n                audio = Unpooled.buffer();\n            }\n            audio.writeBytes(buf);\n\n            sendResponse(channel, id, index, \"JXTKR,1\");\n\n            if (current < total) {\n                return null;\n            } else {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n                audio.release();\n                audio = null;\n                return position;\n            }\n\n        } else if (type.equals(\"TK\")) {\n            if (buf.readableBytes() == 1) {\n                return null;\n            }\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n            return position;\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}