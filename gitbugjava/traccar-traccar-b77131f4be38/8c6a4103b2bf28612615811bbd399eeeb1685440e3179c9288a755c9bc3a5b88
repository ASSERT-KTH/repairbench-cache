{
    "generation": "@Override\nprotected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n    // Reset index flag for each message\n    hasIndex = false;\n\n    buf.skipBytes(1); // '['\n    manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*'\n\n    // Read device ID\n    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n    buf.skipBytes(1); // '*'\n\n    // Optional index\n    String index = null;\n    int starIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (starIndex >= 0\n            && starIndex + 5 < buf.writerIndex()\n            && buf.getByte(starIndex + 5) == '*'\n            && buf.toString(starIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n        hasIndex = true;\n        int indexLength = starIndex - buf.readerIndex();\n        index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); // '*'\n    }\n\n    // Skip length and delimiter\n    buf.skipBytes(4); // length\n    buf.skipBytes(1); // '*'\n\n    // Drop trailing ']'\n    buf.writerIndex(buf.writerIndex() - 1);\n\n    // Extract message type\n    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (commaIndex < 0) {\n        commaIndex = buf.writerIndex();\n    }\n    String type = buf.readSlice(commaIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    if (commaIndex < buf.writerIndex()) {\n        buf.readerIndex(commaIndex + 1);\n    }\n\n    // Handle INIT\n    if (\"INIT\".equals(type)) {\n        if (channel != null) {\n            sendResponse(channel, id, index, \"INIT,1\");\n        }\n    }\n    // Handle raw temperature\n    else if (\"TEMP\".equalsIgnoreCase(type)) {\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length > 0) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, new Date());\n                position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[0]));\n                return position;\n            }\n        }\n    }\n    // Handle LK (heartbeat)\n    else if (\"LK\".equals(type)) {\n        if (channel != null) {\n            sendResponse(channel, id, index, \"LK\");\n        }\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n                return position;\n            }\n        }\n    }\n    // Handle GPS and alarm messages\n    else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n        if (type.startsWith(\"AL\")) {\n            if (channel != null) {\n                sendResponse(channel, id, index, \"AL\");\n            }\n        }\n        return position;\n    }\n    // Handle TKQ commands\n    else if (\"TKQ\".equals(type) || \"TKQ2\".equals(type)) {\n        if (channel != null) {\n            sendResponse(channel, id, index, type);\n        }\n    }\n    // Handle pulse, heart, blood pressure, secondary temperature\n    else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n        if (buf.isReadable()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, new Date());\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int v = 0;\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                if (Integer.parseInt(values[v++]) > 0 && v < values.length) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[v]));\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    if (v < values.length) {\n                        position.set(\"pressureHigh\", values[v++]);\n                    }\n                    if (v < values.length) {\n                        position.set(\"pressureLow\", values[v++]);\n                    }\n                }\n                if (v <= values.length - 1) {\n                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[v]));\n                }\n            }\n            return position;\n        }\n    }\n    // Handle image\n    else if (\"img\".equals(type)) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        int commaPos = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        buf.readerIndex(commaPos + 12 + 2);\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n        return position;\n    }\n    // Handle JXTK audio fragments\n    else if (\"JXTK\".equals(type)) {\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n        if (channel != null) {\n            sendResponse(channel, id, index, \"JXTKR,1\");\n        }\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n    }\n    // Handle single-part audio\n    else if (\"TK\".equals(type)) {\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}