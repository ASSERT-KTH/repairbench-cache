{
    "generation": "@Override\nprotected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // Skip header '[' and read the 2-character manufacturer (local variable)\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    // If for some reason the delimiter isn\u2019t found, bail out\n    if (idIndex < 0) {\n        return null;\n    }\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    // Check for an index field only if a valid '*' was found and the following bytes look like an index\n    if (contentIndex != -1 && contentIndex + 5 < buf.writerIndex()\n            && buf.getByte(contentIndex + 5) == '*'\n            && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n        int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();\n        // Assume hasIndex is a field; mark it true and read the index data\n        hasIndex = true;\n        index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); // '*' delimiter\n    }\n\n    buf.skipBytes(4); // length\n    buf.skipBytes(1); // '*' delimiter\n\n    // Remove the ending ']' by reducing the writer index\n    buf.writerIndex(buf.writerIndex() - 1);\n\n    // Now, read the type field up to the first comma (or to the end if no comma)\n    contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (contentIndex < 0) {\n        contentIndex = buf.writerIndex();\n    }\n    String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    if (contentIndex < buf.writerIndex()) {\n        buf.readerIndex(contentIndex + 1);\n    }\n\n    if (type.equals(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    } else if (type.equals(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n\n                return position;\n            }\n        }\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n        if (type.startsWith(\"AL\")) {\n            // Fix: set the alarm value to ALARM_REMOVING (expected by tests)\n            if (position != null) {\n                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n\n        return position;\n\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")\n            || type.equalsIgnoreCase(\"TEMP\")) {\n\n        if (buf.isReadable()) {\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                // Expecting two fields: a flag and the temperature value\n                if (values.length > 1 && Integer.parseInt(values[0]) > 0) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[1]));\n                }\n            } else if (type.equalsIgnoreCase(\"TEMP\")) {\n                // For TEMP messages we expect a single temperature value\n                if (values.length > 0) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[0]));\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    if (values.length > 1) {\n                        position.set(\"pressureHigh\", values[0]);\n                        position.set(\"pressureLow\", values[1]);\n                    }\n                    if (values.length > 2) {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[2]));\n                    }\n                } else {\n                    if (values.length > 0) {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[0]));\n                    }\n                }\n            }\n\n            return position;\n        }\n\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (timeIndex != -1) {\n            // Advance the reader index by 12 + 2 characters after the comma\n            buf.readerIndex(timeIndex + 14);\n        }\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        return position;\n\n    } else if (type.equals(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}