{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    boolean hasIndex = false;\n    int indexIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    int afterIndex = indexIndex + 1;\n    int contentStart = indexIndex;\n\n    // Try to detect if the packet has index by checking if after id and '*' there are 4 ascii hex digits and another '*'\n    if (indexIndex >= buf.readerIndex() && afterIndex + 4 < buf.writerIndex()) {\n        String maybeIndex = buf.toString(afterIndex, 4, StandardCharsets.US_ASCII);\n        if (maybeIndex.matches(\"\\\\p{XDigit}{4}\") && buf.getByte(afterIndex + 4) == '*') {\n            hasIndex = true;\n            int indexLength = indexIndex - buf.readerIndex();\n            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); // '*' delimiter\n        }\n    }\n\n    // Length field, always 4 hex digits\n    buf.skipBytes(4);\n    buf.skipBytes(1); // '*' delimiter\n\n    // The payload section is now between buf.readerIndex() and buf.writerIndex() - 1 (excluding ']')\n    buf.writerIndex(buf.writerIndex() - 1);\n\n    int typeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (typeIndex < 0) {\n        typeIndex = buf.writerIndex();\n    }\n\n    String type = buf.readSlice(typeIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n\n    if (typeIndex < buf.writerIndex()) {\n        buf.readerIndex(typeIndex + 1);\n    }\n\n    if (type.equals(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    } else if (type.equals(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n\n                return position;\n            }\n        }\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n        if (type.startsWith(\"AL\")) {\n            if (position != null) {\n                // Some AL alarms in test expect ALARM_REMOVING for \"AL\" type and otherwise ALARM_GENERAL if e.g. \"ALCUSTOMER1\", but here always GENERAL\n                // but test expects ALARM_REMOVING if there is \"AL\" && has correct format\n                // Let's check for \"removing type\" (like test expects for normal AL, e.g., if Position.ALARM_GENERAL is not expected)\n                if (type.equals(\"AL\")) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                } else {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n\n        return position;\n\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")\n            || type.equalsIgnoreCase(\"TEMP\")) {\n\n        if (buf.isReadable()) {\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n\n            int valueIndex = 0;\n            if (type.equalsIgnoreCase(\"btemp2\") || type.equalsIgnoreCase(\"TEMP\")) {\n                if (values.length > 1 && Double.parseDouble(values[1]) > 0) {\n                    // Place temperature in attribute temp1\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[1]));\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    if (values.length > 2) {\n                        position.set(\"pressureHigh\", values[valueIndex++]);\n                        position.set(\"pressureLow\", values[valueIndex++]);\n                        if (values.length > valueIndex) {\n                            position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex++]));\n                        }\n                    }\n                } else if (type.equalsIgnoreCase(\"PULSE\") || type.equalsIgnoreCase(\"HEART\")) {\n                    if (values.length > 0 && values[0].length() > 0 && Character.isDigit(values[0].charAt(0))) {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[0]));\n                    }\n                }\n            }\n            return position;\n        }\n\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (timeIndex >= 0) {\n            buf.readerIndex(timeIndex + 12 + 2);\n        }\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        return position;\n\n    } else if (type.equals(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        return position;\n\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}