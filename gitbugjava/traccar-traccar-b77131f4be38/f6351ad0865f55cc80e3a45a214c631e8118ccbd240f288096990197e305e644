{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // Header: [ + manufacturer\n    buf.skipBytes(1); // '[' header\n    manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    // Device ID\n    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n    buf.skipBytes(1); // '*' delimiter\n\n    // Optional sequence index\n    String index = null;\n    int nextStar = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (nextStar + 5 < buf.writerIndex()\n            && buf.getByte(nextStar + 5) == '*'\n            && buf.toString(nextStar + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n        int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*')\n                - buf.readerIndex();\n        hasIndex = true;\n        index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); // '*' delimiter\n    }\n\n    // Message length\n    buf.skipBytes(4); // length\n    buf.skipBytes(1); // '*' delimiter\n\n    // Trim trailing ']'\n    buf.writerIndex(buf.writerIndex() - 1);\n\n    // Message type\n    int comma = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (comma < 0) {\n        comma = buf.writerIndex();\n    }\n    String type = buf.readSlice(comma - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    if (comma < buf.writerIndex()) {\n        buf.readerIndex(comma + 1);\n    }\n\n    // INIT\n    if (type.equals(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    // Heartbeat / step report\n    } else if (type.equals(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n                return position;\n            }\n        }\n\n    // Location / Alarm / Wi-Fi scan\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n        if (type.startsWith(\"AL\")) {\n            // send acknowledgment for alarm\n            sendResponse(channel, id, index, \"AL\");\n        }\n\n        return position;\n\n    // Audio control queries\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    // Temperature only\n    } else if (type.equalsIgnoreCase(\"TEMP\")) {\n\n        if (buf.isReadable()) {\n            String value = buf.toString(StandardCharsets.US_ASCII).trim();\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(value));\n            return position;\n        }\n\n    // Pulse / Heart / Blood pressure / BPHRT / btemp2\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n\n        if (buf.isReadable()) {\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int vi = 0;\n\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                if (Integer.parseInt(values[vi++]) > 0 && vi < values.length) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[vi]));\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    if (vi < values.length) {\n                        position.set(\"pressureHigh\", values[vi++]);\n                    }\n                    if (vi < values.length) {\n                        position.set(\"pressureLow\", values[vi++]);\n                    }\n                }\n                if (vi < values.length) {\n                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[vi]));\n                }\n            }\n\n            return position;\n        }\n\n    // Image\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        buf.readerIndex(timeIndex + 14);\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        return position;\n\n    // Chunked audio JXTK\n    } else if (type.equals(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] parts = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n        int current = Integer.parseInt(parts[2]);\n        int total = Integer.parseInt(parts[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    // Single audio TK\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}