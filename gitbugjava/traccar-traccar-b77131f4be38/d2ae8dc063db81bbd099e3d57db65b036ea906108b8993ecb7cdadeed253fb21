{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    boolean hasIndex = false;\n    int nextAsterisk = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (nextAsterisk != -1 && nextAsterisk + 5 < buf.writerIndex()) {\n        String possibleLen = buf.toString(nextAsterisk + 1, 4, StandardCharsets.US_ASCII);\n        if (buf.getByte(nextAsterisk + 5) == '*' && possibleLen.matches(\"\\\\p{XDigit}+\")) {\n            int indexLength = nextAsterisk - buf.readerIndex();\n            hasIndex = true;\n            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); // '*' delimiter\n            nextAsterisk = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n        }\n    }\n\n    // Skip length and delimiter\n    buf.skipBytes(4); // length\n    buf.skipBytes(1); // '*' delimiter\n\n    // Remove trailing ']' (writerIndex points after ']', so we can just set it back)\n    if (buf.writerIndex() > buf.readerIndex() && buf.getByte(buf.writerIndex() - 1) == ']') {\n        buf.writerIndex(buf.writerIndex() - 1);\n    }\n\n    // Extract type\n    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    int typeEnd = commaIndex != -1 ? commaIndex : buf.writerIndex();\n    String type = buf.readSlice(typeEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n\n    // Advance readerIndex to consume comma if there is one\n    if (commaIndex != -1 && commaIndex < buf.writerIndex()) {\n        buf.readerIndex(commaIndex + 1);\n    }\n\n    // ============ PROTOCOL HANDLERS ============\n\n    if (type.equalsIgnoreCase(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    } else if (type.equalsIgnoreCase(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n\n                return position;\n            }\n        }\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n\n        String bufString = buf.toString(StandardCharsets.US_ASCII);\n        Position position = decodePosition(deviceSession, bufString);\n\n        if (type.startsWith(\"AL\")) {\n            if (position != null) {\n                // Some alarm types can be derived by analysis\n                if (bufString.contains(\",00100000,\")) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                } else {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n\n        return position;\n\n    } else if (type.equalsIgnoreCase(\"TKQ\") || type.equalsIgnoreCase(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")\n            || type.equalsIgnoreCase(\"TEMP\")) {\n\n        if (buf.isReadable()) {\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, new Date());\n\n            int valueIndex = 0;\n\n            if (type.equalsIgnoreCase(\"btemp2\") || type.equalsIgnoreCase(\"TEMP\")) {\n                // [3G*2104326058*000E*btemp2,1,35.29]\n                // [ZJ*5678901234*0001*0009*TEMP,36.5]\n                if (type.equalsIgnoreCase(\"btemp2\")) {\n                    // [btemp2,1,35.29]\n                    if (values.length >= 3 && Integer.parseInt(values[valueIndex++]) > 0) {\n                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                    }\n                } else if (type.equalsIgnoreCase(\"TEMP\")) {\n                    // [TEMP,36.5]\n                    if (values.length >= 1) {\n                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[0]));\n                    }\n                }\n            } else if (type.equalsIgnoreCase(\"HEART\") || type.equalsIgnoreCase(\"PULSE\")) {\n                // [PULSE,72] or [heart,71]\n                if (values.length >= 1 && !values[0].isEmpty()) {\n                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[0]));\n                }\n            } else if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                // [bphrt,120,79,73,,,,] or [BLOOD,109,68]\n                if (values.length >= 2) {\n                    position.set(\"pressureHigh\", values[valueIndex++]);\n                    position.set(\"pressureLow\", values[valueIndex++]);\n                }\n                if (values.length > valueIndex && !values[valueIndex].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n            return position;\n        }\n\n    } else if (type.equalsIgnoreCase(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        // This logic is not robust; adapt as appropriate for your protocol\n        buf.readerIndex(timeIndex + 12 + 2); // jump over time and sequence(?)\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        return position;\n\n    } else if (type.equalsIgnoreCase(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    } else if (type.equalsIgnoreCase(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}