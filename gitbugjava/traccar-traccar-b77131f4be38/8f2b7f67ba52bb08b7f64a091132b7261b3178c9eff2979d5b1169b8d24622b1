{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    String id = buf.readSlice(idEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    // Check for index (optional field, e.g., \"[ZJ*id*index*len*...\")\n    String index = null;\n    boolean hasIndex = false;\n    int contentStartIndex = buf.readerIndex();\n    int delimiterIdx = buf.indexOf(contentStartIndex, buf.writerIndex(), (byte) '*');\n    boolean parsedIndex = false;\n    // We need to check if after delimiterIdx we have 5 chars and then another '*'\n    if (delimiterIdx != -1 && delimiterIdx + 5 < buf.writerIndex() && buf.getByte(delimiterIdx + 5) == '*') {\n        // Is what between delimiterIdx+1 and delimiterIdx+4 hexadecimal?\n        String indexCandidate = buf.toString(delimiterIdx + 1, 4, StandardCharsets.US_ASCII);\n        if (indexCandidate.matches(\"\\\\p{XDigit}+\")) {\n            hasIndex = true;\n            int indexLength = delimiterIdx - buf.readerIndex();\n            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); // '*' delimiter\n            parsedIndex = true;\n        }\n    }\n    if (!parsedIndex && (delimiterIdx != -1)) {\n        // Some protocols use index but don't encode it in 4 hexadecimal digits, \n        // for robustness, use the field length if len below 10 chars\n        int indexLength = delimiterIdx - buf.readerIndex();\n        if (indexLength > 0 && indexLength <= 10) {\n            String idxStr = buf.toString(buf.readerIndex(), indexLength, StandardCharsets.US_ASCII);\n            if (idxStr.matches(\"^[0-9a-zA-Z]+$\")) {\n                index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n                buf.skipBytes(1); // '*' delimiter\n            }\n        }\n    }\n\n    // Skip length field: can be 4 chars (e.g. \"004E\" or \"00E9\"), get to next star\n    int nextStarIdx = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (nextStarIdx != -1) {\n        buf.readerIndex(nextStarIdx + 1);\n    }\n\n    // Search for the closing ']'\n    // Because writerIndex() might still include the closing ']'\n    int endBracket = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ']');\n    if (endBracket != -1) {\n        buf.writerIndex(endBracket);\n    }\n\n    // Next field is the type field, read up to ',' or up to end\n    int typeEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    String type;\n    if (typeEnd == -1) {\n        // No ',' found, everything until the end is the type\n        type = buf.readSlice(buf.readableBytes()).toString(StandardCharsets.US_ASCII).trim();\n    } else {\n        type = buf.readSlice(typeEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII).trim();\n        // skip comma\n        if (buf.readerIndex() < buf.writerIndex()) {\n            buf.readerIndex(buf.readerIndex() + 1);\n        }\n    }\n\n    // Handle possible special field transform (UD2, UD3, UD_LTE, UD_WCDMA, etc.)\n    String typeUpper = type.toUpperCase();\n    // Remove suffixes for UD, AL, WT\n    if (typeUpper.startsWith(\"UD\") || typeUpper.startsWith(\"AL\") || typeUpper.startsWith(\"WT\")) {\n        if (!(typeUpper.equals(\"UD\") || typeUpper.equals(\"AL\") || typeUpper.equals(\"WT\"))) {\n            // e.g. \"UD2\", \"UD3\", \"UD_LTE\"\n            if (typeUpper.startsWith(\"UD\")) {\n                type = \"UD\";\n            } else if (typeUpper.startsWith(\"AL\")) {\n                type = \"AL\";\n            } else if (typeUpper.startsWith(\"WT\")) {\n                type = \"WT\";\n            }\n        }\n    }\n\n    if (type.equals(\"INIT\")) {\n        sendResponse(channel, id, index, \"INIT,1\");\n        return null;\n    } else if (type.equals(\"LK\")) {\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                try {\n                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2].trim()));\n                } catch (NumberFormatException ignore) {}\n                try {\n                    position.set(Position.KEY_STEPS, Integer.parseInt(values[0].trim()));\n                } catch (NumberFormatException ignore) {}\n                return position;\n            }\n        }\n        return null;\n\n    } else if (type.equals(\"TEMP\")) {\n        // Temperature: \"[ZJ*5678901234*0001*0009*TEMP,36.5]\"\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 2) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                try {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[1].trim()));\n                } catch (NumberFormatException ignore) {}\n                return position;\n            }\n        }\n        return null;\n\n    } else if (type.equalsIgnoreCase(\"btemp2\")) {\n        // \"[3G*2104326058*000E*btemp2,1,35.29]\"\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3 && Integer.parseInt(values[1].trim()) > 0) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                try {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[2].trim()));\n                } catch (NumberFormatException ignore) {}\n                return position;\n            }\n        }\n        return null;\n\n    } else if (\n            type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")) {\n\n        if (buf.isReadable()) {\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int valueIndex = 0;\n\n            if (type.equalsIgnoreCase(\"bphrt\") || type.equalsIgnoreCase(\"blood\")) {\n                if (values.length > valueIndex) position.set(\"pressureHigh\", values[valueIndex++]);\n                if (values.length > valueIndex) position.set(\"pressureLow\", values[valueIndex++]);\n            }\n            if (type.equalsIgnoreCase(\"PULSE\") || type.equalsIgnoreCase(\"heart\")) {\n                if (values.length > valueIndex) {\n                    try {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex].trim()));\n                    } catch (NumberFormatException ignore) {}\n                }\n            } else {\n                if (values.length > valueIndex) {\n                    try {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex].trim()));\n                    } catch (NumberFormatException ignore) {}\n                }\n            }\n            return position;\n        }\n        return null;\n\n    } else if (type.equals(\"AL\")) {\n        // \"[ZJ*689466020014198*0003*0113*AL,221121,085515,V,00.000000,N,...\"\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n        if (position != null) {\n            // See org.traccar.protocol.WatchProtocolDecoderTest, some alarm removal (possible based on content string),\n            // Set alarm present for all AL types\n            position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n            // Some models set ALARM_REMOVING for removal of device\n            if (buf.toString(StandardCharsets.US_ASCII).contains(\",00100000,1,255,\")) {\n                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n            }\n        }\n        sendResponse(channel, id, index, \"AL\");\n        return position;\n\n    } else if (type.equals(\"UD\") || type.equals(\"WT\")) {\n        // These are position records\n        return decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n        sendResponse(channel, id, index, type);\n        return null;\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        buf.readerIndex(timeIndex + 12 + 2);\n        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n        return position;\n\n    } else if (type.equals(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        String[] values = buf.readCharSequence(\n                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n        int current = Integer.parseInt(values[2]);\n        int total = Integer.parseInt(values[3]);\n\n        if (audio == null) {\n            audio = Unpooled.buffer();\n        }\n        audio.writeBytes(buf);\n\n        sendResponse(channel, id, index, \"JXTKR,1\");\n\n        if (current < total) {\n            return null;\n        } else {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n            audio.release();\n            audio = null;\n            return position;\n        }\n\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        return position;\n\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}