{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // '[' header\n    buf.skipBytes(1);\n\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (idIndex < 0) {\n        return null;\n    }\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    boolean hasIndex = false;\n\n    // Peek ahead for optional index field\n    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (contentIndex != -1 && contentIndex + 5 < buf.writerIndex()) {\n        if (buf.getByte(contentIndex + 5) == '*'\n                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();\n            hasIndex = true;\n            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); // '*' delimiter\n            // skip length, delimiter\n            buf.skipBytes(4); // length\n            buf.skipBytes(1); // '*' delimiter\n        } else {\n            // The next 4 bytes might be length, then delimiter, then type follows.\n            int lengthLen = 4;\n            if (buf.readableBytes() > lengthLen + 1) {\n                buf.skipBytes(lengthLen); // length\n                buf.skipBytes(1); // '*' delimiter\n            }\n        }\n    } else {\n        int lengthLen = 4;\n        if (buf.readableBytes() > lengthLen + 1) {\n            buf.skipBytes(lengthLen); // length\n            buf.skipBytes(1); // '*' delimiter\n        }\n    }\n    \n    // The last character is ']', ignore ending\n    if (buf.writerIndex() > buf.readerIndex() && buf.getByte(buf.writerIndex() - 1) == ']') {\n        buf.writerIndex(buf.writerIndex() - 1);\n    }\n\n    // Find the first comma for the type\n    int typeEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    String type;\n    if (typeEnd < 0) {\n        type = buf.readSlice(buf.writerIndex() - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    } else {\n        type = buf.readSlice(typeEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n        // Move readerIndex after comma\n        if (buf.readerIndex() < buf.writerIndex()) {\n            buf.readerIndex(buf.readerIndex() + 1);\n        }\n    }\n\n    if (type.equals(\"INIT\")) {\n\n        sendResponse(channel, id, index, \"INIT,1\");\n\n    } else if (type.equals(\"LK\")) {\n\n        sendResponse(channel, id, index, \"LK\");\n\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 3) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(position, null);\n\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n\n                return position;\n            }\n        }\n\n    } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n\n        Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n        if (type.startsWith(\"AL\")) {\n            if (position != null) {\n                // Some alarms have specific types\n                if (position.getAttributes().containsKey(Position.KEY_ALARM)) {\n                    // already set\n                } else if (buf.toString(StandardCharsets.US_ASCII).contains(\",221121,\")) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                } else {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n            }\n            sendResponse(channel, id, index, \"AL\");\n        }\n\n        return position;\n\n    } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n\n        sendResponse(channel, id, index, type);\n\n    } else if (type.equalsIgnoreCase(\"TEMP\")) {\n\n        // Example: \"[ZJ*5678901234*0001*0009*TEMP,36.5]\"\n        if (buf.isReadable()) {\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            if (values.length >= 2) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                double temp = Double.parseDouble(values[1]);\n                position.set(Position.PREFIX_TEMP + 1, temp);\n                return position;\n            }\n        }\n\n    } else if (type.equalsIgnoreCase(\"PULSE\")\n            || type.equalsIgnoreCase(\"HEART\")\n            || type.equalsIgnoreCase(\"BLOOD\")\n            || type.equalsIgnoreCase(\"BPHRT\")\n            || type.equalsIgnoreCase(\"btemp2\")) {\n\n        if (buf.isReadable()) {\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, new Date());\n\n            String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n            int valueIndex = 0;\n\n            if (type.equalsIgnoreCase(\"btemp2\")) {\n                if (values.length > 1 && Integer.parseInt(values[valueIndex++].trim()) > 0) {\n                    if (values.length > valueIndex) {\n                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex].trim()));\n                    }\n                }\n            } else {\n                if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                    if (values.length > valueIndex)\n                        position.set(\"pressureHigh\", values[valueIndex++].trim());\n                    if (values.length > valueIndex)\n                        position.set(\"pressureLow\", values[valueIndex++].trim());\n                }\n                if (values.length > valueIndex && !values[valueIndex].trim().isEmpty()) {\n                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex].trim()));\n                }\n            }\n\n            return position;\n\n        }\n\n    } else if (type.equals(\"img\")) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (timeIndex >= 0 && buf.readableBytes() > (timeIndex - buf.readerIndex()) + 12 + 2) {\n            buf.readerIndex(timeIndex + 12 + 2);\n            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n        } else {\n            // cannot find or not enough data, skip\n        }\n\n        return position;\n\n    } else if (type.equals(\"JXTK\")) {\n\n        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n        if (dataIndex > 0) {\n            String[] values = buf.readCharSequence(\n                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n\n            int current = Integer.parseInt(values[2]);\n            int total = Integer.parseInt(values[3]);\n\n            if (audio == null) {\n                audio = Unpooled.buffer();\n            }\n            audio.writeBytes(buf);\n\n            sendResponse(channel, id, index, \"JXTKR,1\");\n\n            if (current < total) {\n                return null;\n            } else {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n                audio.release();\n                audio = null;\n                return position;\n            }\n        }\n\n    } else if (type.equals(\"TK\")) {\n\n        if (buf.readableBytes() == 1) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        getLastLocation(position, null);\n\n        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n        return position;\n\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}