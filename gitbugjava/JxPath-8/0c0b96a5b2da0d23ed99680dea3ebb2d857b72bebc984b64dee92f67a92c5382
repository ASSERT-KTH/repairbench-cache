{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            // Delegate comparison to node sets\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            // Delegate comparison to node set and atomic value\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            // Delegate comparison to node set and atomic value\n            return containsMatch((Iterator) right, left);\n        }\n\n        // Convert objects to numeric values for comparison\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        // According to XPath 1.0 spec section 3.4:\n        // When comparing numbers using <, >, <=, >=, if either number is NaN,\n        // the result is false.\n        if (Double.isNaN(ld) || Double.isNaN(rd)) {\n            // This method is used for <, >, <=, >= comparisons.\n            // Equality (=, !=) is handled elsewhere (CoreOperationEqual).\n            return false;\n        }\n\n        // Perform standard numeric comparison\n        int compare = ld == rd ? 0 : ld < rd ? -1 : 1;\n        // Note: Double.compare(ld, rd) behaves differently for NaN,\n        // treating NaN as equal to itself and greater than other numbers,\n        // which is not the desired XPath behavior for relational operators.\n\n        // Delegate the final boolean result calculation based on the specific\n        // relational operator (<, >, <=, >=) being evaluated.\n        return evaluateCompare(compare);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}