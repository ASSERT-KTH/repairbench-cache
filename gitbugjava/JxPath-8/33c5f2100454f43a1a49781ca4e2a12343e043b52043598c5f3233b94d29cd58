{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            return containsMatch((Iterator) right, left);\n        }\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        // XPath 1.0 spec Section 3.4: \"The <, <=, >, and >= operators work as follows:\n        // ... If either object to be compared is NaN, then the comparison will be false.\"\n        // Equality operators (=, !=) are handled differently (often in CoreOperationEqual).\n        // Assuming this compute method is for relational expressions (<, <=, >, >=).\n        if (Double.isNaN(ld) || Double.isNaN(rd)) {\n            // For relational comparisons, any NaN results in false.\n            // Note: This logic assumes the concrete class calling this method\n            // is indeed a relational operator. Equality operators might need\n            // different NaN handling depending on specific requirements (e.g., IEEE 754 vs XPath).\n            // However, the failing test ($nan > $nan) indicates a relational operator context.\n             return false;\n        }\n\n        // Use Double.compare for standard non-NaN comparison, which produces -1, 0, or 1.\n        int comparison = Double.compare(ld, rd);\n        return evaluateCompare(comparison);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}