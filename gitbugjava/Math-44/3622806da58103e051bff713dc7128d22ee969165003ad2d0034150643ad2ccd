{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n            resetOccurred = false;\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // trigger the event\n                interpolator.setInterpolatedTime(eventT);\n                // get state BEFORE event handler is triggered\n                final double[] eventY = interpolator.getInterpolatedState();\n                currentEvent.stepAccepted(eventT, eventY);\n                isLastStep = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (isLastStep) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    return eventT;\n                }\n\n                // Check if the handler requested a state reset.\n                // The call to reset() below internally calls handler.eventOccurred()\n                // and potentially triggers the problematic reinitializeBegin().\n                // It returns true if eventOccurred returned RESET_STATE or RESET_DERIVATIVES.\n                if (currentEvent.reset(eventT, eventY)) {\n                    // An event requested a state reset or derivative recomputation.\n\n                    // Check if state reset is needed (as opposed to just derivative reset)\n                    // This requires assuming EventState provides a way to check the specific action,\n                    // or that reset() only returns true for RESET_STATE based on common usage,\n                    // or (most likely based on standard API) that we must call the handler's resetState method.\n                    // Let's assume the standard API: eventOccurred signals intent, resetState provides the new state.\n                    // We need access to the handler. Assuming EventState provides getHandler().\n                    final EventHandler handler = currentEvent.getHandler(); // Assumed method\n                    // Check the action recommended by the handler *after* eventOccurred was called inside reset()\n                    // Need a way to get this action from EventState, e.g., currentEvent.getAction()\n                    // If the action was RESET_STATE:\n                    // final int action = currentEvent.getAction(); // Assumed method\n                    // if (action == EventHandler.RESET_STATE) { // Check if state reset was specifically requested\n\n                    // Simplification: Assume if reset() returns true, we need to update state potentially.\n                    // The most robust way according to EventHandler interface is to call resetState.\n                    final double[] newState = handler.resetState(eventT, eventY); // Get the potentially new state\n                    System.arraycopy(newState, 0, y, 0, y.length); // Update main state vector\n\n                    // Recompute derivatives with the NEW state\n                    computeDerivatives(eventT, y, yDot);\n                    resetOccurred = true; // Signal the integrator to restart the step\n\n                    // NOTE: This fixes the state update logic in acceptStep.\n                    // However, the test failure is likely caused by the incorrect\n                    // re-initialization (setting t0) inside EventState.reset/reinitializeBegin,\n                    // which is called *before* this block. That bug requires modifying EventState.\n                    return eventT;\n                }\n\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT);\n\n                // check if the same event occurs again in the remaining part of the step\n                if (currentEvent.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(currentEvent);\n                }\n\n            }\n\n            // last part of the step, after the last event. Ensure interpolator covers full remaining range.\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(currentT);\n            interpolator.setInterpolatedTime(currentT);\n\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n            // handle the remaining part of the step, after all events if any\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            return currentT;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}