{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n            resetOccurred = false;\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // trigger the event\n                interpolator.setInterpolatedTime(eventT);\n                // get state at event time\n                final double[] eventY = interpolator.getInterpolatedState();\n\n                // update the state vector Y (expected by event handlers potentially)\n                // BEFORE the event is triggered, simply because the T value matches\n                // This is needed for MATH-695 behavior only? Consider if needed otherwise.\n                // Maybe not needed: event handlers should use the state provided, not rely on y\n                // Let's remove this System.arraycopy for now, as it deviates from original logic\n                // System.arraycopy(eventY, 0, y, 0, y.length);\n\n                // advance all event states to current time; update their internal state\n                // including g0Positive indicator used by evaluateStep below\n                currentEvent.stepAccepted(eventT, eventY);\n                isLastStep = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (isLastStep) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length); // Ensure state y reflects event time\n                    return eventT;\n                }\n\n                // Check if the event requests state reset\n                // Note: eventOccurred is called internally by reset() and might modify eventY if it's not a copy.\n                // We assume getInterpolatedState returns a *copy* for safety,\n                // so eventOccurred modifies the copy eventY.\n                if (currentEvent.reset(eventT, eventY)) {\n                    // some event handler has triggered changes that\n                    // invalidate the derivatives, we need to recompute them\n                    System.arraycopy(eventY, 0, y, 0, y.length); // Copy the modified state into the main state array y\n                    computeDerivatives(eventT, y, yDot); // Compute derivatives for the new state y at eventT\n                    resetOccurred = true;\n                    // Update the event state internal indicators AFTER the reset action.\n                    // This ensures that g0Positive is consistent with the *reset* state y\n                    // for the next step evaluation.\n                    currentEvent.stepAccepted(eventT, y);\n                    return eventT; // Return immediately, step ends here\n                }\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT);\n\n                // check if the same event occurs again in the remaining part of the step\n                // This evaluation needs to use the current state at previousT=eventT,\n                // but evaluateStep uses the interpolator which might have older state info.\n                // However, stepAccepted was just called for currentEvent, updating its g0Positive\n                // based on eventY at eventT (before potential reset), which might be sufficient.\n                if (currentEvent.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(currentEvent);\n                }\n\n            }\n\n            // The step has been accepted, handle the last part of it\n            interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            // Update state y to reflect the end of the step\n            System.arraycopy(currentY, 0, y, 0, y.length);\n\n            // Advance all event states to the end of the step\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop(); // Check for stops requested at step end\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n            // handle the full step, or the remaining part after the last event\n            // Note: step handlers might have been called for sub-intervals ending at event times\n            // This call handles the full step [original_previousT, currentT] or the last\n            // remaining sub-interval [last_eventT, currentT]. The interpolator's state reflects currentT.\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            return currentT;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}