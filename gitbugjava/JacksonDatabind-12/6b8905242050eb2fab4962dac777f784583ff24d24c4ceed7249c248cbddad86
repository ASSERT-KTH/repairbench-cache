{
    "generation": "    /**\n     * Turns out that these are expensive enough to create so that caching\n     * does make sense.\n     *<p>\n     * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is\n     * a value type deserializer; this caused an issue with 2.4.4 of\n     * JAXB Annotations (failing a test).\n     * It is also possible that some other settings could make deserializers\n     * un-cacheable; but on the other hand, caching can make a big positive\n     * difference with performance... so it's a hard choice.\n     * \n     * @since 2.4.4\n     */\n    @Override\n    public boolean isCachable() {\n        /* As per [databind#735], existence of value or key deserializer (only passed\n         * if annotated to use non-standard one) should also prevent caching.\n         */\n        // NOTE: Needs to be `&&`... Rationale is that if value OR key deserializer\n        // is defined, it's definition for a Bean, not property, so it is\n        // contextual. Why ignorable properties? Those are also contextual.\n        // 21-Mar-2017, tatu: Ok, perhaps `_ignorableProperties` isn't that contextual...\n        //    Need to re-evaluate. For now, keep it.\n        \n        // Fix: Added check for _keyDeserializer as per comment for #735.\n        // Although the specific failing test uses a content deserializer, the comment\n        // explicitly links #735 to key deserializers potentially preventing caching.\n        // Not checking for _keyDeserializer was likely an omission in the original fix.\n        return (_valueTypeDeserializer == null)\n                && (_keyDeserializer == null) \n                && (_ignorableProperties == null);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}