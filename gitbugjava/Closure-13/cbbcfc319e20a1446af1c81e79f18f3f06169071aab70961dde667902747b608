{
    "generation": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    // First, traverse the children.\n    // We must store the next child before traversing the current child because\n    // the traversal of the child may splice it out of the tree.\n    for (Node c = node.getFirstChild(); c != null; ) {\n      Node next = c.getNext();\n      traverse(c);\n      c = next;\n    }\n\n    // Now, visit the node itself. This may modify the node and necessitate\n    // revisiting the node, but we should not retraverse the children here\n    // unless the visitor requests it explicitly (which this structure doesn't support).\n    int visits = 0;\n    boolean shouldTraverseAgain;\n    do {\n      visit(node);\n      visits++;\n      // Check for infinite loops. This is essential because `shouldRetraverse`\n      // depends on modifications made by `visit`. If `visit` keeps making\n      // modifications that trigger `shouldRetraverse` without converging,\n      // we'll loop indefinitely.\n      Preconditions.checkState(visits < 10000, \"Node has been visited too many times: %s\", node);\n\n      // Check if we should retraverse the node. This is based on whether the node\n      // was changed during the visit.\n      shouldTraverseAgain = shouldRetraverse(node);\n    } while (shouldTraverseAgain); // Re-visit the node if it has changed.\n\n    exitNode(node);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}