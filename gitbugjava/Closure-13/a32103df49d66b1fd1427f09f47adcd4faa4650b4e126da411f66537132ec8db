{
    "generation": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      // Record the starting state of the node's children.\n      // The loop below needs to be robust against modifications\n      // to the child list structure during traversal.\n      Node c = node.getFirstChild();\n      while(c != null) {\n        // Store the node we're about to traverse.\n        Node nodeToTraverse = c;\n        // Get the sibling *before* traversing the node, as the traversal\n        // might remove or replace nodeToTraverse.\n        Node next = c.getNext();\n\n        // Traverse the child recursively.\n        traverse(nodeToTraverse);\n\n        // After traversing 'nodeToTraverse', the structure might have changed.\n        // We need to determine the next node to process.\n        // If 'nodeToTraverse' is still a child of 'node', the next node\n        // should be its *current* next sibling. This handles insertions correctly.\n        // If 'nodeToTraverse' was removed, we should continue with the\n        // previously fetched 'next' sibling.\n        if (nodeToTraverse.getParent() == node) {\n          // Node is still attached, continue from its current next sibling.\n          c = nodeToTraverse.getNext();\n        } else {\n          // Node was detached, continue from the sibling that was originally next.\n          c = next;\n        }\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}