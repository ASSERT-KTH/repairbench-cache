{
    "generation": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      // NOTE: This child traversal loop is O(N^2) in the number of children\n      // N. This occurs because shouldRetraverse may be true multiple times.\n      // We can improve this, if it proves to be an issue.\n\n      // Record the node's children before traversing. If the node is modified\n      // during traversal, we may need to restart the traversal.\n      Node c = node.getFirstChild();\n      while(c != null) {\n        // Save the next sibling before potentially modifying c, because the\n        // modification may detach c from the AST.\n        Node next = c.getNext();\n        traverse(c);\n        // If the node c was removed, then its next sibling is still valid.\n        // If the node c was replaced, then its next sibling is still valid.\n        // If the node c was moved, then this traversal might be incorrect.\n        // TODO(johnlenz): Determine if this needs to be changed. Retraversal\n        // may be needed.\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}