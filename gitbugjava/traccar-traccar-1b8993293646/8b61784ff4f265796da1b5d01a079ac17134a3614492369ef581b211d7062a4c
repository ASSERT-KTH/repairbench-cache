{
    "generation": "private Object decodeLocationNew(\n        Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String index = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));\n\n    position.setDeviceTime(parser.nextDateTime());\n\n    Network network = new Network();\n    network.addCellTower(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n\n    position.set(Position.KEY_BATTERY, parser.nextDouble());\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    if (parser.hasNext(5)) {\n\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n\n    } else {\n\n        String networks = parser.next();\n        String[] tokens = networks.split(\",\");\n        if (tokens.length > 0) {\n            String[] parts = tokens[0].split(\"\\\\|\");\n            if (parts.length > 3) {\n                CellTower cellTower = CellTower.from(\n                        Integer.parseInt(parts[0]),\n                        Integer.parseInt(parts[1]),\n                        Integer.parseInt(parts[2], 16),\n                        Integer.parseInt(parts[3], 16));\n                network.addCellTower(cellTower);\n            }\n        }\n        // Process WiFi access points if there are more tokens\n        for (int i = 1; i < tokens.length; i++) {\n            String[] wifiParts = tokens[i].split(\":\");\n            if (wifiParts.length == 2) {\n                String mac = wifiParts[0].replaceAll(\"(..)\", \"$1:\").replaceAll(\":$\", \"\");\n                network.addWifiAccessPoint(WifiAccessPoint.from(\n                        mac, Integer.parseInt(wifiParts[1])));\n            }\n        }\n\n    }\n\n    position.setNetwork(network);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + dateFormat.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}