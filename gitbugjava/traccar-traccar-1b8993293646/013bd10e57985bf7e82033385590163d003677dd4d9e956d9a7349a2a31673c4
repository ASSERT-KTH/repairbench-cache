{
    "generation": "private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    // first two groups: unique device id and index\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String index = parser.next();\n\n    // The next group is the event/alarm field which (for this protocol)\n    // is reported as something like \"A03\". The parser\u2019s nextInt() call here\n    // converts it (for example, by ignoring the letter) and decodeAlarm() then\n    // maps the numerical value.\n    int alarmCode = parser.nextInt();\n    Object alarm = decodeAlarm(alarmCode);\n\n    // The next field is an optional driver unique id.\n    // In many messages this field is present (even if empty),\n    // so we simply skip it.\n    parser.next();\n\n    // Now the device time is parsed.\n    Date deviceTime = parser.nextDateTime();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_ALARM, alarm);\n    position.setDeviceTime(deviceTime);\n\n    Network network = new Network();\n\n    // After the device time, some messages include cell tower info.\n    // If the next token contains a pipe, we assume it holds cell tower data.\n    String cellTowerToken = parser.next();\n    if (cellTowerToken.contains(\"|\")) {\n        String[] tower = cellTowerToken.split(\"\\\\|\");\n        network.addCellTower(CellTower.from(\n                Integer.parseInt(tower[0]),\n                Integer.parseInt(tower[1]),\n                Integer.parseInt(tower[2], 16),\n                Integer.parseInt(tower[3], 16)));\n\n        position.set(Position.KEY_BATTERY, parser.nextDouble());\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        position.set(Position.KEY_STATUS, parser.nextHexInt());\n    }\n\n    /*\n     * Now we get to the GPS part.\n     * For messages that carried network info, the GPS branch carries\n     * one extra field at its start.\n     * For example, in the message\n     *\n     * $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74\n     *\n     * after the common fields the tokens are:\n     *    \"0\" , \"A\" , \"0\" , \"13\" , \"22.643466\" , \"114.018211\"\n     *\n     * We want to ignore the first extra token (\"0\"), then treat \"A\" as the valid flag,\n     * then take the next value (\"0\") as the speed (converted from kph to knots)\n     * and then \"13\" as the satellite count.\n     */\n    if (parser.hasNext(6)) {\n        // Skip the first extra field\n        parser.next();\n        // Now the next token should be the GPS validity flag.\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n\n        // Note: the order here is important.\n        // For messages with network info the protocol sends speed first,\n        // then the number of satellites.\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else {\n        // Otherwise, the protocol may have sent Wi\u2011Fi access point information.\n        String[] points = parser.next().split(\"\\\\|\");\n        for (String point : points) {\n            String[] wifi = point.split(\":\");\n            String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n            network.addWifiAccessPoint(WifiAccessPoint.from(\n                    mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n        }\n    }\n\n    position.setNetwork(network);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + dateFormat.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}