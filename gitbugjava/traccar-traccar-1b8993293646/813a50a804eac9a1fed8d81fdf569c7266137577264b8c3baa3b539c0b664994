{
    "generation": "private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // The next two tokens are used for message tracking:\n    String index = parser.next();\n    // Skip the \u201ccommand\u201d token \u2013 it differentiates message formats.\n    String command = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // If the command indicates a result message (ex: B03), report the result and finish.\n    if (command.startsWith(\"B\")) {\n        String result = parser.next();\n        position.set(Position.KEY_RESULT, result);\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date());\n        sendResponse(channel, remoteAddress, imei, response);\n        return position;\n    }\n\n    // Certain commands (such as D05) indicate that no position should be created.\n    if (command.equals(\"D05\")) {\n        return null;\n    }\n\n    // Parse the alarm field. It may be empty \u2013 assume 0 in that case.\n    String alarmToken = parser.next();\n    int alarmCode = 0;\n    if (!alarmToken.isEmpty()) {\n        try {\n            alarmCode = Integer.parseInt(alarmToken);\n        } catch (NumberFormatException e) {\n            // If parsing fails, leave alarmCode as 0.\n        }\n    }\n    position.set(Position.KEY_ALARM, decodeAlarm(alarmCode));\n\n    position.setDeviceTime(parser.nextDateTime());\n\n    Network network = new Network();\n    // Next token might be a cell tower field (if it contains \"|\" characters)\n    String token = parser.next();\n    if (token.contains(\"|\")) {\n        String[] cellParts = token.split(\"\\\\|\");\n        if (cellParts.length >= 4) {\n            int mcc = Integer.parseInt(cellParts[0]);\n            int mnc = Integer.parseInt(cellParts[1]);\n            int lac = Integer.parseInt(cellParts[2], 16);\n            int cid = Integer.parseInt(cellParts[3], 16);\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n        }\n        // For messages in the A03 format the next three fields give battery info.\n        double battery = parser.nextDouble();\n        position.set(Position.KEY_BATTERY, battery);\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n        // In A03 messages, after the status a spurious odometer field is sent.\n        // Then follow 5 fields: valid flag, speed, satellites, latitude and longitude.\n        if (command.equals(\"A03\") && parser.hasNext(6)) {\n            // Skip the odometer.\n            parser.next();\n            position.setValid(parser.next().equals(\"A\"));\n            position.setFixTime(position.getDeviceTime());\n            // Note: the sending party sends speed first then satellite count.\n            position.set(Position.KEY_SPEED, UnitsConverter.knotsFromKph(parser.nextInt()));\n            position.set(Position.KEY_SATELLITES, parser.nextInt());\n            position.setLatitude(parser.nextDouble());\n            position.setLongitude(parser.nextDouble());\n        } else {\n            // If there aren\u2019t enough tokens for GPS fix, assume the remaining field\n            // contains wifi access point definitions.\n            String[] points = parser.next().split(\"\\\\|\");\n            for (String point : points) {\n                String[] wifi = point.split(\":\");\n                String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n                network.addWifiAccessPoint(WifiAccessPoint.from(\n                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n            }\n        }\n    } else {\n        // For A01 (and A00) messages the token just read is the validity flag.\n        position.setValid(token.equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n\n        // For some A01 messages an extra driver unique id is sent later.\n        // Look through any remaining tokens for one that is a 6-digit hex string.\n        if (command.equals(\"A01\")) {\n            while (parser.hasNext()) {\n                String t = parser.next();\n                if (t.length() == 6 && t.matches(\"[0-9A-Fa-f]+\")) {\n                    long driverId = Long.parseLong(t, 16);\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n                }\n            }\n        }\n    }\n\n    position.setNetwork(network);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + dateFormat.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}