{
    "generation": "import org.traccar.helper.TypeConverter; // Import TypeConverter for robust parsing\n\n    private Object decodeLocationNew(\n            Channel channel, SocketAddress remoteAddress, String sentence) {\n\n        Parser parser = new Parser(PATTERN_NEW, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        String imei = parser.next();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        String index = parser.next();\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        // Use TypeConverter for robust parsing of alarm field\n        position.set(Position.KEY_ALARM, decodeAlarm(TypeConverter.parseInt(parser.next())));\n\n        position.setDeviceTime(parser.nextDateTime());\n\n        Network network = new Network();\n        network.addCellTower(CellTower.from(\n                TypeConverter.parseInt(parser.next()), TypeConverter.parseInt(parser.next()),\n                TypeConverter.parseHexInt(parser.next()), TypeConverter.parseHexInt(parser.next())));\n\n        // Use TypeConverter for robust parsing of battery, battery level, and status fields\n        position.set(Position.KEY_BATTERY, TypeConverter.parseDouble(parser.next()));\n        position.set(Position.KEY_BATTERY_LEVEL, TypeConverter.parseInt(parser.next()));\n        position.set(Position.KEY_STATUS, TypeConverter.parseHexInt(parser.next()));\n\n        if (parser.hasNext(5)) {\n            // Original fields: valid, satellites, speed, latitude, longitude\n            // Test input sequence: valid (0), extra_field (A), speed (0), satellites (13), latitude (22.643466), longitude (114.018211)\n\n            position.setValid(parser.next().equals(\"A\")); // Consumes '0' for valid\n            parser.next(); // Consume 'A' (extra field, discard value)\n\n            position.setFixTime(position.getDeviceTime());\n\n            // Reorder and use TypeConverter for robust parsing\n            position.setSpeed(UnitsConverter.knotsFromKph(TypeConverter.parseInt(parser.next()))); // Consumes '0' for speed\n            position.set(Position.KEY_SATELLITES, TypeConverter.parseInt(parser.next())); // Consumes '13' for satellites\n            position.setLatitude(TypeConverter.parseDouble(parser.next())); // Consumes '22.643466' for latitude\n            position.setLongitude(TypeConverter.parseDouble(parser.next())); // Consumes '114.018211' for longitude (assumes pattern correctly captures this)\n\n        } else {\n\n            String[] points = parser.next().split(\"\\\\|\");\n            for (String point : points) {\n                String[] wifi = point.split(\":\");\n                String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n                network.addWifiAccessPoint(WifiAccessPoint.from(\n                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n            }\n\n        }\n\n        position.setNetwork(network);\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date());\n        sendResponse(channel, remoteAddress, imei, response);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}