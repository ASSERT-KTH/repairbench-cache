{
    "generation": "private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    // The first token is the device identifier.\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // The next token is used for the response.\n    String index = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // The alarm field is a string (e.g. \"A03\" or \"A01\"), not an integer.\n    String alarmField = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(alarmField));\n\n    // If not enough tokens remain for a full location message, treat this as a command response.\n    // A full location message should have at least:\n    // device time (1) + cell tower (4) + battery (1) + battery level (1) + status (1) = 8 tokens.\n    if (!parser.hasNext(8)) {\n        String result = parser.next();\n        // Remove any checksum (everything after a star) if present.\n        if (result.contains(\"*\")) {\n            result = result.substring(0, result.indexOf('*'));\n        }\n        position.set(Position.KEY_RESULT, result);\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date());\n        sendResponse(channel, remoteAddress, imei, response);\n\n        return position;\n    }\n\n    position.setDeviceTime(parser.nextDateTime());\n\n    Network network = new Network();\n    network.addCellTower(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n\n    position.set(Position.KEY_BATTERY, parser.nextDouble());\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    // For location fix data, newer messages provide an extra token.\n    // In messages like:\n    //   $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74\n    // after the battery info, there are 6 tokens:\n    //   token1: an extra field (e.g. heading, which we ignore),\n    //   token2: valid flag (\"A\" means valid),\n    //   token3: speed in KPH,\n    //   token4: satellite count,\n    //   token5: latitude,\n    //   token6: longitude.\n    if (parser.hasNext(6)) {\n        parser.next(); // Ignore the extra field (e.g. heading)\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        // Note: the protocol sends speed before satellite count.\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else {\n        // If there aren't 6 tokens, then assume the remaining token contains Wi\u2011Fi access point data.\n        String[] points = parser.next().split(\"\\\\|\");\n        for (String point : points) {\n            String[] wifi = point.split(\":\");\n            String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n            network.addWifiAccessPoint(WifiAccessPoint.from(\n                    mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n        }\n    }\n\n    position.setNetwork(network);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + dateFormat.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}