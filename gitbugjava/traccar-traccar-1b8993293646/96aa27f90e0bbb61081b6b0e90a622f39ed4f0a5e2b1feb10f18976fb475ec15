{
    "generation": "    private Object decodeLocationNew(\n            Channel channel, SocketAddress remoteAddress, String sentence) {\n\n        // Example GPS: $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74\n        // Example Wifi: $$136,866104023192332,1,A03,,210414055249,460|0|25FC|104C,4.18,100,000F,1,94D9B377EB53:-60|EC6C9FA4CAD8:-55|...*3E\n        // Structure: $$,<len>,<imei>,<index>,<type>,,<timestamp>,<cell>,<battV>,<battL>,<status>,<alarm>,<data>*<checksum>\n        // <data> for GPS: <validity>,<speedKph>,<satellites>,<latitude>,<longitude>\n        // <data> for Wifi: <mac>:<rssi>|<mac>:<rssi>|...\n\n        Parser parser = new Parser(PATTERN_NEW, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        String imei = parser.next(); // IMEI\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        String index = parser.next(); // Index\n        parser.skip(1); // Skip Type (e.g., A03)\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setDeviceTime(parser.nextDateTime()); // Timestamp\n\n        Network network = new Network();\n        String[] cell = parser.next().split(\"\\\\|\"); // Cell info\n        if (cell.length >= 4) {\n             try {\n                 network.addCellTower(CellTower.from(\n                         Integer.parseInt(cell[0]), // MCC\n                         Integer.parseInt(cell[1]), // MNC\n                         Integer.parseInt(cell[2], 16), // LAC\n                         Integer.parseInt(cell[3], 16))); // CID\n             } catch (NumberFormatException e) {\n                 // Ignore invalid cell info\n             }\n        }\n\n        position.set(Position.KEY_BATTERY, parser.nextDouble()); // Battery Voltage\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // Battery Level\n        position.set(Position.KEY_STATUS, parser.nextHexInt()); // Status\n        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt())); // Alarm Code\n\n        // Now check for GPS (5 fields) or WiFi (1 field)\n        if (parser.hasNext(5)) { // GPS data: validity, speed, satellites, lat, lon\n\n            position.setValid(parser.next().equals(\"A\")); // Validity\n            position.setFixTime(position.getDeviceTime()); // Use device time as fix time\n            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Speed (KPH)\n            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Satellites\n            position.setLatitude(parser.nextDouble()); // Latitude\n            position.setLongitude(parser.nextDouble()); // Longitude\n\n        } else if (parser.hasNext()) { // WiFi data\n\n            String wifiData = parser.next(); // e.g., \"94D9B377EB53:-60|EC6C9FA4CAD8:-55|...\"\n            String[] points = wifiData.split(\"\\\\|\");\n            for (String point : points) {\n                String[] wifi = point.split(\":\");\n                if (wifi.length >= 2) {\n                    String mac = wifi[0].replaceAll(\"(..)\", \"$1:\"); // Add colons\n                    if (mac.endsWith(\":\")) {\n                        mac = mac.substring(0, mac.length() - 1);\n                    }\n                    try {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(\n                                mac, Integer.parseInt(wifi[1])));\n                    } catch (NumberFormatException e) {\n                        // Ignore invalid wifi point\n                    }\n                }\n            }\n        }\n\n        position.setNetwork(network);\n\n        // Send response if needed (original logic)\n        if (!index.isEmpty()) {\n            DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n            dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n            String response = index + \",A03,\" + dateFormat.format(new Date());\n            sendResponse(channel, remoteAddress, imei, response);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}