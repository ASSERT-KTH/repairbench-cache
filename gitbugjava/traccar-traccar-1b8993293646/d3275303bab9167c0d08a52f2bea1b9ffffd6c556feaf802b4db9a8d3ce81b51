{
    "generation": "private Object decodeLocationNew(\n        Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String index = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Alarm code is hexadecimal\n    position.set(Position.KEY_ALARM, decodeAlarm(parser.nextHexInt()));\n\n    // Device timestamp\n    position.setDeviceTime(parser.nextDateTime());\n\n    // Base cell tower\n    Network network = new Network();\n    network.addCellTower(CellTower.from(\n            parser.nextInt(),          // mcc\n            parser.nextInt(),          // mnc\n            parser.nextHexInt(),       // lac\n            parser.nextHexInt()));     // cid\n\n    // Battery and status\n    position.set(Position.KEY_BATTERY, parser.nextDouble());\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    // Skip branch indicator (0 = GPS, >0 = Wi\u2011Fi)\n    if (parser.hasNext()) {\n        parser.next();\n    }\n\n    // GPS data: valid flag, satellites, speed, lat, lon\n    if (parser.hasNext(5)) {\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    }\n    // Wi\u2011Fi data: single field with MAC:RSSI pairs separated by '|'\n    else if (parser.hasNext()) {\n        String[] points = parser.next().split(\"\\\\|\");\n        for (String point : points) {\n            String[] wifi = point.split(\":\");\n            String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n            network.addWifiAccessPoint(WifiAccessPoint.from(\n                    mac.substring(0, mac.length() - 1),\n                    Integer.parseInt(wifi[1])));\n        }\n    }\n\n    position.setNetwork(network);\n\n    // Send acknowledgment\n    DateFormat df = new SimpleDateFormat(\"yyMMddHHmmss\");\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + df.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}