{
    "generation": "private Object decodeLocationNew(Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String index = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // The alarm field is sent as something like \"A03\" and parsed via nextInt() by the custom parser.\n    position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));\n\n    // Device time is expected next (the parser\u2019s nextDateTime() handles formats appropriately)\n    position.setDeviceTime(parser.nextDateTime());\n\n    Network network = new Network();\n    network.addCellTower(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n\n    position.set(Position.KEY_BATTERY, parser.nextDouble());\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    // In many messages the location part contains an extra token.\n    // There are normally either 5 tokens:\n    //    valid, satellites, speed, latitude, longitude\n    // or 6 tokens:\n    //    extra, valid, speed, satellites, latitude, longitude\n    // For example, in one test the tokens after status are:\n    //    \"0\", \"A\", \"0\", \"13\", \"22.643466\", \"114.018211*74\"\n    // We must skip the extra field so that satellites is read as 13.\n    if (parser.hasNext(6)) {\n        // Skip extra token.\n        parser.next();\n        // Then token order is: valid, speed, satellites, latitude, longitude.\n        position.setValid(parser.next().equals(\"A\"));\n        int speed = parser.nextInt();\n        int satellites = parser.nextInt();\n        position.setFixTime(position.getDeviceTime());\n        // Now the satellite count is as expected.\n        position.set(Position.KEY_SATELLITES, satellites);\n        position.setSpeed(UnitsConverter.knotsFromKph(speed));\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else if (parser.hasNext(5)) {\n        // Otherwise the tokens come in the default order:\n        // valid, satellites, speed, latitude, longitude.\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else {\n        String[] points = parser.next().split(\"\\\\|\");\n        for (String point : points) {\n            String[] wifi = point.split(\":\");\n            String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n            network.addWifiAccessPoint(WifiAccessPoint.from(\n                    mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n        }\n    }\n\n    position.setNetwork(network);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + dateFormat.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}