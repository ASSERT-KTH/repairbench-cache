{
    "generation": "    private Object decodeLocationNew(\n            Channel channel, SocketAddress remoteAddress, String sentence) {\n\n        Parser parser = new Parser(PATTERN_NEW, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        String imei = parser.next();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        String index = parser.next();\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        // Parsed before the if/else block as it's common\n        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));\n        position.setDeviceTime(parser.nextDateTime());\n\n        Network network = new Network();\n        // Parse Cell Tower info\n        String[] cellTowerData = parser.next().split(\"\\\\|\");\n        if (cellTowerData.length >= 4) {\n            try {\n                network.addCellTower(CellTower.from(\n                        Integer.parseInt(cellTowerData[0]), Integer.parseInt(cellTowerData[1]),\n                        Integer.parseInt(cellTowerData[2], 16), Integer.parseInt(cellTowerData[3], 16)));\n            } catch (NumberFormatException e) {\n                // Ignore invalid cell data\n            }\n        }\n\n\n        position.set(Position.KEY_BATTERY, parser.nextDouble());\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n\n        if (parser.hasNext(5)) { // Check if GPS data is available (Validity, Speed, Satellites, Lat, Lon)\n\n            position.setValid(parser.next().equals(\"A\"));\n            position.setFixTime(position.getDeviceTime()); // Use device time as fix time when GPS is valid\n\n            // Swapped order based on test case analysis\n            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Speed (KPH)\n            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Satellites\n\n            position.setLatitude(parser.nextDouble());\n            position.setLongitude(parser.nextDouble());\n\n        } else if (parser.hasNext()) { // Check if WiFi data is available\n\n            String wifiData = parser.next();\n            if (wifiData != null && !wifiData.isEmpty()) {\n                 String[] points = wifiData.split(\"\\\\|\");\n                 for (String point : points) {\n                     String[] wifi = point.split(\":\");\n                     if (wifi.length == 2) {\n                         String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n                         if (mac.endsWith(\":\")) {\n                            mac = mac.substring(0, mac.length() - 1);\n                         }\n                         try {\n                             network.addWifiAccessPoint(WifiAccessPoint.from(\n                                     mac, Integer.parseInt(wifi[1])));\n                         } catch (NumberFormatException e) {\n                            // Ignore invalid wifi data\n                         }\n                     }\n                 }\n            }\n            // If no GPS, position validity depends on network info presence\n            position.setValid(network.getCellTowers() != null || network.getWifiAccessPoints() != null);\n            // No Latitude/Longitude if only network info is present\n\n        } else {\n            // If neither GPS nor WiFi data is present, mark position as invalid\n             position.setValid(false);\n        }\n\n        position.setNetwork(network);\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date());\n        sendResponse(channel, remoteAddress, imei, response);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}