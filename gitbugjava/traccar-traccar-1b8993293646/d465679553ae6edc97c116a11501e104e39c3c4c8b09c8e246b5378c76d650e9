{
    "generation": "private Object decodeLocationNew(\n        Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String index = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));\n    position.setDeviceTime(parser.nextDateTime());\n\n    Network network = new Network();\n    network.addCellTower(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n\n    position.set(Position.KEY_BATTERY, parser.nextDouble());\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    // Next field indicates data type: 0 = GPS, otherwise Wi\u2011Fi\n    int dataType = parser.nextInt();\n    if (dataType == 0) {\n        // GPS block: valid flag, speed (kph), satellites, latitude, longitude\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else {\n        // Wi\u2011Fi block: one field with all points separated by '|'\n        String[] points = parser.next().split(\"\\\\|\");\n        for (String point : points) {\n            String[] wifi = point.split(\":\");\n            String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n            // strip trailing colon\n            mac = mac.substring(0, mac.length() - 1);\n            int signal = Integer.parseInt(wifi[1]);\n            network.addWifiAccessPoint(WifiAccessPoint.from(mac, signal));\n        }\n    }\n\n    position.setNetwork(network);\n\n    // send acknowledgment\n    DateFormat df = new SimpleDateFormat(\"yyMMddHHmmss\");\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + df.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}