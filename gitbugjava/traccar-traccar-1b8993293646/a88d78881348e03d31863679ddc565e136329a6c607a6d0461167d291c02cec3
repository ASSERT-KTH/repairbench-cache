{
    "generation": "    private Object decodeLocationNew(\n            Channel channel, SocketAddress remoteAddress, String sentence) {\n\n        // Example GPS: $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74\n        // Example WiFi:$$136,866104023192332,1,A03,,210414055249,460|0|25FC|104C,4.18,100,000F,1,94D9B377EB53:-60|EC6C9FA4CAD8:-55*3E\n\n        Parser parser = new Parser(PATTERN_NEW, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        String imei = parser.next();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        String index = parser.next(); // e.g., 7F, 1\n        parser.next(); // Command type, e.g., A03\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        // The field after command seems to be the alarm code (can be empty)\n        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt(0))); // Use default 0 if empty/invalid\n\n        position.setDeviceTime(parser.nextDateTime());\n\n        Network network = new Network();\n        // Cell info: MCC|MNC|LAC|CID\n        network.addCellTower(CellTower.from(\n                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n\n        position.set(Position.KEY_BATTERY, parser.nextDouble()); // Battery voltage\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // Battery level percentage\n        position.set(Position.KEY_STATUS, parser.nextHexInt()); // Status flags\n\n        // Next field indicates location data type: 0 = GPS, 1 = WiFi\n        int locationType = parser.nextInt();\n\n        if (locationType == 0 && parser.hasNext(5)) { // GPS Data: Validity,Speed,Satellites,Lat,Lon\n\n            position.setValid(parser.next().equals(\"A\")); // Validity (A=Active, V=Void)\n            position.setFixTime(position.getDeviceTime()); // Use device time as fix time\n            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Speed in KPH\n            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Number of satellites\n            position.setLatitude(parser.nextDouble()); // Latitude\n            position.setLongitude(parser.nextDouble()); // Longitude\n\n        } else if (locationType == 1 && parser.hasNext(1)) { // WiFi Data: MAC1:Signal1|MAC2:Signal2...\n\n            String pointsString = parser.next();\n            if (pointsString != null && !pointsString.isEmpty()) {\n                String[] points = pointsString.split(\"\\\\|\");\n                for (String point : points) {\n                    String[] wifi = point.split(\":\");\n                    if (wifi.length >= 2) {\n                        String macRaw = wifi[0];\n                        // Ensure MAC is 12 hex characters before formatting\n                        if (macRaw != null && macRaw.matches(\"^[0-9a-fA-F]{12}$\")) {\n                            // Format MAC address with colons: XX:XX:XX:XX:XX:XX\n                            String mac = macRaw.replaceAll(\"(..)\", \"$1:\").substring(0, 17);\n                            try {\n                                int signalStrength = Integer.parseInt(wifi[1]);\n                                network.addWifiAccessPoint(WifiAccessPoint.from(mac, signalStrength));\n                            } catch (NumberFormatException e) {\n                                // Ignore invalid signal strength\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Note: Potential other fields after GPS/WiFi are ignored in this logic\n\n        position.setNetwork(network);\n\n        // Send ACK response\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date()); // Use A03 in response regardless of incoming command?\n        sendResponse(channel, remoteAddress, imei, response);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}