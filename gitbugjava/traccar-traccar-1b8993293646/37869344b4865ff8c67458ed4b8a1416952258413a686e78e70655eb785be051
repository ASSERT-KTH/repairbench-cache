{
    "generation": "private Object decodeLocationNew(\n        Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String index = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Read the \u201calarm\u201d field as a string.\n    String alarmField = parser.next();\n    // If the message indicates \u201cD\u201d (for example, a diagnostic) then ignore it.\n    if (alarmField.startsWith(\"D\")) {\n        return null;\n    }\n    // If it is a \u201cB\u201d type message, treat it as a result message.\n    else if (alarmField.startsWith(\"B\")) {\n        String result = parser.next();\n        // Remove any checksum appended (everything after '*')\n        int starPos = result.indexOf('*');\n        if (starPos > 0) {\n            result = result.substring(0, starPos);\n        }\n        position.set(Position.KEY_RESULT, result);\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date());\n        sendResponse(channel, remoteAddress, imei, response);\n\n        return position;\n    }\n    // For alarm messages starting with \"A\", decode the numeric part.\n    else if (alarmField.startsWith(\"A\")) {\n        // Remove the leading character and parse the rest as an integer.\n        position.set(Position.KEY_ALARM, decodeAlarm(Integer.parseInt(alarmField.substring(1))));\n    }\n\n    // Skip the extra field (which may be empty or an event id not used here)\n    parser.next();\n\n    position.setDeviceTime(parser.nextDateTime());\n\n    Network network = new Network();\n    network.addCellTower(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n\n    position.set(Position.KEY_BATTERY, parser.nextDouble());\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    // There are two possible layouts for the remaining tokens.\n    // In some messages (with network info) an additional \"odometer\" value is present.\n    if (parser.hasNext(6)) {\n        // Expected order: odometer, valid flag, speed, satellites, latitude, longitude.\n        position.set(Position.KEY_ODOMETER, parser.nextDouble());\n        position.setValid(parser.next().equals(\"A\"));\n        int speed = parser.nextInt();\n        int satellites = parser.nextInt(); // Now the second integer is read as satellites.\n        position.setSpeed(UnitsConverter.knotsFromKph(speed));\n        position.set(Position.KEY_SATELLITES, satellites);\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else if (parser.hasNext(5)) {\n        // Expected order: valid flag, speed, satellites, latitude, longitude.\n        position.setValid(parser.next().equals(\"A\"));\n        int speed = parser.nextInt();\n        int satellites = parser.nextInt(); // Swap order: speed first, then satellites.\n        position.setSpeed(UnitsConverter.knotsFromKph(speed));\n        position.set(Position.KEY_SATELLITES, satellites);\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else {\n        String[] points = parser.next().split(\"\\\\|\");\n        for (String point : points) {\n            String[] wifi = point.split(\":\");\n            String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n            network.addWifiAccessPoint(WifiAccessPoint.from(\n                    mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n        }\n    }\n\n    position.setNetwork(network);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + dateFormat.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}