{
    "generation": "private Object decodeLocationNew(\n        Channel channel, SocketAddress remoteAddress, String sentence) {\n\n    Parser parser = new Parser(PATTERN_NEW, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    // The first captured field is the device identifier.\n    String imei = parser.next();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // The next field is used in the response.\n    String index = parser.next();\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Instead of reading an integer, read the alarm field as a string.\n    position.set(Position.KEY_ALARM, decodeAlarm(parser.next()));\n\n    // Next the device time is parsed.\n    position.setDeviceTime(parser.nextDateTime());\n\n    // Get cell tower information.\n    Network network = new Network();\n    network.addCellTower(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n\n    position.set(Position.KEY_BATTERY, parser.nextDouble());\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    /*\n     * The remaining part contains the GPS/fix data.\n     * For some message types (for example the \u201cA03\u201d messages) an extra field is present.\n     * In those cases the parser returns 6 tokens (e.g.: altitude, valid, speed, satellites, latitude, longitude),\n     * while for others (e.g. \u201cA01\u201d) only 5 tokens are available.\n     *\n     * In our tests the \u201cA03\u201d messages must result in KEY_SATELLITES = 13 so that the extra (unused)\n     * field \u2013 typically altitude \u2013 is skipped.\n     */\n    if (parser.hasNext(6)) {\n        // Skip the extra field (often altitude) for A03 messages.\n        parser.next();\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        // Now the next token is the speed (in km/h) and then the satellites count.\n        position.set(Position.KEY_SPEED, UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else if (parser.hasNext(5)) {\n        position.setValid(parser.next().equals(\"A\"));\n        position.setFixTime(position.getDeviceTime());\n        position.set(Position.KEY_SPEED, UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n    } else {\n        String[] points = parser.next().split(\"\\\\|\");\n        for (String point : points) {\n            String[] wifi = point.split(\":\");\n            String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n            network.addWifiAccessPoint(WifiAccessPoint.from(\n                    mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n        }\n    }\n\n    position.setNetwork(network);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String response = index + \",A03,\" + dateFormat.format(new Date());\n    sendResponse(channel, remoteAddress, imei, response);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}