{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle case of first byte being NUL, see comments above\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim trailing NULs and spaces. Use a temporary variable for clarity.\n        // This loop is slightly safer than the original regarding potential index bounds.\n        int realEnd = end;\n        while (start < realEnd) {\n            byte trailer = buffer[realEnd - 1];\n            if (trailer == 0 || trailer == ' ') {\n                realEnd--;\n            } else {\n                break; // Found a non-NUL, non-space character\n            }\n        }\n\n        // After trimming spaces and NULs, if start >= realEnd, the buffer\n        // contained only spaces and/or NULs. The loop below won't execute, correctly returning 0.\n\n        for ( ;start < realEnd; start++) { // Iterate up to the first non-trimmed character\n            final byte currentByte = buffer[start];\n\n            // CheckStyle:MagicNumber OFF\n            // Fail if character is not an octal digit ('0' - '7')\n            // This check now correctly handles embedded NULs as errors (NUL byte value 0 is less than '0')\n            if (currentByte < '0' || currentByte > '7'){\n                // NUL, space, or other non-octal chars are errors if found inside the number.\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Note: The helper method exceptionMessage(buffer, offset, length, start, currentByte)\n    // is assumed to exist elsewhere in the class. Its definition is not included here.",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}