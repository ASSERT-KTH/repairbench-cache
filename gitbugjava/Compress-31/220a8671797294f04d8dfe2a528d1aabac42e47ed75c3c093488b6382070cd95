{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle specific case of leading NUL for compatibility\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces. Determine end of digits.\n        int digitEnd = end;\n        // Ensure we don't trim positions before the start offset\n        while (digitEnd > start) {\n            final byte currentTrailer = buffer[digitEnd - 1];\n            if (currentTrailer == 0 || currentTrailer == ' ') {\n                digitEnd--;\n            } else {\n                // Found a non-NUL, non-space. Must be part of the number.\n                break;\n            }\n        }\n\n        // Check if the sequence contains only spaces and/or NULs\n        if (digitEnd <= start) {\n            return 0L; // Treated as zero\n        }\n\n        // Pase digits from start up to (but not including) digitEnd\n        for ( ;start < digitEnd; start++) {\n            final byte currentByte = buffer[start];\n\n            // Check for embedded NUL or space *within* the numeric part.\n            // This is the fix: throw an error instead of breaking silently on NUL.\n            if (currentByte == 0 || currentByte == ' ') {\n                 throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // CheckStyle:MagicNumber OFF\n            // Ensure the byte is a valid octal digit.\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method needed for the exception message (assumed to exist)\n    private static String exceptionMessage(byte[] buffer, final int offset,\n                                           final int length, int current, final byte currentByte) {\n        // Implementation from the original TarUtils class or similar is needed here.\n        // Providing a simplified version for completeness of the fix block.\n        String s = new String(buffer, offset, length); // StandardCharsets.UTF_8 or similar recommended\n        s = s.replace(\"\\0\", \"{NUL}\"); // Avoid printing actual NUL character\n        String reason;\n        if (currentByte == 0 || currentByte == ' ') {\n            reason = \"(found \" + (currentByte == 0 ? \"{NUL}\" : \"space\") + \" character)\";\n        } else {\n            reason = \"(found byte '\" + (char) currentByte + \"' = \" + currentByte + \")\";\n        }\n        return \"Invalid byte \" + reason + \" at offset \" + (current - offset) + \" in '\" + s + \"' len=\" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}