{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // Scan backwards from end-1\n        byte trailer = buffer[end - 1];\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            // Check boundary condition: if end reaches start, we are done trimming\n            // Otherwise, update trailer for the next iteration\n            if (start < end) {\n                trailer = buffer[end - 1];\n            }\n        }\n\n        // No trimming occurred or we trimmed but still have characters left (start < end)\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n\n            // Check for non-octal digit.\n            // NUL(0) and space(' ') are handled by this check implicitly,\n            // as they are < '0'. This throws an exception for embedded NULs or spaces.\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Use a helper method to generate a useful exception message\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist for the exception message (not part of the fix but needed for compilation/context)\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffsetInLoop, byte currentByte) {\n        // Create a string representation of the problematic portion of the buffer\n        // Replace NUL characters with a printable representation like \"{NUL}\"\n        String problematicPortion;\n        try {\n            // Attempt to decode using UTF-8, replace malformed sequences\n            problematicPortion = new String(buffer, offset, length, java.nio.charset.StandardCharsets.UTF_8);\n            problematicPortion = problematicPortion.replaceAll(\"\\u0000\", \"{NUL}\");\n        } catch (Throwable t) { // fallback in case of decoding issues\n             problematicPortion = \"[cannot display buffer content]\";\n        }\n\n        return \"Invalid byte \" + (int) currentByte + // Show byte value\n               \" at offset \" + (currentOffsetInLoop - offset) + // Offset relative to start of parsed section\n               \" in '\" + problematicPortion + \"'.\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}