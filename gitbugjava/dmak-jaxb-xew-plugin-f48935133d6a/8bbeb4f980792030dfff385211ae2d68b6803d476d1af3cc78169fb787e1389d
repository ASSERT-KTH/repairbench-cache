{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Get parent and grandparent\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// Get original name and parent's class map for later removal\n\t\tString originalClazzName = clazz.name();\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\n\t\t// This map will hold classes of the grandParent.\n\t\tMap<String, JDefinedClass> grandParentClasses;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\t// This comment is addressed by ensuring the class becomes static if moved to an outer class.\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\n\t\t\t// When an inner class is moved to be an inner class of its grandparent class,\n\t\t\t// it should typically be static (common for JAXB generated types).\n\t\t\t// This also addresses JAXB-957 (ensure static modifier isn't lost or is added).\n\t\t\tint currentMods = clazz.mods().getValue();\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(currentMods | JMod.STATIC));\n\t\t}\n\t\telse { // grandParent is JPackage\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\t// Top-level classes in a package are not 'static' in the same way as static inner classes.\n\t\t\tint currentMods = clazz.mods().getValue();\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(currentMods & ~JMod.STATIC));\n\n\t\t\t// Schema-related updates when moving to a package context\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration.\n\t\t\t\t\t// This assertion relates to assumptions about the schema origin of the class.\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle name collision in the new container (grandParent)\n\t\t// At this point, clazz.name() is still originalClazzName.\n\t\tif (grandParentClasses.containsKey(originalClazzName)) {\n\t\t\tString newName = parent.name() + originalClazzName;\n\t\t\t// Before renaming, clazz.fullName() uses originalClazzName.\n\t\t\t// The summary message refers to the new *simple* name of the class.\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to new simple name: \" + newName);\n\t\t\tsetPrivateField(clazz, \"name\", newName);\n\t\t}\n\n\t\t// Add clazz to grandParent's map of classes (using its current name, possibly new).\n\t\tgrandParentClasses.put(clazz.name(), clazz);\n\n\t\t// Remove clazz from its original parent's map of classes using the original name.\n\t\t// This is crucial to avoid the class being listed (and potentially generated) under its old parent.\n\t\tparentClasses.remove(originalClazzName);\n\n\t\t// Finally modify the class so that its 'outer' field refers back to the new container (grandParent).\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}