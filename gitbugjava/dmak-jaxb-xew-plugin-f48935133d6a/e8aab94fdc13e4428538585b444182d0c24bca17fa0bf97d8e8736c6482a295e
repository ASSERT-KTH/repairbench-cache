{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Retrieve the parent container (an inner class) and remove clazz from its map.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    // Use the original name since it will be used as key in the parent's map.\n    String originalName = clazz.name();\n    parentClasses.remove(originalName);\n\n    // Determine the grand\u2010parent container (it can be a class or a package).\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent.isClass()) {\n        // If the grandparent is a class, then add clazz as its inner class.\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        // If the grandparent is a package then move clazz to package-level.\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Remove the \"static\" modifier because top\u2013level classes must not be static.\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // Update the related schema component so that the inner class is not treated as anonymous.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                // Instead of asserting, ensure that the component is marked as non\u2013anonymous.\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                } else {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n                break;\n            }\n        }\n    }\n\n    // If a class with the same name already exists in the grandparent container,\n    // rename clazz by prefixing it with its original parent\u2019s name.\n    if (classes.containsKey(clazz.name())) {\n        String newName = parent.name() + clazz.name();\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n    classes.put(clazz.name(), clazz);\n\n    // Finally, update clazz so that its container is now the grandParent.\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}