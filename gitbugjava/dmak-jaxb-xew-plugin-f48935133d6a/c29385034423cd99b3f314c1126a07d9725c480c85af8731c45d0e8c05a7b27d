{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Get parent and grandparent\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\t\n\t\t// Store the original simple name of the class. This is crucial for:\n\t\t// 1. Removing the class from its original parent's collection using the correct key.\n\t\t// 2. Checking for name collisions in the grandparent container using the correct name.\n\t\t// 3. Constructing a new name if a collision occurs, based on the original simple name.\n\t\tString originalSimpleName = clazz.name();\n\t\t\n\t\t// Get the 'classes' map from the original parent. This map holds its inner classes.\n\t\t@SuppressWarnings(\"unchecked\") // The field 'classes' is known to be Map<String, JDefinedClass>\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\n\t\t// This map will hold classes of the grandparent container.\n\t\t// In the original code, this variable was also named 'classes'.\n\t\tMap<String, JDefinedClass> grandParentContainerClasses;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Grandparent is a class\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" from \" + parent.fullName() + \" to class \" + grandParentClass.fullName());\n\t\t\tgrandParentContainerClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\t// Grandparent is a package\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" from \" + parent.fullName() + \" to package \" + grandParentPackage.name());\n\t\t\tgrandParentContainerClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// When moving to a package, the class becomes a top-level (or static nested if package is an outer class, though less common for JPackage).\n\t\t\t// If it was a static inner class, the 'static' modifier is removed as it's not used for top-level classes.\n\t\t\t// The comment \"otherwise it won't compile\" indicates this is a necessary adjustment.\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\t// This loop seems to update JAXB schema-specific information (XSComponent)\n\t\t\t// associated with the class, marking it as non-anonymous.\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\t// FIXME: Inner class is always a local declaration. (This assertion might be too strong or context-dependent)\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove the class from its original parent's collection of inner classes.\n\t\t// This must be done using its originalSimpleName.\n\t\tif (parentClasses != null) {\n\t\t\tparentClasses.remove(originalSimpleName);\n\t\t} else {\n\t\t\t// This is unlikely if 'parent' is a valid JDefinedClass, as its 'classes' field should be initialized.\n\t\t\t// Log a warning if this happens, as the class might not be fully unlinked from its original parent.\n\t\t\twriteSummary(\"\\tWarning: Could not retrieve classes map from parent \" + parent.fullName() + \n\t\t\t             \" for class \" + originalSimpleName + \". Class may not be fully removed from original parent.\");\n\t\t}\n\n\t\t// Handle potential name collisions in the new grandparent container.\n\t\t// The check uses originalSimpleName (via clazz.name(), which is still original at this point).\n\t\tif (grandParentContainerClasses.containsKey(originalSimpleName)) {\n\t\t    // If a collision exists, create a new name: ParentSimpleName + OriginalClazzSimpleName\n\t\t    String newName = parent.name() + originalSimpleName;\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" (originally \" + originalSimpleName + \") to \" + newName +\n                         \" due to name collision in \" + (grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name()));\n\t\t\t// Update the class's name field. After this, clazz.name() will return newName.\n\t\t\tsetPrivateField(clazz, \"name\", newName);\n\t\t}\n\n\t\t// Add the class (with its final name - original or new) to the grandparent's collection.\n\t\t// clazz.name() now correctly refers to the final simple name of the class.\n\t\tgrandParentContainerClasses.put(clazz.name(), clazz);\n\n\t\t// Finally, update the class's 'outer' field to point to the grandparent container.\n\t\t// This formally makes the class a member of the grandparent.\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}