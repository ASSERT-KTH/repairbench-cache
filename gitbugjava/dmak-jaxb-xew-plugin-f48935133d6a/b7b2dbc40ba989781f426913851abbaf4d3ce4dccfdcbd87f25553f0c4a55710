{
    "generation": "/**\n * Move the given class to its grand\u2010parent (either a class or a package).\n * The given {@code clazz} must be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // 1) Remove clazz from its current parent\u2019s inner\u2010class map\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    final String originalName = clazz.name();\n    @SuppressWarnings(\"unchecked\")\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(originalName);\n\n    // 2) Find the grandparent container and grab its class\u2010map\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // top\u2010level classes cannot be static\n        setPrivateField(\n            clazz.mods(),\n            \"mods\",\n            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC)\n        );\n\n        // mark the schema component as non\u2010anonymous\n        for (ClassOutline co : outline.getClasses()) {\n            if (co.implClass == clazz) {\n                XSComponent sc = co.target.getSchemaComponent();\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // 3) Avoid name collision in the new container\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName()\n                     + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    // 4) Actually insert clazz into its new container and reset its outer pointer\n    classes.put(clazz.name(), clazz);\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}