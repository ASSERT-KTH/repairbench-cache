{
    "generation": "/**\n * Move the given class to its grand\u2010parent (either a class or a package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Obtain the parent (the current container) and remove clazz from its inner classes map.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(clazz.name());\n\n    // Modify the container so that it now refers to clazz. The container can be a class or a package.\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // In case the grand-parent is a class, add the element class as a child of that container.\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        // Otherwise the grand-parent is a package.\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // For a top-level class (moved from an inner class) the \"static\" modifier must be unset.\n        int newMods = clazz.mods().getValue() & ~JMod.STATIC;\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(newMods));\n\n        // Also adjust the corresponding schema component.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                // FIXME: Inner class is always a local declaration.\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // If a class with the same name already exists in the target container, rename this class.\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n    \n    classes.put(clazz.name(), clazz);\n\n    // Finally, update clazz so that its outer container is now the grand-parent.\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}