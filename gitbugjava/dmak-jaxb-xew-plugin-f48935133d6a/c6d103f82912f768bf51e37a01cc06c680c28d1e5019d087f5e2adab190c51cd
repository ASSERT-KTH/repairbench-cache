{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes = grandParent.isClass()\n            ? getPrivateField(grandParent, \"classes\")\n            : getPrivateField(grandParent, \"classes\");\n\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        clazz.mods().setValue(clazz.mods().getValue() & ~JMod.STATIC);\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // The class is being moved; it is no longer a local declaration.\n                if (sc instanceof XSDeclaration) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n\n                break;\n            }\n        }\n    }\n\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        clazz.setName(parent.name() + clazz.name());\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Finally modify the class so that it refers back the correct container:\n    clazz.setOuterClass((JDefinedClass) grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}