{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Remove clazz from its current parent container's inner classes mapping.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    if (parentClasses != null) {\n        for (Iterator<Map.Entry<String, JDefinedClass>> it = parentClasses.entrySet().iterator(); it.hasNext(); ) {\n            Map.Entry<String, JDefinedClass> entry = it.next();\n            if (entry.getValue() == clazz) {\n                it.remove();\n                break;\n            }\n        }\n    }\n    \n    // Get the new container: the grandparent.\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n    \n    // When the grandparent is a class.\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    }\n    else { // When the grandparent is a package.\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n        \n        // In package scope, remove the static modifier so the class will compile.\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n        \n        // Update the related XSComponent so that the class is not considered anonymous.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                if (sc instanceof XSDeclaration) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n                break;\n            }\n        }\n    }\n    \n    // Handle naming collisions in the new container.\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n    classes.put(clazz.name(), clazz);\n    \n    // Finally, update the class so that it now refers back to its new container.\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}