{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Remember the original simple name so we can remove it from the old container\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    String oldName = clazz.name();\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Move into an enclosing class\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        // Move into the package\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // If we've hoisted to the package level, clear the STATIC bit\n        setPrivateField(\n            clazz.mods(),\n            \"mods\",\n            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC)\n        );\n    }\n\n    // In all cases, clear the 'anonymous' flag on the schema component\n    for (ClassOutline co : outline.getClasses()) {\n        if (co.implClass == clazz) {\n            XSComponent sc = co.target.getSchemaComponent();\n            // FIXME: Inner class is always a local declaration.\n            assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();\n            setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n            break;\n        }\n    }\n\n    // If there's a name clash in the new container, rename\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName()\n                     + \" to \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    // Remove it from the old container's map\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(oldName);\n\n    // Finally, add it to the new container and update its outer reference\n    classes.put(clazz.name(), clazz);\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}