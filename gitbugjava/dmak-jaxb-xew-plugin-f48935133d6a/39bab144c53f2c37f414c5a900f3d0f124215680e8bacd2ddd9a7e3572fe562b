{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\t// Allows to track class name collisions:\n\t\tMap<String, JDefinedClass> grandParentClasses;\n        // Get the original parent's classes map to remove the inner class from it\n        Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n        String originalName = clazz.name(); // Store original name before potential rename\n\n\t\t// Remove the class from its original parent first. Use the original name.\n        if (parentClasses != null) {\n            if (parentClasses.remove(originalName) == null) {\n                // This might happen if the class wasn't actually in the parent's map, log a warning.\n                System.err.println(\"Warning: Class \" + originalName + \" not found in parent \" + parent.fullName() + \" classes map during move.\");\n            }\n        } else {\n             // Log or handle error: could not get parent classes map\n             System.err.println(\"Warning: Could not retrieve classes map from parent: \" + parent.fullName());\n        }\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse { // grandParent is JPackage\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n            // Only remove static if it was actually present\n            if ((clazz.mods().getValue() & JMod.STATIC) != 0) {\n\t\t\t    setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n            }\n\n\t\t\t// Also, update the schema component information if moving to a package\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n                    // Check if sc is not null and is an instance of XSDeclaration before casting and accessing methods\n                    // Inner class related schema components are often local declarations.\n\t\t\t\t\tif (sc instanceof XSDeclaration) {\n                        XSDeclaration decl = (XSDeclaration) sc;\n                        // Update the anonymous flag only if it was considered local.\n                        // Moving it to package scope makes it non-local/non-anonymous conceptually.\n                        if (decl.isLocal()) {\n\t\t\t\t\t        setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                        }\n                    }\n\t\t\t\t\tbreak; // Found the corresponding ClassOutline, no need to continue loop\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for name collision in the new container (grandparent)\n        // Use current name for checking collision, as it might have been implicitly changed?? No, should be originalName check?\n        // Let's stick to checking clazz.name() as the original code did.\n\t\tif (grandParentClasses.containsKey(clazz.name())) {\n            // Use the original parent's name as prefix to avoid collision\n\t\t\tString newName = parent.name() + clazz.name();\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n\t\t\tsetPrivateField(clazz, \"name\", newName);\n\t\t}\n\n        // Add the class to the new container (grandparent) using its potentially updated name\n\t\tgrandParentClasses.put(clazz.name(), clazz);\n\n\t\t// Finally modify the class so that it refers back the container:\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}