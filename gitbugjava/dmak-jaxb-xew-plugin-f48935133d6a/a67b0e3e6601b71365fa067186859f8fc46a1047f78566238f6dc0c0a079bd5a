{
    "generation": "/**\n * Move the given class to its grand\u2010parent (either a class or a package).\n * The given {@code clazz} should be an inner class.\n */\n@SuppressWarnings(\"unchecked\")\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // 1) Remove from the old container so it won't linger as an inner class there\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    Map<String, JDefinedClass> oldClasses =\n            (Map<String, JDefinedClass>) getPrivateField(parent, \"classes\");\n    oldClasses.remove(clazz.name());\n\n    // 2) Figure out the new container\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        // moving under another class\n        JDefinedClass gpClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                   + \" to class \" + gpClass.fullName());\n        classes = (Map<String, JDefinedClass>) getPrivateField(gpClass, \"classes\");\n\n        // ensure it remains a static nested class\n        setPrivateField(clazz.mods(), \"mods\",\n                Integer.valueOf(clazz.mods().getValue() | JMod.STATIC));\n\n    } else {\n        // moving to a package\n        JPackage gpPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                   + \" to package \" + gpPackage.name());\n        classes = (Map<String, JDefinedClass>) getPrivateField(gpPackage, \"classes\");\n\n        // top\u2010level classes must not be static\n        setPrivateField(clazz.mods(), \"mods\",\n                Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // for local declarations, un\u2010anonymize the schema component so JAXB will emit a real class\n        for (ClassOutline co : outline.getClasses()) {\n            if (co.implClass == clazz) {\n                XSComponent sc = co.target.getSchemaComponent();\n                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // 3) Guard against name collisions in the new container\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName()\n                   + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    // 4) Finally register it under the new container and fix its 'outer' pointer\n    classes.put(clazz.name(), clazz);\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}