{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Get the inner class\u2019s immediate container and its parent (the new container)\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n\n    // Remove clazz from its old container (the parent) so that it won't remain registered there.\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    String originalName = clazz.name();\n    parentClasses.remove(originalName);\n\n    // Determine the target container's classes collection.\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        // When the grandparent is a class:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        // When the grandparent is a package:\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Top-level classes cannot be static so remove the static modifier.\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // Locate the class outline, and mark the underlying component as non\u2013anonymous.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n                break;\n            }\n        }\n    }\n\n    // If a class with the same name already exists in the target container then rename.\n    if (classes.containsKey(clazz.name())) {\n        String newName = parent.name() + clazz.name();\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n    classes.put(clazz.name(), clazz);\n\n    // Finally update the container pointer so that clazz is now attached to its grandparent.\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}