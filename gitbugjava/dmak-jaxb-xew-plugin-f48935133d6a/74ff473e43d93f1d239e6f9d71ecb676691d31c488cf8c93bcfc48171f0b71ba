{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Save the original parent and grandparent containers\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    \n    // Remove the class from its original parent's containers first.\n    Map<String, JDefinedClass> origParentMap = getPrivateField(parent, \"classes\");\n    origParentMap.remove(clazz.name());\n\n    // Get the grandparent's container map for adding this class\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // Update schema component to reflect non-anonymous declaration\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // Check if name collision exists before putting into grandparent's map\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name()); // Set new name\n    }\n\n    // Add updated name to grandparent's classes map\n    classes.put(clazz.name(), clazz);\n\n    // Finally set outer container to grandparent\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}