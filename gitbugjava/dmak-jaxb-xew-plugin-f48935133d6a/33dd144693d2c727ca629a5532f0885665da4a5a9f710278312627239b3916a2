{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\t// Allows to track class name collisions:\n\t\tMap<String, JDefinedClass> classes;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tclasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tclasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration.\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// --- Start of fix for robust name collision handling ---\n\t\tString originalSimpleClassName = clazz.name(); // e.g., \"Inner\"\n\t\tString parentSimpleName = parent.name();       // e.g., \"Outer\"\n\n\t\tString effectiveClassName = originalSimpleClassName; // Proposed name starts with the original simple name\n\n\t\t// First, check if the original simple name conflicts with an existing class in the grandparent's scope\n\t\tif (classes.containsKey(effectiveClassName)) {\n\t\t\t// If it conflicts, try the \"parent name + original simple name\" strategy\n\t\t\teffectiveClassName = parentSimpleName + originalSimpleClassName;\n\n\t\t\t// If this new name also conflicts, we need to make it unique by appending a counter.\n\t\t\tString baseNameForCollision = effectiveClassName; // e.g., \"OuterInner\"\n\t\t\tint counter = 0;\n\t\t\t// Keep trying names until a unique one is found\n\t\t\twhile (classes.containsKey(effectiveClassName)) {\n\t\t\t\tcounter++;\n\t\t\t\teffectiveClassName = baseNameForCollision + \"_\" + counter; // e.g., \"OuterInner_1\", \"OuterInner_2\"\n\t\t\t}\n\t\t}\n\n\t\t// If the determined unique name is different from the class's current name, update the class's name.\n\t\t// This prevents unnecessary calls to setPrivateField if no renaming occurred.\n\t\tif (!effectiveClassName.equals(originalSimpleClassName)) {\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + effectiveClassName);\n\t\t\tsetPrivateField(clazz, \"name\", effectiveClassName);\n\t\t}\n\t\t// --- End of fix ---\n\n\t\t// Finally, add the class to the container's map using its now unique and updated name.\n\t\t// clazz.name() will now return the `effectiveClassName`.\n\t\tclasses.put(clazz.name(), clazz);\n\n\t\t// Finally modify the class so that it refers back the container:\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}