{
    "generation": "/**\n * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    }\n    else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        if ((clazz.mods().getValue() & JMod.STATIC) != 0) {\n            setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n        }\n    }\n\n    // First remove the class from its current parent's collection\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    if (parentClasses != null) {\n        parentClasses.remove(clazz.name());\n    }\n\n    // Handle potential name collision\n    String newName = clazz.name();\n    if (classes.containsKey(newName)) {\n        String originalName = newName;\n        newName = parent.name() + \"_\" + originalName;\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    classes.put(newName, clazz);\n\n    // Finally modify the class so that it refers back the container:\n    setPrivateField(clazz, \"outer\", grandParent);\n\n    // Also update the class in the outline if it exists there\n    for (ClassOutline classOutline : outline.getClasses()) {\n        if (classOutline.implClass == clazz) {\n            classOutline.implClass = clazz; // Force update of any cached references\n            break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}