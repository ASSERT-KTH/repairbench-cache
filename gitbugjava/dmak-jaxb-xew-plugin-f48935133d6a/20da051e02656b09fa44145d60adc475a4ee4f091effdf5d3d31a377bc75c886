{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Save the original name for collision checking.\n    String originalName = clazz.name();\n\n    // Get the immediate container (parent) and remove the inner class from its classes map.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(originalName);\n\n    // The grandparent container is either a class or a package.\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent.isClass()) {\n        // When moving to a class container:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        // When moving to a package container:\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Remove the STATIC modifier so that the class will compile at package level.\n        int newMods = clazz.mods().getValue() & ~JMod.STATIC;\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(newMods));\n\n        // Mark the corresponding schema component as non-anonymous.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                // Inner class is always a local declaration.\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // If the grandparent already has a class with the same name, rename this one.\n    if (classes.containsKey(originalName)) {\n        String newName = parent.name() + originalName;\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n    classes.put(clazz.name(), clazz);\n\n    // Finally, update the inner class so that its outer container now points to the grandparent.\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}