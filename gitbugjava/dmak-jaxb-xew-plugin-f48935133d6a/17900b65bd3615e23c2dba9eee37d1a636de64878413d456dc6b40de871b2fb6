{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\tString originalName = clazz.name(); // Store the original name\n\n\t\twriteSummary(\"\\tAttempting to move inner class \" + clazz.fullName() + \" one level up.\");\n\n\t\t// *** Fix: Remove the class from its original parent container first ***\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\tif (parentClasses != null) {\n\t\t\tif (parentClasses.remove(originalName) == null) {\n\t\t\t\t// Log a warning if the class wasn't found under the expected name, though processing continues.\n\t\t\t\twriteSummary(\"\\tWarning: Class \" + originalName + \" not found in parent \" + parent.fullName() + \"'s map during removal.\");\n\t\t\t} else {\n\t\t\t\twriteSummary(\"\\tRemoved \" + originalName + \" from parent class \" + parent.fullName());\n\t\t\t}\n\t\t} else {\n\t\t\t// Log a warning if the parent's classes map couldn't be accessed.\n\t\t\twriteSummary(\"\\tWarning: Could not retrieve classes map from parent \" + parent.fullName());\n\t\t}\n\n\t\t// Allows to track class name collisions in the grandparent:\n\t\tMap<String, JDefinedClass> grandParentClasses;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse { // Grandparent is a package\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\twriteSummary(\"\\tResetting static modifier for \" + clazz.name());\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration. This assumption might be fragile.\n\t\t\t\t\tif (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n\t\t\t\t\t\twriteSummary(\"\\tUpdating schema component for \" + clazz.name() + \" (setting anonymous=false)\");\n\t\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriteSummary(\"\\tWarning: Schema component for \" + clazz.name() + \" is not a local XSDeclaration as expected.\");\n\t\t\t\t\t\t// Keep assertion for development/debugging if needed, but handle gracefully otherwise\n\t\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) : \"Expected local XSDeclaration for inner class\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we could get the grandparent's classes map\n\t\tif (grandParentClasses == null) {\n\t\t\t throw new IllegalStateException(\"Could not retrieve classes map from grandparent: \" + grandParent.toString());\n\t\t}\n\n\n\t\t// Check for name collisions in the grandparent container\n\t\tString finalName = originalName;\n\t\tif (grandParentClasses.containsKey(originalName)) {\n\t\t\tfinalName = parent.name() + originalName; // Prepend original parent's name\n\t\t\twriteSummary(\"\\tRenaming class \" + originalName + \" to \" + finalName + \" due to collision in grandparent.\");\n\t\t\tsetPrivateField(clazz, \"name\", finalName);\n\t\t}\n\n\t\t// Add the class (with its final name) to the grandparent's map\n\t\tgrandParentClasses.put(clazz.name(), clazz);\n\t\twriteSummary(\"\\tAdded class \" + clazz.name() + \" to grandparent \" + (grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name()));\n\n\n\t\t// Finally modify the class so that it refers back the container:\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t\twriteSummary(\"\\tUpdated outer reference for class \" + clazz.name() + \" to point to grandparent.\");\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}