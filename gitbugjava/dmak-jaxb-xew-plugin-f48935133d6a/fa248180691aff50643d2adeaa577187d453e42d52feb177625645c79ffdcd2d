{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // The class we are moving and its current parent\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n\n    // We'll need this for collision\u2010detection in the new container\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent.isClass()) {\n        // Moving up into an enclosing class\n        JDefinedClass enclosing = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to class \" + enclosing.fullName());\n        classes = getPrivateField(enclosing, \"classes\");\n    } else {\n        // Moving up into the package\n        JPackage pkg = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to package \" + pkg.name());\n        classes = getPrivateField(pkg, \"classes\");\n\n        // Inner\u2010scoped element must no longer be static\n        setPrivateField(\n            clazz.mods(),\n            \"mods\",\n            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC)\n        );\n\n        // Mark the schema component as non\u2010anonymous\n        for (ClassOutline co : outline.getClasses()) {\n            if (co.implClass == clazz) {\n                XSComponent sc = co.target.getSchemaComponent();\n                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // ---- FIX: remove the class from its old parent so it isn't generated there too ----\n    Map<String, JDefinedClass> oldClasses = getPrivateField(parent, \"classes\");\n    oldClasses.remove(clazz.name());\n\n    // Handle name collisions in the new container\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName()\n                     + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    // Finally, register it in the new container and update its outer pointer\n    classes.put(clazz.name(), clazz);\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}