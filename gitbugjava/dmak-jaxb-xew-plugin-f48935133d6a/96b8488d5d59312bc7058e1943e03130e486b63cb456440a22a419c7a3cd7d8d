{
    "generation": "    private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n        // Modify the container so it now refers the class. Container can be a class or package.\n        JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n        JClassContainer grandParent = parent.parentContainer();\n        // Allows to track class name collisions:\n        Map<String, JDefinedClass> classes;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to \" + (grandParent.isClass() ? \"class \" + ((JDefinedClass) grandParent).fullName() : \"package \" + ((JPackage) grandParent).name()));\n\n        if (grandParent.isClass()) {\n            JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n            classes = getPrivateField(grandParentClass, \"classes\");\n\n            if (classes.containsKey(clazz.name())) {\n                writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n                setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n            }\n            classes.put(clazz.name(), clazz);\n        } else {\n            JPackage grandParentPackage = (JPackage) grandParent;\n            classes = getPrivateField(grandParentPackage, \"classes\");\n\n            // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n            setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n            if (classes.containsKey(clazz.name())) {\n                writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + parent.name() + clazz.name());\n                setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n            }\n            classes.put(clazz.name(), clazz);\n\n            for (ClassOutline classOutline : outline.getClasses()) {\n                if (classOutline.implClass == clazz) {\n                    XSComponent sc = classOutline.target.getSchemaComponent();\n\n                    // FIXME: Inner class is always a local declaration.\n                    assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n                    break;\n                }\n            }\n        }\n\n        // Finally modify the class so that it refers back the container:\n        setPrivateField(clazz, \"outer\", grandParent);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}