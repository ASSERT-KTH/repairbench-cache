{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // original parent container (must be a class)\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n\n    // 1) remove this class from the old container so it isn\u2019t generated twice\n    @SuppressWarnings(\"unchecked\")\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(clazz.name());\n\n    // 2) now pick up the classes\u2010map of the new container\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        JDefinedClass gpClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to class \" + gpClass.fullName());\n        classes = getPrivateField(gpClass, \"classes\");\n    } else {\n        JPackage gpPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to package \" + gpPackage.name());\n        classes = getPrivateField(gpPackage, \"classes\");\n\n        // reset the STATIC bit when promoting to a top\u2010level class\n        setPrivateField(clazz.mods(), \"mods\",\n                        Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // and mark its schema\u2010component as non\u2010anonymous so XJC uses the element name\n        for (ClassOutline co : outline.getClasses()) {\n            if (co.implClass == clazz) {\n                XSComponent sc = co.target.getSchemaComponent();\n                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // 3) if there's a name collision in the new container, rename\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName()\n                     + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    // 4) register the class under its new container\n    classes.put(clazz.name(), clazz);\n\n    // 5) finally fix the \"outer\" pointer so CodeModel generates it in the right place\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}