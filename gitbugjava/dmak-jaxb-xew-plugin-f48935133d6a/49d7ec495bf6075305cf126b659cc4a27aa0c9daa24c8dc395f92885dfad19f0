{
    "generation": "/**\n * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    String oldName = clazz.name();\n    String newName = oldName; // Will be changed if collision occurs\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    }\n    else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // Fix: Allow both local and global declarations (anonymous attribute exists only for XSDeclaration, not all XSComponent).\n                if (sc instanceof XSDeclaration) {\n                    XSDeclaration decl = (XSDeclaration) sc;\n                    // Only set anonymous if 'anonymous' field exists (for local).\n                    try {\n                        setPrivateField(decl, \"anonymous\", Boolean.FALSE);\n                    } catch (Exception e) {\n                        // Ignore if field missing, ensure continuation\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    // Rename only if there is a collision in the target context (grandParent)\n    if (classes.containsKey(newName)) {\n        newName = parent.name() + newName;\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    classes.put(newName, clazz);\n\n    // Finally modify the class so that it refers back the container:\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}