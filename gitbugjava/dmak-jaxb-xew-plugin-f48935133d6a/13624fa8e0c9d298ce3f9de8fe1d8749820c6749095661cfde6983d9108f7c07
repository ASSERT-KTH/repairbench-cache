{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Identify current parent and grand\u2010parent containers\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n\n    // Capture the parent\u2010classes map and the original simple name for later removal\n    @SuppressWarnings(\"unchecked\")\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    String originalName = clazz.name();\n\n    // Prepare the target container's classes map\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                     + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n        // Reset \"static\" modifier for a top\u2010level class\n        setPrivateField(\n            clazz.mods(),\n            \"mods\",\n            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC)\n        );\n    }\n\n    // Handle name collisions in the new container\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName()\n                     + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    // Insert into the grandparent's class map\n    classes.put(clazz.name(), clazz);\n\n    // Mark the corresponding XSDeclaration as non\u2010anonymous\n    for (ClassOutline co : outline.getClasses()) {\n        if (co.implClass == clazz) {\n            XSComponent sc = co.target.getSchemaComponent();\n            assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n            setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n            break;\n        }\n    }\n\n    // Remove from the original parent's class map\n    parentClasses.remove(originalName);\n\n    // Finally, update the class's outer\u2010container reference\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}