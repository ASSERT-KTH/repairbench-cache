{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be an inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Get the parent and grandparent containers\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// Remove clazz from the parent's classes map to prevent duplication\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\tif (parentClasses.containsKey(clazz.name())) {\n\t\t\tparentClasses.remove(clazz.name());\n\t\t}\n\n\t\t// Determine if the grandparent is a class or a package\n\t\tif (grandParent.isClass()) {\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\t// Get the grandparent's classes map\n\t\t\tMap<String, JDefinedClass> classes = getPrivateField(grandParentClass, \"classes\");\n\n\t\t\t// Check for class name collision in the grandparent\n\t\t\tif (classes.containsKey(clazz.name())) {\n\t\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + parent.name() + clazz.name());\n\t\t\t\tsetPrivateField(clazz, \"name\", parent.name() + clazz.name());\n\t\t\t}\n\n\t\t\t// Add the class to the grandparent's classes\n\t\t\tclasses.put(clazz.name(), clazz);\n\t\t} else {\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\t// Get the grandparent package's classes map\n\t\t\tMap<String, JDefinedClass> classes = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// Make sure the class is not static if moving to package\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\t// Check for class name collision in the package\n\t\t\tif (classes.containsKey(clazz.name())) {\n\t\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + parent.name() + clazz.name());\n\t\t\t\tsetPrivateField(clazz, \"name\", parent.name() + clazz.name());\n\t\t\t}\n\n\t\t\t// Add the class to the grandparent package's classes\n\t\t\tclasses.put(clazz.name(), clazz);\n\n\t\t\t// Update XML schema component if necessary\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\tif (sc instanceof XSDeclaration) {\n\t\t\t\t\t\tXSDeclarationxsdDecl = (XSDeclaration) sc;\n\t\t\t\t\t\txsdDecl.setAnonymous(false);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update the class's outer container\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t\tclazz.setParentContainer(grandParent);\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}