{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Get the current parent (the inner class\u2019s container)\u2026\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    // \u2026and remove the inner class from the parent's \"classes\" map,\n    // since it will be rehomed to its grandparent.\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(clazz.name());\n\n    // Get the grandparent container (it can be either a class or a package)\n    JClassContainer grandParent = parent.parentContainer();\n    // This map will track name collisions in the new container.\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent.isClass()) {\n        // If the grandparent is a class, we add the inner class as its member.\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        // Otherwise, the grandparent is a package.\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario, the inner class becomes a top\u2010level class,\n        // so remove the STATIC modifier (it would cause a compile error).\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                // FIXME: Inner class is always a local declaration.\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n                // Mark it as non-anonymous now that it is top-level.\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // Check for name collisions in the grandparent's \"classes\" map.\n    if (classes.containsKey(clazz.name())) {\n        String newName = parent.name() + clazz.name();\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Finally, update the inner class so that its container reference points to the grandparent.\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}