{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// Get the 'classes' map from the original parent to remove the class from.\n\t\t// Also, save the original simple name of the class, as it's the key in this map,\n\t\t// and the class's name might change due to collision resolution.\n\t\t@SuppressWarnings(\"unchecked\") // Type safety based on JCodeModel internals\n\t\tMap<String, JDefinedClass> originalParentClasses = getPrivateField(parent, \"classes\");\n\t\tString originalSimpleName = clazz.name();\n\n\t\t// 'classes' will refer to the map of classes in the grandparent container.\n\t\t// This variable name matches the one used in the original buggy code for this purpose.\n\t\tMap<String, JDefinedClass> classes;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tclasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse { // grandParent is JPackage\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tclasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration.\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle potential name collision in the new grandparent container.\n\t\t// At this point, clazz.name() is still its original simple name.\n\t\t// 'classes' here refers to the grandparent's class map.\n\t\tif (classes.containsKey(clazz.name())) {\n\t\t\t// If a collision exists, rename the class. New simple name: ParentSimpleName + OriginalSimpleName.\n\t\t\t// The summary uses clazz.fullName() (which reflects its original FQN) and the new simple name.\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n\t\t\t// Update the class's simple name. After this, clazz.name() returns the new simple name.\n\t\t\tsetPrivateField(clazz, \"name\", parent.name() + clazz.name());\n\t\t}\n\n\t\t// Remove the class from its original parent's list of inner classes.\n\t\t// This MUST be done using the original simple name as the key.\n\t\toriginalParentClasses.remove(originalSimpleName);\n\n\t\t// Add the class (with its, possibly new, simple name) to the grandparent's map of classes.\n\t\t// clazz.name() will return the new name if renaming occurred.\n\t\t// 'classes' refers to the grandparent's class map.\n\t\tclasses.put(clazz.name(), clazz);\n\n\t\t// Finally modify the class so that it refers back the container (its new outer class/package).\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}