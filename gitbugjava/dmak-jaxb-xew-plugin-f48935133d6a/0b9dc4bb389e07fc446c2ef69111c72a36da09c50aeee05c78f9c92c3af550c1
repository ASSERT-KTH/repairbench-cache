{
    "generation": "/**\n * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // FIXME: Inner class is always a local declaration.\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n                break;\n            }\n        }\n    }\n\n    // Ensure the class name is unique within the new container\n    String newClassName = clazz.name();\n    int suffix = 1;\n    while (classes.containsKey(newClassName)) {\n        newClassName = clazz.name() + suffix++;\n    }\n\n    if (!clazz.name().equals(newClassName)) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + newClassName);\n        setPrivateField(clazz, \"name\", newClassName);\n    }\n\n    classes.put(newClassName, clazz);\n\n    // Finally modify the class so that it refers back to the container:\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}