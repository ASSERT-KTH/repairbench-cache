{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// 1. Remove the class from its original parent container's list of inner classes.\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\tif (parentClasses.remove(clazz.name()) == null) {\n\t\t\t// This might happen if the internal structure has changed or if the assumptions are wrong.\n\t\t\t// Log a warning, but proceed as the main goal is adding it to the grandparent.\n\t\t\twriteSummary(\"\\tWarning: Class \" + clazz.fullName() + \" not found in parent \" + parent.fullName() + \"'s classes map during move.\");\n\t\t}\n\n\t\t// Allows to track class name collisions in the grandparent:\n\t\tMap<String, JDefinedClass> grandParentClasses; // Renamed for clarity\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\t// 2. Determine grandparent type and get its classes map.\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\t// Update schema component information if needed\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration.\n\t\t\t\t\t// Asserting this helps catch unexpected schema structures.\n\t\t\t\t\tif (sc instanceof XSDeclaration) {\n\t\t\t\t\t\tassert ((XSDeclaration) sc).isLocal() : \"Expected schema component for inner class to be local: \" + sc;\n\t\t\t\t\t\t// Mark the schema component as not anonymous anymore since it's moved up.\n\t\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriteSummary(\"\\tWarning: Schema component for \" + clazz.fullName() + \" is not an XSDeclaration: \" + (sc != null ? sc.getClass().getName() : \"null\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 3. Check for name collisions in the grandparent container and rename if necessary.\n\t\tString originalName = clazz.name();\n\t\tString finalName = originalName;\n\t\tif (grandParentClasses.containsKey(originalName)) {\n\t\t\tfinalName = parent.name() + originalName; // Use parent's name as prefix\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + finalName + \" due to collision in \" + (grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name()));\n\t\t\tsetPrivateField(clazz, \"name\", finalName);\n\t\t}\n\n\t\t// 4. Add the class (with its final name) to the grandparent's map.\n\t\tgrandParentClasses.put(finalName, clazz);\n\n\t\t// 5. Finally modify the class so that it refers back the container (grandparent).\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}