{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Original parent of clazz. Since clazz is an inner class, parent is a JDefinedClass.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\t// Grandparent container. Can be a JDefinedClass or JPackage.\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\t\n\t\t// --- FIX: Remove clazz from its original parent's list of inner classes ---\n        // Store the original simple name of clazz, as this is the key in the parent's map,\n        // and clazz.name() might be changed later by collision handling.\n        String originalSimpleName = clazz.name();\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\t// Remove the class using its original simple name from the parent's map.\n\t\tparentClasses.remove(originalSimpleName);\n\t\t// --- END FIX ---\n\n\t\t// This map will hold the classes of the grandparent.\n\t\t// (This variable was named 'classes' in the original code.)\n\t\tMap<String, JDefinedClass> classesInGrandParent;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957 (Comment from original code)\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tclassesInGrandParent = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse { // grandParent is a JPackage\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tclassesInGrandParent = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n            // (An inner class moved to be a top-level class in a package is no longer static inner nor non-static inner)\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration. (Comment from original code)\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n        // Handle name collision in the new container (grandparent).\n        // At this point, clazz.name() still returns the originalSimpleName, as its \"name\" field\n        // has not been changed yet. The check for collision uses this original name.\n\t\tif (classesInGrandParent.containsKey(clazz.name())) {\n            // If a collision occurs, the new simple name is formed by prefixing the parent's simple name.\n            // RHS clazz.name() correctly refers to originalSimpleName here.\n            String newSimpleName = parent.name() + clazz.name(); \n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newSimpleName);\n            // Update the internal \"name\" field of clazz. After this, clazz.name() will return newSimpleName.\n\t\t\tsetPrivateField(clazz, \"name\", newSimpleName);\n\t\t}\n        // If there was no collision, clazz.name() remains originalSimpleName.\n\n        // Add the class (with its final simple name) to the grandparent's map of classes.\n        // clazz.name() now correctly returns the final simple name (original, or new if renamed).\n\t\tclassesInGrandParent.put(clazz.name(), clazz);\n\n\t\t// Finally modify the class so that it refers back the container:\n        // Update internal \"outer\" field of clazz to point to the new parent (grandParent).\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}