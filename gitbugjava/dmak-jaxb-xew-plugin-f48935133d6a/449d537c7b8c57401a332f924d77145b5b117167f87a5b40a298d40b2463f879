{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// --- BEGIN FIX ---\n\t\t// Remove clazz from its original parent's inner classes map\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\tif (parentClasses != null) {\n\t\t\tparentClasses.remove(clazz.name());\n\t\t} else {\n\t\t\t// Log a warning or handle the case where the map couldn't be retrieved.\n\t\t\t// Depending on JCodeModel guarantees, this might indicate an error state.\n\t\t\t System.err.println(\"Warning: Could not retrieve 'classes' map from parent: \" + parent.fullName() + \" while moving \" + clazz.name());\n\t\t}\n\t\t// --- END FIX ---\n\n\t\t// Allows to track class name collisions in the grandparent container:\n\t\tMap<String, JDefinedClass> grandParentClasses;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Grandparent is a class\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\t// Grandparent is a package\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// When moved to a package, the class should no longer be static\n\t\t\t// Check if the class actually has the static modifier before trying to remove it\n\t\t\tif ((clazz.mods().getValue() & JMod.STATIC) != 0) {\n\t\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\t\t\t}\n\n\t\t\t// Update schema component information if possible\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\t// FIXME: Inner class is always a local declaration. Assumption: moving it makes it non-local/non-anonymous.\n\t\t\t\t\tif (sc instanceof XSDeclaration) { // && ((XSDeclaration) sc).isLocal()) { // Check removed as we are changing its nature\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t// Log or warn if setting the field fails, maybe the field name changed or is not present?\n\t\t\t\t\t\t\t System.err.println(\"Warning: Failed to set 'anonymous' field on schema component for \" + clazz.fullName() + \": \" + e.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t System.err.println(\"Warning: Schema component for moved class \" + clazz.fullName() + \" is not an XSDeclaration.\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak; // Found the corresponding ClassOutline, no need to continue loop\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure the grandparent classes map was retrieved before proceeding\n\t\tif (grandParentClasses == null) {\n\t\t\t System.err.println(\"Error: Could not retrieve 'classes' map from grandparent container: \" + grandParent.toString() + \". Cannot move class \" + clazz.fullName());\n\t\t\t // Depending on desired behavior, might throw an exception or return early.\n\t\t\t return;\n\t\t}\n\n\t\t// Handle potential name collision in the grandparent container\n\t\tString originalName = clazz.name();\n\t\tString finalName = originalName;\n\t\tif (grandParentClasses.containsKey(finalName)) {\n\t\t\t// If collision, prepend original parent's name to create a unique name\n\t\t\tfinalName = parent.name() + originalName;\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to avoid collision: new name is \" + finalName);\n\t\t\t// Update the class's name field itself via reflection\n\t\t\tsetPrivateField(clazz, \"name\", finalName);\n\t\t}\n\n\t\t// Add the class (with its final name) to the grandparent's map\n\t\tgrandParentClasses.put(finalName, clazz);\n\n\t\t// Finally modify the class so that its 'outer' field refers back the grandparent container:\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}