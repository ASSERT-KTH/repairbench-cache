{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\t// Allows to track class name collisions:\n\t\tMap<String, JDefinedClass> grandParentClasses;\n\t\t// Get parent's classes map to remove the class later\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\tString originalName = clazz.name(); // Store original name for removal\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\t// A class moved to package level becomes a top-level class. Remove static modifier.\n\t\t\tJMods mods = clazz.mods();\n\t\t\tsetPrivateField(mods, \"mods\", Integer.valueOf(mods.getValue() & ~JMod.STATIC));\n\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration? Re-evaluating assumption.\n\t\t\t\t\t// Check type before accessing potentially specific methods/fields\n\t\t\t\t\tif (sc instanceof XSDeclaration) {\n\t\t\t\t\t    XSDeclaration decl = (XSDeclaration) sc;\n\t\t\t\t\t    // Modification related to schema representation, might need adjustment based on JAXB internals.\n\t\t\t\t\t    // Assuming setting 'anonymous' to FALSE is required when moving to top level.\n                        // Original code asserted decl.isLocal(), which might be too strong.\n                        // Let's tentatively keep the modification but be aware it's fragile.\n\t\t\t\t\t    setPrivateField(decl, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\t}\n\t\t\t\t\tbreak; // Found the corresponding outline\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle potential name collision in the new container (grandparent)\n\t\tString finalName = originalName;\n\t\tif (grandParentClasses != null && grandParentClasses.containsKey(originalName)) {\n\t\t\tfinalName = parent.name() + originalName; // Prepend parent name for uniqueness\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + finalName);\n\t\t\tsetPrivateField(clazz, \"name\", finalName);\n\t\t}\n\n\t\t// Add the class to the new container (grandparent)\n\t\tif (grandParentClasses != null) {\n\t\t\tgrandParentClasses.put(finalName, clazz);\n\t\t} else {\n            // Log or handle error: could not get grandparent's classes map\n            writeSummary(\"\\tError: Could not retrieve grandparent's class map to add \" + finalName);\n            // Depending on desired behavior, might throw an exception or return here.\n        }\n\n\n\t\t// *** FIX START: Remove the class from the original parent container ***\n\t\tif (parentClasses != null) {\n\t\t\tparentClasses.remove(originalName); // Use original name for removal\n\t\t} else {\n\t\t\t// Log or handle error: could not get parent's classes map\n\t\t\twriteSummary(\"\\tWarning: Could not retrieve parent's class map to remove \" + originalName);\n\t\t}\n\t\t// *** FIX END ***\n\n\n\t\t// Finally modify the class so that it refers back the container:\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}