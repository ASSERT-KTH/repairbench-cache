{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Get the parent (the current container) and its container (the new container).\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // This map keeps track of the classes in the new container to detect name collisions.\n    Map<String, JDefinedClass> classes;\n\n    // When moving into a class container.\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    }\n    // When moving into a package container.\n    else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Remove the 'static' modifier; otherwise, the class won\u2019t compile in its new location.\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // Update the associated schema component so that the inner class is no longer considered anonymous.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                // Inner classes are always a local declaration.\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // If the new container already has a class by this name, rename the class.\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n    classes.put(clazz.name(), clazz);\n\n    // Finally, update the class so that its container is now the grandparent.\n    setPrivateField(clazz, \"outer\", grandParent);\n\n    // IMPORTANT: Remove the class from its old parent's collection of inner classes.\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    for (Iterator<Map.Entry<String, JDefinedClass>> it = parentClasses.entrySet().iterator(); it.hasNext();) {\n        Map.Entry<String, JDefinedClass> entry = it.next();\n        if (entry.getValue() == clazz) {\n            it.remove();\n            break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}