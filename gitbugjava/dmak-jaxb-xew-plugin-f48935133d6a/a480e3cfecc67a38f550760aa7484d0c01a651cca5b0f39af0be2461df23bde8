{
    "generation": "import java.util.Map;\nimport com.sun.codemodel.JClassContainer;\nimport com.sun.codemodel.JDefinedClass;\nimport com.sun.codemodel.JMod;\nimport com.sun.codemodel.JPackage;\nimport com.sun.tools.xjc.outline.ClassOutline;\nimport com.sun.tools.xjc.outline.Outline;\nimport com.sun.xml.xsom.XSComponent;\nimport com.sun.xml.xsom.XSDeclaration;\n\n// Assuming the context of a class where getPrivateField, setPrivateField, and writeSummary are defined.\n// import static ...ReflectionUtils.*; // If helpers are static methods\n\n\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// Get the internal \"classes\" map from the original parent container for removal later\n\t\t// Need reflection helper 'getPrivateField' which returns Map<String, JDefinedClass>\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\tString originalClassName = clazz.name(); // Store original name for removal and collision checks\n\n\t\t// Get the internal \"classes\" map from the target grandparent container\n\t\tMap<String, JDefinedClass> grandParentClasses;\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957 (dead link, implies reflection workaround)\n\t\tif (grandParent.isClass()) {\n\t\t\t// Grandparent is a class\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t} else {\n\t\t\t// Grandparent is a package\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// When moving to package level, the class becomes a top-level class.\n\t\t\t// JCodeModel might require the static flag removed internally when the outer container changes.\n\t\t\t// Use public API JMods.setMask() instead of reflection for mods field.\n\t\t\tclazz.mods().setMask(clazz.mods().getValue() & ~JMod.STATIC);\n\n\t\t\t// Update the corresponding schema component to reflect it's no longer anonymous/local\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\t// Original code asserted this, assuming it's correct.\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\t\t\t\t\t// Mark the schema component as not anonymous (it now has a top-level name)\n\t\t\t\t\t// Need reflection helper 'setPrivateField' for the 'anonymous' field of XSDeclaration\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 1. Remove the class from its original parent container's map using the original name\n\t\tif (parentClasses != null) {\n\t\t\tif (parentClasses.remove(originalClassName) == null) {\n\t\t\t\t// Log a warning if the class wasn't found in the parent map, which might indicate an inconsistency.\n\t\t\t\tSystem.err.println(\"Warning: Class \" + originalClassName + \" not found in parent container \" + parent.fullName() + \"'s map during move operation.\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Log a warning if reflection failed to get the parent's classes map.\n\t\t\tSystem.err.println(\"Warning: Could not retrieve 'classes' map from parent container: \" + parent.fullName());\n\t\t}\n\n\t\t// 2. Check for name collision in the *new* grandparent container and determine final name\n\t\tString finalName = originalClassName;\n\t\tif (grandParentClasses != null) {\n\t\t\tif (grandParentClasses.containsKey(finalName)) {\n\t\t\t\t// Collision exists, create a new name by prepending the original parent's name\n\t\t\t\tfinalName = parent.name() + originalClassName;\n\t\t\t\tString grandParentName = grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name();\n\t\t\t\twriteSummary(\"\\tName collision in \" + grandParentName + \". Renaming class \" + originalClassName + \" to \" + finalName);\n\t\t\t\t// Update the name field of the class object itself using reflection\n\t\t\t\tsetPrivateField(clazz, \"name\", finalName);\n\t\t\t}\n\t\t} else {\n\t\t\t// Log a warning if reflection failed to get the grandparent's classes map.\n\t\t\tString grandParentName = grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name();\n\t\t\tSystem.err.println(\"Warning: Could not retrieve 'classes' map from grandparent container: \" + grandParentName);\n\t\t\t// Proceeding without the map check might lead to issues.\n\t\t}\n\n\t\t// 3. Add the class (with its final name) to the grandparent's map\n\t\tif (grandParentClasses != null) {\n\t\t\tgrandParentClasses.put(finalName, clazz);\n\t\t}\n\t\t// Error/Warning already logged if grandParentClasses is null\n\n\t\t// 4. Finally modify the class's outer field to refer back to the grandparent container\n\t\t// Need reflection helper 'setPrivateField' for the 'outer' field\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}