{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Modify the container so it now refers the class. Container can be a class or package.\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\t// Allows to track class name collisions:\n\t\tMap<String, JDefinedClass> grandParentClasses; // Renamed from 'classes' in original for clarity\n\n        // Capture the original simple name of the class.\n        // This is needed to remove it correctly from its original parent's map of inner classes,\n        // especially if the class is renamed later due to a collision in the grandparent container.\n        String originalSimpleName = clazz.name();\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Element class should be added as its container child:\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse { // grandParent is JPackage\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\t// A top-level class cannot be static.\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t\t// FIXME: Inner class is always a local declaration.\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n        // Remove the class from its original parent's collection of inner classes.\n        // This uses reflection to access the parent's private \"classes\" map.\n        Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n        parentClasses.remove(originalSimpleName);\n        // Optionally, one might check if parentClasses.remove(originalSimpleName) returned null\n        // (meaning the class wasn't found), which would indicate an inconsistency.\n        // For now, we assume it's present and successfully removed.\n\n\t\t// Handle potential name collision in the new grandParent container.\n        // At this point, clazz.name() still returns the originalSimpleName.\n\t\tif (grandParentClasses.containsKey(clazz.name())) {\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n            // Update the name of the class itself. After this, clazz.name() will return the new name.\n\t\t\tsetPrivateField(clazz, \"name\", parent.name() + clazz.name());\n\t\t}\n\n        // Add the class (with its final, possibly new, name) to the grandParent's collection of classes.\n\t\tgrandParentClasses.put(clazz.name(), clazz);\n\n\t\t// Finally modify the class so that its 'outer' field refers back to the new container (grandParent).\n        // This change means clazz.parentContainer() will now return grandParent.\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}