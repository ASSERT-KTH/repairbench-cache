{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Original parent class of clazz\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\t// Grandparent container (class or package)\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// Store the original simple name of clazz, used for removing it from the original parent.\n\t\tString originalSimpleName = clazz.name();\n\t\t// Get the map of inner classes from the original parent.\n\t\t// This map needs to be modified to remove clazz.\n\t\tMap<String, JDefinedClass> parentInnerClasses = getPrivateField(parent, \"classes\");\n\n\t\t// Map of classes in the grandparent container. (This was named 'classes' in the original buggy code)\n\t\tMap<String, JDefinedClass> classes; // Variable name 'classes' matches original code for grandparent's children map\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957 (related to name collision strategies)\n\t\tif (grandParent.isClass()) {\n\t\t\t// Grandparent is a class.\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\t\t\tclasses = getPrivateField(grandParentClass, \"classes\");\n\t\t} else {\n\t\t\t// Grandparent is a package.\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\t\t\tclasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// When moving to a package, the class becomes a top-level class.\n\t\t\t// Top-level classes are not 'static'. If clazz was a static inner class, remove 'static'.\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\t// Adjust schema component properties for the class being moved.\n\t\t\t// This seems specific to the plugin's handling of XSD elements/types.\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\t// FIXME: Inner class is always a local declaration. This assert verifies an assumption.\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\t\t\t\t\t// If moved to package level, it's treated as non-anonymous.\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle potential name collisions in the grandparent container.\n\t\t// clazz.name() at this point is still originalSimpleName.\n\t\tif (classes.containsKey(clazz.name())) { // 'classes' here is grandParent's children map\n\t\t\tString newSimpleName = parent.name() + clazz.name(); // Construct new name, e.g., \"ParentNameOriginalName\"\n\t\t\t// Original log: \"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name()\n\t\t\t// Here, clazz.fullName() uses old outer and old name. parent.name() + clazz.name() is newSimpleName.\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newSimpleName);\n\t\t\tsetPrivateField(clazz, \"name\", newSimpleName); // Update clazz's simple name.\n\t\t}\n\n\t\t// Add clazz to the grandparent's map of child classes.\n\t\t// clazz.name() is now the (potentially new) simple name.\n\t\tclasses.put(clazz.name(), clazz); // 'classes' here is grandParent's children map\n\n\t\t// Update clazz's 'outer' reference to point to the grandparent.\n\t\t// This changes the class's scope and affects its fullName().\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\n\t\t// CRUCIAL FIX: Remove clazz from its original parent's map of inner classes.\n\t\t// Use originalSimpleName because clazz.name() might have been changed.\n\t\tif (parentInnerClasses != null) {\n\t\t\tparentInnerClasses.remove(originalSimpleName);\n\t\t} else {\n\t\t\t// This situation (parentInnerClasses being null) is generally not expected with JCodeModel.\n\t\t\t// Log a warning if it occurs, as the model might be in an unusual state.\n\t\t\t// Using a concise warning that implies the context from previous logs.\n\t\t\twriteSummary(\"\\t[Warning] Failed to remove \" + originalSimpleName + \" from original parent \" + parent.fullName() +\n\t\t\t\t\t\t \" (inner classes map not found).\");\n\t\t}\n\t}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}