{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz}\n * should be an inner class.\n */\n@SuppressWarnings(\"unchecked\")\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // First, detach it from its current parent so we don't end up generating it twice:\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    Map<String, JDefinedClass> parentClasses =\n        (Map<String, JDefinedClass>) getPrivateField(parent, \"classes\");\n    parentClasses.remove(clazz.name());\n\n    // Now compute the new container:\n    JClassContainer grandParent = parent.parentContainer();\n    // This will be the map into which we re\u2010register the class:\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        JDefinedClass gpClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                   + \" to class \" + gpClass.fullName());\n        classes = (Map<String, JDefinedClass>) getPrivateField(gpClass, \"classes\");\n    } else {\n        JPackage gpPkg = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName()\n                   + \" to package \" + gpPkg.name());\n        classes = (Map<String, JDefinedClass>) getPrivateField(gpPkg, \"classes\");\n\n        // Reset the STATIC modifier so it compiles as a top\u2010level class\n        int modBits = clazz.mods().getValue();\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(modBits & ~JMod.STATIC));\n\n        // If this class came from a local element declaration, mark it non\u2010anonymous\n        for (ClassOutline co : outline.getClasses()) {\n            if (co.implClass == clazz) {\n                XSComponent sc = co.target.getSchemaComponent();\n                // we expect this to be a local declaration\n                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // Avoid name collisions at the new level:\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName()\n                   + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    // Put it into its new container's class\u2010map:\n    classes.put(clazz.name(), clazz);\n\n    // Finally rewire its outer pointer:\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}