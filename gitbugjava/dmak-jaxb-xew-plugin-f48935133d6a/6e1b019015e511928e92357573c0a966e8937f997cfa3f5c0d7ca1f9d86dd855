{
    "generation": "\t/**\n\t * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n\t */\n\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\t// Get parent and grandparent\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\n\t\t// 1. Remove class from its original parent container\n\t\t// Use the original name before any potential renaming\n\t\tString originalName = clazz.name();\n\t\tMap<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\t\tif (parentClasses.remove(originalName) == null) {\n\t\t\t// This might happen if the class was already moved or structure is unexpected\n\t\t\twriteSummary(\"\\tWarning: Class \" + clazz.fullName() + \" not found in its original parent \" + parent.fullName() + \" during move operation.\");\n\t\t\t// Depending on exact semantics, might want to log more details or even throw\n\t\t}\n\n\t\t// Allows to track class name collisions in the grandparent:\n\t\tMap<String, JDefinedClass> grandParentClasses;\n\t\tString finalName = originalName; // The name to use in the grandparent container\n\n\t\t// FIXME: Pending https://java.net/jira/browse/JAXB-957\n\t\tif (grandParent.isClass()) {\n\t\t\t// Grandparent is a class\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\t\t\tgrandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\t// Grandparent is a package\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\t\t\tgrandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t\t// In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n\t\t\t// Moving to package makes it a top-level class (or effectively static nested within package scope).\n\t\t\t// Top-level classes aren't explicitly declared 'static'. JCodeModel might represent this\n\t\t\t// by removing the JMod.STATIC flag.\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n\t\t\t// Update schema component info if possible\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\t// Check if sc is available and is a local declaration before modification\n\t\t\t\t\tif (sc instanceof XSDeclaration) {\n\t\t\t\t\t\tXSDeclaration decl = (XSDeclaration) sc;\n\t\t\t\t\t\t// FIXME: Inner class is always a local declaration? Check before assuming.\n\t\t\t\t\t\tif (decl.isLocal()) {\n\t\t\t\t\t\t\t// If it was considered local/anonymous, mark it as not anonymous anymore\n\t\t\t\t\t\t\t// as it's being moved to a higher level scope.\n\t\t\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Found the corresponding outline, no need to check further\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 2. Check for name collisions in the grandparent container and rename if necessary\n\t\tif (grandParentClasses.containsKey(originalName)) {\n\t\t\tfinalName = parent.name() + originalName; // Prepend parent's name for uniqueness\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + finalName + \" due to collision in \" + (grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name()));\n\t\t\tsetPrivateField(clazz, \"name\", finalName);\n\t\t\t// Note: clazz.name() will now return finalName\n\t\t}\n\n        // 3. Add the class (with its final name) to the grandparent container's map\n        // grandParentClasses is the map retrieved via reflection earlier\n        grandParentClasses.put(finalName, clazz);\n\n\t\t// 4. Finally modify the class so that it refers back the container:\n\t\t// Update the 'outer' field to point to the new container (grandParent)\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}