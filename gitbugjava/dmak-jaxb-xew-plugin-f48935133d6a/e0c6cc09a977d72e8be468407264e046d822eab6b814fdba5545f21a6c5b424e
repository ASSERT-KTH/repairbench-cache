{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Obtain the current container hierarchy\n    JClassContainer parent = clazz.parentContainer();\n    JClassContainer grandParent;\n\n    // Support nested inner classes (more than 1 level), climb levels until grandparent is not a JDefinedClass\n    if (parent instanceof JDefinedClass) {\n        grandParent = ((JDefinedClass) parent).parentContainer();\n    } else {\n        // Defensive fallback (should normally not happen)\n        return;\n    }\n    // We'll update the grandparent's class map\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Clear STATIC modifier after moving to package (otherwise invalid code)\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // Inner class is always a local declaration\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // Remove from old parent's inner class map\n    Map<String, JDefinedClass> parentClasses = null;\n    if (parent instanceof JDefinedClass) {\n        parentClasses = getPrivateField((JDefinedClass) parent, \"classes\");\n    } else if (parent instanceof JPackage) {\n        parentClasses = getPrivateField((JPackage) parent, \"classes\");\n    }\n    if (parentClasses != null) {\n        parentClasses.remove(clazz.name());\n    }\n\n    // Rename if collision\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Update the container of the class\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}