{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // First, remove the inner class from its current (parent) container.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(clazz.name());\n\n    // Now pick up the new (grandparent) container.\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // If the grandparent is a class then add the inner class as that class\u2019s member.\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // For package-level classes, remove the \"static\" modifier (top level classes cannot be static)\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // Mark the associated schema component as a non-local declaration.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                // FIXME: Inner class is always a local declaration.\n                assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // Resolve name collisions in the new container.\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n    classes.put(clazz.name(), clazz);\n\n    // Finally, update the inner class so that it now refers to its new container.\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}