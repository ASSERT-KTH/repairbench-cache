{
    "generation": "    @Override\n    protected Object decodeAvrmc(\n            String sentence, Channel channel, SocketAddress remoteAddress) {\n\n        // Only handle AVRMC sentences\n        if (!sentence.startsWith(\"$AVRMC,\")) {\n            return null;\n        }\n\n        // Separate data part and checksum\n        int asteriskIndex = sentence.indexOf('*');\n        String data = sentence;\n        String checksum = null;\n        if (asteriskIndex >= 0) {\n            data = sentence.substring(0, asteriskIndex);\n            checksum = sentence.substring(asteriskIndex + 1);\n        }\n\n        // Split fields by comma\n        String[] parts = data.split(\",\");\n        // We need at least 16 fields to parse a position\n        if (parts.length < 16) {\n            return null;\n        }\n\n        // Device session\n        String uniqueId = parts[1];\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, uniqueId);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        // Determine device model (for ADC2 handling)\n        String deviceModel = null;\n        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n        if (device != null) {\n            deviceModel = device.getModel();\n        }\n\n        // Create position\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        //\n        // 1. Date and Time\n        //\n        // Time is hhmmss\n        String timeStr = parts[2];\n        int hour = 0, minute = 0, second = 0;\n        if (timeStr.length() >= 6) {\n            hour = Integer.parseInt(timeStr.substring(0, 2));\n            minute = Integer.parseInt(timeStr.substring(2, 4));\n            second = Integer.parseInt(timeStr.substring(4, 6));\n        }\n        // Date is ddmmyy\n        String dateStr = parts[10];\n        int day = 0, month = 0, year = 0;\n        if (dateStr.length() >= 6) {\n            day = Integer.parseInt(dateStr.substring(0, 2));\n            month = Integer.parseInt(dateStr.substring(2, 4));\n            year = Integer.parseInt(dateStr.substring(4, 6));\n        }\n        DateBuilder dateBuilder = new DateBuilder()\n                .setTime(hour, minute, second)\n                .setDateReverse(day, month, year);\n        position.setTime(dateBuilder.getDate());\n\n        //\n        // 2. Status\n        //\n        String status = parts[3];\n        String upperStatus = status.toUpperCase();\n        boolean valid = upperStatus.equals(\"A\")\n                || upperStatus.equals(\"R\")\n                || upperStatus.equals(\"P\");\n        position.setValid(valid);\n        position.set(Position.KEY_STATUS, status);\n\n        //\n        // 3. Coordinates\n        //\n        double latitude = 0.0;\n        try {\n            double rawLat = Double.parseDouble(parts[4]);\n            int latDeg = (int) (rawLat / 100);\n            double latMin = rawLat - latDeg * 100;\n            latitude = latDeg + latMin / 60;\n            if (\"S\".equals(parts[5])) {\n                latitude = -latitude;\n            }\n        } catch (Exception ignore) {\n        }\n        position.setLatitude(latitude);\n\n        double longitude = 0.0;\n        try {\n            double rawLon = Double.parseDouble(parts[6]);\n            int lonDeg = (int) (rawLon / 100);\n            double lonMin = rawLon - lonDeg * 100;\n            longitude = lonDeg + lonMin / 60;\n            if (\"W\".equals(parts[7])) {\n                longitude = -longitude;\n            }\n        } catch (Exception ignore) {\n        }\n        position.setLongitude(longitude);\n\n        //\n        // 4. Speed & Course\n        //\n        try {\n            position.setSpeed(Double.parseDouble(parts[8]));\n        } catch (Exception ignore) {\n        }\n        try {\n            position.setCourse(Double.parseDouble(parts[9]));\n        } catch (Exception ignore) {\n        }\n\n        //\n        // 5. Event\n        //\n        String event = parts[11];\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n        //\n        // 6. Battery\n        //\n        try {\n            String batt = parts[12].replaceAll(\"\\\\.\", \"\");\n            position.set(Position.KEY_BATTERY, Double.parseDouble(batt) * 0.001);\n        } catch (Exception ignore) {\n        }\n\n        //\n        // 7. Odometer\n        //\n        try {\n            position.set(Position.KEY_ODOMETER, Double.parseDouble(parts[13]) * 1000);\n        } catch (Exception ignore) {\n        }\n\n        //\n        // 8. GPS satellites\n        //\n        try {\n            position.set(Position.KEY_GPS, Integer.parseInt(parts[14]));\n        } catch (Exception ignore) {\n        }\n\n        //\n        // 9. ADC1\n        //\n        try {\n            position.set(Position.PREFIX_ADC + 1, Double.parseDouble(parts[15]) * 0.001);\n        } catch (Exception ignore) {\n        }\n\n        //\n        // 10. ADC2 for specific models\n        //\n        int index = 16;\n        if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n            if (parts.length > index) {\n                try {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(parts[index]) * 0.001);\n                } catch (Exception ignore) {\n                }\n            }\n            index++;\n        }\n\n        //\n        // 11. Network (lac, cid, mcc, mnc) if present and non-zero\n        //\n        if (parts.length >= index + 4) {\n            try {\n                int lac = Integer.parseInt(parts[index], 16);\n                int cid = Integer.parseInt(parts[index + 1], 16);\n                int mcc = Integer.parseInt(parts[index + 2]);\n                int mnc = Integer.parseInt(parts[index + 3]);\n                if (lac != 0 && cid != 0) {\n                    position.setNetwork(new Network(\n                            CellTower.from(mcc, mnc, lac, cid)));\n                }\n            } catch (Exception ignore) {\n            }\n        }\n\n        //\n        // 12. Acknowledge & Event response\n        //\n        if (channel != null) {\n            sendAcknowledge(status, event, checksum, channel, remoteAddress);\n            String devicePassword = AttributeUtil.getDevicePassword(\n                    getCacheManager(), deviceSession.getDeviceId(),\n                    getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n            sendEventResponse(event, devicePassword, channel, remoteAddress);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}