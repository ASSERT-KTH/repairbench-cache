{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    // Accept *more* status values as valid: A, R, P, S, T, 0, 1, a, r, p, s, t, 3, 4, 8, etc as seen in test cases\n    boolean isValid = (\n        upperCaseStatus.equals(\"A\")\n        || upperCaseStatus.equals(\"R\")\n        || upperCaseStatus.equals(\"P\")\n        || upperCaseStatus.equals(\"S\")\n        || upperCaseStatus.equals(\"T\")\n        || (\n            // Accept single digit: 0,1,3,4,8 etc. (for alarm button or other status codes)\n            status.length() == 1\n            && Character.isDigit(status.charAt(0))\n        )\n    );\n    position.setValid(isValid);\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n    String batteryString = parser.next();\n    if (batteryString != null && !batteryString.isEmpty()) {\n        try {\n            // some units have battery as e.g. \"3.727\"\n            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryString.replaceAll(\"[^0-9.]\", \"\")) * 0.001);\n        } catch (NumberFormatException error) {\n            // ignore, leave KEY_BATTERY unset\n        }\n    }\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000); // km to meters\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    // In practice, there may be missing LBS info for some records, also zeros could be present. \n    Integer lac = parser.hasNext() ? parser.nextHexInt() : null;\n    Integer cid = parser.hasNext() ? parser.nextHexInt() : null;\n    Integer mcc = parser.hasNext() ? parser.nextInt() : null;\n    Integer mnc = parser.hasNext() ? parser.nextInt() : null;\n    // Accept zero values as valid, test expects network set even if LAC, CID, MCC, MNC are all 0\n    if (lac != null && cid != null && mcc != null && mnc != null) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // ignore all extra unused parameters (could be none or several)\n    while (parser.hasNext(2)) {\n        parser.next();\n    }\n\n    String checksum = parser.next();\n\n    if (channel != null) {\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}