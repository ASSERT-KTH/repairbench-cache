{
    "generation": "    protected Object decodeAvrmc(\n            String sentence, Channel channel, SocketAddress remoteAddress) {\n\n        // PATTERN_AVRMC = new PatternBuilder()\n        //         ...\n        //         .number(\"(d+.?d*),\")             // 15: Odometer (km)\n        //         .number(\"([01]),\")               // 16: GPS Fix Status\n        //         .number(\"([01]),\")               // 17: Mode\n        //         .number(\"([01])\")                // 18: IO Status\n        //         .optional(5, \",\")                // Optional separator for network info\n        //         .number(\"(xxxx),\")               // 19: LAC (Hex)\n        //         .number(\"(xxxx),\")               // 20: CID (Hex)\n        //         .number(\"(d+),\")                 // 21: MCC\n        //         .number(\"(d+)\")                  // 22: MNC\n        //         .optional(6, \",\")                // Optional separator for unused field\n        //         .number(\"(d*)\")                  // 23: Unused\n        //         .text(\"*\")\n        //         .number(\"(xx)\")                  // 24: Checksum\n        //         .compile();\n\n        Parser parser = new Parser(PATTERN_AVRMC, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        DeviceSession deviceSession =\n            getDeviceSession(channel, remoteAddress, parser.next()); // 1: ID\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0)); // 2: Time\n\n        String status = parser.next(); // 3: Status\n        String upperCaseStatus = status.toUpperCase();\n        position.setValid(upperCaseStatus.equals(\"A\") || upperCaseStatus.equals(\"R\") || upperCaseStatus.equals(\"P\"));\n        position.set(Position.KEY_STATUS, status);\n\n        position.setLatitude(parser.nextCoordinate());  // 4, 5, 6\n        position.setLongitude(parser.nextCoordinate()); // 7, 8, 9\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0))); // 10: Speed (KPH -> Knots)\n        position.setCourse(parser.nextDouble(0));     // 11: Course\n\n        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0)); // 12: Date\n        position.setTime(dateBuilder.getDate());\n\n        String event = parser.next(); // 13: Event\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        // Pass model safely\n        position.set(Position.KEY_EVENT, decodeEvent(event, position, device != null ? device.getModel() : null));\n\n        // 14: Battery (handles \"3.727\" and \"4076\" formats -> Volts)\n        position.set(Position.KEY_VOLTAGE, Double.parseDouble(parser.next().replaceAll(\"\\\\.\", \"\")) * 0.001);\n\n        // 15: Odometer (Pattern: d+.?d*, assuming km -> m conversion)\n        position.set(Position.KEY_ODOMETER, (long) (parser.nextDouble(0) * 1000)); // Store as Long meters\n\n        // 16: GPS Fix Status (Pattern: [01])\n        position.set(Position.KEY_GPS, parser.nextInt(0));\n\n        // 17: Mode (Pattern: [01]) - Consume but not stored, previously misinterpreted as ADC1\n        parser.skip(1);\n\n        // 18: IO Status (Pattern: [01]) - Store if available, previously misinterpreted as ADC2\n        Integer ioStatus = parser.nextInt();\n        if (ioStatus != null) {\n            position.set(Position.KEY_INPUT, ioStatus); // Use KEY_INPUT for general IO status\n        }\n\n        // Network Info (Optional Groups 19-22)\n        Integer lac = parser.nextHexInt();\n        Integer cid = parser.nextHexInt();\n        Integer mcc = parser.nextInt();\n        Integer mnc = parser.nextInt();\n        // Add check for null and 0 MCC/MNC which indicates invalid/unavailable network info\n        if (mcc != null && mnc != null && mcc != 0 && mnc != 0 && lac != null && cid != null) {\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n        }\n\n        parser.next(); // 23: unused field\n\n        String checksum = parser.next(); // 24: checksum\n\n        if (channel != null) {\n            sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n            String devicePassword = AttributeUtil.getDevicePassword(\n                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n            sendEventResponse(event, devicePassword, channel, remoteAddress);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}