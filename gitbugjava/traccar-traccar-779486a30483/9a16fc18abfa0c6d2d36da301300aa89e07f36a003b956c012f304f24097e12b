{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    // Accept 'A', 'R', 'P', but DO NOT accept 'V' or 'v' as valid\n    // Accept all except 'V'\n    // Actually, only 'V' or 'v' is invalid, everything else is valid\n    position.setValid(!(upperCaseStatus.equals(\"V\")));\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n    // Handle battery field: some variants, e.g., \"3.727\" should parse directly, other variants use integer mV\n    String batteryField = parser.next();\n    try {\n        if (batteryField.contains(\".\")) {\n            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryField));\n        } else {\n            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryField.replaceAll(\"\\\\.\", \"\")) * 0.001);\n        }\n    } catch (Throwable error) {\n        // just ignore\n    }\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    // Only set cell info if all are not null and not zero (some packets send all zeros)\n    if (lac != null && cid != null && mcc != null && mnc != null\n            && lac != 0 && cid != 0 && mcc != 0 && mnc != 0) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Skip all remaining fields (ending fields, -- the last could be checksum, possibly with ',' present)\n    // Previous code: parser.next(); // unused\n    // We must ensure the last available field is the checksum if it hasn't been read yet\n    // Try to consume the checksum as the last \"next\"\n    // If parser still has any tokens left, the last is the checksum\n    String checksum = null;\n    while (parser.hasNext()) {\n        checksum = parser.next();\n    }\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}