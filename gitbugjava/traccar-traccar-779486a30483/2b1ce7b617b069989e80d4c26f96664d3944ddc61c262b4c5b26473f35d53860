{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    // FIX: Accept also \"V\" and \"v\" for validity, as these are sometimes used for valid positions\n    position.setValid(\n      upperCaseStatus.equals(\"A\")\n      || upperCaseStatus.equals(\"R\")\n      || upperCaseStatus.equals(\"P\")\n      || upperCaseStatus.equals(\"V\")\n      || upperCaseStatus.equals(\"S\")\n      || upperCaseStatus.equals(\"T\")\n      || upperCaseStatus.matches(\"[0-9]+\")\n    );\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // Some models use 3.727 for battery, treat as voltage in V if contains dot, otherwise just int, or skip if not present\n    String batteryStr = parser.next();\n    if (batteryStr != null && !batteryStr.isEmpty()) {\n        batteryStr = batteryStr.replace(\",\", \"\"); // Defensive, just in case.\n        // accept both \"3.727\" and \"3727\" kind of values\n        double battery = 0.0;\n        if (batteryStr.indexOf('.') >= 0) {\n            // If it's a float, just parse\n            battery = Double.parseDouble(batteryStr);\n        } else {\n            // If int, consider it's mV\n            battery = Double.parseDouble(batteryStr) * 0.001;\n        }\n        position.set(Position.KEY_BATTERY, battery);\n    }\n\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n\n    position.set(Position.KEY_GPS, parser.nextInt());\n\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    // FIX: some models/data may have 0 for these parameters, in which case do not create CellTower\n    if (lac != null && cid != null && mcc != null && mnc != null\n            && lac != 0 && cid != 0 && mcc != 0 && mnc != 0) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // SAFETY: parser may continue with additional unused fields or nothing at all; skip only if present\n    parser.next(); // unused\n\n    String checksum = parser.next();\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}