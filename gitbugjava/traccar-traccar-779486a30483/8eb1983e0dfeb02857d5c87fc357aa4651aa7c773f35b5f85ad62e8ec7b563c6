{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    // Accept 'A', 'R', 'P', and *also* lower/upper 'a', 'r', 'p'\n    position.setValid(\n        upperCaseStatus.equals(\"A\") ||\n        upperCaseStatus.equals(\"R\") ||\n        upperCaseStatus.equals(\"P\")\n    );\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    String batteryString = parser.next();\n    Double batteryLevel;\n    try {\n        batteryLevel = Double.parseDouble(batteryString);\n    } catch (NumberFormatException nfe) {\n        // Try to correct battery string like \"3.727\" or \"3804\"\n        try {\n            batteryLevel = Double.parseDouble(batteryString.replaceAll(\"\\\\.\", \"\")) * 0.001;\n        } catch (NumberFormatException nfe2) {\n            batteryLevel = null;\n        }\n    }\n    if (batteryLevel != null && batteryLevel > 10) {\n        // If the value looks too high, format is probably in mV\n        batteryLevel *= 0.001;\n    }\n    position.set(Position.KEY_BATTERY, batteryLevel);\n\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    // Try to parse cellular info, but only if present and valid\n    Integer lac = null, cid = null, mcc = null, mnc = null;\n    // Check how many params left\n    int paramsLeft = parser.getMatch().groupCount() - parser.getIndex() + 1;\n    if (paramsLeft >= 4) {\n        lac = parser.nextHexInt();\n        cid = parser.nextHexInt();\n        mcc = parser.nextInt();\n        mnc = parser.nextInt();\n    } else if (paramsLeft >= 2) {\n        lac = parser.nextHexInt();\n        cid = parser.nextHexInt();\n    }\n    if (lac != null && cid != null && mcc != null && mnc != null) {\n        // Accept even if some of these are zero (to match test)\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Consume remaining params, as protocol may append more fields or zeros, and checksum\n    while (parser.hasNext(2)) { // last field should be checksum\n        String field = parser.next();\n        if (field != null && field.matches(\"^[A-Fa-f0-9]{2,}\\\\*?[A-Fa-f0-9]{2,}$\")) {\n            // Probably checksum, break\n            break;\n        }\n    }\n\n    String checksum = parser.next();\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}