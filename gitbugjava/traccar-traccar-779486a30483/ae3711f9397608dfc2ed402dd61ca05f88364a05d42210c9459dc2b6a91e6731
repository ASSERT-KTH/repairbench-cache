{
    "generation": "protected Object decodeAvrmc(String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    String s = sentence.trim();\n    // Only handle AVRMC sentences\n    if (!s.startsWith(\"$AVRMC\")) {\n        return null;\n    }\n    // Split off checksum\n    String checksum = null;\n    int asteriskIndex = s.indexOf('*');\n    if (asteriskIndex != -1) {\n        checksum = s.substring(asteriskIndex + 1);\n        s = s.substring(0, asteriskIndex);\n    }\n    // Split fields by comma\n    String[] parts = s.split(\",\");\n    // We need at least: type,id,time,status,lat,NS,lon,EW,speed,course,date,event\n    if (parts.length < 12) {\n        return null;\n    }\n    // Device session\n    String id = parts[1];\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n    // Device model (for ADC2)\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n    // Prepare position\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    // Parse time hhmmss\n    int hour = 0, minute = 0, second = 0;\n    String timeStr = parts[2];\n    if (timeStr.length() >= 6) {\n        try {\n            hour = Integer.parseInt(timeStr.substring(0, 2));\n            minute = Integer.parseInt(timeStr.substring(2, 4));\n            second = Integer.parseInt(timeStr.substring(4, 6));\n        } catch (NumberFormatException e) {\n            // ignore, default to 0\n        }\n    }\n    // Parse status (validity)\n    String status = parts[3];\n    String upperStatus = status.toUpperCase();\n    boolean valid = upperStatus.equals(\"A\") || upperStatus.equals(\"R\") || upperStatus.equals(\"P\");\n    position.setValid(valid);\n    position.set(Position.KEY_STATUS, status);\n    // Parse latitude\n    double latitude = 0.0;\n    if (parts.length > 5) {\n        try {\n            double latVal = Double.parseDouble(parts[4]);\n            int latDeg = (int) (latVal / 100);\n            double latMin = latVal - latDeg * 100;\n            latitude = latDeg + latMin / 60.0;\n            if (\"S\".equals(parts[5])) {\n                latitude = -latitude;\n            }\n        } catch (Exception e) {\n            // ignore\n        }\n    }\n    // Parse longitude\n    double longitude = 0.0;\n    if (parts.length > 7) {\n        try {\n            double lonVal = Double.parseDouble(parts[6]);\n            int lonDeg = (int) (lonVal / 100);\n            double lonMin = lonVal - lonDeg * 100;\n            longitude = lonDeg + lonMin / 60.0;\n            if (\"W\".equals(parts[7])) {\n                longitude = -longitude;\n            }\n        } catch (Exception e) {\n            // ignore\n        }\n    }\n    position.setLatitude(latitude);\n    position.setLongitude(longitude);\n    // Speed\n    if (parts.length > 8) {\n        try {\n            position.setSpeed(Double.parseDouble(parts[8]));\n        } catch (Exception e) {\n        }\n    }\n    // Course\n    if (parts.length > 9) {\n        try {\n            position.setCourse(Double.parseDouble(parts[9]));\n        } catch (Exception e) {\n        }\n    }\n    // Build date/time\n    DateBuilder dateBuilder = new DateBuilder()\n        .setTime(hour, minute, second);\n    if (parts.length > 10) {\n        String dateStr = parts[10];\n        if (dateStr.length() == 6) {\n            try {\n                int day = Integer.parseInt(dateStr.substring(0, 2));\n                int month = Integer.parseInt(dateStr.substring(2, 4));\n                int year = Integer.parseInt(dateStr.substring(4, 6));\n                dateBuilder.setDateReverse(day, month, year);\n            } catch (Exception e) {\n                // ignore\n            }\n        }\n    }\n    position.setTime(dateBuilder.getDate());\n    // Event / alarm\n    String event = parts.length > 11 ? parts[11] : null;\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n    // Battery (mV -> V)\n    if (parts.length > 12) {\n        try {\n            String b = parts[12].replaceAll(\"\\\\.\", \"\");\n            position.set(Position.KEY_BATTERY, Double.parseDouble(b) * 0.001);\n        } catch (Exception e) {\n        }\n    }\n    // Odometer (km -> m)\n    if (parts.length > 13) {\n        try {\n            position.set(Position.KEY_ODOMETER, Double.parseDouble(parts[13]) * 1000);\n        } catch (Exception e) {\n        }\n    }\n    // GPS count / fix\n    if (parts.length > 14) {\n        try {\n            position.set(Position.KEY_GPS, Integer.parseInt(parts[14]));\n        } catch (Exception e) {\n        }\n    }\n    // ADC1\n    if (parts.length > 15) {\n        try {\n            position.set(Position.PREFIX_ADC + 1, Double.parseDouble(parts[15]) * 0.001);\n        } catch (Exception e) {\n        }\n    }\n    int index = 16;\n    // ADC2 for specific models\n    if ((\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) && parts.length > index) {\n        try {\n            position.set(Position.PREFIX_ADC + 2, Double.parseDouble(parts[index]) * 0.001);\n        } catch (Exception e) {\n        }\n        index++;\n    }\n    // Network (LAC,CID,MCC,MNC)\n    if (parts.length > index + 3) {\n        try {\n            int lac = Integer.parseInt(parts[index], 16);\n            int cid = Integer.parseInt(parts[index + 1], 16);\n            int mcc = Integer.parseInt(parts[index + 2]);\n            int mnc = Integer.parseInt(parts[index + 3]);\n            if (lac > 0 && cid > 0 && mcc > 0 && mnc > 0) {\n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n            }\n        } catch (Exception e) {\n            // ignore\n        }\n    }\n    // Acknowledge / response\n    if (channel != null) {\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n        String devicePassword = AttributeUtil.getDevicePassword(\n            getCacheManager(), deviceSession.getDeviceId(),\n            getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}