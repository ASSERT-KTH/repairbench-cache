{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    position.set(Position.KEY_STATUS, status);\n    // Fix: accept any single character as semi-valid, e.g., per test data '3', '4', 'X', 'H', 'T', etc.\n    // Original code accepted only A, R, P\n    // According to NMEA, 'A' valid, 'V' invalid, but this protocol uses other extra chars\n    // Since the tests expect valid=true for anything except 'v'/'V'\n    // The safe way is to consider only 'v' or 'V' as invalid, everything else as valid\n    position.setValid(!upperCaseStatus.equals(\"V\"));\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    String batteryStr = parser.next();\n    if (batteryStr != null && !batteryStr.isEmpty()) {\n        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr.replaceAll(\"\\\\.\", \"\")) * 0.001);\n    }\n\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    if (lac != null && cid != null && mcc != null && mnc != null\n            && lac != 0 && cid != 0 && mcc != 0 && mnc != 0) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Skip rest of trailing optional parameters\n    while (parser.hasNext()) {\n        parser.next();\n    }\n\n    // Optionally, parse checksum, but it's not needed\n    // As per pattern, checksum has been excluded, so no need\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, null, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}