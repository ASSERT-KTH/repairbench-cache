{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    position.setValid(\n        upperCaseStatus.equals(\"A\") ||\n        upperCaseStatus.equals(\"R\") ||\n        upperCaseStatus.equals(\"P\") ||\n        upperCaseStatus.equals(\"a\") ||\n        upperCaseStatus.equals(\"S\") ||\n        upperCaseStatus.equals(\"T\") ||\n        upperCaseStatus.equals(\"3\") ||\n        upperCaseStatus.equals(\"X\") ||\n        upperCaseStatus.equals(\"4\") ||\n        upperCaseStatus.equals(\"H\") ||\n        upperCaseStatus.equals(\"p\") ||\n        upperCaseStatus.equals(\"P\")\n    );\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // Battery (can be missing or formatted with a dot or just integer)\n    String batteryString = parser.next();\n    double batteryValue = 0.0;\n    if (batteryString != null && !batteryString.isEmpty()) {\n        try {\n            if (batteryString.contains(\".\")) {\n                batteryValue = Double.parseDouble(batteryString);\n            } else {\n                batteryValue = Double.parseDouble(batteryString.replaceAll(\"\\\\.\", \"\")) * 0.001;\n            }\n        } catch (NumberFormatException e) {\n            // fall through, keep batteryValue = 0.0\n        }\n    }\n    position.set(Position.KEY_BATTERY, batteryValue);\n\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n\n    position.set(Position.KEY_GPS, parser.nextInt());\n\n    // ADC1 is always present\n    Double adc1 = parser.nextDouble();\n    if (adc1 != null) {\n        position.set(Position.PREFIX_ADC + 1, adc1 * 0.001);\n    }\n\n    // ADC2 (optional) for certain models\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        Double adc2 = parser.nextDouble();\n        if (adc2 != null) {\n            position.set(Position.PREFIX_ADC + 2, adc2 * 0.001);\n        }\n    }\n\n    // Optional LBS/cell info\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    // Accept also when one or more of these are still null or zero (some messages)\n    if (lac != null && cid != null && mcc != null && mnc != null\n            && lac != 0 && cid != 0 && mcc != 0 && mnc != 0) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Some devices send additional (unused) fields; skip up to one known unused field\n    if (parser.hasNext()) {\n        parser.next();\n    }\n    if (parser.hasNext()) {\n        parser.next(); // sometimes devices send further unused fields (see test)\n    }\n    if (parser.hasNext()) {\n        parser.next();\n    }\n    if (parser.hasNext()) {\n        parser.next();\n    }\n\n    // The last field is always the checksum for AVRMC (already extracted by Parser, or next)\n    String checksum = null;\n    if (parser.hasNext()) {\n        checksum = parser.next();\n    }\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}