{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n            getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Time\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    // Status\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    position.setValid(\n            upperCaseStatus.equals(\"A\") ||\n            upperCaseStatus.equals(\"R\") ||\n            upperCaseStatus.equals(\"P\"));\n    position.set(Position.KEY_STATUS, status);\n\n    // Location\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    // Date\n    dateBuilder.setDateReverse(\n            parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    // Event / alarms / metrics\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // Battery (e.g. \"3.727\" \u2192 3.727V)\n    position.set(Position.KEY_BATTERY,\n            Double.parseDouble(parser.next().replaceAll(\"\\\\.\", \"\")) * 0.001);\n\n    // Odometer (km \u2192 m)\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n\n    // GPS state / ADC inputs\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    // Cell tower info\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    // skip network if all zeros\n    if (lac != null && cid != null && mcc != null && mnc != null\n            && lac > 0 && cid > 0 && mcc > 0 && mnc > 0) {\n        position.setNetwork(new Network(\n                CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Checksum / unused\n    parser.next();\n    String checksum = parser.next();\n\n    if (channel != null) {\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(),\n                deviceSession.getDeviceId(),\n                getProtocolName(),\n                DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}