{
    "generation": "@Override\nprotected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n            getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // get device model if available\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(\n            Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // time\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(\n                parser.nextInt(0),  // hours\n                parser.nextInt(0),  // minutes\n                parser.nextInt(0)); // seconds\n\n    // status (A=valid, R=real\u2010time, P=parking)\n    String status = parser.next();\n    String statusUp = status.toUpperCase();\n    boolean valid = statusUp.equals(\"A\")\n                 || statusUp.equals(\"R\")\n                 || statusUp.equals(\"P\");\n    position.setValid(valid);\n    position.set(Position.KEY_STATUS, status);\n\n    // position\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    // date\n    dateBuilder.setDateReverse(\n            parser.nextInt(0),  // day\n            parser.nextInt(0),  // month\n            parser.nextInt(0)); // year (2 digits)\n    position.setTime(dateBuilder.getDate());\n\n    // event / alarm\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // battery\n    String batt = parser.next();\n    double battery = 0;\n    if (batt != null && !batt.isEmpty()) {\n        battery = Double.parseDouble(batt.replaceAll(\"\\\\.\", \"\")) * 0.001;\n    }\n    position.set(Position.KEY_BATTERY, battery);\n\n    // odometer\n    position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);\n\n    // satellites\n    position.set(Position.KEY_GPS, parser.nextInt(0));\n\n    // ADC inputs\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble(0) * 0.001);\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble(0) * 0.001);\n    }\n\n    // network (only if lac & cid non\u2010zero)\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    if (lac != null && cid != null\n            && lac != 0 && cid != 0\n            && mcc != null && mnc != null) {\n        position.setNetwork(new Network(\n                CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // compute checksum from raw sentence (last part after '*')\n    String checksum = null;\n    int star = sentence.lastIndexOf('*');\n    if (star != -1 && star + 1 < sentence.length()) {\n        checksum = sentence.substring(star + 1).trim();\n    }\n\n    // acknowledge / response\n    if (channel != null) {\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(),\n                deviceSession.getDeviceId(),\n                getProtocolName(),\n                DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}