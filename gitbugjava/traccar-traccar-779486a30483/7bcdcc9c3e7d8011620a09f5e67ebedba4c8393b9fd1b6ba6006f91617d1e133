{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    // Accept any single letter or digit as valid except 'V'\n    position.setValid((status.length() == 1 && !\"V\".equalsIgnoreCase(status)));\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n    String batteryString = parser.next();\n    if (batteryString != null && !batteryString.isEmpty()) {\n        // if contains dot, treat as already in volts, otherwise treat as millivolts\n        double battery;\n        if (batteryString.contains(\".\")) {\n            try {\n                battery = Double.parseDouble(batteryString);\n            } catch (NumberFormatException e) {\n                battery = 0.0;\n            }\n        } else {\n            try {\n                battery = Double.parseDouble(batteryString) * 0.001;\n            } catch (NumberFormatException e) {\n                battery = 0.0;\n            }\n        }\n        position.set(Position.KEY_BATTERY, battery);\n    }\n\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    Integer lac = null, cid = null, mcc = null, mnc = null;\n\n    // These fields may or may not exist depending on the record\n    if (parser.hasNext(4)) {\n        lac = parser.nextHexInt();\n        cid = parser.nextHexInt();\n        mcc = parser.nextInt();\n        mnc = parser.nextInt();\n        if (lac != null && cid != null && mcc != null && mnc != null\n                && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n        }\n    }\n\n    // There may be extra fields before the checksum\n    // Consume until only the checksum remains\n    int remaining = parser.count() - parser.getIndex();\n    if (remaining > 1) {\n        // skip all but last (checksum)\n        for (int i = 0; i < remaining - 1; i++) {\n            parser.next();\n        }\n    } else if (remaining == 1) {\n        parser.next(); // unused\n    }\n\n    String checksum = parser.next();\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}