{
    "generation": "@Override\nprotected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    // Device session\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // Device model\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(\n            Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    // Prepare position\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Time\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    // Status (validity)\n    String status = parser.next();\n    String upper = status.toUpperCase();\n    position.setValid(upper.equals(\"A\") || upper.equals(\"R\") || upper.equals(\"P\"));\n    position.set(Position.KEY_STATUS, status);\n\n    // Location\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    // Date\n    dateBuilder.setDateReverse(\n            parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    // Event / alarm\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // Battery\n    String batt = parser.next();\n    position.set(Position.KEY_BATTERY,\n            Double.parseDouble(batt.replaceAll(\"\\\\.\", \"\")) * 0.001);\n\n    // Odometer\n    position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);\n\n    // GPS satellites\n    position.set(Position.KEY_GPS, parser.nextInt(0));\n\n    // ADC1\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble(0) * 0.001);\n\n    // ADC2 (only for specific models)\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble(0) * 0.001);\n    }\n\n    // Cell network (ignore all-zero values)\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    if (lac != null && cid != null\n            && mcc != null && mnc != null\n            && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {\n        position.setNetwork(new Network(\n                CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Skip unused, read checksum\n    parser.next();\n    String checksum = parser.next();\n\n    // Acknowledge / response (if connected)\n    if (channel != null) {\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(),\n                getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}