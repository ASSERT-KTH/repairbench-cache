{
    "generation": "    protected Object decodeAvrmc(\n            String sentence, Channel channel, SocketAddress remoteAddress) {\n        Parser parser = new Parser(PATTERN_AVRMC, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        DeviceSession deviceSession =\n            getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        String deviceModel = null;\n        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n        if (device != null) {\n            deviceModel = device.getModel();\n        }\n        Position position = new Position();\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.setProtocol(getProtocolName());\n        position.setDeviceModel(deviceModel);\n        position.setTime(parser.nextDate());\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextLatitude());\n        position.setLongitude(parser.nextLongitude());\n        position.setAltitude(parser.nextDouble());\n        position.setSpeed(parser.nextDouble());\n        position.setCourse(parser.nextDouble());\n        position.setAddress(parser.next());\n        String status = parser.next();\n        Event event = null;\n        if (status.equals(\"A\")) {\n            event = Event.TYPE_UPDATE;\n        } else if (status.equals(\"V\")) {\n            event = Event.TYPE_VALID;\n        }\n        Integer lac = parser.nextHexInt();\n        Integer cid = parser.nextHexInt();\n        Integer mcc = parser.nextInt();\n        Integer mnc = parser.nextInt();\n        if (lac != null && cid != null && mcc != null && mnc != null) {\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n        }\n        parser.next(); // unused\n        String checksum = parser.next();\n        if (channel != null) {\n            sendAcknowledge(status, event, checksum, channel, remoteAddress);\n            String devicePassword = AttributeUtil.getDevicePassword(\n                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n            sendEventResponse(event, devicePassword, channel, remoteAddress);\n        }\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}