{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    // Accept *any* single letter/status as valid except 'v'/'V', which means invalid\n    // In original test, both lower- and uppercase are accepted, except 'v'\n    position.setValid(!upperCaseStatus.equals(\"V\"));\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // Battery voltage field may use dot, but we need to handle integer values without dot as well\n    String battery = parser.next();\n    Double batteryLevel;\n    try {\n        // Try to parse directly\n        batteryLevel = Double.parseDouble(battery);\n    } catch (NumberFormatException error) {\n        // Try un-dotting: e.g. \"3727\" => \"3.727\"\n        if (battery.length() > 3) {\n            batteryLevel = Double.parseDouble(battery.substring(0, battery.length() - 3) + \".\" + battery.substring(battery.length() - 3));\n        } else {\n            batteryLevel = 0.0;\n        }\n    }\n    position.set(Position.KEY_BATTERY, batteryLevel);\n\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    if (lac != null && cid != null && mcc != null && mnc != null\n            && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // There may be more trailing parameters which should be skipped (see test)\n    // Skip until the last field (checksum)\n    String value = null;\n    while (parser.hasNext()) {\n        value = parser.next();\n    }\n    String checksum = value; // last value is the checksum, as per NMEA/Laipac\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}