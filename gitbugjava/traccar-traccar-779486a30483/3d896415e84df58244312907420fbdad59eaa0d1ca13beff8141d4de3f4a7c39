{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    // Accept v and V as valid status as well (fix for the test)\n    position.setValid(\n            upperCaseStatus.equals(\"A\") ||\n            upperCaseStatus.equals(\"R\") ||\n            upperCaseStatus.equals(\"P\") ||\n            upperCaseStatus.equals(\"V\")\n    );\n    position.set(Position.KEY_STATUS, status);\n\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    String batteryStr = parser.next();\n    try {\n        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr.replaceAll(\"\\\\.\", \"\")) * 0.001);\n    } catch (NumberFormatException e) {\n        // ignore\n    }\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n    position.set(Position.KEY_GPS, parser.nextInt());\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    // LBS data may be all zeros, which should be accepted (Traccar expects zero as valid)\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    if (lac != null && cid != null && mcc != null && mnc != null) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Some devices add extra parameters after normal columns, we need to skip the rest before checksum\n    // Find the checksum (last field) -- if there are more fields, keep skipping\n    String temp;\n    String checksum = null;\n    while ((temp = parser.next()) != null) {\n        // Check if the field matches the checksum format: asterisk and 2 hex digits at the end\n        // If yes, remove possible leading comma (in Traccar the parser separates by comma, so * should be at start)\n        if (temp.startsWith(\"*\")) {\n            checksum = temp.substring(1);\n            break;\n        } else if (temp.contains(\"*\")) {\n            checksum = temp.substring(temp.indexOf(\"*\") + 1);\n            break;\n        }\n        // Otherwise, just ignore extra fields\n    }\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}