{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x); // uses Collections.binarySearch if autoSort is true\n\n        if (index >= 0) { // An item with the same x-value exists\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            if (!this.allowDuplicateXValues) { // If duplicates are not allowed, overwrite\n                try {\n                    overwritten = (XYDataItem) existing.clone();\n                }\n                catch (CloneNotSupportedException e) {\n                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                }\n                existing.setY(y); // Update the existing item's y-value\n            }\n            else { // If duplicates ARE allowed, add a new item\n                if (this.autoSort) {\n                    // Insert the new item in the correct sorted position.\n                    // Since index >= 0, binarySearch found an item with the same x-value.\n                    // We need to find the insertion point AFTER all existing items\n                    // with the same x-value to maintain order. The 'index' returned\n                    // by binarySearch could be any of the duplicates. We iterate\n                    // forward from 'index' to find the position after the last\n                    // duplicate x-value.\n                    int insertionPoint = index;\n                    // Need a temporary item to compare x-values correctly using compareTo\n                    XYDataItem probe = new XYDataItem(x, null);\n                    while (insertionPoint < this.data.size() &&\n                           ((XYDataItem) this.data.get(insertionPoint)).compareTo(probe) == 0) {\n                        insertionPoint++;\n                    }\n                    // Insert the new item at the calculated insertion point\n                    this.data.add(insertionPoint, new XYDataItem(x, y));\n                }\n                else { // Not auto-sorted, just add to the end\n                    this.data.add(new XYDataItem(x, y));\n                }\n            }\n        }\n        else { // Item with x not found (index < 0)\n            // if the series is sorted, the negative index tells us where to insert\n            if (this.autoSort) {\n                // Calculate the insertion point using the formula for binarySearch's negative result\n                this.data.add(-index - 1, new XYDataItem(x, y));\n            }\n            else { // Not auto-sorted, just add to the end\n                this.data.add(new XYDataItem(x, y));\n            }\n        }\n\n        // check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0); // Remove the item at index 0\n        }\n\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}