{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n\n        // Find the index of x. If autoSort is true, this uses binary search.\n        int index = indexOf(x);\n\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // Case: x found, duplicates NOT allowed --> Update existing item\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            // Update the y-value of the existing item\n            existing.setY(y);\n        }\n        else {\n            // Case: x not found (index < 0), OR duplicates ARE allowed.\n            // In both sub-cases, we need to ADD a new item.\n\n            XYDataItem item = new XYDataItem(x, y);\n\n            if (this.autoSort) {\n                // Add DataItem in sorted order\n                int insertionPoint = index;\n                if (insertionPoint < 0) {\n                    // x was not found, binary search returned -(insertion point) - 1\n                    insertionPoint = -insertionPoint - 1;\n                }\n                else {\n                    // x was found (at index >= 0), but duplicates are allowed.\n                    // We need to insert the new item while maintaining order.\n                    // Find the spot after the last existing item with the same x-value\n                    // to ensure stable insertion order for duplicates.\n                    while (insertionPoint < this.data.size() &&\n                           ((XYDataItem) this.data.get(insertionPoint)).getX().equals(x)) {\n                        insertionPoint++;\n                    }\n                    // insertionPoint is now the correct place to insert the new item.\n                }\n                this.data.add(insertionPoint, item);\n            }\n            else {\n                // Add DataItem to the end of the list (not sorted)\n                this.data.add(item);\n            }\n\n            // Check if this addition exceeds the maximum item count\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0); // Remove the oldest item\n            }\n        }\n\n        fireSeriesChanged();\n        // return null if an item was added, or the original item if updated\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}