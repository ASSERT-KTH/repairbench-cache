{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        // Note: 'data' is List<XYDataItem>\n        XYDataItem overwritten = null;\n        int index = indexOf(x); // uses binarySearch if autoSort=true\n\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // Existing item found, and duplicates are not allowed, so update\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y); // Update the y-value\n        }\n        else {\n            // Item not found (index < 0), or duplicates are allowed. Add new item.\n            XYDataItem newItem = new XYDataItem(x, y);\n\n            if (this.autoSort) {\n                // Need to insert at the correct sorted position\n                int insertionPoint;\n                if (index < 0) {\n                    // Item not found, binarySearch result indicates insertion point\n                    insertionPoint = -index - 1;\n                }\n                else {\n                    // Item found (at 'index'), but duplicates allowed.\n                    // We must insert the new item. To maintain sorted order\n                    // and handle duplicates consistently, find the insertion\n                    // point *after* all existing items with the same x-value.\n                    insertionPoint = index;\n                    // Note: XYDataItem uses compareTo(Object) which delegates\n                    // to comparing x-values. We use compareTo for Numbers.\n                    while (insertionPoint < this.data.size() &&\n                            x.equals(((XYDataItem) this.data.get(insertionPoint)).getX())) {\n                           // Note: Using x.equals() here assumes x has a well-defined equals method\n                           // matching the Number type stored in XYDataItem. Using compareTo might be\n                           // safer if types can vary but compare meaningfully. Let's stick to equals\n                           // for now as it matches the likely intent of binarySearch finding an equal item.\n                           // Re-checking with compareTo might be slightly more robust:\n                           // Number currentX = ((XYDataItem) this.data.get(insertionPoint)).getX();\n                           // if (currentX.compareTo(x) == 0) { // Check if x values are equivalent\n                           //     insertionPoint++;\n                           // } else {\n                           //     break; // Should not happen if list is sorted and binarySearch worked\n                           // }\n                        insertionPoint++; // Move past items with the same x-value\n                    }\n                    // Insert after the block of equal x-values\n                }\n                // Ensure insertion point is valid before adding\n                if (insertionPoint < 0) { // Should not happen with -index - 1 logic\n                   insertionPoint = 0;\n                }\n                if (insertionPoint > this.data.size()) { // Should not happen if logic is correct\n                   insertionPoint = this.data.size();\n                }\n                this.data.add(insertionPoint, newItem);\n            }\n            else {\n                // Not auto-sorted, just add to the end\n                this.data.add(newItem);\n            }\n\n            // Check if this addition exceeds the maximum item count\n            // This check should apply regardless of whether it was an add or update,\n            // but the original code only had it in the 'add' block. Let's keep it here.\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0); // Remove the oldest item (at index 0)\n            }\n        }\n        fireSeriesChanged(); // Notify listeners\n        return overwritten;  // Return the item that was overwritten (null if added)\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}