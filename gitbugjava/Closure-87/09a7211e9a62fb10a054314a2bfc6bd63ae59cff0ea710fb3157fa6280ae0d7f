{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression, but not expression that is problematic for folding.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() != Token.BLOCK) {\n      return false;\n    }\n\n    if (!n.hasOneChild()) {\n      return false;\n    }\n\n    Node stmt = n.getFirstChild();\n    if (stmt.getType() != Token.EXPR_RESULT) {\n      // Only EXPR_RESULT statements can be safely folded.\n      return false;\n    }\n\n    Node expr = stmt.getFirstChild();\n\n    // IE has a bug where event handlers behave differently when\n    // their return value is used vs. when their return value is in\n    // an EXPR_RESULT. It's pretty freaking weird. See:\n    // http://code.google.com/p/closure-compiler/issues/detail?id=291\n    // We try to detect this case, and not fold EXPR_RESULTs\n    // into other expressions.\n\n    // We only have to worry about methods with an implicit 'this'\n    // param, or this doesn't happen. This means assignments to\n    // properties are ok, but calls on properties are not.\n\n    if (expr.getType() == Token.CALL) {\n      Node callee = expr.getFirstChild();\n      // Calls via GETPROP (like obj.onclick()) or GETELEM (like obj['onclick']())\n      // are problematic.\n      if (callee.getType() == Token.GETPROP) {\n         String propName = callee.getString();\n         if (propName.startsWith(\"on\")) {\n           // It's an obj.on...() call, don't fold.\n           return false;\n         }\n      } else if (callee.getType() == Token.GETELEM) {\n        // It's an obj[...](), don't fold these either, as per test Issue291.\n        // Be conservative for GETELEM calls.\n        return false;\n      }\n      // Otherwise (e.g. direct function call foo()), it might be foldable.\n    }\n\n    // If it wasn't a problematic call, or not a call at all,\n    // it's a foldable expression block.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}