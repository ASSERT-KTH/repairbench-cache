{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression, and that expression is safe to fold according to IE specific logic.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Check if the single child is an EXPR_RESULT node.\n        if (maybeExpr.isExprResult()) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n\n          // Check for the IE specific problematic case.\n          // This function is used to determine foldability for constructs\n          // like if(x) { foo(); } -> x && foo();\n          // For the IE case, we don't want to perform this fold.\n          Node exprNode = maybeExpr.getFirstChild();\n          if (isProblemCodeForInternetExplorer(exprNode)) {\n              // This is the problematic IE case, so don't consider the block\n              // foldable in this context.\n              return false;\n          }\n\n          // It's a single EXPR_RESULT block and not the problematic IE case.\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}