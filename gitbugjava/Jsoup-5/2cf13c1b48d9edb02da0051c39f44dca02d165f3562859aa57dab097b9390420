{
    "generation": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                // Changed from `matchesAny` to `matchesAnySorted` in later jsoup versions, but logic is similar\n                // The original code uses matchesAny(\"<\", \"/>\", \">\") which might not be perfectly correct for HTML5 unquoted attributes\n                // but we stick to the original logic pattern here.\n                while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny(\"<\", \"/>\", \">\")) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            // ensure value eaten periods don't eat the end tag\n            // Kkeep this consommation after the value has been retrieved\n            tq.consumeWhitespace(); \n        }\n        if (key.length() != 0)\n            return Attribute.createFromEncoded(key, value);\n        else {\n            // If the key is empty (e.g., due to \"=val\", \"/\", \">\"), it's not a valid attribute.\n            // The parser might have consumed the invalid chars like '=' and the value.\n            // The original code consumed one more character here, which could lead to EOF exception\n            // if the value parsing consumed the last character.\n            // We should only consume if we are not at the end of the input.\n            if (!tq.isEmpty()) {\n                tq.consume(); // Consume the character that made the key invalid, or the leftover part.\n            }\n            return null; // Return null because the attribute is invalid (empty key).\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}