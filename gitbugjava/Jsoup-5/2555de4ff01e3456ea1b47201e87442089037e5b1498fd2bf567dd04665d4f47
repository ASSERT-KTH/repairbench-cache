{
    "generation": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                // Append characters until we hit a stop condition:\n                //  - End of input (isEmpty)\n                //  - Whitespace\n                //  - End of tag characters ('<', '/>', '>')\n                while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny(\"<\", \"/>\", \">\")) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            // consumeWhitespace() called after value parsing seems redundant if value loop stops at whitespace,\n            // but keeping original structure unless it causes issues. Let's assume it handles potential trailing space.\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0) {\n            // Found a valid key, return the attribute\n            return Attribute.createFromEncoded(key, value);\n        } else {\n            // Key is empty, indicating an invalid attribute start (e.g., \"=value\", \">\", \"/\")\n            // The original code had tq.consume() here, which caused StringIndexOutOfBoundsException\n            // when the parser reached the end of the input after parsing an invalid attribute like '=a'.\n            // It also incorrectly consumed the '>' character in cases like '<p =a>'.\n            // Removing the consume() call fixes the exception and the incorrect consumption.\n            // We simply return null for an invalid attribute structure where the key is missing.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}