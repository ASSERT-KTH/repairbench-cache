{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\")) {\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            } else if (tq.matches(\"[\")) {\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            } else if (tq.matchesAny(Combinators)) {\n                // Found a combinator (like '>', '+', '~', ',', ' ').\n                // Stop consuming for this sub-query part.\n                // The combinator will be consumed by the main parser loop.\n                break;\n            } else {\n                // Consume regular characters for the selector part (tag, id, class, etc.)\n                sq.append(tq.consume());\n            }\n        }\n        return StringUtil.releaseBuilder(sq);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}