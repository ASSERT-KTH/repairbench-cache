{
    "generation": "private String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    while (!tq.isEmpty()) {\n        // break on a comma when we've already read some of the sub\u2010query,\n        // or skip leading commas\n        if (tq.matches(\",\")) {\n            if (sq.length() > 0) {\n                break;\n            } else {\n                tq.consume();\n                continue;\n            }\n        }\n        if (tq.matches(\"(\")) {\n            sq.append(\"(\")\n              .append(tq.chompBalanced('(', ')'))\n              .append(\")\");\n        } else if (tq.matches(\"[\")) {\n            sq.append(\"[\")\n              .append(tq.chompBalanced('[', ']'))\n              .append(\"]\");\n        } else if (tq.matchesAny(Combinators)) {\n            if (sq.length() > 0) {\n                break;\n            } else {\n                // skip leading combinators (>, +, ~, whitespace)\n                tq.consume();\n            }\n        } else {\n            sq.append(tq.consume());\n        }\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}