{
    "generation": "private String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    while (!tq.isEmpty()) {\n        // A comma indicates the start of a new selector group so stop here.\n        if (tq.matches(\",\"))\n            break;\n        else if (tq.matches(\"(\"))\n            sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n        else if (tq.matches(\"[\"))\n            sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n        // If we see a combinator and haven't yet added any characters, include it.\n        // Otherwise, break to let the parser handle the combinator.\n        else if (tq.matchesAny(Combinators)) {\n            if (sq.length() == 0)\n                sq.append(tq.consume());\n            else\n                break;\n        } else {\n            sq.append(tq.consume());\n        }\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}