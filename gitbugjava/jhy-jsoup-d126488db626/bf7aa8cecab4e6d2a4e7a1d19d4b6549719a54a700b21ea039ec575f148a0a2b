{
    "generation": "private String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    while (!tq.isEmpty()) {\n        if (tq.matches(\"(\"))\n            sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n        else if (tq.matches(\"[\"))\n            sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n        else if (matchesCombinators())\n            if (sq.length() > 0)\n                break;\n            else {\n                sq.append(tq.chomp());\n                continue; // Skip empty squ.READ chrome inst notice space after long comma.\n            }\n        else\n            sq.append(tq.consume());\n    }\n    return StringUtil.releaseBuilder(sq);\n}\n\nprivate boolean matchesCombinators() {\n    return tq.matchesAny(Combinators);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}