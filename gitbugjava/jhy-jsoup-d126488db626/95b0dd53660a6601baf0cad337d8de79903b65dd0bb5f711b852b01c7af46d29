{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        boolean inSubQuery = false;\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\")) {\n                sq.append(\"(\");\n                sq.append(tq.chompBalanced('(', ')'));\n                sq.append(\")\");\n                inSubQuery = true;\n            } else if (tq.matches(\"[\")) {\n                sq.append(\"[\");\n                sq.append(tq.chompBalanced('[', ']'));\n                sq.append(\"]\");\n            } else if (tq.matchesAny(Combinators)) {\n                if (inSubQuery && sq.length() > 0) {\n                    break;\n                } else {\n                    tq.consume();\n                }\n            } else {\n                sq.append(tq.consume());\n            }\n        }\n        if (inSubQuery && sq.length() > 0 && sq.charAt(sq.length() - 1) != ')') {\n            throw new SelectorParseException(\"Unclosed subquery\");\n        }\n        return StringUtil.releaseBuilder(sq);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}