{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\"))\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            else if (tq.matches(\"[\"))\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            else if (tq.matchesAny(Combinators)) {\n                if (tq.matches(\",\")) { // handle comma as subquery separator\n                    if (sq.length() > 0)\n                        break; // stop here, leaving comma in queue\n                    else\n                        tq.consume(); // skip leading comma if subquery is empty\n                } else {\n                    sq.append(tq.consume()); // include other combinators in subquery\n                }\n            } else if (tq.matchesAny(Combinators))\n                if (sq.length() > 0)\n                    break;\n                else\n                    tq.consume();\n            else\n                sq.append(tq.consume());\n        }\n        return StringUtil.releaseBuilder(sq);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}