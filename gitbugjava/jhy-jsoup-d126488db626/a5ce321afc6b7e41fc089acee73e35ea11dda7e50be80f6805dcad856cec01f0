{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\")) {\n                // Consume balanced parentheses, e.g., :not(a[href])\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            } else if (tq.matches(\"[\")) {\n                // Consume balanced brackets, e.g., [attr=val]\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            } else if (tq.matches(\",\")) {\n                // A comma separates sub-queries, so we break here to return the current sub-query.\n                // The comma itself is a separator and not part of the sub-query returned by this method.\n                break;\n            } else if (tq.matchesAny(QueryParser.Combinators)) {\n                // Combinators (space, >, +, ~) are part of the sub-query and should be appended.\n                // The previous logic would incorrectly discard leading combinators or break prematurely.\n                sq.append(tq.consume());\n            } else {\n                // Consume general selector parts (e.g., tag names, classes, ids, pseudo-selectors)\n                sq.append(tq.consume());\n            }\n        }\n        return StringUtil.releaseBuilder(sq);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}