{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\"))\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            else if (tq.matches(\"[\"))\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            else if (tq.matchesAny(Combinators))\n                if (sq.length() > 0)\n                    break; // If we have accumulated a selector, this combinator is a separator\n                else\n                    tq.consume(); // Else, it's a leading combinator, consume and skip\n            else\n                sq.append(tq.consume()); // Regular character, part of a selector\n        }\n        return StringUtil.releaseBuilder(sq);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}