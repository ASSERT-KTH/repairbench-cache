{
    "generation": "private String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    // skip any leading whitespace before the sub\u2010query\n    while (!tq.isEmpty() && Character.isWhitespace(tq.peek())) {\n        tq.consume();\n    }\n    while (!tq.isEmpty()) {\n        if (tq.matches(\"(\")) {\n            sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n        } else if (tq.matches(\"[\")) {\n            sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n        } else if (tq.matchesAny(Combinators)) {\n            // if we've read some of the selector, stop at the combinator;\n            // otherwise (at start) break so the parser can pick up '>' '+', '~' as initial combinator\n            if (sq.length() > 0) {\n                break;\n            } else {\n                break;\n            }\n        } else {\n            sq.append(tq.consume());\n        }\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}