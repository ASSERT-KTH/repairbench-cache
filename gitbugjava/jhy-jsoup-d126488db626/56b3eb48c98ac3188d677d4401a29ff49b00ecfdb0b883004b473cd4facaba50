{
    "generation": "private String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    while (!tq.isEmpty()) {\n        if (tq.matches(\"(\"))\n            sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n        else if (tq.matches(\"[\"))\n            sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n        else if (tq.matchesAny(Combinators)) {\n            if (sq.length() > 0)\n                break; // stop and return if we already have something\n            tq.consume(); // consume the combinator\n            // do not reset sq, accumulate next\n        } else if (tq.matches(\",\")) {\n            break; // stop at a sub-query comma, to return current\n        } else\n            sq.append(tq.consume());\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}