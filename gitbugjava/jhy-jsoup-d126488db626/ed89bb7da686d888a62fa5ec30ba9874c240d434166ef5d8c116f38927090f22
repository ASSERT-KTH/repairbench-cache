{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\")) // Handle grouped selectors or pseudo-classes like :has()\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            else if (tq.matches(\"[\")) // Handle attribute selectors\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            else if (tq.matchesAny(Combinators)) // Found a combinator\n                break; // Stop consuming, leave combinator in queue for parser to process\n            // Removed the problematic 'else' block that consumed leading combinators:\n            // else if (tq.matchesAny(Combinators))\n            //     if (sq.length() > 0)\n            //         break;\n            //     else\n            //         tq.consume(); // This was consuming leading combinators\n            else // Consume characters that are part of the simple selector (tag, id, class)\n                sq.append(tq.consume());\n        }\n        return StringUtil.releaseBuilder(sq);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}