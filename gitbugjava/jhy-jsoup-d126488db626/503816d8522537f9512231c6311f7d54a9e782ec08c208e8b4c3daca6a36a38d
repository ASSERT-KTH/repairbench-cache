{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\")) {\n                // Consume balanced parentheses for pseudo-selectors like :has() or :not()\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            } else if (tq.matches(\"[\")) {\n                // Consume balanced square brackets for attribute selectors\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            } else if (tq.matchesAny(Combinators)) {\n                // Found a combinator (like '>', '+', '~', ',', or ' ')\n                // The original code had `if (sq.length() > 0) break; else tq.consume();`\n                // This `else tq.consume()` could consume leading combinators other than space, which seems incorrect.\n                // It should break on any combinator, letting the main parse loop handle it.\n                // An exception might be leading whitespace if it's not handled before calling consumeSubQuery,\n                // but the main loop typically consumes whitespace between tokens.\n                // Therefore, simply breaking seems the most consistent approach.\n                break; \n            } else {\n                // Consume the selector part (tag, id, class, attribute key, pseudo, etc.)\n                sq.append(tq.consume());\n            }\n        }\n        return StringUtil.releaseBuilder(sq);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}