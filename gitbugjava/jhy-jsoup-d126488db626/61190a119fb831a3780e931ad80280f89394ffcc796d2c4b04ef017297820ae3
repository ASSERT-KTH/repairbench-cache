{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\"))\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            else if (tq.matches(\"[\"))\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            else if (tq.matchesAny(Combinators)) {\n                // The 'Combinators' array includes both standard combinators (>, +, ~, space) and the comma (,).\n                // A comma signifies the end of the current sub-query part, separating it from the next one.\n                // Other combinators (>, +, ~, space) are part of the current sub-query and should be appended.\n                if (tq.matches(\",\")) {\n                    // If a comma is encountered, the current sub-query is complete.\n                    // The comma itself is not part of the sub-query string.\n                    break;\n                } else {\n                    // It's a standard combinator (>, +, ~, space). These are part of the current sub-query.\n                    // Always append these and continue building the sub-query string.\n                    sq.append(tq.consume());\n                }\n            }\n            else // It's a regular selector part (tag, class, id, pseudo, attribute part).\n                sq.append(tq.consume());\n        }\n        return StringUtil.releaseBuilder(sq);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}