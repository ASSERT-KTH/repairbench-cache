{
    "generation": "private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n    CellTower cellTower = new CellTower();\n    String[] keys = form.substring(1).split(\"%\");\n    for (String key : keys) {\n        switch (key) {\n            case \"SA\":\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case \"MV\":\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                break;\n            case \"BV\":\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                break;\n            case \"GQ\":\n                cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                break;\n            case \"CE\":\n                cellTower.setCellId((int) buf.readUnsignedInt());\n                break;\n            case \"LC\":\n                cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                break;\n            case \"CN\": {\n                // The code previously parsed combinedMobileCodes = <buffer> % 100000\n                // cccnn but in most usage, it's expected to be BCD based like 310260 or similar\n                // In Atrack, it's just mccmnc as int, so parse it as such:\n                int mccmnc = (int) buf.readUnsignedInt();\n                // Most common lengths: mcc=3 digits, mnc=2 or 3 digits (usually 2)\n                // Try detecting 5 or 6 digits\n                int mcc;\n                int mnc;\n                if (mccmnc > 99999) { // 6 digits\n                    mcc = mccmnc / 1000;\n                    mnc = mccmnc % 1000;\n                } else if (mccmnc > 999) { // 5 digits\n                    mcc = mccmnc / 100;\n                    mnc = mccmnc % 100;\n                } else { // Fallback\n                    mcc = mccmnc;\n                    mnc = 0;\n                }\n                cellTower.setMobileCountryCode(mcc);\n                cellTower.setMobileNetworkCode(mnc);\n                break;\n            }\n            case \"RL\":\n                buf.readUnsignedByte(); // rxlev\n                break;\n            case \"PC\":\n                position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                break;\n            case \"AT\":\n                position.setAltitude((double) buf.readUnsignedInt());\n                break;\n            case \"RP\":\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                break;\n            case \"GS\":\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case \"DT\":\n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                break;\n            case \"VN\":\n                position.set(Position.KEY_VIN, readString(buf));\n                break;\n            case \"MF\":\n                buf.readUnsignedShort(); // mass air flow rate\n                break;\n            case \"EL\":\n                buf.readUnsignedByte(); // engine load\n                break;\n            case \"TR\":\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                break;\n            case \"ET\":\n                position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                break;\n            case \"FL\":\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                break;\n            case \"ML\":\n                buf.readUnsignedByte(); // mil status\n                break;\n            case \"FC\":\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case \"CI\":\n                // format string, may be present but unused\n                readString(buf);\n                break;\n            case \"AV1\":\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                break;\n            case \"NC\":\n                readString(buf); // gsm neighbor cell info\n                break;\n            case \"SM\":\n                buf.readUnsignedShort(); // max speed between reports\n                break;\n            case \"GL\":\n                readString(buf); // google link\n                break;\n            case \"MA\":\n                readString(buf); // mac address\n                break;\n            case \"PD\":\n                buf.readUnsignedByte(); // pending code status\n                break;\n            case \"CD\":\n                position.set(Position.KEY_ICCID, readString(buf));\n                break;\n            case \"CM\":\n                buf.readLong(); // imsi\n                break;\n            case \"GN\":\n                buf.skipBytes(60); // g sensor data\n                break;\n            case \"GV\":\n                buf.skipBytes(6); // maximum g force\n                break;\n            case \"ME\":\n                buf.readLong(); // imei\n                break;\n            case \"IA\":\n                buf.readUnsignedByte(); // intake air temperature\n                break;\n            case \"MP\":\n                buf.readUnsignedByte(); // manifold absolute pressure\n                break;\n            default:\n                // skip unknown keys\n                break;\n        }\n    }\n\n    // Only call .equals or use with autoboxing if not null\n    if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n        position.setNetwork(new Network(cellTower));\n    } else if (cellTower.getSignalStrength() != null) {\n        position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}