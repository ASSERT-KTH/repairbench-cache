{
    "generation": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        // Check for null or invalid form string to prevent NullPointerException\n        if (form == null || form.isEmpty() || !form.startsWith(\"%\")) {\n            // Log error or return, depending on expected behavior for invalid input\n            // For now, just return to avoid processing potentially invalid data\n            return;\n        }\n\n        CellTower cellTower = new CellTower();\n        // substring(1) is safe due to the check above\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            // Skip empty keys that might result from adjacent separators (e.g., \"%%\")\n            if (key.isEmpty()) {\n                continue;\n            }\n            // Ensure buffer has data before reading. Avoids IndexOutOfBoundsException.\n            // Specific checks are needed per data type, but a general check adds some safety.\n            // Note: This basic check might not be sufficient for multi-byte reads.\n            if (!buf.isReadable()) {\n                 break; // Stop processing if buffer is exhausted prematurely\n            }\n            switch (key) {\n                case \"SA\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"MV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"BV\":\n                     if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"GQ\":\n                    if (buf.isReadable()) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n                    break;\n                case \"CE\":\n                    if (buf.readableBytes() >= 4) {\n                        cellTower.setCellId(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"LC\":\n                    if (buf.readableBytes() >= 2) {\n                        cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    }\n                    break;\n                case \"CN\":\n                    if (buf.readableBytes() >= 4) {\n                        int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn\n                        cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                        cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    }\n                    break;\n                case \"RL\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // rxlev\n                    }\n                    break;\n                case \"PC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"AT\":\n                    if (buf.readableBytes() >= 4) {\n                        position.setAltitude(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"RP\":\n                     if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"GS\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"DT\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    }\n                    break;\n                case \"VN\":\n                    // Assuming readString handles buffer checks internally or returns null/empty\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // mass air flow rate\n                    }\n                    break;\n                case \"EL\":\n                     if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // engine load\n                    }\n                    break;\n                case \"TR\":\n                     if (buf.isReadable()) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ET\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"FL\":\n                    if (buf.isReadable()) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ML\":\n                     if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // mil status\n                    }\n                    break;\n                case \"FC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"CI\":\n                    // The original code read a string here using readString(buf).\n                    // This seemed incorrect as the format string 'form' is passed in,\n                    // and 'CI' appearing as a key within it should likely correspond to\n                    // custom data *following* the format string in the buffer, not the format string itself.\n                    // If 'CI' represents actual data (e.g., a string), it should be read,\n                    // possibly using readString(buf) and stored appropriately.\n                    // If 'CI' is just metadata or not expected here, consuming data is wrong.\n                    // Assuming it's not meant to consume data here based on typical ATrack structures.\n                    // If this assumption is wrong, the fix is to correctly read and store CI data.\n                    // readString(buf); // Commented out / Removed\n                    break;\n                case \"AV1\":\n                     if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"NC\":\n                    readString(buf); // gsm neighbor cell info - Assuming readString handles buffer checks\n                    break;\n                case \"SM\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // max speed between reports\n                    }\n                    break;\n                case \"GL\":\n                    readString(buf); // google link - Assuming readString handles buffer checks\n                    break;\n                case \"MA\":\n                    readString(buf); // mac address - Assuming readString handles buffer checks\n                    break;\n                case \"PD\":\n                     if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // pending code status\n                    }\n                    break;\n                case \"CD\":\n                    position.set(Position.KEY_ICCID, readString(buf)); // Assuming readString handles buffer checks\n                    break;\n                case \"CM\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imsi\n                    }\n                    break;\n                case \"GN\":\n                    if (buf.readableBytes() >= 60) {\n                        buf.skipBytes(60); // g sensor data\n                    }\n                    break;\n                case \"GV\":\n                    if (buf.readableBytes() >= 6) {\n                        buf.skipBytes(6); // maximum g force\n                    }\n                    break;\n                case \"ME\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imei\n                    }\n                    break;\n                case \"IA\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // intake air temperature\n                    }\n                    break;\n                case \"MP\":\n                    if (buf.isReadable()) {\n                        buf.readUnsignedByte(); // manifold absolute pressure\n                    }\n                    break;\n                default:\n                    // Optionally log unknown keys\n                    break;\n            }\n        }\n\n        // Process collected CellTower information\n        Integer mcc = cellTower.getMobileCountryCode();\n        Integer mnc = cellTower.getMobileNetworkCode();\n        Long cellId = cellTower.getCellId();\n        Integer lac = cellTower.getLocationAreaCode();\n\n        // Check for complete cell tower information to set Network data\n        // Use explicit null checks and access primitive value safely to avoid potential NPE on unboxing\n        boolean hasCompleteCellInfo = mcc != null && mnc != null && lac != null && cellId != null && cellId.longValue() != 0;\n\n        if (hasCompleteCellInfo) {\n            position.setNetwork(new Network(cellTower));\n        } else {\n            // If complete cell info is not available, check for signal strength (RSSI)\n            Integer rssi = cellTower.getSignalStrength();\n            if (rssi != null) {\n                // Set RSSI from CellTower data (potentially overwriting value from GS key, matches original behavior)\n                position.set(Position.KEY_RSSI, rssi);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}