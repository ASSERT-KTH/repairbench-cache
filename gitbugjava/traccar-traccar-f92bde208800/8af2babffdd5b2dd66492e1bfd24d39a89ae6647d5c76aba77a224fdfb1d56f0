{
    "generation": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        // Check if form is null or too short to contain keys\n        if (form == null || form.length() <= 1) {\n            return; // Nothing to process\n        }\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            // Basic check to prevent IndexOutOfBoundsException if buffer is exhausted prematurely\n            // More specific checks per key type might be needed for full robustness.\n            if (!buf.isReadable()) {\n                break; // Stop processing if buffer is empty\n            }\n            switch (key) {\n                case \"SA\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"MV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"BV\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case \"GQ\":\n                    if (buf.readableBytes() >= 1) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n                    break;\n                case \"CE\":\n                    if (buf.readableBytes() >= 4) {\n                        cellTower.setCellId(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"LC\":\n                    if (buf.readableBytes() >= 2) {\n                        cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    }\n                    break;\n                case \"CN\":\n                    if (buf.readableBytes() >= 4) {\n                        int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn\n                        cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                        cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    }\n                    break;\n                case \"RL\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // rxlev\n                    }\n                    break;\n                case \"PC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"AT\":\n                    if (buf.readableBytes() >= 4) {\n                        position.setAltitude(buf.readUnsignedInt());\n                    }\n                    break;\n                case \"RP\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"GS\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"DT\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    }\n                    break;\n                case \"VN\":\n                    // Assuming readString handles buffer length checks or protocol ensures termination\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // mass air flow rate\n                    }\n                    break;\n                case \"EL\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // engine load\n                    }\n                    break;\n                case \"TR\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ET\":\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"FL\":\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case \"ML\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // mil status\n                    }\n                    break;\n                case \"FC\":\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case \"CI\":\n                    // The 'form' string itself represents the custom data format.\n                    // This key 'CI' likely indicated the presence of this custom block in the original message structure.\n                    // It doesn't require reading anything further from the data buffer *within* this method,\n                    // as the format string is already known and provided via the 'form' parameter.\n                    // readString(buf); // BUG: Incorrectly tried to read another format string from the data payload.\n                    break; // FIX: Correctly do nothing for the CI key itself.\n                case \"AV1\":\n                     if (buf.readableBytes() >= 2) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    }\n                    break;\n                case \"NC\":\n                    // Assuming readString handles buffer length checks\n                    readString(buf); // gsm neighbor cell info\n                    break;\n                case \"SM\":\n                     if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShort(); // max speed between reports\n                    }\n                    break;\n                case \"GL\":\n                    // Assuming readString handles buffer length checks\n                    readString(buf); // google link\n                    break;\n                case \"MA\":\n                    // Assuming readString handles buffer length checks\n                    readString(buf); // mac address\n                    break;\n                case \"PD\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // pending code status\n                    }\n                    break;\n                case \"CD\":\n                    // Assuming readString handles buffer length checks\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imsi\n                    }\n                    break;\n                case \"GN\":\n                    int gnBytesToSkip = Math.min(60, buf.readableBytes());\n                    buf.skipBytes(gnBytesToSkip); // g sensor data\n                    break;\n                case \"GV\":\n                    int gvBytesToSkip = Math.min(6, buf.readableBytes());\n                    buf.skipBytes(gvBytesToSkip); // maximum g force\n                    break;\n                case \"ME\":\n                    if (buf.readableBytes() >= 8) {\n                        buf.readLong(); // imei\n                    }\n                    break;\n                case \"IA\":\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // intake air temperature\n                    }\n                    break;\n                case \"MP\":\n                     if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // manifold absolute pressure\n                    }\n                    break;\n                default:\n                    // Ignore unknown keys as per original behavior\n                    break;\n            }\n        }\n\n        // Assign Network info if available and valid\n        // Check CellId validity (non-null and non-zero, assuming 0 is invalid)\n        boolean hasCellTowerInfo = cellTower.getMobileCountryCode() != null\n                && cellTower.getMobileNetworkCode() != null\n                && cellTower.getCellId() != null && cellTower.getCellId() != 0\n                && cellTower.getLocationAreaCode() != null;\n\n        if (hasCellTowerInfo) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            // Fallback: Set RSSI from CellTower signal strength if full network info is missing\n            // This might overwrite RSSI set by GS key, which could be intended or unintended. Keeping original logic.\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}