{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        // Convert to list for indexed access. Make a copy, so the original collection\n        // is not modified by removal of points.\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        // Array to store the minimum distance squared for each point\n        final double[] dx2 = new double[pointSet.size()];\n\n        while (resultSet.size() < k && !pointSet.isEmpty()) {\n            // For each data point x, compute D(x) Medikamente, the distance between x and\n            // the nearest center that has already been chosen.\n            double sumDX2 = 0.0; // The sum of squared distances\n            final int N = pointSet.size(); // number of remaining points\n\n            for (int i = 0; i < N; i++) {\n                final T p = pointSet.get(i);\n                // find the nearest center\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                final double dSquared = d * d;\n                dx2[i] = dSquared; // Store the individual squared distance\n                sumDX2 += dSquared; // Add to the total sum\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2.\n\n            // Handle case where sumDX2 is zero (e.g., points are duplicates of centers)\n            // Fallback to random selection from remaining points.\n            if (sumDX2 == 0.0) {\n                 final T p = pointSet.remove(random.nextInt(N));\n                 resultSet.add(new Cluster<T>(p));\n                 // Array dx2 needs to be resized or logic adapted for next iteration\n                 // Since pointSet is reduced, re-allocate dx2 in the next iteration if needed,\n                 // or handle size difference. Re-allocating is cleaner.\n                 // However, the current dx2 is declared outside the loop, so we need to handle this.\n                 // Let's assume the next iteration will correctly use the new pointSet.size().\n                 // A better implementation might re-allocate dx2 inside the loop.\n                 // For now, let's adjust the loop to work with the reduced size next time.\n                 // This requires resizing dx2 or managing indices carefully.\n                 // Let's assume dx2 will be used correctly based on N in the next iteration's loop.\n                 // The simplest is to re-allocate dx2 inside the loop (as done in a previous thought).\n                 // Sticking to minimal change: dx2 size is fixed, but only first N elements used.\n                 // After removal, N decreases. This seems okay.\n                 continue; // Go to next iteration\n            }\n\n\n            final double r = random.nextDouble() * sumDX2;\n            double cumulativeSum = 0.0;\n            int nextCenterIndex = -1;\n            for (int i = 0 ; i < N; i++) {\n                cumulativeSum += dx2[i]; // Use individual squared distances\n                if (cumulativeSum >= r) { // Found the interval\n                    nextCenterIndex = i;\n                    break;\n                }\n            }\n\n            // Handle potential edge case where floating point inaccuracies might leave\n            // cumulativeSum slightly less than r even for the last element, or if r is exactly sumDX2.\n            // Choose the last point in such scenarios.\n            if (nextCenterIndex == -1) {\n                 // This should theoretically not happen if sumDX2 > 0. Pick the last point.\n                 nextCenterIndex = N - 1;\n            }\n\n            final T p = pointSet.remove(nextCenterIndex);\n            resultSet.add(new Cluster<T>(p));\n            // dx2 array elements after nextCenterIndex are now invalid WRT pointSet indices,\n            // but dx2 is recalculated fully in the next iteration based on the reduced pointSet.\n        }\n\n        return resultSet;\n    }\n\n    // Helper method (assumed to exist and be correct based on original code context)\n    /**\n     * Returns the nearest {@link Cluster} to the given point\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to search\n     * @param point the point to find the nearest cluster for\n     * @return the nearest {@link Cluster} to the point\n     */\n    private static <T extends Clusterable<T>> Cluster<T>\n        getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n        double minDistance = Double.MAX_VALUE;\n        Cluster<T> minCluster = null;\n        for (final Cluster<T> c : clusters) {\n            // Use distance squared to potentially avoid sqrt calculation,\n            // though Clusterable defines distance, not distanceSquared.\n            // Sticking to original distanceFrom method call.\n            final double distance = point.distanceFrom(c.getCenter());\n            if (distance < minDistance) {\n                minDistance = distance;\n                minCluster = c;\n            }\n        }\n        return minCluster;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}