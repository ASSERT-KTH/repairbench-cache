{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        // dx2 will store the squared distance from the nearest center for each point\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            // Keep track of the sum of squared distances for the algorithm\n            double sum = 0.0; // Use double for sum to avoid truncation of small distances\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                final double d2 = d * d;\n                sum += d2;\n                // Store the cumulative sum of squared distances for weighted selection\n                // dx2[i] = sum up to this point\n                dx2[i] = (i == 0) ? d2 : dx2[i - 1] + d2;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2\n            // Draw a random value\n            final double r = random.nextDouble() * sum;\n\n            // Find the index representing the point to choose based on the cumulative sums\n            for (int i = 0 ; i < dx2.length; i++) {\n                // The first point which cumulative sum is >= r is chosen\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    // Recompute dx2 for the next iteration, accounting for the removed point\n                    // Note: This involves shifting elements or recalculating,\n                    // but since the loop breaks, we only need to recalculate in the next outer loop iteration.\n                    // However, dx2 is declared outside the loop and reused. Its size needs to match pointSet.size().\n                    // Let's recalculate dx2 entirely in the next iteration by moving its declaration inside the while loop\n                    // or resizing it. The current implementation reuses dx2 but its size decreases.\n                    // A simpler fix is just breaking, as the next iteration recomputes dx2 from scratch based on the reduced pointSet.\n                    // The current code structure seems to intend recalculating dx2 fully each time.\n                    // Let's stick to the minimal change first which fixed the type of sum.\n                    // Re-evaluating the cumulative sum logic:\n                    // The original code: dx2[i] = sum; IS correct for cumulative sum calculation.\n                    // My previous reasoning about dx2[i] = dx2[i-1] + d2 was just an alternative way to express it.\n                    // The primary bug was int sum = 0;. Let's revert the dx2 assignment logic to the original.\n\n                    // Corrected original logic with double sum:\n                    // Re-evaluate calculation inside the first for loop with double sum:\n                    /*\n                    double sum = 0.0;\n                    for (int i = 0; i < pointSet.size(); i++) {\n                        final T p = pointSet.get(i);\n                        final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                        final double d = p.distanceFrom(nearest.getCenter());\n                        sum += d * d; // Accumulate total sum correctly now\n                        dx2[i] = sum; // Store cumulative sum\n                    }\n                    */\n                    // This cumulative sum calculation IS correct.\n                    // The selection logic using `dx2[i] >= r` is also correct for cumulative sums.\n                    // The issue was solely the `int sum`. Let's put the original loop logic back, just changing the sum type.\n                    break; // Center found, break inner loop\n                }\n            }\n            // Re-allocate dx2 array for the next iteration with the reduced size\n             // This was missing, leading to potential ArrayIndexOutOfBoundsException if not for the break\n             // However, the code structure implies dx2 should be recalculated fully.\n             // Let's keep the minimal fix for now (sum type) as the index logic seems okay due to the break.\n             // The array size mismatch in subsequent iterations isn't hit because the selection loop breaks.\n             // But declaring dx2 inside the loop is cleaner. Let's stick to the minimal fix first.\n        }\n\n        return resultSet;\n\n    }\n\n    // Helper method assumed to exist (as it's used in the original code)\n    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(Collection<Cluster<T>> clusters, T point) {\n        double minDistance = Double.MAX_VALUE;\n        Cluster<T> nearest = null;\n        for (final Cluster<T> cluster : clusters) {\n            final double distance = point.distanceFrom(cluster.getCenter());\n            if (distance < minDistance) {\n                minDistance = distance;\n                nearest = cluster;\n            }\n        }\n        return nearest;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}