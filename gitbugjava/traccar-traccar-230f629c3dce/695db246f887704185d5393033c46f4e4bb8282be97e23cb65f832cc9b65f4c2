{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    // Skip length\n    buf.readUnsignedShort();\n\n    // Read IMEI (BCD-coded big endian)\n    String imei = String.format(\"%015d\", buf.readLong());\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    int type = buf.readUnsignedByte();\n\n    if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n\n        List<Position> positions = new LinkedList<>();\n\n        buf.readUnsignedByte(); // records left\n        int count = buf.readUnsignedByte();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            // Timestamp (big endian)\n            position.setTime(new Date(buf.readUnsignedInt() * 1000));\n            buf.readUnsignedByte(); // timestamp extension\n\n            if (type == MSG_EXTENDED_RECORDS) {\n                int recordExtension = buf.readUnsignedByte();\n                int mergeRecordCount = BitUtil.from(recordExtension, 4);\n                int currentRecord = BitUtil.to(recordExtension, 4);\n                if (currentRecord > 0 && currentRecord <= mergeRecordCount) {\n                    // Merge with previous\n                    position = positions.remove(positions.size() - 1);\n                }\n            }\n\n            buf.readUnsignedByte(); // priority (reserved)\n\n            position.setValid(true);\n\n            // Coordinates are little-endian\n            position.setLongitude(buf.readIntLE() / 1e7);\n            position.setLatitude(buf.readIntLE() / 1e7);\n\n            // Altitude and course are little-endian\n            position.setAltitude(buf.readUnsignedShortLE() / 10.0);\n            position.setCourse(buf.readUnsignedShortLE() / 100.0);\n\n            position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n\n            // Speed is little-endian\n            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n\n            position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);\n\n            // Event ID\n            if (type == MSG_EXTENDED_RECORDS) {\n                position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n            } else {\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n            }\n\n            // 1-byte IO\n            int valueCount = buf.readUnsignedByte();\n            for (int j = 0; j < valueCount; j++) {\n                int id = (type == MSG_EXTENDED_RECORDS\n                        ? buf.readUnsignedShort()\n                        : buf.readUnsignedByte());\n                decodeParameter(position, id, buf, 1);\n            }\n\n            // 2-byte IO\n            valueCount = buf.readUnsignedByte();\n            for (int j = 0; j < valueCount; j++) {\n                int id = (type == MSG_EXTENDED_RECORDS\n                        ? buf.readUnsignedShort()\n                        : buf.readUnsignedByte());\n                decodeParameter(position, id, buf, 2);\n            }\n\n            // 4-byte IO\n            valueCount = buf.readUnsignedByte();\n            for (int j = 0; j < valueCount; j++) {\n                int id = (type == MSG_EXTENDED_RECORDS\n                        ? buf.readUnsignedShort()\n                        : buf.readUnsignedByte());\n                decodeParameter(position, id, buf, 4);\n            }\n\n            // 8-byte IO\n            valueCount = buf.readUnsignedByte();\n            for (int j = 0; j < valueCount; j++) {\n                int id = (type == MSG_EXTENDED_RECORDS\n                        ? buf.readUnsignedShort()\n                        : buf.readUnsignedByte());\n                decodeParameter(position, id, buf, 8);\n            }\n\n            // Driver (CAN and TCO)\n            decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127);\n            decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156);\n\n            // Combine tag ID if present\n            Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);\n            Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);\n            if (tagIdPart1 != null && tagIdPart2 != null) {\n                position.set(\"tagId\",\n                    Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));\n            }\n\n            positions.add(position);\n        }\n\n        // Acknowledge records\n        if (channel != null) {\n            channel.writeAndFlush(new NetworkMessage(\n                    Unpooled.wrappedBuffer(\n                        DataConverter.parseHex(\"0002640113bc\")\n                    ),\n                    remoteAddress\n            ));\n        }\n\n        return positions;\n\n    } else if (type == MSG_DTCS) {\n\n        List<Position> positions = new LinkedList<>();\n\n        int count = buf.readUnsignedByte();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedByte(); // reserved\n\n            // Timestamp (big endian)\n            position.setTime(new Date(buf.readUnsignedInt() * 1000));\n\n            position.setValid(true);\n\n            // Coordinates are little-endian\n            position.setLongitude(buf.readIntLE() / 1e7);\n            position.setLatitude(buf.readIntLE() / 1e7);\n\n            // Archive flag\n            if (buf.readUnsignedByte() == 2) {\n                position.set(Position.KEY_ARCHIVE, true);\n            }\n\n            // DTC string\n            position.set(Position.KEY_DTCS,\n                buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n\n            positions.add(position);\n        }\n\n        // Acknowledge DTCs\n        if (channel != null) {\n            channel.writeAndFlush(new NetworkMessage(\n                    Unpooled.wrappedBuffer(\n                        DataConverter.parseHex(\"00026d01c4a4\")\n                    ),\n                    remoteAddress\n            ));\n        }\n\n        return positions;\n\n    } else if (type == MSG_FILES) {\n\n        int subtype = buf.readUnsignedByte();\n        int source = buf.readUnsignedByte();\n\n        if (subtype == 2) {\n            ByteBuf filename = buf.readSlice(8);\n            int total = buf.readUnsignedShort();\n            int current = buf.readUnsignedShort();\n            if (photo == null) {\n                photo = Unpooled.buffer();\n            }\n            photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));\n            if (current < total - 1) {\n                ByteBuf content = Unpooled.buffer();\n                content.writeByte(subtype);\n                content.writeByte(source);\n                content.writeBytes(filename);\n                content.writeShort(current + 1);\n                ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n                content.release();\n                if (channel != null) {\n                    channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n                }\n            } else {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(\n                    Position.KEY_IMAGE,\n                    writeMediaFile(imei, photo, \"jpg\")\n                );\n                photo.release();\n                photo = null;\n                return position;\n            }\n        }\n\n        return null;\n\n    } else if (type == MSG_IDENTIFICATION) {\n\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(1);\n        ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n        content.release();\n        if (channel != null) {\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return null;\n\n    } else {\n\n        return decodeCommandResponse(deviceSession, type, buf);\n\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}