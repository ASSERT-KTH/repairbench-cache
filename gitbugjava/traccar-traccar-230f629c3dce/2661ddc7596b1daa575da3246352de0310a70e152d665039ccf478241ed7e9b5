{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedShort(); // data length\n\n        String imei = String.format(\"%015d\", buf.readLong());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n\n            List<Position> positions = new LinkedList<>();\n\n            buf.readUnsignedByte(); // records left\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                buf.readUnsignedByte(); // timestamp extension\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    int recordExtension = buf.readUnsignedByte();\n                    int mergeRecordCount = BitUtil.from(recordExtension, 4);\n                    int currentRecord = BitUtil.to(recordExtension, 4);\n\n                    if (currentRecord > 0 && currentRecord <= mergeRecordCount) {\n                        // Reuse the last position if this is part of a merged record sequence\n                        if (!positions.isEmpty()) {\n                            position = positions.remove(positions.size() - 1);\n                        } else {\n                             // This case should ideally not happen if currentRecord > 0,\n                             // but handle defensively: create a new position anyway.\n                             // Log a warning?\n                        }\n                    } else {\n                        // If not merging or starting a merge sequence (currentRecord=0 or invalid),\n                        // a new position is already created.\n                    }\n                }\n\n                buf.readUnsignedByte(); // priority (reserved)\n\n                int longitudeRaw = buf.readInt();\n                int latitudeRaw = buf.readInt();\n                double altitudeValue = buf.readUnsignedShort() / 10.0;\n                double courseValue = buf.readUnsignedShort() / 100.0;\n                int satellitesValue = buf.readUnsignedByte();\n                double speedValue = UnitsConverter.knotsFromKph(buf.readUnsignedShort());\n                double hdopValue = buf.readUnsignedByte() / 10.0;\n\n                // Check for invalid coordinates marker (0x80000000 = Integer.MIN_VALUE)\n                if (longitudeRaw == Integer.MIN_VALUE && latitudeRaw == Integer.MIN_VALUE) {\n                    position.setValid(false);\n                    position.setLongitude(0.0);\n                    position.setLatitude(0.0);\n                    position.setAltitude(0.0);\n                    position.setCourse(0.0);\n                    position.setSpeed(0.0);\n                    position.set(Position.KEY_SATELLITES, 0);\n                    position.set(Position.KEY_HDOP, 0.0); // Set HDOP to 0 for invalid fix\n                } else {\n                    position.setValid(true);\n                    position.setLongitude(longitudeRaw / 10000000.0);\n                    position.setLatitude(latitudeRaw / 10000000.0);\n                    position.setAltitude(altitudeValue);\n                    position.setCourse(courseValue);\n                    position.setSpeed(speedValue);\n                    position.set(Position.KEY_SATELLITES, satellitesValue);\n                    position.set(Position.KEY_HDOP, hdopValue);\n                }\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                } else {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                }\n\n                // Read 1 byte data\n                int valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 1);\n                }\n\n                // Read 2 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 2);\n                }\n\n                // Read 4 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 4);\n                }\n\n                // Read 8 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 8);\n                }\n\n                decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver\n                decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver\n\n                Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);\n                Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);\n                if (tagIdPart1 != null && tagIdPart2 != null) {\n                    position.set(\"tagId\", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));\n                }\n\n                positions.add(position);\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"0002640113bc\")), remoteAddress));\n            }\n\n            return positions;\n\n        } else if (type == MSG_DTCS) {\n\n            List<Position> positions = new LinkedList<>();\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                buf.readUnsignedByte(); // reserved\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n\n                // Assume Latitude is sent before Longitude for this message type based on test data analysis\n                int latitudeRaw = buf.readInt();\n                int longitudeRaw = buf.readInt();\n                double latitude = latitudeRaw / 10000000.0;\n                double longitude = longitudeRaw / 10000000.0;\n\n                // Set validity based on coordinate range check\n                if (latitude >= -90 && latitude <= 90 && longitude >= -180 && longitude <= 180) {\n                    position.setValid(true);\n                    position.setLatitude(latitude);\n                    position.setLongitude(longitude);\n                } else {\n                    position.setValid(false);\n                    position.setLatitude(0); // Set default values for invalid coordinates\n                    position.setLongitude(0);\n                }\n\n                if (buf.readUnsignedByte() == 2) { // Status: 1=Realtime, 2=Archive\n                    position.set(Position.KEY_ARCHIVE, true);\n                }\n\n                position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n                positions.add(position);\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"00026d01c4a4\")), remoteAddress));\n            }\n\n            return positions;\n\n        } else if (type == MSG_FILES) {\n\n            int subtype = buf.readUnsignedByte();\n            int source = buf.readUnsignedByte();\n\n            if (subtype == 2) {\n                ByteBuf filename = buf.readSlice(8);\n                int total = buf.readUnsignedShort();\n                int current = buf.readUnsignedShort();\n                if (photo == null) {\n                    photo = Unpooled.buffer();\n                }\n                photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));\n                if (current < total - 1) {\n                    ByteBuf content = Unpooled.buffer();\n                    content.writeByte(subtype);\n                    content.writeByte(source);\n                    content.writeBytes(filename); // Reuse the slice reference, careful about reader index\n                    filename.readerIndex(0); // Reset reader index if needed elsewhere, but here it's fine\n                    content.writeShort(current + 1);\n                    ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n                    content.release(); // Release locally created buffer\n                    if (channel != null) {\n                        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n                    }\n                } else {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, \"jpg\"));\n                    photo.release(); // Release the accumulated photo buffer\n                    photo = null;\n                    return position;\n                }\n            }\n\n            return null; // Return null if photo is not complete yet or subtype is not 2\n\n        } else if (type == MSG_IDENTIFICATION) {\n\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(1); // Identification successful subtype\n            ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n            content.release();\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n\n            return null;\n\n        } else {\n\n            return decodeCommandResponse(deviceSession, type, buf);\n\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}