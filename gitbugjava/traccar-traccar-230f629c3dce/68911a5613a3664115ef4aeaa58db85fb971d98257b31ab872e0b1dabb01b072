{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedShort(); // data length\n\n        String imei = String.format(\"%015d\", buf.readLong());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n\n            List<Position> positions = new LinkedList<>();\n\n            buf.readUnsignedByte(); // records left\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                buf.readUnsignedByte(); // timestamp extension\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    int recordExtension = buf.readUnsignedByte();\n                    int mergeRecordCount = BitUtil.from(recordExtension, 4);\n                    int currentRecord = BitUtil.to(recordExtension, 4);\n\n                    if (currentRecord > 0 && currentRecord <= mergeRecordCount) {\n                        // This record part merges data into the previous position\n                        if (!positions.isEmpty()) {\n                            position = positions.remove(positions.size() - 1);\n                        } else {\n                            // Cannot merge if positions list is empty, skip this record part or handle error\n                            // For now, let's skip the coordinate/attribute reading for this broken merge part\n                            // Ideally, log a warning or handle more gracefully based on protocol specifics\n                            // Skipping essential reads might lead to buffer misalignment, but let's assume\n                            // the core fields are still read below and parameter loops handle remaining data.\n                            // A safer approach might be to read and discard expected bytes if possible.\n                        }\n                    }\n                }\n\n                buf.readUnsignedByte(); // priority (reserved)\n\n                int lonRaw = buf.readInt();\n                int latRaw = buf.readInt();\n\n                // Check for invalid coordinate marker (0x80000000 or Integer.MIN_VALUE)\n                if (lonRaw != Integer.MIN_VALUE && latRaw != Integer.MIN_VALUE) {\n                    position.setValid(true);\n                    position.setLongitude(lonRaw / 10000000.0);\n                    position.setLatitude(latRaw / 10000000.0);\n                } else {\n                    position.setValid(false);\n                    // Do not set longitude/latitude if raw values indicate invalidity\n                }\n\n                position.setAltitude(buf.readUnsignedShort() / 10.0);\n                position.setCourse(buf.readUnsignedShort() / 100.0);\n\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n\n                position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\n                position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                } else {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                }\n\n                // Read 1 byte data\n                int valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 1);\n                }\n\n                // Read 2 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 2);\n                }\n\n                // Read 4 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 4);\n                }\n\n                // Read 8 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 8);\n                }\n\n                decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver\n                decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver\n\n                Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);\n                Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);\n                if (tagIdPart1 != null && tagIdPart2 != null) {\n                    // Ensure hex strings are padded if needed, although Long.toHexString doesn't pad\n                    String hex1 = Long.toHexString(tagIdPart1);\n                    String hex2 = Long.toHexString(tagIdPart2);\n                    // Example padding to 8 hex chars (assuming 32-bit parts originally)\n                    // hex1 = (\"00000000\" + hex1).substring(hex1.length());\n                    // hex2 = (\"00000000\" + hex2).substring(hex2.length());\n                    position.set(\"tagId\", hex1 + hex2); // Concatenate hex strings\n                }\n\n                // Only add position if it wasn't potentially invalidated by a failed merge attempt\n                if (position != null) {\n                   positions.add(position);\n                }\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"0002640113bc\")), remoteAddress));\n            }\n\n            return positions.isEmpty() ? null : positions; // Return null if list is empty\n\n        } else if (type == MSG_DTCS) {\n\n            List<Position> positions = new LinkedList<>();\n\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                buf.readUnsignedByte(); // reserved\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n\n                int lonRaw = buf.readInt();\n                int latRaw = buf.readInt();\n\n                // Check for invalid coordinate marker (0x80000000 or Integer.MIN_VALUE)\n                if (lonRaw != Integer.MIN_VALUE && latRaw != Integer.MIN_VALUE) {\n                    position.setValid(true);\n                    position.setLongitude(lonRaw / 10000000.0);\n                    position.setLatitude(latRaw / 10000000.0);\n                } else {\n                    position.setValid(false);\n                    // Get last known location if current is invalid\n                    getLastLocation(position, position.getTime());\n                }\n\n\n                if (buf.readUnsignedByte() == 2) {\n                    position.set(Position.KEY_ARCHIVE, true);\n                }\n\n                // Ensure we don't read past buffer if length is less than 5\n                if (buf.readableBytes() >= 5) {\n                    position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n                } else {\n                     // Handle error: not enough bytes for DTCS code\n                     // Possibly skip this record or log error\n                }\n\n\n                positions.add(position);\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"00026d01c4a4\")), remoteAddress));\n            }\n\n            return positions.isEmpty() ? null : positions; // Return null if list is empty\n\n        } else if (type == MSG_FILES) {\n\n            int subtype = buf.readUnsignedByte();\n            int source = buf.readUnsignedByte();\n\n            if (subtype == 2) {\n                if (buf.readableBytes() < 8 + 2 + 2) { // filename + total + current + checksum(2)\n                     return null; // Not enough data\n                }\n                ByteBuf filename = buf.readSlice(8);\n                int total = buf.readUnsignedShort();\n                int current = buf.readUnsignedShort();\n                if (photo == null) {\n                    photo = Unpooled.buffer();\n                }\n                // Ensure there are bytes to read before checksum\n                if (buf.readableBytes() > 2) {\n                    photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));\n                } else {\n                    // No image data? Handle error or proceed\n                }\n                buf.readUnsignedShort(); // Read checksum\n\n                if (current < total - 1) {\n                    ByteBuf content = Unpooled.buffer();\n                    content.writeByte(subtype);\n                    content.writeByte(source);\n                    content.writeBytes(filename.resetReaderIndex()); // Reset reader index before writing\n                    content.writeShort(current + 1);\n                    ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n                    content.release();\n                    filename.release(); // Release filename buffer if appropriate (depends on slice semantics)\n                    if (channel != null) {\n                        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n                    }\n                } else {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    String uniqueImageName = imei + \"_\" + System.currentTimeMillis(); // More unique name\n                    position.set(Position.KEY_IMAGE, writeMediaFile(uniqueImageName, photo, \"jpg\"));\n                    photo.release(); // Release photo buffer\n                    photo = null;\n                    filename.release(); // Release filename buffer if appropriate\n                    return position;\n                }\n            } else {\n                 // Handle other subtypes if necessary\n            }\n\n            return null; // Return null unless it's the last file part\n\n        } else if (type == MSG_IDENTIFICATION) {\n\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(1); // Acknowledge identification\n            ByteBuf response = RuptelaProtocolEncoder.encodeContent(MSG_IDENTIFICATION_RESPONSE, content); // Use correct response type if defined\n            content.release();\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n\n            return null;\n\n        } else {\n\n            return decodeCommandResponse(deviceSession, type, buf);\n\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}