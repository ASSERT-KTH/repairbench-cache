{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedShort(); // data length\n\n        String imei = String.format(\"%015d\", buf.readLong());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n\n            List<Position> positions = new LinkedList<>();\n\n            buf.readUnsignedByte(); // records left\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                buf.readUnsignedByte(); // timestamp extension\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    int recordExtension = buf.readUnsignedByte();\n                    int mergeRecordCount = BitUtil.from(recordExtension, 4);\n                    int currentRecord = BitUtil.to(recordExtension, 4);\n\n                    if (currentRecord > 0 && currentRecord <= mergeRecordCount) {\n                        if (positions.isEmpty()) {\n                            // Can't merge if the list is empty, skip this record section. Log maybe?\n                            // This assumes the base record part will be read afterwards.\n                            // If not, the buffer might desync. Needs protocol clarification.\n                            // For now, just read the fields corresponding to the base record to advance buffer.\n                            buf.readUnsignedByte(); // priority\n                            buf.readInt(); // lon\n                            buf.readInt(); // lat\n                            buf.readUnsignedShort(); // alt\n                            buf.readUnsignedShort(); // course\n                            buf.readUnsignedByte(); // satellites\n                            buf.readUnsignedShort(); // speed\n                            buf.readUnsignedByte(); // hdop\n                            buf.readUnsignedShort(); // event (extended)\n                            // Skip IO reading for this incomplete merge attempt\n                            continue; // Skip to next record in outer loop\n                        }\n                        position = positions.remove(positions.size() - 1);\n                    }\n                }\n\n                buf.readUnsignedByte(); // priority (reserved)\n\n                // Read coordinates and other GPS data\n                int lon = buf.readInt();\n                int lat = buf.readInt();\n                double altitude = buf.readUnsignedShort() / 10.0;\n                double course = buf.readUnsignedShort() / 100.0;\n                int satellites = buf.readUnsignedByte();\n                double speed = UnitsConverter.knotsFromKph(buf.readUnsignedShort());\n                double hdop = buf.readUnsignedByte() / 10.0;\n\n                // Check validity based on coordinates\n                // Integer.MIN_VALUE (0x80000000) is used to indicate invalid data in some cases\n                // Also check against logical boundaries (degrees * 10^7)\n                if (lon != Integer.MIN_VALUE && lat != Integer.MIN_VALUE &&\n                    lat <= 900000000 && lat >= -900000000 &&\n                    lon <= 1800000000 && lon >= -1800000000) {\n\n                    position.setValid(true);\n                    position.setLongitude(lon / 10000000.0);\n                    position.setLatitude(lat / 10000000.0);\n                    position.setAltitude(altitude);\n                    position.setCourse(course);\n                    position.setSpeed(speed);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_HDOP, hdop);\n\n                } else {\n                    position.setValid(false);\n                    // Set lat/lon to 0 or keep default, Position object handles this.\n                    // Still set other GPS fields as they might be valid or contain markers\n                    position.setAltitude(altitude);\n                    position.setCourse(course);\n                    position.setSpeed(speed);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_HDOP, hdop);\n                }\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                } else {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                }\n\n                // Read 1 byte data\n                int valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 1);\n                }\n\n                // Read 2 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 2);\n                }\n\n                // Read 4 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 4);\n                }\n\n                // Read 8 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 8);\n                }\n\n                decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver\n                decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver\n\n                Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);\n                Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);\n                if (tagIdPart1 != null && tagIdPart2 != null) {\n                    position.set(\"tagId\", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));\n                }\n\n                positions.add(position);\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"0002640113bc\")), remoteAddress));\n            }\n\n            return positions;\n\n        } else if (type == MSG_DTCS) {\n\n            List<Position> positions = new LinkedList<>();\n\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                buf.readUnsignedByte(); // reserved\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n\n                // Read coordinates\n                int lon = buf.readInt();\n                int lat = buf.readInt();\n\n                // Check validity based on coordinates\n                if (lon != Integer.MIN_VALUE && lat != Integer.MIN_VALUE &&\n                    lat <= 900000000 && lat >= -900000000 &&\n                    lon <= 1800000000 && lon >= -1800000000) {\n\n                    position.setValid(true);\n                    position.setLongitude(lon / 10000000.0);\n                    position.setLatitude(lat / 10000000.0);\n                } else {\n                    position.setValid(false);\n                    // Lat/Lon remain default 0.0\n                }\n\n                if (buf.readUnsignedByte() == 2) {\n                    position.set(Position.KEY_ARCHIVE, true);\n                }\n\n                position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n\n                positions.add(position);\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"00026d01c4a4\")), remoteAddress));\n            }\n\n            return positions;\n\n        } else if (type == MSG_FILES) {\n\n            int subtype = buf.readUnsignedByte();\n            int source = buf.readUnsignedByte();\n\n            if (subtype == 2) {\n                ByteBuf filename = buf.readSlice(8);\n                int total = buf.readUnsignedShort();\n                int current = buf.readUnsignedShort();\n                if (photo == null) {\n                    photo = Unpooled.buffer();\n                }\n                // Check buffer bounds before reading slice\n                int bytesToRead = buf.readableBytes() - 2; // Need 2 bytes for checksum\n                if (bytesToRead > 0) {\n                     photo.writeBytes(buf.readSlice(bytesToRead));\n                } // else: nothing to read, might indicate truncated message\n                buf.skipBytes(2); // Skip checksum even if read failed\n\n                if (current < total - 1) {\n                    ByteBuf content = Unpooled.buffer();\n                    content.writeByte(subtype);\n                    content.writeByte(source);\n                    content.writeBytes(filename.resetReaderIndex()); // Reset reader index before writing\n                    content.writeShort(current + 1);\n                    ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n                    content.release();\n                    if (channel != null) {\n                        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n                    }\n                } else {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    if (photo != null && photo.readableBytes() > 0) {\n                        position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, \"jpg\"));\n                    }\n                    if (photo != null) {\n                        photo.release();\n                        photo = null;\n                    }\n                    return position;\n                }\n            } else {\n                 // Handle other subtypes or unknown data\n                 buf.skipBytes(buf.readableBytes() - 2); // Skip unknown payload minus checksum\n                 buf.skipBytes(2); // Skip checksum\n            }\n\n            return null;\n\n        } else if (type == MSG_IDENTIFICATION) {\n\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(1);\n            ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n            content.release();\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n            // Consume the rest of the identification message payload if any + checksum\n            if (buf.readableBytes() > 2) {\n                 buf.skipBytes(buf.readableBytes() - 2);\n            }\n            buf.skipBytes(Math.min(2, buf.readableBytes())); // Skip checksum\n\n            return null;\n\n        } else {\n\n            return decodeCommandResponse(deviceSession, type, buf);\n\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}