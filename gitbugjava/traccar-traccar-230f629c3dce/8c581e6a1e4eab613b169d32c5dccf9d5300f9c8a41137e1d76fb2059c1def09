{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedShort(); // data length\n\n        String imei = String.format(\"%015d\", buf.readLong());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            // Return null if the device session is not found to avoid processing invalid data\n            // Or if we need to wait for identification message\n             return null;\n        }\n\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n\n            List<Position> positions = new LinkedList<>();\n\n            buf.readUnsignedByte(); // records left\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                buf.readUnsignedByte(); // timestamp extension\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    int recordExtension = buf.readUnsignedByte();\n                    int mergeRecordCount = BitUtil.from(recordExtension, 4);\n                    int currentRecord = BitUtil.to(recordExtension, 4);\n\n                    if (currentRecord > 0 && currentRecord <= mergeRecordCount && !positions.isEmpty()) {\n                        position = positions.remove(positions.size() - 1);\n                    } else {\n                        // Create new position if it's the first part or list is empty\n                        position = new Position(getProtocolName());\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        position.setTime(new Date(buf.getUnsignedInt(buf.readerIndex() - 6) * 1000)); // Re-read time for new pos\n                    }\n                 }\n\n                buf.readUnsignedByte(); // priority (reserved)\n\n                int rawLon = buf.readInt();\n                int rawLat = buf.readInt();\n\n                // Check for invalid coordinate sentinel value (0x80000000 = Integer.MIN_VALUE)\n                if (rawLon != Integer.MIN_VALUE && rawLat != Integer.MIN_VALUE) {\n                    position.setValid(true);\n                    position.setLongitude(rawLon / 10000000.0);\n                    position.setLatitude(rawLat / 10000000.0);\n                } else {\n                    position.setValid(false);\n                    // Leave longitude and latitude as default (0.0)\n                }\n\n                position.setAltitude(buf.readUnsignedShort() / 10.0);\n                position.setCourse(buf.readUnsignedShort() / 100.0);\n\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n\n                position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\n                position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                } else {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                }\n\n                // Read 1 byte data\n                int valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 1);\n                }\n\n                // Read 2 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 2);\n                }\n\n                // Read 4 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 4);\n                }\n\n                // Read 8 byte data\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 8);\n                }\n\n                decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver\n                decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver\n\n                Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);\n                Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);\n                if (tagIdPart1 != null && tagIdPart2 != null) {\n                    position.set(\"tagId\", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));\n                }\n\n                // Add position only if it hasn't been implicitly added by merge logic\n                // Find the position by time and device ID to avoid duplicates if merge logic was complex\n                boolean positionExists = false;\n                if (type == MSG_EXTENDED_RECORDS && BitUtil.to(buf.getUnsignedByte(buf.readerIndex() - buf.readableBytes() + 6), 4) > 0) { // Check currentRecord\n                   for(Position p : positions) {\n                       if(p.getDeviceId() == position.getDeviceId() && p.getFixTime().equals(position.getFixTime())) {\n                           positionExists = true;\n                           break;\n                       }\n                   }\n                }\n                if (!positionExists) {\n                    positions.add(position);\n                }\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"0002640113bc\")), remoteAddress));\n            }\n\n            return positions;\n\n        } else if (type == MSG_DTCS) {\n\n            List<Position> positions = new LinkedList<>();\n\n            int count = buf.readUnsignedByte();\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                buf.readUnsignedByte(); // reserved\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n\n                int rawLon = buf.readInt();\n                int rawLat = buf.readInt();\n\n                // Check for invalid coordinate sentinel value (0x80000000 = Integer.MIN_VALUE)\n                if (rawLon != Integer.MIN_VALUE && rawLat != Integer.MIN_VALUE) {\n                    position.setValid(true);\n                    position.setLongitude(rawLon / 10000000.0);\n                    position.setLatitude(rawLat / 10000000.0);\n                 } else {\n                    position.setValid(false);\n                    // Leave longitude and latitude as default (0.0)\n                }\n\n                if (buf.readUnsignedByte() == 2) {\n                    position.set(Position.KEY_ARCHIVE, true);\n                }\n\n                position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n\n                positions.add(position);\n            }\n\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"00026d01c4a4\")), remoteAddress));\n            }\n\n            return positions;\n\n        } else if (type == MSG_FILES) {\n\n            int subtype = buf.readUnsignedByte();\n            int source = buf.readUnsignedByte();\n\n            if (subtype == 2) {\n                ByteBuf filename = buf.readSlice(8);\n                int total = buf.readUnsignedShort();\n                int current = buf.readUnsignedShort();\n                if (photo == null) {\n                    photo = Unpooled.buffer();\n                }\n                photo.writeBytes(buf.readSlice(buf.readableBytes() - 2)); // assume CRC is last 2 bytes\n                if (current < total - 1) {\n                    ByteBuf content = Unpooled.buffer();\n                    content.writeByte(subtype);\n                    content.writeByte(source);\n                    content.writeBytes(filename.resetReaderIndex()); // Reset reader index before writing\n                    content.writeShort(current + 1);\n                    ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n                    content.release();\n                    filename.release(); // Release filename buffer\n                    if (channel != null) {\n                        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n                    }\n                } else {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, \"jpg\"));\n                    photo.release();\n                    photo = null;\n                    filename.release(); // Release filename buffer\n                    return position;\n                }\n            }\n\n             // Consume CRC\n            buf.readUnsignedShort();\n\n            return null;\n\n        } else if (type == MSG_IDENTIFICATION) {\n\n            // Process identification if needed, e.g., update device session attributes\n            // For now, just send acknowledgment\n\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(1); // Acknowledgment status: OK\n            ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n            content.release();\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n\n            return null; // Identification doesn't produce a position\n\n        } else {\n\n            return decodeCommandResponse(deviceSession, type, buf);\n\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}