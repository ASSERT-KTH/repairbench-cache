{
    "generation": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // Determine if this attribute should be output in collapsed boolean fashion (key only, no value)\n            // Example: <div noshade> rather than <div noshade=\"\">\n            // Boolean attributes should be collapsed in HTML mode if the value is null, empty, or equals the key's name (case-insensitive).\n            // The presence of the attribute name implies true in HTML5\n            final boolean renderValue = !(\n                out.syntax() == Document.OutputSettings.Syntax.html &&\n                Attribute.isBooleanAttribute(key) &&\n                (val == null || val.isEmpty() || val.equalsIgnoreCase(key)) // collapse null, empty, or value=key name\n            );\n\n            if (renderValue) {\n                accum.append(\"=\\\"\");\n                // Use EmptyString representation for null values if needed, consistent with original code's pattern,\n                // although val should typically not be null when renderValue is true based on the condition above,\n                // except for non-boolean attributes where val might be null.\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n            // else: If it's a boolean attribute suitable for collapsing, we've already output the key, and that's all.\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}