{
    "generation": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i]; // can be null -> checked below\n            accum.append(' ').append(key);\n\n            // collapse checked=null, checked=\"\", checked=checked; write out others\n            // The value should be omitted if:\n            // 1) It's really null\n            // 2) In HTML mode, the attribute is boolean, and the value matches the key or is empty\n            if (!Attribute.shouldCollapseAttribute(key, val, out)) {\n                accum.append(\"=\\\"\");\n                // if val is null, use empty string - happens in Attributes where null allowed for vals\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }\n\n    // Added helper method from Attribute class for context (or assume it exists)\n    static boolean shouldCollapseAttribute(final String key, @Nullable final String val, final Document.OutputSettings out) {\n        return (\n            out.syntax() == Document.OutputSettings.Syntax.html &&\n            (val == null || (Attribute.isBooleanAttribute(key) && (val.isEmpty() || val.equalsIgnoreCase(key))))\n            // Note: previous impl was `val.equals(key)` but that differs from spec / legacy user agents\n            // e.g. `<details open=open>` is equivalent to `<details open>`\n        );\n    }\n\n    // Note: The fix involves calling Attribute.shouldCollapseAttribute, which encapsulates the corrected logic.\n    // If modifying the existing code directly without adding the helper method call:\n    /*\n    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i]; // can be null -> checked below\n            accum.append(' ').append(key);\n\n            // collapse checked=null, checked=\"\", checked=checked; write out others\n            // The value should be omitted if: output is html, key is boolean attribute, and value is null, empty, or equals key.\n            boolean omitValuePart = out.syntax() == Document.OutputSettings.Syntax.html\n                                  && Attribute.isBooleanAttribute(key)\n                                  && (val == null || val.isEmpty() || val.equalsIgnoreCase(key)); // Use equalsIgnoreCase like in Attribute.java\n\n            if (!omitValuePart) {\n                accum.append(\"=\\\"\");\n                // if val is null, use empty string - happens in Attributes where null allowed for vals\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }\n    */\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}