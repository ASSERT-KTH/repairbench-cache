{
    "generation": "    /**\n     * Determines whether the given string is a valid JavaScript identifier.\n     * NOTE: This function is conservative and assumes that Unicode characters\n     * are NOT valid in identifiers. This is because many browsers still have\n     * problems understanding identifiers with Unicode characters in them.\n     * See https://github.com/google/closure-compiler/issues/223\n     *\n     * If we ever change this function to support Unicode identifiers, we will\n     * likely need to create a separate function for \"safe\" identifiers that\n     * can be used as property names.\n     */\n    public static boolean isJSIdentifier(String s) {\n      int length = s.length();\n\n      if (length == 0) {\n        return false;\n      }\n\n      char firstChar = s.charAt(0);\n      // Check if the first character is a valid start character (a-z, A-Z, $, _)\n      // Note: Excludes Unicode letters for conservatism.\n      if (!((firstChar >= 'a' && firstChar <= 'z') ||\n            (firstChar >= 'A' && firstChar <= 'Z') ||\n            firstChar == '$' ||\n            firstChar == '_')) {\n        return false;\n      }\n\n      // Check the rest of the characters\n      for (int i = 1; i < length; i++) {\n        char c = s.charAt(i);\n        // Check if the character is a valid part character (a-z, A-Z, 0-9, $, _)\n        // Note: Excludes Unicode letters, digits, and combining marks.\n        if (!((c >= 'a' && c <= 'z') ||\n              (c >= 'A' && c <= 'Z') ||\n              (c >= '0' && c <= '9') ||\n              c == '$' ||\n              c == '_')) {\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}