{
    "generation": "    /**\n     * Returns true if the specified string is a valid ECMAScript identifier\n     * name according to ECMAScript 5.1 section 7.6 Identifier Names,\n     * and is not a reserved keyword. This function is intentionally\n     * conservative and only treats ASCII identifiers as valid.\n     *\n     * Note that this function is not intended to be a general purpose\n     * JavaScript identifier checker. For example, it does not support\n     * Unicode letters or digits. It is designed to be used where the only concern\n     * is whether a string can be used as a property name without quotes.\n     */\n    public static boolean isJSIdentifier(String s) {\n      int length = s.length();\n\n      if (length == 0) {\n        return false;\n      }\n\n      char c0 = s.charAt(0);\n      // Check first character: Must be ASCII letter, '$', or '_'\n      boolean firstCharOk = (c0 >= 'a' && c0 <= 'z') || (c0 >= 'A' && c0 <= 'Z') ||\n                            c0 == '$' || c0 == '_';\n\n      if (!firstCharOk) {\n        return false;\n      }\n\n      // Check subsequent characters: Must be ASCII letter, ASCII digit, '$', or '_'\n      for (int i = 1; i < length; i++) {\n        char ci = s.charAt(i);\n        boolean charOk = (ci >= 'a' && ci <= 'z') || (ci >= 'A' && ci <= 'Z') ||\n                         (ci >= '0' && ci <= '9') ||\n                         ci == '$' || ci == '_';\n        if (!charOk) {\n          return false;\n        }\n      }\n\n      // Check if the identifier is a reserved keyword in JavaScript.\n      // ECMAScript 5.1 section 7.6.1 Keywords and Reserved Words.\n      if (com.google.javascript.rhino.TokenStream.isKeyword(s)) {\n         return false;\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}