{
    "generation": "    /**\n     * Checks whether the given string is a valid identifier according to\n     * ECMA-262 Section 7.6 specification. This mimics the restrictions\n     * imposed by the JS compiler. It does not include reserved words.\n     *\n     * A JavaScript identifier must start with a letter, $, or _.\n     * Subsequent characters can be letters, numbers, $, or _.\n     *\n     * Note that this differs from Java identifiers in that JS identifiers\n     * cannot contain Java's \"identifier ignorable\" characters (Unicode\n     * format-control characters).\n     *\n     * @param s The string to check.\n     * @return Whether {@code s} is a valid JavaScript identifier.\n     */\n    public static boolean isJSIdentifier(String s) {\n      int length = s.length();\n\n      if (length == 0) {\n        return false;\n      }\n\n      char firstChar = s.charAt(0);\n      // JS identifier start: Unicode letter, $, _\n      // Check using Character.isLetter for Unicode support.\n      if (!(Character.isLetter(firstChar) || firstChar == '$' || firstChar == '_')) {\n          return false;\n      }\n\n      for (int i = 1; i < length; i++) {\n        char c = s.charAt(i);\n        // JS identifier part: Unicode letter, digit, $, _\n        // Check using Character.isLetterOrDigit for Unicode support.\n        // Importantly, this excludes format-control characters (like \\u0004)\n        // which are allowed by Character.isJavaIdentifierPart but not in JS.\n        if (!(Character.isLetterOrDigit(c) || c == '$' || c == '_')) {\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}