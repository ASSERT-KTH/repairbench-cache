{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     * @throws IllegalArgumentException if count is not positive or exceeds 63\n     */\n    public long readBits(final int count) throws IOException {\n        // Validate input count\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // If no bits are requested, return 0\n        if (count == 0) {\n            return 0L;\n        }\n\n        // Ensure enough bits are available in the cache\n        while (bitsCachedSize < count) {\n            // Read the next byte from the input stream\n            final long nextByte = in.read();\n            // Check for end of stream\n            if (nextByte < 0) {\n                // Return -1 if end of stream is reached before reading requested number of bits\n                return nextByte;\n            }\n\n            // Incorporate the new byte into the cache based on byte order\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // Little Endian: New byte bits are added starting from the current bit offset (bitsCachedSize).\n                // The cache grows towards the most significant bit (MSB).\n                // Cast nextByte to long *before* shifting. This is crucial when bitsCachedSize >= 32\n                // to prevent the shift operation from being performed on an int, which could lead\n                // to incorrect results due to truncation or sign extension before the bits\n                // are OR'ed into the long bitsCached.\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else {\n                // Big Endian: New byte bits are added at the least significant bit (LSB) end.\n                // Existing cache bits are shifted left by 8 to make space.\n                // Note: If bitsCachedSize >= 57, this left shift (bitsCached <<= 8)\n                // will lose the most significant bits currently in the cache, as 'long' is 64 bits.\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            // Increment the number of cached bits\n            bitsCachedSize += 8;\n        }\n            // By this point, bitsCachedSize >= count\n            // Note: The comment below referring to potential overflow is slightly misplaced,\n            // as the overflow check/handling implicitly happens within the loop logic now.\n            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow\n\n        // Extract the requested 'count' bits from the cache\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            // Little Endian: The requested bits are the 'count' least significant bits in the cache.\n            bitsOut = (bitsCached & MASKS[count]);\n            // Remove the extracted bits from the cache by shifting right (unsigned).\n            bitsCached >>>= count;\n        } else {\n            // Big Endian: The requested bits are the 'count' most significant bits currently available\n            // within the potentially 64-bit limited cache.\n            // Shift the cache right so these bits align at the LSB end.\n            // The shift amount is (bitsCachedSize - count).\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n            // Note: For BE, the consumed bits are not explicitly cleared from 'bitsCached' by masking.\n            // The subsequent left shifts in the next read cycle effectively handle this.\n        }\n\n        // Update the number of valid bits remaining in the cache\n        bitsCachedSize -= count;\n\n        // Return the extracted bits\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}