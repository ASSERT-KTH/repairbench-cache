{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // Optimization: Handle count=0 early.\n        if (count == 0) {\n             return 0L;\n        }\n\n        // Fill the cache with enough bits.\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                // EOF reached. If we have enough bits accumulated, proceed. Otherwise, signal EOF.\n                 if (bitsCachedSize >= count) {\n                     break;\n                 }\n                 return -1;\n            }\n\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // Place the new byte at the MSB side of the conceptual bit cache.\n                // bitsCached |= (nextByte << bitsCachedSize);\n                // If nextByte << bitsCachedSize would overflow, the high bits of nextByte are lost.\n                // This correctly reflects that the cache holds the LSB side of the stream.\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else {\n                // Place the new byte at the LSB side of the conceptual bit cache.\n                // bitsCached <<= 8;\n                // bitsCached |= nextByte;\n                // Shifting bitsCached left by 8 might overflow, losing the MSBs (oldest bits).\n                // This correctly reflects that the cache holds the LSB side (most recent bits) of the stream.\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            bitsCachedSize += 8;\n        }\n\n        // At this point, we should have bitsCachedSize >= count, unless EOF was hit prematurely.\n        // The case where EOF is hit but bitsCachedSize >= count is handled by the loop break.\n        // The case where EOF is hit and bitsCachedSize < count is handled by return -1 in the loop.\n\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            // Extract the 'count' least significant bits.\n            bitsOut = (bitsCached & MASKS[count]);\n            // Remove the extracted bits from the LSB side of the cache.\n            bitsCached >>>= count; // Use unsigned shift\n            // Update the number of bits remaining in the cache.\n            bitsCachedSize -= count;\n        } else { // BIG_ENDIAN\n            // Calculate how many bits are in the cache beyond the desired 'count'.\n            // These are the LSBs in 'bitsCached' that should remain after extraction.\n            final int shift = bitsCachedSize - count;\n            // Extract the 'count' most significant bits from the cache.\n            // Shift 'bitsCached' right arithmetic ('>>') so the desired MSBs align to the right.\n            // Mask with MASKS[count] to isolate the 'count' bits.\n            bitsOut = (bitsCached >> shift) & MASKS[count];\n            // Update the cache: Remove the extracted MSBs.\n            // Keep only the 'shift' LSBs which were not extracted.\n            bitsCached &= MASKS[shift];\n            // Update the number of bits remaining in the cache.\n            bitsCachedSize = shift;\n        }\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}