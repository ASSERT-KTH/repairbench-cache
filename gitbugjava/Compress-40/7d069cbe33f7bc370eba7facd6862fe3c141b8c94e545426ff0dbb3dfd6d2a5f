{
    "generation": "    /**\n     * Returns at most 63 bits read from the underlying stream.\n     *\n     * @param count the number of bits to read, must be a positive\n     * number not bigger than 63.\n     * @return the bits concatenated as a long using the stream's byte order.\n     *         -1 if the end of the underlying stream has been reached before reading\n     *         the requested number of bits\n     * @throws IOException on error\n     */\n    public long readBits(final int count) throws IOException {\n        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n            throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n        }\n        // Handle count=0 edge case cleanly\n        if (count == 0) {\n            return 0L;\n        }\n\n        // Accumulate bits until we have enough in the cache\n        while (bitsCachedSize < count) {\n            final long nextByte = in.read();\n            // Check for EOF *before* modifying cache state\n            if (nextByte < 0) {\n                return nextByte; // Return -1 indicating EOF\n            }\n\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                // Place the new byte's bits after the existing bits in the cache.\n                // Note: If bitsCachedSize is >= 64, the shift amount (bitsCachedSize % 64)\n                // will be incorrect for placing bits beyond the 64th position.\n                // However, since count <= 63, we only extract from the lower 63 bits,\n                // so this overflow might not affect the result *if* enough valid bits\n                // were already cached correctly in the lower positions.\n                bitsCached |= (nextByte << bitsCachedSize);\n            } else { // BIG_ENDIAN\n                // Shift cache left, add new byte at the LSB side.\n                // Note: If bitsCachedSize > 56, bitsCached <<= 8 will lose the\n                // most significant (bitsCachedSize - 56) bits from the cache.\n                // This is a potential data loss for reads requiring > 56 bits.\n                bitsCached <<= 8;\n                bitsCached |= nextByte;\n            }\n            bitsCachedSize += 8; // Increment the number of available bits\n        }\n            // At this point, bitsCachedSize >= count\n\n        final long bitsOut;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            // Extract the lowest 'count' bits.\n            bitsOut = (bitsCached & MASKS[count]);\n            // Remove the extracted bits by shifting right (unsigned).\n            bitsCached >>>= count;\n        } else { // BIG_ENDIAN\n            // Extract the most significant 'count' bits from the available 'bitsCachedSize' bits.\n            // Shift right (unsigned) to align the desired bits to the LSB side, then mask.\n            bitsOut = (bitsCached >>> (bitsCachedSize - count)) & MASKS[count];\n            // FIX: Remove the extracted bits from the cache.\n            // The remaining bits are the lower (bitsCachedSize - count) bits. Mask them.\n            bitsCached &= MASKS[bitsCachedSize - count];\n        }\n\n        // Update the count of bits remaining in the cache.\n        bitsCachedSize -= count;\n\n        return bitsOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}