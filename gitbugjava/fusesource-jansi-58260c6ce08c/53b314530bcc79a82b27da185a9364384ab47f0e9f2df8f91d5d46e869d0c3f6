{
    "generation": "    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    // If there are no BEGIN_TOKEN before an END_TOKEN, it's invalid.\n                    if (input.indexOf(END_TOKEN) != -1) {\n                        throw new IllegalArgumentException(\"END_TOKEN found before BEGIN_TOKEN\");\n                    }\n                    target.append(input);\n                    return target;\n                }\n                // Check if there's any END_TOKEN in remaining string (which can't have corresponding BEGIN_TOKEN before)\n                if (input.substring(i).indexOf(END_TOKEN) != -1) {\n                    throw new IllegalArgumentException(\"END_TOKEN without corresponding BEGIN_TOKEN\");\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j);\n            if (k == -1) {\n                throw new IllegalArgumentException(\"Missing END_TOKEN for BEGIN_TOKEN at position \" + j);\n            }\n            int specStart = j + BEGIN_TOKEN_LEN;\n            if (k < specStart) {\n                throw new IllegalArgumentException(\"END_TOKEN is before the end of BEGIN_TOKEN\");\n            }\n            String spec = input.substring(specStart, k);\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length != 2) {\n                throw new IllegalArgumentException(\"Spec must contain two parts separated by \" + CODE_TEXT_SEPARATOR);\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n            target.append(replacement);\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}