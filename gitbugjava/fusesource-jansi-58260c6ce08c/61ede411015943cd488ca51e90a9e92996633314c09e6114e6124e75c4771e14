{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                // No more BEGIN_TOKEN found, append the rest of the input (or all if no tokens found yet)\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            // Append the part before the current BEGIN_TOKEN\n            target.append(input.substring(i, j));\n\n            // Find the END_TOKEN, starting search from where BEGIN_TOKEN was found\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // BEGIN_TOKEN found, but no matching END_TOKEN.\n                // The original logic handles this by appending the entire input and returning.\n                // This implies an unclosed sequence is rendered as plain text.\n                target.append(input);\n                return target;\n            }\n\n            // Fix for testRenderInvalidEndBeforeStart:\n            // Check if END_TOKEN appears too early, i.e., before the BEGIN_TOKEN itself has fully ended,\n            // or if it overlaps with the BEGIN_TOKEN.\n            // 'j' is the start of BEGIN_TOKEN. 'BEGIN_TOKEN_LEN' is its length.\n            // The content should start at 'j + BEGIN_TOKEN_LEN'.\n            // So, 'k' (start of END_TOKEN) must be at least 'j + BEGIN_TOKEN_LEN'.\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\"Invalid ANSI sequence: END_TOKEN found too early, overlapping or preceding BEGIN_TOKEN content. Input: '\" + input + \"'\");\n            }\n\n            // Adjust 'j' to point to the start of the spec content\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // If CODE_TEXT_SEPARATOR is not found, the spec is considered malformed or incomplete.\n                // The original logic handles this by appending the entire input and returning.\n                // This means the sequence is not rendered as an ANSI code but as plain text.\n                target.append(input);\n                return target;\n            }\n\n            // Render the content and its styles/attributes\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            // Append the rendered replacement\n            target.append(replacement);\n\n            // Move the search index 'i' past the current ANSI sequence\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}