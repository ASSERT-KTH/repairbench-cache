{
    "generation": "/**\n * Renders the given input to the target Appendable.\n *\n * @param input\n *            source to render\n * @param target\n *            render onto this target Appendable.\n * @return the given Appendable\n * @throws IOException\n *             If an I/O error occurs\n * @throws IllegalArgumentException\n *             If invalid tokens are found in the input\n */\npublic static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // Check for invalid END tokens if there are no more BEGIN tokens\n            if (i == 0) {\n                if (input.contains(END_TOKEN)) {\n                    throw new IllegalArgumentException(\"Invalid end token found in input.\");\n                }\n                target.append(input);\n            } else {\n                String remaining = input.substring(i);\n                if (remaining.contains(END_TOKEN)) {\n                    throw new IllegalArgumentException(\"Invalid end token found in remaining input.\");\n                }\n                target.append(remaining);\n            }\n            return target;\n        }\n\n        // Check for invalid END tokens between i and j\n        String literalText = input.substring(i, j);\n        if (literalText.contains(END_TOKEN)) {\n            throw new IllegalArgumentException(\"Invalid end token found in literal text between \" + i + \" and \" + j);\n        }\n        target.append(literalText);\n\n        k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"No end token found after begin token at position \" + j);\n        }\n\n        // Process the content between BEGIN and END tokens\n        j += BEGIN_TOKEN_LEN;\n        String spec = input.substring(j, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length == 1) {\n            target.append(input);\n            return target;\n        }\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}