{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j); // Search for END_TOKEN from the BEGIN_TOKEN's start\n\n            if (k == -1) {\n                // BEGIN_TOKEN found, but no matching END_TOKEN found. This is an unterminated sequence.\n                throw new IllegalArgumentException(\"Invalid ANSI sequence: unterminated at index \" + j);\n            }\n            j += BEGIN_TOKEN_LEN; // Advance j past the BEGIN_TOKEN to get the spec content\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // If CODE_TEXT_SEPARATOR is not found, the format is invalid (e.g., @|red|@ instead of @|red:text|@)\n                throw new IllegalArgumentException(\"Invalid ANSI sequence: missing CODE_TEXT_SEPARATOR in spec '\" + spec + \"'\");\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}