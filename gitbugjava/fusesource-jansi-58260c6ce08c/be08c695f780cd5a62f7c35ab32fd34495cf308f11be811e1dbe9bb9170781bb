{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     * @throws IllegalArgumentException\n     *             If the input string has an invalid token syntax\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            // k stores the index of the END_TOKEN.\n            // Search for END_TOKEN starting from j (the beginning of BEGIN_TOKEN).\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // BEGIN_TOKEN found, but no corresponding END_TOKEN.\n                // The original code appends the entire input string. While potentially problematic\n                // in some scenarios (e.g., if 'i' > 0, leading to duplicated content),\n                // this part is left unchanged to provide a minimal fix for the specified test.\n                target.append(input);\n                return target;\n            }\n\n            // FIX: Check for malformed token where END_TOKEN starts before BEGIN_TOKEN finishes.\n            // j is the start index of BEGIN_TOKEN.\n            // k is the start index of END_TOKEN.\n            // BEGIN_TOKEN_LEN is the length of BEGIN_TOKEN.\n            // The content (spec) between tokens should start at j + BEGIN_TOKEN_LEN.\n            // If k is less than this, it means END_TOKEN overlaps with or is inside BEGIN_TOKEN.\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\n                    \"Invalid token syntax in input string: '\" + input +\n                    \"'. END_TOKEN found at index \" + k +\n                    \" which is before BEGIN_TOKEN (starting at index \" + j + \", length \" + BEGIN_TOKEN_LEN + \") has finished.\"\n                );\n            }\n            \n            // Advance j to point to the start of the spec string (after BEGIN_TOKEN).\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // Spec does not contain CODE_TEXT_SEPARATOR.\n                // The original code appends the entire input string. Similar to the k == -1 case,\n                // this is potentially problematic but left unchanged for a minimal fix.\n                target.append(input);\n                return target;\n            }\n            // Assuming render(String, String...) is a private helper method.\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}