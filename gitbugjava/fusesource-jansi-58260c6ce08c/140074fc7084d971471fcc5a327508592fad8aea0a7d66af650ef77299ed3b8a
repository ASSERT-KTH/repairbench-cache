{
    "generation": "/**\n * Renders the given input to the target Appendable.\n *\n * @param input\n *            source to render\n * @param target\n *            render onto this target Appendable.\n * @return the given Appendable\n * @throws IOException\n *             If an I/O error occurs\n */\npublic static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n\n    while (true) {\n        // look ahead for any END_TOKEN before the next BEGIN_TOKEN\n        int nextEnd = input.indexOf(END_TOKEN, i);\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        if (nextEnd != -1 && (j == -1 || nextEnd < j)) {\n            throw new IllegalArgumentException(\"Invalid end token before start token\");\n        }\n\n        // no more BEGIN_TOKEN\n        if (j == -1) {\n            if (i == 0) {\n                target.append(input);\n            } else {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n\n        // append text up to BEGIN_TOKEN\n        target.append(input.substring(i, j));\n\n        // find matching END_TOKEN\n        int k = input.indexOf(END_TOKEN, j);\n        // overlapping END_TOKEN (e.g. \"@|@\")\n        if (k != -1 && k < j + BEGIN_TOKEN_LEN) {\n            throw new IllegalArgumentException(\"Invalid end token before start token\");\n        }\n        // no closing token at all\n        if (k == -1) {\n            target.append(input);\n            return target;\n        }\n\n        // extract spec between BEGIN_TOKEN and END_TOKEN\n        int specStart = j + BEGIN_TOKEN_LEN;\n        String spec = input.substring(specStart, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length < 2) {\n            // not a valid \"style<sep>text\" spec\n            target.append(input);\n            return target;\n        }\n\n        // render inner text with the given style codes\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        // advance past the END_TOKEN\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}