{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    // guard against an END_TOKEN appearing before any BEGIN_TOKEN\n    int firstBegin = input.indexOf(BEGIN_TOKEN);\n    int firstEnd   = input.indexOf(END_TOKEN);\n    if (firstEnd != -1 && (firstBegin == -1 || firstEnd < firstBegin)) {\n        throw new IllegalArgumentException(\"Invalid end token before begin token at index \" + firstEnd);\n    }\n\n    int i = 0, j, k;\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // no more BEGIN_TOKEN \u2192 append rest verbatim\n            if (i == 0) {\n                target.append(input);\n            } else {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n        // append text before the token\n        target.append(input.substring(i, j));\n\n        // find matching END_TOKEN\n        k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            // no closing token \u2192 bail out, append whole input\n            target.append(input);\n            return target;\n        }\n        // overlapping or premature END_TOKEN\n        if (k < j + BEGIN_TOKEN_LEN) {\n            throw new IllegalArgumentException(\"Invalid end token before begin token at index \" + k);\n        }\n\n        // extract the spec inside @| ... |@\n        j += BEGIN_TOKEN_LEN;\n        String spec = input.substring(j, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length == 1) {\n            // malformed spec \u2192 treat whole input as literal\n            target.append(input);\n            return target;\n        }\n\n        // recursively render inner text with the given codes\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        // advance past the end token\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}