{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n\n    while (true) {\n        // Find the next BEGIN_TOKEN starting at position i.\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // No more tokens found; append the rest of the input and return.\n            target.append(input.substring(i));\n            return target;\n        }\n        // Append the text before the BEGIN_TOKEN.\n        target.append(input.substring(i, j));\n\n        // Look for the corresponding END_TOKEN; it must come after the BEGIN_TOKEN.\n        int k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"Missing closing token '\" + END_TOKEN + \"' in input: \" + input);\n        }\n\n        // Extract the spec (the text between the tokens).\n        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n\n        // If the spec does not split into two parts, the escape sequence is invalid.\n        if (items.length < 2) {\n            throw new IllegalArgumentException(\"Invalid ANSI escape sequence: \" + input.substring(j, k + END_TOKEN_LEN));\n        }\n\n        // Process the replacement using the other render overload.\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        // Move the index i past this escape sequence.\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}