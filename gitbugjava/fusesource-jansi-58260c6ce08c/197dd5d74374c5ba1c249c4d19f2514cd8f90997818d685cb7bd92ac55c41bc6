{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    while (true) {\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // Check remaining string for any END_TOKEN\n            if (input.indexOf(END_TOKEN, i) != -1) {\n                throw new IllegalArgumentException(\"Unmatched end token found without enclosing begin token.\");\n            }\n            if (i == 0) {\n                target.append(input);\n            } else {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n        // Check before the BEGIN_TOKEN for any end tokens (invalid case)\n        String before = input.substring(i, j);\n        if (before.indexOf(END_TOKEN) != -1) {\n            throw new IllegalArgumentException(\"Found end token before enclosing begin token.\");\n        }\n        target.append(before);\n        \n        int k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"Missing end token for begin token at position \" + j);\n        }\n        \n        j += BEGIN_TOKEN_LEN;\n        String spec = input.substring(j, k);\n        \n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Invalid specification between token pair.\");\n        }\n        \n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        \n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}