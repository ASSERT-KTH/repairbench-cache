{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        while (true) {\n            int beginIndex = input.indexOf(BEGIN_TOKEN, i);\n            if (beginIndex == -1) {\n                // No more tokens, append the rest of the input\n                target.append(input.substring(i));\n                return target;\n            }\n\n            // Check if any END_TOKEN appears before the next BEGIN_TOKEN, which is invalid\n            int nextEndIndex = input.indexOf(END_TOKEN, beginIndex);\n            if (nextEndIndex != -1 && nextEndIndex < beginIndex) {\n                throw new IllegalArgumentException(\"Unterminated token at position \" + beginIndex);\n            }\n\n            // Append the text before the token\n            target.append(input.substring(i, beginIndex));\n\n            int endIndex = input.indexOf(END_TOKEN, beginIndex + BEGIN_TOKEN_LEN);\n            if (endIndex == -1) {\n                // Unterminated token found\n                throw new IllegalArgumentException(\"Unterminated token starting at position \" + beginIndex);\n            }\n\n            // Extract the spec inside the token\n            String spec = input.substring(beginIndex + BEGIN_TOKEN_LEN, endIndex);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // No content to process, append the original and return\n                target.append(input.substring(beginIndex));\n                return target;\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            // Move the index to after the END_TOKEN for the next iteration\n            i = endIndex + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}