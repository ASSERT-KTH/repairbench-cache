{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // No BEGIN_TOKEN found, append the rest of the string.\n            target.append(input.substring(i));\n            return target;\n        }\n        target.append(input.substring(i, j));\n\n        // Look for END_TOKEN after the full BEGIN_TOKEN.\n        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);\n        if (k == -1) {\n            // Could not find matching END_TOKEN; append the rest as is.\n            target.append(input.substring(j));\n            return target;\n        }\n\n        // Extract the spec between the tokens.\n        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            // The ANSI escape sequence is invalid (e.g. missing either styling codes or text).\n            throw new IllegalArgumentException(\"Invalid ANSI escape sequence: \" + input.substring(j, k + END_TOKEN_LEN));\n        }\n\n        // Process the escape sequence.\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        // Move past the end token.\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}