{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    while (true) {\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) { // No more begin tokens.\n            // Check if there are any end tokens remaining after current i.\n            if (input.indexOf(END_TOKEN, i) != -1) {\n                throw new IllegalArgumentException(\"Unmatched end token found before any begin token.\");\n            }\n            // No begin or end tokens remaining - append the remaining text\n            if (i == 0) {\n                target.append(input);\n            } else {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n        \n        // Check region before the next begin token for any end tokens (which would be invalid)\n        String beforeRegion = input.substring(i, j);\n        if (beforeRegion.indexOf(END_TOKEN) != -1) {\n            throw new IllegalArgumentException(\"Found end token before an enclosing begin token.\");\n        }\n        target.append(beforeRegion);\n        \n        int k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"Missing end token after the begin token starting at position \" + j);\n        }\n\n        j += BEGIN_TOKEN_LEN;\n        String spec = input.substring(j, k);\n\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) { // Require split into exactly two parts\n            throw new IllegalArgumentException(\"Invalid specification between token pairs, expecting two elements.\");\n        }\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        \n        target.append(replacement);\n\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}