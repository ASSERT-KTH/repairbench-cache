{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    while (true) {\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            target.append(input.substring(i));\n            return target;\n        }\n        target.append(input.substring(i, j));\n        \n        // Look for the END_TOKEN starting immediately after the BEGIN_TOKEN\n        int specStart = j + BEGIN_TOKEN_LEN;\n        int k = input.indexOf(END_TOKEN, specStart);\n        if (k == -1) {\n            // No closing END_TOKEN; just output the rest literally.\n            target.append(input.substring(j));\n            return target;\n        }\n        \n        // If the spec is empty, then the END_TOKEN came immediately after the BEGIN_TOKEN.\n        if (specStart == k) {\n            throw new IllegalArgumentException(\"Invalid ANSI escape sequence: no content between \" \n                    + BEGIN_TOKEN + \" and \" + END_TOKEN + \" in: \" + input);\n        }\n        \n        String spec = input.substring(specStart, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Invalid ANSI escape sequence: \" + spec + \" in: \" + input);\n        }\n        \n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        \n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}