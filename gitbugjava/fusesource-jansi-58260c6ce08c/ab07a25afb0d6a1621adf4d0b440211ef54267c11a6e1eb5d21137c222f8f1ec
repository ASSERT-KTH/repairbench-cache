{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n    while (true) {\n        // find next begin\u2010token\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j < 0) {\n            // if there's any stray end\u2010token, that's an error\n            if (input.indexOf(END_TOKEN, i) >= 0) {\n                throw new IllegalArgumentException(\n                    \"Found end token \\\"\" + END_TOKEN + \"\\\" without matching begin token \\\"\" + BEGIN_TOKEN + \"\\\"\");\n            }\n            // otherwise append the rest and return\n            if (i == 0) {\n                target.append(input);\n            } else {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n\n        // if there is an end\u2010token before this begin\u2010token, that's also an error\n        int strayEnd = input.indexOf(END_TOKEN, i);\n        if (strayEnd >= 0 && strayEnd < j) {\n            throw new IllegalArgumentException(\n                \"Found end token \\\"\" + END_TOKEN + \"\\\" without matching begin token \\\"\" + BEGIN_TOKEN + \"\\\"\");\n        }\n\n        // append literal up to the begin\u2010token\n        target.append(input.substring(i, j));\n\n        // find the matching end\u2010token\n        k = input.indexOf(END_TOKEN, j);\n        if (k < 0) {\n            throw new IllegalArgumentException(\n                \"No matching end token \\\"\" + END_TOKEN + \"\\\" for begin token \\\"\" + BEGIN_TOKEN + \"\\\" at index \" + j);\n        }\n\n        // move j past the begin\u2010token\n        j += BEGIN_TOKEN_LEN;\n        // if the end\u2010token overlaps the begin\u2010token, that's invalid\n        if (k < j) {\n            throw new IllegalArgumentException(\n                \"Found end token \\\"\" + END_TOKEN + \"\\\" before content start at index \" + k);\n        }\n\n        // extract the \"spec\" between the tokens\n        String spec = input.substring(j, k);\n        // spec must split into [codes] [text]\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length < 2) {\n            throw new IllegalArgumentException(\"Invalid token spec: \\\"\" + spec + \"\\\"\");\n        }\n\n        // recursively render the inner text with the specified codes\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        // advance past the end\u2010token and continue\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}