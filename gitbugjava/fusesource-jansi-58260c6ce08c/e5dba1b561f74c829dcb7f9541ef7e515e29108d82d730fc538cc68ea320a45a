{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     * @throws IllegalArgumentException\n     *             If the input contains invalid ANSI markup syntax\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) { // No more BEGIN_TOKEN found\n                if (i == 0) {\n                    // No BEGIN_TOKEN was found in the entire string\n                    target.append(input);\n                    return target;\n                }\n                // Append the rest of the string after the last processed token\n                target.append(input.substring(i));\n                return target;\n            }\n\n            // Append the text segment before the BEGIN_TOKEN\n            target.append(input.substring(i, j));\n\n            // Calculate the starting position for the content within the token\n            // and the position to start searching for the END_TOKEN.\n            int contentStartIndex = j + BEGIN_TOKEN_LEN;\n\n            // Search for the END_TOKEN, starting *after* the BEGIN_TOKEN.\n            // This prevents finding the END_TOKEN overlapping or immediately after BEGIN_TOKEN (e.g., \"@|@\").\n            k = input.indexOf(END_TOKEN, contentStartIndex);\n\n            if (k == -1) {\n                // No END_TOKEN found after the position where content should start; indicates an unclosed token.\n                throw new IllegalArgumentException(\"Unclosed ANSI markup token starting at index \" + j);\n                // Original code appended the entire input string here and returned, which was incorrect\n                // and could lead to unexpected results or infinite loops depending on the input.\n            }\n\n            // Extract the specification string between BEGIN_TOKEN and END_TOKEN\n            String spec = input.substring(contentStartIndex, k);\n\n            // Parse the specification into codes and text parts\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length < 2) {\n                // The specification must have the format \"codes<separator>text\".\n                // This catches formats like \"@|bold|@\" (missing text), \"@||@\" (empty spec),\n                // or specs without the required separator.\n                throw new IllegalArgumentException(\n                        \"Invalid ANSI markup specification format: '\" + spec + \"' starting at index \" + j + \". Expected 'codes\" + CODE_TEXT_SEPARATOR + \"text'.\");\n                // Original code checked only for items.length == 1 and appended the entire input string, which was incorrect.\n            }\n\n            // Render the text part with the specified codes using the helper method.\n            // Assumes render(text, codes) exists and handles the ANSI code generation.\n            // Note: The static context implies render(String, String[]) might be a static helper in the same class or imported.\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            // Append the rendered string (text potentially wrapped in ANSI codes)\n            target.append(replacement);\n\n            // Advance the index past the processed END_TOKEN to continue searching\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}