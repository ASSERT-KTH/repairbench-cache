{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                // No more BEGIN_TOKEN found\n                if (i == 0) {\n                    // No BEGIN_TOKEN found at all, append the whole input\n                    target.append(input);\n                    return target;\n                }\n                // Append the rest of the input after the last processed token\n                target.append(input.substring(i));\n                return target;\n            }\n            // Append the text before the current BEGIN_TOKEN\n            target.append(input.substring(i, j));\n            \n            // Find the END_TOKEN starting from the position of BEGIN_TOKEN\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // If BEGIN_TOKEN was found but no matching END_TOKEN\n                // This indicates an unterminated sequence, which is an error.\n                throw new IllegalArgumentException(\"Unterminated Ansi sequence starting at index \" + j + \" in: '\" + input + \"'\");\n            }\n            \n            // Move j past the BEGIN_TOKEN to get the start of the spec string\n            j += BEGIN_TOKEN_LEN;\n            // Extract the spec string between BEGIN_TOKEN and END_TOKEN\n            String spec = input.substring(j, k);\n\n            // Split the spec into color codes and text content\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // If the spec does not contain the CODE_TEXT_SEPARATOR or is empty,\n                // it's considered malformed, e.g., \"@|@\" results in an empty spec string.\n                throw new IllegalArgumentException(\"Malformed Ansi sequence spec '\" + spec + \"' in: '\" + input + \"'\");\n            }\n            \n            // Render the replacement string using the parsed items\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            // Append the rendered replacement to the target\n            target.append(replacement);\n\n            // Advance 'i' past the processed Ansi sequence for the next iteration\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}