{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     * @throws IllegalArgumentException\n     *             If the input string has invalid syntax, e.g., an END_TOKEN occurs before a BEGIN_TOKEN is fully processed.\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            \n            int beginTokenStartIndex = j; // Store the start index of the BEGIN_TOKEN.\n            \n            k = input.indexOf(END_TOKEN, j); // Search for END_TOKEN starting from BEGIN_TOKEN's position.\n\n            if (k == -1) { // If END_TOKEN is not found.\n                target.append(input); // Original behavior.\n                return target;\n            }\n\n            // Check for invalid END_TOKEN position.\n            // The END_TOKEN must appear after the BEGIN_TOKEN has fully completed.\n            // Spec content starts at beginTokenStartIndex + BEGIN_TOKEN_LEN.\n            // So, k must be >= beginTokenStartIndex + BEGIN_TOKEN_LEN.\n            if (k < beginTokenStartIndex + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\n                        \"Invalid syntax: END_TOKEN found at position \" + k +\n                        \" which is before BEGIN_TOKEN (starting at \" + beginTokenStartIndex +\n                        \" with length \" + BEGIN_TOKEN_LEN + \") is fully parsed or allows for specification content.\"\n                );\n            }\n            \n            j += BEGIN_TOKEN_LEN; // Advance j to be the start of the specification content.\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) { // Malformed spec: no CODE_TEXT_SEPARATOR found.\n                target.append(input); // Original behavior.\n                return target;\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN; // Advance i to the position after the processed token.\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}