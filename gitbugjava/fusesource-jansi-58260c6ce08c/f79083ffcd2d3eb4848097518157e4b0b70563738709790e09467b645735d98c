{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            // j is the start index of BEGIN_TOKEN.\n            // Search for END_TOKEN. The search can start from j itself, as END_TOKEN might be short\n            // and appear right after BEGIN_TOKEN starts, but not overlapping in a way that makes it part of BEGIN_TOKEN.\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // BEGIN_TOKEN was found, but no matching END_TOKEN.\n                // The original behavior is to append the entire original input string and return.\n                // This part might have other implications or bugs for unterminated sequences,\n                // but it's preserved to limit the scope of this specific fix.\n                target.append(input);\n                return target;\n            }\n\n            // Check for invalid token syntax: END_TOKEN is found before BEGIN_TOKEN has fully completed,\n            // or it's inside BEGIN_TOKEN, or there's no space for spec content.\n            // The spec content is located between (j + BEGIN_TOKEN_LEN) and k.\n            // For a valid spec, we must have (j + BEGIN_TOKEN_LEN) <= k.\n            // If k < (j + BEGIN_TOKEN_LEN), it's an error.\n            // This condition previously caused a StringIndexOutOfBoundsException when trying to\n            // create the 'spec' substring with input.substring(j + BEGIN_TOKEN_LEN, k).\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\n                        \"Invalid ANSI escape sequence syntax: END_TOKEN found at index \" + k +\n                        \" but expected after index \" + (j + BEGIN_TOKEN_LEN - 1) +\n                        \" (BEGIN_TOKEN started at \" + j + \" with length \" + BEGIN_TOKEN_LEN + \").\");\n            }\n            \n            // j still points to the start of BEGIN_TOKEN.\n            // Advance j to point to the start of the spec content.\n            j += BEGIN_TOKEN_LEN; \n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // Spec does not contain CODE_TEXT_SEPARATOR (e.g., \"@|bold|\"), or spec is empty (e.g., \"@| |\").\n                // The original behavior is to append the entire original input string and return.\n                // This is preserved to limit the scope of this fix.\n                target.append(input);\n                return target;\n            }\n            \n            // items[0] is the code list, items[1] is the text to render.\n            // Note: This is a recursive call to a different `render` method ( overloaded private static String render(String, String...) ).\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            // Advance i to the position after the processed token.\n            i = k + END_TOKEN_LEN;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}