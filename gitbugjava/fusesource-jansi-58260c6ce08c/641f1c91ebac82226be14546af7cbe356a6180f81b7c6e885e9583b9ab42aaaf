{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        // Assuming BEGIN_TOKEN, BEGIN_TOKEN_LEN, END_TOKEN, END_TOKEN_LEN,\n        // CODE_TEXT_SEPARATOR, and CODE_LIST_SEPARATOR are static final fields\n        // defined in the enclosing class.\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j); // k is found starting search from j (start of BEGIN_TOKEN)\n\n            if (k == -1) {\n                // If the end token is not found after an opening token,\n                // the ANSI sequence is unclosed. Append the remainder of the input\n                // from the start of the unclosed token and return.\n                target.append(input.substring(j));\n                return target;\n            }\n\n            // Bug fix for testRenderInvalidEndBeforeStart:\n            // Check if the end token appears before or within the begin token sequence.\n            // The content (spec) should start at 'j + BEGIN_TOKEN_LEN'.\n            // If 'k' (index of END_TOKEN) is less than 'j + BEGIN_TOKEN_LEN',\n            // it implies an invalid structure (e.g., \"@|@\" where END_TOKEN \"@\" is at index 0,\n            // but spec content should start at index 2). This would lead to\n            // input.substring(j + BEGIN_TOKEN_LEN, k) being invalid (beginIndex > endIndex).\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\"Invalid ANSI spec: End token found before or within the start token sequence.\");\n            }\n\n            j += BEGIN_TOKEN_LEN; // j now points to the start of the 'spec' content\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // Original code appended the entire input here, which is incorrect.\n                // This case indicates a malformed spec where the code/text separator is missing\n                // when text is expected. Treat as an error.\n                throw new IllegalArgumentException(\"Invalid ANSI spec: Missing code/text separator in '\" + spec + \"'\");\n            }\n            \n            // Recursive call to render the content based on items.\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}