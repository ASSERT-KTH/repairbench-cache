{
    "generation": "    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        while (true) {\n            int j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                // Check if any end tokens are present in the remaining part\n                int endPresent = input.indexOf(END_TOKEN, i);\n                if (endPresent != -1) {\n                    throw new IllegalArgumentException(\"Found END_TOKEN at \" + endPresent + \" without preceding BEGIN_TOKEN.\");\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n\n            // Check if any end tokens occurred before current BEGIN_TOKEN in the non-BEGIN range (i to j)\n            int endBefore = input.indexOf(END_TOKEN, i);\n            if (endBefore != -1 && endBefore < j) {\n                throw new IllegalArgumentException(\"Found END_TOKEN at \" + endBefore + \" before BEGIN_TOKEN at \" + j);\n            }\n\n            target.append(input.substring(i, j));\n            int k = input.indexOf(END_TOKEN, j);\n            if (k == -1) {\n                throw new IllegalArgumentException(\"Unmatched BEGIN_TOKEN at \" + j + \" with no closing END_TOKEN found.\");\n            }\n\n            // Ensure END_TOKEN doesn't occur before the end of BEGIN_TOKEN\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\"END_TOKEN at \" + k + \" overlaps with or occurs before the end of BEGIN_TOKEN starting at \" + j);\n            }\n\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length != 2) {\n                throw new IllegalArgumentException(\"Invalid specification format. Expected to split into two parts.\");\n            }\n\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}