{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     * @throws IllegalArgumentException\n     *             If the input contains malformed ANSI sequences.\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                // No more BEGIN_TOKENs. Append remaining part of the input.\n                if (i == 0) {\n                    // No BEGIN_TOKEN found at all. Input is plain text.\n                    target.append(input);\n                    return target;\n                }\n                // Append remaining part after the last processed token.\n                target.append(input.substring(i));\n                return target;\n            }\n            // Append part of input before the current BEGIN_TOKEN\n            target.append(input.substring(i, j));\n            \n            // Find END_TOKEN starting from the position *after* BEGIN_TOKEN.\n            // 'j' is the index of BEGIN_TOKEN. We search for END_TOKEN from 'j + BEGIN_TOKEN_LEN'.\n            k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN); \n\n            if (k == -1) {\n                // If BEGIN_TOKEN was found but no corresponding END_TOKEN was found afterwards, it's an error.\n                throw new IllegalArgumentException(\"Missing ANSI END_TOKEN after BEGIN_TOKEN at index \" + j + \" in: \" + input);\n            }\n\n            // Calculate the actual start index of the 'spec' content (the text between BEGIN_TOKEN and END_TOKEN).\n            final int specStartIndex = j + BEGIN_TOKEN_LEN;\n\n            // Check for malformed sequences where END_TOKEN appears at or before the spec content starts.\n            // This covers cases like \"@|@\" (empty spec) or when END_TOKEN overlaps BEGIN_TOKEN.\n            if (k <= specStartIndex) {\n                throw new IllegalArgumentException(\"Invalid ANSI format: END_TOKEN found at or before the expected content start for BEGIN_TOKEN at index \" + j + \" in: \" + input);\n            }\n\n            // Extract the spec content.\n            String spec = input.substring(specStartIndex, k);\n\n            // Split the spec into ANSI codes and the text to be rendered.\n            // Expected format: \"code1,code2 text to render\"\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // If the spec doesn't contain CODE_TEXT_SEPARATOR, or if the text part is empty after splitting.\n                // e.g., \"@|red@\" (missing space separator), or \"@|red |@\" (missing text part).\n                throw new IllegalArgumentException(\"Invalid ANSI code format: Missing CODE_TEXT_SEPARATOR or empty text after codes for BEGIN_TOKEN at index \" + j + \" in: \" + input);\n            }\n            \n            // Recursively render the text part with the given ANSI codes.\n            // This assumes there's another `render` method overload taking String (text) and String[] (codes).\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            // Move current position 'i' past the processed ANSI sequence (BEGIN_TOKEN, spec, END_TOKEN).\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}