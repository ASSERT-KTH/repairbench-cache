{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // Check if there are any END_TOKENs left in the remaining string\n            if (input.substring(i).indexOf(END_TOKEN) != -1) {\n                throw new IllegalArgumentException(\"Unexpected end token before begin token.\");\n            }\n            target.append(input.substring(i));\n            return target;\n        } else {\n            // Check the text before the next BEGIN_TOKEN for END_TOKEN\n            String prevText = input.substring(i, j);\n            if (prevText.indexOf(END_TOKEN) != -1) {\n                throw new IllegalArgumentException(\"Unexpected end token in text.\");\n            }\n            target.append(prevText);\n        }\n\n        // Proceed to process the token\n        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"Missing end token for begin token at index \" + j);\n        }\n        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length == 1) {\n            throw new IllegalArgumentException(\"Invalid token format at index \" + j);\n        }\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}