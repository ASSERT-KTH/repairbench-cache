{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n\n            // Check if any unmatched END_TOKEN exists in the remaining input\n            if (j == -1) {\n                int endIndex = input.indexOf(END_TOKEN, i);\n                if (endIndex != -1) {\n                    throw new IllegalArgumentException(\"Found \\\"\" + END_TOKEN + \"\\\" before matching \\\"\" + BEGIN_TOKEN + \"\\\" at position: \" + endIndex);\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n\n            target.append(input.substring(i, j));\n            int specStart = j + BEGIN_TOKEN_LEN;\n            k = input.indexOf(END_TOKEN, j);\n            \n            // Verify END_TOKEN exists and is correctly positioned post BEGIN_TOKEN\n            if (k == -1) {\n                throw new IllegalArgumentException(\"Missing closing \\\"\" + END_TOKEN + \"\\\" for opening \\\"\" + BEGIN_TOKEN + \"\\\" at position: \" + j);\n            }\n            if (k < specStart) {\n                throw new IllegalArgumentException(\"Closing \\\"\" + END_TOKEN + \"\\\" at position \" + k + \" precedes specification content starting at \" + specStart);\n            }\n\n            String spec = input.substring(specStart, k);\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length != 2) {\n                throw new IllegalArgumentException(\"Specification \\\"\" + spec + \"\\\" must split into two parts using separator \\\"\" + CODE_TEXT_SEPARATOR + \"\\\"\");\n            }\n\n            String replacement = render(items[1], items[0].split(CODF_LIST x stripped -- ? separator));\n\n            target.append(replacement);\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}