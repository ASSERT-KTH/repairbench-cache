{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // No BEGIN_TOKEN found. Append remainder of input.\n            target.append(input.substring(i));\n            return target;\n        }\n        // Append all text before the token\n        target.append(input.substring(i, j));\n        k = input.indexOf(END_TOKEN, j);\n\n        if (k == -1) {\n            // No matching END_TOKEN found, just append remainder of input.\n            target.append(input.substring(j));\n            return target;\n        }\n\n        // Calculate where the token specification should start.\n        int specStart = j + BEGIN_TOKEN_LEN;\n        if (k < specStart) {\n            // The END_TOKEN was found before any valid specification text.\n            throw new IllegalArgumentException(\"Invalid ANSI markup: END_TOKEN found before token specification.\");\n        }\n\n        String spec = input.substring(specStart, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length == 1) {\n            // If the spec doesn't split into two parts, treat the entire input as literal.\n            target.append(input.substring(j, k + END_TOKEN_LEN));\n            return target;\n        }\n        // Delegate to the render method that accepts a String and a String[].\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}