{
    "generation": "    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n\n            // Check for END_TOKEN before any remaining BEGIN\n            if (j == -1) {\n                int endIndex = input.indexOf(END_TOKEN, i);\n                if (endIndex != -1) {\n                    throw new IllegalArgumentException(\"Found \\\"\" + END_TOKEN + \"\\\" without a preceding \\\"\" + BEGIN_TOKEN + \"\\\" at position: \" + endIndex);\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n\n            target.append(input.substring(i, j));\n\n            // The specification starts after the BEGIN_TOKEN\n            int specStart = j + BEGIN_TOKEN_LEN; \n\n            k = input.indexOf(END_TOKEN, j); // Search for END_TOKEN from BEGIN's position\n\n            if (k == -1) {\n                throw new IllegalArgumentException(\"Unclosed BEGIN_TOKEN at position \" + j);\n            }\n\n            // Ensure the END_TOKEN is after the BEGIN_TOKEN's closing\n            if (k < specStart) {\n                throw new IllegalArgumentException(\"Closing \\\"\" + END_TOKEN + \"\\\" at position \" + k + \" found before the spec starts at \" + specStart);\n            }\n\n            String spec = input.substring(specStart, k);\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length != 2) {\n                throw new IllegalArgumentException(\"Invalid format in specifier: \" + spec);\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}