{
    "generation": "    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        int j, k;\n        int beginIndex, endIndex;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n\n            k = input.indexOf(END_TOKEN, j);\n            if (k == -1) {\n                target.append(input.substring(i));\n                return target;  // Append remaining string and exit loop\n            }\n\n            // Logic to maintain previous strings\n            if (j + 1 >= k) {   // handle the negative case.\n                throw new IllegalArgumentException(\"END_TOKEN appears before BEGIN_TOKEN at positions \" + j + \" and \" + k);\n            }\n            target.append(input.substring(i, j));\n\n            beginIndex = j + BEGIN_TOKEN_LEN;   // Adjust index to skip over BEGIN_TOKEN\n            endIndex = k + END_TOKEN_LEN;   // Adjust index to skip over END_TOKEN\n\n            String spec = input.substring(beginIndex, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                target.append(input.substring(beginIndex, k));   // never happen\n                i = k + END_TOKEN_LEN;\n                continue;\n            }\n\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN; // move past the current token\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}