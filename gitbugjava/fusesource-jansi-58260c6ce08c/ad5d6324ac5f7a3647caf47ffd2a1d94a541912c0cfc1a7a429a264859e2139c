{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        // Find the next BEGIN_TOKEN starting from the current position 'i'\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // If there are no more BEGIN_TOKENs but there's still an END_TOKEN left, throw an IllegalArgumentException\n            if (input.indexOf(END_TOKEN, i) != -1) {\n                throw new IllegalArgumentException(\"END_TOKEN found without a corresponding BEGIN_TOKEN\");\n            }\n            // No more tokens found, append the remaining text\n            if (i == 0) {\n                target.append(input);\n            } else {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n\n        target.append(input.substring(i, j)); // Append text before the current BEGIN_TOKEN\n\n        k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"No matching END_TOKEN after \" + BEGIN_TOKEN + \" at position \" + j);\n        }\n\n        // Ensure END_TOKEN comes after the specification section of the BEGIN_TOKEN\n        if (k < j + BEGIN_TOKEN_LEN) {\n            throw new IllegalArgumentException(\"END_TOKEN found before the specification section of a BEGIN_TOKEN starting at \" + j);\n        }\n\n        j += BEGIN_TOKEN_LEN; // Move past the BEGIN_TOKEN\n        String spec = input.substring(j, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Invalid specification format, must be split into exactly two parts\");\n        }\n\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        i = k + END_TOKEN_LEN; // Move past the END_TOKEN\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}