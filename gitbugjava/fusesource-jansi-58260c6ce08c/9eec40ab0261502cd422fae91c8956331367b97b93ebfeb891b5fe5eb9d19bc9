{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    while (true) {\n        // Look for the next begin marker\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        // Also look for any stray end marker before the next begin\n        int e = input.indexOf(END_TOKEN, i);\n        if (e != -1 && (j == -1 || e < j)) {\n            throw new IllegalArgumentException(\n                \"Invalid end token \\\"\" + END_TOKEN + \"\\\" at index \" + e + \" without matching start\");\n        }\n        // No more begin tokens: append the rest and we're done\n        if (j == -1) {\n            target.append(input.substring(i));\n            return target;\n        }\n        // Append text before the begin marker\n        target.append(input.substring(i, j));\n        // Find the matching end marker after the begin\n        int specStart = j + BEGIN_TOKEN_LEN;\n        int k = input.indexOf(END_TOKEN, specStart);\n        if (k == -1) {\n            throw new IllegalArgumentException(\n                \"Begin token \\\"\" + BEGIN_TOKEN + \"\\\" at index \" + j + \" is not closed\");\n        }\n        // Extract the \"code text\" between the markers\n        String spec = input.substring(specStart, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length < 2) {\n            throw new IllegalArgumentException(\n                \"Invalid specification \\\"\" + spec + \"\\\": no separator \\\"\" + CODE_TEXT_SEPARATOR + \"\\\" found\");\n        }\n        // items[0] = list of codes, items[1] = the text to render\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        // Advance past the end marker and continue\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}