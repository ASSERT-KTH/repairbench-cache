{
    "generation": "/**\n * Renders the given input to the target Appendable.\n *\n * @param input\n *            source to render\n * @param target\n *            render onto this target Appendable.\n * @return the given Appendable\n * @throws IOException\n *             If an I/O error occurs\n */\npublic static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    while (true) {\n        // find next BEGIN and END tokens from the current position\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        int k = input.indexOf(END_TOKEN, i);\n        // if an END_TOKEN appears before the next BEGIN_TOKEN, that's invalid\n        if (k != -1 && (j == -1 || k < j)) {\n            throw new IllegalArgumentException(\n                  \"Invalid end token before matching begin at index \" + k);\n        }\n        // no more BEGIN_TOKEN \u2192 append the remainder and return\n        if (j == -1) {\n            target.append(input.substring(i));\n            return target;\n        }\n        // append everything before the BEGIN_TOKEN\n        target.append(input.substring(i, j));\n        // locate the matching END_TOKEN after the BEGIN_TOKEN\n        int specStart = j + BEGIN_TOKEN_LEN;\n        k = input.indexOf(END_TOKEN, specStart);\n        if (k == -1) {\n            throw new IllegalArgumentException(\n                  \"Missing end token for begin token at index \" + j);\n        }\n        // extract the style/text spec between the tokens\n        String spec = input.substring(specStart, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\n                  \"Invalid ANSI style specification: \\\"\" + spec + \"\\\"\");\n        }\n        // render the inner text with the given style codes\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        // advance past the END_TOKEN and continue\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}