{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) { // No more BEGIN_TOKEN found\n                if (i == 0) { // If no tokens were ever found in the input\n                    target.append(input);\n                    return target;\n                }\n                // Append the remaining text after the last processed token\n                target.append(input.substring(i));\n                return target;\n            }\n\n            // Append text preceding the BEGIN_TOKEN\n            target.append(input.substring(i, j));\n\n            // Find the END_TOKEN, starting search from the position of BEGIN_TOKEN\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // Malformed: Found BEGIN_TOKEN but no subsequent END_TOKEN\n                // The original code appended the whole input again, which is incorrect.\n                // Throwing an exception for malformed input is more appropriate.\n                // However, sticking to the original logic for minimal changes,\n                // unless specific tests require otherwise. But the test case\n                // provided requires an IllegalArgumentException for a different malformed case.\n                // Let's assume for now the original behavior for *this specific case* (unclosed token)\n                // should be preserved if no test covers it, despite seeming wrong.\n                // Reverting to original logic for this branch (appending whole input):\n                 target.append(input); // Original (likely buggy) logic for unclosed token\n                 return target;\n            }\n\n            // Calculate the index where the content *between* tokens should start\n            int contentStart = j + BEGIN_TOKEN_LEN;\n\n            // Check for invalid token syntax: END_TOKEN must appear after BEGIN_TOKEN ends.\n            // If k < contentStart, it means END_TOKEN overlaps BEGIN_TOKEN or there's no content.\n            if (k < contentStart) {\n                 throw new IllegalArgumentException(\"Invalid input: END_TOKEN found at index \" + k +\n                         \" before content could start at index \" + contentStart +\n                         \". Malformed token sequence near index \" + j + \".\");\n            }\n\n            // Extract the specification (codes and text) between the tokens\n            String spec = input.substring(contentStart, k);\n\n            // Split the spec into codes and the text to render\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // Malformed: Spec must have a separator between codes and text.\n                // Original code appended the whole input again. Again, likely incorrect.\n                // Preserving original logic for minimal change unless test dictates otherwise.\n                 target.append(input); // Original (likely buggy) logic for missing separator\n                 return target;\n            }\n\n            // Assuming render(String text, String... codes) exists and works correctly\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            // Advance the index past the processed END_TOKEN\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}