{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // If we reached here without finding a begin, but there was an end before it\n            if (i > 0 && input.indexOf(END_TOKEN, 0) < input.indexOf(BEGIN_TOKEN, 0)) {\n                throw new IllegalArgumentException(\"END token found before a matching BEGIN_TOKEN\");\n            }\n            // No more begin tokens left, append the remaining content\n            if (i == 0) {\n                target.append(input);\n            } else {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n        target.append(input.substring(i, j));\n        \n        k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"No matching END_TOKEN after BEGIN_TOKEN at position \" + j);\n        }\n        \n        // Check the position of the end token after begin's closing\n        if (k <= j + BEGIN_TOKEN_LEN) {\n            throw new IllegalArgumentException(\"END_TOKEN must appear after the specification\");\n        }\n\n        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Malformed specification, expected two parts but found \" + items.length);\n        }\n\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        \n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}