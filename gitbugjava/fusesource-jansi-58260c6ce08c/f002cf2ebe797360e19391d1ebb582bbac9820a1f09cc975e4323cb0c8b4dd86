{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // If BEGIN_TOKEN is found but END_TOKEN is not, the original code appends\n                // the full input. This behavior is maintained for existing test cases.\n                target.append(input);\n                return target;\n            }\n\n            // Fix for testRenderInvalidEndBeforeStart:\n            // An END_TOKEN found at an index k that is less than the position where\n            // the content for the BEGIN_TOKEN should start (j + BEGIN_TOKEN_LEN)\n            // indicates an invalid or malformed sequence (e.g., \"@|@\").\n            // In such cases, an IllegalArgumentException should be thrown.\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\"Invalid Ansi spec: END_TOKEN found before or within BEGIN_TOKEN: \" + input);\n            }\n\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // If the spec string does not contain CODE_TEXT_SEPARATOR,\n                // the original code appends the full input. This behavior is maintained.\n                target.append(input);\n                return target;\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}