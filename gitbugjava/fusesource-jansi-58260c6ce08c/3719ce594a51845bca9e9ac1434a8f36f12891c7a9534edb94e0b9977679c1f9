{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     * @throws IllegalArgumentException\n     *             If the input string has an invalid token format (e.g. END_TOKEN before BEGIN_TOKEN completes).\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            // k is the starting index of END_TOKEN.\n            // The original code searches for END_TOKEN from j (the start of BEGIN_TOKEN).\n            // This is maintained as it's relevant to the scenario causing the original bug.\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // This is the original behavior for an unclosed BEGIN_TOKEN.\n                target.append(input);\n                return target;\n            }\n\n            // Calculate the expected start index of the spec string (the content between tokens).\n            int specStartIndex = j + BEGIN_TOKEN_LEN;\n\n            // FIX: Check for invalid token sequence where END_TOKEN is found too early.\n            // This addresses cases like input \"@|@\" with BEGIN_TOKEN=\"@|\", END_TOKEN=\"|@\",\n            // where k (index of END_TOKEN) < specStartIndex.\n            // This condition would otherwise lead to StringIndexOutOfBoundsException when\n            // input.substring(specStartIndex, k) is called.\n            if (k < specStartIndex) {\n                throw new IllegalArgumentException(\n                        \"Invalid input: END_TOKEN found at index \" + k +\n                        \", but spec content is expected to start at index \" + specStartIndex +\n                        \". BEGIN_TOKEN started at \" + j + \".\");\n            }\n            \n            // Original code effectively did:\n            //   j_temp = j + BEGIN_TOKEN_LEN; (j_temp is specStartIndex)\n            //   String spec = input.substring(j_temp, k);\n            // We use specStartIndex directly here.\n            String spec = input.substring(specStartIndex, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // This is the original behavior if the spec does not contain CODE_TEXT_SEPARATOR.\n                target.append(input);\n                return target;\n            }\n            // Assumes another `render` method (e.g., `render(String textToColor, String[] codes)`)\n            // exists to handle the actual styling.\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}