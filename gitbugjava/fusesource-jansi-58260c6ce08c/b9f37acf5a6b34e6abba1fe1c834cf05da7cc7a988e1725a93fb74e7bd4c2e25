{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    while (true) {\n        int start = input.indexOf(BEGIN_TOKEN, i);\n        if (start == -1) {\n            target.append(input.substring(i));\n            return target;\n        }\n        // Append any literal text before the token.\n        target.append(input.substring(i, start));\n        \n        // Look for the end token starting after the full begin token.\n        int specStart = start + BEGIN_TOKEN_LEN;\n        int end = input.indexOf(END_TOKEN, specStart);\n        if (end == -1) {\n            // Instead of silently appending the input, throw an exception.\n            throw new IllegalArgumentException(\"Invalid ANSI escape sequence: missing end token in \" \n                    + input.substring(start));\n        }\n        \n        String spec = input.substring(specStart, end);\n        // A well formed escape must consist of exactly two parts (style and text)\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Invalid ANSI escape sequence: \" \n                    + input.substring(start, end + END_TOKEN_LEN));\n        }\n        \n        // Process the escape sequence.\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        \n        // Continue parsing after the end token.\n        i = end + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}