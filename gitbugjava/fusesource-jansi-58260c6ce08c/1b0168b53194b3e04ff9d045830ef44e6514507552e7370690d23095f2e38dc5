{
    "generation": "    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        while (true) {\n            int j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0 && input.indexOf(END_TOKEN, 0) != -1) {\n                    throw new IllegalArgumentException(\"Invalid end token before start token\");\n                }\n                if (i < input.length()) {\n                    target.append(input.substring(i));\n                }\n                return target;\n            }\n            \n            int endInPrefix = input.indexOf(END_TOKEN, i);\n            if (endInPrefix >= 0 && endInPrefix < j) {\n                throw new IllegalArgumentException(\"Invalid end token before start token\");\n            }\n            \n            target.append(input.substring(i, j));\n            int k = input.indexOf(END_TOKEN, j);\n            if (k == -1) {\n                throw new IllegalArgumentException(\"Unmatched begin token\");\n            }\n            k = input.indexOf(END_TOKEN, j);\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                throw new IllegalArgumentException(\"Invalid content inside token\");\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n            target.append(replacement);\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}