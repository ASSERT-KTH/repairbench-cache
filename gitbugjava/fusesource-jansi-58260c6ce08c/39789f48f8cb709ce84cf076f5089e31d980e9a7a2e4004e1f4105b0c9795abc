{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // No more markup tokens found; append the rest of the input.\n            target.append(input.substring(i));\n            return target;\n        }\n        // Append text before the token.\n        target.append(input.substring(i, j));\n\n        // Look for the ending token starting after the full BEGIN_TOKEN\n        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"No matching end token for markup starting at position \" + j + \": \" + input);\n        }\n\n        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2 || items[0].isEmpty() || items[1].isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid markup: \" + input.substring(j, k + END_TOKEN_LEN));\n        }\n\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}