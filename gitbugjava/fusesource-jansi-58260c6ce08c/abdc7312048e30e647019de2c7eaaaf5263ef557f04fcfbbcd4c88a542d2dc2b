{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            // Find the start of the next token sequence.\n            // j is the index of BEGIN_TOKEN.\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) { // No more tokens found in the input\n                if (i == 0) { // Input had no tokens at all\n                    target.append(input);\n                    return target;\n                }\n                // Append the remaining part of the input string (after the last processed token)\n                target.append(input.substring(i));\n                return target;\n            }\n\n            // Append the text that comes before the BEGIN_TOKEN\n            target.append(input.substring(i, j));\n\n            // Find the END_TOKEN.\n            // k is the index of END_TOKEN.\n            // Search for END_TOKEN starting from j (start of BEGIN_TOKEN).\n            // This allows END_TOKEN to potentially overlap or be part of BEGIN_TOKEN if syntax allows.\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) { // No END_TOKEN found after a BEGIN_TOKEN (unterminated sequence)\n                // Append the BEGIN_TOKEN and the rest of the string literally.\n                target.append(input.substring(j));\n                return target;\n            }\n\n            // Check for invalid token sequence: END_TOKEN starts before BEGIN_TOKEN's content could.\n            // Example: \"@|@\" where BEGIN_TOKEN=\"@|\", END_TOKEN=\"|@\", BEGIN_TOKEN_LEN=2.\n            // j would be 0 (start of \"@|\"). k would be 1 (start of \"|@\").\n            // The spec content would be between j + BEGIN_TOKEN_LEN (0+2=2) and k (1).\n            // This implies k must be >= j + BEGIN_TOKEN_LEN.\n            // If k < j + BEGIN_TOKEN_LEN, the sequence is invalid.\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\n                        \"Invalid token sequence: END_TOKEN at index \" + k +\n                        \" found before BEGIN_TOKEN (at index \" + j + \", length \" + BEGIN_TOKEN_LEN + \") sequence could complete.\");\n            }\n\n            // Extract the specification part between BEGIN_TOKEN and END_TOKEN.\n            // The original code advanced j here: j += BEGIN_TOKEN_LEN;\n            // Using a new variable specStart is cleaner as j maintains its meaning as BEGIN_TOKEN start.\n            int specStart = j + BEGIN_TOKEN_LEN;\n            String spec = input.substring(specStart, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            // The spec should be in \"codes text\" format, so after splitting by CODE_TEXT_SEPARATOR,\n            // we expect at least two items (codes and text).\n            // If items.length is 1, it means the separator was not found or spec was empty/malformed.\n            if (items.length == 1) { // Original code had items.length == 1, which is fine as split always returns at least one item.\n                // Malformed spec. Append the problematic token sequence and rest of the string literally.\n                target.append(input.substring(j)); // j is still the start of the current BEGIN_TOKEN.\n                return target;\n            }\n\n            // Recursively call render for the text part, with the parsed codes.\n            // This assumes 'render(String, String[])' is a different method that handles actual ANSI conversion.\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n            target.append(replacement);\n\n            // Advance 'i' to the position after the processed END_TOKEN.\n            i = k + END_TOKEN_LEN;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}