{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                // No more BEGIN_TOKEN found. Append remaining text and return.\n                if (i == 0) {\n                    target.append(input);\n                } else {\n                    target.append(input.substring(i));\n                }\n                return target;\n            }\n            // Found BEGIN_TOKEN at index j.\n            // Append text before the current BEGIN_TOKEN.\n            target.append(input.substring(i, j));\n\n            // Find END_TOKEN starting from j (where BEGIN_TOKEN was found).\n            // This allows cases where END_TOKEN might be immediately after BEGIN_TOKEN,\n            // or even inside it for malformed inputs like \"@|@\".\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                // BEGIN_TOKEN found, but no matching END_TOKEN afterwards.\n                // This is an unclosed sequence, which is a malformed input.\n                // The original code `target.append(input); return target;` silently passed it, which is buggy.\n                throw new IllegalArgumentException(\"Unclosed ANSI sequence starting at index \" + j + \": \" + input.substring(j));\n            }\n\n            // Advance j to the start of the spec content (after BEGIN_TOKEN).\n            j += BEGIN_TOKEN_LEN;\n\n            // Check if END_TOKEN (at k) appeared before the start of the spec content (at j).\n            // Example: input=\"@|@\", BEGIN_TOKEN=\"@|\", END_TOKEN=\"@\"\n            // j = 0 initially, k = 0 initially. After j += BEGIN_TOKEN_LEN, j becomes 2.\n            // Now k (0) < j (2) is true, indicating END_TOKEN is before the content.\n            if (k < j) {\n                // This is an \"EndBeforeStart\" scenario for the content part, which is malformed.\n                // This specifically addresses the 'testRenderInvalidEndBeforeStart' test case.\n                throw new IllegalArgumentException(\"Invalid ANSI sequence: END_TOKEN found before the content part beginning at index \" + (j - BEGIN_TOKEN_LEN) + \": \" + input.substring(j - BEGIN_TOKEN_LEN, k + END_TOKEN_LEN));\n            }\n\n            // Extract the spec content (e.g., \"red,bold:hello\" or \"31m:world\")\n            String spec = input.substring(j, k);\n\n            // Split the spec into code and text using CODE_TEXT_SEPARATOR.\n            // Expected format: \"CODE:TEXT\". If CODE_TEXT_SEPARATOR is not found, items.length will be 1.\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                // If only a code part is present (e.g., \"red\") without a CODE_TEXT_SEPARATOR,\n                // it implies a malformed sequence as per expected \"CODE:TEXT\" syntax.\n                // The original code `target.append(input); return target;` was a silent recovery,\n                // and accessing `items[1]` would cause an ArrayIndexOutOfBoundsException.\n                throw new IllegalArgumentException(\"Invalid ANSI sequence format: missing text or separator (expected 'CODE:TEXT') in \" + input.substring(j - BEGIN_TOKEN_LEN, k + END_TOKEN_LEN));\n            }\n            // items[0] is the codes, items[1] is the text.\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            // Move current position 'i' past the end of the current ANSI sequence.\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}