{
    "generation": "    private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n\n        int globalMask = 0x0f; // Default mask for standard IO structure\n\n        if (codec == CODEC_GH3000) {\n\n            long time = buf.readUnsignedInt() & 0x3fffffff;\n            time += 1167609600; // 2007-01-01 00:00:00\n\n            // Use a local variable for the GH3000 specific mask, don't overwrite globalMask\n            int gh3000Mask = buf.readUnsignedByte();\n            if (BitUtil.check(gh3000Mask, 0)) {\n\n                position.setTime(new Date(time * 1000));\n\n                int locationMask = buf.readUnsignedByte();\n\n                if (BitUtil.check(locationMask, 0)) {\n                    position.setLatitude(buf.readFloat());\n                    position.setLongitude(buf.readFloat());\n                }\n\n                if (BitUtil.check(locationMask, 1)) {\n                    position.setAltitude(buf.readUnsignedShort());\n                }\n\n                if (BitUtil.check(locationMask, 2)) {\n                    position.setCourse(buf.readUnsignedByte() * 360.0 / 256);\n                }\n\n                if (BitUtil.check(locationMask, 3)) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                }\n\n                if (BitUtil.check(locationMask, 4)) {\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                }\n\n                if (BitUtil.check(locationMask, 5)) {\n                    CellTower cellTower = CellTower.fromLacCid(\n                            getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());\n\n                    if (BitUtil.check(locationMask, 6)) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n\n                    if (BitUtil.check(locationMask, 7)) {\n                        cellTower.setOperator(buf.readUnsignedInt());\n                    }\n\n                    position.setNetwork(new Network(cellTower));\n\n                } else {\n                    if (BitUtil.check(locationMask, 6)) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    if (BitUtil.check(locationMask, 7)) {\n                        position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());\n                    }\n                }\n\n            } else {\n                getLastLocation(position, new Date(time * 1000));\n            }\n\n            // GH3000 location/status part ends here.\n            // Assume that the standard IO structure (N | N1 | N2 | N4 | N8 | data) follows.\n            // We need to consume the 'N' byte (Total IO count) here, otherwise the common IO parsing\n            // below will incorrectly read 'N' as 'N1'.\n            readExtByte(buf, codec, CODEC_8_EXT); // Read and discard N\n\n            // The common IO parsing below will use the default globalMask (0x0f)\n\n        } else { // Standard Codecs (8, 8_EXT, 16 etc)\n\n            position.setTime(new Date(buf.readLong()));\n\n            position.set(\"priority\", buf.readUnsignedByte());\n\n            position.setLongitude(buf.readInt() / 10000000.0);\n            position.setLatitude(buf.readInt() / 10000000.0);\n            position.setAltitude(buf.readShort());\n            position.setCourse(buf.readUnsignedShort());\n\n            int satellites = buf.readUnsignedByte();\n            position.set(Position.KEY_SATELLITES, satellites);\n\n            position.setValid(satellites != 0);\n\n            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\n            // Read Event IO ID. This might not be present in GH3000? Handled above.\n            position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));\n            if (codec == CODEC_16) {\n                buf.readUnsignedByte(); // generation type\n            }\n\n            // Read and discard N (Total IO count) before common IO parsing\n            readExtByte(buf, codec, CODEC_8_EXT);\n\n        }\n\n        // Common IO Parsing - relies on N1, N2, N4, N8 counts being read next\n        // Uses the globalMask = 0x0f initialized at the start.\n\n        // Read 1 byte data\n        if (BitUtil.check(globalMask, 1)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N1 count\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);\n            }\n        }\n\n        // Read 2 byte data\n        if (BitUtil.check(globalMask, 2)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N2 count\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);\n            }\n        }\n\n        // Read 4 byte data\n        if (BitUtil.check(globalMask, 3)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N4 count\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);\n            }\n        }\n\n        // Read 8 byte data\n        // This block originally excluded CODEC_GH3000. Keep it that way unless necessary.\n        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT); // Reads N8 count\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);\n            }\n        }\n\n        // Read 16 byte data\n        if (extended) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);\n                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));\n            }\n        }\n\n        // Read X byte data (Variable length)\n        if (codec == CODEC_8_EXT) {\n            int cnt = buf.readUnsignedShort();\n            for (int j = 0; j < cnt; j++) {\n                int id = buf.readUnsignedShort();\n                int length = buf.readUnsignedShort();\n                if (id == 256) { // VIN\n                    position.set(Position.KEY_VIN,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n                } else if (id == 281) { // DTCs\n                    position.set(Position.KEY_DTCS,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n                } else if (id == 385) { // BLE Beacons\n                    ByteBuf data = buf.readSlice(length);\n                    data.readUnsignedByte(); // data part indicator\n                    int index = 1;\n                    while (data.isReadable()) {\n                        int flags = data.readUnsignedByte();\n                        // Eddystone format uses top 4 bits > 0 in flags, iBeacon uses 0\n                        if (BitUtil.from(flags, 4) > 0) { // Eddystone\n                            position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                            position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                            position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n                        } else { // iBeacon\n                             // Note: Older Teltonika firmware might send iBeacon data differently (UUID first)\n                            position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                            position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n                        }\n                        position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n                        if (BitUtil.check(flags, 1)) { // Optional Battery present\n                            position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort() * 0.01); // Voltage\n                        }\n                        if (BitUtil.check(flags, 2)) { // Optional Temperature present\n                            position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort()); // Format depends on device/tag\n                        }\n                        index += 1;\n                    }\n                } else { // Other variable length IOs\n                    position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            }\n        }\n\n        decodeNetwork(position, model);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}