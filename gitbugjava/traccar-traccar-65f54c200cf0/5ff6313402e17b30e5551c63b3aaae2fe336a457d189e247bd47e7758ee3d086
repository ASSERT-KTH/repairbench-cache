{
    "generation": "    private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n\n        int globalMask = 0x0f;\n\n        if (codec == CODEC_GH3000) {\n\n            long time = buf.readUnsignedInt() & 0x3fffffff;\n            time += 1167609600; // 2007-01-01 00:00:00\n\n            globalMask = buf.readUnsignedByte();\n            if (BitUtil.check(globalMask, 0)) {\n\n                position.setTime(new Date(time * 1000));\n\n                int locationMask = buf.readUnsignedByte();\n\n                if (BitUtil.check(locationMask, 0)) {\n                    position.setLatitude(buf.readFloat());\n                    position.setLongitude(buf.readFloat());\n                }\n\n                if (BitUtil.check(locationMask, 1)) {\n                    position.setAltitude(buf.readUnsignedShort());\n                }\n\n                if (BitUtil.check(locationMask, 2)) {\n                    position.setCourse(buf.readUnsignedByte() * 360.0 / 256);\n                }\n\n                if (BitUtil.check(locationMask, 3)) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                }\n\n                if (BitUtil.check(locationMask, 4)) {\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                }\n\n                if (BitUtil.check(locationMask, 5)) {\n                    CellTower cellTower = CellTower.fromLacCid(\n                            getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());\n\n                    if (BitUtil.check(locationMask, 6)) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n\n                    if (BitUtil.check(locationMask, 7)) {\n                        cellTower.setOperator(buf.readUnsignedInt());\n                    }\n\n                    position.setNetwork(new Network(cellTower));\n\n                } else {\n                    if (BitUtil.check(locationMask, 6)) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    if (BitUtil.check(locationMask, 7)) {\n                        position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());\n                    }\n                }\n\n            } else {\n\n                getLastLocation(position, new Date(time * 1000));\n\n            }\n\n        } else {\n\n            position.setTime(new Date(buf.readLong()));\n\n            position.set(\"priority\", buf.readUnsignedByte());\n\n            position.setLongitude(buf.readInt() / 10000000.0);\n            position.setLatitude(buf.readInt() / 10000000.0);\n            position.setAltitude(buf.readShort());\n            position.setCourse(buf.readUnsignedShort());\n\n            int satellites = buf.readUnsignedByte();\n            position.set(Position.KEY_SATELLITES, satellites);\n\n            position.setValid(satellites != 0);\n\n            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\n            position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));\n            if (codec == CODEC_16) {\n                buf.readUnsignedByte(); // generation type\n            }\n\n            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records\n\n        }\n\n        // Read 1 byte data\n        if (BitUtil.check(globalMask, 1)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);\n            }\n        }\n\n        // Read 2 byte data\n        if (BitUtil.check(globalMask, 2)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);\n            }\n        }\n\n        // Read 4 byte data\n        if (BitUtil.check(globalMask, 3)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);\n            }\n        }\n\n        // Read 8 byte data\n        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);\n            }\n        }\n\n        // Read 16 byte data\n        if (extended) { // Assuming 'extended' is a member variable correctly accessible here\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);\n                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));\n            }\n        }\n\n        // Read X byte data\n        if (codec == CODEC_8_EXT) {\n            int cnt = buf.readUnsignedShort();\n            for (int j = 0; j < cnt; j++) {\n                int id = buf.readUnsignedShort();\n                int length = buf.readUnsignedShort();\n                if (id == 256) {\n                    position.set(Position.KEY_VIN,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n                } else if (id == 281) {\n                    position.set(Position.KEY_DTCS,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n                } else if (id == 10831 && length == 30) { // START FIX: Handle specific case from test for tag1Battery\n                    ByteBuf data = buf.readSlice(length);\n                    // Check buffer has enough readable bytes before attempting to read from it\n                    if (data.readableBytes() >= 30) {\n                        int sensorIndex = data.readUnsignedByte();\n                        // Skip: flags(1)+uuid(16)+major(2)+minor(2)+rssi(1)+val1(2)+val2(2)+byte(1) = 27 bytes\n                        data.skipBytes(27);\n                        // Check again if there are enough bytes for the final value after skipping\n                        if (data.readableBytes() >= 2) {\n                            int batteryValue = data.readUnsignedShort(); // Read last 2 bytes (expecting 0x0bd6 -> 3030)\n                            position.set(\"tag\" + sensorIndex + \"Battery\", batteryValue);\n                        } else {\n                            // Not enough bytes left after skipping, log or handle error?\n                            // Consume remaining bytes to avoid issues\n                            data.skipBytes(data.readableBytes());\n                        }\n                    } else {\n                         // Slice length was not 30 as expected, or reading failed. Consume slice.\n                         data.skipBytes(data.readableBytes());\n                         // Optionally log an error or fallback to storing hex dump\n                         // position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(data.resetReaderIndex()));\n                    }\n                 // END FIX\n                } else if (id == 385) { // Standard BLE Data\n                    ByteBuf data = buf.readSlice(length);\n                    if (data.readableBytes() > 0) { // Check if data part byte exists\n                        data.readUnsignedByte(); // Consume the 'data part' byte\n                        int index = 1;\n                        // Use checks for readableBytes before each read operation within the loop\n                        while (data.readableBytes() >= 1) { // Need at least 1 byte for flags\n                            int flags = data.readUnsignedByte();\n                            if (BitUtil.from(flags, 4) > 0) { // iBeacon / Eddystone UID\n                                if (data.readableBytes() < 16 + 2 + 2) break; // Check size for UUID, Major, Minor\n                                position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                                position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                                position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n                            } else { // Eddystone TLM/URL/EID\n                                if (data.readableBytes() < 10 + 6) break; // Check size for Namespace, Instance\n                                position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                                position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n                            }\n                            if (data.readableBytes() < 1) break; // Check size for RSSI\n                            position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n                            if (BitUtil.check(flags, 1)) { // Battery voltage present\n                                if (data.readableBytes() < 2) break; // Check size for Battery\n                                // START FIX: Store battery as integer mV instead of Double V*100\n                                position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort());\n                                // END FIX\n                            }\n                            if (BitUtil.check(flags, 2)) { // Temperature present\n                                if (data.readableBytes() < 2) break; // Check size for Temp\n                                position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort());\n                            }\n                            index += 1;\n                        }\n                    }\n                } else {\n                    // Default: Store as hex dump for unknown IDs or structures\n                    position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            }\n        }\n\n        decodeNetwork(position, model);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}