{
    "generation": "    private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n\n        if (codec == CODEC_GH3000) {\n\n            long time = buf.readUnsignedInt() & 0x3fffffff;\n            time += 1167609600; // 2007-01-01 00:00:00\n\n            int gh3000GlobalMask = buf.readUnsignedByte(); // Specific to GH3000\n            if (BitUtil.check(gh3000GlobalMask, 0)) { // Location Data\n\n                position.setTime(new Date(time * 1000));\n\n                int locationMask = buf.readUnsignedByte();\n\n                if (BitUtil.check(locationMask, 0)) {\n                    position.setLatitude(buf.readFloat());\n                    position.setLongitude(buf.readFloat());\n                }\n\n                if (BitUtil.check(locationMask, 1)) {\n                    position.setAltitude(buf.readUnsignedShort());\n                }\n\n                if (BitUtil.check(locationMask, 2)) {\n                    position.setCourse(buf.readUnsignedByte() * 360.0 / 256);\n                }\n\n                if (BitUtil.check(locationMask, 3)) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                }\n\n                if (BitUtil.check(locationMask, 4)) {\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                }\n\n                if (BitUtil.check(locationMask, 5)) {\n                    CellTower cellTower = CellTower.fromLacCid(\n                            getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());\n\n                    if (BitUtil.check(locationMask, 6)) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n\n                    if (BitUtil.check(locationMask, 7)) {\n                        cellTower.setOperator(buf.readUnsignedInt());\n                    }\n\n                    position.setNetwork(new Network(cellTower));\n\n                } else {\n                    if (BitUtil.check(locationMask, 6)) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    if (BitUtil.check(locationMask, 7)) {\n                        position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());\n                    }\n                }\n\n            } else { // No location data\n                getLastLocation(position, new Date(time * 1000));\n            }\n\n            // GH3000 IO Data (based on its globalMask)\n            // Read 1 byte data\n            if (BitUtil.check(gh3000GlobalMask, 1)) {\n                int cnt = buf.readUnsignedByte(); // Count is 1 byte\n                for (int j = 0; j < cnt; j++) {\n                    decodeParameter(position, buf.readUnsignedByte(), buf, 1, codec, model); // ID is 1 byte\n                }\n            }\n\n            // Read 2 byte data\n            if (BitUtil.check(gh3000GlobalMask, 2)) {\n                int cnt = buf.readUnsignedByte(); // Count is 1 byte\n                for (int j = 0; j < cnt; j++) {\n                    decodeParameter(position, buf.readUnsignedByte(), buf, 2, codec, model); // ID is 1 byte\n                }\n            }\n\n            // Read 4 byte data\n            if (BitUtil.check(gh3000GlobalMask, 3)) {\n                int cnt = buf.readUnsignedByte(); // Count is 1 byte\n                for (int j = 0; j < cnt; j++) {\n                    decodeParameter(position, buf.readUnsignedByte(), buf, 4, codec, model); // ID is 1 byte\n                }\n            }\n\n        } else { // For CODEC_8, CODEC_8_EXT, CODEC_16\n\n            position.setTime(new Date(buf.readLong()));\n            position.set(\"priority\", buf.readUnsignedByte());\n\n            position.setLongitude(buf.readInt() / 10000000.0);\n            position.setLatitude(buf.readInt() / 10000000.0);\n            position.setAltitude(buf.readShort());\n            position.setCourse(buf.readUnsignedShort());\n\n            int satellites = buf.readUnsignedByte();\n            position.set(Position.KEY_SATELLITES, satellites);\n            position.setValid(satellites != 0);\n            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\n            position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // Event IOID is 1 byte\n\n            if (codec == CODEC_16) {\n                buf.readUnsignedShort(); // AVL Packet ID for CODEC_16 (2 bytes)\n                buf.readUnsignedByte(); // Generation Type for CODEC_16 (1 byte)\n            } else { // For CODEC_8, CODEC_8_EXT\n                buf.readUnsignedByte(); // Total number of IO elements (1 byte)\n            }\n\n            // Read 1 byte IOs\n            int cnt = buf.readUnsignedByte(); // N1 count is 1 byte\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, buf.readUnsignedByte(), buf, 1, codec, model); // ID is 1 byte\n            }\n\n            // Read 2 byte IOs\n            cnt = buf.readUnsignedByte(); // N2 count is 1 byte\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, buf.readUnsignedByte(), buf, 2, codec, model); // ID is 1 byte\n            }\n\n            // Read 4 byte IOs\n            cnt = buf.readUnsignedByte(); // N4 count is 1 byte\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, buf.readUnsignedByte(), buf, 4, codec, model); // ID is 1 byte\n            }\n\n            // Read 8 byte IOs\n            if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {\n                cnt = buf.readUnsignedByte(); // N8 count is 1 byte\n                for (int j = 0; j < cnt; j++) {\n                    decodeParameter(position, buf.readUnsignedByte(), buf, 8, codec, model); // ID is 1 byte\n                }\n            }\n            \n            // Read 16 byte data (Custom Teltonika extension for some CODEC_16 devices)\n            if (extended) { // 'extended' is a class field\n                cnt = buf.readUnsignedByte(); // N16 count is 1 byte\n                for (int j = 0; j < cnt; j++) {\n                    int id = buf.readUnsignedByte(); // ID is 1 byte\n                    position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));\n                }\n            }\n\n            // Read X byte data (specific to CODEC_8_EXT)\n            if (codec == CODEC_8_EXT) {\n                cnt = buf.readUnsignedShort(); // NX count is 2 bytes\n                for (int j = 0; j < cnt; j++) {\n                    int id = buf.readUnsignedShort(); // ID_X is 2 bytes\n                    int length = buf.readUnsignedShort(); // Length_X is 2 bytes\n                    if (id == 256) { // Position.KEY_VIN\n                        position.set(Position.KEY_VIN,\n                                buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n                    } else if (id == 281) { // Position.KEY_DTCS\n                        position.set(Position.KEY_DTCS,\n                                buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n                    } else if (id == 385) { // BLE Beacons / Tags\n                        ByteBuf data = buf.readSlice(length);\n                        data.readUnsignedByte(); // data part (version/type for this payload format)\n                        int index = 1;\n                        while (data.isReadable()) {\n                            int flags = data.readUnsignedByte();\n                            if (BitUtil.from(flags, 4) > 0) { // iBeacon format\n                                position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                                position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                                position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n                            } else { // Eddystone format\n                                position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                                position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n                            }\n                            position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n                            if (BitUtil.check(flags, 1)) { // Has battery\n                                position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort() * 0.01);\n                            }\n                            if (BitUtil.check(flags, 2)) { // Has temperature\n                                position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort());\n                            }\n                            index += 1;\n                        }\n                    } else { // Other X-byte IDs\n                        position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n                    }\n                }\n            }\n        }\n\n        decodeNetwork(position, model);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}