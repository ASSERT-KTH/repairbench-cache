{
    "generation": "private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n\n    int globalMask;\n\n    if (codec == CODEC_GH3000) {\n\n        long time = buf.readUnsignedInt() & 0x3fffffff;\n        time += 1167609600;\n\n        position.setTime(new Date(time * 1000));\n\n        position.setaltitude(0); // status bits\n        position.setCoursespeed(0); // default values if not present?\n\n        globalMask = buf.readUnsignedByte(); // Read the mask here for GH3000\n\n        int locationMask = buf.readUnsignedByte();\n\n        // The location mask is known, process it as before, but now mask is read.\n\n    } else {\n\n        position.setTime(new Date(buf.readLong()));\n\n        position.set(\"priority\", buf.readUnsignedByte());\n\n        position.setLongitude( buf.readInt() / 10000000.0 );\n        position.setLatitude( buf.readInt() / 10000000.0 );\n        position.setAltitude(buf.readShort());\n        position.setCourse(buf.readUnsignedShort()); // course is using 2 bytes?\n\n        int satellites = buf.readUnsignedByte();\n        position.set( Position.KEY_SATELLITES, satellites );\n        position.setValid( satellites != 0 );\n\n        position.setSpeed(UnitsConverter.knotsFromKph( buf.readUnsignedShort() ));\n        position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));\n        // These two steps above may have to read their stuff first, then proceed to mask.\n\n        if (codec == CODEC_16) {\n            buf.readUnsignedByte(); // generation type\n        }\n\n        int dummy = readExtByte( buf, codec, CODEC_8_EXT ); // total IO records?\n\n        globalMask = buf.readUnsignedByte(); // This is the fix for non-GH3000 cases. \n\n    }\n\n    // The rest of the code relies on globalMask being correctly set. \n\n    // Then the loops:\n\n    // Read 1 byte data (mask's bit1)\n    if (BitUtil.check(globalMask,1)) {\n        ...\n    }\n\n    // and so on, the code continues as before.\n    \n    // ... [the rest of the code remains the same as provided]\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}