{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\");\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n\n        long reportMask = 0;\n        if (index < values.length) {\n            String reportMaskStr = values[index++];\n            if (reportMaskStr != null && !reportMaskStr.isEmpty()) {\n                try {\n                    reportMask = Long.parseLong(reportMaskStr, 16);\n                } catch (NumberFormatException e) {\n                    // reportMask remains 0 if format is invalid\n                }\n            }\n        }\n        long reportMaskExt = 0;\n\n        if (BitUtil.check(reportMask, 0)) {\n            if (index < values.length) {\n                position.set(Position.KEY_VIN, values[index++]);\n            }\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            if (index < values.length) {\n                String valStr = values[index++];\n                if (!valStr.isEmpty()) {\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(valStr) > 0);\n                }\n            }\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            if (index < values.length) {\n                position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n            }\n        }\n        if (BitUtil.check(reportMask, 3) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));\n        } else if (BitUtil.check(reportMask, 3) && index < values.length) { // Bit is set, field might be present but empty, or index was OOB\n             // If !values[index++].isEmpty() was false because of empty string, index was incremented.\n             // If it was false due to index < values.length, index was not.\n             // To ensure index is consumed if field was present but empty:\n             // This explicit else if is not strictly needed if the prior condition already advanced index on empty.\n             // The pattern `&& !values[index++].isEmpty()` already handles incrementing index.\n        }\n\n        if (BitUtil.check(reportMask, 5) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 4) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 6) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 7) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 8) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 9) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"range\", Long.parseLong(values[index - 1]) * 100);\n        }\n        if (BitUtil.check(reportMask, 10) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 11) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 12)) {\n            if (index < values.length) {\n                String valStr = values[index++];\n                if (!valStr.isEmpty()) {\n                    position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(valStr));\n                }\n            }\n        }\n        if (BitUtil.check(reportMask, 13)) {\n            if (index < values.length) {\n                String valStr = values[index++];\n                if (!valStr.isEmpty()) {\n                    position.set(\"idleHours\", Double.parseDouble(valStr));\n                }\n            }\n        }\n        if (BitUtil.check(reportMask, 14) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 15) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 16) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 17) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 18) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 19) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 20) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 21) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n\n        if (BitUtil.check(reportMask, 29)) {\n            if (index < values.length) {\n                String reportMaskExtStr = values[index++];\n                if (reportMaskExtStr != null && !reportMaskExtStr.isEmpty()) {\n                    try {\n                        reportMaskExt = Long.parseLong(reportMaskExtStr, 16);\n                    } catch (NumberFormatException e) {\n                        // reportMaskExt remains 0 if format is invalid\n                    }\n                }\n            }\n        }\n\n        if (BitUtil.check(reportMaskExt, 0) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 1) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 2) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 3) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            if (index < values.length) { index++; } // tachograph overspeed\n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            if (index < values.length) { index++; } // tachograph motion\n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            if (index < values.length) { index++; } // tachograph direction\n        }\n        if (BitUtil.check(reportMaskExt, 7) && index < values.length && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            if (index < values.length) { index++; } // pedal breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            if (index < values.length) { index++; } // engine breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            if (index < values.length) { index++; } // total accelerator kick-downs\n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            if (index < values.length) { index++; } // total effective engine speed\n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            if (index < values.length) { index++; } // total cruise control time\n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            if (index < values.length) { index++; } // total accelerator kick-down time\n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            if (index < values.length) { index++; } // total brake application\n        }\n        if (BitUtil.check(reportMaskExt, 15) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"driver1Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 16) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"driver2Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 17) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"driver1Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 18) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"driver2Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 19) && index < values.length && !values[index++].isEmpty()) {\n            position.set(\"registration\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            if (index < values.length) { index++; } // expansion information\n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            if (index < values.length) { index++; } // rapid brakings\n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            if (index < values.length) { index++; } // rapid accelerations\n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            if (index < values.length) { index++; } // engine torque\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        if (BitUtil.check(reportMask, 30)) {\n            while (index < values.length && values[index].isEmpty()) {\n                index += 1;\n            }\n            if (index < values.length && !values[index].isEmpty()) { // Check for validity field\n                position.setValid(Integer.parseInt(values[index++]) > 0);\n                if (index < values.length && !values[index].isEmpty()) { // Check for speed field\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                    if (index < values.length) position.setCourse(Integer.parseInt(values[index++])); else index++;\n                    if (index < values.length) position.setAltitude(Double.parseDouble(values[index++])); else index++;\n                    if (index < values.length) position.setLongitude(Double.parseDouble(values[index++])); else index++;\n                    if (index < values.length) position.setLatitude(Double.parseDouble(values[index++])); else index++;\n                    if (index < values.length) position.setTime(dateFormat.parse(values[index++])); else index++;\n                } else {\n                    index += 6; // no location (speed + 5 more fields)\n                    getLastLocation(position, null);\n                }\n            } else { // validity field missing or empty\n                index += 7; // validity + 6 location fields\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n\n        if (BitUtil.check(reportMask, 31)) {\n            if (index < values.length) { index++; } // cell part 1\n            if (index < values.length) { index++; } // cell part 2\n            if (index < values.length) { index++; } // cell part 3\n            if (index < values.length) { index++; } // cell part 4\n            if (index < values.length) { index++; } // reserved\n        }\n\n        if (index < values.length) {\n            String timeStr = values[index];\n            if (timeStr != null && !timeStr.isEmpty()) {\n                if (ignoreFixTime) {\n                    position.setTime(dateFormat.parse(timeStr));\n                } else {\n                    position.setDeviceTime(dateFormat.parse(timeStr));\n                }\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}