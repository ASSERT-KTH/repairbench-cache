{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = 0;\n    long reportMaskExt = 0;\n    if (index < values.length && !values[index].isEmpty()) {\n        reportMask = Long.parseLong(values[index], 16);\n    }\n    index++;\n\n    if (BitUtil.check(reportMask, 0)) { // vin\n        if (index < values.length) position.set(Position.KEY_VIN, values[index]);\n        index++;\n    }\n    if (BitUtil.check(reportMask, 1)) { // ignition\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 2)) { // obd odo\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 3)) { // fuel used\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 5)) { // rpm\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 4)) { // obd speed\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 6)) { // coolant temp\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 7)) { // fuel consumption\n        if (index < values.length && !values[index].isEmpty()) {\n            String s = values[index];\n            if (s.length() > 1) position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(s.substring(1)));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 8)) { // fuel level\n        if (index < values.length && !values[index].isEmpty()) {\n            String s = values[index];\n            // Sometimes, for legacy/old data, it's pure number, sometimes prefixed by character (e.g. 'P99.99')\n            if (s.length() > 1 && !Character.isDigit(s.charAt(0)) && s.charAt(1) != '.') {\n                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s.substring(1)));\n            } else {\n                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s));\n            }\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 9)) { // range\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"range\", Long.parseLong(values[index]) * 100);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 10)) { // throttle\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 11)) { // hours\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 12)) { // driving time\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 13)) { // idle hours\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 14)) { // idle fuel cons\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 15)) { // axle weight\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 16)) { // tachograph info\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 17)) { // indicators\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 18)) { // lights\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 19)) { // doors\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 20)) { // vehicle overspeed\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 21)) { // engine overspeed\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMask, 29)) { // reportMaskExt\n        if (index < values.length && !values[index].isEmpty()) {\n            reportMaskExt = Long.parseLong(values[index], 16);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"driver1Card\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"driver2Card\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"driver1Name\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"driver2Name\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        if (index < values.length && !values[index].isEmpty()) {\n            position.set(\"registration\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) { // location present\n        // Some devices may send empty fields to pad, skip empties\n        while (index < values.length && values[index].isEmpty()) {\n            index += 1;\n        }\n        if (index < values.length) {\n            position.setValid(!values[index].isEmpty() && Integer.parseInt(values[index]) > 0);\n            index++;\n        }\n        // Now position fields (speed, course, altitude, lon, lat, time)\n        if (index + 5 < values.length && !values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            // No location fields present, skip fields and get last\n            index += 6; // skip location fields\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    // Defensive: Only parse time if available, and avoid NumberFormatException\n    if (index < values.length && !values[index].isEmpty()) {\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}