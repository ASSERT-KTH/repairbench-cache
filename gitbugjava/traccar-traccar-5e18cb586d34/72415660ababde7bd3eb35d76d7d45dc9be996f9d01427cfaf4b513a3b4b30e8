{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values.length > index ? values[index] : null);\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n    index += 1; // device unique id\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n\n    // Defensive: check if we have enough values\n    if (values.length <= index || values[index].isEmpty()) {\n        return position;\n    }\n\n    long reportMask;\n    try {\n        reportMask = Long.parseLong(values[index++], 16);\n    } catch (NumberFormatException e) {\n        return position;\n    }\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0) && values.length > index && !values[index].isEmpty()) {\n        position.set(Position.KEY_VIN, values[index++]);\n    } else if (BitUtil.check(reportMask, 0)) { index++; }\n\n    if (BitUtil.check(reportMask, 1) && values.length > index && !values[index].isEmpty()) {\n        position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n    } else if (BitUtil.check(reportMask, 1)) { index++; }\n\n    if (BitUtil.check(reportMask, 2) && values.length > index && !values[index].isEmpty()) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    } else if (BitUtil.check(reportMask, 2)) { index++; }\n\n    if (BitUtil.check(reportMask, 3) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(v));\n        }\n    } else if (BitUtil.check(reportMask, 3)) { index++; }\n\n    if (BitUtil.check(reportMask, 5) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMask, 5)) { index++; }\n\n    if (BitUtil.check(reportMask, 4) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(v)));\n        }\n    } else if (BitUtil.check(reportMask, 4)) { index++; }\n\n    if (BitUtil.check(reportMask, 6) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMask, 6)) { index++; }\n\n    if (BitUtil.check(reportMask, 7) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(v.substring(1)));\n        }\n    } else if (BitUtil.check(reportMask, 7)) { index++; }\n\n    if (BitUtil.check(reportMask, 8) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(v.substring(1)));\n        }\n    } else if (BitUtil.check(reportMask, 8)) { index++; }\n\n    if (BitUtil.check(reportMask, 9) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"range\", Long.parseLong(v) * 100);\n        }\n    } else if (BitUtil.check(reportMask, 9)) { index++; }\n\n    if (BitUtil.check(reportMask, 10) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMask, 10)) { index++; }\n\n    if (BitUtil.check(reportMask, 11) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(v)));\n        }\n    } else if (BitUtil.check(reportMask, 11)) { index++; }\n\n    if (BitUtil.check(reportMask, 12) && values.length > index && !values[index].isEmpty()) {\n        position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 12)) { index++; }\n\n    if (BitUtil.check(reportMask, 13) && values.length > index && !values[index].isEmpty()) {\n        position.set(\"idleHours\", Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 13)) { index++; }\n\n    if (BitUtil.check(reportMask, 14) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(v));\n        }\n    } else if (BitUtil.check(reportMask, 14)) { index++; }\n\n    if (BitUtil.check(reportMask, 15) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMask, 15)) { index++; }\n\n    if (BitUtil.check(reportMask, 16) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(v, 16));\n        }\n    } else if (BitUtil.check(reportMask, 16)) { index++; }\n\n    if (BitUtil.check(reportMask, 17) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(v, 16));\n        }\n    } else if (BitUtil.check(reportMask, 17)) { index++; }\n\n    if (BitUtil.check(reportMask, 18) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(v, 16));\n        }\n    } else if (BitUtil.check(reportMask, 18)) { index++; }\n\n    if (BitUtil.check(reportMask, 19) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(v, 16));\n        }\n    } else if (BitUtil.check(reportMask, 19)) { index++; }\n\n    if (BitUtil.check(reportMask, 20) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(v));\n        }\n    } else if (BitUtil.check(reportMask, 20)) { index++; }\n\n    if (BitUtil.check(reportMask, 21) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(v));\n        }\n    } else if (BitUtil.check(reportMask, 21)) { index++; }\n\n    if (BitUtil.check(reportMask, 29) && values.length > index && !values[index].isEmpty()) {\n        try {\n            reportMaskExt = Long.parseLong(values[index++], 16);\n        } catch (NumberFormatException e) {\n            reportMaskExt = 0;\n            index++;\n        }\n    } else if (BitUtil.check(reportMask, 29)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 0) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMaskExt, 0)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 1) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMaskExt, 1)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 2) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMaskExt, 2)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 3) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(v));\n        }\n    } else if (BitUtil.check(reportMaskExt, 3)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 4)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 5)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 6)) { index += 1; }\n\n    if (BitUtil.check(reportMaskExt, 7) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(v) * 0.001);\n        }\n    } else if (BitUtil.check(reportMaskExt, 7)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 8)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 9)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 10)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 11)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 12)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 13)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 14)) { index += 1; }\n\n    if (BitUtil.check(reportMaskExt, 15) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver1Card\", v);\n        }\n    } else if (BitUtil.check(reportMaskExt, 15)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 16) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver2Card\", v);\n        }\n    } else if (BitUtil.check(reportMaskExt, 16)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 17) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver1Name\", v);\n        }\n    } else if (BitUtil.check(reportMaskExt, 17)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 18) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver2Name\", v);\n        }\n    } else if (BitUtil.check(reportMaskExt, 18)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 19) && values.length > index) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"registration\", v);\n        }\n    } else if (BitUtil.check(reportMaskExt, 19)) { index++; }\n\n    if (BitUtil.check(reportMaskExt, 20)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 21)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 22)) { index += 1; }\n    if (BitUtil.check(reportMaskExt, 23)) { index += 1; }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        // Defensive loop fix: ensure index does not exceed bounds\n        while (values.length > index && values[index].isEmpty()) {\n            index += 1;\n        }\n        if (values.length > index && !values[index].isEmpty()) {\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                if (values.length > index) position.setCourse(Integer.parseInt(values[index++]));\n                if (values.length > index) position.setAltitude(Double.parseDouble(values[index++]));\n                if (values.length > index) position.setLongitude(Double.parseDouble(values[index++]));\n                if (values.length > index) position.setLatitude(Double.parseDouble(values[index++]));\n                if (values.length > index) position.setTime(dateFormat.parse(values[index++]));\n            } else {\n                index += 6; // no location\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    // At this point index should be at the final (fix/device) time\n    if (values.length > index && !values[index].isEmpty()) {\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}