{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        // Use limit -1 to preserve trailing empty strings\n        String[] values = sentence.split(\",\", -1);\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n        long reportMask = Long.parseLong(values[index++], 16);\n        long reportMaskExt = 0;\n\n        if (BitUtil.check(reportMask, 0)) {\n            position.set(Position.KEY_VIN, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            String rawValue = values[index++];\n            if (!rawValue.isEmpty()) {\n                position.set(Position.KEY_IGNITION, Integer.parseInt(rawValue) > 0);\n            }\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {\n            position.set(\"range\", Long.parseLong(values[index - 1]) * 100);\n        }\n        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 12)) {\n            String rawValue = values[index++];\n            if (!rawValue.isEmpty()) {\n                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(rawValue));\n            }\n        }\n        if (BitUtil.check(reportMask, 13)) {\n            String rawValue = values[index++];\n            if (!rawValue.isEmpty()) {\n                position.set(\"idleHours\", Double.parseDouble(rawValue));\n            }\n        }\n        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 29)) {\n            reportMaskExt = Long.parseLong(values[index++], 16);\n        }\n        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            index += 1; // tachograph overspeed\n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; // tachograph motion\n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; // tachograph direction\n        }\n        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; // pedal breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; // engine breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; // total accelerator kick-downs\n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; // total effective engine speed\n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; // total cruise control time\n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; // total accelerator kick-down time\n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; // total brake application\n        }\n        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {\n            position.set(\"driver1Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {\n            position.set(\"driver2Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {\n            position.set(\"driver1Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {\n            position.set(\"driver2Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {\n            position.set(\"registration\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; // expansion information\n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; // rapid brakings\n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; // rapid accelerations\n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; // engine torque\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        if (BitUtil.check(reportMask, 30)) {\n            while (index < values.length && values[index].isEmpty()) {\n                index += 1;\n            }\n            if (index < values.length && !values[index].isEmpty()) { // Check if 'valid' field exists and is not empty\n                position.setValid(Integer.parseInt(values[index++]) > 0);\n                if (index < values.length && !values[index].isEmpty()) { // Check if 'speed' field exists and is not empty\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                    position.setCourse(Integer.parseInt(values[index++]));\n                    position.setAltitude(Double.parseDouble(values[index++]));\n                    position.setLongitude(Double.parseDouble(values[index++]));\n                    position.setLatitude(Double.parseDouble(values[index++]));\n                    position.setTime(dateFormat.parse(values[index++]));\n                } else {\n                    // If speed is empty/missing, skip all 6 location fields\n                    index = Math.min(index + 6, values.length); // Advance index carefully\n                    getLastLocation(position, null);\n                }\n            } else {\n                // If 'valid' field is empty or missing, skip it and all 6 location fields\n                index = Math.min(index + 7, values.length); // Advance index carefully\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; // cell\n            index += 1; // reserved\n        }\n\n        if (index < values.length && !values[index].isEmpty()) { // Check for device time field\n            if (ignoreFixTime) {\n                position.setTime(dateFormat.parse(values[index]));\n            } else {\n                position.setDeviceTime(dateFormat.parse(values[index]));\n            }\n        } else if (index >= values.length && position.getDeviceTime() == null && position.getFixTime() == null) {\n            // If device time is missing and no other time set, use current time.\n            // This is a fallback, getLastLocation might have already set a time.\n            // Consider if this case is needed or if getLastLocation covers it.\n            // For now, relying on existing getLastLocation logic.\n        }\n        // The original code didn't increment index after parsing the last time field.\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}