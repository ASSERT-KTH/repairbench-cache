{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\");\n\n        // Basic structural checks - ensure enough fields for required parts\n        if (values.length < 7) { // Need up to report mask index (6) + 1\n             // Not enough fields for basic parsing\n             return null;\n        }\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null; // Device session is required\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n\n        long reportMask;\n        try {\n            // Report mask is mandatory, parse or fail\n            reportMask = Long.parseLong(values[index++], 16);\n        } catch (NumberFormatException e) {\n            throw new ParseException(\"Invalid report mask format\", index - 1);\n        }\n        long reportMaskExt = 0;\n\n        // --- Start of conditional fields ---\n        // Pattern: Check bit -> Check bounds & emptiness -> Try Parse -> Increment index\n\n        if (BitUtil.check(reportMask, 0)) { // VIN (String)\n            if (index < values.length) {\n                position.set(Position.KEY_VIN, values[index]);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 1)) { // Ignition (Boolean from Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 2)) { // OBD Odometer (String)\n            if (index < values.length) {\n                position.set(Position.KEY_OBD_ODOMETER, values[index]);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 3)) { // Fuel Used (Double)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 5)) { // RPM (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_RPM, Integer.parseInt(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 4)) { // OBD Speed (Int -> Double)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 6)) { // Coolant Temp (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 7)) { // Fuel Consumption (Double from substring)\n            if (index < values.length && values[index].length() > 1) { // Check length > 1 for substring\n                try {\n                    position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index].substring(1)));\n                } catch (NumberFormatException | IndexOutOfBoundsException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 8)) { // Fuel Level (Double from substring)\n             if (index < values.length && values[index].length() > 1) { // Check length > 1 for substring\n                 try {\n                    position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index].substring(1)));\n                 } catch (NumberFormatException | IndexOutOfBoundsException e) { /* ignore invalid format */ }\n             }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 9)) { // Range (Long)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"range\", Long.parseLong(values[index]) * 100);\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 10)) { // Throttle (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 11)) { // Hours (Double -> Long ms)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 12)) { // Driving Time (Double) - FIXED NFE\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 13)) { // Idle Hours (Double) - FIXED NFE\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"idleHours\", Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 14)) { // Idle Fuel Consumption (Double)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"idleFuelConsumption\", Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 15)) { // Axle Weight (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 16)) { // Tachograph Info (Int hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"tachographInfo\", Integer.parseInt(values[index], 16));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 17)) { // Indicators (Int hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"indicators\", Integer.parseInt(values[index], 16));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 18)) { // Lights (Int hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"lights\", Integer.parseInt(values[index], 16));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 19)) { // Doors (Int hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"doors\", Integer.parseInt(values[index], 16));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 20)) { // Vehicle Overspeed (Double)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"vehicleOverspeed\", Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 21)) { // Engine Overspeed (Double)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(\"engineOverspeed\", Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 29)) { // reportMaskExt (Long hex) - FIXED NFE\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    reportMaskExt = Long.parseLong(values[index], 16);\n                } catch (NumberFormatException e) { /* ignore invalid format */ }\n            }\n            index++;\n        }\n\n        // --- Start of reportMaskExt fields --- (Apply same robust pattern)\n        if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                try { position.set(\"adBlueLevel\", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }\n            } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1 (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                 try { position.set(\"axleWeight1\", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }\n            } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3 (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                 try { position.set(\"axleWeight3\", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }\n            } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4 (Int)\n            if (index < values.length && !values[index].isEmpty()) {\n                 try { position.set(\"axleWeight4\", Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ }\n            } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 4)) { index++; } // tachograph overspeed (no data parsed)\n        if (BitUtil.check(reportMaskExt, 5)) { index++; } // tachograph motion (no data parsed)\n        if (BitUtil.check(reportMaskExt, 6)) { index++; } // tachograph direction (no data parsed)\n        if (BitUtil.check(reportMaskExt, 7)) { // ADC1 (Int -> Double)\n            if (index < values.length && !values[index].isEmpty()) {\n                try { position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001); } catch (NumberFormatException e) { /* ignore */ }\n            } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 8)) { index++; } // pedal breaking factor (no data parsed)\n        if (BitUtil.check(reportMaskExt, 9)) { index++; } // engine breaking factor (no data parsed)\n        if (BitUtil.check(reportMaskExt, 10)) { index++; } // total accelerator kick-downs (no data parsed)\n        if (BitUtil.check(reportMaskExt, 11)) { index++; } // total effective engine speed (no data parsed)\n        if (BitUtil.check(reportMaskExt, 12)) { index++; } // total cruise control time (no data parsed)\n        if (BitUtil.check(reportMaskExt, 13)) { index++; } // total accelerator kick-down time (no data parsed)\n        if (BitUtil.check(reportMaskExt, 14)) { index++; } // total brake application (no data parsed)\n        if (BitUtil.check(reportMaskExt, 15)) { // driver1Card (String)\n            if (index < values.length) { position.set(\"driver1Card\", values[index]); } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 16)) { // driver2Card (String)\n            if (index < values.length) { position.set(\"driver2Card\", values[index]); } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 17)) { // driver1Name (String)\n            if (index < values.length) { position.set(\"driver1Name\", values[index]); } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 18)) { // driver2Name (String)\n            if (index < values.length) { position.set(\"driver2Name\", values[index]); } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 19)) { // registration (String)\n            if (index < values.length) { position.set(\"registration\", values[index]); } index++;\n        }\n        if (BitUtil.check(reportMaskExt, 20)) { index++; } // expansion information (no data parsed)\n        if (BitUtil.check(reportMaskExt, 21)) { index++; } // rapid brakings (no data parsed)\n        if (BitUtil.check(reportMaskExt, 22)) { index++; } // rapid accelerations (no data parsed)\n        if (BitUtil.check(reportMaskExt, 23)) { index++; } // engine torque (no data parsed)\n\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        if (BitUtil.check(reportMask, 30)) { // Location block\n            // Skip potential empty fields before validity field\n            while (index < values.length && values[index].isEmpty()) {\n                index++;\n            }\n            boolean locationAvailable = false;\n            if (index < values.length && !values[index].isEmpty()) { // Check validity field is present and not empty\n                try {\n                    position.setValid(Integer.parseInt(values[index]) > 0);\n                } catch (NumberFormatException e) { /* ignore */ }\n            }\n            index++; // Consume validity field (whether parsed or not)\n\n            // Check if speed field is present and not empty to determine if location block exists\n            if (index < values.length && !values[index].isEmpty()) {\n                locationAvailable = true;\n                // Parse location fields, guarding each parse operation\n                try { position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index]))); } catch (NumberFormatException e) { /* ignore */ } index++; // Speed\n                if (index < values.length && !values[index].isEmpty()) { try { position.setCourse(Integer.parseInt(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Course\n                if (index < values.length && !values[index].isEmpty()) { try { position.setAltitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Altitude\n                if (index < values.length && !values[index].isEmpty()) { try { position.setLongitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Longitude\n                if (index < values.length && !values[index].isEmpty()) { try { position.setLatitude(Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ } } index++; // Latitude\n                if (index < values.length && !values[index].isEmpty()) { try { position.setTime(dateFormat.parse(values[index])); } catch (ParseException e) { /* ignore */ } } index++; // Fix Time\n            } else { // Speed field is missing or empty\n                 index += 6; // Skip the expected 6 location fields (speed to fix time)\n            }\n            if (!locationAvailable) {\n                 getLastLocation(position, null); // Use last known location if current is unavailable\n            }\n        } else {\n            getLastLocation(position, null); // Use last known location if location block bit is not set\n        }\n\n\n        if (BitUtil.check(reportMask, 31)) { // Cell block\n            index += 4; // cell fields\n            index += 1; // reserved field\n        }\n\n        // Final Time (Device Time)\n        if (index < values.length && !values[index].isEmpty()) {\n            try {\n                Date deviceTime = dateFormat.parse(values[index]);\n                if (ignoreFixTime) { // If configured to ignore GPS time\n                    position.setTime(deviceTime);\n                } else {\n                    position.setDeviceTime(deviceTime);\n                    // If position fix time is still not set (e.g. no GPS block, or time parse failed), use device time\n                    if (position.getFixTime() == null) {\n                         position.setTime(deviceTime);\n                    }\n                }\n            } catch (ParseException e) {\n                 // Ignore parse exception for final timestamp\n            }\n        }\n        // No index increment needed for the final field\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}