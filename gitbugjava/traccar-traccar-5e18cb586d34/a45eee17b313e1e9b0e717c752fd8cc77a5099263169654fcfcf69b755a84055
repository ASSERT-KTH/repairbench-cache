{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\");\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        // Device ID - Assumed mandatory and non-empty for getDeviceSession.\n        // If it can be empty, getDeviceSession should handle it or it implies an invalid message format.\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n\n        long reportMask = 0;\n        String field; // Reusable variable for current field value\n\n        // Report Mask\n        field = (index < values.length) ? values[index] : \"\";\n        if (!field.isEmpty()) {\n            reportMask = Long.parseLong(field, 16);\n        }\n        index++; // Consume reportMask field\n\n        long reportMaskExt = 0;\n\n        // Fields controlled by reportMask\n        if (BitUtil.check(reportMask, 0)) { // KEY_VIN\n            field = (index < values.length) ? values[index] : \"\";\n            position.set(Position.KEY_VIN, field); // String field, can be empty\n            index++;\n        }\n        if (BitUtil.check(reportMask, 1)) { // KEY_IGNITION\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_IGNITION, Integer.parseInt(field) > 0);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 2)) { // KEY_OBD_ODOMETER\n            field = (index < values.length) ? values[index] : \"\";\n            position.set(Position.KEY_OBD_ODOMETER, field); // String field, can be empty\n            index++;\n        }\n        if (BitUtil.check(reportMask, 3)) { // KEY_FUEL_USED\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_FUEL_USED, Double.parseDouble(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 5)) { // KEY_RPM (comes before 4 in original code)\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_RPM, Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 4)) { // KEY_OBD_SPEED (comes after 5 in original code)\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(field)));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 6)) { // KEY_COOLANT_TEMP\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 7)) { // KEY_FUEL_CONSUMPTION\n            field = (index < values.length) ? values[index] : \"\";\n            // Check length to avoid StringIndexOutOfBoundsException on empty or single-char string\n            if (!field.isEmpty() && field.length() > 1) {\n                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(field.substring(1)));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 8)) { // KEY_FUEL_LEVEL\n            field = (index < values.length) ? values[index] : \"\";\n            // Check length to avoid StringIndexOutOfBoundsException on empty or single-char string\n            if (!field.isEmpty() && field.length() > 1) {\n                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(field.substring(1)));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 9)) { // range\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"range\", Long.parseLong(field) * 100);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 10)) { // KEY_THROTTLE\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_THROTTLE, Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 11)) { // KEY_HOURS\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(field)));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 12)) { // KEY_DRIVING_TIME\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 13)) { // idleHours\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"idleHours\", Double.parseDouble(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 14)) { // idleFuelConsumption\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"idleFuelConsumption\", Double.parseDouble(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 15)) { // KEY_AXLE_WEIGHT\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 16)) { // tachographInfo\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"tachographInfo\", Integer.parseInt(field, 16));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 17)) { // indicators\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"indicators\", Integer.parseInt(field, 16));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 18)) { // lights\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"lights\", Integer.parseInt(field, 16));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 19)) { // doors\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"doors\", Integer.parseInt(field, 16));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 20)) { // vehicleOverspeed\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"vehicleOverspeed\", Double.parseDouble(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 21)) { // engineOverspeed\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"engineOverspeed\", Double.parseDouble(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 29)) { // reportMaskExt\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                reportMaskExt = Long.parseLong(field, 16);\n            }\n            index++;\n        }\n\n        // Fields controlled by reportMaskExt\n        if (BitUtil.check(reportMaskExt, 0)) { // adBlueLevel\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"adBlueLevel\", Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 1)) { // axleWeight1\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"axleWeight1\", Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 2)) { // axleWeight3\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"axleWeight3\", Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 3)) { // axleWeight4\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(\"axleWeight4\", Integer.parseInt(field));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 4)) { // tachograph overspeed\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 5)) { // tachograph motion\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 6)) { // tachograph direction\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 7)) { // ADC + 1\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Integer.parseInt(field) * 0.001);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 8)) { // pedal breaking factor\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 9)) { // engine breaking factor\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 10)) { // total accelerator kick-downs\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 11)) { // total effective engine speed\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 12)) { // total cruise control time\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 13)) { // total accelerator kick-down time\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 14)) { // total brake application\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 15)) { // driver1Card\n            field = (index < values.length) ? values[index] : \"\";\n            position.set(\"driver1Card\", field); // String field, can be empty\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 16)) { // driver2Card\n            field = (index < values.length) ? values[index] : \"\";\n            position.set(\"driver2Card\", field); // String field, can be empty\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 17)) { // driver1Name\n            field = (index < values.length) ? values[index] : \"\";\n            position.set(\"driver1Name\", field); // String field, can be empty\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 18)) { // driver2Name\n            field = (index < values.length) ? values[index] : \"\";\n            position.set(\"driver2Name\", field); // String field, can be empty\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 19)) { // registration\n            field = (index < values.length) ? values[index] : \"\";\n            position.set(\"registration\", field); // String field, can be empty\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 20)) { // expansion information\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 21)) { // rapid brakings\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 22)) { // rapid accelerations\n            index = Math.min(index + 1, values.length);\n        }\n        if (BitUtil.check(reportMaskExt, 23)) { // engine torque\n            index = Math.min(index + 1, values.length);\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        // GPS data block (controlled by reportMask bit 30)\n        if (BitUtil.check(reportMask, 30)) {\n            // Skip leading empty fields for 'valid'\n            while (index < values.length && values[index].isEmpty()) {\n                index += 1;\n            }\n            // Parse 'valid' status\n            field = (index < values.length) ? values[index] : \"\";\n            if (!field.isEmpty()) {\n                position.setValid(Integer.parseInt(field) > 0);\n            }\n            index++; // Consume 'valid' field\n\n            // Check if speed field is present and not empty, indicating presence of location data\n            boolean locationPresent = (index < values.length && !values[index].isEmpty());\n\n            if (locationPresent) {\n                // Speed\n                field = (index < values.length) ? values[index] : \"\";\n                if (!field.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(field)));\n                }\n                index++;\n                // Course\n                field = (index < values.length) ? values[index] : \"\";\n                if (!field.isEmpty()) {\n                    position.setCourse(Integer.parseInt(field));\n                }\n                index++;\n                // Altitude\n                field = (index < values.length) ? values[index] : \"\";\n                if (!field.isEmpty()) {\n                    position.setAltitude(Double.parseDouble(field));\n                }\n                index++;\n                // Longitude\n                field = (index < values.length) ? values[index] : \"\";\n                if (!field.isEmpty()) {\n                    position.setLongitude(Double.parseDouble(field));\n                }\n                index++;\n                // Latitude\n                field = (index < values.length) ? values[index] : \"\";\n                if (!field.isEmpty()) {\n                    position.setLatitude(Double.parseDouble(field));\n                }\n                index++;\n                // Time\n                field = (index < values.length) ? values[index] : \"\";\n                if (!field.isEmpty()) {\n                    position.setTime(dateFormat.parse(field));\n                }\n                index++;\n            } else {\n                // If speed field is empty or missing, skip the next 6 fields conceptually.\n                // The original code implies skipping them all if the speed field is empty.\n                index = Math.min(index + 6, values.length);\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n\n        // Cell data block (controlled by reportMask bit 31)\n        if (BitUtil.check(reportMask, 31)) {\n            index = Math.min(index + 4, values.length); // cell\n            index = Math.min(index + 1, values.length); // reserved\n        }\n\n        // Final time field at the end of the sentence\n        if (index < values.length) {\n            field = values[index]; // Get value from current index\n            if (!field.isEmpty()) {\n                if (ignoreFixTime) {\n                    position.setTime(dateFormat.parse(field));\n                } else {\n                    position.setDeviceTime(dateFormat.parse(field));\n                }\n            }\n            index++; // Consume this last field\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}