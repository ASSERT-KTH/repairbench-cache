{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    // skip header and protocol version\n    index += 2;\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // skip device name and report type\n    index += 2;\n\n    // offset for CAN bus state (index 7)\n    long reportMask = Long.parseLong(values[index + 5], 16);\n\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index + 6]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        position.set(Position.KEY_IGNITION, Integer.parseInt(values[index + 7]) > 0);\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index + 8]);\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        if (!values[index + 9].isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index + 9]));\n        }\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        if (!values[index + 10].isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index + 10])));\n        }\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        if (!values[index + 11].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index + 11]));\n        }\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        if (!values[index + 12].isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index + 12]));\n        }\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        if (!values[index + 13].isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index + 13].substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        if (!values[index + 14].isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index + 14].substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        if (!values[index + 15].isEmpty()) {\n            int newValue = Integer.parseInt(values[index + 15]);\n            position.set(\"range\", newValue * 100);\n        }\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        if (!values[index + 16].isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index + 16]));\n        }\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        if (!values[index + 17].isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index + 17])));\n        }\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index + 18]));\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        position.set(\"idleHours\", Double.parseDouble(values[index + 19]));\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        if (!values[index + 20].isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(values[index + 20]));\n        }\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        if (!values[index + 21].isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index + 21]));\n        }\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        if (!values[index + 22].isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(values[index + 22], 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        if (!values[index + 23].isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(values[index + 23], 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        if (!values[index + 24].isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(values[index + 24], 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        if (!values[index + 25].isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(values[index + 25], 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        if (!values[index + 26].isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(values[index + 26]));\n        }\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        if (!values[index + 27].isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(values[index + 27]));\n        }\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        long reportMaskExt = Long.parseLong(values[index++], 16);\n    }\n    // skip values for extra mask position bits\n    for (int i = 30; i <= 45; i++) {\n        if (BitUtil.check(reportMaskExt, i - 30)) {\n            // skip the next value if bit is set\n            index++;\n        }\n    }\n\n    // Parsing the date and time\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (ignoreFixTime) {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    } else {\n        position.setTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}