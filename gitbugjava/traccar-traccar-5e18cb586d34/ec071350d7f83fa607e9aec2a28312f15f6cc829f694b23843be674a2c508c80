{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        String fuelUsedValue = values[index++];\n        if (!fuelUsedValue.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(fuelUsedValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        String rpmValue = values[index++];\n        if (!rpmValue.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(rpmValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        String obdSpeedValue = values[index++];\n        if (!obdSpeedValue.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(obdSpeedValue)));\n        }\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        String coolantTempValue = values[index++];\n        if (!coolantTempValue.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(coolantTempValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        String fuelConsumptionValue = values[index++];\n        if (!fuelConsumptionValue.isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(fuelConsumptionValue.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        String fuelLevelValue = values[index++];\n        if (!fuelLevelValue.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(fuelLevelValue.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        String rangeValue = values[index++];\n        if (!rangeValue.isEmpty()) {\n            position.set(\"range\", Long.parseLong(rangeValue) * 100);\n        }\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        String throttleValue = values[index++];\n        if (!throttleValue.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(throttleValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        String hoursValue = values[index++];\n        if (!hoursValue.isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(hoursValue)));\n        }\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        position.set(\"idleHours\", Double.parseDouble(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        String idleFuelConsumptionValue = values[index++];\n        if (!idleFuelConsumptionValue.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(idleFuelConsumptionValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        String axleWeightValue = values[index++];\n        if (!axleWeightValue.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(axleWeightValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        String tachographInfoValue = values[index++];\n        if (!tachographInfoValue.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(tachographInfoValue, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        String indicatorsValue = values[index++];\n        if (!indicatorsValue.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(indicatorsValue, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        String lightsValue = values[index++];\n        if (!lightsValue.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(lightsValue, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        String doorsValue = values[index++];\n        if (!doorsValue.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(doorsValue, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        String vehicleOverspeedValue = values[index++];\n        if (!vehicleOverspeedValue.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(vehicleOverspeedValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        String engineOverspeedValue = values[index++];\n        if (!engineOverspeedValue.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(engineOverspeedValue));\n        }\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        reportMaskExt = Long.parseLong(values[index++], 16);\n    }\n    if (BitUtil.check(reportMaskExt, 0)) {\n        String adBlueLevelValue = values[index++];\n        if (!adBlueLevelValue.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(adBlueLevelValue));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        String axleWeight1Value = values[index++];\n        if (!axleWeight1Value.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(axleWeight1Value));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        String axleWeight3Value = values[index++];\n        if (!axleWeight3Value.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(axleWeight3Value));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        String axleWeight4Value = values[index++];\n        if (!axleWeight4Value.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(axleWeight4Value));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        String adcValue = values[index++];\n        if (!adcValue.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(adcValue) * 0.001);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        String driver1CardValue = values[index++];\n        if (!driver1CardValue.isEmpty()) {\n            position.set(\"driver1Card\", driver1CardValue);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        String driver2CardValue = values[index++];\n        if (!driver2CardValue.isEmpty()) {\n            position.set(\"driver2Card\", driver2CardValue);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        String driver1NameValue = values[index++];\n        if (!driver1NameValue.isEmpty()) {\n            position.set(\"driver1Name\", driver1NameValue);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        String driver2NameValue = values[index++];\n        if (!driver2NameValue.isEmpty()) {\n            position.set(\"driver2Name\", driver2NameValue);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        String registrationValue = values[index++];\n        if (!registrationValue.isEmpty()) {\n            position.set(\"registration\", registrationValue);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        while (index < values.length && values[index].isEmpty()) {\n            index += 1;\n        }\n        if (index < values.length) {\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n            if (index < values.length) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                position.setCourse(Integer.parseInt(values[index++]));\n                position.setAltitude(Double.parseDouble(values[index++]));\n                position.setLongitude(Double.parseDouble(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index++]));\n                position.setTime(dateFormat.parse(values[index++]));\n            } else {\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}