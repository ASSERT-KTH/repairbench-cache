{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\");\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n        long reportMask = 0;\n        // Check if the report mask field exists and is not empty before parsing\n        if (index < values.length && !values[index].isEmpty()) {\n            reportMask = Long.parseLong(values[index], 16);\n        }\n        index++; // Always increment index for the report mask field position\n\n        long reportMaskExt = 0;\n\n        if (BitUtil.check(reportMask, 0)) {\n            position.set(Position.KEY_VIN, values[index++]); // VIN is string, no parse needed\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            // Check for empty string before parsing integer\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);\n            }\n            index++; // Increment index for ignition field position\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index++]); // Odometer might be stored as string initially\n        }\n        if (BitUtil.check(reportMask, 3)) {\n            // Check for empty string before parsing double\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));\n            }\n            index++; // Increment index for fuel used field position\n        }\n        if (BitUtil.check(reportMask, 5)) {\n            // Check for empty string before parsing integer\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_RPM, Integer.parseInt(values[index]));\n            }\n            index++; // Increment index for RPM field position\n        }\n        if (BitUtil.check(reportMask, 4)) {\n            // Check for empty string before parsing integer\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n            }\n            index++; // Increment index for OBD speed field position\n        }\n        if (BitUtil.check(reportMask, 6)) {\n            // Check for empty string before parsing integer\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));\n            }\n            index++; // Increment index for coolant temp field position\n        }\n        if (BitUtil.check(reportMask, 7)) {\n            // Check for empty string and length before parsing double\n            if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index].substring(1)));\n            }\n            index++; // Increment index for fuel consumption field position\n        }\n        if (BitUtil.check(reportMask, 8)) {\n            // Check for empty string and length before parsing double\n            if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index].substring(1)));\n            }\n            index++; // Increment index for fuel level field position\n        }\n        if (BitUtil.check(reportMask, 9)) {\n            // Check for empty string before parsing long\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"range\", Long.parseLong(values[index]) * 100);\n            }\n            index++; // Increment index for range field position\n        }\n        if (BitUtil.check(reportMask, 10)) {\n            // Check for empty string before parsing integer\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));\n            }\n            index++; // Increment index for throttle field position\n        }\n        if (BitUtil.check(reportMask, 11)) {\n            // Check for empty string before parsing double\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));\n            }\n            index++; // Increment index for hours field position\n        }\n        if (BitUtil.check(reportMask, 12)) {\n            // Check for empty string before parsing double\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));\n            }\n            index++; // Increment index for driving time field position\n        }\n        if (BitUtil.check(reportMask, 13)) {\n            // Check for empty string before parsing double\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"idleHours\", Double.parseDouble(values[index]));\n            }\n            index++; // Increment index for idle hours field position\n        }\n        if (BitUtil.check(reportMask, 14)) {\n            // Check for empty string before parsing double\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"idleFuelConsumption\", Double.parseDouble(values[index]));\n            }\n            index++; // Increment index for idle fuel consumption field position\n        }\n        if (BitUtil.check(reportMask, 15)) {\n            // Check for empty string before parsing integer\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));\n            }\n            index++; // Increment index for axle weight field position\n        }\n        if (BitUtil.check(reportMask, 16)) {\n            // Check for empty string before parsing integer (hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tachographInfo\", Integer.parseInt(values[index], 16));\n            }\n            index++; // Increment index for tachograph info field position\n        }\n        if (BitUtil.check(reportMask, 17)) {\n             // Check for empty string before parsing integer (hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"indicators\", Integer.parseInt(values[index], 16));\n            }\n            index++; // Increment index for indicators field position\n        }\n        if (BitUtil.check(reportMask, 18)) {\n            // Check for empty string before parsing integer (hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"lights\", Integer.parseInt(values[index], 16));\n            }\n            index++; // Increment index for lights field position\n        }\n        if (BitUtil.check(reportMask, 19)) {\n            // Check for empty string before parsing integer (hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"doors\", Integer.parseInt(values[index], 16));\n            }\n            index++; // Increment index for doors field position\n        }\n        if (BitUtil.check(reportMask, 20)) {\n            // Check for empty string before parsing double\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"vehicleOverspeed\", Double.parseDouble(values[index]));\n            }\n            index++; // Increment index for vehicle overspeed field position\n        }\n        if (BitUtil.check(reportMask, 21)) {\n            // Check for empty string before parsing double\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"engineOverspeed\", Double.parseDouble(values[index]));\n            }\n            index++; // Increment index for engine overspeed field position\n        }\n\n        // Bits 22-28 are skipped in the original code too\n\n        if (BitUtil.check(reportMask, 29)) {\n            // Check for empty string before parsing long (hex)\n            if (index < values.length && !values[index].isEmpty()) {\n                reportMaskExt = Long.parseLong(values[index], 16);\n            }\n            index++; // Increment index for report mask ext field position\n        }\n\n        // Process extended mask fields\n        if (BitUtil.check(reportMaskExt, 0)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"adBlueLevel\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 1)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"axleWeight1\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 2)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"axleWeight3\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 3)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"axleWeight4\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            index += 1; // tachograph overspeed\n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; // tachograph motion\n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; // tachograph direction\n        }\n        if (BitUtil.check(reportMaskExt, 7)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; // pedal breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; // engine breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; // total accelerator kick-downs\n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; // total effective engine speed\n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; // total cruise control time\n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; // total accelerator kick-down time\n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; // total brake application\n        }\n        if (BitUtil.check(reportMaskExt, 15)) {\n            if (index < values.length) {\n                position.set(\"driver1Card\", values[index]); // String, no parse\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 16)) {\n            if (index < values.length) {\n                position.set(\"driver2Card\", values[index]); // String, no parse\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 17)) {\n            if (index < values.length) {\n                position.set(\"driver1Name\", values[index]); // String, no parse\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 18)) {\n            if (index < values.length) {\n                position.set(\"driver2Name\", values[index]); // String, no parse\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 19)) {\n             if (index < values.length) {\n                 position.set(\"registration\", values[index]); // String, no parse\n             }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; // expansion information\n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; // rapid brakings\n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; // rapid accelerations\n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; // engine torque\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        if (BitUtil.check(reportMask, 30)) {\n            // Skip initial empty fields before GPS validity\n            while (index < values.length && values[index].isEmpty()) {\n                index += 1;\n            }\n            // Parse validity if present and not empty\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setValid(Integer.parseInt(values[index]) > 0);\n            }\n            index++; // Consume validity field index\n\n            // Check if speed field exists and is not empty\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                if (index < values.length && !values[index].isEmpty()) { // Course\n                    position.setCourse(Integer.parseInt(values[index]));\n                } index++;\n                if (index < values.length && !values[index].isEmpty()) { // Altitude\n                    position.setAltitude(Double.parseDouble(values[index]));\n                } index++;\n                if (index < values.length && !values[index].isEmpty()) { // Longitude\n                    position.setLongitude(Double.parseDouble(values[index]));\n                } index++;\n                if (index < values.length && !values[index].isEmpty()) { // Latitude\n                    position.setLatitude(Double.parseDouble(values[index]));\n                } index++;\n                if (index < values.length && !values[index].isEmpty()) { // Time\n                    position.setTime(dateFormat.parse(values[index]));\n                } index++;\n            } else {\n                // Speed field was empty or missing, skip all 6 location fields\n                index += 6;\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; // cell\n            index += 1; // reserved\n        }\n\n        // Final time field\n        if (index < values.length && !values[index].isEmpty()) {\n            if (ignoreFixTime) {\n                position.setTime(dateFormat.parse(values[index]));\n            } else {\n                position.setDeviceTime(dateFormat.parse(values[index]));\n            }\n        }\n        // Don't increment index here as it's the last expected field in this logic path\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}