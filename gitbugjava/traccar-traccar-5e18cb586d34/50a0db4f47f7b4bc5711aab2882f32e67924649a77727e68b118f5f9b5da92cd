{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n\n    Position position = new Position(getProtocolName());\n\n    String[] values = sentence.split(\",\");\n    int index = 0;\n\n    // skip header and protocol version\n    index++; // header\n    index++; // protocol version\n\n    // device session and id\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // skip device name, report type, canbus state\n    index++; // device name\n    index++; // report type\n    index++; // canbus state\n\n    // report mask\n    long reportMask = Long.parseLong(values[index++], 16);\n\n    // extended mask (always present as next token)\n    long reportMaskExt = 0;\n    if (index < values.length) {\n        String extMask = values[index++];\n        if (!extMask.isEmpty()) {\n            reportMaskExt = Long.parseLong(extMask, 16);\n        }\n    }\n\n    // parse fields according to reportMask bits\n\n    // bit 0: VIN\n    if (BitUtil.check(reportMask, 0)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_VIN, s);\n        }\n    }\n\n    // bit 1: Ignition\n    if (BitUtil.check(reportMask, 1)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(s) > 0);\n        }\n    }\n\n    // bit 2: OBD Odometer\n    if (BitUtil.check(reportMask, 2)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_OBD_ODOMETER, s);\n        }\n    }\n\n    // bit 3: Fuel used\n    if (BitUtil.check(reportMask, 3)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(s));\n        }\n    }\n\n    // bit 4: OBD Speed\n    if (BitUtil.check(reportMask, 4)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED,\n                UnitsConverter.knotsFromKph(Integer.parseInt(s)));\n        }\n    }\n\n    // bit 5: RPM\n    if (BitUtil.check(reportMask, 5)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(s));\n        }\n    }\n\n    // bit 6: Coolant temperature\n    if (BitUtil.check(reportMask, 6)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(s));\n        }\n    }\n\n    // bit 7: Fuel consumption\n    if (BitUtil.check(reportMask, 7)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            // leading character is a unit prefix\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(s.substring(1)));\n        }\n    }\n\n    // bit 8: Fuel level\n    if (BitUtil.check(reportMask, 8)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s.substring(1)));\n        }\n    }\n\n    // bit 9: Range\n    if (BitUtil.check(reportMask, 9)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"range\", Long.parseLong(s) * 100);\n        }\n    }\n\n    // bit 10: Throttle\n    if (BitUtil.check(reportMask, 10)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(s));\n        }\n    }\n\n    // bit 11: Hours\n    if (BitUtil.check(reportMask, 11)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_HOURS,\n                UnitsConverter.msFromHours(Double.parseDouble(s)));\n        }\n    }\n\n    // bit 12: Driving time\n    if (BitUtil.check(reportMask, 12)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(s));\n        }\n    }\n\n    // bit 13: Idle hours\n    if (BitUtil.check(reportMask, 13)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(s));\n        }\n    }\n\n    // bit 14: Idle fuel consumption\n    if (BitUtil.check(reportMask, 14)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(s));\n        }\n    }\n\n    // bit 15: Axle weight\n    if (BitUtil.check(reportMask, 15)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(s));\n        }\n    }\n\n    // bit 16: Tachograph info\n    if (BitUtil.check(reportMask, 16)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(s, 16));\n        }\n    }\n\n    // bit 17: Indicators\n    if (BitUtil.check(reportMask, 17)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(s, 16));\n        }\n    }\n\n    // bit 18: Lights\n    if (BitUtil.check(reportMask, 18)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(s, 16));\n        }\n    }\n\n    // bit 19: Doors\n    if (BitUtil.check(reportMask, 19)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(s, 16));\n        }\n    }\n\n    // bit 20: Vehicle overspeed\n    if (BitUtil.check(reportMask, 20)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(s));\n        }\n    }\n\n    // bit 21: Engine overspeed\n    if (BitUtil.check(reportMask, 21)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(s));\n        }\n    }\n\n    // parse extended mask fields\n    if (BitUtil.check(reportMaskExt, 0)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index++; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index++; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index++; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(s) * 0.001);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index++; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index++; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index++; // total accelerator kick\u2011downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index++; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index++; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index++; // total accelerator kick\u2011down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index++; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver1Card\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver2Card\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver1Name\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver2Name\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"registration\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index++; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index++; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index++; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index++; // engine torque\n    }\n\n    // prepare date parser\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    // bit 30: GPS data\n    if (BitUtil.check(reportMask, 30)) {\n        // skip empty tokens until valid flag\n        while (index < values.length && values[index].isEmpty()) {\n            index++;\n        }\n        if (index < values.length) {\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n        }\n        if (index < values.length && !values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            // no fix\n            index += 6;\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    // bit 31: cell info\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell fields\n        index++;   // reserved\n    }\n\n    // final: device time\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}