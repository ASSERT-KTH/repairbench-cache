{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\");\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n\n        // reportMask\n        long reportMask = 0;\n        if (index < values.length && !values[index].isEmpty()) {\n            reportMask = Long.parseLong(values[index], 16);\n        }\n        index++; // Always advance index for this field\n\n        // VIN (Bit 0)\n        if (BitUtil.check(reportMask, 0)) {\n            if (index < values.length) {\n                position.set(Position.KEY_VIN, values[index]);\n            }\n            index++;\n        }\n\n        // IGNITION (Bit 1)\n        if (BitUtil.check(reportMask, 1)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);\n            }\n            index++;\n        }\n\n        // OBD_ODOMETER (Bit 2)\n        if (BitUtil.check(reportMask, 2)) {\n            if (index < values.length) {\n                position.set(Position.KEY_OBD_ODOMETER, values[index]);\n            }\n            index++;\n        }\n\n        // FUEL_USED (Bit 3)\n        if (BitUtil.check(reportMask, 3)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n\n        // RPM (Bit 5)\n        if (BitUtil.check(reportMask, 5)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_RPM, Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // OBD_SPEED (Bit 4)\n        if (BitUtil.check(reportMask, 4)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n            }\n            index++;\n        }\n\n        // COOLANT_TEMP (Bit 6)\n        if (BitUtil.check(reportMask, 6)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // FUEL_CONSUMPTION (Bit 7)\n        if (BitUtil.check(reportMask, 7)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                String value = values[index];\n                if (value.startsWith(\"H\")) { // Handle 'H' prefix\n                    value = value.substring(1);\n                }\n                if (!value.isEmpty()) { // Check if string is empty after substring\n                    position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value));\n                }\n            }\n            index++;\n        }\n\n        // FUEL_LEVEL (Bit 8)\n        if (BitUtil.check(reportMask, 8)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                String value = values[index];\n                if (value.startsWith(\"P\")) { // Handle 'P' prefix\n                    value = value.substring(1);\n                }\n                if (!value.isEmpty()) { // Check if string is empty after substring\n                    position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value));\n                }\n            }\n            index++;\n        }\n\n        // range (Bit 9)\n        if (BitUtil.check(reportMask, 9)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"range\", Long.parseLong(values[index]) * 100);\n            }\n            index++;\n        }\n\n        // THROTTLE (Bit 10)\n        if (BitUtil.check(reportMask, 10)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // HOURS (Bit 11)\n        if (BitUtil.check(reportMask, 11)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));\n            }\n            index++;\n        }\n\n        // DRIVING_TIME (Bit 12)\n        if (BitUtil.check(reportMask, 12)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n\n        // idleHours (Bit 13)\n        if (BitUtil.check(reportMask, 13)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"idleHours\", Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n\n        // idleFuelConsumption (Bit 14)\n        if (BitUtil.check(reportMask, 14)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"idleFuelConsumption\", Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n\n        // AXLE_WEIGHT (Bit 15)\n        if (BitUtil.check(reportMask, 15)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // tachographInfo (Bit 16)\n        if (BitUtil.check(reportMask, 16)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tachographInfo\", Integer.parseInt(values[index], 16));\n            }\n            index++;\n        }\n\n        // indicators (Bit 17)\n        if (BitUtil.check(reportMask, 17)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"indicators\", Integer.parseInt(values[index], 16));\n            }\n            index++;\n        }\n\n        // lights (Bit 18)\n        if (BitUtil.check(reportMask, 18)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"lights\", Integer.parseInt(values[index], 16));\n            }\n            index++;\n        }\n\n        // doors (Bit 19)\n        if (BitUtil.check(reportMask, 19)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"doors\", Integer.parseInt(values[index], 16));\n            }\n            index++;\n        }\n\n        // vehicleOverspeed (Bit 20)\n        if (BitUtil.check(reportMask, 20)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"vehicleOverspeed\", Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n\n        // engineOverspeed (Bit 21)\n        if (BitUtil.check(reportMask, 21)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"engineOverspeed\", Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n\n        // reportMaskExt (Bit 29)\n        long reportMaskExt = 0;\n        if (BitUtil.check(reportMask, 29)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                reportMaskExt = Long.parseLong(values[index], 16);\n            }\n            index++;\n        }\n\n        // adBlueLevel (Bit 0 of reportMaskExt)\n        if (BitUtil.check(reportMaskExt, 0)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"adBlueLevel\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // axleWeight1 (Bit 1 of reportMaskExt)\n        if (BitUtil.check(reportMaskExt, 1)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"axleWeight1\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // axleWeight3 (Bit 2 of reportMaskExt)\n        if (BitUtil.check(reportMaskExt, 2)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"axleWeight3\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // axleWeight4 (Bit 3 of reportMaskExt)\n        if (BitUtil.check(reportMaskExt, 3)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"axleWeight4\", Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n\n        // Tachograph fields (Bit 4, 5, 6 of reportMaskExt) - These just consume positions\n        if (BitUtil.check(reportMaskExt, 4)) {\n            index += 1; // tachograph overspeed\n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; // tachograph motion\n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; // tachograph direction\n        }\n\n        // ADC + 1 (Bit 7 of reportMaskExt)\n        if (BitUtil.check(reportMaskExt, 7)) {\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index]) * 0.001);\n            }\n            index++;\n        }\n\n        // More Tachograph fields (Bit 8-14 of reportMaskExt) - These just consume positions\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; // pedal breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; // engine breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; // total accelerator kick-downs\n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; // total effective engine speed\n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; // total cruise control time\n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; // total accelerator kick-down time\n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; // total brake application\n        }\n\n        // Driver cards and names, registration (Bit 15-19 of reportMaskExt)\n        if (BitUtil.check(reportMaskExt, 15)) {\n            if (index < values.length) {\n                position.set(\"driver1Card\", values[index]);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 16)) {\n            if (index < values.length) {\n                position.set(\"driver2Card\", values[index]);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 17)) {\n            if (index < values.length) {\n                position.set(\"driver1Name\", values[index]);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 18)) {\n            if (index < values.length) {\n                position.set(\"driver2Name\", values[index]);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMaskExt, 19)) {\n            if (index < values.length) {\n                position.set(\"registration\", values[index]);\n            }\n            index++;\n        }\n\n        // Expansion information, rapid brakings/accelerations, engine torque (Bit 20-23 of reportMaskExt)\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; // expansion information\n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; // rapid brakings\n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; // rapid accelerations\n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; // engine torque\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        // Location data (Bit 30 of reportMask)\n        if (BitUtil.check(reportMask, 30)) {\n            while (index < values.length && values[index].isEmpty()) {\n                index += 1;\n            }\n            // Validity field\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setValid(Integer.parseInt(values[index]) > 0);\n            }\n            index++; // Consume validity field\n\n            // Main location fields (speed, course, altitude, longitude, latitude, time)\n            if (index < values.length && !values[index].isEmpty()) { // Check speed field (first of 6)\n                // Speed\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n                }\n                index++;\n                // Course\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setCourse(Integer.parseInt(values[index]));\n                }\n                index++;\n                // Altitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setAltitude(Double.parseDouble(values[index]));\n                }\n                index++;\n                // Longitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setLongitude(Double.parseDouble(values[index]));\n                }\n                index++;\n                // Latitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setLatitude(Double.parseDouble(values[index]));\n                }\n                index++;\n                // Time\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setTime(dateFormat.parse(values[index]));\n                }\n                index++;\n            } else {\n                // If speed field is empty, skip the remaining 6 location fields\n                index += 6;\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n\n        // Cell and Reserved (Bit 31 of reportMask)\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; // cell\n            index += 1; // reserved\n        }\n\n        // Final device time / fix time\n        if (index < values.length && !values[index].isEmpty()) {\n            if (ignoreFixTime) {\n                position.setTime(dateFormat.parse(values[index]));\n            } else {\n                position.setDeviceTime(dateFormat.parse(values[index]));\n            }\n        }\n        // No index++ here, as it's the last field explicitly read from values[index]\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}