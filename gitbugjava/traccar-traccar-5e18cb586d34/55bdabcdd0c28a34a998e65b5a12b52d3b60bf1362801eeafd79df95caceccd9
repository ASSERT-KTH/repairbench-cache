{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    // bit 0: VIN\n    if (BitUtil.check(reportMask, 0)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_VIN, values[index]);\n        }\n        index++;\n    }\n    // bit 1: ignition\n    if (BitUtil.check(reportMask, 1)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index]) > 0);\n        }\n        index++;\n    }\n    // bit 2: OBD odometer\n    if (BitUtil.check(reportMask, 2)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index]);\n        }\n        index++;\n    }\n    // bit 3: fuel used\n    if (BitUtil.check(reportMask, 3)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    // bit 5: RPM\n    if (BitUtil.check(reportMask, 5)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    // bit 4: speed\n    if (BitUtil.check(reportMask, 4)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED,\n                    UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n        }\n        index++;\n    }\n    // bit 6: coolant temp\n    if (BitUtil.check(reportMask, 6)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    // bit 7: fuel consumption\n    if (BitUtil.check(reportMask, 7)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION,\n                    Double.parseDouble(values[index].substring(1)));\n        }\n        index++;\n    }\n    // bit 8: fuel level\n    if (BitUtil.check(reportMask, 8)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL,\n                    Double.parseDouble(values[index].substring(1)));\n        }\n        index++;\n    }\n    // bit 9: range\n    if (BitUtil.check(reportMask, 9)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"range\", Long.parseLong(values[index]) * 100);\n        }\n        index++;\n    }\n    // bit 10: throttle\n    if (BitUtil.check(reportMask, 10)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    // bit 11: hours\n    if (BitUtil.check(reportMask, 11)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_HOURS,\n                    UnitsConverter.msFromHours(Double.parseDouble(values[index])));\n        }\n        index++;\n    }\n    // bit 12: driving time\n    if (BitUtil.check(reportMask, 12)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    // bit 13: idle hours\n    if (BitUtil.check(reportMask, 13)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    // bit 14: idle fuel consumption\n    if (BitUtil.check(reportMask, 14)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    // bit 15: axle weight\n    if (BitUtil.check(reportMask, 15)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    // bit 16: tachograph info\n    if (BitUtil.check(reportMask, 16)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    // bit 17: indicators\n    if (BitUtil.check(reportMask, 17)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    // bit 18: lights\n    if (BitUtil.check(reportMask, 18)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    // bit 19: doors\n    if (BitUtil.check(reportMask, 19)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(values[index], 16));\n        }\n        index++;\n    }\n    // bit 20: vehicle overspeed\n    if (BitUtil.check(reportMask, 20)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    // bit 21: engine overspeed\n    if (BitUtil.check(reportMask, 21)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(values[index]));\n        }\n        index++;\n    }\n    // bit 29: extended report mask\n    if (BitUtil.check(reportMask, 29)) {\n        if (!values[index].isEmpty()) {\n            reportMaskExt = Long.parseLong(values[index], 16);\n        }\n        index++;\n    }\n\n    // Extended mask bits\n    if (BitUtil.check(reportMaskExt, 0)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(values[index]));\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        if (!values[index].isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1,\n                    Integer.parseInt(values[index]) * 0.001);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"driver1Card\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"driver2Card\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"driver1Name\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"driver2Name\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        if (!values[index].isEmpty()) {\n            position.set(\"registration\", values[index]);\n        }\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index++;\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index++;\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        // skip blank fields\n        while (values[index].isEmpty()) {\n            index++;\n        }\n        position.setValid(Integer.parseInt(values[index++]) > 0);\n        if (!values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            // no GPS fix\n            index += 6;\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        // cell info\n        index += 4;\n        index += 1;\n    }\n\n    // fix time\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}