{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n\n    String maskStr = \"\";\n    while (index < values.length && maskStr.isEmpty()) {\n        maskStr = values[index];\n        index++;\n    }\n    if (maskStr.isEmpty()) {\n        return position;\n    }\n    long reportMask;\n    try {\n        reportMask = Long.parseLong(maskStr, 16);\n    } catch (NumberFormatException ex) {\n        return position;\n    }\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0) && index < values.length) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_IGNITION, Integer.parseInt(v) > 0);\n    }\n    if (BitUtil.check(reportMask, 2) && index < values.length) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_FUEL_USED, Double.parseDouble(v));\n    }\n    if (BitUtil.check(reportMask, 5) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_RPM, Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMask, 4) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(v)));\n    }\n    if (BitUtil.check(reportMask, 6) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMask, 7) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(v.substring(1)));\n    }\n    if (BitUtil.check(reportMask, 8) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(v.substring(1)));\n    }\n    if (BitUtil.check(reportMask, 9) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"range\", Long.parseLong(v) * 100);\n    }\n    if (BitUtil.check(reportMask, 10) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_THROTTLE, Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMask, 11) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(v)));\n    }\n    if (BitUtil.check(reportMask, 12) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(v));\n    }\n    if (BitUtil.check(reportMask, 13) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"idleHours\", Double.parseDouble(v));\n    }\n    if (BitUtil.check(reportMask, 14) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"idleFuelConsumption\", Double.parseDouble(v));\n    }\n    if (BitUtil.check(reportMask, 15) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMask, 16) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"tachographInfo\", Integer.parseInt(v, 16));\n    }\n    if (BitUtil.check(reportMask, 17) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"indicators\", Integer.parseInt(v, 16));\n    }\n    if (BitUtil.check(reportMask, 18) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"lights\", Integer.parseInt(v, 16));\n    }\n    if (BitUtil.check(reportMask, 19) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"doors\", Integer.parseInt(v, 16));\n    }\n    if (BitUtil.check(reportMask, 20) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"vehicleOverspeed\", Double.parseDouble(v));\n    }\n    if (BitUtil.check(reportMask, 21) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"engineOverspeed\", Double.parseDouble(v));\n    }\n    if (BitUtil.check(reportMask, 29) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            reportMaskExt = Long.parseLong(v, 16);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 0) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"adBlueLevel\", Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMaskExt, 1) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"axleWeight1\", Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMaskExt, 2) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"axleWeight3\", Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMaskExt, 3) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"axleWeight4\", Integer.parseInt(v));\n    }\n    if (BitUtil.check(reportMaskExt, 4) && index < values.length) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5) && index < values.length) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6) && index < values.length) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(Position.PREFIX_ADC + 1, Integer.parseInt(v) * 0.001);\n    }\n    if (BitUtil.check(reportMaskExt, 8) && index < values.length) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9) && index < values.length) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10) && index < values.length) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11) && index < values.length) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12) && index < values.length) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13) && index < values.length) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14) && index < values.length) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"driver1Card\", v);\n    }\n    if (BitUtil.check(reportMaskExt, 16) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"driver2Card\", v);\n    }\n    if (BitUtil.check(reportMaskExt, 17) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"driver1Name\", v);\n    }\n    if (BitUtil.check(reportMaskExt, 18) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"driver2Name\", v);\n    }\n    if (BitUtil.check(reportMaskExt, 19) && index < values.length) {\n        String v = values[index++];\n        if (!v.isEmpty()) position.set(\"registration\", v);\n    }\n    if (BitUtil.check(reportMaskExt, 20) && index < values.length) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21) && index < values.length) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22) && index < values.length) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23) && index < values.length) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30) && index < values.length) {\n        while (index < values.length && values[index].isEmpty()) {\n            index += 1;\n        }\n        if (index < values.length) {\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n        }\n        if (index + 5 < values.length && !values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index += 6; // no location\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (index < values.length) {\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}