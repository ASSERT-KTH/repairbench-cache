{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n\n    // parse report mask safely\n    long reportMask = 0;\n    String reportMaskStr = values[index++];\n    if (!reportMaskStr.isEmpty()) {\n        reportMask = Long.parseLong(reportMaskStr, 16);\n    }\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_VIN, s);\n        }\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(s) > 0);\n        }\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_OBD_ODOMETER, s);\n        }\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(s)));\n        }\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(s.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"range\", Long.parseLong(s) * 100);\n        }\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(s)));\n        }\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(s, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(s, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(s, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(s, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(s));\n        }\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        String extMaskStr = values[index++];\n        if (!extMaskStr.isEmpty()) {\n            reportMaskExt = Long.parseLong(extMaskStr, 16);\n        }\n    }\n\n    if (BitUtil.check(reportMaskExt, 0)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(s));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index++; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index++; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index++; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(s) * 0.001);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index++; // pedal braking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index++; // engine braking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index++; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index++; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index++; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index++; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index++; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver1Card\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver2Card\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver1Name\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"driver2Name\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        String s = values[index++];\n        if (!s.isEmpty()) {\n            position.set(\"registration\", s);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index++; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index++; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index++; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index++; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        while (values[index].isEmpty()) {\n            index++;\n        }\n        position.setValid(Integer.parseInt(values[index++]) > 0);\n        if (!values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index += 6; // no location\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    // parse fix time safely\n    String fixTime = values[index];\n    if (!fixTime.isEmpty()) {\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(fixTime));\n        } else {\n            position.setDeviceTime(dateFormat.parse(fixTime));\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}