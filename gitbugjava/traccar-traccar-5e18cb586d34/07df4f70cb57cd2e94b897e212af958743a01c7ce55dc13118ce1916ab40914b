{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index++; // header\n    index++; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index++; // device name\n    index++; // report type\n    index++; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    // Process reportMask fields\n    if (BitUtil.check(reportMask, 0)) {\n        // VIN \u2013 even if empty, store it as is\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        String ignition = values[index++];\n        if (!ignition.isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(ignition) > 0);\n        }\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        // OBD odometer (text value)\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        String fuelUsed = values[index++];\n        if (!fuelUsed.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(fuelUsed));\n        }\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        String rpm = values[index++];\n        if (!rpm.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(rpm));\n        }\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        String obdSpeed = values[index++];\n        if (!obdSpeed.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(obdSpeed)));\n        }\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        String coolantTemp = values[index++];\n        if (!coolantTemp.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(coolantTemp));\n        }\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        String fuelConsumption = values[index++];\n        if (!fuelConsumption.isEmpty()) {\n            // Remove first character then parse as double\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(fuelConsumption.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        String fuelLevel = values[index++];\n        if (!fuelLevel.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(fuelLevel.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        String range = values[index++];\n        if (!range.isEmpty()) {\n            position.set(\"range\", Long.parseLong(range) * 100);\n        }\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        String throttle = values[index++];\n        if (!throttle.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(throttle));\n        }\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        String hours = values[index++];\n        if (!hours.isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(hours)));\n        }\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        String drivingTime = values[index++];\n        if (!drivingTime.isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(drivingTime));\n        }\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        String idleHours = values[index++];\n        if (!idleHours.isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(idleHours));\n        }\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        String idleFuelConsumption = values[index++];\n        if (!idleFuelConsumption.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(idleFuelConsumption));\n        }\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        String axleWeight = values[index++];\n        if (!axleWeight.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(axleWeight));\n        }\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        String tachographInfo = values[index++];\n        if (!tachographInfo.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(tachographInfo, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        String indicators = values[index++];\n        if (!indicators.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(indicators, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        String lights = values[index++];\n        if (!lights.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(lights, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        String doors = values[index++];\n        if (!doors.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(doors, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        String vehicleOverspeed = values[index++];\n        if (!vehicleOverspeed.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(vehicleOverspeed));\n        }\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        String engineOverspeed = values[index++];\n        if (!engineOverspeed.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(engineOverspeed));\n        }\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        String repExt = values[index++];\n        reportMaskExt = Long.parseLong(repExt, 16);\n    }\n\n    // Process reportMaskExt fields\n    if (BitUtil.check(reportMaskExt, 0)) {\n        String adBlueLevel = values[index++];\n        if (!adBlueLevel.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(adBlueLevel));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        String axleWeight1 = values[index++];\n        if (!axleWeight1.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(axleWeight1));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        String axleWeight3 = values[index++];\n        if (!axleWeight3.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(axleWeight3));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        String axleWeight4 = values[index++];\n        if (!axleWeight4.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(axleWeight4));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index++; // tachograph overspeed (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index++; // tachograph motion (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index++; // tachograph direction (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        String adc = values[index++];\n        if (!adc.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(adc) * 0.001);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index++; // pedal breaking factor (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index++; // engine breaking factor (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index++; // total accelerator kick-downs (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index++; // total effective engine speed (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index++; // total cruise control time (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index++; // total accelerator kick-down time (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index++; // total brake application (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        String driver1Card = values[index++];\n        if (!driver1Card.isEmpty()) {\n            position.set(\"driver1Card\", driver1Card);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        String driver2Card = values[index++];\n        if (!driver2Card.isEmpty()) {\n            position.set(\"driver2Card\", driver2Card);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        String driver1Name = values[index++];\n        if (!driver1Name.isEmpty()) {\n            position.set(\"driver1Name\", driver1Name);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        String driver2Name = values[index++];\n        if (!driver2Name.isEmpty()) {\n            position.set(\"driver2Name\", driver2Name);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        String registration = values[index++];\n        if (!registration.isEmpty()) {\n            position.set(\"registration\", registration);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index++; // expansion information (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index++; // rapid brakings (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index++; // rapid accelerations (skip)\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index++; // engine torque (skip)\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        // Skip any empty fields prior to the valid flag\n        while (index < values.length && values[index].isEmpty()) {\n            index++;\n        }\n        if (index < values.length) {\n            String validStr = values[index++];\n            if (!validStr.isEmpty()) {\n                position.setValid(Integer.parseInt(validStr) > 0);\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String speedStr = values[index++];\n                if (!speedStr.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedStr)));\n                }\n                String courseStr = values[index++];\n                if (!courseStr.isEmpty()) {\n                    position.setCourse(Integer.parseInt(courseStr));\n                }\n                String altitudeStr = values[index++];\n                if (!altitudeStr.isEmpty()) {\n                    position.setAltitude(Double.parseDouble(altitudeStr));\n                }\n                String longitudeStr = values[index++];\n                if (!longitudeStr.isEmpty()) {\n                    position.setLongitude(Double.parseDouble(longitudeStr));\n                }\n                String latitudeStr = values[index++];\n                if (!latitudeStr.isEmpty()) {\n                    position.setLatitude(Double.parseDouble(latitudeStr));\n                }\n                String timeStr = values[index++];\n                if (!timeStr.isEmpty()) {\n                    position.setTime(dateFormat.parse(timeStr));\n                }\n            } else {\n                index += 6; // no location data available\n                getLastLocation(position, null);\n            }\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // skip cell information\n        index++;    // skip reserved field\n    }\n\n    // Finally, set the fix time (or device time) if available.\n    if (index < values.length && !values[index].isEmpty()) {\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}