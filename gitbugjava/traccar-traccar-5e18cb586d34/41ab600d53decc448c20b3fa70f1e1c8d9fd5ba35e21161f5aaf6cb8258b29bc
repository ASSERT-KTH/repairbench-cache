{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\", -1); // Use -1 limit to keep trailing empty strings\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n        long reportMask = 0;\n        if (index < values.length && !values[index].isEmpty()) {\n            reportMask = Long.parseLong(values[index], 16);\n        }\n        index++;\n        long reportMaskExt = 0;\n\n        if (BitUtil.check(reportMask, 0)) {\n            position.set(Position.KEY_VIN, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_IGNITION, Integer.parseInt(value) > 0);\n            }\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 3)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_FUEL_USED, Double.parseDouble(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 5)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_RPM, Integer.parseInt(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 4)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n            }\n        }\n        if (BitUtil.check(reportMask, 6)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 7)) {\n            String value = values[index++];\n            // Check value length because substring(1) on a single char string results in \"\" which causes NumberFormatException\n            if (value.length() > 1) {\n                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value.substring(1)));\n            } else if (!value.isEmpty() && Character.isDigit(value.charAt(0))) {\n                // Handle cases like \"0\" if the prefix is missing\n                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 8)) {\n            String value = values[index++];\n            // Check value length because substring(1) on a single char string results in \"\" which causes NumberFormatException\n            if (value.length() > 1) {\n                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value.substring(1)));\n            } else if (!value.isEmpty() && Character.isDigit(value.charAt(0))) {\n                // Handle cases like \"0\" if the prefix is missing\n                 position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 9)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"range\", Long.parseLong(value) * 100);\n            }\n        }\n        if (BitUtil.check(reportMask, 10)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 11)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(value)));\n            }\n        }\n        if (BitUtil.check(reportMask, 12)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 13)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"idleHours\", Double.parseDouble(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 14)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"idleFuelConsumption\", Double.parseDouble(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 15)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 16)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"tachographInfo\", Integer.parseInt(value, 16));\n            }\n        }\n        if (BitUtil.check(reportMask, 17)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"indicators\", Integer.parseInt(value, 16));\n            }\n        }\n        if (BitUtil.check(reportMask, 18)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"lights\", Integer.parseInt(value, 16));\n            }\n        }\n        if (BitUtil.check(reportMask, 19)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"doors\", Integer.parseInt(value, 16));\n            }\n        }\n        if (BitUtil.check(reportMask, 20)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"vehicleOverspeed\", Double.parseDouble(value));\n            }\n        }\n        if (BitUtil.check(reportMask, 21)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"engineOverspeed\", Double.parseDouble(value));\n            }\n        }\n\n        // Skip bits 22-28 as they are not explicitly handled for parsing values\n        index += Long.bitCount(reportMask & 0x0FE00000L); // Skip fields for bits 22-28 if set\n\n        if (BitUtil.check(reportMask, 29)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                reportMaskExt = Long.parseLong(value, 16);\n            }\n        }\n        if (BitUtil.check(reportMaskExt, 0)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"adBlueLevel\", Integer.parseInt(value));\n            }\n        }\n        if (BitUtil.check(reportMaskExt, 1)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"axleWeight1\", Integer.parseInt(value));\n            }\n        }\n        // Note: Original code missed axleWeight2 - assuming it follows sequence if mask bit 2 was set\n        if (BitUtil.check(reportMaskExt, 2)) {\n             String value = values[index++]; // Assuming axleWeight2 field exists\n             if (!value.isEmpty()) {\n                 position.set(\"axleWeight2\", Integer.parseInt(value)); // Added axleWeight2\n             }\n        }\n        if (BitUtil.check(reportMaskExt, 3)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(\"axleWeight3\", Integer.parseInt(value)); // Renamed from axleWeight3 to axleWeight3 (was 4 before?) - Check protocol doc if available\n            }\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            String value = values[index++]; // axleWeight4 according to some GL200 docs, tachograph overspeed according to original code comment\n             if (!value.isEmpty()) {\n                 position.set(\"axleWeight4\", Integer.parseInt(value)); // Added axleWeight4\n             }\n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; // tachograph motion\n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; // tachograph direction\n        }\n        if (BitUtil.check(reportMaskExt, 7)) {\n            String value = values[index++];\n            if (!value.isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Integer.parseInt(value) * 0.001);\n            }\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; // pedal breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; // engine breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; // total accelerator kick-downs\n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; // total effective engine speed\n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; // total cruise control time\n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; // total accelerator kick-down time\n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; // total brake application\n        }\n        if (BitUtil.check(reportMaskExt, 15)) {\n            position.set(\"driver1Card\", values[index++]);\n        }\n        if (BitUtil.check(reportMaskExt, 16)) {\n            position.set(\"driver2Card\", values[index++]);\n        }\n        if (BitUtil.check(reportMaskExt, 17)) {\n            position.set(\"driver1Name\", values[index++]);\n        }\n        if (BitUtil.check(reportMaskExt, 18)) {\n            position.set(\"driver2Name\", values[index++]);\n        }\n        if (BitUtil.check(reportMaskExt, 19)) {\n            position.set(\"registration\", values[index++]);\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; // expansion information\n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; // rapid brakings\n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; // rapid accelerations\n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; // engine torque\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        if (BitUtil.check(reportMask, 30)) {\n            // Skip potential empty fields before validity\n            while (index < values.length && values[index].isEmpty()) {\n                index += 1;\n            }\n            if (index < values.length) {\n                String validityValue = values[index++];\n                if (!validityValue.isEmpty()) {\n                    position.setValid(Integer.parseInt(validityValue) > 0);\n                }\n            }\n            // Check if next field (speed) exists and is not empty\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                if (index < values.length) {\n                    String courseValue = values[index++];\n                    if (!courseValue.isEmpty()) {\n                        position.setCourse(Integer.parseInt(courseValue));\n                    }\n                }\n                if (index < values.length) {\n                    String altitudeValue = values[index++];\n                    if (!altitudeValue.isEmpty()) {\n                        position.setAltitude(Double.parseDouble(altitudeValue));\n                    }\n                }\n                if (index < values.length) {\n                    String longitudeValue = values[index++];\n                    if (!longitudeValue.isEmpty()) {\n                        position.setLongitude(Double.parseDouble(longitudeValue));\n                    }\n                }\n                 if (index < values.length) {\n                     String latitudeValue = values[index++];\n                     if (!latitudeValue.isEmpty()) {\n                         position.setLatitude(Double.parseDouble(latitudeValue));\n                     }\n                 }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setTime(dateFormat.parse(values[index++]));\n                } else {\n                    index++; // Consume the empty time field index\n                }\n            } else {\n                index += 6; // Skip speed, course, alt, lon, lat, time\n                getLastLocation(position, null);\n            }\n        } else {\n             // Attempt to get location from previous message only if this one doesn't have it\n             getLastLocation(position, null);\n             // Set time based on device time later if no GPS time available\n        }\n\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; // cell\n            index += 1; // reserved\n        }\n\n        // Use device time if position time is not set or if ignoring fix time\n        if (index < values.length && !values[index].isEmpty()) {\n            Date deviceTime = dateFormat.parse(values[index]);\n            if (position.getFixTime() == null || ignoreFixTime) {\n                position.setTime(deviceTime);\n            } else {\n                position.setDeviceTime(deviceTime);\n            }\n        } else if (position.getFixTime() == null) {\n             // If no GPS time (Bit 30 false or empty) and no device time, cannot set time.\n             // getLastLocation might have set a time, otherwise it remains null.\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}