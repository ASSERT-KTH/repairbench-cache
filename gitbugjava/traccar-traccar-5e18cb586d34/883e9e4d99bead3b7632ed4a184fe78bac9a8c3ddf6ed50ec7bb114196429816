{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {\n        position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));\n    }\n    if (BitUtil.check(reportMask,5) && !values[index++].isEmpty()) {\n        position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));\n    }\n    if (BitUtil.check(reportMask,4) && !values[index++].isEmpty()) {\n        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Double.parseDouble(values[index - 1])));\n    }\n    // FUEL_CONSUMPTION changed\n    if (BitUtil.check(reportMask,7) && !values[index++].isEmpty()) {\n        String s = values[index - 1].substring(1);\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(s));\n        }\n    }\n    // FUEL_LEVEL changed\n    if (BitUtil.check(reportMask,8) && !values[index++].isEmpty()) {\n        String s = values[index - 1].substring(1);\n        if (!s.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s));\n        }\n    }\n\n    if (BitUtil.check(reportMask,9) && !values[index++].isEmpty()) {\n        position.set(\"range\", Long.parseLong(values[index - 1]) * 100);\n    }\n    if (BitUtil.check(reportMask,10) && !values[index++].isEmpty()) {\n        position.set(\"throttle\", Integer.parseInt(values[index -1]));\n    }\n    if (BitUtil.check(reportMask,11) && !values[index++].isEmpty()) {\n        position.set(\"hours\", UnitsConverter.msFromHours(Double.parseDouble(values[index -1])));\n    }\n    if (BitUtil.check(reportMask,12)) {\n        index +=1; // expansion info\n    }\n    if (BitUtil.check(reportMask,29)) {\n        reportMaskExt = Long.parseLong(values[index++],16);\n    }\n    // ADC changed\n    if (BitUtil.check(reportMaskExt,7) && !values[index++].isEmpty()) {\n        String s = values[index -1].substring(1);\n        if (!s.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Double.parseDouble(s));\n        }\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask,30)) {\n        while (values[index].isEmpty()) {\n            index +=1;\n        }\n        position.setValid(Integer.parseInt(values[index++])>0);\n        if (!values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index +=6; // skip \u975e/ location\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask,31)) {\n        index +=4; // cell\n        index +=1; // reserved\n    }\n    \n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}