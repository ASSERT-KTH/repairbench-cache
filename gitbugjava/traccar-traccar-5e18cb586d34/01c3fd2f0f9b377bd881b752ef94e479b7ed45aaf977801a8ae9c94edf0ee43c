{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\", -1); // Important to preserve trailing empty values\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n\n    String reportMaskStr = index < values.length ? values[index] : \"\";\n    long reportMask = 0;\n    long reportMaskExt = 0;\n\n    if (!reportMaskStr.isEmpty()) {\n        try {\n            reportMask = Long.parseLong(reportMaskStr, 16);\n        } catch (NumberFormatException e) {\n            // ignore, leave as 0\n        }\n    }\n    index++;\n\n    if (BitUtil.check(reportMask, 0) && index < values.length) {\n        position.set(Position.KEY_VIN, values[index++]);\n    } else if (BitUtil.check(reportMask, 0)) index++;\n    if (BitUtil.check(reportMask, 1) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n    } else if (BitUtil.check(reportMask, 1)) index++;\n    if (BitUtil.check(reportMask, 2) && index < values.length) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    } else if (BitUtil.check(reportMask, 2)) index++;\n    if (BitUtil.check(reportMask, 3) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 3)) index++;\n    if (BitUtil.check(reportMask, 5) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_RPM, Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMask, 5)) index++;\n    if (BitUtil.check(reportMask, 4) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index++])));\n    } else if (BitUtil.check(reportMask, 4)) index++;\n    if (BitUtil.check(reportMask, 6) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMask, 6)) index++;\n    if (BitUtil.check(reportMask, 7) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index++].substring(1)));\n    } else if (BitUtil.check(reportMask, 7)) index++;\n    if (BitUtil.check(reportMask, 8) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index++].substring(1)));\n    } else if (BitUtil.check(reportMask, 8)) index++;\n    if (BitUtil.check(reportMask, 9) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"range\", Long.parseLong(values[index++]) * 100);\n    } else if (BitUtil.check(reportMask, 9)) index++;\n    if (BitUtil.check(reportMask, 10) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMask, 10)) index++;\n    if (BitUtil.check(reportMask, 11) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index++])));\n    } else if (BitUtil.check(reportMask, 11)) index++;\n    if (BitUtil.check(reportMask, 12) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 12)) index++;\n    if (BitUtil.check(reportMask, 13) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"idleHours\", Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 13)) index++;\n    if (BitUtil.check(reportMask, 14) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"idleFuelConsumption\", Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 14)) index++;\n    if (BitUtil.check(reportMask, 15) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMask, 15)) index++;\n    if (BitUtil.check(reportMask, 16) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"tachographInfo\", Integer.parseInt(values[index++], 16));\n    } else if (BitUtil.check(reportMask, 16)) index++;\n    if (BitUtil.check(reportMask, 17) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"indicators\", Integer.parseInt(values[index++], 16));\n    } else if (BitUtil.check(reportMask, 17)) index++;\n    if (BitUtil.check(reportMask, 18) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"lights\", Integer.parseInt(values[index++], 16));\n    } else if (BitUtil.check(reportMask, 18)) index++;\n    if (BitUtil.check(reportMask, 19) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"doors\", Integer.parseInt(values[index++], 16));\n    } else if (BitUtil.check(reportMask, 19)) index++;\n    if (BitUtil.check(reportMask, 20) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"vehicleOverspeed\", Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 20)) index++;\n    if (BitUtil.check(reportMask, 21) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"engineOverspeed\", Double.parseDouble(values[index++]));\n    } else if (BitUtil.check(reportMask, 21)) index++;\n    if (BitUtil.check(reportMask, 29) && index < values.length && !values[index].isEmpty()) {\n        try {\n            reportMaskExt = Long.parseLong(values[index++], 16);\n        } catch (NumberFormatException e) {\n            reportMaskExt = 0;\n            index++;\n        }\n    } else if (BitUtil.check(reportMask, 29)) index++;\n\n    if (BitUtil.check(reportMaskExt, 0) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"adBlueLevel\", Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMaskExt, 0)) index++;\n    if (BitUtil.check(reportMaskExt, 1) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"axleWeight1\", Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMaskExt, 1)) index++;\n    if (BitUtil.check(reportMaskExt, 2) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"axleWeight3\", Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMaskExt, 2)) index++;\n    if (BitUtil.check(reportMaskExt, 3) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"axleWeight4\", Integer.parseInt(values[index++]));\n    } else if (BitUtil.check(reportMaskExt, 3)) index++;\n    if (BitUtil.check(reportMaskExt, 4)) { index++; }\n    if (BitUtil.check(reportMaskExt, 5)) { index++; }\n    if (BitUtil.check(reportMaskExt, 6)) { index++; }\n    if (BitUtil.check(reportMaskExt, 7) && index < values.length && !values[index].isEmpty()) {\n        position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index++]) * 0.001);\n    } else if (BitUtil.check(reportMaskExt, 7)) index++;\n    if (BitUtil.check(reportMaskExt, 8)) { index++; }\n    if (BitUtil.check(reportMaskExt, 9)) { index++; }\n    if (BitUtil.check(reportMaskExt, 10)) { index++; }\n    if (BitUtil.check(reportMaskExt, 11)) { index++; }\n    if (BitUtil.check(reportMaskExt, 12)) { index++; }\n    if (BitUtil.check(reportMaskExt, 13)) { index++; }\n    if (BitUtil.check(reportMaskExt, 14)) { index++; }\n    if (BitUtil.check(reportMaskExt, 15) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"driver1Card\", values[index++]);\n    } else if (BitUtil.check(reportMaskExt, 15)) index++;\n    if (BitUtil.check(reportMaskExt, 16) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"driver2Card\", values[index++]);\n    } else if (BitUtil.check(reportMaskExt, 16)) index++;\n    if (BitUtil.check(reportMaskExt, 17) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"driver1Name\", values[index++]);\n    } else if (BitUtil.check(reportMaskExt, 17)) index++;\n    if (BitUtil.check(reportMaskExt, 18) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"driver2Name\", values[index++]);\n    } else if (BitUtil.check(reportMaskExt, 18)) index++;\n    if (BitUtil.check(reportMaskExt, 19) && index < values.length && !values[index].isEmpty()) {\n        position.set(\"registration\", values[index++]);\n    } else if (BitUtil.check(reportMaskExt, 19)) index++;\n    if (BitUtil.check(reportMaskExt, 20)) { index++; }\n    if (BitUtil.check(reportMaskExt, 21)) { index++; }\n    if (BitUtil.check(reportMaskExt, 22)) { index++; }\n    if (BitUtil.check(reportMaskExt, 23)) { index++; }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30) && index < values.length) {\n        // skip empty fields till valid value\n        while (index < values.length && values[index].isEmpty()) {\n            index++;\n        }\n        if (index < values.length) {\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n        }\n        // now possibly have fix or not\n        if (index + 5 < values.length && !values[index].isEmpty()) {\n            try {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                position.setCourse(Integer.parseInt(values[index++]));\n                position.setAltitude(Double.parseDouble(values[index++]));\n                position.setLongitude(Double.parseDouble(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index++]));\n                position.setTime(dateFormat.parse(values[index++]));\n            } catch (Exception e) {\n                // ignore bad numbers, move index anyway\n                for (int i = 0; i < 6 && index < values.length; i++) index++;\n                getLastLocation(position, null);\n            }\n        } else {\n            // no location fields, skip 6 fields and set last location\n            index += 6;\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    // Finally, time\n    if (index < values.length) {\n        if (ignoreFixTime) {\n            try {\n                position.setTime(dateFormat.parse(values[index]));\n            } catch (Exception e) {\n                // ignore parse error\n            }\n        } else {\n            try {\n                position.setDeviceTime(dateFormat.parse(values[index]));\n            } catch (Exception e) {\n                // ignore parse error\n            }\n        }\n        //index++; // not strictly needed\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}