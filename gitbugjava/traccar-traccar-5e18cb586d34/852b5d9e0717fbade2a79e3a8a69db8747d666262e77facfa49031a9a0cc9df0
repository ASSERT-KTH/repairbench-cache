{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    // Main CAN fields (bits 0\u201321)\n    if (BitUtil.check(reportMask, 0)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_VIN, v);\n        }\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(v) > 0);\n        }\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_OBD_ODOMETER, v);\n        }\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED,\n                UnitsConverter.knotsFromKph(Integer.parseInt(v)));\n        }\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            // strip leading letter, e.g. \"P\"\n            position.set(Position.KEY_FUEL_CONSUMPTION,\n                Double.parseDouble(v.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL,\n                Double.parseDouble(v.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"range\", Long.parseLong(v) * 100);\n        }\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_HOURS,\n                UnitsConverter.msFromHours(Double.parseDouble(v)));\n        }\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(v, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(v, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(v, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(v, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(v));\n        }\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(v));\n        }\n    }\n\n    // Extended CAN mask (bit 29)\n    if (BitUtil.check(reportMask, 29)) {\n        String ext = values[index++];\n        if (!ext.isEmpty()) {\n            reportMaskExt = Long.parseLong(ext, 16);\n        }\n    }\n\n    // Extended CAN fields\n    if (BitUtil.check(reportMaskExt, 0)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(v));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(v) * 0.001);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index += 1; // pedal braking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index += 1; // engine braking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index += 1; // total accelerator kick\u2011downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index += 1; // total accelerator kick\u2011down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver1Card\", v);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver2Card\", v);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver1Name\", v);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"driver2Name\", v);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        String v = values[index++];\n        if (!v.isEmpty()) {\n            position.set(\"registration\", v);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index += 1; // engine torque\n    }\n\n    // Location (bit 30)\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    if (BitUtil.check(reportMask, 30)) {\n        // skip any stray empty segments before the valid flag\n        while (values[index].isEmpty()) {\n            index++;\n        }\n        position.setValid(Integer.parseInt(values[index++]) > 0);\n        if (!values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index += 6; // no location data, skip\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    // Cell data (bit 31)\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell fields\n        index += 1; // reserved\n    }\n\n    // Fix time\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}