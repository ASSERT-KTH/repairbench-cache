{
    "generation": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        int length = buf.readUnsignedByte();\n        // Assuming length = type(1) + data(dataLength) + serial(2) + checksum(2) = dataLength + 5\n        // Thus, dataLength = length - 5 represents the length of the data field between type and serial.\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n\n        // Basic validation: dataLength should not be negative and should fit in the buffer\n        // Readable bytes after L+T = TotalLength - 2\n        // We need at least dataLength + SN(2) + CS(2) = dataLength + 4 bytes remaining after reading L+T\n        // Note: Stop bits (2 bytes) are handled by the frame decoder.\n        if (dataLength < 0 || buf.readableBytes() < dataLength + 4) {\n            return null; // Invalid length or not enough bytes for payload + footer (SN+CS)\n        }\n\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                // If session is null, we usually can't decode messages requiring device info (like timezone)\n                // Allow some types (like heartbeat) to proceed without session initially.\n                // List types that might not strictly require session immediately\n                boolean canProceedWithoutSession = (type == MSG_HEARTBEAT || type == MSG_X1_GPS || type == MSG_X1_PHOTO_INFO\n                      || type == MSG_ADDRESS_REQUEST || type == MSG_TIME_REQUEST);\n                if (!canProceedWithoutSession) {\n                    // For most other types, session is needed for timezone, getLastLocation etc.\n                    return null;\n                }\n            }\n            // If deviceSession is not null OR it's a type that might work without it initially\n            if (deviceSession != null) {\n                position.setDeviceId(deviceSession.getDeviceId());\n                // Initialize timezone if missing\n                if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                    deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n                }\n            }\n        }\n\n        // Decode based on type\n        // NOTE: Ensure each block reads *at most* dataLength bytes from the data section,\n        // or returns early/handles buffer limits gracefully.\n\n        if (type == MSG_LOGIN) {\n            // Login: IMEI(8) + Type(2) [+ Extension(2)]\n            if (dataLength < 10 || buf.readableBytes() < 10) return null; // Need IMEI + Type\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); // type field in login message\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            // Optional Timezone extension\n            if (dataLength > 10 && buf.readableBytes() >= 2) { // Check if extension exists and is readable\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone == null) { // Initialize timezone if null\n                         timeZone = TimeZone.getTimeZone(\"UTC\"); // Default or lookup?\n                         timeZone.setRawOffset(offset * 1000);\n                         deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    } else if (timeZone.getRawOffset() == 0) { // Update existing timezone if offset is 0\n                        timeZone.setRawOffset(offset * 1000);\n                        // deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone); // No need to set again if reference is updated\n                    }\n                }\n            }\n\n            if (deviceSession != null && buf.writerIndex() >= 6) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null; // Login doesn't usually return a position\n\n        } else if (type == MSG_HEARTBEAT) {\n            // Heartbeat: Status(1) [+ Voltage(2)] [+ GSM(1)]\n            // dataLength should be 1, 3 or 4\n            if (dataLength < 1 || buf.readableBytes() < 1) return null;\n\n            // Need deviceSession for getLastLocation, check again if it was null initially\n            if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) return null;\n            getLastLocation(position, null);\n\n            int status = buf.readUnsignedByte(); // Read Status (1 byte)\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n            if (dataLength >= 3 && buf.readableBytes() >= 2) { // Voltage (2 bytes)\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (dataLength >= 4 && buf.readableBytes() >= 1) { // GSM (1 byte)\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            if (buf.writerIndex() >= 6) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return position; // Heartbeat might return position with status\n\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            // Send custom response\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length()); // Content length for command protocol?\n            content.writeInt(0); // Server flag\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content); // Use helper\n            return null;\n\n        } else if (type == MSG_TIME_REQUEST) {\n            // Send time response\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer(6);\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n\n            short serial = (buf.writerIndex() >= 6) ? buf.getShort(buf.writerIndex() - 6) : 0;\n            sendResponse(channel, false, type, serial, content); // Use helper\n            return null;\n\n        } else if (type == MSG_X1_GPS) {\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; } // Need timezone\n             // Data: DataAlarm(4)+GPS(18)+TermInfo(2)+Odom(4)+Net(9)+Driver(4)+Batt(2)+Power(2)+PortInfo(4)+Input(1)+Output(1)+ADC(var)\n             int minLength = 4+18+2+4+9+4+2+2+4+1+1; // = 51\n             if (dataLength < minLength || buf.readableBytes() < minLength) return null;\n\n             buf.readUnsignedInt(); // data and alarm (4)\n             decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE)); // (18)\n             buf.readUnsignedShort(); // terminal info (2)\n             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt()); // (4)\n             position.setNetwork(new Network(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt()))); // (9)\n             long driverId = buf.readUnsignedInt(); if (driverId > 0) position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId)); // (4)\n             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // (2)\n             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); // (2)\n             long portInfo = buf.readUnsignedInt(); // (4)\n             position.set(Position.KEY_INPUT, buf.readUnsignedByte()); // (1)\n             position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); // (1)\n\n             int adcCount = BitUtil.between(portInfo, 20, 24);\n             if (buf.readableBytes() >= adcCount * 2) {\n                 for (int i = 1; i <= adcCount; i++) {\n                     position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01); // (2 * adcCount)\n                 }\n             }\n             return position; // Returns early\n\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            // Skip time(6)+fix(1)+lat(4)+lon(4)+camId(1)+source(1)+format(1) = 18. Read photoLen(4)+picId(4) = 8. Min = 26.\n            if (dataLength < 26 || buf.readableBytes() < 26) return null;\n            buf.skipBytes(18);\n            int photoDataLength = buf.readInt(); // (4)\n            int pictureId = buf.readInt(); // (4)\n\n            if (photoDataLength < 0 || photoDataLength > 10 * 1024 * 1024) return null; // Sanity check length\n\n            ByteBuf photo = Unpooled.buffer(photoDataLength);\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null; // Returns early\n\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; } // Need timezone\n             if (dataLength < 6 || buf.readableBytes() < 6) return null; // Need time\n\n             ByteBuf time = buf.readSlice(6); // reads 6\n             DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                     .setYear(BcdUtil.readInteger(time, 2)).setMonth(BcdUtil.readInteger(time, 2))\n                     .setDay(BcdUtil.readInteger(time, 2)).setHour(BcdUtil.readInteger(time, 2))\n                     .setMinute(BcdUtil.readInteger(time, 2)).setSecond(BcdUtil.readInteger(time, 2));\n             getLastLocation(position, dateBuilder.getDate());\n\n             Network network = new Network();\n             int wifiCount = 0;\n             if (buf.readableBytes() >= 1) { // Check for wifiCount byte\n                 if (type == MSG_WIFI_4) {\n                     wifiCount = buf.readUnsignedByte(); // reads 1\n                 } else {\n                     wifiCount = buf.readUnsignedByte(); // reads 1 (FIXED from getUnsignedByte(2))\n                 }\n             }\n\n             for (int i = 0; i < wifiCount; i++) {\n                 int bytesNeeded = (type == MSG_WIFI_4) ? 8 : 7; // skip(2)+mac(6) or mac(6)+rssi(1)\n                 if (buf.readableBytes() < bytesNeeded) break; // Check buffer space\n                 if (type == MSG_WIFI_4) buf.skipBytes(2);\n                 WifiAccessPoint wifi = new WifiAccessPoint();\n                 wifi.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                         buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                         buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())); // reads 6\n                 if (type != MSG_WIFI_4) wifi.setSignalStrength((int) buf.readUnsignedByte()); // reads 1\n                 network.addWifiAccessPoint(wifi);\n             }\n\n             if (type != MSG_WIFI_4) {\n                 if (buf.readableBytes() >= 1 + 2 + 1) { // cellCount(1)+mcc(2)+mnc(1) = 4\n                     int cellCount = buf.readUnsignedByte(); // reads 1\n                     int mcc = buf.readUnsignedShort(); // reads 2\n                     int mnc = buf.readUnsignedByte(); // reads 1\n                     int bytesPerCell = 5; // lac(2)+cid(2)+rssi(1)\n                     for (int i = 0; i < cellCount; i++) {\n                         if (buf.readableBytes() < bytesPerCell) break; // Check buffer space\n                         network.addCellTower(CellTower.from(\n                                 mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte())); // reads 5\n                     }\n                 }\n                 // Removed partial/incorrect response sending from here\n             }\n             position.setNetwork(network);\n             // Falls through to common checks\n\n        } else if (type == MSG_INFO) { // 0x94\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             if (dataLength < 2 || buf.readableBytes() < 2) return null; // Need power(2)\n             getLastLocation(position, null);\n             position.set(Position.KEY_POWER, buf.readShort() * 0.01); // reads 2\n             // Falls through\n\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) { // 0x2E + variant\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             // GPS(18)+LBS(9)+Ign(1)+Power(2)+Batt(2) = 32\n             if (dataLength < 32 || buf.readableBytes() < 32) return null;\n             decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE)); // 18\n             decodeLbs(position, buf, type, false); // 9\n             position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0); // 1\n             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); // 2\n             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // 2\n             return position; // Returns early\n\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3 // 0x28, 0x18, 0x2E\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2 // 0x1E, 0x2D, 0x1A\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) { // 0x69, 0xA2\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             // Time(6) [+ TA(1)] + MCC(2) + MNC(1/2) + [Cells] + [TA(1)] + [Wifi]\n             if (dataLength < 6 + 2 + 1 || buf.readableBytes() < 6 + 2 + 1) return null; // Min Time+MCC+MNC\n\n             DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                     .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()); // 6\n             getLastLocation(position, dateBuilder.getDate());\n\n             if (variant == Variant.WANWAY_S20) if (buf.readableBytes() >= 1) buf.readUnsignedByte(); // TA (1)\n\n             if (buf.readableBytes() < 2) return position; // Need MCC\n             int mcc = buf.readUnsignedShort(); // 2\n             int mnc;\n             // Check for 2-byte MNC based on MCC high bit\n             if (BitUtil.check(mcc, 15)) { if (buf.readableBytes() < 2) return position; mnc = buf.readUnsignedShort(); } // 2\n             else { if (buf.readableBytes() < 1) return position; mnc = buf.readUnsignedByte(); } // 1\n             mcc = BitUtil.to(mcc, 15); // Clear high bit used as flag\n\n             Network network = new Network();\n             boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5; // 0x1A, 0x69, 0xA2\n             int cellCount = 7; // Default cell count for many LBS types\n             if (variant == Variant.WANWAY_S20) cellCount = buf.readableBytes() >= 1 ? buf.readUnsignedByte() : 0; // 1 byte count for Wanway\n             else if (type == MSG_WIFI_5) cellCount = 6; // Fixed count for Wifi5\n\n             int bytesPerCell = longFormat ? 13 : 6; // lac(4/2)+cid(8/3)+rssi(1)\n             for (int i = 0; i < cellCount; i++) {\n                 if (buf.readableBytes() < bytesPerCell) break; // Check buffer space\n                 int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                 int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                 int rssi = -buf.readUnsignedByte();\n                 if (lac > 0 && cid > 0) network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi)); // Filter invalid cells often used as padding\n             }\n\n             if (variant != Variant.WANWAY_S20) if (buf.readableBytes() >= 1) buf.readUnsignedByte(); // TA (1)\n\n             // Check which types include Wifi part\n             boolean hasWifi = type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3 && type != MSG_LBS_2;\n             if (hasWifi && buf.readableBytes() >= 1) { // Check for wifi count byte\n                 int wifiCount = buf.readUnsignedByte(); // 1\n                 int bytesPerWifi = 7; // mac(6)+rssi(1)\n                 for (int i = 0; i < wifiCount; i++) {\n                     if (buf.readableBytes() < bytesPerWifi) break; // Check buffer space\n                     String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\"); // 6\n                     network.addWifiAccessPoint(WifiAccessPoint.from(mac.substring(0, mac.length() - 1), buf.readUnsignedByte())); // 1\n                 }\n             }\n             position.setNetwork(network);\n             // Falls through\n\n        } else if (type == MSG_STRING) { // 0x21\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             if (dataLength < 1 || buf.readableBytes() < 1) return null; // Need commandLength\n             getLastLocation(position, null);\n\n             int commandLength = buf.readUnsignedByte(); // 1\n             // Check commandLength validity against remaining data bytes (dataLength) and buffer readability\n             if (commandLength > 0 && commandLength <= dataLength && buf.readableBytes() >= commandLength) {\n                 // Payload: ServerFlag(4) + String(commandLength - 4)\n                 if (commandLength >= 4) {\n                     buf.readUnsignedInt(); // server flag (4)\n                     int stringLen = commandLength - 4;\n                     if (stringLen >= 0) { // Ensure non-negative length\n                         String data = buf.readSlice(stringLen).toString(StandardCharsets.US_ASCII);\n                         if (data.startsWith(\"<ICCID:\") && data.length() >= 27) position.set(Position.KEY_ICCID, data.substring(7, 27));\n                         else position.set(Position.KEY_RESULT, data);\n                     }\n                 } // else: commandLength < 4, skip? Already checked readableBytes >= commandLength\n             }\n             // Falls through\n\n        } else if (type == MSG_BMS) { // 0xF3\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             // Serial(8)+Time(4)+Data(93) = 105\n             if (dataLength < 105 || buf.readableBytes() < 105) return null;\n             buf.skipBytes(8);\n             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000)); // 4\n             // Read 93 bytes of BMS data...\n             position.set(\"relativeCapacity\", buf.readUnsignedByte());\n             position.set(\"remainingCapacity\", buf.readUnsignedShort());\n             position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n             position.set(\"fullCapacity\", buf.readUnsignedShort());\n             position.set(\"batteryHealth\", buf.readUnsignedByte());\n             position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n             position.set(\"current\", buf.readUnsignedShort());\n             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n             position.set(\"cycleIndex\", buf.readUnsignedShort());\n             for (int i = 1; i <= 14; i++) { position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001); }\n             position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n             position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n             position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n             position.set(\"batteryVersion\", buf.readUnsignedShort());\n             position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n             position.set(\"batteryStatus\", buf.readUnsignedInt());\n             position.set(\"controllerStatus\", buf.readUnsignedInt());\n             position.set(\"controllerFault\", buf.readUnsignedInt());\n             // End of BMS data reads (93 bytes)\n\n             if (buf.writerIndex() >= 6) sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n             return position; // Returns early\n\n        } else if (type == MSG_STATUS && buf.readableBytes() >= 16 + 4) { // Fixed length status message? check vs remaining bytes + footer\n            // Original check was `readableBytes == 22` after L+T, implying 16 payload + 6 footer?\n            // Let's check if we have at least 16 payload + 4 footer (SN+CS) remaining.\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             getLastLocation(position, null);\n             // Read 16 bytes of status data...\n             buf.readUnsignedByte(); // information content (1)\n             buf.readUnsignedShort(); // satellites (2)\n             buf.readUnsignedByte(); // alarm (1)\n             buf.readUnsignedByte(); // language (1)\n             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // battery level (1)\n             buf.readUnsignedByte(); // working mode (1)\n             buf.readUnsignedShort(); // working voltage (2)\n             buf.readUnsignedByte(); // reserved (1)\n             buf.readUnsignedShort(); // working times (2)\n             buf.readUnsignedShort(); // working time (2)\n             int value = buf.readUnsignedShort(); // temperature (2)\n             double temperature = BitUtil.to(value, 15) * 0.1;\n             position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n             // End of 16 byte read\n             return position; // Returns early\n\n        } else if (isSupported(type)) { // Generic GPS/LBS/Status handler\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) return null; // Skip multi-LBS\n\n             // Decode components based on flags, checking readable bytes before each major read\n             if (hasGps(type)) { if (buf.readableBytes() < 18) return null; decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE)); }\n             else { getLastLocation(position, null); }\n\n             if (hasLbs(type)) { if (buf.readableBytes() < 9) return null; decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM); }\n\n             if (hasStatus(type)) {\n                 if (buf.readableBytes() < 3) return null; decodeStatus(position, buf);\n                 if (variant == Variant.OBD6) { if (buf.readableBytes() < 8) return null; /* read 8 bytes status extension ... */ }\n                 else { if (buf.readableBytes() < 3) return null; /* read 3 bytes status extension ... */ }\n             }\n\n             // Type specific extensions - ensure readable checks within variant blocks\n             if (type == MSG_GPS_LBS_1) { /* ... variant logic with readable checks ... */ }\n             if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4) && buf.readableBytes() >= 3) { /* read 3 bytes Ign/Evt/Arch ... */ }\n             if (type == MSG_GPS_LBS_3 && buf.readableBytes() >= 3) { /* read module + len + skip/read data ... */ }\n             // Handle trailing Odometer - requires specific conditions\n             // Example check: if (type == 0x26 && buf.readableBytes() >= 4) { position.set(Position.KEY_ODOMETER, buf.readUnsignedInt()); }\n             // Falls through\n\n        } else if (type == MSG_ALARM) { // 0x95\n             if (deviceSession == null) deviceSession = getDeviceSession(channel, remoteAddress);\n             if (deviceSession == null) { return null; }\n             boolean extended = dataLength > 7;\n             int payloadSize = extended ? 18 + 1 : 6 + 1; // GPS/Date + AlarmType\n             if (dataLength < payloadSize || buf.readableBytes() < payloadSize) return null;\n\n             if (extended) decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE)); // 18\n             else { DateBuilder db = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                     .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                    getLastLocation(position, db.getDate()); } // 6\n             short alarmType = buf.readUnsignedByte(); // 1\n             // set alarm key based on alarmType...\n             switch (alarmType) {\n                 case 0x01: position.set(Position.KEY_ALARM, extended ? Position.ALARM_SOS : Position.ALARM_GENERAL); break;\n                 case 0x80: position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION); break;\n                 case 0x87: position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED); break;\n                 case 0x90: position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); break;\n                 case 0x91: position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); break;\n                 case 0x92: position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); break;\n                 case 0x93: position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); break;\n                 default:   position.set(Position.KEY_ALARM, Position.ALARM_GENERAL); break;\n             }\n             // Falls through\n\n        } else { // Unsupported type\n            // Attempt to skip the rest of the data field to avoid framing errors\n            // Use dataLength, but capped by actual readable bytes before footer\n            int bytesToSkip = Math.min(dataLength, Math.max(0, buf.readableBytes() - 4));\n            if (bytesToSkip > 0) {\n                buf.skipBytes(bytesToSkip);\n            }\n            // Send response only for non-command types if serial is available\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2 && buf.writerIndex() >= 6) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null; // Unsupported\n        }\n\n        // Common post-processing (language, geofence, response) for messages that fall through\n\n        if (hasLanguage(type)) {\n            if (buf.readableBytes() >= 2) { // FIX: Check readable bytes before reading language\n                buf.readUnsignedShort(); // Language field\n            } else {\n                // Not enough bytes for language field, likely corrupt packet or incorrect dataLength calculation.\n                // Log a warning? Return null? Silently ignore for now to prevent crash.\n            }\n        }\n\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            if (buf.readableBytes() >= 1) { // Check readable bytes before reading geofence\n                position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n            }\n        }\n\n        // Determine if a response (ACK) should be sent for this message type\n        boolean needsAck = (type >= 0x10 && type <= 0x2F) || // Location packets often need ACK\n                           type == MSG_ALARM || type == MSG_STATUS; // Alarms/Status might need ACK\n\n        if (needsAck && buf.writerIndex() >= 6) {\n             // Serial number is usually the 2 bytes before the checksum (4 bytes from end, before stop bits)\n             sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n\n        // It's generally safer *not* to skip remaining bytes here,\n        // as incorrect dataLength could cause us to skip the actual footer.\n        // The framing decoder should handle synchronization based on start/stop bits.\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}