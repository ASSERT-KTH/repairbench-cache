{
    "generation": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n\n        if (type == MSG_LOGIN) {\n\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); // type\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            if (dataLength > 10) {\n                if (buf.readableBytes() >= 2) {  // Added check for readable bytes\n                    int extensionBits = buf.readUnsignedShort();\n                    int hours = (extensionBits >> 4) / 100;\n                    int minutes = (extensionBits >> 4) % 100;\n                    int offset = (hours * 60 + minutes) * 60;\n                    if ((extensionBits & 0x8) != 0) {\n                        offset = -offset;\n                    }\n                    if (deviceSession != null) {\n                        TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                        if (timeZone.getRawOffset() == 0) {\n                            timeZone.setRawOffset(offset * 1000);\n                            deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                        }\n                    }\n                }\n            }\n\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n\n            return null;\n\n        } else if (type == MSG_HEARTBEAT) {\n\n            getLastLocation(position, null);\n\n            if (buf.readableBytes() >= 1) {  // Added check for readable bytes\n                int status = buf.readUnsignedByte();\n                position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n                position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n                position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n                if (buf.readableBytes() >= 2 + 6) {\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                }\n                if (buf.readableBytes() >= 1 + 6) {\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                }\n            }\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } else if (type == MSG_ADDRESS_REQUEST) {\n\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n\n            return null;\n\n        } else if (type == MSG_TIME_REQUEST) {\n\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n\n            return null;\n\n        } else if (type == MSG_X1_GPS) {\n\n            if (buf.readableBytes() >= 4) {  // Added check for readable bytes\n                buf.readUnsignedInt(); // data and alarm\n\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n                if (buf.readableBytes() >= 2) {  // Added check for readable bytes\n                    buf.readUnsignedShort(); // terminal info\n\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n                    if (buf.readableBytes() >= 2 + 1 + 4 + 2 + 2 + 4 + 1 + 1) {\n                        // Only proceed if we have enough bytes for all the following reads\n                        position.setNetwork(new Network(CellTower.from(\n                                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n                        long driverId = buf.readUnsignedInt();\n                        if (driverId > 0) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n                        }\n\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n                        long portInfo = buf.readUnsignedInt();\n\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n                        for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                            if (buf.readableBytes() >= 2) {  // Added check for readable bytes\n                                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n                            }\n                        }\n                    }\n                    return position;\n                }\n            }\n        } else if (type == MSG_X1_PHOTO_INFO) {\n\n            if (buf.readableBytes() >= 6 + 1 + 4 + 4 + 1 + 1 + 1 + 4) {\n                // Only proceed if we have enough bytes\n                buf.skipBytes(6); // time\n                buf.readUnsignedByte(); // fix status\n                buf.readUnsignedInt(); // latitude\n                buf.readUnsignedInt(); // longitude\n                buf.readUnsignedByte(); // camera id\n                buf.readUnsignedByte(); // photo source\n                buf.readUnsignedByte(); // picture format\n\n                if (buf.readableBytes() >= 4) {\n                    ByteBuf photo = Unpooled.buffer(buf.readInt());\n                    int pictureId = buf.readInt();\n                    photos.put(pictureId, photo);  // This was missing in the original code\n                    sendPhotoRequest(channel, pictureId);\n                }\n            }\n            return null;\n\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n\n            if (buf.readableBytes() >= 6) {  // Check for time bytes\n                ByteBuf time = buf.readSlice(6);\n                DateBuilder dateBuilder = new DateBuilder()\n                        .setYear(BcdUtil.readInteger(time, 2))\n                        .setMonth(BcdUtil.readInteger(time, 2))\n                        .setDay(BcdUtil.readInteger(time, 2))\n                        .setHour(BcdUtil.readInteger(time, 2))\n                        .setMinute(BcdUtil.readInteger(time, 2))\n                        .setSecond(BcdUtil.readInteger(time, 2));\n                getLastLocation(position, dateBuilder.getDate());\n\n                Network network = new Network();\n\n                int wifiCount;\n                if (type == MSG_WIFI_4) {\n                    if (buf.readableBytes() >= 1) {\n                        wifiCount = buf.readUnsignedByte();\n                    } else {\n                        return position;\n                    }\n                } else {\n                    if (buf.readableBytes() >= 1) {  // Check for byte at position 2 (but we're reading sequentially)\n                        wifiCount = buf.getUnsignedByte(buf.readerIndex());\n                        buf.readByte();  // Advance reader index\n                    } else {\n                        return position;\n                    }\n                }\n\n                for (int i = 0; i < wifiCount && buf.readableBytes() > 0; i++) {\n                    if (type == MSG_WIFI_4) {\n                        if (buf.readableBytes() >= 2) {\n                            buf.skipBytes(2);\n                        } else {\n                            break;\n                        }\n                    }\n                    if (buf.readableBytes() >= 6 + (type != MSG_WIFI_4 ? 1 : 0)) {\n                        // Check for enough bytes to read MAC address (6 bytes) and optionally signal strength (1 byte)\n                        WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                        wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                                buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                                buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                        if (type != MSG_WIFI_4) {\n                            if (buf.readableBytes() >= 1) {\n                                wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                            }\n                        }\n                        network.addWifiAccessPoint(wifiAccessPoint);\n                    }\n                }\n\n                if (type != MSG_WIFI_4) {\n                    if (buf.readableBytes() >= 2 + 1) {  // mcc (2) + mnc (1)\n                        int cellCount, mcc, mnc;\n                        mcc = buf.readUnsignedShort();\n                        mnc = buf.readUnsignedByte();\n\n                        if (buf.readableBytes() >= 1) {\n                            cellCount = buf.readUnsignedByte();\n                        } else {\n                            cellCount = 0;\n                        }\n\n                        for (int i = 0; i < cellCount && buf.readableBytes() >= 2 + 2 + 1; i++) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                        }\n\n                        if (channel != null) {\n                            ByteBuf response = Unpooled.buffer();\n                            response.writeShort(0x7878);\n                            response.writeByte(0);\n                            response.writeByte(type);\n                            response.writeBytes(time.resetReaderIndex());\n                            response.writeByte('\\r');\n                            response.writeByte('\\n');\n                            channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                        }\n                    }\n                }\n\n                position.setNetwork(network);\n\n                return position;\n            }\n        } else if (type == MSG_INFO) {\n\n            getLastLocation(position, null);\n\n            if (buf.readableBytes() >= 2) {  // Added check for readable bytes\n                position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            }\n\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            decodeLbs(position, buf, type, false);\n\n            if (buf.readableBytes() >= 1 + 2 + 2) {  // Added check for readable bytes\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n\n            // Check if we have enough bytes for the time fields (6 bytes)\n            if (buf.readableBytes() >= 6) {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n                getLastLocation(position, dateBuilder.getDate());\n\n                if (variant == Variant.WANWAY_S20 && buf.readableBytes() >= 1) {\n                    buf.readUnsignedByte(); // ta\n                }\n\n                // Check if we have enough bytes for mcc (2 bytes)\n                if (buf.readableBytes() >= 2) {\n                    int mcc = buf.readUnsignedShort();\n                    int mnc;\n                    if (BitUtil.check(mcc, 15)) {\n                        if (buf.readableBytes() >= 2) {\n                            mnc = buf.readUnsignedShort();\n                        } else {\n                            return position;\n                        }\n                    } else {\n                        if (buf.readableBytes() >= 1) {\n                            mnc = buf.readUnsignedByte();\n                        } else {\n                            return position;\n                        }\n                    }\n\n                    Network network = new Network();\n\n                    int cellCount;\n                    if (variant == Variant.WANWAY_S20) {\n                        if (buf.readableBytes() >= 1) {\n                            cellCount = buf.readUnsignedByte();\n                        } else {\n                            cellCount = 0;\n                        }\n                    } else {\n                        cellCount = type == MSG_WIFI_5 ? 6 : 7;\n                    }\n\n                    for (int i = 0; i < cellCount; i++) {\n                        if (buf.readableBytes() < (longFormat ? 4 + 8 + 1 : 2 + 3 + 1)) {\n                            break;  // Not enough bytes left for this cell tower, so we stop\n                        }\n\n                        int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                        int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                        int rssi = -buf.readUnsignedByte();\n                        if (lac > 0) {\n                            network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                        }\n                    }\n\n                    if (variant != Variant.WANWAY_S20 && buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // ta\n                    }\n\n                    if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                            && type != MSG_LBS_2 && buf.readableBytes() >= 1) {\n                        int wifiCount = buf.readUnsignedByte();\n                        if (buf.readableBytes() >= wifiCount * (6 + 1)) {\n                            for (int i = 0; i < wifiCount; i++) {\n                                String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                                network.addWifiAccessPoint(WifiAccessPoint.from(\n                                        mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                            }\n                        }\n                    }\n\n                    position.setNetwork(network);\n\n                    return position;\n                }\n            }\n        } else if (type == MSG_STRING) {\n\n            getLastLocation(position, null);\n\n            int commandLength = buf.readUnsignedByte();\n\n            if (commandLength > 0) {\n                if (buf.readableBytes() >= 4) {  // Added check for readable bytes\n                    buf.readUnsignedInt(); // server flag (reserved)\n                    if (buf.readableBytes() >= commandLength - 4) {\n                        String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                        if (data.startsWith(\"<ICCID:\")) {\n                            position.set(Position.KEY_ICCID, data.substring(7, 27));\n                        } else {\n                            position.set(Position.KEY_RESULT, data);\n                        }\n                    }\n                }\n            }\n\n        } else if (type == MSG_BMS) {\n\n            String serialNumber = \"\";\n            if (buf.readableBytes() >= 8) {\n                buf.skipBytes(8); // serial number\n                long dateSeconds = 0;\n                if (buf.readableBytes() >= 4) {\n                    dateSeconds = buf.readUnsignedInt();\n                }\n                getLastLocation(position, new Date(dateSeconds * 1000));\n\n                if (buf.readableBytes() >= 14 * 2) { // Ensure enough bytes for main BMS data\n                    position.set(\"relativeCapacity\", buf.readUnsignedByte());\n                    position.set(\"remainingCapacity\", buf.readUnsignedShort());\n                    position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n                    position.set(\"fullCapacity\", buf.readUnsignedShort());\n                    position.set(\"batteryHealth\", buf.readUnsignedByte());\n                    position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n                    position.set(\"current\", buf.readUnsignedShort());\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(\"cycleIndex\", buf.readUnsignedShort());\n                    for (int i = 1; i <= 14; i++) {\n                        if (buf.readableBytes() >= 2) {\n                            position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n                        }\n                    }\n                    if (buf.readableBytes() >= 2 * 3) { // For remaining short values\n                        position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n                        position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n                    }\n                    if (buf.readableBytes() >= 16) { // 16 chars for barcode\n                        position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n                    }\n                    if (buf.readableBytes() >= 2) {\n                        position.set(\"batteryVersion\", buf.readUnsignedShort());\n                    }\n                    if (buf.readableBytes() >= 16) { // 16 chars for manufacturer\n                        position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n                    }\n                    if (buf.readableBytes() >= 4) {\n                        position.set(\"batteryStatus\", buf.readUnsignedInt());\n                    }\n                }\n            }\n\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n\n            getLastLocation(position, null);\n\n            buf.readUnsignedByte(); // information content\n            buf.readUnsignedShort(); // satellites\n            buf.readUnsignedByte(); // alarm\n            buf.readUnsignedByte(); // language\n\n            if (buf.readableBytes() >= 1) {  // Added check for readable bytes\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            }\n\n            buf.readUnsignedByte(); // working mode\n            buf.readUnsignedShort(); // working voltage\n            buf.readUnsignedByte(); // reserved\n            buf.readUnsignedShort(); // working times\n            buf.readUnsignedShort(); // working time\n\n            if (buf.readableBytes() >= 2) {  // Added check for readable bytes\n                int value = buf.readUnsignedShort();\n                double temperature = BitUtil.to(value, 15) * 0.1;\n                position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n            }\n\n        } else if (isSupported(type)) {\n\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; // multi-lbs message\n            }\n\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n\n            if (hasLbs(type)) {\n                decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM);\n            }\n\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    int alarm = buf.readUnsignedByte();\n                    position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n\n                    buf.readUnsignedByte(); // language\n\n                    if (buf.readableBytes() >= 1) { // Added check for battery level\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n\n                    buf.readUnsignedByte(); // working mode\n\n                    if (buf.readableBytes() >= 2) { // Added check for power\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                    }\n                } else {\n                    if (buf.readableBytes() >= 3) { // Battery level (1), RSSI (1), alarm (1)\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        int alarm = buf.readUnsignedByte();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                    }\n                }\n            }\n\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    if (buf.readableBytes() >= 4) { // For odometer (4 bytes)\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        int length = buf.readUnsignedByte();\n                        if (length > 0 && buf.readableBytes() >= length) {\n                            String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                            buf.readUnsignedByte(); // alarm\n                            buf.readUnsignedByte(); // swiped\n                            position.set(\"driverLicense\", data.trim());\n                        }\n                    }\n                } else if (variant == Variant.BENWAY) {\n                    if (buf.readableBytes() >= 2) {\n                        int mask = buf.readUnsignedShort();\n                        position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                        if (BitUtil.check(mask, 8 + 4)) {\n                            int value = BitUtil.to(mask, 8 + 1);\n                            if (BitUtil.check(mask, 8 + 1)) {\n                                value = -value;\n                            }\n                            position.set(Position.PREFIX_TEMP + 1, value);\n                        } else {\n                            int value = BitUtil.to(mask, 8 + 2);\n                            if (BitUtil.check(mask, 8 + 5)) {\n                                position.set(Position.PREFIX_ADC + 1, value);\n                            } else {\n                                position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                            }\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    }\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte(); // alarm extension\n                    }\n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    if (buf.readableBytes() >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    }\n                    if (buf.readableBytes() >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    if (buf.readableBytes() >= 1) {\n                        int alarm = buf.readUnsignedByte();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                    }\n                    if (buf.readableBytes() >= 2) {\n                        position.set(\"oil\", buf.readUnsignedShort());\n                    }\n                    if (buf.readableBytes() >= 1) {\n                        int temperature = buf.readUnsignedByte();\n                        if (BitUtil.check(temperature, 7)) {\n                            temperature = -BitUtil.to(temperature, 7);\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, temperature);\n                    }\n                    if (buf.readableBytes() >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                    }\n                }\n            }\n\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason\n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n\n            if (type == MSG_GPS_LBS_3 && buf.readableBytes() >= 2 + 1) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                // Check if we have enough bytes in the sub module data\n                if (buf.readableBytes() >= subLength) {\n                    switch (module) {\n                        case 0x0027:\n                            if (buf.readableBytes() >= 2) {\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                            }\n                            break;\n                        case 0x002E:\n                            if (buf.readableBytes() >= 4) {\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                            }\n                            break;\n                        case 0x003B:\n                            if (buf.readableBytes() >= 2) {\n                                position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                            }\n                            break;\n                        default:\n                            buf.skipBytes(subLength);\n                            break;\n                    }\n                }\n            }\n\n            if (buf.readableBytes() >= 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n\n        } else if (type == MSG_ALARM) {\n\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            if (buf.readableBytes() >= 1) {  // Added check for readable bytes\n                short alarmType = buf.readUnsignedByte();\n                switch (alarmType) {\n                    case 0x01:\n                        position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                        break;\n                    case 0x80:\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        break;\n                    case 0x87:\n                        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                        break;\n                    case 0x90:\n                        position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                        break;\n                    case 0x91:\n                        position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                        break;\n                    case 0x92:\n                        position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                        break;\n                    case 0x93:\n                        position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                        break;\n                    default:\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                        break;\n                }\n            }\n\n        } else {\n\n            if (dataLength > 0) {\n                int toSkip = Math.min(dataLength, buf.readableBytes());\n                buf.skipBytes(toSkip);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n\n        }\n\n        if (hasLanguage(type) && buf.readableBytes() >= 2) {  // Added check for readable bytes\n            buf.readUnsignedShort();\n        }\n\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            if (buf.readableBytes() >= 1) {  // Added check for readable bytes\n                position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n            }\n        }\n\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}