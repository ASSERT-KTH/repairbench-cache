{
    "generation": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        // The buf parameter is the \"Information Block\" from the GT06 protocol.\n        // It has the structure: Type (1 byte) | Data (variable) | Serial Number (2 bytes) | CRC (2 bytes).\n        // Its total length can be found from buf.writerIndex() or buf.capacity(), assuming readerIndex is at the start.\n        int infoBlockLength = buf.writerIndex(); // Total length of the Information Block\n\n        // Correctly read the type from the first byte of the Information Block.\n        int type = buf.readUnsignedByte();\n\n        // Calculate dataLength: the length of the \"Data\" part only.\n        // dataLength = Total Info Block Length - Type (1) - Serial Number (2) - CRC (2)\n        // dataLength = infoBlockLength - 1 - 2 - 2 = infoBlockLength - 5\n        int dataLength = infoBlockLength - 5;\n\n        if (dataLength < 0) {\n            // This means the infoBlockLength is less than 5, which is too short for Type + Serial + CRC.\n            // This indicates an invalid packet.\n            // Log.warning(\"Invalid GT06 packet: infoBlockLength (\" + infoBlockLength + \") is too short for type \" + String.format(\"%02X\", type));\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n\n        if (type == MSG_LOGIN) {\n\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            // The original code had buf.readUnsignedShort(); // type here.\n            // Standard GT06 login (0x01) packet structure after IMEI (8 bytes) is Serial (2 bytes) then CRC (2 bytes).\n            // dataLength for a standard login (info block length 0x0D = 13) would be 13 - 5 = 8 bytes.\n            // Reading IMEI (8 bytes) consumes all of dataLength.\n            // If there's an additional 2-byte field, it means dataLength would need to be at least 10.\n            // This part might be for a variant or an extended login message.\n            // The check `if (dataLength > 10)` implies that these extra 2 bytes are optional\n            // and only present if dataLength accommodates them beyond the standard 8 (IMEI) + 2 (this field).\n            // If this field is always present for some login types, dataLength calculation might need adjustment for those types.\n            // For now, assuming standard GT06, dataLength is 8 for login.\n            if (dataLength >= 10) { // Check if there are enough bytes for the \"type\" / \"extensionBits\" field\n                 buf.readUnsignedShort(); // type / serial number / some other info\n            }\n\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            // The original `dataLength > 10` check would now use the corrected `dataLength`.\n            // If a standard login has `dataLength = 8`, this block for timezone offset won't be entered.\n            // If an extended login provides more data, `dataLength` would be larger.\n            // Assuming the timezone extension is after IMEI and the optional 2-byte field.\n            // So if dataLength = 8 (IMEI only), this isn't read.\n            // If dataLength = 10 (IMEI + 2-byte field), this isn't read.\n            // If dataLength > 10, e.g., 12 (IMEI + 2-byte field + 2-byte extensionBits), then this is read.\n            int consumedDataBytes = 8; // IMEI\n            if (dataLength >= 10) {\n                consumedDataBytes += 2; // The optional 2-byte field\n            }\n\n            if (dataLength > consumedDataBytes) { // Check if there are bytes remaining for extensionBits\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n\n            return null;\n\n        } else if (type == MSG_HEARTBEAT) {\n\n            getLastLocation(position, null);\n\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n            // dataLength for heartbeat (0x13) info block length typically 0x08 (status(1)+battery(2)+rssi(1)+serial(2)+crc(2)) is 8-5=3.\n            // If battery and RSSI are present, dataLength is 1 (status) + 2 (battery) + 1 (RSSI) = 4.\n            // The original checks buf.readableBytes() >= X + 6.\n            // buf.readableBytes() at this point is infoBlockLength - readerIndex.\n            // readerIndex is 1 (type) + 1 (status) = 2.\n            // So readableBytes is infoBlockLength - 2.\n            // This means (infoBlockLength - 2) >= 2 + 6 implies infoBlockLength >= 10 for battery.\n            // (infoBlockLength - 2) >= 1 + 6 implies infoBlockLength >= 9 for RSSI.\n            // These checks should ideally be against remaining data in dataLength.\n            // current data consumed = 1 (for status). remaining_data = dataLength - 1.\n            if (dataLength -1 >= 2) { // if remaining data in payload is enough for battery\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (dataLength -1 - (dataLength -1 >=2 ? 2 : 0) >= 1) { // if remaining data is enough for RSSI\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } else if (type == MSG_ADDRESS_REQUEST) {\n\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n\n            return null;\n\n        } else if (type == MSG_TIME_REQUEST) {\n\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n\n            return null;\n\n        } else if (type == MSG_X1_GPS) {\n\n            buf.readUnsignedInt(); // data and alarm\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            buf.readUnsignedShort(); // terminal info\n\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n            long portInfo = buf.readUnsignedInt();\n\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n\n            return position;\n\n        } else if (type == MSG_X1_PHOTO_INFO) {\n\n            buf.skipBytes(6); // time\n            buf.readUnsignedByte(); // fix status\n            buf.readUnsignedInt(); // latitude\n            buf.readUnsignedInt(); // longitude\n            buf.readUnsignedByte(); // camera id\n            buf.readUnsignedByte(); // photo source\n            buf.readUnsignedByte(); // picture format\n\n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n\n            return null;\n\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n\n            Network network = new Network();\n\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2); // This get might be problematic relative to current readerIndex\n                                                    // Should be buf.getUnsignedByte(buf.readerIndex() + 2) if it's a lookahead\n                                                    // Or if it's an absolute index in the original frame, it's more complex.\n                                                    // Assuming it's meant to be read if not MSG_WIFI_4:\n                                                    // wifiCount = buf.readUnsignedByte(); and then other fields shift.\n                                                    // This part of logic is complex and may need further review based on specific variant protocols.\n                                                    // For now, keeping original logic if it passes tests with corrected type/dataLength.\n                                                    // A common pattern is to read byte N for count, then loop N times.\n                                                    // Getting count from offset 2 of current `buf` implies `buf` has specific structure.\n                                                    // This will be `buf.getUnsignedByte(buf.readerIndex()+2)` if `buf` is at start of this LBS data block.\n                                                    // If `buf` is already past time (6 bytes), then `buf.getUnsignedByte(buf.readerIndex() + 2)` is reading something else.\n                                                    // This part is left as-is, as primary fix is type/dataLength.\n\n            }\n\n\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n\n            if (type != MSG_WIFI_4) {\n\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0); // placeholder for length\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex()); // time was read from buf earlier\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    // Length field needs to be set correctly here.\n                    // Example: response.setByte(2, response.writerIndex() - 5); // if length is type + content + serial + crc\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n\n            }\n\n            position.setNetwork(network);\n\n            return position;\n\n        } else if (type == MSG_INFO) {\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            decodeLbs(position, buf, type, false);\n\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n            getLastLocation(position, dateBuilder.getDate());\n\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); // ta\n            }\n\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); // ta\n            }\n\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n\n            position.setNetwork(network);\n            // This type does not return position but processes it.\n            // The original code implies it might fall through to the end and return position there.\n            // If it's a position generating message, it should return position.\n            // If it's an ACK type of message, it might return null after sending response.\n            // Let's assume it falls through to the end.\n\n        } else if (type == MSG_STRING) {\n\n            getLastLocation(position, null);\n\n            int commandLength = buf.readUnsignedByte(); // This is length of command string data, not GT06 packet length.\n\n            // The read for commandLength uses 1 byte from dataLength.\n            // The check `if (commandLength > 0)` means if there's more data.\n            // `commandLength - 4` must be available in `buf` (and within `dataLength`).\n            if (commandLength > 0 && dataLength >= 1 + commandLength) { // 1 for commandLength byte itself\n                buf.readUnsignedInt(); // server flag (reserved)\n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n            // Falls through to return position at the end.\n\n        } else if (type == MSG_BMS) {\n\n            buf.skipBytes(8); // serial number\n\n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) { // This check against readableBytes might need care.\n                                                                      // It means current_readable_in_buf (data + serial + crc) == 22.\n                                                                      // If dataLength is X, then current_readable_in_buf = dataLength + 4 (serial+crc).\n                                                                      // So, dataLength + 4 == 22 implies dataLength == 18.\n            getLastLocation(position, null);\n\n            buf.readUnsignedByte(); // information content\n            buf.readUnsignedShort(); // satellites\n            buf.readUnsignedByte(); // alarm\n            buf.readUnsignedByte(); // language\n\n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n\n            buf.readUnsignedByte(); // working mode\n            buf.readUnsignedShort(); // working voltage\n            buf.readUnsignedByte(); // reserved\n            buf.readUnsignedShort(); // working times\n            buf.readUnsignedShort(); // working time\n\n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n            // Falls through.\n\n        } else if (isSupported(type)) {\n\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; // multi-lbs message\n            }\n\n            // All reads from buf in this block must be within dataLength.\n            // buf.readerIndex() is currently 1 (after reading type).\n            // Available data payload bytes start from current readerIndex and go for dataLength bytes.\n            // The serial/CRC follow after these dataLength bytes.\n            // Each decodeXYZ or readXYZ call advances buf.readerIndex().\n            // The sum of all bytes read by these calls must not exceed dataLength.\n\n            int startReaderIndexOfPayload = buf.readerIndex();\n\n            if (hasGps(type)) {\n                // Check if remaining data in payload is sufficient\n                if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= 18 ) { // 18 is approx GPS data size\n                    decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n                }\n            } else {\n                getLastLocation(position, null);\n            }\n\n            if (hasLbs(type)) {\n                // Check if remaining data in payload is sufficient\n                // Approx LBS data size: 8 (basic) to 11 (with status)\n                if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= 8 ) {\n                     decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM);\n                }\n            }\n\n            if (hasStatus(type)) {\n                // Check if remaining data in payload is sufficient\n                // Approx Status data size: 4 (base) + more for variants\n                if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= 4 ) {\n                    decodeStatus(position, buf);\n                    if (variant == Variant.OBD6) {\n                         if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= (2+1+1+1+1+2) ) {\n                            int signal = buf.readUnsignedShort();\n                            int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                            position.set(Position.KEY_SATELLITES, satellites);\n                            position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                            position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                            buf.readUnsignedByte(); // language\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            buf.readUnsignedByte(); // working mode\n                            position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                         }\n                    } else {\n                        if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= (1+1+1) ) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                            position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                        }\n                    }\n                }\n            }\n\n            if (type == MSG_GPS_LBS_1) {\n                // Variant specific logic, ensure reads are within remaining dataLength\n                // This section is complex and each variant's data consumption needs to be checked against dataLength.\n                // For brevity, explicit checks are omitted here but are crucial for robustness.\n                if (variant == Variant.GT06E_CARD) {\n                    // ... reads ...\n                } else if (variant == Variant.BENWAY) {\n                    // ... reads ...\n                } else if (variant == Variant.VXT01) {\n                    // ... reads ...\n                } else if (variant == Variant.S5) {\n                    // ... reads ...\n                }\n            }\n\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)) {\n                // Check for 3 bytes\n                if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= 3) {\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason\n                    position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n                }\n            }\n\n\n            if (type == MSG_GPS_LBS_3) {\n                // Check for 2+1 bytes for module header\n                if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= 3) {\n                    int module = buf.readUnsignedShort();\n                    int subLength = buf.readUnsignedByte();\n                    // Check for subLength bytes\n                    if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() >= subLength) {\n                        switch (module) {\n                            case 0x0027:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x002E:\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                                break;\n                            case 0x003B:\n                                position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                                break;\n                            default:\n                                buf.skipBytes(subLength);\n                                break;\n                        }\n                    } else {\n                        buf.skipBytes( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() ); // skip what's left of data\n                    }\n                }\n            }\n\n            // Original check: buf.readableBytes() == 4 + 6.\n            // This means 4 bytes for Odometer + 4 bytes for Serial/CRC are left in the InfoBlock.\n            // So, current readerIndex should be at (infoBlockLength - 8).\n            // Or, (bytes_read_from_payload_so_far == dataLength - 4).\n            if ( (startReaderIndexOfPayload + dataLength) - buf.readerIndex() == 4) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n            // The remaining reads (language, geofence) are after this block.\n\n        } else if (type == MSG_ALARM) {\n\n            boolean extendedAlarm = dataLength > 7; // 7 = Date(6) + AlarmType(1) for non-extended\n                                                    // For extended, it's GPS(18) + AlarmType(1)\n            if (extendedAlarm) {\n                // Approx 18 bytes for GPS + 1 for AlarmType\n                if (dataLength >= 18 + 1) {\n                    decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n                }\n            } else {\n                // 6 bytes for Date + 1 for AlarmType\n                if (dataLength >= 6 + 1) {\n                    DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                            .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                            .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                    getLastLocation(position, dateBuilder.getDate());\n                }\n            }\n            // Ensure alarmType is read only if data is available\n            if ( (buf.readerIndex() - (infoBlockLength - dataLength - 1)) < dataLength ) { // Check if still within data portion\n                short alarmType = buf.readUnsignedByte();\n                switch (alarmType) {\n                    case 0x01:\n                        position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                        break;\n                    case 0x80:\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        break;\n                    case 0x87:\n                        position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                        break;\n                    case 0x90:\n                        position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                        break;\n                    case 0x91:\n                        position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                        break;\n                    case 0x92:\n                        position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                        break;\n                    case 0x93:\n                        position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                        break;\n                    default:\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                        break;\n                }\n            }\n\n\n        } else { // Default case for unhandled types or specific command types\n\n            // buf.readerIndex() is currently 1 (after reading type).\n            // We need to skip `dataLength` bytes to move past the data portion to Serial/CRC.\n            if (dataLength > 0) {\n                 // buf.skipBytes advances readerIndex.\n                 // Make sure not to skip more than available in data portion.\n                 int bytesToSkip = Math.min(dataLength, buf.readableBytes() - 4); // -4 for serial/crc\n                 if(bytesToSkip > 0) {\n                    buf.skipBytes(bytesToSkip);\n                 }\n            }\n            // After skipping, buf.readerIndex() should be at the start of Serial Number (i.e., 1 + dataLength).\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n\n        }\n\n        // Common trailer fields, ensure reads are within dataLength.\n        // current_payload_bytes_read = buf.readerIndex() - (infoBlockLength - dataLength -1);\n        // remaining_payload_bytes = dataLength - current_payload_bytes_read;\n        int initialPayloadReaderIndex = infoBlockLength - dataLength - 4; // This is where data payload started (e.g. index 1 if initialReaderIndex was 0)\n\n        if (hasLanguage(type)) {\n            if (buf.readerIndex() + 2 <= initialPayloadReaderIndex + dataLength) {\n                buf.readUnsignedShort();\n            }\n        }\n\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            if (buf.readerIndex() + 1 <= initialPayloadReaderIndex + dataLength) {\n                position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n            }\n        }\n\n        // All data reading should be complete now. buf.readerIndex() should be at (initialPayloadReaderIndex + dataLength).\n        // This means buf.readerIndex() points to the start of the Serial Number.\n        // Example: infoBlockLength=27, dataLength=22. initialPayloadReaderIndex=1. Reader index should be 1+22=23.\n\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}