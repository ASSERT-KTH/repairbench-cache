{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    if (!buf.isReadable(2)) {\n        return null;\n    }\n\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    int type = buf.readUnsignedByte();\n\n    if (dataLength < 0 || buf.readableBytes() < dataLength) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    if (type == MSG_LOGIN) {\n\n        if (buf.readableBytes() < 8 + 2) {\n            return null;\n        }\n\n        String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n        buf.readUnsignedShort(); // type\n\n        deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n\n        if (dataLength > 10 && buf.readableBytes() >= 2) {\n            int extensionBits = buf.readUnsignedShort();\n            int hours = (extensionBits >> 4) / 100;\n            int minutes = (extensionBits >> 4) % 100;\n            int offset = (hours * 60 + minutes) * 60;\n            if ((extensionBits & 0x8) != 0) {\n                offset = -offset;\n            }\n            if (deviceSession != null) {\n                TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                if (timeZone.getRawOffset() == 0) {\n                    timeZone.setRawOffset(offset * 1000);\n                    deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                }\n            }\n        }\n\n        if (deviceSession != null) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n\n        return null;\n\n    } else if (type == MSG_HEARTBEAT) {\n\n        getLastLocation(position, null);\n\n        if (buf.readableBytes() < 1) {\n            return null;\n        }\n\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n        position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n        if (buf.readableBytes() >= 2 + 6) {\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        }\n        if (buf.readableBytes() >= 1 + 6) {\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        }\n\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n        return position;\n\n    } else if (type == MSG_ADDRESS_REQUEST) {\n        String response = \"NA&&NA&&0##\";\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(response.length());\n        content.writeInt(0);\n        content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n        sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n        return null;\n\n    } else if (type == MSG_TIME_REQUEST) {\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n        content.writeByte(calendar.get(Calendar.MONTH) + 1);\n        content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n        content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n        content.writeByte(calendar.get(Calendar.MINUTE));\n        content.writeByte(calendar.get(Calendar.SECOND));\n        sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n        return null;\n\n    } else if (type == MSG_X1_GPS) {\n\n        if (buf.readableBytes() < 4 + 2 + 2 + 6 + 4 + 6) {\n            return null;\n        }\n\n        buf.readUnsignedInt(); // data and alarm\n\n        decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n        buf.readUnsignedShort(); // terminal info\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n        position.setNetwork(new Network(CellTower.from(\n                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n        long driverId = buf.readUnsignedInt();\n        if (driverId > 0) {\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n        }\n\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n        long portInfo = buf.readUnsignedInt();\n        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n        for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n            position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n        }\n\n        return position;\n\n    } else if (type == MSG_X1_PHOTO_INFO) {\n        if (buf.readableBytes() < 6 + 1 + 4 + 4) {\n            return null;\n        }\n\n        buf.skipBytes(6); // time\n        buf.readUnsignedByte(); // fix status\n        buf.readUnsignedInt(); // latitude\n        buf.readUnsignedInt(); // longitude\n        buf.readUnsignedByte(); // camera id\n        buf.readUnsignedByte(); // photo source\n        buf.readUnsignedByte(); // picture format\n\n        int pictureId = buf.readInt();\n        int contentLength = buf.readInt();\n\n        if (buf.readableBytes() >= contentLength) {\n            ByteBuf photo = Unpooled.buffer(contentLength);\n            photo.writeBytes(buf, contentLength);\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n        }\n\n        return null;\n\n    } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n\n        if (buf.readableBytes() < 6) {\n            return null;\n        }\n\n        ByteBuf time = buf.readSlice(6);\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(BcdUtil.readInteger(time, 2))\n                .setMonth(BcdUtil.readInteger(time, 2))\n                .setDay(BcdUtil.readInteger(time, 2))\n                .setHour(BcdUtil.readInteger(time, 2))\n                .setMinute(BcdUtil.readInteger(time, 2))\n                .setSecond(BcdUtil.readInteger(time, 2));\n        getLastLocation(position, dateBuilder.getDate());\n\n        Network network = new Network();\n\n        int wifiCount;\n        if (type == MSG_WIFI_4) {\n            if (buf.readableBytes() < 1) {\n                return null;\n            }\n            wifiCount = buf.readUnsignedByte();\n        } else {\n            if (buf.readableBytes() < 3) {\n                return null;\n            }\n            wifiCount = buf.getUnsignedByte(2);\n        }\n\n        for (int i = 0; i < wifiCount; i++) {\n            if (type == MSG_WIFI_4) {\n                if (buf.readableBytes() < 2) {\n                    return null;\n                }\n                buf.skipBytes(2);\n            }\n            if (buf.readableBytes() < 6) {\n                return null;\n            }\n            WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n            wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                    buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                    buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n            if (type != MSG_WIFI_4) {\n                if (buf.readableBytes() < 1) {\n                    return null;\n                }\n                wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n            }\n            network.addWifiAccessPoint(wifiAccessPoint);\n        }\n\n        if (type != MSG_WIFI_4) {\n\n            if (buf.readableBytes() < 1) {\n                return null;\n            }\n            int cellCount = buf.readUnsignedByte();\n\n            if (buf.readableBytes() < 2) {\n                return null;\n            }\n            int mcc = buf.readUnsignedShort();\n\n            if (buf.readableBytes() < 1) {\n                return null;\n            }\n            int mnc = buf.readUnsignedByte();\n\n            for (int i = 0; i < cellCount; i++) {\n                if (buf.readableBytes() < 5) {\n                    return null;\n                }\n                network.addCellTower(CellTower.from(\n                        mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n            }\n\n            if (channel != null) {\n                ByteBuf response = Unpooled.buffer();\n                response.writeShort(0x7878);\n                response.writeByte(0);\n                response.writeByte(type);\n                response.writeBytes(time.resetReaderIndex());\n                response.writeByte('\\r');\n                response.writeByte('\\n');\n                channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n            }\n\n        }\n\n        position.setNetwork(network);\n        return position;\n\n    } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n\n        decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        decodeLbs(position, buf, type, false);\n        position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        return position;\n\n    } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n            || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n            || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n\n        boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n\n        if (buf.readableBytes() < 6) {\n            return null;\n        }\n\n        DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n        getLastLocation(position, dateBuilder.getDate());\n\n        if (variant == Variant.WANWAY_S20 && buf.readableBytes() > 0) {\n            buf.readUnsignedByte(); // ta\n        }\n\n        if (buf.readableBytes() < 2) {\n            return null;\n        }\n        int mcc = buf.readUnsignedShort();\n\n        int mnc;\n        if (BitUtil.check(mcc, 15)) {\n            if (buf.readableBytes() < 2) {\n                return null;\n            }\n            mnc = buf.readUnsignedShort();\n        } else {\n            if (buf.readableBytes() < 1) {\n                return null;\n            }\n            mnc = buf.readUnsignedByte();\n        }\n\n        Network network = new Network();\n\n        int cellCount = variant == Variant.WANWAY_S20 ? (\n                buf.readableBytes() >= 1 ? buf.readUnsignedByte() : 0) : (type == MSG_WIFI_5 ? 6 : 7);\n\n        int cellDataLen = (longFormat ? 6 : 3) + 1;\n        if (cellCount * cellDataLen > buf.readableBytes()) {\n            return null;\n        }\n\n        for (int i = 0; i < cellCount; i++) {\n            if (longFormat) {\n                if (buf.readableBytes() < 6) {\n                    return null;\n                }\n                int lac = buf.readInt();\n                int cid = (int) buf.readLong();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            } else {\n                if (buf.readableBytes() < 3) {\n                    return null;\n                }\n                int lac = buf.readUnsignedShort();\n                int cid = buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n        }\n\n        if (variant != Variant.WANWAY_S20) {\n            buf.skipBytes(1); // ta\n        }\n\n        if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                && type != MSG_LBS_2 && buf.readableBytes() >= 1) {\n            int wifiCount = buf.readUnsignedByte();\n            for (int i = 0; i < wifiCount; i++) {\n                if (buf.readableBytes() < 6 + 1) {\n                    break;\n                }\n                String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                network.addWifiAccessPoint(WifiAccessPoint.from(\n                        mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n            }\n        }\n\n        position.setNetwork(network);\n\n    } else if (type == MSG_STRING) {\n        getLastLocation(position, null);\n        if (buf.readableBytes() < 1) {\n            return null;\n        }\n        int commandLength = buf.readUnsignedByte();\n        if (commandLength > 0 && buf.readableBytes() >= commandLength) {\n            buf.readUnsignedInt(); // server flag (reserved)\n            String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n            if (data.startsWith(\"<ICCID:\")) {\n                position.set(Position.KEY_ICCID, data.substring(7, 27));\n            } else {\n                position.set(Position.KEY_RESULT, data);\n            }\n        }\n\n    } else if (type == MSG_BMS) {\n        buf.skipBytes(8); // serial number\n        if (buf.readableBytes() < 4) {\n            return null;\n        }\n        getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n\n        position.set(\"relativeCapacity\", buf.readUnsignedByte());\n        position.set(\"remainingCapacity\", buf.readUnsignedShort());\n        position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n        position.set(\"fullCapacity\", buf.readUnsignedShort());\n        position.set(\"batteryHealth\", buf.readUnsignedByte());\n        position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n        position.set(\"current\", buf.readUnsignedShort());\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n        position.set(\"cycleIndex\", buf.readUnsignedShort());\n        for (int i = 1; i <= 14; i++) {\n            if (buf.readableBytes() < 2) {\n                return null;\n            }\n            position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n        }\n        position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n        position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n        if (buf.readableBytes() >= 16) {\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n        }\n        position.set(\"batteryVersion\", buf.readUnsignedShort());\n        if (buf.readableBytes() >= 16) {\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n        }\n        position.set(\"batteryStatus\", buf.readUnsignedInt());\n        position.set(\"controllerStatus\", buf.readUnsignedInt());\n        position.set(\"controllerFault\", buf.readUnsignedInt());\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n\n    } else if (type == MSG_ALARM) {\n        boolean extendedAlarm = dataLength > 7;\n\n        if (extendedAlarm) {\n            // Assuming decodeGps also validates its input\n            decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        } else {\n            if (buf.readableBytes() >= 6) {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            } else {\n                getLastLocation(position, null);\n            }\n        }\n\n        if (buf.readableBytes() >= 1) {\n            short alarmType = buf.readUnsignedByte();\n            switch (alarmType) {\n                case 0x01: position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL); break;\n                case 0x80: position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION); break;\n                case 0x87: position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED); break;\n                case 0x90: position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); break;\n                case 0x91: position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); break;\n                case 0x92: position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); break;\n                case 0x93: position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); break;\n                default:   position.set(Position.KEY_ALARM, Position.ALARM_GENERAL); break;\n            }\n        }\n\n    } else {\n\n        if (dataLength > 0 && buf.readableBytes() >= dataLength) {\n            buf.skipBytes(dataLength);\n        }\n        if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n        return null;\n\n    }\n\n    if (hasLanguage(type) && buf.readableBytes() >= 2) {\n        buf.readUnsignedShort();\n    }\n\n    if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n        if (buf.readableBytes() >= 1) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n    }\n\n    sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}