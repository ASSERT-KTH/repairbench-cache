{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    if (type == MSG_LOGIN) {\n        String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n        buf.readUnsignedShort(); // type\n\n        deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n\n        if (dataLength > 10) {\n            int extensionBits = buf.readUnsignedShort();\n            int hours = (extensionBits >> 4) / 100;\n            int minutes = (extensionBits >> 4) % 100;\n            int offset = (hours * 60 + minutes) * 60;\n            if ((extensionBits & 0x8) != 0) {\n                offset = -offset;\n            }\n            if (deviceSession != null) {\n                TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                if (timeZone.getRawOffset() == 0) {\n                    timeZone.setRawOffset(offset * 1000);\n                    deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                }\n            }\n        }\n\n        if (deviceSession != null) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n        return null;\n    } else if (type == MSG_HEARTBEAT) {\n        getLastLocation(position, null);\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n        position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n        if (buf.readableBytes() >= 2 + 6) {\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        }\n        if (buf.readableBytes() >= 1 + 6) {\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        }\n\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n        return position;\n\n    } else if (type == MSG_ADDRESS_REQUEST) {\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(0x01); // status\n        content.writeBytes(\"NA&&NA&&0##\".getBytes(StandardCharsets.US_ASCII));\n        sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n\n        return null;\n    } else if (type == MSG_TIME_REQUEST) {\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n        content.writeByte(calendar.get(Calendar.MONTH) + 1);\n        content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n        content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n        content.writeByte(calendar.get(Calendar.MINUTE));\n        content.writeByte(calendar.get(Calendar.SECOND));\n        sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n\n        return null;\n    } else if (type == MSG_X1_GPS) {\n        buf.readUnsignedInt(); // data and alarm\n\n        decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n        buf.readUnsignedShort(); // terminal info\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n        position.setNetwork(new Network(CellTower.from(\n                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n        long driverId = buf.readUnsignedInt();\n        if (driverId > 0) {\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n        }\n\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n        long portInfo = buf.readUnsignedInt();\n\n        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n        for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n            position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n        }\n\n        return position;\n    } else if (type == MSG_ALARM) {\n        boolean extendedAlarm = dataLength > 7;\n        if (extendedAlarm) {\n            decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_THPER));\n\n        } else {\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n        }\n\n        short alarmType = buf.readUnsignedByte();\n        switch (alarmType) {\n            case 0x01:\n                position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                break;\n            case 0x80:\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                break;\n            case 0x87:\n                position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                break;\n            case 0x90:\n                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                break;\n            case 0x91:\n                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                break;\n            case 0x92:\n                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                break;\n            case 0x93:\n                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                break;\n            default:\n                position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                break;\n        }\n        return null;\n    } else if (type == MSG_STRING) {\n        getLastLocation(position, null);\n        int commandLength = buf.readUnsignedByte();\n        if (commandLength > 0) {\n            buf.readUnsignedInt(); // server flag (reserved)\n            String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n            if (data.startsWith(\"<ICCID:\")) {\n                position.set(Position.KEY_ICCID, data.substring(7, 27));\n            } else {\n                position.set(Position.KEY_RESULT, data);\n            }\n        }\n        return position;\n    } else if (type == MSG_BMS) {\n        buf.skipBytes(8); // serial number\n        getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n        position.set(\"relativeCapacity\", buf.readUnsignedByte());\n        position.set(\"remainingCapacity\", buf.readUnsignedShort());\n        position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n        position.set(\"fullCapacity\", buf.readUnsignedShort());\n        position.set(\"batteryHealth\", buf.readUnsignedByte());\n        position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n        position.set(\"current\", buf.readUnsignedShort());\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n        position.set(\"cycleIndex\", buf.readUnsignedShort());\n        for (int i = 1; i <= 14; i++) {\n            position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n        }\n        position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n        position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n        position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n        position.set(\"batteryVersion\", buf.readUnsignedShort());\n        position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n        position.set(\"batteryStatus\", buf.readUnsignedInt());\n        position.set(\"controllerStatus\", buf.readUnsignedInt());\n        position.set(\"controllerFault\", buf.readUnsignedInt());\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n        getLastLocation(position, null);\n        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n        position.setAttribute(Position.PREFIX_TEMP + 1 , buf.readUnsignedShort());\n        return null;\n    } else if (isSupported(type)) {\n\n        long mask = hasUnsupported(type);\n        if (mask == 0 || !(mask & (MillisFixed\u516c\u51432000)) && time().contains(th)) {\n            getLastLocation(position, null);\n        }\n\n        if (type == MSG_GT1 ||\n            type == MSG_GTL ||\n            type == MSG_GTH || type == ListOfDevices<format)) {\n            decodeAlarm(position, buf, dataLength, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        }\n\n        if (type == MSG_GLIBS || type == MSG_GPHL9) {\n            decode(ByteBufferedByte(position, buf));\n        }\n        decodeStatus(position, buf);\n\n        } else if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n\n        return null;\n    }\n\n    return decodeBytes(buf, type, variant);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}