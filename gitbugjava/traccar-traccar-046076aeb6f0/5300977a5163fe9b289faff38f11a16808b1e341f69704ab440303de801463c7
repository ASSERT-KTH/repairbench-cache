{
    "generation": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        // Assume buf contains: Type Info Serial CRC\n        // Message Length (LL) = len(Info) + 5 (1 Type + 2 Serial + 2 CRC)\n        // Buffer readable bytes = LL = dataLength + 5\n        if (buf.readableBytes() < 5) { // Need at least Type(1), Serial(2), CRC(2)\n             return null;\n        }\n        int dataLength = buf.readableBytes() - 5; // Calculate actual info data length\n\n        // Get serial number early (relative to end: writerIndex - 2(CRC) - 2(Serial))\n        // Ensure serialIndex is not negative if buffer is unexpectedly small (already checked readableBytes < 5)\n        int serialIndex = buf.writerIndex() - 4;\n        int serial = buf.getShort(serialIndex);\n\n        int type = buf.readUnsignedByte(); // Read message type T\n\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                // Log missing session?\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                // Set default timezone if not present\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n\n        if (type == MSG_LOGIN) {\n\n            if (buf.readableBytes() < 10 + 4) return null; // Need IMEI(8) + type(2) + serial(2) + crc(2)\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); // skip type field in login message body\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            // Check if timezone extension exists\n            if (buf.readableBytes() >= 2 + 4) { // Need extensionBits(2) + serial(2) + crc(2)\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    // Only set if default (raw offset 0)\n                    if (timeZone != null && timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, serial, null);\n            }\n\n            return null;\n\n        } else if (type == MSG_HEARTBEAT) {\n\n            // Heartbeat data: status(1) + voltage(2) + gsm(1) = 4 bytes expected info data\n            if (dataLength < 4 || buf.readableBytes() < 4 + 4) return null; // Check data + serial + crc remaining\n\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // Voltage\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte()); // GSM\n\n            getLastLocation(position, null); // Add last known location if available\n\n            sendResponse(channel, false, type, serial, null);\n\n            return position;\n\n        } else if (type == MSG_ADDRESS_REQUEST) {\n             // Non-standard message/response\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content); // Uses serial 0\n            return null;\n\n        } else if (type == MSG_TIME_REQUEST) {\n             // Non-standard message/response\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content); // Uses serial 0\n            return null;\n\n        } else if (type == MSG_X1_GPS) {\n             if (buf.readableBytes() < (4 + 12 + 2 + 4 + 2 + 1 + 2 + 4 + 4 + 2 + 2 + 4 + 1 + 1) + 4) return null; // Approx length check + S+C\n\n            buf.readUnsignedInt(); // data and alarm\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            buf.readUnsignedShort(); // terminal info\n\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n             // Check readable bytes before reading network info\n             if (buf.readableBytes() < (2 + 1 + 2 + 4) + 4 + 4) return null; // CellTower + driverId + battery + power + S + C\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n\n             if (buf.readableBytes() < (2 + 2 + 4 + 1 + 1) + 4) return null; // battery + power + portInfo + input + output + S + C\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n            long portInfo = buf.readUnsignedInt();\n\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n            int adcCount = BitUtil.between(portInfo, 20, 24);\n             if (buf.readableBytes() < (adcCount * 2) + 4) return null; // ADC + S + C\n            for (int i = 1; i <= adcCount; i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            // No standard response for X1 GPS?\n            return position;\n\n        } else if (type == MSG_X1_PHOTO_INFO) {\n             if (buf.readableBytes() < (6 + 1 + 4 + 4 + 1 + 1 + 1 + 4 + 4) + 4) return null; // Approx length check + S+C\n            buf.skipBytes(6); // time\n            buf.readUnsignedByte(); // fix status\n            buf.readUnsignedInt(); // latitude\n            buf.readUnsignedInt(); // longitude\n            buf.readUnsignedByte(); // camera id\n            buf.readUnsignedByte(); // photo source\n            buf.readUnsignedByte(); // picture format\n\n            int photoDataLength = buf.readInt();\n             if (buf.readableBytes() < (photoDataLength + 4) + 4) return null; // Check photo data + pictureId + S + C\n            ByteBuf photo = Unpooled.buffer(photoDataLength); // Allocate photo buffer\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo); // Store buffer to be filled later\n            sendPhotoRequest(channel, pictureId); // Request photo data\n\n            return null;\n\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n             if (buf.readableBytes() < 6 + 4) return null; // Time + S+C minimum\n             ByteBuf time = buf.readSlice(6);\n             DateBuilder dateBuilder = new DateBuilder()\n                     .setYear(BcdUtil.readInteger(time, 2))\n                     .setMonth(BcdUtil.readInteger(time, 2))\n                     .setDay(BcdUtil.readInteger(time, 2))\n                     .setHour(BcdUtil.readInteger(time, 2))\n                     .setMinute(BcdUtil.readInteger(time, 2))\n                     .setSecond(BcdUtil.readInteger(time, 2));\n             getLastLocation(position, dateBuilder.getDate());\n\n             Network network = new Network();\n\n             int wifiCount = 0;\n             if (type == MSG_WIFI_4) {\n                 if (buf.readableBytes() < 1 + 4) return null;\n                 wifiCount = buf.readUnsignedByte();\n             } else {\n                 // Need to peek at byte 2 relative to start of Wifi data. Start is after time(6).\n                 // Need at least 1 byte for count peek.\n                 if (buf.readableBytes() < 1 + 4) return null;\n                 wifiCount = buf.getUnsignedByte(buf.readerIndex()); // Peek at count byte\n             }\n\n             for (int i = 0; i < wifiCount; i++) {\n                 if (type == MSG_WIFI_4) {\n                      if (buf.readableBytes() < 2 + 6 + 4) return null; // Skip(2) + MAC(6) + S+C\n                     buf.skipBytes(2);\n                 } else {\n                      if (buf.readableBytes() < 6 + 1 + 4) return null; // MAC(6) + RSSI(1) + S+C\n                 }\n                 WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                 wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                         buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                         buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                 if (type != MSG_WIFI_4) {\n                     wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                 }\n                 network.addWifiAccessPoint(wifiAccessPoint);\n             }\n\n             if (type != MSG_WIFI_4) {\n                 if (buf.readableBytes() < 1 + 2 + 1 + 4) return null; // cellCount + mcc + mnc + S+C min\n                 int cellCount = buf.readUnsignedByte();\n                 int mcc = buf.readUnsignedShort();\n                 int mnc = buf.readUnsignedByte();\n                 for (int i = 0; i < cellCount; i++) {\n                      if (buf.readableBytes() < 2 + 2 + 1 + 4) return null; // lac + cid + rssi + S+C\n                     network.addCellTower(CellTower.from(\n                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                 }\n\n                 // Custom response for some WIFI types\n                 if (channel != null) {\n                     ByteBuf response = Unpooled.buffer();\n                     response.writeShort(0x7878);\n                     response.writeByte(0); // Placeholder for length\n                     response.writeByte(type);\n                     response.writeBytes(time.resetReaderIndex());\n                     // Calculate length: 1(type) + 6(time) = 7. Total = 1(len)+7=8? Protocol doc needed.\n                     response.setByte(2, response.writerIndex() - 3); // Set length correctly\n                     // Add serial, crc, end markers if needed for this custom response\n                     response.writeShort(serial); // Assuming standard serial/crc needed\n                     response.writeShort(Crc.crc16Ccitt(response.nioBuffer(2, response.writerIndex() - 2)));\n                     response.writeByte('\\r');\n                     response.writeByte('\\n');\n                     channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                 }\n             }\n             position.setNetwork(network);\n             return position; // Return position for WIFI types\n\n        } else if (type == MSG_INFO) {\n             if (buf.readableBytes() < 2 + 4) return null; // Power(2) + S+C\n             getLastLocation(position, null);\n             position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n             return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n             // Calculate min length for this variant message + S+C\n             if (buf.readableBytes() < 12 + 7 + 1 + 2 + 2 + 4) return null;\n             decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n             decodeLbs(position, buf, type, false);\n             position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n             return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n\n             boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n             // Calculate min length based on format + S+C\n             int minLength = 6 + 2 + 1 + 4; // Time + MCC + MNC + S+C\n             if (variant == Variant.WANWAY_S20) {\n                 minLength += 1; // TA byte\n             }\n             // Need at least one cell/wifi + TA\n             minLength += (longFormat ? 4 + 8 + 1 : 2 + 3 + 1) + 1;\n             if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                     && type != MSG_LBS_2) {\n                 minLength += 1; // wifi count\n             }\n\n             if (buf.readableBytes() < minLength) return null;\n\n             DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                     .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n             getLastLocation(position, dateBuilder.getDate());\n\n             if (variant == Variant.WANWAY_S20) {\n                 buf.readUnsignedByte(); // ta\n             }\n\n             int mcc = buf.readUnsignedShort();\n             int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n             Network network = new Network();\n\n             int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n             for (int i = 0; i < cellCount; i++) {\n                 int lacBytes = longFormat ? 4 : 2;\n                 int cidBytes = longFormat ? 8 : 3;\n                 if (buf.readableBytes() < lacBytes + cidBytes + 1 + 4) break; // Check before reading cell + S+C\n\n                 int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                 int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                 int rssi = -buf.readUnsignedByte();\n                 if (lac > 0 && cid > 0) { // Often cid=0 is invalid\n                     network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                 }\n             }\n\n             if (variant != Variant.WANWAY_S20) {\n                 if (buf.readableBytes() < 1 + 4) return position; // Check TA + S+C\n                 buf.readUnsignedByte(); // ta\n             }\n\n             if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                     && type != MSG_LBS_2) { // Has Wifi part\n                 if (buf.readableBytes() < 1 + 4) return position; // Check wifiCount + S+C\n                 int wifiCount = buf.readUnsignedByte();\n                 for (int i = 0; i < wifiCount; i++) {\n                      if (buf.readableBytes() < 6 + 1 + 4) break; // Check MAC + RSSI + S+C\n                     String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                     network.addWifiAccessPoint(WifiAccessPoint.from(\n                             mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                 }\n             }\n             position.setNetwork(network);\n             return position;\n\n        } else if (type == MSG_STRING) {\n             if (buf.readableBytes() < 1 + 4) return null; // commandLength byte + S+C\n             getLastLocation(position, null);\n             int commandLength = buf.readUnsignedByte();\n\n             if (commandLength > 0) {\n                  if (buf.readableBytes() < commandLength + 4) return null; // Check command data + S+C\n                 buf.readUnsignedInt(); // server flag (reserved)\n                 // Ensure slice length doesn't exceed readable bytes\n                 int dataSliceLength = Math.min(commandLength - 4, buf.readableBytes() - 4);\n                 if (dataSliceLength > 0) {\n                     String data = buf.readSlice(dataSliceLength).toString(StandardCharsets.US_ASCII);\n                     if (data.startsWith(\"<ICCID:\")) {\n                         position.set(Position.KEY_ICCID, data.substring(7, Math.min(27, data.length()))); // Safe substring\n                     } else {\n                         position.set(Position.KEY_RESULT, data);\n                     }\n                 }\n             }\n             return position;\n\n        } else if (type == MSG_BMS) {\n             // Check if buffer has enough data for BMS fields + S+C\n             int bmsDataLength = 8 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 14 * 2 + 2 + 2 + 16 + 2 + 16 + 4 + 4 + 4;\n             if (buf.readableBytes() < bmsDataLength + 4) {\n                 return null; // Not enough data\n             }\n\n             buf.skipBytes(8); // serial number in data? different from packet serial?\n\n             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n\n             position.set(\"relativeCapacity\", buf.readUnsignedByte());\n             position.set(\"remainingCapacity\", buf.readUnsignedShort());\n             // ... rest of BMS fields ...\n             position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n             position.set(\"fullCapacity\", buf.readUnsignedShort());\n             position.set(\"batteryHealth\", buf.readUnsignedByte());\n             position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n             position.set(\"current\", buf.readUnsignedShort());\n             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n             position.set(\"cycleIndex\", buf.readUnsignedShort());\n             for (int i = 1; i <= 14; i++) {\n                 position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n             }\n             position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n             position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n             position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n             position.set(\"batteryVersion\", buf.readUnsignedShort());\n             position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n             position.set(\"batteryStatus\", buf.readUnsignedInt());\n\n             position.set(\"controllerStatus\", buf.readUnsignedInt());\n             position.set(\"controllerFault\", buf.readUnsignedInt());\n\n             sendResponse(channel, false, type, serial, null);\n             return position;\n\n        } else if (type == MSG_STATUS && dataLength == 22) {\n             // Assuming dataLength calculation is correct now. Check readableBytes as well.\n             if (buf.readableBytes() < 22 + 4) return null;\n             getLastLocation(position, null);\n\n             buf.readUnsignedByte(); // information content\n             buf.readUnsignedShort(); // satellites\n             buf.readUnsignedByte(); // alarm\n             buf.readUnsignedByte(); // language\n             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n             buf.readUnsignedByte(); // working mode\n             buf.readUnsignedShort(); // working voltage\n             buf.readUnsignedByte(); // reserved\n             buf.readUnsignedShort(); // working times\n             buf.readUnsignedShort(); // working time\n             int value = buf.readUnsignedShort();\n             double temperature = BitUtil.to(value, 15) * 0.1;\n             position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n             // No response needed for status message?\n             return position;\n\n        } else if (isSupported(type)) { // Generic handler for GPS/LBS/Status combinations\n\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; // Handled elsewhere likely\n            }\n\n            if (hasGps(type)) {\n                // decodeGps needs checks internally or peek data here\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n\n            if (hasLbs(type)) {\n                // decodeLbs needs checks internally or peek data here\n                decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM);\n            }\n\n            if (hasStatus(type)) {\n                // decodeStatus needs checks internally or peek data here\n                decodeStatus(position, buf); // Reads 5 bytes\n                if (variant == Variant.OBD6) {\n                    if (buf.readableBytes() < 8 + 4) return null; // Check for OBD specific + S+C\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); // language\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); // working mode\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    if (buf.readableBytes() < 3 + 4) return null; // Check for standard status + S+C\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                }\n            }\n\n            // Variant specific decoding for MSG_GPS_LBS_1\n            if (type == MSG_GPS_LBS_1) {\n                 if (variant == Variant.GT06E_CARD) {\n                     if (buf.readableBytes() < 4 + 1 + 1 + 1 + 4) return null; // odo + len + license + alarm + swiped + S+C min\n                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                     int len = buf.readUnsignedByte();\n                     if (buf.readableBytes() < len + 1 + 1 + 4) return null;\n                     String data = buf.readCharSequence(len, StandardCharsets.US_ASCII).toString();\n                     buf.readUnsignedByte(); // alarm\n                     buf.readUnsignedByte(); // swiped\n                     position.set(\"driverLicense\", data.trim());\n                 } else if (variant == Variant.BENWAY) {\n                     if (buf.readableBytes() < 2 + 4) return null; // mask + S+C\n                     // ... decode Benway mask ...\n                 } else if (variant == Variant.VXT01) {\n                     // Needs status (5) + power (2) + rssi (1) + alarm ext (1) + S+C(4) = 13 bytes\n                     if (buf.readableBytes() < 13) return null;\n                     decodeStatus(position, buf);\n                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                     buf.readUnsignedByte(); // alarm extension\n                 } else if (variant == Variant.S5) {\n                     // Needs status (5) + power (2) + rssi (1) + alarm (1) + oil (2) + temp (1) + odo (4) + S+C(4) = 20 bytes\n                     if (buf.readableBytes() < 20) return null;\n                     decodeStatus(position, buf);\n                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                     position.set(\"oil\", buf.readUnsignedShort());\n                     int temperature = buf.readUnsignedByte();\n                     if (BitUtil.check(temperature, 7)) {\n                         temperature = -BitUtil.to(temperature, 7);\n                     }\n                     position.set(Position.PREFIX_TEMP + 1, temperature);\n                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                 }\n            }\n\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 4) { // Check ignition+event+archive + S+C\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason\n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n\n            if (type == MSG_GPS_LBS_3) {\n                if (buf.readableBytes() < 2 + 1 + 4) return null; // module + sublen + S+C min\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                 if (buf.readableBytes() < subLength + 4) return null; // Check subdata + S+C\n                switch (module) {\n                    // ... handle modules ...\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n\n            if (buf.readableBytes() == 4 + 4) { // Odometer + S+C\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            } else if (buf.readableBytes() > 4) {\n                // Potential extra data? Log or ignore.\n            }\n\n            if (hasLanguage(type)) {\n                if (buf.readableBytes() < 2 + 4) return null; // Language + S+C\n                buf.readUnsignedShort();\n            }\n\n            if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n                if (buf.readableBytes() < 1 + 4) return null; // Geofence + S+C\n                position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n            }\n\n            // Ensure buffer is consumed up to serial number before sending response\n            int expectedEndIndex = serialIndex;\n            if (buf.readerIndex() != expectedEndIndex) {\n                // Log.error(\"Reader index mismatch before sending response\");\n                 // Attempt to recover if possible, otherwise return null\n                 if (buf.readerIndex() < expectedEndIndex && buf.readableBytes() >= (expectedEndIndex - buf.readerIndex())) {\n                      buf.readerIndex(expectedEndIndex);\n                 } else {\n                      return null; // Cannot send response if data reading is inconsistent\n                 }\n            }\n\n            sendResponse(channel, false, type, serial, null);\n            return position;\n\n        } else if (type == MSG_ALARM) {\n             boolean extendedAlarm = dataLength > 7; // Use calculated dataLength\n             if (extendedAlarm) {\n                  // Check length for GPS data + alarm byte + S+C\n                  if (buf.readableBytes() < 12 + 1 + 4) return null;\n                 decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n             } else {\n                  // Check length for time + alarm byte + S+C\n                  if (buf.readableBytes() < 6 + 1 + 4) return null;\n                 DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                         .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                         .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                 getLastLocation(position, dateBuilder.getDate());\n             }\n             short alarmType = buf.readUnsignedByte();\n             // ... set alarm key based on alarmType ...\n             switch (alarmType) {\n                 case 0x01:\n                     position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                     break;\n                 case 0x80:\n                     position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                     break;\n                 case 0x87:\n                     position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                     break;\n                 case 0x90:\n                     position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                     break;\n                 case 0x91:\n                     position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                     break;\n                 case 0x92:\n                     position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                     break;\n                 case 0x93:\n                     position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                     break;\n                 default:\n                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                     break;\n             }\n             // No standard response for alarm message?\n             return position;\n\n        } else { // Unsupported or command types\n\n            // Skip remaining bytes up to serial number\n            int skipLength = serialIndex - buf.readerIndex();\n            if (skipLength > 0 && buf.readableBytes() >= skipLength + 4) { // Check if can skip AND leave S+C\n                buf.skipBytes(skipLength);\n            } // Otherwise, buffer might be too short or already past data\n\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                // Check if we are exactly at serial index and have 4 bytes (S+S+C+C) left\n                if (buf.readerIndex() == serialIndex && buf.readableBytes() >= 4) {\n                    sendResponse(channel, false, type, serial, null);\n                }\n            }\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}