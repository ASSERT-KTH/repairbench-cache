{
    "generation": "    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal) {\n        // Try to estimate the real UTC instant by subtracting the standard offset first.\n        // Note: getStandardOffset expects UTC, but using instantLocal is a reasonable guess\n        // as standard offsets change infrequently.\n        final int standardOffset = getStandardOffset(instantLocal);\n        final long instantUTCGuess1 = instantLocal - standardOffset;\n        final int offset1 = getOffset(instantUTCGuess1);\n\n        // Adjust the UTC estimate using the first offset guess.\n        final long instantUTCGuess2 = instantLocal - offset1;\n        final int offset2 = getOffset(instantUTCGuess2);\n\n        // If the offsets match, the time might be stable, or within an overlap.\n        if (offset1 == offset2) {\n            // Check for an overlap using the transition at or before the estimated UTC instant.\n            // Find the previous transition relative to the second UTC guess.\n            long prevTrans = previousTransition(instantUTCGuess2);\n            \n            // Check if a previous transition exists and is strictly before the guessed instant.\n            // This avoids issues at the exact transition time and handles cases with no prior transitions.\n            if (prevTrans < instantUTCGuess2) {\n                int offsetPrev = getOffset(prevTrans - 1); // Offset strictly before the transition\n                int offsetAt = getOffset(prevTrans);      // Offset at or after the transition (should == offset2 if stable)\n                int diff = offsetPrev - offsetAt;          // Difference determines transition type\n                \n                // If diff > 0, it signifies an overlap transition (e.g., DST ending).\n                if (diff > 0) {\n                    // Check if the second UTC guess (instantUTCGuess2) falls within the overlap window.\n                    // The overlap window starts at prevTrans (UTC) and lasts for 'diff' milliseconds.\n                    if (instantUTCGuess2 - prevTrans < diff) {\n                        // The instant falls within the overlap. The rule is to return the earlier offset (DST).\n                        return offsetPrev;\n                    }\n                }\n            }\n            // If no overlap is detected for instantUTCGuess2, or if it's after the overlap window,\n            // the consistent offset (offset2) is the correct one.\n            return offset2;\n        } else {\n            // offset1 != offset2: The initial guesses straddle a transition boundary.\n            \n            // Determine the transition type based on offset comparison.\n            // If offset1 < offset2: Represents a gap (e.g., Standard -> DST transition).\n            // Rule: Return the offset *after* the gap (later time). offset2 is potentially this offset.\n            // If offset1 > offset2: Represents an overlap (e.g., DST -> Standard transition).\n            // Rule: Return the *earlier* offset (DST/summer time). offset1 is potentially this offset.\n            \n            // Return the later offset (offset2) if it's a gap (offset1 < offset2),\n            // return the earlier offset (offset1) if it's an overlap (offset1 > offset2).\n            // This selection favours the daylight offset during overlap, and the later offset during gap.\n            return (offset1 > offset2) ? offset1 : offset2;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}