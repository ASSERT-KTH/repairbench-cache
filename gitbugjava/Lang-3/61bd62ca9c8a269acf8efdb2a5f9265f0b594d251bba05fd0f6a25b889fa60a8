{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.StringUtils; // Assuming this import is available\n\n// Add import for NumberUtilsTest context if needed, or assume helpers are within NumberUtils class.\n\n\n// Wrapper class added for context, replace with actual class structure.\nclass NumberUtils {\n\n    // Assume helper methods like isBlank, isDigits, isAllZeros, createFloat, createDouble, etc. exist.\n    // Placeholders for required helper methods if not part of the actual NumberUtils class provided.\n    private static boolean isDigits(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isAllZeros(String str) {\n        if (str == null) {\n            return true; // Treat null as all zeros for this check\n        }\n        for (int i = 0; i < str.length(); i++) {\n             // Ignore sign characters for zero check\n            if (str.charAt(i) == '+' || str.charAt(i) == '-') {\n                 if (i > 0) return false; // Sign not at the start is invalid for simple zero check\n                 continue;\n            }\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        // Check if it contains at least one digit '0' if not blank/just sign\n        return str.length() > 0 && (str.contains(\"0\") || str.equals(\"+\") || str.equals(\"-\") || StringUtils.isBlank(str.replace(\"+\",\"\").replace(\"-\",\"\")) );\n    }\n\n    // Assume createFloat, createDouble, createInteger, createLong, createBigInteger, createBigDecimal\n    // are available as static methods in this class or imported.\n    // Example stubs based on standard behavior:\n    public static Float createFloat(String str) { return Float.valueOf(str); }\n    public static Double createDouble(String str) { return Double.valueOf(str); }\n    public static Integer createInteger(String str) { return Integer.decode(str); }\n    public static Long createLong(String str) { return Long.decode(str); }\n    public static BigInteger createBigInteger(String str) {\n        int radix = 10;\n        int index = 0;\n        boolean negative = false;\n\n        if (str.startsWith(\"-\")) {\n            negative = true;\n            index = 1;\n        } else if (str.startsWith(\"+\")) {\n             index = 1;\n        }\n\n\n        if (str.startsWith(\"0x\", index) || str.startsWith(\"0X\", index)) {\n            radix = 16;\n            index += 2;\n        } else if (str.startsWith(\"#\", index)) {\n            radix = 16;\n            index += 1;\n        } else if (str.startsWith(\"0\", index) && str.length() > index + 1) {\n            // Check if it's potentially octal (and not just \"0\")\n            // BigInteger(str, radix) handles this check internally if radix is 8 or 16?\n            // Let's be explicit: check if it looks octal before setting radix 8\n            boolean looksOctal = true;\n            for(int i = index + 1; i < str.length(); i++){\n                if(str.charAt(i) < '0' || str.charAt(i) > '7'){\n                    looksOctal = false;\n                    break;\n                }\n            }\n            if(looksOctal) {\n                 radix = 8;\n                 index += 1; // Skip the leading '0' for octal parsing\n            }\n             // else remain radix 10, index stays same (BigInteger parses \"0\" or \"0decimal\" as decimal)\n        }\n\n\n        if (index == 0 && (str.startsWith(\"0x\") || str.startsWith(\"0X\"))) {\n             radix = 16; index = 2; // Handle 0x prefix without sign\n        } else if (index == 0 && str.startsWith(\"#\")) {\n            radix = 16; index = 1; // Handle # prefix without sign\n        } else if (index == 0 && str.startsWith(\"0\") && str.length() > 1 && radix == 10) {\n            // Check octal without sign again, if not handled above.\n             boolean looksOctal = true;\n             for(int i = 1; i < str.length(); i++){\n                 if(str.charAt(i) < '0' || str.charAt(i) > '7'){\n                    looksOctal = false;\n                    break;\n                 }\n             }\n             if(looksOctal) {\n                 radix = 8; index = 1;\n             }\n        }\n\n        String numberPart = str.substring(index);\n        if (numberPart.isEmpty()) {\n            // Handle cases like \"-\", \"+\", \"0x\", \"-0x\" which result in empty numberPart\n            throw new NumberFormatException(\"Cannot parse empty input after prefix/sign: \\\"\" + str + \"\\\"\");\n        }\n\n\n        BigInteger bi = new BigInteger(numberPart, radix);\n        return negative ? bi.negate() : bi;\n    }\n\n    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }\n\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * or exponent. If found, it tries Float, then Double, then BigDecimal, returning\n     * the smallest type that represents the value accurately (without precision loss\n     * compared to the string representation and without overflow/underflow issues).\n     * If no decimal point or exponent is found, it tries Integer, then Long, then\n     * BigInteger (handling hex and octal prefixes).</p>\n     *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigInteger as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n\n        // Check for hex prefix using createBigInteger's logic (which handles prefixes)\n        boolean isHex = (str.startsWith(\"0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0x\") || str.startsWith(\"-0X\") || str.startsWith(\"#\") || str.startsWith(\"-#\"));\n\n        if (isHex) {\n            // Use helper methods assumed to handle hex decode correctly\n             try {\n                // Try integer first, then long, then big integer for hex\n                // Length check is only a heuristic, actual value matters\n                 return createInteger(str);\n             } catch (NumberFormatException nfe1) {\n                 try {\n                     return createLong(str);\n                 } catch (NumberFormatException nfe2) {\n                     // Use createBigInteger which should robustly handle hex\n                     return createBigInteger(str);\n                 }\n             }\n        }\n\n        // Not hex, proceed with standard parsing\n        final char lastChar = str.charAt(str.length() - 1);\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Original calculation +1 is wrong.\n\n        // Correct calculation for expPos (position of 'e' or 'E')\n        int expIndicatorPos = str.indexOf('e');\n        if (expIndicatorPos == -1) {\n            expIndicatorPos = str.indexOf('E');\n        }\n\n        String mant; // Mantissa part (before decimal or exponent)\n        String decPart; // Decimal part (after '.')\n        String expPart; // Exponent part (after 'e'/'E')\n\n        if (decPos > -1) { // Contains decimal point\n            if (expIndicatorPos > -1) { // Contains exponent indicator\n                if (expIndicatorPos < decPos || expIndicatorPos >= str.length() - 1) { // Invalid exponent position or no digits after E\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, decPos);\n                decPart = str.substring(decPos + 1, expIndicatorPos);\n                expPart = str.substring(expIndicatorPos + 1);\n            } else { // Contains decimal, no exponent\n                mant = str.substring(0, decPos);\n                decPart = str.substring(decPos + 1);\n                expPart = null;\n            }\n        } else { // No decimal point\n            if (expIndicatorPos > -1) { // Contains exponent indicator\n                 if (expIndicatorPos == 0 || expIndicatorPos >= str.length() - 1) { // exponent invalid position or no digits after E\n                     // Check for sign before exponent: \"-e1\", \"+e1\", \"e1\" are invalid.\n                     if (expIndicatorPos == 0 || (expIndicatorPos == 1 && (str.charAt(0) == '+' || str.charAt(0) == '-'))) {\n                          throw new NumberFormatException(str + \" is not a valid number.\");\n                     }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = str.substring(0, expIndicatorPos);\n                decPart = null;\n                expPart = str.substring(expIndicatorPos + 1);\n            } else { // No decimal, no exponent -> Integer type\n                mant = str; // The whole string is the mantissa for integer types\n                decPart = null;\n                expPart = null;\n            }\n        }\n\n        // Check for type suffix if the number is not an integer type\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            String numeric; // The part of the string excluding the suffix\n            String exponentToCheck; // The exponent part excluding the suffix\n\n            // Determine numeric part and adjust exponentToCheck if suffix was part of it\n            if (expPart != null && !expPart.isEmpty() && expPart.endsWith(String.valueOf(lastChar))) {\n                numeric = str.substring(0, str.length() - 1);\n                exponentToCheck = expPart.substring(0, expPart.length() - 1);\n                 // Check if exponent became empty or just sign after removing suffix\n                 if (exponentToCheck.isEmpty() || exponentToCheck.equals(\"+\") || exponentToCheck.equals(\"-\")) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n            } else if (expPart == null && (lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D' || lastChar == 'l' || lastChar == 'L')) {\n                // Suffix is present, but there's no exponent part.\n                numeric = str.substring(0, str.length() - 1);\n                exponentToCheck = null; // No exponent\n            } else {\n                // Last char is not a digit or '.', and not a valid suffix in a valid position\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n            // isAllZeros check based on original mantissa and the exponent part without the suffix\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exponentToCheck);\n\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    // Check if valid integer format before suffix\n                    if (decPart == null && exponentToCheck == null) {\n                         // isDigits check now applies to 'numeric' part (mantissa)\n                         // Need robust check for integer format (sign + digits)\n                         if (numeric.isEmpty() || (numeric.charAt(0) == '-' && !isDigits(numeric.substring(1))) || (numeric.charAt(0) == '+') || (numeric.charAt(0) != '-' && !isDigits(numeric))) {\n                              // Handle sign correctly, allow only digits after sign\n                              if(numeric.length() > 1 && (numeric.charAt(0) == '+' || numeric.charAt(0) == '-') && !isDigits(numeric.substring(1))){\n                                   throw new NumberFormatException(str + \" is not a valid number.\");\n                              } else if (numeric.length() == 1 && (numeric.charAt(0) == '+' || numeric.charAt(0) == '-')) {\n                                   throw new NumberFormatException(str + \" is not a valid number.\"); // Only sign is invalid\n                              } else if (numeric.length() > 0 && numeric.charAt(0) != '+' && numeric.charAt(0) != '-' && !isDigits(numeric)) {\n                                   throw new NumberFormatException(str + \" is not a valid number.\");\n                              }\n                         }\n                        try {\n                            // Use createLong assumed to handle octal/hex prefixes in 'numeric'\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) {\n                            // Use createBigInteger assumed to handle octal/hex prefixes in 'numeric'\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\"); // Invalid format for L\n\n                case 'f':\n                case 'F':\n                    try {\n                        final Float f = createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                        // Float failed (infinite or zero issue), fall through to try Double\n                    } catch (final NumberFormatException nfe) { /* Fall through */ }\n                     // Fall through intended for F -> D -> BigDecimal\n\n                case 'd':\n                case 'D':\n                    try {\n                        final Double d = createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                        // Double failed (infinite or zero issue), fall through to try BigDecimal\n                    } catch (final NumberFormatException nfe) { /* Fall through */ }\n                    // Fall through intended for D -> BigDecimal\n                    try {\n                        // Final attempt with BigDecimal for F/D suffixes\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                // Default case is covered by the checks before the switch\n            }\n        } else {\n            // No type suffix. Determine type: Integer or Floating point.\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(expPart); // Use original parsed parts\n\n            if (decPart == null && expPart == null) { // Integer type\n                 // Hex was handled earlier. Octal is handled by createInteger/Long/BigInteger.\n                 try {\n                     return createInteger(str);\n                 } catch (final NumberFormatException nfe1) {\n                     try {\n                         return createLong(str);\n                     } catch (final NumberFormatException nfe2) {\n                         // Must be BigInteger or invalid format. createBigInteger handles octal/hex.\n                         return createBigInteger(str);\n                     }\n                 }\n            } else { // Floating point type (has decimal or exponent)\n                 // Try Float -> Double -> BigDecimal, ensuring precision and range.\n                 Float f = null;\n                 try { f = createFloat(str); } catch (NumberFormatException ignore) {}\n\n                 if (f != null && !f.isInfinite()) {\n                     try {\n                         // Compare BigDecimal representations to check for precision loss\n                         if (new BigDecimal(f.toString()).compareTo(new BigDecimal(str)) == 0) {\n                              // Additional check for underflow to zero from non-zero input\n                             if (!(f.floatValue() == 0.0F && !allZeros)) {\n                                 return f; // Float is suitable\n                             }\n                         }\n                         // Use f.toString() instead of String.valueOf(f) as BigDecimal(String.valueOf(f)) might fail for NaN/Infinity strings.\n                         // isInfinite check already handles NaN/Infinity floats.\n                     } catch (NumberFormatException ignore) { /* BigDecimal creation failed */ }\n                 }\n\n                 Double d = null;\n                 try { d = createDouble(str); } catch (NumberFormatException ignore) {}\n\n                 if (d != null && !d.isInfinite()) {\n                      try {\n                         // Compare BigDecimal representations\n                         if (new BigDecimal(d.toString()).compareTo(new BigDecimal(str)) == 0) {\n                             // Check zero condition\n                             if (!(d.doubleValue() == 0.0D && !allZeros)) {\n                                 return d; // Double is suitable\n                             }\n                         }\n                      } catch (NumberFormatException ignore) { /* BigDecimal creation failed */ }\n                 }\n\n                 // If neither Float nor Double were suitable, return BigDecimal\n                 try {\n                     return createBigDecimal(str);\n                 } catch (NumberFormatException e) {\n                     // If even BigDecimal fails, the format is fundamentally invalid.\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n            }\n        }\n        // Should not be reachable if logic is correct\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}