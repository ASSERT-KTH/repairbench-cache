{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n     *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            char firstNonPrefixChar = '\\0'; // Check first non-prefix character after potential sign\n            int signAdjust = (str.charAt(0) == '-') ? 1 : 0;\n            if (pfxLen + signAdjust < str.length()) {\n                 firstNonPrefixChar = str.charAt(pfxLen + signAdjust);\n            } else {\n                 // String ends after prefix (e.g. \"0x\", \"-#\")\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n            final int hexDigits = str.length() - pfxLen;\n             if (hexDigits > 16 || (hexDigits == 16 && firstNonPrefixChar > '7')) { // Rough check - BigInteger handles actual overflow\n                return createBigInteger(str); // Assumes helper handles prefixes like #/-# and 0x/-0x\n            }\n            if (hexDigits > 8 || (hexDigits == 8 && firstNonPrefixChar > '7')) { // Rough check - Long handles actual overflow\n                return createLong(str); // Assumes helper handles prefixes\n            }\n            return createInteger(str); // Assumes helper handles prefixes\n        }\n\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        // Find the first exponent separator ('e' or 'E'), ensuring it's valid\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n        // Validate exponent position\n        if (expPos > -1) {\n            // Exponent cannot be the last char\n            if (expPos == str.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            // Exponent cannot appear before a decimal point (if one exists)\n            if (decPos != -1 && expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            // Check for multiple exponent characters\n            if (str.indexOf('e', expPos + 1) != -1 || str.indexOf('E', expPos + 1) != -1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n\n        if (decPos > -1) { // there is a decimal point\n            if (expPos > -1) { // there is an exponent\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else { // No decimal point\n            if (expPos > -1) {\n                 if (expPos == 0 && !str.startsWith(\"+\") && !str.startsWith(\"-\")) { // Handle \"e1\", \"E1\" as having empty mantissa\n                    mant = \"\";\n                 } else {\n                    mant = str.substring(0, expPos);\n                 }\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n\n        if (!Character.isDigit(lastChar) && lastChar != '.') { // Ends with a potential type qualifier\n            // Determine exponent string part, excluding the qualifier\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            // The numeric part excludes the type qualifier\n            final String numeric = str.substring(0, str.length() - 1);\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check for valid long format: no decimal point, no exponent part found in 'numeric'\n                    if (dec == null && exp == null && StringUtils.isNotEmpty(numeric) &&\n                        (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Use createLong, assuming it handles hex/octal prefixes correctly (e.g., via Long.decode)\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) {\n                            // Fallback to BigInteger if Long parsing fails (e.g., overflow)\n                            try {\n                                return createBigInteger(numeric);\n                            } catch (final NumberFormatException nfe2) {\n                                // Propagate if BigInteger also fails\n                                throw new NumberFormatException(str + \" is not a valid number.\");\n                            }\n                        }\n                    }\n                    // Invalid format for 'L' suffix (e.g., has decimal or exponent)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = createFloat(numeric);\n                        // Check validity: not infinite, and not zero unless the original numeric string was zero\n                        boolean isSpuriousZeroF = false;\n                        // Check for 0.0f result, ignoring NaN and Infinity\n                        if (f.floatValue() == 0.0f && !f.isInfinite()) {\n                            boolean originalIsZero = false;\n                            try {\n                                // Use BigDecimal to reliably check if the numeric part is zero\n                                originalIsZero = createBigDecimal(numeric).signum() == 0;\n                            } catch (final NumberFormatException nfe_bd) {\n                                // If BigDecimal parsing fails, assume it wasn't zero\n                            }\n                            isSpuriousZeroF = !originalIsZero;\n                        }\n\n                        if (!(f.isInfinite() || isSpuriousZeroF)) {\n                            return f; // Float is valid and represents the number adequately\n                        }\n                        // Javadoc implies for 'f'/'F', if Float is not adequate (Infinite/spurious zero), it's an error\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n\n                    } catch (final NumberFormatException nfe) {\n                        // Catch NFE from createFloat or our checks, rethrow indicating invalid format\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = createDouble(numeric);\n                        // Check validity: not infinite, not spurious zero\n                        boolean isSpuriousZeroD = false;\n                        if (d.doubleValue() == 0.0d && !d.isInfinite()) {\n                            boolean originalIsZero = false;\n                            try {\n                                originalIsZero = createBigDecimal(numeric).signum() == 0;\n                            } catch (final NumberFormatException nfe_bd) {\n                                // Assume non-zero if BigDecimal fails\n                            }\n                            isSpuriousZeroD = !originalIsZero;\n                        }\n\n                        if (!(d.isInfinite() || isSpuriousZeroD)) {\n                            return d; // Double is valid\n                        }\n                        // If Double is infinite or spurious zero, fall through to BigDecimal as per Javadoc\n\n                    } catch (final NumberFormatException nfe) {\n                        // Ignore NFE from createDouble, allow fallback to BigDecimal\n                    }\n                    // Fallback for 'd'/'D' if Double was unsuitable or failed parsing\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) {\n                        // If BigDecimal also fails for the numeric part\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                    break; // Break after successfully handling 'd'/'D' or throwing\n\n                default :\n                    // The last character is not a digit, '.', or a valid type qualifier\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } // End of type qualifier handling\n\n        // No type qualifier: Determine type based on presence of decimal/exponent\n        if (expPos == -1 && decPos == -1) { // Integral number (no decimal, no exponent)\n            // Try Integer -> Long -> BigInteger. Assumes helpers handle prefixes (octal/hex).\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { /* ignore */ }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { /* ignore */ }\n            // Fallback to BigInteger for large integers or if other parsers fail\n            return createBigInteger(str); // Let BigInteger handle range and prefixes\n\n        }\n\n        // Non-integral number (has decimal point or exponent): Try Float -> Double -> BigDecimal\n        // Try Float\n        try {\n            final Float f = createFloat(str);\n            boolean isSpuriousZeroF = false;\n            if (f.floatValue() == 0.0f && !f.isInfinite()) {\n                boolean originalIsZero = false;\n                try {\n                    originalIsZero = createBigDecimal(str).signum() == 0;\n                } catch (final NumberFormatException nfe_bd) { /* assume non-zero */ }\n                isSpuriousZeroF = !originalIsZero;\n            }\n\n            // Return Float if it's finite and not a spurious zero\n            if (!(f.isInfinite() || isSpuriousZeroF)) {\n                return f;\n            }\n        } catch (final NumberFormatException nfe) { /* ignore */ }\n\n        // Try Double\n        try {\n            final Double d = createDouble(str);\n            boolean isSpuriousZeroD = false;\n            if (d.doubleValue() == 0.0d && !d.isInfinite()) {\n                boolean originalIsZero = false;\n                try {\n                    originalIsZero = createBigDecimal(str).signum() == 0;\n                } catch (final NumberFormatException nfe_bd) { /* assume non-zero */ }\n                isSpuriousZeroD = !originalIsZero;\n            }\n\n            // Return Double if it's finite and not a spurious zero\n            if (!(d.isInfinite() || isSpuriousZeroD)) {\n                return d;\n            }\n        } catch (final NumberFormatException nfe) { /* ignore */ }\n\n        // Fallback to BigDecimal if Float and Double were unsuitable or failed\n        return createBigDecimal(str); // Let BigDecimal handle it, possibly throwing NFE if invalid\n    }\n\n    // Helper methods assumed to exist (stubs for context):\n    private static boolean isDigits(final String str) {\n        // Checks if the string contains only Unicode digits.\n        // Implementation details omitted for brevity. Assumed correct.\n        if (StringUtils.isEmpty(str)) return false;\n        for (char c : str.toCharArray()) if (!Character.isDigit(c)) return false;\n        return true;\n    }\n\n    private static Integer createInteger(final String str) {\n        // Assumed to use Integer.decode(str) to handle hex/octal prefixes\n        return Integer.decode(str);\n    }\n\n    private static Long createLong(final String str) {\n        // Assumed to use Long.decode(str) to handle hex/octal prefixes\n        return Long.decode(str);\n    }\n\n    private static BigInteger createBigInteger(final String str) {\n        // Needs to handle # hex prefix manually if not using a custom parser.\n        String parseStr = str;\n        int radix = 10;\n        if (str.startsWith(\"#\")) {\n            parseStr = str.substring(1);\n            radix = 16;\n        } else if (str.startsWith(\"-#\")) {\n            parseStr = \"-\" + str.substring(2); // Keep sign separate? No, BigInteger handles it.\n            radix = 16;\n        } else if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n             // BigInteger(String) handles \"0x\" prefix but not \"#\"\n             // Let BigInteger handle these standard cases\n        } else if (str.startsWith(\"0\") && str.length() > 1 && !str.contains(\".\")) { // Check for octal prefix, avoid decimals like \"0.5\"\n             // BigInteger handles leading 0 as octal if no radix specified\n        }\n         // Use constructor that handles signs and standard prefixes (0x, 0)\n         // or specific radix for #\n        if (radix == 16) {\n             return new BigInteger(parseStr, 16);\n        }\n        return new BigInteger(parseStr); // Handles decimal, \"0x\", and octal \"0\"\n    }\n\n\n    private static Float createFloat(final String str) {\n        return Float.valueOf(str);\n    }\n\n    private static Double createDouble(final String str) {\n        return Double.valueOf(str);\n    }\n\n    private static java.math.BigDecimal createBigDecimal(final String str) {\n        // Basic implementation, might need more robust handling for edge cases if necessary\n        return new java.math.BigDecimal(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}