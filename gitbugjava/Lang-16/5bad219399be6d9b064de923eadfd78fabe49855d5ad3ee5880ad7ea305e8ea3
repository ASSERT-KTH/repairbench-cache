{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen += pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) {\n            // we have a hex number\n            char firstSigDigit = 0; // strip leading zeroes\n            for(int i = pfxLen; i < str.length(); i++) {\n                firstSigDigit = str.charAt(i);\n                if (firstSigDigit == '0') {\n                    pfxLen++;\n                } else {\n                    break;\n                }\n            }\n            final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many digits for a long\n                return createBigInteger(str);\n            }\n            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many digits for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // slightly unorthodox, but works functionally\n\n        // Detect if the return type is requested by the caller\n        boolean requestType = !Character.isDigit(lastChar) && lastChar != '.';\n\n        if (decPos > -1) { // there is a decimal point\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // exponent appears before decimal point or is empty\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else { // no exponent\n                // last character is the trailing digit if not requesting type\n                dec = str.substring(decPos + 1, requestType ? str.length() -1 : str.length());\n            }\n            mant = str.substring(0, decPos);\n        } else { // no decimal point\n            if (expPos > -1) { // there is an exponent\n                if (expPos > str.length()) { // exponent is empty\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else { // no exponent\n                // last character is the trailing digit if not requesting type\n                mant = requestType ? str.substring(0, str.length() -1) : str;\n            }\n            dec = null;\n        }\n        if (requestType) {\n            //User specified a type suffix\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1); // String representing the number without the suffix\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // mantissa and exponent are all zeros\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null // no decimal point or exponent\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { //requesting Long\n                            try {\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) { // NOPMD\n                                // Too big for a long\n                            }\n                            return createBigInteger(numeric); // If Long failed, try BigInteger\n                    }\n                    // Had a decimal point or exponent, or not digits, invalid format for Long type\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' : //requesting Float\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        //Must be a valid float number, and not infinite, and not zero when it shouldn't be\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$ - Fall through to Double if Float fails\n                case 'd' :\n                case 'D' : //requesting Double\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Must be a valid double number, and not infinite, and not zero when it shouldn't be\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                         // ignore the bad number\n                    }\n                    try {\n                         // If Double failed, try BigDecimal\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$ - Fall through to invalid format if BigInteger fails\n                default : // unknown type suffix\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n             // No type suffix, let's try determining the type best fit\n            if (expPos > -1 && expPos < str.length() - 1) {\n                // There is an exponent && it is not the last character\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) { // No decimal point or exponent - call is Integer / Long / BigInteger\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                return createBigInteger(str); // Should always work\n            } else { // Has a decimal point or exponent - call is Float / Double / BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    // Check if it's finite and if the value is zero, ensure the mantissa/exponent were also zero\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                     // Check if it's finite and if the value is zero, ensure the mantissa/exponent were also zero\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        //Ensure that the requested precision is satisfied\n                        //There are some cases where \u0636loat might have been created indicating that the number was 0.0\n                        //but the string was something like 1e-320 - double can handle this but float can't\n                        //So if the string number is != 0 but the value obtained is 0.0, then this is not a valid double representation\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str); // Should always work\n\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}