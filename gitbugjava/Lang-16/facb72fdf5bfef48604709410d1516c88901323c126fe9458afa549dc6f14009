{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\n// Assuming StringUtils, isDigits, isAllZeros, createInteger, createLong, createBigInteger,\n// createFloat, createDouble, createBigDecimal are defined elsewhere and function correctly.\n\n/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n * <p>First, the value is examined for a type qualifier on the end\n * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n * trying to create successively larger types from the type specified\n * until one is found that can represent the value.</p>\n *\n * <p>If a type specifier is not found, it will check for a decimal point\n * and then try successively larger types from <code>Integer</code> to\n * <code>BigInteger</code> and from <code>Float</code> to\n * <code>BigDecimal</code>.</p>\n *\n * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n * will be interpreted as a hexadecimal integer.  Values with leading\n * <code>0</code>'s will not be interpreted as octal.</p>\n *\n * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n *\n * <p>This method does not trim the input string, i.e., strings with leading\n * or trailing spaces will generate NumberFormatExceptions.</p>\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string (or null if the input is null)\n * @throws NumberFormatException if the value cannot be converted\n */\npublic static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // -- BEGIN HEX HANDLING --\n    // Check for hex prefixes explicitly, handling both cases.\n    if (str.startsWith(\"0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n        char lastChar = str.charAt(str.length() - 1);\n        // Check for Long qualifier 'L' or 'l'\n        if ((lastChar == 'l' || lastChar == 'L') && str.length() > 1) {\n            // Hexadecimal Long or BigInteger\n            String numeric = str.substring(0, str.length() - 1); // String without L/l\n             // Determine sign and prefix length\n             boolean isNegative = numeric.startsWith(\"-\");\n             int prefixLen = isNegative ? 3 : 2; // Length of \"-0x\" or \"0x\"\n             // Ensure there are digits after the prefix\n             if (numeric.length() <= prefixLen) {\n                  throw new NumberFormatException(str + \" is not a valid number.\"); // Handles \"0xL\", \"-0xL\" etc.\n             }\n            try {\n                // Long.decode handles \"[-]0x...\" prefix and throws NFE if format is invalid or value is too large\n                return Long.decode(numeric);\n            } catch (NumberFormatException nfe) {\n                // If Long.decode fails (e.g., too large), try BigInteger\n                try {\n                    String numberPart = isNegative ? numeric.substring(prefixLen) : numeric.substring(prefixLen); // Strip sign and \"0x\" / \"0X\"\n                    BigInteger bigInt = new BigInteger(numberPart, 16);\n                    if (isNegative) {\n                        bigInt = bigInt.negate();\n                    }\n                    return bigInt;\n                } catch (NumberFormatException e) {\n                     // If BigInteger parsing also fails, the format is truly invalid\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            }\n        } else {\n            // Hexadecimal without L/l suffix - delegate to createInteger\n            // Assuming createInteger handles hex format and potential promotion to Long/BigInteger if needed.\n             try {\n                return createInteger(str);\n             } catch (NumberFormatException nfe) {\n                 // If createInteger throws for a valid hex number (e.g., too large),\n                 // it indicates a limitation or bug in createInteger itself.\n                 // The original code relied on createInteger here.\n                 // Rethrow the exception if createInteger fails.\n                 throw nfe;\n             }\n        }\n    }\n    // -- END HEX HANDLING --\n\n    // Non-hexadecimal number processing starts here\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    // Correctly find the position of 'e' or 'E'\n    int expPos = str.indexOf('e');\n    if (expPos == -1) {\n        expPos = str.indexOf('E');\n    }\n\n    // Parse mantissa, decimal, exponent parts & validate structure\n    if (decPos > -1) { // Contains decimal point '.'\n        if (expPos > -1) { // Contains exponent 'e' or 'E'\n            // Validate exponent position relative to decimal point and end of string\n            if (expPos < decPos || expPos == str.length() - 1) { // Invalid format like \"1.e2\", \"1.2e\"\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n            mant = str.substring(0, decPos);\n        } else { // No exponent\n            dec = str.substring(decPos + 1);\n            mant = str.substring(0, decPos);\n        }\n    } else { // No decimal point '.'\n        if (expPos > -1) { // Contains exponent 'e' or 'E'\n             // Validate exponent position relative to end of string\n            if (expPos == str.length() - 1) { // Invalid format like \"1e\", \"123e\"\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else { // No decimal, no exponent (potential integer)\n            mant = str;\n        }\n        dec = null; // No decimal part found\n    }\n\n    // Check for type qualifiers (L, F, D) if last char is not a digit or '.'\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // Extract exponent part if present, removing the qualifier\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = str.substring(0, str.length() - 1); // String without qualifier\n        // Check if the significant parts (mantissa and exponent) are all zeros\n        // Assumes isAllZeros handles null input appropriately (e.g., returns true).\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                // Hex specific 'L' is handled above. This is for decimal numbers ending in L.\n                // Ensure it's a valid integer format (no decimal/exponent) and contains digits.\n                if (dec == null && exp == null && !numeric.isEmpty() && (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                    try {\n                        // Delegate to createLong, assuming it handles parsing.\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // Fallback to BigInteger if createLong fails (e.g., too large)\n                        return createBigInteger(numeric);\n                    }\n                }\n                // Invalid format for L/l qualifier (e.g., \"1.2L\", \"1e2L\")\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = createFloat(numeric);\n                    // Check if Float representation is suitable (not infinite, not zero for non-zero input)\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                     // Ignore NFE from createFloat (e.g., \"1eF\"), fall through to try Double/BigDecimal\n                }\n                //$FALL-THROUGH$ // Fall through intended\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = createDouble(numeric);\n                     // Check if Double representation is suitable (Corrected: use d.doubleValue())\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore NFE from createDouble, fall through to try BigDecimal\n                }\n                //$FALL-THROUGH$ // Fall through intended\n                try {\n                    // Try BigDecimal as a final fallback for F/f/D/d qualifiers\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                     // If createBigDecimal also fails, fall through to default error case\n                }\n                //$FALL-THROUGH$ // Fall through to default error case\n            default :\n                // Handles invalid qualifiers or cases where all numeric parsing failed\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n\n    } else { // No type qualifier (last char is digit or '.')\n        // Extract exponent part if present (validity checked before this block)\n        if (expPos > -1) {\n            exp = str.substring(expPos + 1);\n        } else {\n            exp = null;\n        }\n\n        // Determine type based on presence of decimal or exponent\n        if (dec == null && exp == null) { // Should be Integer/Long/BigInteger (Decimal)\n            // Hex was handled earlier. This handles plain decimal integers.\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }\n            // Final fallback for large integers\n            return createBigInteger(str);\n        } else { // Should be Float/Double/BigDecimal\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                 // Check suitability (non-Infinite, non-zero unless truly zero)\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }\n            try {\n                Double d = createDouble(str);\n                 // Check suitability (Corrected: use d.doubleValue())\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) { /* Ignore, try next larger type */ }\n            // Final fallback for floating point numbers\n            return createBigDecimal(str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}