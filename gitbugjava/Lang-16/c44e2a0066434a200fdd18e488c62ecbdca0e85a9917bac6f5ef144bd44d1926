{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.StringUtils;\n\n// Assume helper methods like isDigits, isAllZeros, createInteger, createLong, etc., exist and work correctly.\n// These might be static methods within the same NumberUtils class or imported.\n// For the fix, we assume their existence and correct behavior based on typical implementations.\n\npublic static class NumberUtils { // Added class wrapper for context, assume helpers are within this class or accessible\n\n    // Assume necessary helper methods like isDigits, isAllZeros are available:\n    private static boolean isDigits(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isAllZeros(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return true; // Treat empty as zeros for this check's purpose\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            char c = str.charAt(i);\n            // Allow sign at the start\n            if (i == 0 && (c == '+' || c == '-')) {\n                continue;\n            }\n            if (c != '0') {\n                return false; // Found non-zero digit\n            }\n        }\n        return true; // All digits were zero\n    }\n\n    // Assume createX methods wrapping standard parsing logic\n    public static Integer createInteger(String str) { return Integer.decode(str); }\n    public static Long createLong(String str) { return Long.decode(str); }\n    public static BigInteger createBigInteger(String str) {\n        int radix = 10;\n        int index = 0;\n        boolean negative = false;\n        if (str.startsWith(\"-\")) {\n            negative = true;\n            index++;\n        }\n        if (str.startsWith(\"0x\", index) || str.startsWith(\"0X\", index)) {\n            index += 2;\n            radix = 16;\n        } else if (str.startsWith(\"#\", index)) {\n            index++;\n            radix = 16;\n        } else if (str.startsWith(\"0\", index) && str.length() > index + 1) {\n            // Octal? Javadoc says no octal. But BigInteger constructor handles it.\n            // For consistency with javadoc, treat leading 0 as decimal unless hex prefix.\n            // Let's stick to BigInteger(String) which handles decimal primarily.\n            // If strict no-octal needed, add validation here.\n        }\n         // Check for empty string after prefix/sign removal\n         if (index >= str.length()){\n              throw new NumberFormatException(\"Cannot parse empty number\");\n         }\n\n        BigInteger val = new BigInteger(str.substring(index), radix);\n        return negative ? val.negate() : val;\n    }\n    public static Float createFloat(String str) { return Float.valueOf(str); }\n    public static Double createDouble(String str) { return Double.valueOf(str); }\n    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }\n\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // protection for poorness in java.lang.BigDecimal\n            return null;\n        }\n\n        // Hexadecimal check (case-insensitive) - FIXED\n        if (str.startsWith(\"0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n            int hexDigitsPos = (str.charAt(0) == '-') ? 3 : 2;\n            if (hexDigitsPos >= str.length()) { // e.g., \"0x\" is invalid\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            // Handle optional 'L' suffix for hex numbers\n            char lastChar = str.charAt(str.length() - 1);\n            String hexNumeric;\n            boolean hasHexLQualifier = false;\n\n            if (lastChar == 'L' || lastChar == 'l') {\n                hexNumeric = str.substring(0, str.length() - 1);\n                hasHexLQualifier = true;\n                // Re-check prefix length against potentially shorter hexNumeric\n                if (hexDigitsPos >= hexNumeric.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            } else {\n                hexNumeric = str;\n                hasHexLQualifier = false;\n            }\n\n            // Use BigInteger to parse hex, then check if it fits smaller types if no L qualifier\n            BigInteger val;\n            try {\n                val = createBigInteger(hexNumeric); // Assumes createBigInteger handles hex prefix\n            } catch (NumberFormatException nfe) {\n                 // Improve error message potentially\n                 throw new NumberFormatException(\"'\" + str + \"' is not a valid number. \" + nfe.getMessage());\n            }\n\n            if (!hasHexLQualifier) {\n                // Try to return smaller type if value fits\n                 if (val.bitLength() <= 31) { // Fits in Integer? (signed 32-bit)\n                     return Integer.valueOf(val.intValue());\n                 }\n                 if (val.bitLength() <= 63) { // Fits in Long? (signed 64-bit)\n                     return Long.valueOf(val.longValue());\n                 }\n            }\n            // Return BigInteger if 'L' suffix was present or value too large for Long\n            return val;\n        }\n\n\n        // --- Non-hexadecimal path ---\n\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        String numeric; // String without qualifier\n        boolean hasQualifier = false;\n\n        // Check for qualifier and extract the numeric part\n        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {\n            if (lastChar == 'D' || lastChar == 'd' || lastChar == 'F' || lastChar == 'f' || lastChar == 'L' || lastChar == 'l') {\n                numeric = str.substring(0, str.length() - 1);\n                hasQualifier = true;\n                if (numeric.isEmpty()) { // e.g., \"L\", \".D\"\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                 // Avoid scientific notation ending in qualifier, e.g. 1e1L (invalid Java syntax)\n                 // Let downstream parsing handle this, simplifies logic here.\n            } else {\n                // Ends with an invalid letter\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // No letter qualifier at the end (could end with digit, '.', 'e', 'E')\n            numeric = str;\n            hasQualifier = false;\n        }\n\n        // Find decimal point and exponent marker ('e' or 'E') in the numeric part\n        final int decPos = numeric.indexOf('.');\n        int expPos = numeric.indexOf('e'); // Corrected calculation - FIXED\n        if (expPos == -1) {\n            expPos = numeric.indexOf('E');\n        }\n\n        // Split numeric into mantissa, decimal, exponent parts (mainly for allZeros check)\n        if (decPos > -1) {\n            // Contains decimal point\n            if (expPos > -1) {\n                // Contains exponent too\n                if (expPos < decPos || expPos >= numeric.length()) { // Check bounds and order\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = numeric.substring(0, decPos);\n                dec = numeric.substring(decPos + 1, expPos);\n                exp = numeric.substring(expPos + 1);\n            } else { // No exponent\n                mant = numeric.substring(0, decPos);\n                dec = numeric.substring(decPos + 1);\n                exp = null;\n            }\n        } else { // No decimal point\n            if (expPos > -1) {\n                // Contains exponent\n                 if (expPos >= numeric.length()) { // Check bounds\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = numeric.substring(0, expPos);\n                dec = null;\n                exp = numeric.substring(expPos + 1);\n            } else { // No decimal, no exponent\n                mant = numeric;\n                dec = null;\n                exp = null;\n            }\n        }\n\n        // Validate exponent part if present\n        if (exp != null) {\n            boolean expValid = false;\n            if (!exp.isEmpty()) {\n                char firstChar = exp.charAt(0);\n                String expDigits = (firstChar == '+' || firstChar == '-') ? exp.substring(1) : exp;\n                // Ensure exponent digits part is not empty and contains only digits\n                if (!expDigits.isEmpty() && isDigits(expDigits)) {\n                    expValid = true;\n                }\n            }\n            if (!expValid) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // isAllZeros should handle null/empty/signs\n\n        if (hasQualifier) {\n            // Type specified by qualifier\n            switch (lastChar) {\n                case 'l' : case 'L' :\n                    // Check if format is suitable for Long/BigInt (no decimal, no exponent)\n                    if (dec == null && expPos == -1) {\n                         // Validate numeric part syntax (optional sign + digits)\n                         if (!numeric.isEmpty()) {\n                             char first = numeric.charAt(0);\n                             String digitsPart = (first == '+' || first == '-') ? numeric.substring(1) : numeric;\n                             // Ensure digits part is not empty and contains only digits\n                             if (!digitsPart.isEmpty() && isDigits(digitsPart)) {\n                                 try {\n                                     // Use createLong first, fallback to BigInteger\n                                     return createLong(numeric);\n                                 } catch (final NumberFormatException nfe) {\n                                     return createBigInteger(numeric);\n                                 }\n                             }\n                         }\n                    }\n                    // If format has decimal/exponent, or syntax is wrong, it's invalid for L/l\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n                case 'f' : case 'F' :\n                    try {\n                        final Float f = createFloat(numeric);\n                        // Check for infinity and for zero values derived from non-zero strings\n                        if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {\n                            return f;\n                        }\n                        // If infinite or zero for non-zero string, fall through\n                    } catch (final NumberFormatException nfe) { /* Fall through */ }\n                    // $FALL-THROUGH$ for 'f' -> 'd' -> BigDecimal\n\n                case 'd' : case 'D' :\n                    try {\n                        final Double d = createDouble(numeric);\n                        // Check for infinity and for zero values derived from non-zero strings\n                        if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {\n                           return d;\n                        }\n                         // If infinite or zero for non-zero string, fall through\n                    } catch (final NumberFormatException nfe) { /* Fall through */ }\n                     // $FALL-THROUGH$ for 'd' -> BigDecimal\n\n                    // Final attempt with BigDecimal for F/D qualifiers\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) {\n                         // If Float/Double/BigDecimal all failed, throw\n                         throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                    // break; // Unreachable after throw\n\n                default : // Should be unreachable due to qualifier checks\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // No qualifier - auto detect type\n            if (expPos > -1 || decPos > -1) {\n                // Float / Double / BigDecimal path\n                try {\n                    final Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || f.floatValue() == 0.0F && !allZeros)) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) { /* Ignore */ }\n                try {\n                    final Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || d.doubleValue() == 0.0D && !allZeros)) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { /* Ignore */ }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                    // If all float types fail\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            } else {\n                // Integer / Long / BigInteger path\n                // Validate syntax (optional sign + digits) first\n                 boolean syntaxOk = false;\n                 if (!numeric.isEmpty()) {\n                     char first = numeric.charAt(0);\n                     String digitsPart = (first == '+' || first == '-') ? numeric.substring(1) : numeric;\n                     if (!digitsPart.isEmpty() && isDigits(digitsPart)) {\n                         syntaxOk = true;\n                     }\n                 }\n                 if (!syntaxOk) {\n                      throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n\n                // Try smaller types first, falling back to larger ones\n                try {\n                    return createInteger(numeric);\n                } catch (final NumberFormatException nfe) { /* Ignore */ }\n                try {\n                    return createLong(numeric);\n                } catch (final NumberFormatException nfe) { /* Ignore */ }\n                // Final fallback for integers\n                return createBigInteger(numeric);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}