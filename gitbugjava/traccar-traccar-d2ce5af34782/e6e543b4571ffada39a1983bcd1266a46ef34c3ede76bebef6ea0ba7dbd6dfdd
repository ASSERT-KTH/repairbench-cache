{
    "generation": "        } else if (type == MSG_ALARM) {\n\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            short alarmType = buf.readUnsignedByte(); // This reads the alarm sub-type\n            switch (alarmType) {\n                case 0x01:\n                    // If extendedAlarm is true, sets ALARM_SOS.\n                    // If extendedAlarm is false, sets ALARM_GENERAL.\n                    // This is problematic: an alarm code 0x01 (SOS) should typically always be ALARM_SOS.\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    // This sets ALARM_VIBRATION. For the test to report \"got ALARM_VIBRATION\",\n                    // alarmType must have been 0x80.\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                // ... other cases\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n        // ...\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}