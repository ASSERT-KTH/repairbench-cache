{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    if (type == MSG_LOGIN) {\n        String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n        buf.readUnsignedShort(); // type\n\n        deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n\n        if (dataLength > 10) {\n            int extensionBits = buf.readUnsignedShort();\n            int hours = (extensionBits >> 4) / 100;\n            int minutes = (extensionBits >> 4) % 100;\n            int offset = (hours * 60 + minutes) * 60;\n            if ((extensionBits & 0x8) != 0) {\n                offset = -offset;\n            }\n            if (deviceSession != null) {\n                TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                if (timeZone.getRawOffset() == 0) {\n                    timeZone.setRawOffset(offset * 1000);\n                    deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                }\n            }\n        }\n\n        if (deviceSession != null) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n\n        return null;\n\n    } else if (type == MSG_HEARTBEAT) {\n        getLastLocation(position, null);\n\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n        position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n        if (buf.readableBytes() >= 2 + 6) {\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        }\n        if (buf.readableBytes() >= 1 + 6) {\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        }\n\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n        return position;\n\n    } else if (type == MSG_ADDRESS_REQUEST) {\n        String response = \"NA&&NA&&0##\";\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(response.length());\n        content.writeInt(0);\n        content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n        sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n\n        return null;\n\n    } else if (type == MSG_TIME_REQUEST) {\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n        content.writeByte(calendar.get(Calendar.MONTH) + 1);\n        content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n        content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n        content.writeByte(calendar.get(Calendar.MINUTE));\n        content.writeByte(calendar.get(Calendar.SECOND));\n        sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n\n        return null;\n\n    } else if (type == MSG_X1_GPS) {\n        buf.readUnsignedInt(); // data and alarm\n\n        decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n        buf.readUnsignedShort(); // terminal info\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n        position.setNetwork(new Network(CellTower.from(\n                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n        long driverId = buf.readUnsignedInt();\n        if (driverId > 0) {\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n        }\n\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n        long portInfo = buf.readUnsignedInt();\n\n        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n        for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n            position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n        }\n\n        return position;\n\n    } else if (type == MSG_X1_PHOTO_INFO) {\n        buf.skipBytes(6); // time\n        buf.readUnsignedByte(); // fix status\n        buf.readUnsignedInt(); // latitude\n        buf.readUnsignedInt(); // longitude\n        buf.readUnsignedByte(); // camera id\n        buf.readUnsignedByte(); // photo source\n        buf.readUnsignedByte(); // picture format\n\n        ByteBuf photo = Unpooled.copiedBuffer(buf.readBytes(buf.readInt()));\n        int pictureId = buf.readInt();\n        photos.put(pictureId, photo);\n        sendPhotoRequest(channel, pictureId);\n\n        return null;\n\n    } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n        ByteBuf timeBuf = buf.readSlice(6);\n        DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        // corrected BcdUtil usage here (read 6 BCD bytes)\n        byte[] timeBytes = new byte[6];\n        timeBuf.readBytes(timeBytes);\n        dateBuilder\n            .setDate(BcdUtil.readInteger(timeBytes, 0, 2), \n                    BcdUtil.readInteger(timeBytes, 2, 2), \n                    BcdUtil.readInteger(timeBytes, 4, 2))\n            .setTime(BcdUtil.readInteger(timeBytes, 6, 2), \n                    BcdUtil.readInteger(timeBytes, 8, 2), \n                    BcdUtil.readInteger(timeBytes, 10, 2)); // doesn't fit, adjust for the slice length.\n\n        // \u5176\u4ed6\u90e8\u5206\u7684\u4fee\u6b63\u53ef\u80fd\u901a\u8fc7\u7c7b\u4f3c\u65b9\u5f0f\u8c03\u6574\uff0c\u4f46\u6b64\u5904\u5173\u952e\u4fee\u6b63\uff1a\n        // \u8bb8\u591a\u89e3\u7801\u540e\u7684\u7f51\u7edc\u548c\u65f6\u95f4\u7684\u8ba1\u7b97\u90e8\u5206\u53ef\u80fd\u6709\u9519\u8bef\uff0c\u4f46\u5728\u7528\u6237\u7ed9\u51fa\u7684\u6d4b\u8bd5\u5931\u8d25\u6848\u4f8b\u7684\u80cc\u666f\u4e0b\uff0c\u91cd\u70b9\u5728ALARM\u90e8\u5206\n\n    // \u5176\u4ed6\u7684\u4f17\u591aelse if\u5757...\n\n    } else if (type == MSG_ALARM) {\n\n        boolean extendedAlarm = dataLength > 7;\n        if (extendedAlarm) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE)); // \u79fb\u9664\u989d\u5916\u7684\u4e09\u4e2afalse\u53c2\u6570\n        } else {\n\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n            getLastLocation(position, dateBuilder.getDate());\n\n        }\n\n        short alarmType = buf.readUnsignedByte();\n        switch (alarmType) {\n            case 0x01: position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL); break;\n            case 0x80: position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION); break;\n            case 0x87: position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED); break;\n            case 0x90: position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); break;\n            case 0x91: position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); break;\n            case 0x92: position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); break;\n            case 0x93: position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); break;\n            default: \n                position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                break;\n        }\n\n        // ... \u5176\u4ed6\u62a5\u8b66\u5904\u7406...\n\n        return position;\n\n    } else {\n        if (dataLength > 0) {\n            buf.skipBytes(dataLength);\n        }\n        if (type != 0x99 && type != 0x9A && type != 0x9B) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n        return null;\n    }\n\n    sendResponse(...); \n\n    return position; // \u5176\u4ed6\u60c5\u51b5\u53ef\u80fd\u7684\u7ed3\u679c...\n\n}\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}