{
    "generation": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5; // dataLength = length of payload (type excluded) up to serial number\n        int type = buf.readUnsignedByte();\n\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n\n        if (type == MSG_LOGIN) {\n\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); // type\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n\n            return null;\n\n        } else if (type == MSG_HEARTBEAT) {\n\n            getLastLocation(position, null);\n\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n            if (buf.readableBytes() >= 2 + 6) { // Check against remaining bytes before serial/crc\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) { // Check against remaining bytes before serial/crc\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } else if (type == MSG_ADDRESS_REQUEST) {\n\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n\n            return null;\n\n        } else if (type == MSG_TIME_REQUEST) {\n\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n\n            return null;\n\n        } else if (type == MSG_X1_GPS) {\n\n            buf.readUnsignedInt(); // data and alarm\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            buf.readUnsignedShort(); // terminal info\n\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n            long portInfo = buf.readUnsignedInt();\n\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n\n            return position;\n\n        } else if (type == MSG_X1_PHOTO_INFO) {\n\n            buf.skipBytes(6); // time\n            buf.readUnsignedByte(); // fix status\n            buf.readUnsignedInt(); // latitude\n            buf.readUnsignedInt(); // longitude\n            buf.readUnsignedByte(); // camera id\n            buf.readUnsignedByte(); // photo source\n            buf.readUnsignedByte(); // picture format\n\n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n\n            return null;\n\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n\n            Network network = new Network();\n\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2); // Peek at wifi count for older formats\n            }\n\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n\n            if (type != MSG_WIFI_4) {\n\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0); // Placeholder for length\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex()); // Write original time bytes\n                    // Calculate and write actual length (placeholder=0 is fine if response is simple)\n                    response.setByte(2, response.writerIndex() - 3 + 4); // type(1)+time(6)+serial(2)+crc(2) = 11, index starts after len byte\n                    // Serial and CRC will be added by FrameEncoder if needed, or sendResponse logic\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress())); // Assuming NetworkMessage handles final framing\n                }\n\n            }\n\n            position.setNetwork(network);\n\n            return position;\n\n        } else if (type == MSG_INFO) {\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            decodeLbs(position, buf, type, false);\n\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n            getLastLocation(position, dateBuilder.getDate());\n\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); // ta\n            }\n\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); // ta\n            }\n\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n\n            position.setNetwork(network);\n            // Position is returned later\n\n        } else if (type == MSG_STRING) {\n\n            getLastLocation(position, null);\n\n            int commandLength = buf.readUnsignedByte();\n\n            if (commandLength > 0 && dataLength >= commandLength) { // Ensure commandLength is valid within payload\n                buf.readUnsignedInt(); // server flag (reserved)\n                // commandLength includes the 4 bytes of server flag\n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    // Ensure indices are valid\n                    if (data.length() >= 27) {\n                        position.set(Position.KEY_ICCID, data.substring(7, 27));\n                    } else {\n                        position.set(Position.KEY_ICCID, data.substring(7)); // Take rest if shorter\n                    }\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n            // Position is returned later\n\n        } else if (type == MSG_BMS) {\n\n            buf.skipBytes(8); // serial number\n\n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } else if (type == MSG_STATUS && dataLength == 22) { // Check dataLength for specific status message\n\n            getLastLocation(position, null);\n\n            buf.readUnsignedByte(); // information content\n            buf.readUnsignedShort(); // satellites\n            buf.readUnsignedByte(); // alarm\n            buf.readUnsignedByte(); // language\n\n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n\n            buf.readUnsignedByte(); // working mode\n            buf.readUnsignedShort(); // working voltage\n            buf.readUnsignedByte(); // reserved\n            buf.readUnsignedShort(); // working times\n            buf.readUnsignedShort(); // working time\n\n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? -temperature : temperature); // Fix sign logic based on common protocols\n\n            // Position is returned later\n\n        } else if (isSupported(type)) {\n\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; // multi-lbs message\n            }\n\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n\n            // Check readable bytes before LBS decoding\n            if (hasLbs(type) && buf.readableBytes() >= 7 + 6) { // Minimum LBS structure size + serial/crc\n                decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM && type != MSG_LBS_STATUS);\n            }\n\n            // Check readable bytes before Status decoding\n            if (hasStatus(type) && buf.readableBytes() >= 3 + 6) { // Minimum Status structure size + serial/crc\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    // Check readable bytes for OBD6 specific fields\n                    if (buf.readableBytes() >= 7 + 6) {\n                         int signal = buf.readUnsignedShort();\n                         int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                         position.set(Position.KEY_SATELLITES, satellites);\n                         position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                         buf.readUnsignedByte(); // language\n                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                         buf.readUnsignedByte(); // working mode\n                         position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                    }\n                } else {\n                    // Check readable bytes for standard status fields\n                    if (buf.readableBytes() >= 3 + 6) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    }\n                }\n            }\n\n            if (type == MSG_STATUS && variant == Variant.VXT01) {\n                 if (buf.readableBytes() >= 3 + 6) {\n                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                 }\n            }\n\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    if (buf.readableBytes() >= 7 + 6) { // Odo(4) + len(1) + card(var) + alarm(1) + swiped(1)\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        int cardLen = buf.readUnsignedByte();\n                        if (buf.readableBytes() >= cardLen + 2 + 6) {\n                            String data = buf.readCharSequence(cardLen, StandardCharsets.US_ASCII).toString();\n                            buf.readUnsignedByte(); // alarm\n                            buf.readUnsignedByte(); // swiped\n                            position.set(Position.KEY_CARD, data.trim());\n                        }\n                    }\n                } else if (variant == Variant.BENWAY) {\n                     if (buf.readableBytes() >= 2 + 6) {\n                         int mask = buf.readUnsignedShort();\n                         position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                         position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                         if (BitUtil.check(mask, 8 + 4)) {\n                             int value = BitUtil.to(mask, 8 + 1); // Extract 3 bits\n                             if (BitUtil.check(mask, 8 + 1)) { // Check middle bit for sign? Unlikely for 3 bits. Assume direct value.\n                                 value = -value; // Revisit this logic if needed\n                             }\n                             position.set(Position.PREFIX_TEMP + 1, value);\n                         } else {\n                             int value = BitUtil.to(mask, 8 + 2); // Extract 2 bits\n                             if (BitUtil.check(mask, 8 + 5)) {\n                                 position.set(Position.PREFIX_ADC + 1, value);\n                             } else {\n                                 position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                             }\n                         }\n                     }\n                } else if (variant == Variant.VXT01) {\n                    // decodeStatus already called\n                    if (buf.readableBytes() >= 3 + 6) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        buf.readUnsignedByte(); // alarm extension\n                    }\n                } else if (variant == Variant.S5) {\n                    // decodeStatus already called\n                     if (buf.readableBytes() >= 10 + 6) { // power(2)+rssi(1)+alarm(1)+oil(2)+temp(1)+odo(4)\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                        position.set(\"oil\", buf.readUnsignedShort());\n                        int temperature = buf.readUnsignedByte();\n                        if (BitUtil.check(temperature, 7)) {\n                            temperature = -BitUtil.to(temperature, 7);\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, temperature);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                    }\n                } else if (variant == Variant.WETRUST) {\n                    if (buf.readableBytes() >= 8 + 6) { // Odo(4) + len(1) + card(var) + alarm(1) + status(1) + time(2)\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                         int cardLen = buf.readUnsignedByte();\n                         if (buf.readableBytes() >= cardLen + 4 + 6) {\n                             position.set(Position.KEY_CARD, buf.readCharSequence(\n                                     cardLen, StandardCharsets.US_ASCII).toString());\n                             position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                             position.set(\"cardStatus\", buf.readUnsignedByte());\n                             position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                         }\n                    }\n                }\n            }\n\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason\n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n\n            if (type == MSG_GPS_LBS_3) {\n                 // Check for module header: module(2) + subLength(1)\n                 if (buf.readableBytes() >= 3 + 6) {\n                     int module = buf.readUnsignedShort();\n                     int subLength = buf.readUnsignedByte();\n                     // Check if subLength is readable\n                     if (buf.readableBytes() >= subLength + 6) {\n                         switch (module) {\n                             case 0x0027: // Power\n                                 if (subLength >= 2) {\n                                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                     buf.skipBytes(subLength - 2); // Skip remaining bytes in sub-payload\n                                 } else {\n                                      buf.skipBytes(subLength);\n                                 }\n                                 break;\n                             case 0x002E: // Odometer\n                                 if (subLength >= 4) {\n                                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                                     buf.skipBytes(subLength - 4);\n                                 } else {\n                                      buf.skipBytes(subLength);\n                                 }\n                                 break;\n                             case 0x003B: // Accuracy\n                                 if (subLength >= 2) {\n                                     position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                                     buf.skipBytes(subLength - 2);\n                                 } else {\n                                      buf.skipBytes(subLength);\n                                 }\n                                 break;\n                             default:\n                                 buf.skipBytes(subLength);\n                                 break;\n                         }\n                     } else if (buf.readableBytes() >= 6) { // Not enough bytes for subLength, but maybe enough for odometer later? Skip header.\n                        // We already read module/subLength, need to advance past them.\n                        // This path indicates a likely framing error, but try to continue.\n                     }\n                 }\n            }\n\n            // Check for optional odometer at the end\n            if (buf.readableBytes() == 4 + 6) { // Exactly 4 bytes payload + serial/crc remain\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n            // Position is returned later\n\n        } else if (type == MSG_ALARM) {\n\n            // Read Date (6 bytes) - Common to both formats\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            position.setTime(dateBuilder.getDate());\n\n            // Read Alarm Type (1 byte) - Common to both formats\n            short alarmType = buf.readUnsignedByte();\n\n            // Determine if extended based on total payload length\n            boolean extendedAlarm = dataLength > 7; // dataLength = payload length (length - 5)\n\n            // Set alarm based on type\n            switch (alarmType) {\n                case 0x01:\n                    // Keep original logic: SOS only if extended\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n\n            // Handle remaining data and position validity\n            if (extendedAlarm) {\n                // Extended format: Date(6) + Alarm(1) + LBS/GPS/... (dataLength - 7 bytes)\n                // Skip the remaining payload bytes as the original code didn't parse them correctly anyway.\n                int remainingBytes = dataLength - 7; // Bytes after date and alarm type\n                if (remainingBytes > 0) {\n                    if (buf.readableBytes() >= remainingBytes) {\n                        // Potentially decode LBS/GPS/etc here in the future if format is known.\n                        buf.skipBytes(remainingBytes);\n                    } else {\n                        // Avoid IndexOutOfBoundsException if remainingBytes is too large\n                        throw new FrameException(\"Incorrect extended alarm message length: \"\n                                + \"dataLength=\" + dataLength + \", remaining=\" + remainingBytes\n                                + \", readable=\" + buf.readableBytes());\n                    }\n                }\n                // Mark position as invalid since we didn't parse GPS from this message format\n                position.setValid(false);\n                position.setLatitude(0);\n                position.setLongitude(0);\n\n            } else {\n                // Non-extended format: Date(6) + Alarm(1)\n                // dataLength should be 7.\n                if (dataLength != 7) {\n                     throw new FrameException(\"Incorrect non-extended alarm message length: \" + dataLength);\n                }\n                // Use last known location details as fallback, since no GPS in this message type\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            // Position is returned later\n\n        } else { // Unknown or unhandled message type\n\n            // Skip the entire payload data if not handled\n            if (dataLength > 0 && buf.readableBytes() >= dataLength) {\n                buf.skipBytes(dataLength);\n            }\n            // Send response only for non-command types that might expect one implicitly\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                 // Check readable bytes before accessing serial number near the end\n                 if (buf.readableBytes() >= 6) {\n                     sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n                 }\n            }\n            return null; // Do not return a position for unhandled types\n\n        }\n\n        // Common trailer processing (after main type handling, before returning position)\n\n        // Check readable bytes before reading optional language field\n        if (hasLanguage(type) && buf.readableBytes() >= 2 + 6) {\n            buf.readUnsignedShort();\n        }\n\n        // Check readable bytes before reading optional geofence field\n        if ((type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) && buf.readableBytes() >= 1 + 6) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n\n        // Send response if needed (e.g., for non-command, non-login messages)\n        // Avoid sending response if already sent (e.g., login, heartbeat, bms)\n        if (type != MSG_LOGIN && type != MSG_HEARTBEAT && type != MSG_BMS && type != MSG_TIME_REQUEST\n                && type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2\n                && type != MSG_ADDRESS_REQUEST) {\n            // Check readable bytes before accessing serial number\n            if (buf.readableBytes() >= 6) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n        }\n\n        return position; // Return the populated position object\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}