{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    // ... all other type\u2010specific branches up to the generic supported branch ...\n\n    else if (isSupported(type)) {\n\n        if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n            return null; // multi-lbs message\n        }\n\n        if (hasGps(type)) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        } else {\n            getLastLocation(position, null);\n        }\n\n        if (hasLbs(type) && buf.readableBytes() > 6) {\n            decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM && type != MSG_LBS_STATUS);\n        }\n\n        if (hasStatus(type)) {\n            decodeStatus(position, buf);\n            if (variant == Variant.OBD6) {\n\n                int signal = buf.readUnsignedShort();\n                int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                position.set(Position.KEY_SATELLITES, satellites);\n                position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                buf.readUnsignedByte(); // language\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                buf.readUnsignedByte(); // working mode\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n\n            } else if (type == MSG_GPS_LBS_STATUS_3) {\n\n                // For the MSG_GPS_LBS_STATUS_3 message, the alarm byte\n                // must always be treated as SOS if it's non\u2010zero.\n                buf.readUnsignedByte(); // skip battery\n                buf.readUnsignedByte(); // skip rssi\n                int alarmByte = buf.readUnsignedByte(); // the actual alarm flag\n                if (alarmByte != 0) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n                }\n\n            } else {\n\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n\n            }\n        }\n\n        // ... remainder of the supported branch, language/geofence handling, response, etc. ...\n\n    } else if (type == MSG_ALARM) {\n\n        // ... existing MSG_ALARM branch ...\n\n    } else {\n\n        // ... default handling ...\n\n    }\n\n    // ... final language/geofence checks, sendResponse, return position, etc. ...\n    if (hasLanguage(type)) {\n        buf.readUnsignedShort();\n    }\n    if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n        position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n    }\n    sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}