{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // arrays shared with the other private methods\n        solvedCols  = Math.min(rows, cols);\n        diagR       = new double[cols];\n        jacNorm     = new double[cols];\n        beta        = new double[cols];\n        permutation = new int[cols];\n        lmDir       = new double[cols];\n\n        // local point\n        double   delta   = 0;\n        double   xNorm   = 0;\n        double[] diag    = new double[cols];\n        double[] oldX    = new double[cols];\n        double[] oldRes  = new double[rows];\n        double[] work1   = new double[cols];\n        double[] work2   = new double[cols];\n        double[] work3   = new double[cols];\n\n        // evaluate the function at the starting point and calculate its norm\n        updateResidualsAndCost();\n\n        // outer loop\n        lmPar = 0;\n        boolean firstIteration = true;\n        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n        while (true) {\n            incrementIterationsCounter();\n\n            // compute the Q.R. decomposition of the jacobian matrix\n            VectorialPointValuePair previous = current;\n            updateJacobian();\n            qrDecomposition();\n\n            // compute Qt.res\n            qTy(residuals);\n            // now we don't need Q anymore,\n            // so let jacobian contain the R matrix with its diagonal elements\n            for (int k = 0; k < solvedCols; ++k) {\n                int pk = permutation[k];\n                jacobian[k][pk] = diagR[pk];\n            }\n\n            if (firstIteration) {\n\n                // scale the point according to the norms of the columns\n                // of the initial jacobian\n                xNorm = 0;\n                for (int k = 0; k < cols; ++k) {\n                    double dk = jacNorm[k];\n                    if (dk == 0) {\n                        dk = 1.0;\n                    }\n                    double xk = dk * point[k];\n                    xNorm  += xk * xk;\n                    diag[k] = dk;\n                }\n                xNorm = Math.sqrt(xNorm);\n\n                // initialize the step bound delta\n                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n\n            }\n\n            // check orthogonality between function vector and jacobian columns\n            double maxCosine = 0;\n            if (cost != 0) {\n                for (int j = 0; j < solvedCols; ++j) {\n                    int    pj = permutation[j];\n                    double s  = jacNorm[pj];\n                    if (s != 0) {\n                        double sum = 0;\n                        for (int i = 0; i <= j; ++i) {\n                            sum += jacobian[i][pj] * residuals[i]; // Here residuals are Q^T * f\n                        }\n                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                    }\n                }\n            }\n            if (maxCosine <= orthoTolerance) {\n                // convergence has been reached\n                return current;\n            }\n\n            // rescale if necessary\n            for (int j = 0; j < cols; ++j) {\n                diag[j] = Math.max(diag[j], jacNorm[j]);\n            }\n\n            // inner loop\n            for (double ratio = 0; ratio < 1.0e-4;) {\n\n                // save the state\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    oldX[pj] = point[pj];\n                }\n                double previousCost = cost;\n                double[] tmpVec = residuals;\n                residuals = oldRes;\n                oldRes    = tmpVec; // oldRes now contains Q^T * f(oldX)\n\n                // determine the Levenberg-Marquardt parameter\n                // It expects Q^T * f(oldX) as input (passed in oldRes)\n                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n\n                // compute the new point and the norm of the evolution direction\n                double lmNorm = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    lmDir[pj] = -lmDir[pj]; // lmDir was -p, now is p\n                    point[pj] = oldX[pj] + lmDir[pj];\n                    double s = diag[pj] * lmDir[pj]; // Component of D*p\n                    lmNorm  += s * s;\n                }\n                lmNorm = Math.sqrt(lmNorm);\n                // on the first iteration, adjust the initial step bound.\n                if (firstIteration) {\n                    delta = Math.min(delta, lmNorm);\n                }\n\n                // evaluate the function at x + p and calculate its norm\n                updateResidualsAndCost(); // cost is ||f(x+p)||\n                current = new VectorialPointValuePair(point, objective);\n\n                // compute the scaled actual reduction\n                double actRed;\n                if (previousCost < Double.MIN_VALUE) {\n                    // Handle previous cost being zero or very small\n                    if (cost < Double.MIN_VALUE) {\n                        // Both costs are zero. Relative reduction is undefined/irrelevant.\n                        // Set actRed = 0.0 to avoid issues. Convergence checks handle this.\n                        actRed = 0.0;\n                    } else {\n                        // Previous cost was zero, new cost is positive. Infinite increase.\n                        // Set actRed to a large negative number to force rejection.\n                        actRed = -Double.MAX_VALUE;\n                    }\n                } else {\n                    double r = cost / previousCost;\n                    actRed = 1.0 - r * r; // Always calculate actual reduction\n                }\n\n\n                // compute the scaled predicted reduction\n                // and the scaled directional derivative\n                // Calculate work1 = R * P^T * p\n                java.util.Arrays.fill(work1, 0.0);\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    double dirJ = lmDir[pj]; // p_pj\n                    if (dirJ != 0) {\n                       for (int i = 0; i <= j; ++i) {\n                            work1[i] += jacobian[i][pj] * dirJ; // R_i,pj * p_pj\n                       }\n                    }\n                }\n                // work1 now contains R * P^T p\n\n                double coeff1 = 0; // || R * P^T p ||^2 = || J p ||^2\n                for (int j = 0; j < solvedCols; ++j) {\n                    coeff1 += work1[j] * work1[j];\n                }\n                double pc2 = previousCost * previousCost; // || f(oldX) ||^2\n                coeff1 = coeff1 / pc2; // Scaled || J p ||^2\n                double coeff2 = lmPar * lmNorm * lmNorm / pc2; // Scaled lambda * || D p ||^2\n                double preRed = coeff1 + 2 * coeff2; // Predicted reduction: (||Jp||^2 + 2*lambda*||Dp||^2) / ||f||^2\n                double dirDer = -(coeff1 + coeff2); // Directional derivative: -(||Jp||^2 + lambda*||Dp||^2) / ||f||^2\n\n                // ratio of the actual to the predicted reduction\n                ratio = (preRed == 0) ? ((actRed == 0) ? 1.0 : 0) : (actRed / preRed); // Handle preRed == 0 case\n\n                // update the step bound\n                if (ratio <= 0.25) {\n                    double tmp =\n                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n                        if ((previousCost > Double.MIN_VALUE && cost >= previousCost) || (tmp < 0.1)) { // Check cost increase explicitly\n                            tmp = 0.1;\n                        }\n                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n                        lmPar /= tmp;\n                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                    delta = 2 * lmNorm;\n                    lmPar *= 0.5;\n                }\n\n                // test for successful iteration.\n                if (ratio >= 1.0e-4) {\n                    // successful iteration, update the norm\n                    firstIteration = false;\n                    xNorm = 0;\n                    for (int k = 0; k < cols; ++k) {\n                        double xK = diag[k] * point[k];\n                        xNorm    += xK * xK;\n                    }\n                    xNorm = Math.sqrt(xNorm);\n\n                    // tests for convergence.\n                    // we use the vectorial convergence checker\n                    if (checker != null) {\n                       if (checker.converged(getIterations(), previous, current)) {\n                           return current;\n                       }\n                    }\n\n                } else {\n                    // failed iteration, reset the previous values\n                    cost = previousCost;\n                    for (int j = 0; j < solvedCols; ++j) {\n                        int pj = permutation[j];\n                        point[pj] = oldX[pj];\n                    }\n                    tmpVec    = residuals;\n                    residuals = oldRes; // Restore Q^T*f(oldX) to residuals\n                    oldRes    = tmpVec; // Discard f(newX)\n                    // Reset current value object to previous point (needed for checker)\n                    current = previous;\n                }\n\n                // Default convergence criteria\n                if (checker == null) {\n                  if (((Math.abs(actRed) <= costRelativeTolerance && preRed <= costRelativeTolerance && ratio <= 2.0)) ||\n                      delta <= parRelativeTolerance * xNorm) {\n                       return current;\n                   }\n                }\n\n                // tests for termination and stringent tolerances\n                // (2.2204e-16 is the machine epsilon for IEEE754)\n                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n                            costRelativeTolerance);\n                } else if (delta <= 2.2204e-16 * xNorm) {\n                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n                            parRelativeTolerance);\n                } else if (maxCosine <= 2.2204e-16)  {\n                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n                            orthoTolerance);\n                }\n                // Check singularity (introduced in later versions, useful)\n                 if (getIterations() > 1 && cost == previousCost && Math.abs(actRed) <= Math.ulp(cost)) {\n                    // check if cost stalls for more than one iteration\n                    // This might indicate we are stuck, maybe return current solution?\n                    // Or throw an exception as below? Let's keep original logic for now.\n                 }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}