{
    "generation": "    @Override\n    public String asStringLiteral()\n    {\n        String value = this.value;\n\n        boolean containsDoubleQuote = value.contains(\"\\\"\");\n        boolean containsSingleQuote = value.contains(\"'\");\n\n        // Determine the most appropriate delimiter based on the content of the string.\n        // This avoids issues with nested quotes in the pretty-printed output.\n        //\n        // Strategy:\n        // 1. If the string contains a double quote (\") but no single quote ('),\n        //    use single quotes as delimiters (e.g., 'he\"llo').\n        //    This avoids needing to escape the double quote within the string.\n        // 2. Otherwise (i.e., contains a single quote, or both, or neither quote type),\n        //    use double quotes as delimiters (e.g., \"hello\", \"hel'lo\", \"he\\\"l'lo\").\n        //    If double quotes are used as delimiters, any existing double quotes within\n        //    the string must be escaped (e.g., transforming `\"` to `\\\"`).\n\n        if (containsDoubleQuote && !containsSingleQuote) {\n            // The value contains \" but not ', so enclose it in single quotes.\n            // No need to escape anything within the value itself.\n            return \"'\" + value + \"'\";\n        } else {\n            // The value contains ' (and potentially \") or neither.\n            // Enclose it in double quotes.\n            // Any double quotes within the value must be escaped.\n            String escapedValue = value.replace(\"\\\"\", \"\\\\\\\"\");\n            return \"\\\"\" + escapedValue + \"\\\"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}