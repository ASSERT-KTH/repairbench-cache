{
    "generation": "    @Override\n    public String asStringLiteral()\n    {\n        String val = this.value;\n\n        boolean containsDoubleQuote = val.contains(\"\\\"\");\n        boolean containsSingleQuote = val.contains(\"'\");\n\n        // First, always escape backslashes. This ensures that any literal backslashes\n        // in the string are preserved when it's represented as a string literal.\n        // For example, if val is \"C:\\dev\" (where '\\' is a literal backslash),\n        // processedValue becomes \"C:\\\\dev\".\n        String processedValue = val.replace(\"\\\\\", \"\\\\\\\\\");\n\n        // Determine which quote character to use for the string literal.\n        // The goal is to use the quote character that minimizes escapes within the string,\n        // or a sensible default if both or neither quote types are present in the string.\n        if (containsDoubleQuote && !containsSingleQuote)\n        {\n            // The string contains double quotes but no single quotes (e.g., \"foo\\\"bar\").\n            // Prefer using single quotes to enclose the literal to avoid escaping internal double quotes.\n            // Result for \"foo\\\"bar\" will be 'foo\"bar'.\n            // We also need to escape any single quotes that might be in processedValue.\n            // This handles cases like val = \"foo\\\\'\" which becomes processedValue = \"foo\\\\\\\\'\"\n            // and then needs to be represented as 'foo\\\\\\\\\\''.\n            processedValue = processedValue.replace(\"'\", \"\\\\'\");\n            return \"'\" + processedValue + \"'\";\n        }\n        else\n        {\n            // Default to using double quotes. This covers cases where:\n            // 1. The string contains single quotes but no double quotes (e.g., \"it's ok\").\n            //    Result: \"\\\"it's ok\\\"\"\n            // 2. The string contains both single and double quotes (e.g., \"it's a \\\"quote\\\"\").\n            //    Result: \"\\\"it's a \\\\\\\"quote\\\\\\\"\\\"\" (double quotes chosen as the standard wrapper).\n            // 3. The string contains neither single nor double quotes (e.g., \"simple\").\n            //    Result: \"\\\"simple\\\"\" (double quotes chosen as the standard wrapper).\n\n            // Escape any double quotes within the (already backslash-escaped) string.\n            processedValue = processedValue.replace(\"\\\"\", \"\\\\\\\"\");\n            return \"\\\"\" + processedValue + \"\\\"\";\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}