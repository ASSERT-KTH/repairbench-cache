{
    "generation": "    @Override\n    public String asStringLiteral()\n    {\n        boolean hasSingleQuote = this.value.indexOf('\\'') != -1;\n        boolean hasDoubleQuote = this.value.indexOf('\"') != -1;\n\n        if (hasSingleQuote) {\n            // The string value contains a single quote, so we must use double quotes as delimiters.\n            if (hasDoubleQuote) {\n                // The string value contains both single and double quotes.\n                // We use double quotes as delimiters and escape the inner double quotes.\n                return '\"' + this.value.replace(\"\\\"\", \"\\\\\\\"\") + '\"';\n            } else {\n                // The string value contains single quotes but no double quotes.\n                // We can safely use double quotes as delimiters without escaping.\n                return '\"' + this.value + '\"';\n            }\n        } else {\n            // The string value does not contain any single quotes.\n            if (hasDoubleQuote) {\n                // The string value contains double quotes but no single quotes.\n                // We can safely use single quotes as delimiters without escaping the inner double quote.\n                return '\\'' + this.value + '\\'';\n            } else {\n                // The string value contains neither single nor double quotes.\n                // We can use double quotes as the default delimiter.\n                return '\"' + this.value + '\"';\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}