{
    "generation": "    @Override\n    public String asStringLiteral()\n    {\n        boolean containsDoubleQuote = this.value.contains(\"\\\"\");\n        boolean containsSingleQuote = this.value.contains(\"'\");\n\n        // Rule: Prefer double quotes unless the string contains double quotes but no single quotes.\n        // This heuristic aims to minimize escaping.\n        if (containsDoubleQuote && !containsSingleQuote)\n        {\n            // Use single quotes if the string contains double quotes but no single quotes.\n            // Escape backslashes within the string. Single quotes don't need escaping inside single-quoted strings.\n            // Note: Java string literals don't technically require escaping single quotes within single quotes,\n            // but depending on the target language/context of this pretty print, it might.\n            // Assuming standard string literal representation where only the surrounding quote needs escaping.\n            String escapedValue = this.value.replace(\"\\\\\", \"\\\\\\\\\"); // Escape backslashes\n            return \"'\" + escapedValue + \"'\";\n        }\n        else\n        {\n            // Use double quotes in all other cases:\n            // 1. Contains ' but not \" (e.g., \"wal'do\")\n            // 2. Contains neither ' nor \" (e.g., \"foo\")\n            // 3. Contains both ' and \" (e.g., \"a'b\\\"c\")\n            // Escape backslashes and double quotes within the string.\n            String escapedValue = this.value.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\");\n            return '\"' + escapedValue + '\"';\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}