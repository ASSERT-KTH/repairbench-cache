{
    "generation": "    @Override\n    public String asStringLiteral()\n    {\n        // Determine if the string value contains double quotes or single quotes.\n        // this.value is assumed to be non-null, as is typical for string literal values.\n        boolean containsDoubleQuote = this.value.contains(\"\\\"\");\n        boolean containsSingleQuote = this.value.contains(\"'\");\n\n        if (containsDoubleQuote && !containsSingleQuote)\n        {\n            // If the string value contains double quotes BUT NOT single quotes,\n            // then it is best to enclose the string in single quotes.\n            // This avoids needing to escape the internal double quotes.\n            // For example, if this.value is 'foo\"bar', this will return \"'foo\\\"bar'\".\n            return \"'\" + this.value + \"'\";\n        }\n        else\n        {\n            // In all other cases, use double quotes as the enclosure.\n            // These cases are:\n            // 1. The string contains single quotes but not double quotes (e.g., \"foo'bar\").\n            //    Result for \"foo'bar\": \"\\\"foo'bar\\\"\"\n            // 2. The string contains neither single nor double quotes (e.g., \"foobar\").\n            //    Result for \"foobar\": \"\\\"foobar\\\"\"\n            // 3. The string contains both single and double quotes (e.g., \"foo'\\\"bar\").\n            //    Result for \"foo'\\\"bar\": \"\\\"foo'\\\\\\\"bar\\\"\" (internal double quotes are escaped).\n\n            // Escape any literal double quotes present in the string value\n            // by prefixing them with a backslash.\n            // String.replace() handles this replacement correctly. For example,\n            // if this.value is 'foo\"bar', escapedValue becomes 'foo\\\\\"bar'.\n            // if this.value is 'foo' (no double quotes), escapedValue remains 'foo'.\n            String escapedValue = this.value.replace(\"\\\"\", \"\\\\\\\"\");\n            return \"\\\"\" + escapedValue + \"\\\"\";\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}