{
    "generation": "    @Override\n    public String asStringLiteral()\n    {\n        // Determine if the string contains single or double quotes\n        boolean containsDoubleQuote = this.value.contains(\"\\\"\");\n        boolean containsSingleQuote = this.value.contains(\"'\");\n\n        // If the string contains double quotes but no single quotes,\n        // it's preferable to use single quotes for the literal to avoid escaping the internal double quotes.\n        if (containsDoubleQuote && !containsSingleQuote)\n        {\n            // Escape backslashes first, then single quotes, for a single-quoted string literal.\n            String escapedValue = this.value.replace(\"\\\\\", \"\\\\\\\\\").replace(\"'\", \"\\\\'\");\n            return '\\'' + escapedValue + '\\'';\n        }\n        else\n        {\n            // In all other cases, default to using double quotes.\n            // This covers:\n            // 1. String contains single quotes but no double quotes (e.g., \"wal'do\").\n            //    Result: \"\\\"wal'do\\\"\" (no internal double quote to escape).\n            // 2. String contains both single and double quotes (e.g., \"a\\\"b'c\").\n            //    Result: \"\\\"a\\\\\\\"b'c\\\"\" (internal double quote will be escaped).\n            // 3. String contains neither single nor double quotes (e.g., \"foo\").\n            //    Result: \"\\\"foo\\\"\" (no internal quotes to worry about).\n            // Escape backslashes first, then double quotes, for a double-quoted string literal.\n            String escapedValue = this.value.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\");\n            return '\"' + escapedValue + '\"';\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}