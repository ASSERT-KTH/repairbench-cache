{
    "generation": "    /**\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     * @since 3.0 Changed signature from containsIgnoreCase(String, String) to containsIgnoreCase(CharSequence, CharSequence)\n     */\n    public static boolean containsIgnoreCase(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        // Original implementation used toUpperCase() which is locale-dependent\n        // and caused issues with characters like Turkish 'i' or German '\u00df'.\n        // return contains(str.toUpperCase(), searchStr.toUpperCase());\n\n        // Correct approach: iterate and compare regions using regionMatches\n        final int searchStrLen = searchStr.length();\n        final int strLen = str.length();\n\n        // An empty search string is always contained (consistent with String.contains(\"\"))\n        if (searchStrLen == 0) {\n            return true;\n        }\n\n        // Cannot find a non-empty string in a shorter string or empty string\n        if (searchStrLen > strLen) {\n            return false;\n        }\n\n        // Iterate through all possible starting positions in str\n        for (int i = 0; i <= strLen - searchStrLen; i++) {\n            // Check if the substring of str starting at i matches searchStr, ignoring case\n            if (str.regionMatches(true, i, searchStr, 0, searchStrLen)) {\n                return true;\n            }\n        }\n\n        return false; // No match found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}