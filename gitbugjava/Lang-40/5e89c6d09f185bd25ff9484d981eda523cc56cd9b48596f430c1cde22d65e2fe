{
    "generation": "    /**\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     * @since 3.0 Changed signature from containsIgnoreCase(String, String) to containsIgnoreCase(CharSequence, CharSequence)\n     */\n    public static boolean containsIgnoreCase(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        final int len1 = str.length();\n        final int len2 = searchStr.length();\n        if (len2 == 0) {\n             // An empty search string is always contained.\n             return true;\n         }\n        if (len1 < len2) {\n            // The search string cannot be contained if it is longer than the string to check.\n            return false;\n        }\n        // Iterate through the string 'str' to find potential starting points for 'searchStr'.\n        // The loop limit ensures that there's enough space left in 'str' for 'searchStr'.\n        for (int i = 0; i <= len1 - len2; i++) {\n            // Use regionMatches with ignoreCase set to true to compare the substring.\n            // regionMatches(ignoreCase, thisOffset, otherString, otherOffset, length)\n            if (str.regionMatches(true, i, searchStr, 0, len2)) {\n                return true; // Found a case-insensitive match.\n            }\n        }\n        // No match found after checking all possible positions.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}