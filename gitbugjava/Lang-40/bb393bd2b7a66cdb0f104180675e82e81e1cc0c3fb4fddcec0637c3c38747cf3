{
    "generation": "    /**\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     */\n    public static boolean containsIgnoreCase(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        int len1 = str.length();\n        int len2 = searchStr.length();\n        if (len2 == 0) {\n            return true; // An empty search string is always contained.\n        }\n        if (len2 > len1) {\n            return false; // A search string longer than the main string cannot be contained.\n        }\n        // Iterate through the main string looking for a match.\n        // The loop limit ensures that there's enough space left for the search string.\n        for (int i = 0; i <= len1 - len2; i++) {\n            // regionMatches with ignoreCase=true performs case-insensitive comparison\n            // consistent with equalsIgnoreCase, but on substrings.\n            // This avoids locale-specific issues with toUpperCase/toLowerCase like \u00df -> SS.\n            if (str.regionMatches(true, i, searchStr, 0, len2)) {\n                return true;\n            }\n        }\n        // No match found after checking all possible starting positions.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}