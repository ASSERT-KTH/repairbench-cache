{
    "generation": "  /**\n   * For each qualified name N in the global scope, we check if:\n   * (a) No ancestor of N is ever aliased or assigned an unknown value type.\n   *     (If N = \"a.b.c\", \"a\" and \"a.b\" are never aliased).\n   * (b) N has exactly one write, and it lives in the global scope.\n   * (c) N is aliased in a local scope.\n   *\n   * If (a) is true, then GlobalNamespace must know all the writes to N.\n   * If (a) and (b) are true, then N cannot change during the execution of\n   *    a local scope.\n   * If (a) and (b) and (c) are true, then the alias can be inlined if the\n   *    alias obeys the usual rules for how we decide whether a variable is\n   *    inlineable.\n   * @see InlineVariables\n   */\n  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Try to inline local aliases of globally defined names.\n      // Check conditions (a), (b), and (c).\n      // Condition (a) is implicit in the worklist invariant.\n      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n        // Condition (b) holds: Exactly one global write, no local writes.\n        // Find local aliases (condition (c)).\n        // Create a copy of the refs to avoid ConcurrentModificationException\n        // if removeRef modifies the underlying collection.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // Condition (c) holds for this ref: Local alias found.\n            // Try to inline it. inlineAliasIfPossible should contain\n            // the safety checks (like not inlining 'arguments').\n            if (inlineAliasIfPossible(ref, namespace)) {\n              // Inlining succeeded, remove the reference from the Name object.\n              // This might decrement aliasingGets.\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above. If not, and if it's an object or\n      // function with properties, its properties might now satisfy\n      // condition (a) and can be processed.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && // No more aliases exist.\n          name.props != null) {\n        // All of {@code name}'s children now meet condition (a) because\n        // the parent `name` meets (a) and is no longer aliased.\n        // Add them to the worklist for subsequent processing.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}