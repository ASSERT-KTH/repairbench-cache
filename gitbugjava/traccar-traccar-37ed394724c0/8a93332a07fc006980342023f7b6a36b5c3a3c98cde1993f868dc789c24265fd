{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    int length = buf.readUnsignedByte();\n\n    // Check for minimum length of requesting minimum size plus 2 bytes to be decoded\n    if (length < 8) {\n        return null;\n    }\n    int dataLength = length - 5;\n\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    if (type == MSG_LOGIN) {\n        String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n        buf.readUnsignedShort(); // type\n\n        deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n\n        if (dataLength > 10) {\n            int extensionBits = buf.readUnsignedShort();\n\n            int hours = extensionBits >> 4;         // Extract 4 MSB of extensionBits to get hours\n            int minutes = extensionBits & 0x0F;    // Extract 4 LSB of extensionBits to get minutes\n            int offset = (hours * 60 + minutes) * 60;\n            if ((extensionBits & 0x80) != 0) {\n                offset = -offset;\n            }\n\n            if (deviceSession != null) {\n                TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                if (timeZone.getRawOffset() == 0) {\n                    timeZone.setRawOffset(offset * 1000);\n                    deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                }\n            }\n        }\n\n        if (deviceSession != null) {\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n        return null;\n    } else if (type == MSG_HEARTBEAT) {\n        getLastLocation(position, null);\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n        position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n        if (buf.readableBytes() >= 2 + 6) {\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        }\n        if (buf.readableBytes() >= 1 + 6) {\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    } else if (type == MSG_ADDRESS_REQUEST) {\n        String response = \"NA&&NA&&0##\";\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(response.length());\n        content.writeInt(0);\n        content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n        sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n        return null;\n    } else if (type == MSG_TIME_REQUEST) {\n        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        ByteBuf content = Unpooled.buffer();\n        content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n        content.writeByte(calendar.get(Calendar.MONTH) + 1);\n        content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n        content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n        content.writeByte(calendar.get(Calendar.MINUTE));\n        content.writeByte(calendar.get(Calendar.SECOND));\n        sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n        return null;\n    } else if (type == MSG_X1_GPS && variant != Variant.SL4X) {\n        buf.readUnsignedInt(); // data and alarm\n        decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n        position.setNetwork(new Network(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())));\n        decodeWifi(position, buf, deviceSession);\n        long driverId = buf.readUnsignedInt();\n        if (driverId > 0) {\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n        }\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n        long portInfo = buf.readUnsignedInt();\n        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n        for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n            position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n        }\n        return position;\n    } else if (type == MSG_X1_PHOTO_INFO) {\n        buf.skipBytes(6); // time\n        buf.readUnsignedByte(); // fix status\n        buf.readUnsignedInt(); // latitude\n        buf.readUnsignedInt(); // longitude\n        buf.readUnsignedByte(); // camera id\n        buf.readUnsignedByte(); // photo source\n        buf.readUnsignedByte(); // picture format\n        ByteBuf photo = Unpooled.buffer(buf.readInt());\n        int pictureId = buf.readInt();\n        photos.put(pictureId, photo);\n        sendPhotoRequest(channel, pictureId);\n        return null;\n    } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n        ByteBuf time = buf.readSlice(6);\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(BcdUtil.readInteger(time, 2))\n                .setMonth(BcdUtil.readInteger(time, 2))\n                .setDay(BcdUtil.readInteger(time, 2))\n                .setHour(BcdUtil.readInteger(time, 2))\n                .setMinute(BcdUtil.readInteger(time, 2))\n                .setSecond(BcdUtil.readInteger(time, 2));\n        getLastLocation(position, dateBuilder.getDate());\n        Network network = new Network();\n        int wifiCount;\n        if (type == MSG_WIFI_4) {\n            wifiCount = buf.readUnsignedByte();\n        } else {\n            wifiCount = buf.getUnsignedByte(2);\n        }\n\n        for (int i = 0; i < wifiCount; i++) {\n            if (type == MSG_WIFI_4) {\n                buf.skipBytes(2);\n            }\n            WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n            wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                    buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                    buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n            if (type != MSG_WIFI_4) {\n                wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n            }\n            network.addWifiAccessPoint(wifiAccessPoint);\n        }\n        if (type != MSG_WIFI_4) {\n            int cellCount = buf.readUnsignedByte();\n            int mcc = buf.readUnsignedShort();\n            int mnc = buf.readUnsignedByte();\n            for (int i = 0; i < cellCount; i++) {\n                network.addCellTower(CellTower.from(mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n            }\n            if (channel != null) {\n                ByteBuf response = Unpooled.buffer();\n                response.writeShort(0x7878);\n                response.writeByte(0);\n                response.writeByte(type);\n                response.writeBytes(time.resetReaderIndex());\n                response.writeByte('\\r');\n                response.writeByte('\\n');\n                channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n            }\n        }\n        position.setNetwork(network);\n        return position;\n    } else if (type == MSG_INFO){\n        getLastLocation(position, null);\n        position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n        return position;\n    } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n            || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2 || type == MSG_LBS_3\n            || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n        int totalBytes = buf.readableBytes();\n        DateBuilder dateBuilder;\n        if (variant == Variant.WANWAY_S20 || variant == Variant.SL4X) {\n            buf.readUnsignedByte();\n        }\n        int mcc = buf.readUnsignedShort();\n        int mnc = BitUtil.check(mcc, 15) || variant == Variant.SL4X\n                ? buf.readUnsignedShort()\n                : buf.readUnsignedByte();\n        Network network = new Network();\n        decodeLbs(position, buf, type, false);\n        buf.skipBytes(buf.readableBytes() - totalBytes + 6);\n        return position;\n    } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n        getLastLocation(position, null);\n\n        buf.readUnsignedByte();\n        buf.readUnsignedShort();\n        buf.readUnsignedByte();\n        buf.readUnsignedByte();\n        buf.readUnsignedByte();\n\n        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n\n        buf.readUnsignedByte();\n        buf.readUnsignedShort();\n        buf.readUnsignedByte();\n\n        int value = buf.readUnsignedShort();\n        double temperature = BitUtil.to(value, 15) * 0.1;\n        position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n    } else if (isSupported(type)) {\n        handleSupported_MSG(type, position, buf, deviceSession, channel);\n        return position;\n    } else {\n        buf.skipBytes(dataLength);\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return null;\n    }\n\n    if (hasLanguage(type)) {\n        buf.readUnsignedShort();\n    }\n    if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n        position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n    }\n    sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}