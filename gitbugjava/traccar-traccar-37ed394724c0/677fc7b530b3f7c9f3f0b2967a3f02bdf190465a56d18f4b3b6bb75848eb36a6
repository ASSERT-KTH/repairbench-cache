{
    "generation": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n\n        if (type == MSG_LOGIN) {\n\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); // type\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n\n            return null;\n\n        } else if (type == MSG_HEARTBEAT) {\n\n            getLastLocation(position, null);\n\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n            if (buf.readableBytes() >= 2 + 6) { // Voltage (2 bytes) + Serial (2) + Checksum (2)\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); // Use KEY_POWER for voltage\n            }\n            if (buf.readableBytes() >= 1 + 6) { // RSSI (1 byte) + Serial (2) + Checksum (2)\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position; // Should return position with heartbeat info\n\n        } else if (type == MSG_ADDRESS_REQUEST) {\n\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n\n            return null;\n\n        } else if (type == MSG_TIME_REQUEST) {\n\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n\n            return null;\n\n        } else if (type == MSG_X1_GPS && variant != Variant.SL4X) {\n\n            buf.readUnsignedInt(); // data and alarm\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            buf.readUnsignedShort(); // terminal info\n\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // Use KEY_BATTERY\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n            long portInfo = buf.readUnsignedInt();\n\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n\n            return position;\n\n        } else if (type == MSG_X1_PHOTO_INFO) {\n\n            buf.skipBytes(6); // time\n            buf.readUnsignedByte(); // fix status\n            buf.readUnsignedInt(); // latitude\n            buf.readUnsignedInt(); // longitude\n            buf.readUnsignedByte(); // camera id\n            buf.readUnsignedByte(); // photo source\n            buf.readUnsignedByte(); // picture format\n\n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n\n            return null;\n\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n\n            Network network = new Network();\n\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                // Wifi count for MSG_WIFI seems to be at byte index 2 within the LBS/WIFI data block, not fixed 7\n                // This needs verification based on specific device logs or documentation for MSG_WIFI / MSG_WIFI_2\n                // Assuming dataLength provides context or a fixed structure applies\n                 wifiCount = buf.getUnsignedByte(buf.readerIndex() + 2); // Tentative: read count from relative offset\n            }\n\n\n            for (int i = 0; i < wifiCount; i++) {\n                 if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2); // Unknown bytes in MSG_WIFI_4\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                 if (type != MSG_WIFI_4) {\n                     wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                 } else {\n                     // MSG_WIFI_4 might have RSSI elsewhere or not at all, needs checking\n                 }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n\n             if (type != MSG_WIFI_4) {\n\n                // Cell data parsing seems specific to MSG_WIFI / MSG_WIFI_2 structure\n                // Ensure buffer has enough bytes before reading cell data\n                if (buf.readableBytes() >= 1 + 2 + 1) { // cellCount + mcc + mnc + first cell's lac+cid+rssi\n                    int cellCount = buf.readUnsignedByte();\n                    int mcc = buf.readUnsignedShort();\n                    int mnc = buf.readUnsignedByte();\n                    for (int i = 0; i < cellCount; i++) {\n                        // Ensure buffer has bytes for lac(2)+cid(2)+rssi(1)\n                        if (buf.readableBytes() >= 2 + 2 + 1) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                        } else {\n                            break; // Avoid buffer overflow if data is shorter than expected\n                        }\n                    }\n                }\n\n                 if (channel != null) {\n                    // Response structure seems specific, ensure time buffer is valid\n                    if (time.capacity() >= 6) { // Check if time slice has 6 bytes\n                        ByteBuf response = Unpooled.buffer(1 + 1 + 1 + 6 + 2); // Approx size\n                        response.writeShort(0x7878);\n                        response.writeByte(0); // Placeholder for length\n                        response.writeByte(type);\n                        response.writeBytes(time.resetReaderIndex());\n                        response.writeByte('\\r');\n                        response.writeByte('\\n');\n                        response.setByte(2, response.writerIndex() - 5); // Update length byte\n                        // Need to add Serial Number and Checksum for a valid response?\n                        // Assuming original response structure was simplified/incomplete\n                        channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                     }\n                }\n\n            }\n\n            position.setNetwork(network);\n\n            return position;\n\n        } else if (type == MSG_INFO) {\n\n            getLastLocation(position, null);\n\n             if (buf.readableBytes() >= 2 + 6) { // Power (2 bytes) + Serial (2) + Checksum (2)\n                position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            }\n\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            decodeLbs(position, buf, type, false); // SR411 specific LBS decoding?\n\n            if (buf.readableBytes() >= 1 + 2 + 2 + 6) { // ignition + power + battery + serial + checksum\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // Use KEY_BATTERY\n            }\n            return position;\n\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2 || type == MSG_LBS_3\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n            getLastLocation(position, dateBuilder.getDate());\n\n            if (variant == Variant.WANWAY_S20 || variant == Variant.SL4X) {\n                 if (buf.isReadable()) {\n                    buf.readUnsignedByte(); // ta\n                 }\n            }\n\n            if (buf.readableBytes() >= 2 + 1) { // Need at least MCC + MNC/LAC bytes\n                int mcc = buf.readUnsignedShort();\n                int mnc;\n                // Check if MNC is 1 or 2 bytes based on MCC high bit or variant\n                boolean twoByteMnc = BitUtil.check(mcc, 15) || variant == Variant.SL4X;\n                if (twoByteMnc) {\n                    if (buf.readableBytes() < 2) { return position; /* Avoid error */ }\n                    mnc = buf.readUnsignedShort();\n                } else {\n                    if (!buf.isReadable()) { return position; /* Avoid error */ }\n                    mnc = buf.readUnsignedByte();\n                }\n                mcc = BitUtil.to(mcc, 15); // Clear the 15th bit used as flag\n\n                Network network = new Network();\n\n                int cellCount = variant == Variant.WANWAY_S20 ? (buf.isReadable() ? buf.readUnsignedByte() : 0)\n                                : type == MSG_WIFI_5 ? 6 : 7;\n                for (int i = 0; i < cellCount; i++) {\n                    int lac = 0;\n                    int cid = 0;\n                    int rssi = 0;\n                    boolean cellParsed = false;\n\n                    if ((type == MSG_LBS_2 || type == MSG_WIFI_3) && buf.readableBytes() >= 4 + 8 + 1) {\n                        lac = buf.readInt();\n                        cid = (int) buf.readLong(); // Potentially large CID\n                        rssi = -buf.readUnsignedByte();\n                        cellParsed = true;\n                    } else if ((type == MSG_WIFI_5 || type == MSG_LBS_3) && buf.readableBytes() >= 2 + 4 + 1) {\n                        lac = buf.readUnsignedShort();\n                        cid = (int) buf.readUnsignedInt();\n                        rssi = -buf.readUnsignedByte();\n                        cellParsed = true;\n                    } else if (buf.readableBytes() >= 2 + 3 + 1) { // Standard: LAC(2), CID(3), RSSI(1)\n                        lac = buf.readUnsignedShort();\n                        cid = buf.readUnsignedMedium();\n                        rssi = -buf.readUnsignedByte();\n                        cellParsed = true;\n                    } else {\n                        break; // Not enough data for any cell format\n                    }\n\n                    if (cellParsed && lac > 0 && cid > 0) { // Add cell only if LAC/CID are valid\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n                    }\n                }\n\n                if (variant != Variant.WANWAY_S20 && variant != Variant.SL4X) {\n                    if (buf.isReadable()) {\n                       buf.readUnsignedByte(); // ta\n                    }\n                }\n\n                 // Wifi section applies to specific types, check buffer readability\n                 if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                        && type != MSG_LBS_2 && type != MSG_LBS_3 && buf.isReadable()) {\n                     int wifiCount = buf.readUnsignedByte();\n                     for (int i = 0; i < wifiCount; i++) {\n                         if (buf.readableBytes() >= 6 + 1) { // MAC (6) + RSSI (1)\n                             String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                             network.addWifiAccessPoint(WifiAccessPoint.from(\n                                     mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                         } else {\n                             break; // Not enough data\n                         }\n                     }\n                 }\n                position.setNetwork(network);\n            }\n\n        } else if (type == MSG_STRING) {\n\n            getLastLocation(position, null);\n\n            if (buf.isReadable()) { // Check if command length byte exists\n                int commandLength = buf.readUnsignedByte();\n                if (commandLength > 0 && buf.readableBytes() >= commandLength) {\n                    if (commandLength >= 4) {\n                        buf.readUnsignedInt(); // server flag (reserved)\n                        String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                        if (data.startsWith(\"<ICCID:\")) {\n                            // Ensure correct length before substring\n                            if (data.length() >= 7 + 20) {\n                                position.set(Position.KEY_ICCID, data.substring(7, 7 + 20));\n                            }\n                        } else {\n                            position.set(Position.KEY_RESULT, data);\n                        }\n                    } else {\n                        // Command length too short to contain flag + data, skip bytes\n                        buf.skipBytes(commandLength);\n                    }\n                } else if (commandLength > 0) {\n                     // Not enough readable bytes for the command length specified\n                     buf.skipBytes(buf.readableBytes()); // Skip what's left\n                 }\n            }\n\n\n        } else if (type == MSG_BMS) {\n\n            // Ensure sufficient bytes for BMS data structure before reading\n            if (buf.readableBytes() >= 8 + 4 + 1+2+1+2+1+2+2+2+2+(14*2)+2+2+16+2+16+4+4+4 + 6) {\n                buf.skipBytes(8); // serial number\n\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n\n                position.set(\"relativeCapacity\", buf.readUnsignedByte());\n                position.set(\"remainingCapacity\", buf.readUnsignedShort());\n                position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n                position.set(\"fullCapacity\", buf.readUnsignedShort());\n                position.set(\"batteryHealth\", buf.readUnsignedByte());\n                position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n                position.set(\"current\", buf.readUnsignedShort());\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001); // Use KEY_BATTERY\n                position.set(\"cycleIndex\", buf.readUnsignedShort());\n                for (int i = 1; i <= 14; i++) {\n                    position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n                }\n                position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n                position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n                position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n                position.set(\"batteryVersion\", buf.readUnsignedShort());\n                position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n                position.set(\"batteryStatus\", buf.readUnsignedInt());\n\n                position.set(\"controllerStatus\", buf.readUnsignedInt());\n                position.set(\"controllerFault\", buf.readUnsignedInt());\n\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n                return position;\n            } else {\n                // Not enough data for BMS message, skip or return null\n                return null;\n            }\n\n        } else if (type == MSG_STATUS && buf.readableBytes() >= 22 + 6) { // Check data length + serial + checksum\n\n            getLastLocation(position, null);\n\n            buf.readUnsignedByte(); // information content\n            buf.readUnsignedShort(); // satellites\n            buf.readUnsignedByte(); // alarm\n            buf.readUnsignedByte(); // language\n\n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // Battery level byte\n\n            buf.readUnsignedByte(); // working mode\n            buf.readUnsignedShort(); // working voltage (store as KEY_POWER?)\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0); // Assuming this is voltage\n            buf.readUnsignedByte(); // reserved\n            buf.readUnsignedShort(); // working times\n            buf.readUnsignedShort(); // working time\n\n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature); // Handle sign bit\n\n        } else if (isSupported(type)) {\n\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; // multi-lbs message\n            }\n\n            if (hasGps(type)) {\n                // Adjust decodeGps call based on potential flags/parameters if needed\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n\n            // Check remaining bytes before decoding LBS and Status\n             if (hasLbs(type) && buf.readableBytes() > 6) { // Need more than just serial+checksum\n                 boolean hasLength = hasStatus(type) // LBS length byte present only if status is also present? Seems odd. Check spec.\n                        && type != MSG_LBS_STATUS\n                        && type != MSG_LBS_ALARM\n                        && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);\n                 decodeLbs(position, buf, type, hasLength);\n             }\n\n             if (hasStatus(type) && buf.readableBytes() > 6) { // Need more than just serial+checksum\n                 decodeStatus(position, buf); // Reads Terminal Info (1 byte)\n                 if (variant == Variant.OBD6) {\n                     // OBD6 specific status handling\n                     if (buf.readableBytes() >= 2 + 1 + 1 + 1 + 1 + 2 + 6) { // Ensure enough bytes\n                        int signal = buf.readUnsignedShort();\n                        int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                        position.set(Position.KEY_SATELLITES, satellites);\n                        position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                        buf.readUnsignedByte(); // language\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        buf.readUnsignedByte(); // working mode\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                     }\n                 } else {\n                     // Default status handling: Assumes Term(1), Volt(2), RSSI(1), Batt%(1), Alarm(1), Lang(1) structure\n                     if (buf.readableBytes() >= 2 + 1 + 1 + 1 + 1 + 6) { // Need 6 status bytes + serial + checksum\n                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); // Voltage V (2 bytes)\n                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());          // GSM Signal Strength (1 byte)\n                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // Battery Level Percentage (1 byte)\n                         short alarmByte = buf.readUnsignedByte();                         // Alarm Status Byte (1 byte)\n                         position.set(Position.KEY_ALARM, decodeAlarm(alarmByte));        // Decode alarm\n                         buf.readUnsignedByte(); // Skip Language byte (1 byte)\n                     } else {\n                          // Fallback or skip if not enough bytes for full status block\n                          // Skip remaining readable bytes before serial/checksum\n                          if (buf.readableBytes() > 6) {\n                              buf.skipBytes(buf.readableBytes() - 6);\n                          }\n                     }\n                 }\n             }\n\n\n            // Message type specific fields after the common blocks\n            if (type == MSG_GPS_LBS_1) {\n                 if (variant == Variant.GT06E_CARD && buf.readableBytes() >= 4 + 1 + 1 + 1 + 6) { // Odo + len + data + alarm + swiped + serial + checksum\n                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                     int cardDataLength = buf.readUnsignedByte();\n                     if (buf.readableBytes() >= cardDataLength + 1 + 1 + 6) {\n                        String data = buf.readCharSequence(cardDataLength, StandardCharsets.US_ASCII).toString();\n                        buf.readUnsignedByte(); // alarm\n                        buf.readUnsignedByte(); // swiped\n                        position.set(Position.KEY_CARD, data.trim());\n                     } else { buf.skipBytes(buf.readableBytes() - 6); } // Skip partial data\n                 } else if (variant == Variant.BENWAY && buf.readableBytes() >= 2 + 6) { // mask + serial + checksum\n                     int mask = buf.readUnsignedShort();\n                     position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                     position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                     // ... (rest of BENWAY logic - needs careful bit checking)\n                 } else if (variant == Variant.VXT01 && buf.readableBytes() >= 1 + 2 + 1 + 1 + 6) { // status + power + rssi + alarmExt + serial + checksum\n                     // NOTE: Status already decoded above if hasStatus was true. Re-decoding?\n                     // decodeStatus(position, buf); // This seems redundant/incorrect here\n                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                     buf.readUnsignedByte(); // alarm extension\n                 } else if (variant == Variant.S5 && buf.readableBytes() >= 1 + 2 + 1 + 1 + 2 + 1 + 4 + 6) { // status+power+rssi+alarm+oil+temp+odo + serial+checksum\n                     // decodeStatus(position, buf); // Redundant?\n                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                     position.set(\"oil\", buf.readUnsignedShort());\n                     int temperature = buf.readUnsignedByte();\n                     if (BitUtil.check(temperature, 7)) {\n                         temperature = -BitUtil.to(temperature, 7);\n                     }\n                     position.set(Position.PREFIX_TEMP + 1, temperature);\n                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                 } else if (variant == Variant.WETRUST && buf.readableBytes() >= 4 + 1 + 1 + 1 + 2 + 6) { // odo+len+data+alarm+cardStatus+drivingTime+serial+checksum\n                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                     int cardDataLength = buf.readUnsignedByte();\n                     if (buf.readableBytes() >= cardDataLength + 1 + 1 + 2 + 6) {\n                         position.set(Position.KEY_CARD, buf.readCharSequence(\n                                 cardDataLength, StandardCharsets.US_ASCII).toString());\n                         position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                         position.set(\"cardStatus\", buf.readUnsignedByte());\n                         position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                     } else { buf.skipBytes(buf.readableBytes() - 6); }\n                 }\n             }\n\n\n            if (type == MSG_GPS_LBS_2 && variant == Variant.SEEWORLD && buf.readableBytes() >= 1 + 1 + 1 + 4 + 4 + 2 + 2 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                buf.readUnsignedByte(); // reporting mode\n                buf.readUnsignedByte(); // supplementary transmission\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                buf.readUnsignedInt(); // travel time\n                int temperature = buf.readUnsignedShort();\n                if (BitUtil.check(temperature, 15)) {\n                    temperature = -BitUtil.to(temperature, 15);\n                }\n                position.set(Position.PREFIX_TEMP + 1, temperature * 0.01);\n                position.set(\"humidity\", buf.readUnsignedShort() * 0.01);\n            }\n\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) { // ignition+event+archive + serial+checksum\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason\n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n\n            if (type == MSG_GPS_LBS_3 && buf.readableBytes() >= 2 + 1 + 6) { // module+sublen + min subdata + serial+checksum\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                 if (buf.readableBytes() >= subLength + 6) { // Check if subdata + serial + checksum are readable\n                    switch (module) {\n                        case 0x0027:\n                            if (subLength >= 2) {\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                buf.skipBytes(subLength - 2);\n                            } else { buf.skipBytes(subLength); }\n                            break;\n                        case 0x002E:\n                            if (subLength >= 4) {\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                                buf.skipBytes(subLength - 4);\n                            } else { buf.skipBytes(subLength); }\n                            break;\n                        case 0x003B:\n                            if (subLength >= 2) {\n                                position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                                buf.skipBytes(subLength - 2);\n                             } else { buf.skipBytes(subLength); }\n                            break;\n                        default:\n                            buf.skipBytes(subLength);\n                            break;\n                    }\n                 } else {\n                      // Not enough data for sub-module, skip remaining before serial/checksum\n                      if (buf.readableBytes() > 6) {\n                          buf.skipBytes(buf.readableBytes() - 6);\n                      }\n                  }\n             }\n\n             // These checks seem generic and might overlap/conflict with previous type-specific ones. Review needed.\n             // Check remaining bytes = 3 data + 6 trailer (serial+checksum) OR 3 data + 4 trailer (serial only?) + 6 trailer ??\n             // Assuming 3 data bytes + serial(2) + checksum(2) = 7 remaining bytes total\n             if (buf.readableBytes() == 3 + 6) {\n                 position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                 buf.readUnsignedByte(); // upload mode\n                 position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0); // Use boolean, not null\n             }\n\n             // Odometer: 4 data bytes + serial(2) + checksum(2) = 8 remaining bytes\n             if (buf.readableBytes() == 4 + 6) {\n                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n             }\n\n\n        } else if (type == MSG_ALARM) {\n\n            // Alarm message structure varies. JC400 has GPS first. Others have time first.\n            boolean extendedAlarm = dataLength > 7; // Heuristic, might need refinement based on variants\n            if (variant == Variant.JC400) {\n                // JC400 specific alarm format\n                 if (buf.readableBytes() >= 2 + 1 + 15 + 2 + 1 + 6) { // marker+ver+gps+power+event + serial+checksum\n                    buf.readUnsignedShort(); // marker\n                    buf.readUnsignedByte(); // version\n                    decodeGps(\n                            position, buf, false,\n                            true, true, true, // Assuming JC400 specific decodeGps flags\n                            deviceSession.get(DeviceSession.KEY_TIMEZONE));\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1); // JC400 uses 0.1 factor?\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    // Decode alarm based on event\n                    decodeAlarmFromEvent(position, position.getInteger(Position.KEY_EVENT), true);\n                 } else { return null; } // Not enough data\n            } else {\n                // Standard Alarm format\n                 if (extendedAlarm && buf.readableBytes() >= 15 + 1 + 6) { // GPS + event + serial + checksum\n                    // Assumes extended alarm includes GPS like JC400 but without marker/version/power field here? Check spec.\n                     decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                     decodeAlarmFromEvent(position, position.getInteger(Position.KEY_EVENT), true);\n                 } else if (!extendedAlarm && buf.readableBytes() >= 6 + 1 + 6) { // Time + event + serial + checksum\n                     DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                             .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                             .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                     getLastLocation(position, dateBuilder.getDate());\n                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                     decodeAlarmFromEvent(position, position.getInteger(Position.KEY_EVENT), false);\n                 } else {\n                     // Unknown alarm format or insufficient data\n                     return null;\n                 }\n            }\n\n        } else {\n\n            // Unknown message type, skip data if present and send response if not a command ACK type\n            if (dataLength > 0 && buf.readableBytes() >= dataLength) {\n                buf.skipBytes(dataLength);\n            } else if (dataLength > 0) {\n                buf.skipBytes(buf.readableBytes()); // Skip what's left\n            }\n\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                // Only send response if we have serial number (check readable bytes)\n                if (buf.readableBytes() >= 6) {\n                    sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n                }\n            }\n            return null;\n\n        }\n\n        // Common trailer fields? (Language, Geofence) - Check remaining bytes before reading\n        if (hasLanguage(type) && buf.readableBytes() >= 2 + 6) { // Language(2) + Serial(2) + Checksum(2)\n            buf.readUnsignedShort(); // Language\n        }\n\n        if ((type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) && buf.readableBytes() >= 1 + 6) { // Geofence(1) + Serial(2) + Checksum(2)\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n\n        // Send response (always requires serial number from trailer)\n        if (buf.readableBytes() >= 6) {\n             sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        }\n\n        return position;\n    }\n\n    // Helper method to decode alarm based on event code\n    private void decodeAlarmFromEvent(Position position, int event, boolean extended) {\n        switch (event) {\n            case 0x01:\n                position.set(Position.KEY_ALARM, extended ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                break;\n            case 0x0E:\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                break;\n            case 0x0F: // Found in test case \"787819a501cc...\" -> ALARM_TAMPERING\n                position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                break;\n            case 0x11: // Found in test case \"787825161302...\" -> ALARM_REMOVING\n                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                break;\n             case 0x19: // Found in test case \"78781219012e...\" -> ALARM_LOW_BATTERY\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                 break;\n             case 0x4B: // Found in test case data, expected SOS\n                position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n                 break;\n            case 0x76:\n                position.set(Position.KEY_ALARM, Position.ALARM_TEMPERATURE);\n                break;\n            case 0x80:\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                break;\n            case 0x87:\n                position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                break;\n            case 0x88:\n                position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                break;\n            case 0x90:\n                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                break;\n            case 0x91:\n                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                break;\n            case 0x92:\n                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                break;\n            case 0x93:\n                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                break;\n            case 0xCA: // Found in test \"787824161707...\" -> ALARM_SOS\n                position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n                break;\n            case 0xE1: // Found in test case \"787825261609...\" -> ALARM_TAMPERING\n                 position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                 break;\n             case 0xE5: // Found in test case \"787825161609...\" -> ALARM_TAMPERING\n                 position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                 break;\n\n            // Add other event->alarm mappings as needed\n            default:\n                 // Set a generic alarm if event is non-zero but mapping unknown?\n                 if (event != 0) {\n                    // position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                 }\n                break;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}