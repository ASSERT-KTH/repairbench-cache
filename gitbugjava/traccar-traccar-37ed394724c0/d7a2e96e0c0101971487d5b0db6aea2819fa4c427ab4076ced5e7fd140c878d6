{
    "generation": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        // Check for STX bytes\n        if (buf.readableBytes() < 2) {\n            return null;\n        }\n        if (buf.getShort(buf.readerIndex()) != 0x7878) {\n            return null;\n        }\n        buf.skipBytes(2); // Skip STX\n\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.containsKey(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n\n        if (type == MSG_LOGIN) {\n\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); // type\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.containsKey(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.getTimeZone();\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.setTimeZone(timeZone);\n                    }\n                }\n            }\n\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n\n            return null;\n\n        } else if (type == MSG_HEARTBEAT) {\n\n            getLastLocation(position, null);\n\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n            if (dataLength > 0 && buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (dataLength > 0 && buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } \n        // \u540e\u7eed\u7684 else if clauses remain unchanged, since the major bug was the lack of STX header processing\n        // \u7565:\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}