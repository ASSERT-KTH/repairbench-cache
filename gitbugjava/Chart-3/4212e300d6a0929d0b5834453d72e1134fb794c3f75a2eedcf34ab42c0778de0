{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n\n        // Reset the list of data items and cached min/max values\n        copy.data = new java.util.ArrayList();\n        // Assuming TimeSeries caches min and max Y values in fields minY and maxY\n        // Reset them so they are recalculated based *only* on the copied items\n        copy.minY = Double.NaN;\n        copy.maxY = Double.NaN;\n        // Note: If other range-dependent cached values exist, they might need resetting too.\n\n        if (this.data.size() > 0) {\n            // Ensure the end index is not out of bounds\n            int M = this.data.size() - 1;\n            if (end > M) {\n                end = M;\n            }\n            // If start is still valid relative to the potentially adjusted end\n            if (start <= end) {\n                for (int index = start; index <= end; index++) {\n                    // Check if index is within the bounds of the original data list\n                    // Although start/end checks are done, defensive check inside loop is safer\n                    // if list could somehow change concurrently (unlikely here, but good practice)\n                    // However, given the initial checks and adjustment, index should be valid.\n                    // Let's rely on the check 'start <= end' after adjustment.\n                    TimeSeriesDataItem item\n                            = (TimeSeriesDataItem) this.data.get(index);\n                    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                    try {\n                        // The add method should correctly update minY and maxY\n                        // starting from the NaN state.\n                        copy.add(clone);\n                    }\n                    catch (SeriesException e) {\n                        // Should not happen if cloning logic is correct and add handles clones\n                        System.err.println(\"Internal error copying TimeSeries data.\");\n                        e.printStackTrace();\n                    }\n                }\n            }\n            // If start > end (occurs if start >= size initially or end was adjusted below start),\n            // the loop is skipped, the copy remains empty, minY/maxY are NaN - this is correct.\n        }\n        // If the original series was empty, the loop is skipped, copy is empty, minY/maxY are NaN - correct.\n        return copy;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}