{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        // TODO(johnlenz): scope.getVar should never return null.\n\n        // A null var means that the variable was not declared in\n        // the global scope or outer local scope, and that it might be\n        // a variable targetting a slot in the scope chain. For example,\n        // 'y' in:\n        // function f(x) { with (x) { y = 3; } }\n        // We don't know what 'y' is referring to, so we can't do much.\n\n        // isVarDeclaration is true if this is the NAME node in a VAR declaration.\n        // ex: var x = 1;\n        // left.isName() is true, left.hasChildren() is true.\n        // ex: x = 1;\n        // left.isName() is true, left.hasChildren() is false.\n        boolean isVarDeclaration = left.hasChildren();\n\n        // When looking at VAR initializers for declared VARs, we tend\n        // to use the declared type over the type it's being\n        // initialized to in the global scope.\n        //\n        // For example,\n        // /** @param {number} */ var f = goog.abstractMethod;\n        // it's obvious that the programmer wants you to use\n        // the declared function signature, not the inferred signature.\n        //\n        // Or,\n        // /** @type {Object.<string>} */ var x = {};\n        // the one-time anonymous object on the right side\n        // is as narrow as it can possibly be, but we need to make\n        // sure we back-infer the <string> element constraint on\n        // the left hand side, so we use the left hand side.\n        //\n        // However, if the variable is initialized to null or undefined,\n        // we want the scope to reflect the narrower type, as that's\n        // crucial for nullability/checkTypes checks.\n\n        boolean declaredTypeIsBetter = var != null && isVarDeclaration &&\n            !var.isTypeInferred() &&\n            !resultType.isNullType() &&\n            !resultType.isVoidType(); // Check for null or undefined\n\n        // Update the scope only if the declared type isn't better, or if the var is null.\n        if (var == null || !declaredTypeIsBetter) {\n           // If the variable is unknown, this might be a slot in the scope chain.\n           // Assignment to such a slot does not redefine the type in the current scope.\n           if (var != null) {\n             redeclareSimpleVar(scope, left, resultType);\n           }\n        }\n\n        // Set the JSType on the Node. Use the result type when it's a VAR declaration\n        // or the original type was unknown.\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        // Update the Var's type if it was originally inferred.\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}