{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // Covariant return types: this.returnType <: that.returnType\n    // Note: isSubtype handles UNKNOWN correctly (UNKNOWN is subtype of anything).\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Contravariant parameter types: that.paramType[i] <: this.paramType[i]\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // If 'this' expects a parameter type, 'that' must provide a subtype (contravariance).\n      // If 'this' parameter type is null/unknown, it accepts anything from 'that'.\n      if (thisParamType != null) {\n          // If 'that' has no type, it cannot fulfill the requirement.\n          // If 'that' has a type, it must be assignable to 'this' parameter type.\n         if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n           return false;\n         }\n      }\n      // TODO(johnlenz): Optional parameters are not strictly handled here w.r.t.\n      // required parameters. The current logic relies on JSType compatibility.\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // Advancement logic:\n      // If this is varargs, it stays put to potentially consume more 'that' params.\n      // If that is varargs, it stays put to potentially be consumed by more 'this' params.\n      // If both are varargs, we stop (handled after advancing).\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // If both are var_args, we're done comparing parameters.\n      // (The types were checked earlier in the loop).\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null; // Mark as completed\n        thatParam = null; // Mark as completed\n        break; // Exit loop\n      }\n    }\n\n    // After checking parameter types, check parameter counts.\n    // Subtyping requires that 'this' function type can safely be used\n    // where 'that' function type is expected.\n\n    // Case 1: 'this' has fewer or equal parameters than 'that' (thisParam finished).\n    // This is the g < f case from the comments (e.g., function(a) is subtype of function(a,b)).\n    // This is generally allowed in JS Compiler for flexibility (e.g., passing callbacks).\n    if (thisParam == null) {\n        // If 'that' still has required parameters, is it technically a subtype?\n        // The comment implies yes: \"We want to support the use case where you can pass g\n        // where f is expected, and pretend that g ignores the second argument.\"\n        // So, if this ran out first, assume it's a valid subtype.\n        return true;\n    }\n\n    // Case 2: 'that' ran out of parameters, but 'this' still has parameters.\n    // This is the f !< g case (e.g., function(a,b) is not subtype of function(a)).\n    // Generally, 'this' cannot require more parameters than 'that'.\n    if (thatParam == null) { // && thisParam != null is implied\n       // Exception: If the remaining parameter in 'this' is varargs.\n       // e.g., f(num...) IS a subtype of f(num, num).\n       // The loop already checked type compatibility of the varargs against remaining 'that' params.\n       return thisParam.isVarArgs();\n    }\n\n    // Case 3: Should not happen. If loop finished, either one param is null,\n    // or both were varargs and were set to null.\n    // If somehow both are non-null here, it would imply both are varargs,\n    // which should be compatible if the loop finished.\n    return true; // Should be unreachable, but default to true if loop completed.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}