{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // Note: We're checking if 'this' is a subtype of 'that'.\n\n    // 1. Covariant Return Types: this.returnType <: that.returnType\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // 2. Contravariant Parameter Types: that.paramType[i] <: this.paramType[i]\n    // 3. Arity check (lenient): 'this' cannot have more *required* parameters\n    //    than 'that'. Optional/varargs parameters in 'this' beyond 'that's\n    //    arity are allowed, reflecting the JS behavior of ignoring extra args.\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // Check parameter type compatibility (contravariance)\n      // Treat null types (implicit 'any') as compatible.\n      if (thisParamType != null && thatParamType != null) {\n        if (!thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // Advance pointers, stopping at varargs\n      // (If one is varargs and the other is not, the non-varargs one stops\n      // advancing, while the varargs one conceptually matches remaining args)\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // Stop comparing if both reached varargs simultaneously\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n        break;\n      }\n    }\n\n    // After comparing common parameters, check arity.\n\n    // If 'that' ran out of parameters (or hit varargs while 'this' didn't),\n    // 'this' must not have any remaining *required* parameters.\n    if (thatParam == null) {\n      while (thisParam != null) {\n        // If 'this' has a required parameter here, it demands more arguments\n        // than 'that' provides. This violates subtyping.\n        if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n          return false;\n        }\n        // If 'this' ends in varargs, it's compatible with 'that' ending.\n        if (thisParam.isVarArgs()) {\n             thisParam = null; // Treat varargs as consuming the rest\n             break;\n        }\n        thisParam = thisParam.getNext();\n      }\n    }\n    // If 'this' ran out first (thisParam == null), it's compatible.\n    // 'that' can have more parameters (optional or required); 'this' just\n    // won't provide values for them, which fits the lenient subtyping goal\n    // (a function with fewer parameters can be used where one with more\n    // parameters is expected, ignoring the extra ones).\n\n    // All checks passed.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}