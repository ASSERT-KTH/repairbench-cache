{
    "generation": "import java.util.HashSet;\nimport java.util.Set;\n\n// NOTE: The following imports are usually handled by the environment\n// import static org.apache.commons.lang3.StringUtils.isEmpty; // Assuming StringUtils.isEmpty exists\n// import org.apache.commons.lang3.ArrayUtils; // Assuming ArrayUtils.isEmpty exists\n\n/**\n * <p>Checks if the CharSequence contains any character in the given\n * set of characters.</p>\n *\n * <p>A <code>null</code> CharSequence will return <code>false</code>.\n * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n *\n * <pre>\n * StringUtils.containsAny(null, *)                = false\n * StringUtils.containsAny(\"\", *)                  = false\n * StringUtils.containsAny(*, null)                = false\n * StringUtils.containsAny(*, [])                  = false\n * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n * StringUtils.containsAny(\"aba\", ['z'])           = false\n * </pre>\n *\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the <code>true</code> if any of the chars are found,\n * <code>false</code> if no match or null input\n * @since 2.4\n */\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    // Check for null or empty inputs early\n    // Assumes static import or availability of isEmpty and ArrayUtils.isEmpty\n    if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {\n         // Adjusted check to directly handle cs null/empty and searchChars null/empty\n         // This replaces the need for external isEmpty/ArrayUtils.isEmpty for this snippet,\n         // assuming the original check `isEmpty(cs) || ArrayUtils.isEmpty(searchChars)`\n         // behaved equivalently for null/empty conditions.\n        return false;\n    }\n\n    // Create a set of code points from searchChars for efficient lookup.\n    // This handles supplementary characters correctly by pairing surrogates.\n    Set<Integer> searchCodePoints = new HashSet<>();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < searchLength; i++) {\n        char c1 = searchChars[i];\n        // Check if the character is a high surrogate\n        if (Character.isHighSurrogate(c1)) {\n            // Ensure there is a next character to form a pair\n            if (i + 1 < searchLength) {\n                char c2 = searchChars[i + 1];\n                // Check if the next character is a low surrogate\n                if (Character.isLowSurrogate(c2)) {\n                    // Form the supplementary code point and add it to the set\n                    searchCodePoints.add(Character.toCodePoint(c1, c2));\n                    // Skip the low surrogate character in the next iteration\n                    i++;\n                    continue; // Continue to the next potential start of a character\n                }\n            }\n            // If it's a lone high surrogate or not followed by a low surrogate,\n            // it doesn't form a valid character. We choose to ignore it based on\n            // the interpretation of searching for valid Unicode characters (code points).\n        } else if (!Character.isLowSurrogate(c1)) {\n            // It's a BMP character (not a high or low surrogate). Add its code point.\n            // Lone low surrogates are also ignored as they are not valid characters alone.\n            searchCodePoints.add((int) c1);\n        }\n        // else: c1 is a lone low surrogate, ignore it.\n    }\n\n    // If the set of valid search code points is empty (e.g., searchChars only contained lone surrogates),\n    // no match is possible. The loop below will handle this correctly.\n\n    // Iterate through the input CharSequence by code points.\n    int csLength = cs.length();\n    for (int i = 0; i < csLength; i++) {\n        // Get the code point at the current position.\n        int codePoint = Character.codePointAt(cs, i);\n\n        // Check if the current code point exists in the set of search code points.\n        if (searchCodePoints.contains(codePoint)) {\n            return true; // Found a match.\n        }\n\n        // If the current code point is a supplementary character (using two chars),\n        // advance the index by an extra step to correctly position for the next code point.\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i++;\n        }\n    }\n\n    // No matching character found after iterating through the entire CharSequence.\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}