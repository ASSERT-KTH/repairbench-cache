{
    "generation": "import java.util.HashSet;\nimport java.util.Set;\n\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n        // Note: Assuming isEmpty and ArrayUtils.isEmpty are helper methods available in the context.\n        // If not, they should be replaced with (cs == null || cs.length() == 0)\n        // and (searchChars == null || searchChars.length == 0) respectively.\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal int csLength = cs.length();\n\t\tfinal int searchLength = searchChars.length;\n\t\t\n\t\t// Build set of code points from searchChars for efficient lookup.\n        // This set stores the Unicode code points we are searching for.\n        // Supplementary characters in searchChars are represented as code points > 0xFFFF.\n        // Lone surrogates or BMP chars are represented as their char value cast to int.\n        final Set<Integer> searchCodepoints = new HashSet<>();\n        int i = 0;\n        while (i < searchLength) {\n            final char ch = searchChars[i];\n            // Check if the character is a high surrogate\n            if (Character.isHighSurrogate(ch)) {\n                // Check if there's a next character available\n                if (i + 1 < searchLength) {\n                    final char ch2 = searchChars[i + 1];\n                    // Check if the next character is a low surrogate\n                    if (Character.isLowSurrogate(ch2)) {\n                        // Found a valid surrogate pair, convert to a supplementary code point\n                        searchCodepoints.add(Character.toCodePoint(ch, ch2));\n                        i += 2; // Advance index past the surrogate pair\n                        continue; // Continue to the next potential code point in searchChars\n                    }\n                }\n                // Lone high surrogate or high surrogate followed by non-low surrogate.\n                // Treat the high surrogate as an individual code point (as per its char value).\n                searchCodepoints.add((int) ch);\n                i++; // Advance index past the lone high surrogate\n            } else {\n                // BMP character or a lone low surrogate.\n                // Treat it as an individual code point (as per its char value).\n                searchCodepoints.add((int) ch);\n                i++; // Advance index past the character\n            }\n        }\n\n\t\t// Iterate through the input CharSequence by code points\n\t\tfor (int j = 0; j < csLength; ) {\n            // Get the code point at the current index j\n\t\t\tfinal int codepoint = Character.codePointAt(cs, j);\n            // Check if the current code point exists in the set of search code points\n\t\t\tif (searchCodepoints.contains(codepoint)) {\n\t\t\t\treturn true; // Found a match\n\t\t\t}\n            // Advance the CharSequence index by the number of char units\n            // occupied by the current code point (1 for BMP, 2 for supplementary)\n\t\t\tj += Character.charCount(codepoint);\n\t\t}\n\t\t\n\t\treturn false; // No matching code point found\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}