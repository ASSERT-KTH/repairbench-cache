{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        // 01-Sep-2017, tatu: Unusual case combining property-based + unwrapped:\n        //   must keep track of properties, handle creator properties, buffer FIELD_NAME,\n        //   and then process buffered operations!\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to assign? (may not be last in JSON)\n                // NOTE: can not just call buffer.assignParameter() because we need to add existing buffered properties:\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    // Maybe we are all done with creator properties?\n                    // But we still must continue processing, buffer FIELD_NAME\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering (could be passed to creator)\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            // Things marked as ignorable should not be passed to any setter\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // Ok, likely an unwrapped property: buffer\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // \"any property\"?\n            if (_anySetter != null) {\n                 // Ok, this is messy: should we assign any setter LATER ON, OR buffer?\n                 // Problem is that we do not know whether we might need to build instance\n                 // first, or if we can assign right away.\n                 // Let's assume we must buffer...\n                 // We may need to improve on this in future.\n                 try {\n                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                 } catch (Exception e) {\n                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                 }\n                 continue;\n             }\n             // Unknown: let's call handler method\n//             handleUnknownProperty(p, ctxt, _valueClass, propName);\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n//            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // And then need to process buffered tokens...\n        tokens.writeEndObject(); // Close the buffer\n\n        // sanity check?\n        if (bean.getClass() != _beanType.getRawClass()) {\n            // 03-Feb-2014, tatu: Not sure if this can happen; but if it does, better\n            //   have an error message that indicates the problem. Mostly just in case\n            //   future changes unexpectedly cause issues.\n            // Actually... yes, it CAN happen if builder has different type than target.\n            // ... yet, not sure if we want to keep it? Comment out for now\n//            ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n//            return null;\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}