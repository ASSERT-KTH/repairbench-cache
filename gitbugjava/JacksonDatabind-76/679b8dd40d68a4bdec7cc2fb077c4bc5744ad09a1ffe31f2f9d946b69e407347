{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to assign? If so, ready to build\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    t = p.nextToken(); // token after value handled\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                         continue; // Or return null? Or throw?\n                    }\n                    // if so, need to copy all remaining tokens into buffer\n                    // Note: This comparison is Namenode specific (using reference equality)\n                    // Need to check class of bean produced, may be different if using subtypes?\n                    while (t == JsonToken.FIELD_NAME) {\n                        // (Gotcha: need to use method that forces copying, not reference):\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                         // TBD: try calling method(s) for converting? Or fail? For now, let's fail\n                         // Throw exception or return null? For now, let's throw...\n                         // 15-Feb-2012, tatu: Probably should not block this, better try to handle somehow..\n                         // 13-Dec-2015, tatu: Indeed. Still not fixed for 2.7, but should be fixed later on.\n                         ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                         return null;\n                    }\n                    //\u4ea4\u7ed9 UnwrappedPropertyHandler \u5904\u7406\u7f13\u5b58\u7684 tokens\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            // Ignorable? Or handled by external type id?\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // Oh, different: some properties are part of value itself... others are not. Hmmm....\n            // Let's assume that anything NOT known is supposed to be unwrapped, for now.\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // \"any property\"?\n            if (_anySetter != null) {\n                // TODO: deserialize vs buffer?\n                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n            /* Unknown property? Try to throw an exception (if configured to do so); or ignore.\n             * Let's start with ignoring, for now... generally we should report an exception, probably.\n             * 15-Feb-2012, tatu: Need to reconsider this, handle according to configuration\n             */\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            //return wrapInstantiationProblem(e, ctxt);\n            // We don't have property name context here (yet?), so:\n            wrapInstantiationProblem(e, ctxt);\n            // never gets here...\n            return null;\n        }\n        // And then unwrapped properties... This is assumed to close buffer etc\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}