{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to match?\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    t = p.nextToken(); // Should be FIELD_NAME or END_OBJECT\n                    Object bean; // Bean or Builder instance\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        // 24-Feb-2017, tatu: Note: Could theoretically wrap, but...\n                        return wrapInstantiationProblem(e, ctxt);\n//                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n//                        continue; // never gets here\n                    }\n                    // [databind#631]: Assign current value, if any? No, value was used for creator prop\n\n                    // Need to apply any buffered properties collected BEFORE creator was called\n                    // (Maybe this is redundant WRT call to `creator.build()`, but let's be safe)\n                    for (PropertyValue pv = buffer.buffered(); pv != null; pv = pv.next) {\n                        pv.assign(bean);\n                    }\n\n                    //\u7530\u4e2d: Handle remaining properties like vanilla deserialize does\n                    while (t == JsonToken.FIELD_NAME) {\n                        // 20-Jan-2018, tatu: Need to copy FIRST, not just value tokens\n                        tokens.writeFieldName(p.getCurrentName()); // *** FIX ***\n                        p.nextToken(); // value token\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        // 17-May-2018, tatu: As per [databind#1999] Polymorphic handling with Builder\n                        //    is tricky... but this was specifically called out as problematic.\n                        //    Need to uncomment or handle differently in 2.9?\n\n                        // 02-Aug-2018, tatu: Maybe simple check via `BeanDescription.hasKnownClassAnnotations`?\n                        //    Basically, we can't assume this is an error.\n\n                        // 28-Oct-2018, tatu: Let's keep things simple, assume builder means no check needed.\n                        // return ctxt.reportBadDefinition(_beanType, String.format(\n                        // \"Cannot create polymorphic instances with unwrapped values. Builders NOT yet supported for this combination; check BuilderDeserislizer handling of property-based creators with Unwrapped properties\"));\n\n                        // [databind#2462]: Maybe TokenBuffer prevents use of standard deser?\n                        ; // was: ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    // We processed all properties, should be able to pass buffer for unwrapped:\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            // Maybe unwrapped? Should not buffer if so? Or actually, yes, should buffer\n            // A) If we have unwrapped property handler defined; and\n            // B) Property matches name known by handler\n            // C) Let's considerignorable properties AFTER unwrapped settings\n            if (_unwrappedPropertyHandler.findProperty(propName) != null) {\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n                continue;\n            }\n\n            // Ignorable properties? Let's handle after unwrapped!\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // \"any property\"?\n            if (_anySetter != null) {\n                // Need to copy to buffer now, not later\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            // Unknown property buffer it referring to the TokenBuffer, NOT the PropertyValueBuffer\n            // Passes the failing test R-378533998 Related to #1262\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            // Propagate buffered properties? Should not be necessary? Build may fail...\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // otherwise we are good; handle unwrapped properties too (if any)\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}