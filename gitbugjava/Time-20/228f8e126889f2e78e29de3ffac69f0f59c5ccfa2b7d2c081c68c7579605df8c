{
    "generation": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            String bestMatchId = null;\n            int bestMatchLength = 0;\n\n            // Iterate through all known IDs to find the best match.\n            // We need to find the longest match (e.g., \"America/Dawson_Creek\"\n            // should be chosen over \"America/Dawson\").\n            for (String id : ALL_IDS) {\n                if (str.startsWith(id)) {\n                    int idLen = id.length();\n                    // Check if this match is longer than the current best match.\n                    // Also check if this match extends to a word boundary,\n                    // unless it's the end of the string. This handles cases\n                    // where one ID is a prefix of another but not meant to match.\n                    // Example: parsing \"CEST\" shouldn't match \"CET\".\n                    // However, the original code didn't have this check, and\n                    // fixing the prefix issue (\"America/Dawson\" vs \"America/Dawson_Creek\")\n                    // is the primary goal based on the failing test. The longest match\n                    // logic solves the reported problem. A boundary check might be\n                    // needed for robustness but wasn't indicated by the failing test.\n                    if (idLen > bestMatchLength) {\n                        bestMatchId = id;\n                        bestMatchLength = idLen;\n                    }\n                }\n            }\n\n            // If a match was found, set the zone and return the new position.\n            if (bestMatchId != null) {\n                bucket.setZone(DateTimeZone.forID(bestMatchId));\n                return position + bestMatchLength;\n            }\n\n            // If no match was found, return the inverted position.\n            return ~position;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}