{
    "generation": "        boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n            String name = t.asEndTag().normalName(); // Use normalized name from token\n            ArrayList<Element> stack = tb.getStack();\n            for (int pos = stack.size() -1; pos >= 0; pos--) {\n                Element node = stack.get(pos);\n                // Compare normalized tag names consistently.\n                if (node.normalName().equals(name)) {\n                    tb.generateImpliedEndTags(name);\n                    // Check if the element we found matches the current element; error if not.\n                    // This check should also use normalized names for consistency.\n                    if (!name.equals(tb.currentElement().normalName()))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    break;\n                } else {\n                    // Hitting html/body tags here indicates input error, handled by isSpecial.\n                    // Cannot close over special elements (e.g., <html>, <body>, formatting elements in scope).\n                    if (tb.isSpecial(node)) {\n                        tb.error(this);\n                        return false;\n                    }\n                }\n            }\n            // If we reach here, the tag was not found on the stack.\n            // Per HTML5 spec 13.2.6.4.8 \"Any other end tag\": \"If the stack of open elements\n            // does not have an element in scope... ignore the token.\"\n            // Returning true signifies the token was handled (by ignoring it).\n            // Foster parenting and other mechanisms might handle the unclosed elements later.\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}