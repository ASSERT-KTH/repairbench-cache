{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() to determine the component type.\n        // This fails when T is Object and the singletons list contains instances of different\n        // subclasses of Object (like anonymous classes), leading to ArrayStoreException.\n        // Using Object.class as the component type ensures that the created array can hold\n        // any object, which is necessary when T is Object and singletons have diverse types.\n        // This fixes the specific issue raised in testIssue942 where T is Object.\n        // Note: This might lead to ClassCastException in the calling code if T is not Object,\n        // as Array.newInstance(Object.class, sampleSize) creates an Object[], and casting\n        // Object[] to a more specific T[] (e.g., String[]) is generally not possible.\n        // However, this change directly addresses the ArrayStoreException observed in the test.\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}