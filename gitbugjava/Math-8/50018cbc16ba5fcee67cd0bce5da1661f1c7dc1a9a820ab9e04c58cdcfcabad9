{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // Determine the component type for the array.\n        // The original code used singletons.get(0).getClass(), which is too specific\n        // if T is a superclass (like Object) and the singletons list contains\n        // instances of different subclasses. This leads to ArrayStoreException.\n        // Using Object.class ensures the array can hold any object, fixing the\n        // ArrayStoreException when T=Object and singletons are heterogeneous.\n        // NOTE: This approach has a known limitation. Array.newInstance will return\n        // an Object[], and the final cast to T[] will only succeed if T is Object.\n        // If T is a more specific type (e.g., Number, String), this method\n        // may throw a ClassCastException at the return statement. However,\n        // this change directly addresses the ArrayStoreException observed in the\n        // failing test case where T is Object.\n        final Class<?> componentType = Object.class;\n\n        // Create an array instance of the determined component type.\n        // This intermediate variable is used to avoid type warnings/errors below,\n        // as we know it's actually Object[] here.\n        final Object[] objOut = (Object[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);\n\n        // Populate the array with samples.\n        for (int i = 0; i < sampleSize; i++) {\n            // sample() returns T, which is assignable to Object.\n            objOut[i] = sample();\n        }\n\n        // Cast the Object[] array to T[]. This is only safe if T is Object.\n        // Required to match the method signature.\n        @SuppressWarnings(\"unchecked\")\n        final T[] out = (T[]) objOut;\n        return out;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}