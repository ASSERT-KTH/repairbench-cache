{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() as the component type\n        // for the array. This caused an ArrayStoreException when the distribution's\n        // elements ('singletons') were of different specific classes, even if they\n        // shared the common generic type T (e.g., T=Object, elements are different\n        // anonymous Object subclasses, as in testIssue942).\n        //\n        // Using Object.class ensures the array can hold any object returned by sample(),\n        // as any T is assignable to Object. This fixes the ArrayStoreException.\n        //\n        // We create an Object[] first.\n        final Object[] out = (Object[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            // sample() returns T, which is always assignable to Object.\n            out[i] = sample();\n        }\n\n        // The method signature requires returning T[].\n        // We must cast the Object[] to T[]. This cast is potentially unsafe and\n        // will only succeed at runtime if T is Object. If T is a more specific type\n        // (e.g., String, Integer), this cast will throw a ClassCastException.\n        // This limitation stems from Java's type erasure and the lack of Class<T>\n        // information available to create the correctly typed array directly.\n        // However, this approach fixes the specific ArrayStoreException reported\n        // in issue 942 where T was Object.\n        @SuppressWarnings(\"unchecked\") // The cast is necessary but potentially unsafe.\n        final T[] result = (T[]) out;\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}