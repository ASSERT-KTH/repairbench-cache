{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // Use Object.class as the component type for the array creation.\n        // The original code used singletons.get(0).getClass(), which could lead\n        // to ArrayStoreException if the distribution contains singletons of incompatible\n        // runtime types (e.g., different anonymous inner classes when T=Object),\n        // because sample() might return an instance whose type is not assignable\n        // to the array type created based on the first singleton's class.\n        // Using Object.class ensures the array can hold any object returned by sample().\n        // The final cast to T[] is only safe if T is Object, but it resolves the\n        // specific issue highlighted by the test case where T is indeed Object.\n        @SuppressWarnings(\"unchecked\")\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}