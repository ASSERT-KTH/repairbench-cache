{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() as the component type.\n        // This caused ArrayStoreException when singletons contained objects of different\n        // subclasses, even if the generic type T was a common superclass (e.g., Object).\n        // Using Object.class ensures the array can hold any object returned by sample(),\n        // particularly fixing the case where T is Object and singletons are diverse subclasses.\n        // Note: This may cause a ClassCastException if T is not Object, as Array.newInstance\n        // creates an Object[] which cannot be cast to, e.g., Number[]. However, this\n        // fixes the reported ArrayStoreException for the T=Object case.\n        // A more robust solution might require changing the API to accept Class<T>.\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}