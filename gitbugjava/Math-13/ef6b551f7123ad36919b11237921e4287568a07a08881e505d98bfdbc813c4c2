{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     * <p>\n     * If the matrix {@code m} is an instance of {@link DiagonalMatrix},\n     * its square root is computed efficiently by taking the square root\n     * of each diagonal element. Otherwise, the computation relies on\n     * {@link EigenDecomposition}.\n     * </p>\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     * @throws org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException\n     * if {@code m} is diagonal and has non-positive diagonal elements,\n     * or if {@code m} is not positive definite.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            // Efficient computation for diagonal matrices\n            final int dim = m.getRowDimension();\n            final double[] sqrtDiag = new double[dim];\n            for (int i = 0; i < dim; ++i) {\n                final double diagElement = m.getEntry(i, i);\n                // Check for non-positive elements, as the matrix must be positive-definite.\n                // EigenDecomposition throws NonPositiveDefiniteMatrixException for negative eigenvalues.\n                // For a diagonal matrix, eigenvalues are the diagonal elements.\n                // Use a small tolerance consistent with EigenDecomposition might be better,\n                // but strict positivity is generally assumed for weight matrices.\n                if (diagElement < 0) {\n                     // Throw exception similar to EigenDecomposition's behavior\n                     throw new org.apache.commons.math3.exception.NonPositiveDefiniteMatrixException(diagElement, i, 0);\n                }\n                 sqrtDiag[i] = FastMath.sqrt(diagElement);\n            }\n            // Create a new DiagonalMatrix instance. 'false' avoids copying the array if possible.\n            return new DiagonalMatrix(sqrtDiag, false);\n        } else {\n            // Fallback for general symmetric positive-definite matrices\n            // EigenDecomposition handles symmetry checks and positive definiteness (via eigenvalues).\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}