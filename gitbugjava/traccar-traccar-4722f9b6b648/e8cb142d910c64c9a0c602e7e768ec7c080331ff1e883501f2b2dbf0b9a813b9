{
    "generation": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n        int recordIndex = buf.readIntLE(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, recordIndex);\n\n        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); // session status (possibly satellites)\n\n        buf.skipBytes(4); // reserved\n\n        long time = buf.readUnsignedIntLE(); // date and time (seconds since epoch)\n        position.setTime(new Date(time * 1000));\n\n        // Decode the previously skipped 23-byte coordinates block\n        // Assuming standard Galileo structure: lat, lon, alt, speed, course, etc.\n        position.setValid(true); // Assume valid as basic data is present\n        position.setLatitude(buf.readIntLE() / 1000000.0);  // 4 bytes\n        position.setLongitude(buf.readIntLE() / 1000000.0); // 4 bytes\n        position.setAltitude(buf.readShortLE());           // 2 bytes\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); // 2 bytes (assuming km/h)\n        position.setCourse(buf.readUnsignedShortLE());     // 2 bytes\n        \n        // Skip the remainder of the 23-byte block (23 - 4 - 4 - 2 - 2 - 2 = 9 bytes)\n        // These might contain status, HDOP, inputs/outputs etc. specific to this variant\n        buf.skipBytes(9); \n\n        // Handle the minimal data set if present after the coordinate block\n        if (buf.readableBytes() >= 3) { // Check if the 3-byte header exists\n            buf.skipBytes(3); // data tag header\n            if (buf.readableBytes() > 0) { // Check if there is data after the header\n                 decodeMinimalDataSet(position, buf); // Decode remaining tagged data\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}