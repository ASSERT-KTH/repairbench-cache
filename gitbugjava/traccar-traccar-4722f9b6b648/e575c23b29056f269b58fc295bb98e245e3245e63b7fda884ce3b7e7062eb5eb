{
    "generation": "private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n\n    // Read and process timestamp\n    long timestamp = buf.readUnsignedIntLE(); // date and time\n\n    // Process coordinates block (23 bytes)\n    long longitude = buf.readUnsignedIntLE();\n    long latitude = buf.readUnsignedIntLE();\n    buf.readUnsignedShortLE(); // altitude\n    buf.readUnsignedByte(); // position status\n    buf.skipBytes(3); // speed reserve\n    int speed = buf.readUnsignedByte(); // speed\n    buf.readUnsignedShortLE(); // heading\n    buf.skipBytes(6); // reserved\n\n    position.setTime(new Date(timestamp * 1000L)); // Convert to milliseconds\n    position.setLongitude(convertCoordinate(longitude));\n    position.setLatitude(convertCoordinate(latitude));\n    position.setSpeed(speed / 10.0);\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}\n\nprivate double convertCoordinate(long value) {\n    // Convert Iridium coordinate format to decimal degrees\n    if (value == 0) {\n        return 0;\n    }\n\n    boolean negative = (value & 0xFFFFFFFF00000000L) != 0; // Check sign bit\n    value = value & 0xFFFFFFFFL;\n\n    long degrees = value / 1000000;\n    long minutes = (value % 1000000) / 10000;\n    double seconds = (value % 10000) / 100.0;\n\n    double result = degrees + minutes / 60.0 + seconds / 3600.0;\n    return negative ? -result : result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}