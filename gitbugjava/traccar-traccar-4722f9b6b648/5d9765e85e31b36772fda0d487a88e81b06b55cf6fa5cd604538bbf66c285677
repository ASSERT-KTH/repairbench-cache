{
    "generation": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n        buf.readUnsignedIntLE(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n        \n        // Fix: Read the timestamp as Big Endian and use it to set the position's fix time.\n        // The original code read it as Little Endian and then discarded the value.\n        // This was likely the cause of the \"time < +25 hours\" error.\n        long timestamp = buf.readUnsignedInt(); // Changed from readUnsignedIntLE()\n        position.setFixTime(new Date(timestamp * 1000L)); // Convert seconds to milliseconds and set fix time\n\n        buf.skipBytes(23); // coordinates block\n        buf.skipBytes(3); // data tag header\n        decodeMinimalDataSet(position, buf);\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}