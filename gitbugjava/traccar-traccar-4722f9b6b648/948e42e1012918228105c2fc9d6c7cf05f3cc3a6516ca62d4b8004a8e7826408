{
    "generation": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n        buf.readUnsignedIntLE(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n        long iridiumTimestampSeconds = buf.readUnsignedIntLE(); // date and time from Iridium header\n\n        // Set the position time using the timestamp from the Iridium header.\n        // This timestamp is often considered reliable for the message's timing.\n        position.setTime(new Date(iridiumTimestampSeconds * 1000L));\n\n        buf.skipBytes(23); // coordinates block\n        buf.skipBytes(3); // data tag header\n        \n        // decodeMinimalDataSet will parse further data from the payload.\n        // It may attempt to set the time again based on payload data.\n        // By setting time first using iridiumTimestampSeconds, if any subsequent logic\n        // conditionally updates time (e.g., only if current time is null or very old),\n        // this might prevent issues.\n        // If decodeMinimalDataSet unconditionally overwrites with a problematic future time,\n        // this change alone won't prevent an AssertionError from that specific write.\n        // However, this establishes the Iridium time as the primary timestamp unless\n        // explicitly and validly overridden by the payload.\n        decodeMinimalDataSet(position, buf);\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}