{
    "generation": "import io.netty.buffer.ByteBuf;\nimport io.netty.channel.Channel;\nimport org.traccar.BaseProtocolDecoder;\nimport org.traccar.DeviceSession;\nimport org.traccar.Protocol;\nimport org.traccar.helper.BitUtil;\nimport org.traccar.helper.DateBuilder;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.Position;\n\nimport java.net.SocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\nimport java.time.Instant; // Import needed for Instant\n\n// Assume BaseProtocolDecoder and other necessary classes/methods (like getDeviceSession, getProtocolName, decodeMinimalDataSet) exist elsewhere.\n// The provided code snippet is part of a larger class.\n\n    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n        buf.readUnsignedIntLE(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n\n        // Read the timestamp (unsigned 32-bit little-endian integer representing seconds since epoch)\n        long timestampSeconds = buf.readUnsignedIntLE();\n        // Convert to Date and set it on the position object\n        position.setTime(Date.from(Instant.ofEpochSecond(timestampSeconds)));\n\n        // Skip the block that might contain coordinates or other data specific to Iridium format\n        buf.skipBytes(23); // coordinates block\n\n        // Skip the data tag header before decoding the minimal data set\n        buf.skipBytes(3); // data tag header\n\n        // Decode the standard GPS fields and other attributes\n        decodeMinimalDataSet(position, buf);\n\n        // Return the populated position object\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}