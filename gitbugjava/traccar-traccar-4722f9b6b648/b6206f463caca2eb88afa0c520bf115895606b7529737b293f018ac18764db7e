{
    "generation": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n        buf.readUnsignedIntLE(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n        \n        // Read the SBD message's Time of Session (Unix timestamp) and set it on the position.\n        // This provides a baseline time. If decodeMinimalDataSet successfully parses\n        // a GPS fix time, it will typically overwrite this.\n        long sbdTimestampSeconds = buf.readUnsignedIntLE(); // date and time\n        position.setTime(new Date(sbdTimestampSeconds * 1000L));\n\n        buf.skipBytes(23); // coordinates block\n        buf.skipBytes(3); // data tag header\n        \n        // decodeMinimalDataSet will attempt to parse its own date/time and other fields.\n        // If the preceding skips result in a misaligned buffer for decodeMinimalDataSet,\n        // it may still fail for specific test data.\n        decodeMinimalDataSet(position, buf);\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}