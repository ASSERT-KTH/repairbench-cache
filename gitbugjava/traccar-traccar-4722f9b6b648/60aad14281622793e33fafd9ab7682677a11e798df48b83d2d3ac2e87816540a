{
    "generation": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n        buf.readUnsignedIntLE(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n        int dateTime = buf.readUnsignedIntLE(); // date and time\n\n        // Decode timestamp\n        position.setTime(new DateTime(\n            ((dateTime >> 26) & 0x3F) + 2000, // year\n            (dateTime >> 22) & 0x0F,          // month\n            (dateTime >> 17) & 0x1F,          // day\n            (dateTime >> 12) & 0x1F,          // hour\n            (dateTime >> 6) & 0x3F,           // minute\n            dateTime & 0x3F                  // second\n        ));\n\n        // Decode coordinates\n        double latitude = buf.readIntLE() / 1000000.0;\n        double longitude = buf.readIntLE() / 1000000.0;\n        buf.readUnsignedShortLE(); // altitude\n        buf.readUnsignedShortLE(); // speed\n        buf.readUnsignedShortLE(); // course\n\n        position.setLatitude(latitude);\n        position.setLongitude(longitude);\n\n        buf.skipBytes(3); // data tag header\n        decodeMinimalDataSet(position, buf);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}