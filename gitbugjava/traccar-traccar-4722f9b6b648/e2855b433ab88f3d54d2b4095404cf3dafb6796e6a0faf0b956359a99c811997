{
    "generation": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n        buf.readUnsignedIntLE(); // index\n\n        // Read IMEI: 15 bytes, ASCII. Trim any padding.\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII).trim();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n        long sbdTimestamp = buf.readUnsignedIntLE(); // date and time from SBD header\n\n        // Skip blocks as per original logic. decodeMinimalDataSet will parse what follows.\n        buf.skipBytes(23); // coordinates block\n        buf.skipBytes(3); // data tag header\n        \n        // decodeMinimalDataSet populates various fields. It also sets a time,\n        // which for the failing test case, is calculated to be too far in the future.\n        decodeMinimalDataSet(position, buf);\n\n        // Override the time with the timestamp from the SBD header if it's non-zero.\n        // This sbdTimestamp is assumed to be Unix epoch seconds.\n        // For the failing test data, sbdTimestamp leads to a valid 2022 date,\n        // whereas decodeMinimalDataSet produced a 2057 date.\n        if (sbdTimestamp != 0) {\n            position.setTime(new Date(sbdTimestamp * 1000L));\n        }\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}