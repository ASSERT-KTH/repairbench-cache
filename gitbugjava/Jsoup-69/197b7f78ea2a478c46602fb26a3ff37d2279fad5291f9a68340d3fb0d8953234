{
    "generation": "    /**\n     * Retrieves the form's data for submission. The data is gathered from all submittable elements, according to the\n     * <a href=\"http://www.w3.org/TR/html5/forms.html#constructing-form-data-set\">HTML5 spec</a>.\n     * <p>Data is returned as a list of {@link org.jsoup.Connection.KeyVal} pairs.</p>\n     * <p>Specifically:</p>\n     * <ul>\n     *     <li>{@code input type=text, password, hidden, search, tel, url, email, number, date, time, month, week}</li>\n     *     <li>{@code input type=checkbox, radio} (if checked)</li>\n     *     <li>{@code input type=submit} (if clicked/submitted). If the submit button has a {@code name} attribute, it is included.</li>\n     *     <li>{@code textarea}</li>\n     *     <li>{@code select} (values from selected {@code option}s)</li>\n     *     <li>{@code input type=file} IS NOT INCLUDED. Use {@link org.jsoup.Connection.Request#data(org.jsoup.Connection.KeyVal...)} to add file data.</li>\n     * </ul>\n     * <p>This method should be called after the form's data has been populated, generally by a user.</p>\n     *\n     * @return a list of key value pairs representing the form data.\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // select the form controls elements, not the cached list, so that elements added after parse are included\n        // related discussion: https://github.com/jhy/jsoup/pull/897\n        Elements els = select(\"input[name], select[name], textarea[name]\");\n        for (Element el: els) {\n            // skip disabled elements\n            if (el.hasAttr(\"disabled\")) continue;\n            // skip any non-form-submittable types (image, button, reset)\n            if (!el.tag().isFormSubmittable()) continue;\n\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) { // otherwise find the first option if none are selected\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() > 0 ? el.val() : \"on\"; // spec says \"on\" if value is not specified\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else { // otherwise, add the value unconditionally\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}