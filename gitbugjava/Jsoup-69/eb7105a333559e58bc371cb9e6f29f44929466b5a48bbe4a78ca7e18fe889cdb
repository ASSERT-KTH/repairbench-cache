{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n\n    /**\n     * Create a new, standalone form element.\n     * @param tag        tag of this element\n     * @param baseUri    the base URI\n     * @param attributes initial attributes\n     * @see #create(Tag, String, Attributes)\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the list of key value pairs, corresponding to names and values of the form elements.\n     * @return a list of key values for the form\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // Iterate selector query finding specific form controls, respect disabled states.\n        // Changed from iterating the 'elements' list, which was stale if elements were removed setting up the form.\n        Elements currentControls = select(\"input, select, textarea, button\");\n        for (Element el: currentControls) {\n            if (el.form() != this) continue; // filter out controls not part of this form (e.g. nested forms)\n            if (!el.tag().isFormSubmittable()) continue; // contents are form submittable? (e.g. <template>)\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled fields\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue; // skip unnamed fields\n            String type = el.attr(\"type\").toLowerCase();\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option : options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\"; // spec specifies \"on\" if value attribute is missing\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n\n    // Other methods of FormElement would be here...\n    // Dummy implementations for compilation if needed:\n    @Override\n    public FormElement addElement(Element element) {\n        elements.add(element);\n        return this;\n    }\n\n    // Required constructor if extending Element directly without default constructor\n    public static FormElement create(Tag tag, String baseUri, Attributes attributes) {\n         return new FormElement(tag, baseUri, attributes);\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}