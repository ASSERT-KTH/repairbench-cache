{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Assuming 'elements' is a field of type Elements containing the form's controls,\n// and standard Element methods like parent(), tag(), attr(), hasAttr(), select(), val(), tagName() are available.\n    /**\n     * Retrieves the form's data for submission. The data is collected from all elements owned by this form, that\n     * have a {@code name} attribute. Data is supplied in key/val pairs, keyed by the element name. The values are\n     * supplied according to the spec, e.g. value from {@code input}, {@code textarea}, {@code select}; checked state\n     * for {@code checkbox}, {@code radio}; etc. Keyvals are ordered according to their position in the document.\n     * <p>Only elements that are descendents of this form control are included in the submitted data. Any elements\n     * that were previously descendants but have been moved or removed are not included.</p>\n     *\n     * @return a list of key val pairs for submission.\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form elements and accumulate their values\n        for (Element el : elements) {\n            // FIX: check if the element is still in the DOM tree. If not (its parent is null), it was removed, so skip it.\n            if (el.parent() == null)\n                continue;\n\n            if (!el.tag().isFormSubmittable()) continue; // contents are form submitted by default\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled fields\n\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() > 0 ? el.val() : \"on\"; // spec specifies \"on\" as default value\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}