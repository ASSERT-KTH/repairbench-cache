{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key val pairs, corresponding to controls that would be submitted when this form is submitted\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n        final String InputType = \"text\"; // Used for elements without a defined type attribute.\n\n        // Iterate through all form elements that contain values\n        for (Element el : elements) {\n            // Skip elements that have been removed from the DOM or are no longer descendants of this form.\n            // This ensures that modifications to the form structure (e.g., element removal)\n            // are reflected when collecting form data.\n            if (el.formOwner() != this) {\n                 continue;\n            }\n\n            if (!el.tag().isFormSubmittable()) continue; // skip non-submittable tags (e.g. <form>)\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled elements\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.hasAttr(\"type\") ? el.attr(\"type\") : InputType; // Treat missing type as \"text\"\n\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(org.jsoup.helper.HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.selectFirst(\"option\");\n                    if (option != null)\n                        data.add(org.jsoup.helper.HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // radiobuttons and checkboxes are submitted only if checked.\n                if (el.hasAttr(\"checked\")) {\n                    // If the value attribute is omitted, the default value is \"on\". See https://www.w3.org/TR/html5/forms.html#checkbox-state-(type=checkbox)\n                    final String val = el.val().length() > 0 ? el.val() : \"on\";\n                    data.add(org.jsoup.helper.HttpConnection.KeyVal.create(name, val));\n                }\n            } else if (\"file\".equalsIgnoreCase(type)) {\n                // Jsoup only supports returning the filename, not the contents\n                // Also only supports single file input types\n                // User needs to set the value on the KeyVal manually with an InputStream if sending files.\n                org.jsoup.Connection.KeyVal keyVal = org.jsoup.helper.HttpConnection.KeyVal.create(name, el.val()); // value is the filename\n                data.add(keyVal);\n            }\n            else { // text, password, hidden, submit, etc.\n                // InputType defaults to \"text\" if not specified\n                data.add(org.jsoup.helper.HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}