{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements stored in 'elements' list\n        for (Element el: elements) { // 'elements' is a List<Element> field in FormElement\n            // --- Start Check: Element Still Part of Form ---\n            // Verify that the element 'el' from the cached 'elements' list is still a descendant of this FormElement ('this').\n            // This check is necessary because 'el' could have been removed from the DOM after the 'elements' list was populated.\n            boolean isPartOfForm = false;\n            Element current = el;\n            while (true) {\n                Element parent = current.parent();\n                // If we reach a null parent, it means the element is detached or we've traversed past the document root\n                // without finding 'this' form as an ancestor.\n                if (parent == null) {\n                    isPartOfForm = false;\n                    break;\n                }\n                // If we find 'this' FormElement as the parent, the element is confirmed to be part of the form.\n                if (parent == this) {\n                    isPartOfForm = true;\n                    break;\n                }\n                // Optimization: If the parent is the Document node, and it's not 'this' form element,\n                // then 'el' cannot be a descendant of 'this' form element. Stop traversing.\n                if (parent instanceof Document) {\n                     isPartOfForm = false;\n                     break;\n                }\n                // Move up the DOM tree.\n                current = parent;\n            }\n\n            // If the element is no longer part of this form's DOM subtree, skip it.\n            if (!isPartOfForm) {\n                continue;\n            }\n            // --- End Check ---\n\n\n            // Element is confirmed to be part of the form, proceed with existing logic:\n            if (!el.tag().isFormSubmittable()) continue; // skip elements like <fieldset>\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled fields\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue; // skip elements without a name\n            String type = el.attr(\"type\");\n            final String tagName = el.tagName();\n\n            // Handle <select> elements\n            if (\"select\".equals(tagName)) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                // If no option is selected, browser behavior is often to submit the first option's value.\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            // Handle checkbox and radio types\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // Only submit checkboxes/radios if they are checked.\n                if (el.hasAttr(\"checked\")) {\n                    // Use the element's value attribute. If the value attribute is missing, the default value is \"on\".\n                    final String val = el.val().length() > 0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            // Handle other input types (text, password, hidden, submit, etc.), buttons, and textareas\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}