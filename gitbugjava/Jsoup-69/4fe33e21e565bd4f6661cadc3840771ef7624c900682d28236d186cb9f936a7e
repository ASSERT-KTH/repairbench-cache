{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.InputElement;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Assuming this method is within the org.jsoup.nodes.FormElement class\n\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n    // iterate the form control elements and accumulate their values\n    for (Element el: elements) { // Use the internal list of elements\n        // **FIX START**\n        // Check if the element is still connected to a document. If not, it was removed.\n        // This prevents elements removed from the DOM via element.remove() from being included.\n        if (el.ownerDocument() == null) {\n            continue; // Skip elements that have been removed from the tree\n        }\n        // **FIX END**\n\n        if (!el.tag().isFormSubmittable()) continue; // skip non-submittable tags (e.g. <form>)\n        if (el.hasAttr(\"disabled\")) continue; // skip disabled fields\n        String name = el.attr(\"name\");\n        if (name.length() == 0) continue;\n        String type = el.attr(\"type\");\n\n        // Special case for checkbox and radio buttons: only add if checked\n        if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\"; // per spec, if value empty, default to 'on'\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n            continue; // don't default add\n        }\n\n        // Special case for file inputs - don't add the value, but do add the KeyVal for the name, so Connection can find the files to upload. Add stream if presented.\n        if (\"file\".equalsIgnoreCase(type)) {\n            // TODO: consider if name=val is appropriate for file inputs - current thinking is no, maybe just name.\n            data.add(HttpConnection.KeyVal.create(name, el.val())); // we don't submit the file value, but the name is used as the key\n            if (el instanceof InputElement) {\n                InputElement input = (InputElement) el;\n                if (input.inputStream() != null)\n                    data.get(data.size()-1).inputStream(input.inputStream()); // set on the KeyVal added above\n            }\n            continue; // don't default add\n        }\n\n        // Special case for selects: multi-selects may have multiple values\n        if (\"select\".equalsIgnoreCase(el.tagName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option: options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                // if no selected option, must send first value of a non-disabled option, if exists and required\n                Element first = el.select(\"option:not([disabled])\").first();\n                 if (first != null && el.hasAttr(\"required\")) // todo - should this be isRequired()?\n                    data.add(HttpConnection.KeyVal.create(name, first.val()));\n                // otherwise, don't add anything (no selected val)\n            }\n            continue; // don't default add\n        }\n\n        // default: add key/val pair\n        data.add(HttpConnection.KeyVal.create(name, el.val()));\n    }\n    return data;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}