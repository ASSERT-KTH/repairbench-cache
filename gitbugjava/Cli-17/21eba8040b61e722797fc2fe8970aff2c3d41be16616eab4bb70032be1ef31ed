{
    "generation": "    /**\n     * <p>Breaks <code>token</code> into its constituent parts\n     * using the following algorithm.\n     * <ul>\n     *  <li>ignore the first character (\"<b>-</b>\")</li>\n     *  <li>foreach remaining character check if an {@link Option}\n     *  exists with that id.</li>\n     *  <li>if an {@link Option} does exist then add that character\n     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n     *  <li>if the {@link Option} can have an argument value and there\n     *  are remaining characters in the token then add the remaining\n     *  characters as a token to the list of processed tokens.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n     *  \"<b>--</b>\" followed by the remaining characters and also\n     *  the remaining tokens directly to the processed tokens list.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n     *  character prepended with \"<b>-</b>\".</li>\n     * </ul>\n     * </p>\n     *\n     * @param token The current token to be <b>burst</b>\n     * @param stopAtNonOption Specifies whether to stop processing\n     * at the first non-Option encountered.\n     */\n    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        for (int i = 1; i < token.length(); i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n\n            if (options.hasOption(ch))\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch); // Keep track of current option\n\n                // if the current Option is known to require an argument\n                // and there are characters left in the token retrieve the argument\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n                    // Done processing this token, exit the loop.\n                    break;\n                }\n                // otherwise continue looping through characters of the token\n            }\n            // It is NOT an option, treat differently based on stopAtNonOption\n            else if (stopAtNonOption)\n            {\n                // Slice the token starting from the current character\n                // and add it as a single token. This effectively stops\n                // bursting the token.\n                tokens.add(token.substring(i));\n                // Done processing this token, exit the loop.\n                break; // *** FIX: Added break statement ***\n            }\n            else\n            {\n                // stopAtNonOption is false, so add the unknown character\n                // as a token (prepended with \"-\") and continue bursting.\n                // *** FIX: Changed behavior to match documentation ***\n                // Original behavior added the entire token and broke, which was incorrect.\n                tokens.add(\"-\" + ch);\n                // Continue processing the rest of the characters in the token.\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}