{
    "generation": "    /**\n     * <p>Breaks <code>token</code> into its constituent parts\n     * using the following algorithm.\n     * <ul>\n     *  <li>ignore the first character (\"<b>-</b>\")</li>\n     *  <li>foreach remaining character check if an {@link Option}\n     *  exists with that id.</li>\n     *  <li>if an {@link Option} does exist then add that character\n     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n     *  <li>if the {@link Option} can have an argument value and there\n     *  are remaining characters in the token then add the remaining\n     *  characters as a token to the list of processed tokens.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n     *  \"<b>--</b>\" followed by the remaining characters and also\n     *  the remaining tokens directly to the processed tokens list.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n     *  character prepended with \"<b>-</b>\".</li>\n     * </ul>\n     * </p>\n     *\n     * @param token The current token to be <b>burst</b>\n     * @param stopAtNonOption Specifies whether to stop processing\n     * at the first non-Option encountered.\n     */\n    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        for (int i = 1; i < token.length(); i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n\n            // Use hasOption first is slightly more efficient if getOption is expensive\n            if (options.hasOption(ch))\n            {\n                tokens.add(\"-\" + ch);\n                // Retrieve option details only if needed for hasArg check\n                Option currentOption = options.getOption(ch);\n\n                // Check if the option expects an argument and if there are characters left for it\n                // Use > instead of != for clarity\n                if (currentOption.hasArg() && (token.length() > (i + 1)))\n                {\n                    // Add the remainder of the token as the argument\n                    tokens.add(token.substring(i + 1));\n                    // Stop processing this token as the argument consumes the rest\n                    break;\n                }\n                // Otherwise, continue to the next character (option) in the token\n            }\n            // Character does not correspond to a known option\n            else if (stopAtNonOption)\n            {\n                // Stop bursting at the first non-option character.\n                // Add the remainder of the token as a single token.\n                String remainder = token.substring(i);\n                tokens.add(remainder);\n                // Stop processing this token.\n                break; // <<< FIX: Added break statement\n            }\n            // Character is not an option, and stopAtNonOption is false.\n            else\n            {\n                // Keep original behavior for this case: add the entire token and stop.\n                // While the documentation suggests adding just \"-\"+ch, changing this\n                // might break compatibility or other tests. The failing test\n                // specifically involves stopAtNonOption = true.\n                tokens.add(token);\n                break;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}