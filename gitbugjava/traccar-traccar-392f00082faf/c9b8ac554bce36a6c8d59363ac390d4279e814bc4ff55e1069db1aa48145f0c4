{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1); // skip \",CCE,\" or similar command/separator\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            // Parameters with 1 byte value\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x1B: // Device Status (Ignition, Lock, Charge, SOS)\n                        int status = buf.readUnsignedByte();\n                        position.set(Position.KEY_STATUS, status);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(status, 0));\n                        position.set(Position.KEY_LOCK, BitUtil.check(status, 2)); // Central lock status\n                        position.set(Position.KEY_CHARGE, BitUtil.check(status, 4)); // Charging status\n                        if (BitUtil.check(status, 7)) { // SOS\n                            position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte(); // Skip 1 byte value for unknown ID\n                        break;\n                }\n            }\n\n            // Parameters with 2 byte value (LE)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // Apply scaling\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); // External battery voltage\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); // Internal battery voltage\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); // Event can be 2 bytes too\n                        break;\n                    case 0x91: // OBD Speed KPH\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x92: // OBD Speed MPH (deprecated?)\n                         // Assuming value is MPH, convert to knots\n                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromMph(buf.readUnsignedShortLE()));\n                         break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Scaled by 0.1L\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        // Value is degrees C + 40. Subtract 40.\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE() - 40.0);\n                        break;\n                    case 0x9F:\n                        // Temperature, check scaling and type (signed?)\n                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1); // Assuming signed, 0.1 scaling\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); // Scaled by 0.1 L/h? Check docs\n                        break;\n                    default:\n                        buf.readUnsignedShortLE(); // Skip 2 byte value for unknown ID\n                        break;\n                }\n            }\n\n            // Parameters with 4 byte value (LE)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        // Seconds since 2000-01-01 00:00:00 UTC\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000));\n                        break;\n                    case 0x0C: // Odometer (KM)\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE() * 1000L); // convert km to meters\n                        break;\n                    case 0x9B: // Odometer (Miles, deprecated?)\n                        // Convert miles to meters\n                        position.set(Position.KEY_ODOMETER, (long) (buf.readUnsignedIntLE() * 1609.344));\n                        break;\n                    case 0x0D: // Runtime (seconds)\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Store runtime in standard KEY_HOURS (milliseconds)\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0: // Fuel Used (0.001L)\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2: // Fuel Consumption (0.01 L/100km)\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE(); // Skip 4 byte value for unknown ID\n                        break;\n                }\n            }\n\n            // Parameters with variable length value (1 byte length + N bytes data)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                if (length == 0) {\n                    continue; // Skip if length is zero\n                }\n                switch (id) {\n                    case 0x2A: // Temperature sensor 1\n                    case 0x2B: // Temperature sensor 2\n                    case 0x2C: // Temperature sensor 3\n                    case 0x2D: // Temperature sensor 4\n                    case 0x2E: // Temperature sensor 5\n                    case 0x2F: // Temperature sensor 6\n                    case 0x30: // Temperature sensor 7\n                    case 0x31: // Temperature sensor 8\n                        if (length >= 3) { // Expect 1 byte label + 2 byte value\n                            buf.readUnsignedByte(); // label (ignore)\n                            position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.1); // Use 0.1 scaling\n                            buf.skipBytes(length - 3); // Skip any remaining bytes if length > 3\n                        } else {\n                            buf.skipBytes(length); // Skip unexpected value length\n                        }\n                        break;\n                    case 0xFE31: // Eco driving data\n                        // Example structure: 1 byte alarm proto, 1 byte alarm type, N bytes data\n                        buf.skipBytes(length); // Skip eco driving data for now\n                        break;\n                    default:\n                        buf.skipBytes(length); // Skip value for unknown ID\n                        break;\n                }\n            }\n\n            if (position.getFixTime() != null) { // Add position if it has at least a timestamp\n                 positions.add(position);\n            }\n        }\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}