{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n    buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1 + 3 + 1);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n    buf.readUnsignedIntLE(); // cached data\n    int count = buf.readUnsignedShortLE();\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        buf.skipBytes(2); // skip the length byte and index\n        int paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x01: // Via Point\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x05: // Energy\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    buf.skipBytes(1); // skip energy type\n                    buf.skipBytes(1); // skip power data\n                    break;\n                case 0x06: // Satellite\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    buf.skipBytes(1); // skip satellite system\n                    buf.skipBytes(1); // skip status\n                    break;\n                case 0x07: // RSSI\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x14: // Output\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15: // Input\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x97: // Throttle\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    break;\n                case 0x9D: // Fuel\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xFE69: // Battery level\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                default:\n                    if (extension) {\n                        buf.readUnsignedShort();\n                    } else {\n                        buf.readUnsignedByte();\n                    }\n                    break;\n            }\n        }\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x08: // Speed\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09: // Course\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A: // HDOP\n                    position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                    break;\n                case 0x0B: // Altitude\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x16: // ADC Channel\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x19: // Battery\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1A: // Power\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x40: // Event\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    break;\n                case 0x91: // OBD Speed\n                case 0x92:\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                    break;\n                case 0x98: // Fuel Used\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                    break;\n                case 0x99: // RPM\n                    position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                    break;\n                case 0x9C: // Coolant Temp\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                    break;\n                case 0x9F: // Temperature sensor\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                    break;\n                case 0xC9: // Fuel consumption\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                    break;\n                default:\n                    if (extension) {\n                        buf.readUnsignedShortLE();\n                    } else {\n                        buf.readUnsignedShortLE();\n                    }\n                    break;\n            }\n        }\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x04:\n                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                    break;\n                case 0x0C: // Odometer\n                case 0x9B:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x0D: // Runtime\n                    position.set(\"runtime\", buf.readUnsignedIntLE());\n                    break;\n                case 0x25: // Driver unique ID\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                    break;\n                case 0xA0: // Fuel Used\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                    break;\n                case 0xA2: // Fuel Consumption\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                    break;\n                default:\n                    buf.readUnsignedIntLE();\n                    break;\n            }\n        }\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            switch (id) {\n                case 0x2A:\n                case 0x2B:\n                case 0x2C:\n                case 0x2D:\n                case 0x2E:\n                case 0x2F:\n                case 0x30:\n                case 0x31:\n                    buf.readUnsignedByte(); // label\n                    position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                    break;\n                case 0xFE31: // Alarm Data\n                    buf.readUnsignedByte(); // alarm protocol\n                    buf.readUnsignedByte(); // alarm type\n                    buf.skipBytes(length - 2);\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n        positions.add(position);\n    }\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}