{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1); // ,CCE,\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                if (extension) {\n                    id |= 0xFE00; // Add prefix back for matching cases like 0xFE69\n                }\n                switch (id) {\n                    case 0x01:\n                        int event = buf.readUnsignedByte();\n                        position.set(Position.KEY_EVENT, event);\n                        // Meitrack event codes 0x23 (Lock Door) and 0x24 (Unlock Door)\n                        if (event == 0x23) {\n                            position.set(Position.KEY_LOCK, true);\n                        } else if (event == 0x24) {\n                            position.set(Position.KEY_LOCK, false);\n                        }\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        buf.skipBytes(2); // Skip 0xFE 0x69 marker read by extension logic\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        if (extension) {\n                            // Already read 2 bytes for ID\n                        } else {\n                            buf.readUnsignedByte(); // Skip ID byte if not handled\n                        }\n                        buf.readUnsignedByte(); // Skip the value byte for unknown 1-byte params\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // HDOP needs scaling? Check docs. Assuming 0.1 based on other protocols. Or maybe it's integer? Keep original for now.\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); // Event as short? Overrides byte event?\n                        break;\n                    case 0x91: // OBD Speed KPH\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x92: // CAN Speed KPH\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x98: // Fuel Used L\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Unit depends on device config? Assuming 0.1 L\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C: // Engine Coolant Temp C\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readShortLE()); // Temperature can be signed\n                        break;\n                    case 0x9F: // Temperature Sensor 1 C\n                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE()); // Temperature can be signed\n                        break;\n                    case 0xC9: // Fuel Consumption L/100km\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); // Assuming 0.1 scale\n                        break;\n                    default:\n                        if (extension) {\n                           // Already read 2 bytes for ID\n                        } else {\n                            buf.readUnsignedByte(); // Skip ID byte if not handled\n                        }\n                        buf.readUnsignedShortLE(); // Skip the value short for unknown 2-byte params\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // Seconds since 2000-01-01\n                        break;\n                    case 0x0C: // Odometer Meter\n                    case 0x9B: // Odometer Meter (CAN)\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D: // Engine Hours / Runtime Second\n                         position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Store as milliseconds\n                        break;\n                    case 0x1C: // ACC Status (Ignition)\n                        position.set(Position.KEY_IGNITION, buf.readUnsignedIntLE() > 0);\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0: // Fuel Used ml\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Convert ml to L\n                        break;\n                    case 0xA2: // Fuel consumption ml/100km ? Check unit. Assuming L/100km*100 -> ml/km?\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); // Keep original scale for now\n                        break;\n                    default:\n                        if (extension) {\n                            // Already read 2 bytes for ID\n                        } else {\n                            buf.readUnsignedByte(); // Skip ID byte if not handled\n                        }\n                        buf.readUnsignedIntLE(); // Skip the value int for unknown 4-byte params\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                 if (extension) {\n                    id |= 0xFE00; // Add prefix back for matching cases like 0xFE31\n                 }\n                 int length = buf.readUnsignedByte();\n                 switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); // label\n                        if (length == 3) { // Expect label (1) + temp (2) = 3\n                           position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.1); // Temp usually 0.1 C scale\n                        } else {\n                           buf.skipBytes(length - 1); // Skip remaining unexpected bytes\n                        }\n                        break;\n                    case 0xFE31: // Alarm Data\n                        buf.skipBytes(2); // Skip 0xFE 0x31 marker read by extension logic\n                        if (length >= 2) {\n                            buf.readUnsignedByte(); // alarm protocol\n                            buf.readUnsignedByte(); // alarm type\n                            buf.skipBytes(length - 2);\n                        } else {\n                             buf.skipBytes(length); // Skip if length is less than 2\n                        }\n                        break;\n                    default:\n                         if (extension) {\n                            // Already read 2 bytes for ID\n                         } else {\n                            buf.readUnsignedByte(); // Skip ID byte if not handled\n                         }\n                        buf.skipBytes(length); // Skip data bytes\n                        break;\n                }\n            }\n\n            if (position.getLatitude() != 0 && position.getLongitude() != 0) {\n                positions.add(position);\n            }\n        }\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}