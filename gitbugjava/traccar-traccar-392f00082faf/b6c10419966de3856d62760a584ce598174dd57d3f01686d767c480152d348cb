{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            int paramCount;\n\n            // Parameters with BYTE values\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                int id;\n                int firstByte = buf.getUnsignedByte(buf.readerIndex());\n                if (firstByte == 0xFE) {\n                    buf.skipBytes(1); // Consume 0xFE marker\n                    id = buf.readUnsignedShort(); // Read 2-byte Big Endian ID\n                } else {\n                    id = buf.readUnsignedByte(); // Read 1-byte ID\n                }\n\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x1B: // FIX: Handle Lock status (assuming 0 means locked/true based on test)\n                        position.set(Position.KEY_LOCK, buf.readUnsignedByte() == 0);\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69: // Extension ID example\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte(); // Skip 1 byte value\n                        break;\n                }\n            }\n\n            // Parameters with SHORT LE values\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                int id;\n                int firstByte = buf.getUnsignedByte(buf.readerIndex());\n                if (firstByte == 0xFE) {\n                    buf.skipBytes(1); // Consume 0xFE marker\n                    id = buf.readUnsignedShort(); // Read 2-byte Big Endian ID\n                } else {\n                    id = buf.readUnsignedByte(); // Read 1-byte ID\n                }\n\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // Assuming HDOP needs scaling\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); // Potentially overwrites byte event\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Assuming 0.1L units\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE()); // Assuming degrees C\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE() * 0.1); // Assuming 0.1 C units\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); // Assuming 0.1 L/h units\n                        break;\n                    default:\n                        buf.readUnsignedShortLE(); // Skip 2 bytes value (LE)\n                        break;\n                }\n            }\n\n            // Parameters with INT LE values\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                int id;\n                int firstByte = buf.getUnsignedByte(buf.readerIndex());\n                if (firstByte == 0xFE) {\n                    buf.skipBytes(1); // Consume 0xFE marker\n                    id = buf.readUnsignedShort(); // Read 2-byte Big Endian ID\n                } else {\n                    id = buf.readUnsignedByte(); // Read 1-byte ID\n                }\n\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // Base epoch 2000-01-01 00:00:00 UTC\n                        break;\n                    case 0x0C: // Odometer in meters\n                    case 0x9B: // Odometer in meters\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D: // Runtime in seconds\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000); // Store as milliseconds\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0: // Fuel used in 0.001 L\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Overwrites short?\n                        break;\n                    case 0xA2: // Fuel consumption in 0.01 L/100km ?\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); // Overwrites short?\n                        break;\n                    default:\n                        buf.readUnsignedIntLE(); // Skip 4 bytes value (LE)\n                        break;\n                }\n            }\n\n            // Parameters with variable length values\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                int id;\n                int firstByte = buf.getUnsignedByte(buf.readerIndex());\n                if (firstByte == 0xFE) {\n                    buf.skipBytes(1); // Consume 0xFE marker\n                    id = buf.readUnsignedShort(); // Read 2-byte Big Endian ID\n                } else {\n                    id = buf.readUnsignedByte(); // Read 1-byte ID\n                }\n                int length = buf.readUnsignedByte(); // Read length byte\n\n                // Ensure buffer has enough readable bytes before proceeding\n                if (buf.readableBytes() < length) {\n                    // Log error or break? Skipping remaining params for this position for safety.\n                    break; \n                }\n\n                switch (id) {\n                    case 0x2A: case 0x2B: case 0x2C: case 0x2D:\n                    case 0x2E: case 0x2F: case 0x30: case 0x31: // Temperature sensors\n                        if (length >= 3) { // Need 1 byte label + 2 bytes temperature\n                            buf.readUnsignedByte(); // Skip label byte\n                            // Assuming temperature is signed short LE, scaled by 0.01\n                            position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.01);\n                             if (length > 3) {\n                                buf.skipBytes(length - 3); // Skip any extra bytes\n                            }\n                        } else {\n                            buf.skipBytes(length); // Skip if length is invalid\n                        }\n                        break;\n                    case 0xFE31: // Alarm data\n                         if (length >= 2) {\n                            buf.readUnsignedByte(); // Skip alarm protocol\n                            buf.readUnsignedByte(); // Skip alarm type\n                            if (length > 2) {\n                                buf.skipBytes(length - 2); // Skip remaining alarm data\n                            }\n                        } else {\n                            buf.skipBytes(length); // Skip if length is invalid\n                        }\n                        break;\n                    default:\n                        buf.skipBytes(length); // Skip unknown variable length parameter\n                        break;\n                }\n            }\n\n            // Only add position if essential data is present (e.g., time and coordinates)\n            if (position.getFixTime() != null && position.getLatitude() != 0 && position.getLongitude() != 0) {\n                positions.add(position);\n            }\n        }\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}