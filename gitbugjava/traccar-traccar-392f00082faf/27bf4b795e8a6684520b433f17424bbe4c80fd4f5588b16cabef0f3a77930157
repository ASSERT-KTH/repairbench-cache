{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    // \ucee4\uc11c\ub97c \ub2e4\uc74c \ucf64\ub9c8 \uc704\uce58\ub85c \uc774\ub3d9\ud558\uc5ec IMEI \ucd94\ucd9c\n    buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1 + 3 + 1);\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // \ucd08\uae30 \uce90\uc2dc \ubc0f \uac1c\uc218 \uc77d\uae30\n    buf.readUnsignedIntLE();\n    int count = buf.readUnsignedShortLE();\n\n    // \ubaa8\ub4e0 \uc704\uce58 \ub8e8\ud504\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        // \uccab \ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130 \uadf8\ub8f9 (\ube44\ud2b8\ub974\ud2b8 0xFE\ub85c \ud655\uc7a5 \ud655\uc778)\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // index\n\n        int paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x05:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_SIGNAL, buf.readUnsignedByte());\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); // \uae30\uc874 \uacbd\uc6b0\n                    break;\n                case 0x15: // \uae30\uc874 INPUT \ucc98\ub9ac\n                    int input = buf.readUnsignedByte();\n                    position.set(Position.KEY_INPUT, input);\n                    // INPUT \ube44\ud2b8\uc5d0\uc11c \uc7a0\uae08 \uc0c1\ud0dc \ud655\uc778 (\uc608: BIT 7 = 0x80\ub85c \ub4f1\ub85d)\n                    position.set(Position.KEY_LOCK, (input & 0x80) != 0); // \ubcc0\uacbd\ud55c \ubd80\ubd84\n                    break;\n                case 0xFB:\n                    position.set(Position.KEY_LOCK, buf.readUnsignedByte() != 0);\n                    break; // \ucd94\uac00\ud55c \ubd80\ubd84\n                case 0xFE69: // \uae30\uc874 batt_low \ub808\ubca8 \ucc98\ub9ac\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                default:\n                    buf.readUnsignedByte();\n                    break;\n            }\n        }\n\n        // \ub450 \ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130 \uadf8\ub8f9 (\uc18d\ub3c4, \uc720\ud6a8\uc131...)\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                // ... \ub098\uba38\uc9c0\ub294 \ubcc0\uacbd \uc5c6\uc74c\n                default:\n                    if (extension) {\n                        buf.readUnsignedShortLE();\n                    } else {\n                        buf.readUnsignedByte();\n                    }\n                    break;\n            }\n        }\n\n        // \uc138 \ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130 \uadf8\ub8f9 (\uc88c\ud45c, \uc2dc\uac04)\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x04:\n                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000));\n                    break;\n                // ... \ub098\uba38\uc9c0 \uc640 \uac19\uc774 \ubcc0\uacbd \uc5c6\uc74c\n            }\n        }\n\n        // \ub124 \ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130 \uadf8\ub8f9 (\ud655\uc7a5 \uc815\ubcf4)\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n\n            switch (id) {\n                // ... (\uae30\uc874 \ucc98\ub9ac)\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n\n        positions.add(position);\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}