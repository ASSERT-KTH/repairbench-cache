{
    "generation": "    private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {\n\n        int type = buf.readUnsignedByte();\n\n        if (type == 0xF0) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n            if (buf.readUnsignedByte() > 0) {\n                position.set(Position.KEY_ARCHIVE, true);\n            }\n\n            buf.readUnsignedByte(); // vehicle type\n\n            int count;\n            int subtype = buf.readUnsignedByte();\n            switch (subtype) {\n                case 0x01:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedShort();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x0102:\n                            case 0x0528:\n                            case 0x0546: // Odometer\n                                if (length == 4) {\n                                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                                } else {\n                                    if (length > 0) {\n                                        buf.skipBytes(length);\n                                    }\n                                }\n                                break;\n                            case 0x0103: // Fuel Level (int)\n                                if (length == 4) {\n                                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);\n                                } else {\n                                    if (length > 0) {\n                                        buf.skipBytes(length);\n                                    }\n                                }\n                                break;\n                            case 0x052A: // Fuel Level (short)\n                                if (length == 2) {\n                                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);\n                                } else {\n                                    if (length > 0) {\n                                        buf.skipBytes(length);\n                                    }\n                                }\n                                break;\n                            case 0x0105:\n                            case 0x052C: // Fuel Used\n                                if (length == 4) {\n                                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);\n                                } else {\n                                    if (length > 0) {\n                                        buf.skipBytes(length);\n                                    }\n                                }\n                                break;\n                            case 0x014A:\n                            case 0x0537:\n                            case 0x0538:\n                            case 0x0539: // Fuel Consumption\n                                if (length == 2) {\n                                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                                } else {\n                                    if (length > 0) {\n                                        buf.skipBytes(length);\n                                    }\n                                }\n                                break;\n                            default:\n                                switch (length) {\n                                    case 1:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());\n                                        break;\n                                    case 2:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());\n                                        break;\n                                    case 4:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());\n                                        break;\n                                    default:\n                                        if (length > 0) {\n                                            buf.skipBytes(length);\n                                        }\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    // Direct parsing of coordinates for 0xF0 transparent data\n                    // Assumes: Lat (4b uint, 1e-6 deg), Lon (4b int, 1e-6 deg), Speed (2b ushort, 0.1km/h), Course (2b ushort, deg)\n                    position.setLatitude(buf.readUnsignedInt() * 0.000001);\n                    position.setLongitude(buf.readInt() * 0.000001);\n                    position.setSpeed(buf.readUnsignedShort() * 0.1);\n                    position.setCourse(buf.readUnsignedShort());\n                    position.setTime(time);\n                    break;\n                case 0x03:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedShort();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x1A:\n                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                break;\n                            case 0x1B:\n                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                break;\n                            case 0x1C:\n                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                break;\n                            case 0x1D:\n                            case 0x1E:\n                            case 0x1F:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);\n                                break;\n                            case 0x23:\n                                position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);\n                                break;\n                            default:\n                                // Default case in switch(id) does nothing with the data,\n                                // but buf.skipBytes(length) below will consume it.\n                                break;\n                        }\n                        if (length > 0) {\n                            buf.skipBytes(length); // Skip data associated with this alarm item\n                        }\n                    }\n                    // Direct parsing of coordinates for 0xF0 transparent data\n                    position.setLatitude(buf.readUnsignedInt() * 0.000001);\n                    position.setLongitude(buf.readInt() * 0.000001);\n                    position.setSpeed(buf.readUnsignedShort() * 0.1);\n                    position.setCourse(buf.readUnsignedShort());\n                    position.setTime(time);\n                    break;\n                case 0x0B:\n                    if (buf.readUnsignedByte() > 0) { // Flag indicates VIN presence\n                        if (buf.readableBytes() >= 17) { // Ensure enough bytes for VIN\n                           position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());\n                        } else {\n                           // Log or handle insufficient data for VIN if necessary, or rely on readCharSequence to throw.\n                           // For now, if not enough bytes, VIN won't be read/set from here.\n                        }\n                    }\n                    getLastLocation(position, time);\n                    break;\n                default:\n                    return null;\n            }\n\n            return position;\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}