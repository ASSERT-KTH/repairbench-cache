{
    "generation": "private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {\n\n    int type = buf.readUnsignedByte();\n    if (type != 0xF0) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n\n    if (buf.readUnsignedByte() > 0) {\n        position.set(Position.KEY_ARCHIVE, true);\n    }\n\n    buf.readUnsignedByte(); // vehicle type\n\n    int subtype = buf.readUnsignedByte();\n    if (subtype == 0x01) {\n\n        int count = buf.readUnsignedByte();\n        for (int i = 0; i < count; i++) {\n            int id = buf.readUnsignedShortLE();\n            int length = buf.readUnsignedByte();\n            int consumed = 0;\n            switch (id) {\n                case 0x0102:\n                case 0x0528:\n                case 0x0546:\n                    if (length >= 4) {\n                        long raw = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ODOMETER, raw * 100);\n                        consumed = 4;\n                    }\n                    break;\n                case 0x0103:\n                    if (length >= 4) {\n                        long raw = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_FUEL_LEVEL, raw * 0.01);\n                        consumed = 4;\n                    }\n                    break;\n                case 0x052A:\n                    if (length >= 2) {\n                        int raw = buf.readUnsignedShortLE();\n                        position.set(Position.KEY_FUEL_LEVEL, raw * 0.01);\n                        consumed = 2;\n                    }\n                    break;\n                case 0x0105:\n                case 0x052C:\n                    if (length >= 4) {\n                        long raw = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_FUEL_USED, raw * 0.01);\n                        consumed = 4;\n                    }\n                    break;\n                case 0x014A:\n                case 0x0537:\n                case 0x0538:\n                case 0x0539:\n                    if (length >= 2) {\n                        int raw = buf.readUnsignedShortLE();\n                        position.set(Position.KEY_FUEL_CONSUMPTION, raw * 0.01);\n                        consumed = 2;\n                    }\n                    break;\n                default:\n                    switch (length) {\n                        case 1:\n                            position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());\n                            consumed = 1;\n                            break;\n                        case 2:\n                            position.set(Position.PREFIX_IO + id, buf.readUnsignedShortLE());\n                            consumed = 2;\n                            break;\n                        case 4:\n                            position.set(Position.PREFIX_IO + id, buf.readUnsignedIntLE());\n                            consumed = 4;\n                            break;\n                    }\n                    break;\n            }\n            if (consumed < length) {\n                buf.skipBytes(length - consumed);\n            }\n        }\n\n        decodeCoordinates(position, buf);\n        position.setTime(time);\n        return position;\n\n    } else if (subtype == 0x03) {\n\n        int count = buf.readUnsignedByte();\n        for (int i = 0; i < count; i++) {\n            int id = buf.readUnsignedShortLE();\n            int length = buf.readUnsignedByte();\n            switch (id) {\n                case 0x1A:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x1B:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x1C:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x1D:\n                case 0x1E:\n                case 0x1F:\n                    position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);\n                    break;\n                case 0x23:\n                    position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);\n                    break;\n                default:\n                    break;\n            }\n            buf.skipBytes(length);\n        }\n\n        decodeCoordinates(position, buf);\n        position.setTime(time);\n        return position;\n\n    } else if (subtype == 0x0B) {\n\n        if (buf.readUnsignedByte() > 0) {\n            position.set(Position.KEY_VIN,\n                buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());\n        }\n        getLastLocation(position, time);\n        return position;\n\n    } else {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}