{
    "generation": "    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant based on the chronology\n     * and time-zone of the supplied instant.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology instantChrono = instant.getChronology();\n        // Select the chronology to use for parsing (may be formatter's override)\n        Chronology parseChrono = selectChronology(instantChrono);\n        \n        // Determine the default year from the instant, using the parse chronology's zone.\n        // Use instantMillis as the base, as the bucket calculation works based on it.\n        int defaultYear = parseChrono.year().get(instantMillis);\n        \n        // Create bucket using UTC instantMillis and the parse chronology.\n        // The bucket internally uses UTC for field calculations. Passing instantMillis\n        // aligns the base instant with the bucket's internal chronology,\n        // resolving issues with date validation (like Feb 29th) that occurred\n        // when passing local millis calculated with a potentially different offset.\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, parseChrono, iLocale, iPivotYear, defaultYear);\n        \n        // Parse the text into the bucket.\n        // The parser might use the formatter's default year if available and needed.\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        // Compute the resulting millis (UTC).\n        // Pass 'false' for resetFields to merge parsed fields onto the base instant.\n        // Pass the text for better error messages.\n        instant.setMillis(bucket.computeMillis(false, text));\n        \n        // Update the instant's chronology and zone based on parsing results\n        // or formatter overrides. Start with the chronology used for parsing.\n        Chronology resultChrono = parseChrono;\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            // Parsed offset overrides the zone\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            resultChrono = resultChrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            // Parsed zone overrides the zone\n            resultChrono = resultChrono.withZone(bucket.getZone());\n        }\n        // Set the potentially modified chronology on the instant\n        instant.setChronology(resultChrono);\n        \n        // Apply the formatter's zone override if present (takes precedence)\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        \n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}