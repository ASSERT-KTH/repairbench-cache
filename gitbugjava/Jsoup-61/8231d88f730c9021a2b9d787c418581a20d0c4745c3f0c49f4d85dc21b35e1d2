{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        // Retrieve class attribute value. Return false if null or if className is null/empty.\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null || className == null) { // Added null check for robustness\n             return false;\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        // Return false if attribute is empty, or shorter than required class name, or className is empty.\n        if (len == 0 || wantLen == 0 || len < wantLen) { // Added wantLen == 0 check\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute (case-insensitive)\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        // Using Character.isWhitespace() for compatibility with HTML definition of whitespace.\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false; // Reset for next class name\n                }\n                // Continue scanning if whitespace occurs while not in a class name\n            } else { // Character is not whitespace\n                if (!inClass) {\n                    // Starting a new class name token\n                    inClass = true;\n                    start = i;\n                }\n                // Continue scanning if non-whitespace character occurs while already in a class name\n            }\n        }\n\n        // check the last entry (e.g., if the class attribute doesn't end with whitespace)\n        if (inClass && len - start == wantLen) {\n            // Compare the final token found\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false; // Class name not found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}