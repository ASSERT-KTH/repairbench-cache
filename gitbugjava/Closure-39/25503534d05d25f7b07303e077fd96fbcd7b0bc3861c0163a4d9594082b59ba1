{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    // Check for recursion first using the registry.\n    // Assumes JSType.toStringRegistry is a ThreadLocal<Set<JSType>>.\n    if (com.google.javascript.rhino.jstype.JSType.toStringRegistry.get().contains(this)) {\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n\n    // Use reference name if present. Proxy types handle their own recursion display.\n    if (hasReferenceName()) {\n      // Assuming ProxyObjectType's toString/toStringHelper correctly uses\n      // forAnnotations and handles recursion.\n      return getReferenceName();\n    }\n\n    // Add to registry before processing properties or calling recursively.\n    com.google.javascript.rhino.jstype.JSType.toStringRegistry.get().add(this);\n\n    try {\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      // Collect properties from the entire prototype chain.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      // MAX_PRETTY_PRINTED_PROPERTIES defines the max number of properties\n      // to show *before* appending \"...\".\n      // It's assumed to be a static final int constant accessible here.\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        // Handle truncation only if forAnnotations is false and limit is reached.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\"...\");\n          break; // Stop adding properties\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        JSType propertyType = getPropertyType(property);\n        // Propagate the 'forAnnotations' flag in recursive calls.\n        sb.append(propertyType == null ? \"null\" : propertyType.toStringHelper(forAnnotations));\n\n        i++;\n      }\n\n      sb.append(\"}\");\n      return sb.toString();\n    } finally {\n      // Ensure removal from the registry happens even if exceptions occur.\n      com.google.javascript.rhino.jstype.JSType.toStringRegistry.get().remove(this);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}