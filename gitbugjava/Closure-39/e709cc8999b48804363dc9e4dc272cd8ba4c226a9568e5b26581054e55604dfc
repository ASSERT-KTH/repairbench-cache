{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      // If it has a reference name, use that unconditionally.\n      // This is important for recursive types represented by ProxyObjectType.\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Prevent recursive pretty printing.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      // Collect all properties from the prototype chain, except for native object types.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType(); // Collect all needed properties\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        // Apply the property limit only if not printing for annotations.\n        // Check before printing the property.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\"...\");\n          break; // Stop printing further properties.\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        JSType propType = getPropertyType(property);\n        // Recursively call toStringHelper, passing the forAnnotations flag.\n        // Handle null property types, although getPropertyType typically shouldn't return null.\n        sb.append(propType == null ? \"null\" : propType.toStringHelper(forAnnotations));\n\n        ++i;\n      }\n\n      sb.append(\"}\");\n\n      // Restore prettyPrint state.\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // We are in a recursive toString call.\n      // Return \"?\" for annotations, \"{...}\" otherwise.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}