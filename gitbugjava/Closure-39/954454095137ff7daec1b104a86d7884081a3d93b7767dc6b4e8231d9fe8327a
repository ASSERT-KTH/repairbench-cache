{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           // Collect all properties, restriction is handled during printing.\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        // Use the correct toString method based on forAnnotations.\n        JSType propertyType = getPropertyType(property);\n        sb.append(forAnnotations ? propertyType.toAnnotationString() : propertyType.toString());\n\n        ++i;\n        // Only apply MAX_PRETTY_PRINTED_PROPERTIES limit if not for annotations\n        // and if there are more properties than the limit.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES &&\n            propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      // Restore pretty print state.\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // Abbreviated output for recursive types or when pretty printing is off.\n      // JSDoc uses \"?\" for recursive types in annotations.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}