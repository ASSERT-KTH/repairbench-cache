{
    "generation": "    /**\n     * <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n     * with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\"\n     * call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are\n     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n     * garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     * <p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in\n     *            byte[] array of ascii data to base64 decode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     */\n    void decode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n        }\n        for (int i = 0; i < inAvail; i++) {\n            // Notes:\n            // 1. Must be defined externally:\n            //    - byte[] buffer\n            //    - int pos\n            //    - int decodeSize (likely 3)\n            //    - boolean eof\n            //    - int modulus\n            //    - int x\n            //    - byte PAD\n            //    - int[] DECODE_TABLE\n            //    - int MASK_8BITS (0xFF)\n            //    - void resizeBuffer()\n            // 2. decodeSize is used to estimate buffer growth needed.\n\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n            byte b = in[inPos++];\n            if (b == PAD) {\n                // We're done.\n                eof = true;\n                break;\n            } else {\n                if (b >= 0 && b < DECODE_TABLE.length) {\n                    int result = DECODE_TABLE[b];\n                    if (result >= 0) {\n                        modulus = (++modulus) % 4;\n                        x = (x << 6) + result;\n                        if (modulus == 0) {\n                            // We might need to resize again here if resizeBuffer() didn't provide\n                            // enough space for 3 bytes. The check at the start of the loop ensures\n                            // space *before* reading the character, but processing it might fill buffer.\n                            // However, the common pattern is to check before potentially writing.\n                            // Let's assume the initial check is sufficient for this block.\n                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                            buffer[pos++] = (byte) (x & MASK_8BITS);\n                        }\n                    }\n                }\n            }\n        }\n\n        // Two forms of EOF as far as base64 decoder is concerned: actual\n        // EOF (-1) and first time '=' character is encountered in stream.\n        // This approach makes the '=' padding characters completely optional.\n        if (eof && modulus != 0) {\n            // On EOF, ensure buffer is big enough to hold last possible decoded bytes\n            // (1 or 2 bytes, depending on modulus). Check against decodeSize for safety,\n            // consistent with the loop check. This addresses the NPE reported in CODEC-98.\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n\n            // Final calculation may need adding imaginary PAD characters to complete the bytes.\n            x = x << 6;\n            switch (modulus) {\n                case 2 :\n                    // We have processed 2 base64 chars => 12 bits. Add 2 virtual PADs (12 bits) => 24 bits total.\n                    // Need 1 byte result ((12+12) >> 16). Shift left by 6 again for 18 bits, then 6 more for 24.\n                    x = x << 6;\n                    // Write the top 8 bits.\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    // We have processed 3 base64 chars => 18 bits. Add 1 virtual PAD (6 bits) => 24 bits total.\n                    // Need 2 byte result ((18+6) >> 16 and (18+6) >> 8). Shift was already done (x << 6).\n                    // Write the top 8 bits, then the next 8 bits.\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n                // case 1 should not happen based on base64 structure rules\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}