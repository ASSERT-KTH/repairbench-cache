{
    "generation": "private Object decodePosition(Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    List<Position> positions = new LinkedList<>();\n    Position position = null;\n    DateBuilder dateBuilder = null;\n\n    for (String pair : sentence.split(\",\")) {\n        String[] data = pair.split(\"[=:]\");\n        if (data.length < 2) {\n            continue; // Skip invalid pairs\n        }\n        int key;\n        try {\n            key = Integer.parseInt(data[0], 16);\n        } catch (NumberFormatException e) {\n            continue;\n        }\n        String value = data[1];\n\n        if (key == 0x0) {\n            if (position != null) {\n                position.setTime(dateBuilder.getDate());\n                positions.add(position);\n            }\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            dateBuilder = new DateBuilder(new Date());\n        } else if (position != null) {\n            switch (key) {\n                case 0x11:\n                    String year = value.length() >= 2 ? value.substring(0, 2) : \"00\";\n                    String month = value.length() >= 4 ? value.substring(2, 4) : \"00\";\n                    String day = value.length() >= 6 ? value.substring(4) : \"00\";\n                    dateBuilder.setDateReverse(Integer.parseInt(day), Integer.parseInt(month), Integer.parseInt(year));\n                    break;\n                case 0x10:\n                    String hours = value.length() >= 2 ? value.substring(0, 2) : \"00\";\n                    String minutes = value.length() >= 4 ? value.substring(2, 4) : \"00\";\n                    String seconds = value.length() >= 6 ? value.substring(4, 6) : \"00\";\n                    String milliseconds = value.length() >= 8 ? value.substring(6) : \"00\";\n                    dateBuilder.setTime(Integer.parseInt(hours), Integer.parseInt(minutes), Integer.parseInt(seconds), Integer.parseInt(milliseconds) * 10);\n                    break;\n                case 0xA:\n                    position.setValid(true);\n                    position.setLatitude(parseDouble(value));\n                    break;\n                case 0xB:\n                    position.setValid(true);\n                    position.setLongitude(parseDouble(value));\n                    break;\n                case 0xC:\n                    position.setAltitude(parseDouble(value));\n                    break;\n                case 0xD:\n                    position.setSpeed(UnitsConverter.knotsFromKph(parseDouble(value)));\n                    break;\n                case 0xE:\n                    position.setCourse(parseInteger(value));\n                    break;\n                case 0xF:\n                    position.set(Position.KEY_SATELLITES, parseInteger(value));\n                    break;\n                case 0x12:\n                    position.set(Position.KEY_HDOP, parseInteger(value));\n                    break;\n                case 0x20:\n                    position.set(Position.KEY_ACCELERATION, value);\n                    break;\n                case 0x24:\n                    position.set(Position.KEY_BATTERY, parseInteger(value) * 0.01);\n                    break;\n                case 0x81:\n                    position.set(Position.KEY_RSSI, parseInteger(value));\n                    break;\n                case 0x82:\n                    position.set(Position.KEY_DEVICE_TEMP, parseInteger(value) * 0.1);\n                    break;\n                case 0x104:\n                    position.set(Position.KEY_ENGINE_LOAD, parseInteger(value));\n                    break;\n                case 0x105:\n                    position.set(Position.KEY_COOLANT_TEMP, parseInteger(value));\n                    break;\n                case 0x10c:\n                    position.set(Position.KEY_RPM, parseInteger(value));\n                    break;\n                case 0x10d:\n                    position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(parseInteger(value)));\n                    break;\n                case 0x111:\n                    position.set(Position.KEY_THROTTLE, parseInteger(value));\n                    break;\n                default:\n                    position.set(Position.PREFIX_IO + key, value);\n                    break;\n            }\n        }\n    }\n\n    if (position != null) {\n        if (!position.getValid()) {\n            getLastLocation(position, null);\n        }\n        position.setTime(dateBuilder.getDate());\n        positions.add(position);\n    }\n\n    return positions.isEmpty() ? null : positions;\n}\n\nprivate double parseDouble(String value) {\n    try {\n        return Double.parseDouble(value);\n    } catch (NumberFormatException e) {\n        return 0.0;\n    }\n}\n\nprivate int parseInteger(String value) {\n    try {\n        return Integer.parseInt(value);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}