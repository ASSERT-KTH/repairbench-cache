{
    "generation": "private Object decodePosition(\n        Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    List<Position> positions = new LinkedList<>();\n    Position position = null;\n    DateBuilder dateBuilder = null;\n\n    for (String pair : sentence.split(\",\")) {\n        String[] data = pair.split(\"[=:]\", 2);\n\n        // Ensure data has both key and value parts\n        if (data.length < 2) {\n            continue;\n        }\n\n        String keyRaw = data[0];\n        String value = data[1];\n        int key;\n\n        // Determine hex or decimal key: try hex, then fallback to decimal if fails, then string fallback\n        try {\n            key = Integer.parseInt(keyRaw, 16);\n        } catch (NumberFormatException hex) {\n            try {\n                key = Integer.parseInt(keyRaw); // fallback to decimal\n            } catch (NumberFormatException dec) {\n                // If not parseable and not A/B/C/D/E/F/...\n                key = -1;\n            }\n        }\n\n        // A, B, C, D, E, F, etc. should be handled by string\n        if (key == -1 && keyRaw.length() == 1) {\n            // Single char, keep as string for below (A/B/...)\n        } else if (key == -1) {\n            continue;\n        }\n\n        if ((key == 0x0) || (key == 0)) {\n            if (position != null) {\n                position.setTime(dateBuilder != null ? dateBuilder.getDate() : new Date());\n                positions.add(position);\n            }\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            dateBuilder = new DateBuilder(new Date());\n        } else if (position != null) {\n            // Switch for keys as int or char\n            boolean handled = false;\n            switch (key) {\n                case 0x11:\n                    value = (\"000000\" + value).substring(value.length());\n                    dateBuilder.setDateReverse(\n                            Integer.parseInt(value.substring(0, 2)),\n                            Integer.parseInt(value.substring(2, 4)),\n                            Integer.parseInt(value.substring(4)));\n                    handled = true;\n                    break;\n                case 0x10:\n                    value = (\"00000000\" + value).substring(value.length());\n                    dateBuilder.setTime(\n                            Integer.parseInt(value.substring(0, 2)),\n                            Integer.parseInt(value.substring(2, 4)),\n                            Integer.parseInt(value.substring(4, 6)),\n                            Integer.parseInt(value.substring(6)) * 10);\n                    handled = true;\n                    break;\n                case 0xA:\n                    try {\n                        double lat = Double.parseDouble(value);\n                        position.setValid(true);\n                        position.setLatitude(lat);\n                    } catch (NumberFormatException e) {\n                        // ignore invalid latitude\n                    }\n                    handled = true;\n                    break;\n                case 0xB:\n                    try {\n                        double lon = Double.parseDouble(value);\n                        position.setValid(true);\n                        position.setLongitude(lon);\n                    } catch (NumberFormatException e) {\n                        // ignore invalid longitude\n                    }\n                    handled = true;\n                    break;\n                case 0xC:\n                    try {\n                        position.setAltitude(Double.parseDouble(value));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid altitude\n                    }\n                    handled = true;\n                    break;\n                case 0xD:\n                    try {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid speed\n                    }\n                    handled = true;\n                    break;\n                case 0xE:\n                    try {\n                        position.setCourse(Integer.parseInt(value));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid course\n                    }\n                    handled = true;\n                    break;\n                case 0xF:\n                    try {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x12:\n                    try {\n                        position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x20:\n                    position.set(Position.KEY_ACCELERATION, value);\n                    handled = true;\n                    break;\n                case 0x24:\n                    try {\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x81:\n                    try {\n                        position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x82:\n                    try {\n                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x104:\n                    try {\n                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x105:\n                    try {\n                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x10c:\n                    try {\n                        position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x10d:\n                    try {\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n                case 0x111:\n                    try {\n                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                    } catch (NumberFormatException e) {}\n                    handled = true;\n                    break;\n            }\n            if (!handled && key == -1) {\n                // String keys, e.g., A/B/C/D/E/F\n                switch (keyRaw) {\n                    case \"A\":\n                        try {\n                            position.setValid(true);\n                            position.setLatitude(Double.parseDouble(value));\n                        } catch (NumberFormatException e) {\n                        }\n                        break;\n                    case \"B\":\n                        try {\n                            position.setValid(true);\n                            position.setLongitude(Double.parseDouble(value));\n                        } catch (NumberFormatException e) {\n                        }\n                        break;\n                    case \"C\":\n                        try {\n                            position.setAltitude(Double.parseDouble(value));\n                        } catch (NumberFormatException e) {\n                        }\n                        break;\n                    case \"D\":\n                        try {\n                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                        } catch (NumberFormatException e) {\n                        }\n                        break;\n                    case \"E\":\n                        try {\n                            position.setCourse(Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                        }\n                        break;\n                    case \"F\":\n                        try {\n                            position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                        }\n                        break;\n                    default:\n                        position.set(Position.PREFIX_IO + keyRaw, value);\n                        break;\n                }\n            } else if (!handled) {\n                position.set(Position.PREFIX_IO + key, value);\n            }\n        }\n    }\n\n    if (position != null) {\n        if (!position.getValid()) {\n            getLastLocation(position, null);\n        }\n        position.setTime(dateBuilder != null ? dateBuilder.getDate() : new Date());\n        positions.add(position);\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}