{
    "generation": "private Object decodePosition(\n        Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    List<Position> positions = new LinkedList<>();\n    Position position = null;\n    DateBuilder dateBuilder = null;\n\n    for (String pair : sentence.split(\",\")) {\n        String[] data = pair.split(\"[=:]\", 2);\n        if (data.length < 2) {\n            continue;\n        }\n        String keyString = data[0];\n        String value = data[1];\n\n        int key;\n        // Try parsing key as hex first, if fails, try as decimal, if still fails, treat as string key\n        try {\n            key = Integer.parseInt(keyString, 16);\n        } catch (NumberFormatException e1) {\n            try {\n                key = Integer.parseInt(keyString, 10);\n            } catch (NumberFormatException e2) {\n                // Might be letter keys: A, B, C, D, E, F, etc.\n                key = -1;\n            }\n        }\n\n        if (keyString.equalsIgnoreCase(\"0\")) {\n            if (position != null) {\n                if (dateBuilder != null) {\n                    position.setTime(dateBuilder.getDate());\n                }\n                positions.add(position);\n            }\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            dateBuilder = new DateBuilder(new Date());\n        } else if (position != null) {\n            if (key == 0x11) {\n                value = (\"000000\" + value).substring(value.length());\n                dateBuilder.setDateReverse(\n                        Integer.parseInt(value.substring(0, 2)),\n                        Integer.parseInt(value.substring(2, 4)),\n                        Integer.parseInt(value.substring(4)));\n            } else if (key == 0x10) {\n                value = (\"00000000\" + value).substring(value.length());\n                dateBuilder.setTime(\n                        Integer.parseInt(value.substring(0, 2)),\n                        Integer.parseInt(value.substring(2, 4)),\n                        Integer.parseInt(value.substring(4, 6)),\n                        Integer.parseInt(value.substring(6)) * 10);\n            } else if (key == 0xA || keyString.equalsIgnoreCase(\"A\")) {\n                position.setValid(true);\n                try {\n                    position.setLatitude(Double.parseDouble(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0xB || keyString.equalsIgnoreCase(\"B\")) {\n                position.setValid(true);\n                try {\n                    position.setLongitude(Double.parseDouble(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0xC || keyString.equalsIgnoreCase(\"C\")) {\n                try {\n                    position.setAltitude(Double.parseDouble(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0xD || keyString.equalsIgnoreCase(\"D\")) {\n                try {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0xE || keyString.equalsIgnoreCase(\"E\")) {\n                try {\n                    position.setCourse(Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0xF || keyString.equalsIgnoreCase(\"F\")) {\n                try {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x12) {\n                try {\n                    position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x20) {\n                position.set(Position.KEY_ACCELERATION, value);\n            } else if (key == 0x24) {\n                try {\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x81) {\n                try {\n                    position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x82) {\n                try {\n                    position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x104) {\n                try {\n                    position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x105) {\n                try {\n                    position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x10c) {\n                try {\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x10d) {\n                try {\n                    position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == 0x111) {\n                try {\n                    position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                } catch (NumberFormatException ignore) {\n                }\n            } else if (key == -1) {\n                // Letter or symbolic keys; try as string keys (A, B, C, D, F etc.)\n                // This guard is mostly for cases which the device sends e.g. \"A:...\" or \"B:...\"\n                // Already handled above, but fallback here\n                String upperKey = keyString.toUpperCase();\n                if (upperKey.equals(\"A\")) {\n                    position.setValid(true);\n                    try {\n                        position.setLatitude(Double.parseDouble(value));\n                    } catch (NumberFormatException ignore) {\n                    }\n                } else if (upperKey.equals(\"B\")) {\n                    position.setValid(true);\n                    try {\n                        position.setLongitude(Double.parseDouble(value));\n                    } catch (NumberFormatException ignore) {\n                    }\n                } else if (upperKey.equals(\"C\")) {\n                    try {\n                        position.setAltitude(Double.parseDouble(value));\n                    } catch (NumberFormatException ignore) {\n                    }\n                } else if (upperKey.equals(\"D\")) {\n                    try {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                    } catch (NumberFormatException ignore) {\n                    }\n                } else if (upperKey.equals(\"E\")) {\n                    try {\n                        position.setCourse(Integer.parseInt(value));\n                    } catch (NumberFormatException ignore) {\n                    }\n                } else if (upperKey.equals(\"F\")) {\n                    try {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    } catch (NumberFormatException ignore) {\n                    }\n                } else {\n                    position.set(Position.PREFIX_IO + keyString, value);\n                }\n            } else {\n                // Other keys, store as I/O\n                position.set(Position.PREFIX_IO + keyString, value);\n            }\n        }\n    }\n\n    if (position != null) {\n        if (!position.getValid()) {\n            getLastLocation(position, null);\n        }\n        if (dateBuilder != null) {\n            position.setTime(dateBuilder.getDate());\n        }\n        positions.add(position);\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}