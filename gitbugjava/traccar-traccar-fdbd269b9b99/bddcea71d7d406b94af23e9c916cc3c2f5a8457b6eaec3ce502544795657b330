{
    "generation": "    private Object decodePosition(\n            Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        List<Position> positions = new LinkedList<>();\n        Position position = null;\n        DateBuilder dateBuilder = null;\n\n        for (String pair : sentence.split(\",\")) {\n            String[] data = pair.split(\"[=:]\");\n            int key;\n            try {\n                // Ensure data[0] exists. If pair is malformed (e.g. empty string from \" ,, \"), this could be an issue.\n                // However, the specific bug is NumberFormatException later, not here or AIOOBE on data[0].\n                // Assuming valid key format if parsing proceeds.\n                if (data.length == 0 || data[0].isEmpty()) {\n                    continue;\n                }\n                key = Integer.parseInt(data[0], 16);\n            } catch (NumberFormatException e) {\n                continue; // Skip malformed key\n            }\n\n            // Ensure data[1] (value) exists. If not, skip.\n            // Example: \"keyonly\" pair would split into data={\"keyonly\"}, data.length=1\n            if (data.length < 2) {\n                continue;\n            }\n            String value = data[1];\n\n            if (key == 0x0) {\n                if (position != null) {\n                    // position implies dateBuilder is also not null from previous 0x0\n                    position.setTime(dateBuilder.getDate());\n                    positions.add(position);\n                }\n                position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                dateBuilder = new DateBuilder(new Date());\n            } else if (position != null) { // position is null if no 0x0 key has been processed yet\n                // dateBuilder is also guaranteed to be non-null if position is non-null\n                switch (key) {\n                    case 0x11:\n                        value = (\"000000\" + value).substring(value.length());\n                        dateBuilder.setDateReverse(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4)));\n                        break;\n                    case 0x10:\n                        value = (\"00000000\" + value).substring(value.length());\n                        dateBuilder.setTime(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4, 6)),\n                                Integer.parseInt(value.substring(6)) * 10);\n                        break;\n                    case 0xA:\n                        position.setValid(true);\n                        position.setLatitude(Double.parseDouble(value));\n                        break;\n                    case 0xB:\n                        position.setValid(true);\n                        position.setLongitude(Double.parseDouble(value));\n                        break;\n                    case 0xC:\n                        position.setAltitude(Double.parseDouble(value));\n                        break;\n                    case 0xD:\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                        break;\n                    case 0xE:\n                        position.setCourse(Integer.parseInt(value));\n                        break;\n                    case 0xF:\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        break;\n                    case 0x12:\n                        position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                        break;\n                    case 0x20:\n                        position.set(Position.KEY_ACCELERATION, value);\n                        break;\n                    case 0x24:\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                        break;\n                    case 0x81:\n                        position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                        break;\n                    case 0x82: // Fixed case\n                        try {\n                            // Attempt to parse as integer and apply scaling (original behavior for int values)\n                            position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);\n                        } catch (NumberFormatException e1) {\n                            // If parsing as integer fails (e.g., value is \"53.000000\"), parse as double.\n                            // Assumes float string values are already appropriately scaled.\n                            position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value));\n                        }\n                        break;\n                    case 0x104:\n                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                        break;\n                    case 0x105:\n                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                        break;\n                    case 0x10c:\n                        position.set(Position.KEY_RPM, Integer.parseInt(value));\n                        break;\n                    case 0x10d:\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                        break;\n                    case 0x111:\n                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                        break;\n                    default:\n                        position.set(Position.PREFIX_IO + key, value);\n                        break;\n                }\n            }\n        }\n\n        if (position != null) {\n            if (!position.getValid()) {\n                getLastLocation(position, null);\n            }\n            // If position != null, dateBuilder was initialized when this position object was created.\n            position.setTime(dateBuilder.getDate());\n            positions.add(position);\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}