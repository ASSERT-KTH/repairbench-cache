{
    "generation": "private Object decodePosition(\n        Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    List<Position> positions = new LinkedList<>();\n    Position position = null;\n    DateBuilder dateBuilder = null;\n\n    for (String pair : sentence.split(\",\")) {\n        String[] data = pair.split(\"[=:]\", 2); // fix: limit to 2 in case of multiple '=' or ':'\n        if (data.length < 2) {\n            continue;\n        }\n        String keyString = data[0];\n        String value = data[1];\n        Integer key = null;\n        try {\n            key = Integer.parseInt(keyString, 16);\n        } catch (NumberFormatException e) {\n            // Try parse as letters for A, B, C, etc.\n            if (keyString.length() == 1) {\n                // Use hex value for single char A/B/C/D/E/F\n                try {\n                    key = Integer.parseInt(keyString, 16);\n                } catch (NumberFormatException ex) {\n                    key = null;\n                }\n            }\n        }\n        // If cannot parse as key, handle as non-numeric. Use letter as key\n        if (key == null && keyString.length() == 1 && Character.isLetter(keyString.charAt(0))) {\n            key = (int) Character.toUpperCase(keyString.charAt(0));\n        }\n        // Special handling for fields like 10D, 10C etc\n        if (key == null) {\n            try {\n                key = Integer.parseInt(keyString.replaceAll(\"[^0-9A-Fa-f]\", \"\"), 16);\n            } catch (NumberFormatException ex) {\n                continue;\n            }\n        }\n\n        // Special handling for old-style keys like 'A', 'B', ... (lat/lon), as observed in input\n        boolean isLetterKey = keyString.length() == 1 && Character.isLetter(keyString.charAt(0));\n        if (isLetterKey) {\n            int charKey = Character.toUpperCase(keyString.charAt(0));\n            if (position != null) {\n                switch (charKey) {\n                    case 'A':\n                        position.setValid(true);\n                        try {\n                            position.setLatitude(Double.parseDouble(value));\n                        } catch (Exception e) {\n                            // ignore\n                        }\n                        break;\n                    case 'B':\n                        position.setValid(true);\n                        try {\n                            position.setLongitude(Double.parseDouble(value));\n                        } catch (Exception e) {\n                            // ignore\n                        }\n                        break;\n                    case 'C':\n                        try {\n                            position.setAltitude(Double.parseDouble(value));\n                        } catch (Exception e) {\n                            // ignore\n                        }\n                        break;\n                    case 'D':\n                        try {\n                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                        } catch (Exception e) {\n                            // ignore\n                        }\n                        break;\n                    case 'E':\n                        try {\n                            position.setCourse(Integer.parseInt(value));\n                        } catch (Exception e) {\n                            // ignore\n                        }\n                        break;\n                    case 'F':\n                        try {\n                            position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        } catch (Exception e) {\n                            // ignore\n                        }\n                        break;\n                    default:\n                        position.set(Position.PREFIX_IO + keyString, value);\n                }\n            }\n            continue;\n        }\n\n        if (key == 0x0) {\n            if (position != null) {\n                if (dateBuilder != null) {\n                    position.setTime(dateBuilder.getDate());\n                }\n                positions.add(position);\n            }\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            dateBuilder = new DateBuilder(new Date());\n        } else if (position != null) {\n            switch (key) {\n                case 0x11:\n                    value = (\"000000\" + value).substring(value.length());\n                    try {\n                        dateBuilder.setDateReverse(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4)));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x10:\n                    value = (\"00000000\" + value).substring(value.length());\n                    try {\n                        dateBuilder.setTime(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4, 6)),\n                                Integer.parseInt(value.substring(6)) * 10);\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0xA:\n                    position.setValid(true);\n                    try {\n                        position.setLatitude(Double.parseDouble(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0xB:\n                    position.setValid(true);\n                    try {\n                        position.setLongitude(Double.parseDouble(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0xC:\n                    try {\n                        position.setAltitude(Double.parseDouble(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0xD:\n                    try {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0xE:\n                    try {\n                        position.setCourse(Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0xF:\n                    try {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x12:\n                    try {\n                        position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x20:\n                    position.set(Position.KEY_ACCELERATION, value);\n                    break;\n                case 0x24:\n                    try {\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x81:\n                    try {\n                        position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x82:\n                    try {\n                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x104:\n                    try {\n                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x105:\n                    try {\n                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x10c:\n                    try {\n                        position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x10d:\n                    try {\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                case 0x111:\n                    try {\n                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                    break;\n                default:\n                    position.set(Position.PREFIX_IO + keyString, value);\n                    break;\n            }\n        }\n    }\n\n    if (position != null) {\n        if (!position.getValid()) {\n            getLastLocation(position, null);\n        }\n        if (dateBuilder != null) {\n            position.setTime(dateBuilder.getDate());\n        }\n        positions.add(position);\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}