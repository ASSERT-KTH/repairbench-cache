{
    "generation": "    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // Check if we are in a gap period (offset increases), where\n            // offsetAdjusted is typically the larger offset corresponding to the later time.\n            if (offsetLocal < offsetAdjusted) {\n                // Check if the calculated instant using the later offset\n                // would fall before the transition compared to the initial estimate.\n                // This happens if instantLocal is within the gap.\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // instantLocal is in the gap. Return the offset before the gap (offsetLocal)\n                    // to avoid calculating a time before the gap. The Javadoc examples\n                    // indicate preference for the later period, but this check prevents\n                    // inconsistent state if the calculated UTC falls before the transition.\n                    return offsetLocal;\n                }\n                // Otherwise (transitions are same), offsetAdjusted is suitable\n                // (this is handled by the final return).\n            } else {\n                // We are in an overlap period (offset decreases), where\n                // offsetLocal is typically the larger offset corresponding to the earlier time (DST).\n                // For overlaps, favour the earlier instant / DST offset.\n                // The earlier instant corresponds to the larger offset, which is offsetLocal.\n                return offsetLocal;\n            }\n        }\n        // If offsets are equal OR\n        // if in a gap and the transition check determined offsetAdjusted is suitable.\n        return offsetAdjusted;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}