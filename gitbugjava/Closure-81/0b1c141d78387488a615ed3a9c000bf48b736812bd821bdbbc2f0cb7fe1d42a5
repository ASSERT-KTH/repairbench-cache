{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        // Check if it's an unnamed function statement (not an expression), which is illegal.\n        // Rhino's parser itself should report this error, but we check here for robustness\n        // or in case this code path is reached under different configurations.\n        if (!functionNode.isExpressionClosure()) {\n          reportError(functionNode, RhinoErrorReporter.UNNAMED_FUNCTION_STATEMENT);\n          // Even with the error, proceed to create a node with an empty name\n          // to allow parsing to continue and potentially find more errors.\n        }\n        name = new Name();\n        name.setIdentifier(\"\"); // Synthesize a name node for the unnamed function\n        isUnnamedFunction = true;\n      }\n\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n\n      // If it's an unnamed function, copy source info from the function node\n      // to the synthesized name node.\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n\n      // Process parameters\n      Node paramsNode = newNode(Token.PARAM_LIST);\n      // The PARAM_LIST node needs source info. Let's use the function's left paren.\n      // The old code attached source info to a dummy LP node, which isn't quite right.\n      // PARAM_LIST corresponds to the parameter list itself.\n      paramsNode.setLineno(functionNode.getLineno()); // Use function line for now.\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n      paramsNode.setCharno(position2charno(lparenCharno));\n\n      for (AstNode param : functionNode.getParams()) {\n        paramsNode.addChildToBack(transform(param));\n      }\n      node.addChildToBack(paramsNode); // Add PARAM_LIST node\n\n      // Process body\n      Node bodyNode = transform(functionNode.getBody());\n      // Rhino parser ensures getBody() is a Block for FunctionNode.\n      // Transform should preserve this unless there's an error transforming the body.\n      if (bodyNode != null && bodyNode.isBlock()) {\n         parseDirectives(bodyNode); // Modifies bodyNode by removing directive children\n      } else {\n         // This case (null or non-block body for a FunctionNode) suggests an error\n         // during body transformation or an unexpected AST structure.\n         // Report an error or ensure subsequent passes handle it gracefully.\n         // For now, retain original behavior of adding whatever bodyNode is.\n         // Consider reporting an internal error if bodyNode is null.\n      }\n      node.addChildToBack(bodyNode);\n\n      return node;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}