{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException if an I/O error occurs\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // Keep track of the original number to skip\n        final long originalNumToSkip = numToSkip;\n\n        while (numToSkip > 0) {\n            long skipped = input.skip(numToSkip);\n            if (skipped > 0) {\n                // Some bytes were skipped, reduce the count\n                numToSkip -= skipped;\n            } else if (skipped == 0) {\n                // skip() returned 0, possibly because it insists on only skipping\n                // available bytes or it's at EOF. Fall back to read().\n                int b = input.read();\n                if (b == -1) {\n                    // Reached EOF prematurely\n                    break;\n                }\n                // Read one byte, so decrement the count\n                numToSkip--;\n            }\n            // A return value of < 0 is not specified by InputStream#skip,\n            // but if it happens, we interpret it as EOF.\n             else { // skipped < 0\n                 break;\n             }\n        }\n            \n        // Return the number of bytes actually skipped\n        return originalNumToSkip - numToSkip;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}