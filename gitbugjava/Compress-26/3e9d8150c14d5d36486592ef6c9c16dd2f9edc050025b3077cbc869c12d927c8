{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException if an I/O error occurs\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // Store the original number to skip, to calculate the total skipped at the end.\n        final long available = numToSkip;\n        \n        while (numToSkip > 0) {\n            long skipped = input.skip(numToSkip);\n            if (skipped > 0) {\n                // Some bytes were successfully skipped.\n                numToSkip -= skipped;\n            } else if (skipped == 0) {\n                // skip() returned 0. This may mean end-of-stream, or the stream\n                // is temporarily unable to skip (e.g., non-blocking stream).\n                // Attempt to read a single byte to progress.\n                int b = input.read();\n                if (b == -1) {\n                    // End of stream reached before skipping the full amount.\n                    break; \n                }\n                // Successfully read and thus skipped one byte.\n                numToSkip--; \n            }\n            // A negative return value from skip() is not expected by the InputStream contract,\n            // but if it happens, we loop again. Note that numToSkip is not reduced in this case.\n        }\n            \n        // Return the total number of bytes actually skipped.\n        return available - numToSkip;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}