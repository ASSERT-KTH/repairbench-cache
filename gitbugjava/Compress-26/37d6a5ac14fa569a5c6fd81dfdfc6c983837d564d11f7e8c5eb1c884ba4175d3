{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException if an I/O error occurs or the stream does not support seek\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // Keep track of the original number to skip.\n        // numToSkip will be decremented as bytes are skipped.\n        final long available = numToSkip; \n        while (numToSkip > 0) {\n            long skipped = input.skip(numToSkip);\n            if (skipped > 0) {\n                // If skip returns a positive number, decrement numToSkip\n                numToSkip -= skipped;\n            } else { // skipped returned 0\n                // InputStream#skip(long) guarantees that it will skip\n                // at least one byte unless the end of the stream has been reached\n                // or the argument is zero. If skip() returns 0, it means\n                // we should try reading a single byte to make progress or detect EOF.\n                int b = input.read();\n                if (b == -1) { // EOF reached\n                    break; // Cannot skip anymore, exit the loop\n                }\n                // Successfully read and thus skipped one byte\n                numToSkip--;\n                // Continue the loop to skip the remaining bytes\n            }\n        }\n            \n        // Return the total number of bytes skipped, which is the original amount\n        // minus the amount that couldn't be skipped.\n        return available - numToSkip;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}