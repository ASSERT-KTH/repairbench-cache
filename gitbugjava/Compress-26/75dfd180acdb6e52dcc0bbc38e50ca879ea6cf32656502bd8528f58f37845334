{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // Store the original value to calculate the total skipped bytes at the end.\n        final long originalNumToSkip = numToSkip;\n\n        while (numToSkip > 0) {\n            long skipped = input.skip(numToSkip);\n            // InputStream.skip documentation states it returns >= 0.\n            if (skipped > 0) {\n                // Successfully skipped some bytes\n                numToSkip -= skipped;\n            } else { // skipped == 0\n                // If skip() returned 0, it doesn't necessarily mean EOF.\n                // Try reading a single byte to make progress. See Commons IO IOUtils.\n                int b = input.read();\n                if (b == -1) {\n                    // Reached EOF - cannot skip further.\n                    break;\n                } else {\n                    // Successfully read/skipped one byte.\n                    numToSkip--;\n                }\n            }\n        }\n            \n        // Return the total number of bytes actually skipped.\n        return originalNumToSkip - numToSkip;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}