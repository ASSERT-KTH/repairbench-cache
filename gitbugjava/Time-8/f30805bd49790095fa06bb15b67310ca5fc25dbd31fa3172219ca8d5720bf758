{
    "generation": "    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The hours value must be in the range -23 to +23.\n     * The minutes value must be in the range -59 to +59.\n     * The following combinations of sign for the hour and minute are possible:\n     * <pre>\n     *  Hour    Minute    Example    Result\n     * \n     *  +ve     +ve       (2, 15)    +02:15\n     *  +ve     zero      (2, 0)     +02:00\n     *  +ve     -ve       (2, -15)   IllegalArgumentException\n     * \n     *  zero    +ve       (0, 15)    +00:15\n     *  zero    zero      (0, 0)     +00:00\n     *  zero    -ve       (0, -15)   -00:15\n     * \n     *  -ve     +ve       (-2, 15)   -02:15\n     *  -ve     zero      (-2, 0)    -02:00\n     *  -ve     -ve       (-2, -15)  -02:15\n     * </pre>\n     * Note that in versions before 2.3, the minutes had to be zero or positive.\n     * \n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        // Input validation\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        // Corrected minutes range check to allow negative minutes\n        if (minutesOffset < -59 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        // Check for invalid combination: positive hours and negative minutes\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n        }\n\n        // Handle UTC case early for efficiency\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n\n        // Calculate total offset in minutes, applying sign logic from documentation\n        int totalMinutesOffset = 0;\n        try {\n            // Use safe multiply for hours * 60\n            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n            if (hoursOffset < 0) {\n                // For negative hours, minutes component adds to the magnitude of the negative offset\n                // regardless of the minutes sign. Example: (-2, 15) -> -135 min; (-2, -15) -> -135 min\n                // This is achieved by subtracting the absolute value of minutes from the negative hoursInMinutes.\n                totalMinutesOffset = FieldUtils.safeSubtract(hoursInMinutes, Math.abs(minutesOffset));\n            } else {\n                // For positive or zero hours, minutes component adds algebraically.\n                // Example: (2, 15) -> 135 min; (0, 15) -> 15 min; (0, -15) -> -15 min\n                // Note: The case (+ve hours, -ve minutes) is disallowed by the check above.\n                totalMinutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n            }\n        } catch (ArithmeticException ex) {\n            // This catch is primarily for the safe arithmetic methods, although overflow\n            // is unlikely with the given input constraints for this intermediate calculation.\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n\n        // Convert total minutes offset to milliseconds\n        int offsetInMillis;\n        try {\n            // This multiplication is the main place where potential overflow could occur\n            // if constraints were different, hence the use of safeMultiply.\n            offsetInMillis = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n\n        // Return the DateTimeZone for the calculated millisecond offset\n        return forOffsetMillis(offsetInMillis);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}