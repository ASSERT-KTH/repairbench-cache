{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      RecordType constraintRecordType = constraintObj.toMaybeRecordType();\n      for (String prop : constraintRecordType.getOwnPropertyNames()) {\n        JSType propType = constraintRecordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          // If the property is not explicitly declared on this object type:\n          if (!hasProperty(prop)) {\n            // And it is missing from the object literal, define it as possibly undefined.\n            // This handles optional properties in the constraint.\n            JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n            defineInferredProperty(prop, typeToInfer, null);\n          }\n          // If the property exists on the object literal but is not explicitly\n          // declared (i.e., its type is inferred), we do not modify it here.\n          // Overwriting the inferred type with the constraint type could lead\n          // to loss of precision or mask type errors that should be reported\n          // by the type checker later when comparing the inferred type against\n          // the constraint type.\n        }\n      }\n    }\n    // TODO(lhuhn): Handle the case where the constraint is a Function type.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}