{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      RecordType constraintRecordType = constraintObj.toMaybeRecordType();\n      for (String prop : constraintRecordType.getOwnPropertyNames()) {\n        JSType constraintPropType = constraintRecordType.getPropertyType(prop);\n        // If the property is not declared and is missing from the object literal,\n        // infer it as optional from the constraint. This handles optional properties.\n        // Don't overwrite properties that are already present in the literal;\n        // let the type checker handle mismatches between the literal's inferred type\n        // and the constraint type (addresses Issue 700).\n        if (!hasProperty(prop) && !isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(constraintPropType);\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}