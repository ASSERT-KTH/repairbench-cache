{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        // Don't declare properties that are already declared.\n        // Also, don't try to infer properties from types that may not have\n        // them (like Unknown).\n        if (!isPropertyTypeDeclared(prop) &&\n            !propType.isUnknownType()) {\n          JSType typeToInfer = null;\n          if (!hasProperty(prop)) {\n            // If the property is not on the object, mark it as optional.\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          } else {\n             // If the property is on the object, union the inferred type\n             // with the type already there.\n             JSType existingType = getPropertyType(prop);\n             if (existingType == null) {\n                existingType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n             }\n             // TODO(nicksantos): This seems wrong. We should be taking\n             // the meet of the two types. Wait for kamidin to fix this.\n             typeToInfer = existingType.getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n\n    // TODO(nicksantos): Handle the case where the constraint object is a\n    // function prototype. We may need to make this function recursive later.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}