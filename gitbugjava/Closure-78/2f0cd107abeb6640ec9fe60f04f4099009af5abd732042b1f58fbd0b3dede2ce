{
    "generation": "  /**\n   * Try to fold arithmetic binary operators\n   */\n  private Node performArithmeticOp(int opType, Node left, Node right) {\n    // Unlike other operations, ADD operands are not always converted\n    // to Number.\n    if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false))) {\n      return null;\n    }\n\n    double result;\n\n    // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN\n    // to zero so this is a little akward here.\n\n    Double lValObj = NodeUtil.getNumberValue(left);\n    if (lValObj == null) {\n      return null;\n    }\n    Double rValObj = NodeUtil.getNumberValue(right);\n    if (rValObj == null) {\n      return null;\n    }\n\n    double lval = lValObj;\n    double rval = rValObj;\n\n    switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          // Don't report error, just fail to fold.\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          // Don't report error, just fail to fold.\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }\n\n    // TODO(johnlenz): consider removing the result length check.\n    // length of the left and right value plus 1 byte for the operator.\n    // Do not try to fold arithmetic operations that involve large numbers.\n    if (!Double.isNaN(result) && result != Double.POSITIVE_INFINITY\n        && result != Double.NEGATIVE_INFINITY &&\n        Math.abs(result) <= MAX_FOLD_NUMBER) {\n\n       // Fold if the result can be represented shorter than the original\n       // expression.\n      String sResult = String.valueOf(result);\n       if (sResult.length() <=\n           String.valueOf(lval).length() + String.valueOf(rval).length() + 1) {\n           Node newNumber = Node.newNumber(result);\n           return newNumber;\n       }\n    } else if (Double.isNaN(result)) {\n      // Fold NaN to 0/0. Our printers will print \"NaN\".\n      return NodeUtil.newDivide(Node.newNumber(0), Node.newNumber(0));\n    } else if (result == Double.POSITIVE_INFINITY) {\n       return NodeUtil.newDivide(Node.newNumber(1), Node.newNumber(0));\n    } else if (result == Double.NEGATIVE_INFINITY) {\n       return NodeUtil.newDivide(Node.newNumber(-1), Node.newNumber(0));\n    }\n\n\n    return null;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}