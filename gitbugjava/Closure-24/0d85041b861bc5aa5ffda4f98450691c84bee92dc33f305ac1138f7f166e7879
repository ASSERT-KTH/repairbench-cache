{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        // Parameters of the scope function produce a BAD_PARAMETERS error elsewhere,\n        // so just ignore them.\n        if (v.isParameter()) {\n          continue;\n        }\n\n        // We are only interested in variables declared in *this* scope.\n        // Variables declared in outer scopes (bleeding vars) are ignored.\n        // Bleeding functions should already be caught by BAD_PARAMETERS.\n        if (v.getScope() != scope) {\n             continue;\n        }\n\n        Node n = v.getNode(); // The NAME node of the variable declaration.\n        Node parent = n.getParent();\n        Node initialValue = v.getInitialValue(); // The RHS of the assignment, if any.\n\n        // Check if it's a valid alias declaration: var alias = qualified.name;\n        boolean isValidAlias = false;\n        if (parent.isVar() && initialValue != null && initialValue.isQualifiedName()) {\n          String name = n.getString();\n          // Make sure the qualified name is actually resolvable.\n          String qualifiedName = initialValue.getQualifiedName();\n\n          if (qualifiedName != null) {\n             // Record the alias. Use 'v' as the alias variable.\n             aliases.put(name, v);\n             transformation.addAlias(name, qualifiedName);\n             isValidAlias = true;\n          }\n        }\n\n        // If it wasn't a valid alias declared in this scope, report an error.\n        // This covers cases like:\n        // - var x; (initialValue == null)\n        // - var x = 10; (initialValue is not QualifiedName)\n        // - var x = foo(); (initialValue is not QualifiedName)\n        // - function f() {} (parent is FUNCTION, not VAR)\n        // - var x = goog['dom']; (initialValue is not QualifiedName)\n        // etc.\n        if (!isValidAlias) {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}