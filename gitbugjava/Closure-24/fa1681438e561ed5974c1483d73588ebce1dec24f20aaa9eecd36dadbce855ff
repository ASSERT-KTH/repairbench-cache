{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        // Ignore parameters and catch variables, they are not declarations within the scope body.\n        if (v.isParameter() || v.isCatch()) {\n            continue;\n        }\n        // Bleeding functions already get a BAD_PARAMETERS error, so just ignore.\n        // We only care about variables declared directly within this scope.\n\n        Node n = v.getNode(); // The NAME node associated with the Var.\n        // Node parent = n.getParent(); // We can use Var properties instead.\n\n        if (v.isVarDeclaration()) {\n            Node value = v.getInitialValue(); // Get the initializer value node\n            if (value != null && value.isQualifiedName()) {\n                // Valid alias: var name = qualified.name;\n                String name = v.getName();\n                aliases.put(name, v);\n\n                // We need the Var stored in aliases to be the *actual* aliased\n                // variable, not the alias itself. The original code looked up\n                // the aliased var, let's verify that's needed.\n                // Based on how aliases is used later (replaceWithAliases),\n                // aliases.put(name, v) seems correct: map alias name to the alias Var.\n                // transformation.addAlias maps alias name to qualified name string.\n                String qualifiedName = value.getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n            } else {\n                // Invalid var declaration: var name = non-qualified-name; or var name;\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n            }\n        } else if (v.isFunctionDeclaration()\n            || v.isLet()\n            || v.isConst()\n            || v.isClass()\n            || v.isEnum()) {\n            // These declarations are not allowed directly inside goog.scope\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n        }\n        // Else: Other kinds of Vars? Ignore them if they weren't filtered earlier.\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}