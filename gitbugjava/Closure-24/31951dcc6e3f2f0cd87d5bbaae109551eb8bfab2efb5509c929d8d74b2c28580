{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n\n        // Parameters of the scope function are not aliases.\n        // Bleeding functions are also not aliases.\n        // We don't need to report an error because the scope creator\n        // will report errors for parameters and bleeding functions.\n        if (parent == null || parent.isParamList() || v.isBleedingFunction()) {\n          continue;\n        }\n\n        // We are only interested in variables that are defined in the scope\n        // block. This excludes variables declared in inner scopes, like block\n        // scopes.\n        if (v.getScope() != scope) {\n            continue;\n        }\n\n        // Check if the variable is initialized to a qualified name.\n        boolean isVarAlias = parent.isVar() &&\n            n.hasChildren() &&\n            n.getFirstChild().isQualifiedName();\n\n        // Check if the variable is a function declaration.\n        boolean isFunctionAlias = parent.isFunction();\n\n\n        if (isVarAlias) {\n          // Handle aliased variables.\n          String name = n.getString();\n          Node initialValue = n.getFirstChild();\n          String qualifiedName = initialValue.getQualifiedName();\n\n          // Check for null qualified name, which indicates an issue.\n          if (qualifiedName == null) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            continue; // Skip adding this as an alias\n          }\n\n          Var aliasVar = scope.getVar(name);\n          // It should not be null, but check for safety.\n          if (aliasVar == null) {\n             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n             continue; // Skip adding this as an alias\n          }\n\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n\n        } else if (parent.isVar() || isFunctionAlias) {\n            // If it's a VAR declaration that's not a simple alias,\n            // or if it's a FUNCTION declaration,\n            // it's not allowed in goog.scope. Report it.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n        // Other variable types (like catch clauses) are ignored.\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}