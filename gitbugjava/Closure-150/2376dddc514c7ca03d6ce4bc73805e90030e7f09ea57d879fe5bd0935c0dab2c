{
    "generation": "import com.google.javascript.rhino.JSDocInfo;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.jscomp.NodeTraversal;\n\n// Assuming this method is part of a class like TypedScopeCreator or LocalScopeBuilder\n// which has access to 'scope' and a method 'declareNamespace'.\n\n    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table. Also handles property stub\n     * declarations via JSDoc on expression statements.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      // Skip the root node of the scope itself.\n      if (n == scope.getRootNode()) return;\n\n      // Handle the function parameters list (LP node is param list).\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      // Attach types for literal nodes (like number, string, boolean).\n      attachLiteralTypes(n);\n\n      // Handle stub declarations for properties defined using JSDoc on expressions,\n      // e.g., /** @type {Type} */ ns.prop; or /** @param ... */ ns.prop;\n      // The JSDoc is attached to the EXPR_RESULT node (parent).\n      // We trigger declaration when visiting the qualified name node (GETPROP).\n      if (parent != null && parent.isExprResult() && n.isGetProp()) {\n         // Use a different name for the local variable to avoid potential shadowing.\n         JSDocInfo PURELY_LOCAL_ANNOTATION exprJsDocInfo = parent.getJSDocInfo();\n         // Check if the JSDoc provides type information that implies a declaration.\n         // .hasType() is true for @type, @param, @return, @enum, @interface, @record, etc.\n         // This seems appropriate for declaring property stubs.\n         if (exprJsDocInfo != null && exprJsDocInfo.hasType()) {\n             // Found a stub like /** @type {foo} */ a.b.c; or /** @param ... */ a.b.c;\n             // Delegate to declareNamespace, passing the GETPROP node 'n'.\n             // It is assumed that declareNamespace will correctly find the JSDoc\n             // info (likely via NodeUtil.getBestJSDocInfo(n), which checks parents)\n             // and declare the property on the appropriate object type.\n             declareNamespace(t, n);\n             // Return because declareNamespace handles the declaration, and no further\n             // processing (like the switch statement below) is needed for this node.\n             return;\n         }\n      }\n\n      // Handle standard declarations within the local scope.\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // Function declaration statements (function funcName() {}) are handled\n          // when the name (funcName) is visited in the enclosing scope.\n          // Here, handle function expressions (e.g., assigned to vars, passed as args).\n          if (parent.getType() == Token.NAME) {\n            return; // It's a function declaration statement, skip.\n          }\n          // It's a function expression. Define it in the current scope.\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          // Define the variable introduced in a catch clause (catch (e) {}).\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          // Define variables declared with 'var'.\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}