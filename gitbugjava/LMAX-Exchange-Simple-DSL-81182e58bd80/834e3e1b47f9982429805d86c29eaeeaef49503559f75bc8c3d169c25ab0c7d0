{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            // Ensure consistency: use toLowerCase for all keys in argsByName, as lookup uses toLowerCase.\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    // Argument does not belong to this group instance.\n                    break;\n                }\n\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n                // If this DslArg has already received a value in this group instance,\n                // and it's not defined to accept multiple values (either multiple assignments or comma-separated),\n                // then this new occurrence of the argument is not for the current group instance.\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    break;\n                }\n\n                // arguments.pollFirst() is called after successfully processing the argument's value(s).\n\n                if (argument.value == null)\n                {\n                    checkValidValue(arg, null); // Check if null is allowed for this arg.\n                    argValues.add(null);\n                }\n                else if (arg.isAllowMultipleValues())\n                {\n                    // DslArg allows multiple values, so split the string by the separator.\n                    final String[] values = argument.value.split(Pattern.quote(arg.getMultiValueSeparator()));\n                    for (final String val : values)\n                    {\n                        final String trimmedValue = val.trim();\n                        checkValidValue(arg, trimmedValue); // Validate each individual value.\n                        argValues.add(trimmedValue);\n                    }\n                }\n                else\n                {\n                    // DslArg expects a single value, and argument.value is not null.\n                    checkValidValue(arg, argument.value);\n                    argValues.add(argument.value);\n                }\n                arguments.pollFirst(); // Consume the argument from the deque.\n            }\n\n            // Consolidate collected values for this group instance.\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}