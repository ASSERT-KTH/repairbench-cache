{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    boolean foundOne = false;\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            break;\n        }\n\n        final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n        {\n            break;\n        }\n\n        checkValidValue(arg, argument.value);\n        argValues.add(argument.value);\n        arguments.pollFirst();\n        foundOne = true;\n    }\n\n    // after consuming explicitly named group params, now handle multi-values with default separator attached in last explicitly named param (if allowed)\n    if (!foundOne)\n    {\n        // nothing more matched, finish\n    }\n    else\n    {\n        // find params in group that allow multiple values\n        for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n        {\n            if (dslArg.isAllowMultipleValues())\n            {\n                final List<String> existingValues = valuesByArg.get(dslArg);\n                if (existingValues != null && !existingValues.isEmpty())\n                {\n                    if (existingValues.size() == 1)\n                    {\n                        List<String> split = splitCommaSeparated(existingValues.get(0));\n                        // if split yields more than 1 element, replace existing with split\n                        if (split.size() > 1)\n                        {\n                            existingValues.clear();\n                            for (String s : split)\n                            {\n                                checkValidValue(dslArg, s);\n                                existingValues.add(s);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // multi values already, nothing to do\n                    }\n                }\n            }\n        }\n    }\n\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (final SimpleDslArg simpleDslArg : argsByName.values())\n    {\n        final SimpleDslParam param = processor.collect(simpleDslArg);\n        if (param.hasValue())\n        {\n            valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n        }\n    }\n\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n}\n\nprivate List<String> splitCommaSeparated(String s)\n{\n    List<String> result = new ArrayList<>();\n    for (String v : s.split(\",\"))\n    {\n        result.add(v.trim());\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}