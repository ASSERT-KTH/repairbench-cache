{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            // Processor specific to this instance of the group\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            // Consume the identity argument for this group instance\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            // Build a map of arguments belonging to this group for quick lookup\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                // Store lower-case for case-insensitive matching\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            // Consume other arguments belonging to this group instance\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    // Skip null placeholders potentially left by previous optional args\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    // Ambiguous argument (e.g., just a value) cannot belong to a named group argument.\n                    // Assume it marks the end of arguments for this group instance.\n                    break;\n                }\n\n                // Check if the argument name matches one of the args defined for this group\n                final SimpleDslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    // Argument name doesn't belong to this group definition.\n                    // Assume it marks the end of arguments for this group instance.\n                    break;\n                }\n\n                // Check if this argument can be added based on multiplicity rules *for this group instance*.\n                final List<String> existingValues = valuesByArg.get(arg); // Check processor's map\n                if (existingValues != null && !existingValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    // We already have a value for this arg within this group instance,\n                    // and it doesn't allow multiple values.\n                    // This argument must belong to the next group instance or be a different parameter outside the group.\n                    break;\n                }\n\n                // Use the processor to consume this argument.\n                // The processor will handle validation, splitting multi-values, and updating valuesByArg.\n                processor.consume(arg, arguments);\n            }\n\n            // Collect the final values for this group instance from the processor\n            // TODO: this whole thing here is a bit hacky! (Original comment retained)\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            // Ensure identity arg is included even if no 'other args' were consumed\n             final SimpleDslParam identityParam = processor.collect(groupArg.getIdentity());\n             if (identityParam.hasValue())\n             {\n                 valuesByName.put(identityParam.getName().toLowerCase(), identityParam.getValuesAsList());\n             }\n            // Collect other args processed\n            for (final SimpleDslArg simpleDslArg : groupArg.getOtherArgs())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            // Store the collected values for this group instance\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}