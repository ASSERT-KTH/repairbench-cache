{
    "generation": "final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\nfinal SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\nprocessor.consume(groupArg.getIdentity(), arguments);\n\nfinal Map<String, SimpleDslArg> argsByName = new HashMap<>();\nargsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\nfor (SimpleDslArg dslArg : groupArg.getOtherArgs())\n{\n    if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n    {\n        throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n    }\n}\n\nwhile (!arguments.isEmpty())\n{\n    final NameValuePair argument = arguments.peekFirst();\n    if (argument == NameValuePair.NULL)\n    {\n        arguments.pollFirst();\n        continue;\n    }\n\n    if (argument.name == null)\n    {\n        throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n    }\n\n    final DslArg arg = argsByName.get(argument.name.toLowerCase());\n    if (arg == null)\n    {\n        break;\n    }\n\n    final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n    if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n    {\n        break;\n    }\n\n    if (arg.isAllowMultipleValues()) {\n        for (String part : argument.value.split(\",\")) {\n            String trimmedPart = part.trim();\n            if (!trimmedPart.isEmpty()) {\n                checkValidValue(arg, trimmedPart);\n                argValues.add(trimmedPart);\n            }\n        }\n    } else {\n        checkValidValue(arg, argument.value);\n        argValues.add(argument.value);\n    }\n\n    arguments.pollFirst();\n}\n\nfinal Map<String, List<String>> valuesByName = new HashMap<>();\nfor (final SimpleDslArg simpleDslArg : argsByName.values())\n{\n    final SimpleDslParam param = processor.collect(simpleDslArg);\n    if (param.hasValue())\n    {\n        valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n    }\n}\n\nfinal DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\ndslArgs[0] = groupArg.getIdentity();\nSystem.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\ngroupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}