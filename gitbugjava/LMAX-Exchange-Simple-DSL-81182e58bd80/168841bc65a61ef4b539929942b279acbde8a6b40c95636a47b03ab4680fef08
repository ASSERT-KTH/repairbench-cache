{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // For each group, parse ONLY ONE group instance at a time.\n    // Process one block of parameters, i.e., consume for only this group instance.\n    while (true)\n    {\n        // Values for this group instance\n        final Map<DslArg, List<String>> groupInstanceValues = new HashMap<>();\n        // Parse identity (already consumed above at method entry)\n        groupInstanceValues.put(groupArg.getIdentity(), new ArrayList<>(valuesByArg.getOrDefault(groupArg.getIdentity(), Collections.emptyList())));\n\n        // For each parameter in group(other than identity)\n        boolean parsedAny = false;\n        for (SimpleDslArg arg : groupArg.getOtherArgs())\n        {\n            List<String> argValues = new ArrayList<>();\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                if (!arg.getName().equalsIgnoreCase(argument.name))\n                {\n                    break;\n                }\n\n                checkValidValue(arg, argument.value);\n                argValues.add(argument.value);\n                arguments.pollFirst();\n                parsedAny = true;\n                if (!arg.isAllowMultipleValues())\n                {\n                    break;\n                }\n            }\n            if (!argValues.isEmpty())\n            {\n                groupInstanceValues.put(arg, argValues);\n            }\n        }\n\n        // TODO: this whole thing here is a bit hacky!\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            if (groupInstanceValues.containsKey(simpleDslArg) && !groupInstanceValues.get(simpleDslArg).isEmpty())\n            {\n                valuesByName.put(simpleDslArg.getName().toLowerCase(), groupInstanceValues.get(simpleDslArg));\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n\n        // Now check if the next argument is another group identity, otherwise break loop\n        if (!arguments.isEmpty())\n        {\n            final NameValuePair nextArgument = arguments.peekFirst();\n            if (nextArgument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n            if (nextArgument.name != null && groupArg.getIdentity().getName().equalsIgnoreCase(nextArgument.name))\n            {\n                // Start a new instance; parser.consume(groupArg.getIdentity(), ...) must be called as in the original method\n                valuesByArg.clear();\n                processor.consume(groupArg.getIdentity(), arguments);\n                continue;\n            }\n        }\n        break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}