{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // --- Fixed loop to allow for zero-or-many group instantiations ---\n    while (true) {\n        // group instance valuesByArg for this iteration\n        final Map<DslArg, List<String>> thisGroupValues = new HashMap<>();\n        final SimpleArgumentProcessor thisProcessor = new SimpleArgumentProcessor(thisGroupValues, \"Did not supply a value for %s in group \" + groupArg.getName());\n        // Each group instance MUST start with the group identity\n        if (arguments.isEmpty())\n            break;\n        NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL) {\n            arguments.pollFirst();\n            continue;\n        }\n        if (argument.name == null) {\n            throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n        // Must match identity at this moment for valid group\n        if (!argument.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {\n            break;\n        }\n        thisProcessor.consume(groupArg.getIdentity(), arguments);\n\n        // For each possible group argument after identity\n        final Set<String> matchedAlready = new HashSet<>();\n        matchedAlready.add(groupArg.getIdentity().getName().toLowerCase());\n        while (!arguments.isEmpty()) {\n            argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL) {\n                arguments.pollFirst();\n                continue;\n            }\n            if (argument.name == null) {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null || matchedAlready.contains(argument.name.toLowerCase())) {\n                break;\n            }\n            final List<String> argValues = thisGroupValues.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) {\n                break;\n            }\n            checkValidValue(arg, argument.value);\n            argValues.addAll(splitValueOnSeparatorIfMultiple(arg, argument.value));\n            arguments.pollFirst();\n            matchedAlready.add(argument.name.toLowerCase());\n        }\n\n        // Now collect parameters for this group instance and add to groupsByArg\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            final SimpleDslParam param = thisProcessor.collect(simpleDslArg);\n            if (param.hasValue())\n            {\n                valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n    }\n}\n\n// Helper function to split values correctly for multiple-allowed args\nprivate List<String> splitValueOnSeparatorIfMultiple(DslArg arg, String value) {\n    if (arg.isAllowMultipleValues()) {\n        // comma-separated list (default separator)\n        String[] split = value.split(\",\");\n        List<String> list = new ArrayList<>();\n        for (String s : split) {\n            String trimmed = s.trim();\n            if (!trimmed.isEmpty())\n                list.add(trimmed);\n        }\n        return list;\n    } else {\n        return Collections.singletonList(value);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}