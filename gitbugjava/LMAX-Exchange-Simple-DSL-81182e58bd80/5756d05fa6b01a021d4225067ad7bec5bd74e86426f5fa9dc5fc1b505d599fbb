{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        final String name = dslArg.getName().toLowerCase();\n        if (argsByName.put(name, dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    final List<RepeatingParamValues> groupValues = new ArrayList<>();\n    Map<String, List<String>> currentGroupValues = new HashMap<>();\n    boolean inGroup = false;\n\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            if (!inGroup)\n            {\n                throw new IllegalArgumentException(\"Unexpected group separator\");\n            }\n            inGroup = false;\n            groupValues.add(new RepeatingParamValues(groupArg.getDslArgs(), currentGroupValues));\n            currentGroupValues = new HashMap<>();\n            continue;\n        }\n\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            if (inGroup)\n            {\n                throw new IllegalArgumentException(\"Unexpected argument '\" + argument.name + \"' in group\");\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        if (!inGroup)\n        {\n            inGroup = true;\n        }\n\n        if (!currentGroupValues.containsKey(arg.getName().toLowerCase()))\n        {\n            currentGroupValues.put(arg.getName().toLowerCase(), new ArrayList<>());\n        }\n\n        checkValidValue(arg, argument.value);\n        currentGroupValues.get(arg.getName().toLowerCase()).add(argument.value);\n        arguments.pollFirst();\n    }\n\n    if (inGroup)\n    {\n        groupValues.add(new RepeatingParamValues(groupArg.getDslArgs(), currentGroupValues));\n    }\n\n    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).addAll(groupValues);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}