{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    // consume main identifier argument\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // This holds the group values in a fixed order\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n\n    // Instead of accumulating over all the rest, we build ONE group, add, then repeat\n    while (true)\n    {\n        // For each group instance, collect argument values in this map\n        final Map<DslArg, List<String>> groupValuesByArg = new HashMap<>();\n        final SimpleArgumentProcessor groupProcessor = new SimpleArgumentProcessor(groupValuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n        // Transfer the already consumed identity argument\n        groupValuesByArg.put(groupArg.getIdentity(), valuesByArg.getOrDefault(groupArg.getIdentity(), Collections.emptyList()));\n\n        // Now, scan and collect values for optional (or required) group members, until:\n        // - we hit a new identity (which means a new group)\n        // - or end of argument queue\n        while (!arguments.isEmpty())\n        {\n            final NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n\n            if (argument.name == null)\n            {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n\n            // Check: is this a new group instance starting? (Identity key name)\n            if (argument.name.equalsIgnoreCase(groupArg.getIdentity().getName()))\n            {\n                break; // This starts the next group -- leave it in the queue.\n            }\n\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null)\n            {\n                break; // No matching arg for this group, leave for higher-level parser\n            }\n\n            // We only process group member args (not identity/name)\n            if (arg == groupArg.getIdentity())\n            {\n                break; // But in theory, handled above (identity triggers new group)\n            }\n\n            final List<String> argValues = groupValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n            {\n                break; // Only one value allowed for this arg\n            }\n\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n            arguments.pollFirst();\n        }\n\n        // Prepare valuesByName for instantiating the group values container\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            // Pull from local groupValuesByArg\n            List<String> values = groupValuesByArg.getOrDefault(simpleDslArg, Collections.emptyList());\n            if (!values.isEmpty())\n            {\n                valuesByName.put(simpleDslArg.getName().toLowerCase(), values);\n            }\n        }\n\n        // Only create a group if the identity arg has a value (it is required)\n        if (!valuesByName.containsKey(groupArg.getIdentity().getName().toLowerCase()))\n        {\n            break;\n        }\n\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n\n        // Check: is there a next group instance? (by seeing if next arg is the identity)\n        if (!arguments.isEmpty() && arguments.peekFirst().name != null\n                && arguments.peekFirst().name.equalsIgnoreCase(groupArg.getIdentity().getName()))\n        {\n            // Next identity present, need to reset valuesByArg and process next group\n            valuesByArg.clear();\n            // Now consume this identity arg\n            processor.consume(groupArg.getIdentity(), arguments);\n            // Update valuesByArg for the next group (refresh with newly parsed identity value)\n            valuesByArg.put(groupArg.getIdentity(), processor.collect(groupArg.getIdentity()).getValuesAsList());\n            continue;\n        }\n        break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}