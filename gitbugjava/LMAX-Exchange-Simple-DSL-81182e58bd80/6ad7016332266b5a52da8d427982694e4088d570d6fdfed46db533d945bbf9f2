{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(\n        valuesByArg,\n        \"Did not supply a value for %s in group \" + groupArg.getName()\n    );\n\n    // first consume the identity of the group\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    // build a lookup of all allowed args in this group (identity + otherArgs)\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(),\n                   groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        String key = dslArg.getName().toLowerCase();\n        if (argsByName.put(key, dslArg) != null)\n        {\n            throw new IllegalArgumentException(\n                \"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName()\n            );\n        }\n    }\n\n    // now consume any following name\u2010value pairs that belong to this group\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\n                \"Unexpected ambiguous argument \" + argument.originalValue\n            );\n        }\n\n        String lower = argument.name.toLowerCase();\n        final DslArg arg = argsByName.get(lower);\n        if (arg == null)\n        {\n            // not part of this group\n            break;\n        }\n\n        // start collecting values for this arg\n        final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        // if we've already seen it once and it doesn't allow multiple, stop\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n        {\n            break;\n        }\n\n        // split on the default separator (comma) if this arg allows multiple values\n        if (arg.isAllowMultipleValues())\n        {\n            String[] parts = argument.value.split(\",\");\n            for (String part : parts)\n            {\n                String v = part.trim();\n                checkValidValue(arg, v);\n                argValues.add(v);\n            }\n        }\n        else\n        {\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n        }\n\n        arguments.pollFirst();\n    }\n\n    // now collect into a simple name\u2192values map for the final RepeatingParamValues\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (SimpleDslArg simple : argsByName.values())\n    {\n        SimpleDslParam param = processor.collect(simple);\n        if (param.hasValue())\n        {\n            valuesByName.put(param.getName().toLowerCase(),\n                             param.getValuesAsList());\n        }\n    }\n\n    // build the array of args and stash it in groupsByArg\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n    groupsByArg\n        .computeIfAbsent(groupArg, k -> new ArrayList<>())\n        .add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}