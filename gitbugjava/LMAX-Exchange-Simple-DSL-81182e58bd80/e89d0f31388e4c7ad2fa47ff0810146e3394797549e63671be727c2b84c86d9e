{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                final SimpleDslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    // Argument does not belong to this group, so stop consuming for this group instance.\n                    break;\n                }\n\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n\n                if (!arg.isAllowMultipleValues())\n                {\n                    // Argument is single-value. If we already have a value, this new one might be for the next group instance.\n                    if (!argValues.isEmpty())\n                    {\n                        break;\n                    }\n                    checkValidValue(arg, argument.value);\n                    argValues.add(argument.value);\n                }\n                else\n                {\n                    // Argument allows multiple values. The input string (argument.value)\n                    // itself might be a composite of multiple values (e.g., \"v1,v2,v3\").\n                    // These need to be split, trimmed, and validated individually.\n                    if (argument.value == null)\n                    {\n                        // Handle explicit null value, e.g., if input was \"param:\"\n                        checkValidValue(arg, null);\n                        argValues.add(null);\n                    }\n                    else\n                    {\n                        final String[] splitValues = argument.value.split(java.util.regex.Pattern.quote(arg.getMultipleValueSeparator()));\n                        for (final String sv : splitValues)\n                        {\n                            final String trimmedValue = sv.trim();\n                            checkValidValue(arg, trimmedValue);\n                            argValues.add(trimmedValue);\n                        }\n                    }\n                }\n                arguments.pollFirst();\n            }\n\n            // Consolidate collected values into the final format for this group instance.\n            final Map<String, List<String>> valuesByNameFinal = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByNameFinal.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            // Assuming 'groupsByArg' is a field of the class DslParamsParser, accessible here.\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByNameFinal));\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}