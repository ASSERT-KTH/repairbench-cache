{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            // valuesByArg is specific to this instance of the repeating group\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            // A processor specific to this instance, using the instance's valuesByArg map\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            // Consume the identity argument for this group instance\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            // Build a map of all possible args within this group type for quick lookup\n            // Use lowercase names for case-insensitive matching.\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            // Consume subsequent arguments belonging to this specific group instance\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst(); // Skip null markers\n                    continue;\n                }\n\n                // An argument must have a name to be part of a group (unless it's the identity, handled above)\n                if (argument.name == null)\n                {\n                    // Ambiguous arguments are not allowed within the context of a group's subsequent parameters\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue + \" within group \" + groupArg.getName());\n                }\n\n                // Find the DslArg definition corresponding to the current argument's name (case-insensitive)\n                final SimpleDslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    // This argument's name doesn't match any parameter defined within this group.\n                    // Therefore, it doesn't belong to the current group instance, which must now be complete.\n                    break;\n                }\n\n                // Check if this DslArg already has a value *in this instance*\n                // and if it's allowed to have multiple values according to its definition.\n                final List<String> existingValues = valuesByArg.get(arg);\n                if (existingValues != null && !existingValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    // We've encountered an argument (e.g., \"port: 8080\") for a DslArg (\"port\")\n                    // that already has a value assigned in this group instance, but the DslArg\n                    // definition does not permit multiple values. This signifies the end\n                    // of the current group instance, and the current argument likely belongs\n                    // to the next group instance or is a global parameter.\n                    break;\n                }\n\n                // Use the processor to consume the argument from the deque.\n                // The processor handles:\n                // 1. Checking if the argument value is allowed (based on DslArg constraints).\n                // 2. Splitting the value string into multiple values if arg.isAllowMultipleValues() is true, using arg.getSeparator().\n                // 3. Adding the resulting value(s) to the valuesByArg map for this instance.\n                // 4. Removing the consumed argument from the deque (polling).\n                // It will throw exceptions for invalid values or if multiple arguments are provided\n                // for a DslArg where isAllowMultipleValues is false (e.g., two separate \"port: x\" lines for the same group instance).\n                processor.consume(arg, arguments);\n            }\n\n            // Collect all the processed values for this group instance from the processor's map.\n            // We iterate over all args defined for the group to ensure required args are checked later if missing.\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                // Use the same processor instance that collected the values for this group instance.\n                // The collect method retrieves the values from the internal valuesByArg map.\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    // Store values using lowercase name for consistency, matching how they were looked up.\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            // Store the collected parameters for this completed group instance.\n            // groupsByArg is the main map holding results for all instances of this RepeatingArgGroup type.\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}