{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments) {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg,\n                    \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity()); // Store identity name in lower case\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs()) {\n                String key = dslArg.getName().toLowerCase();\n                if (argsByName.put(key, dslArg) != null) {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            while (!arguments.isEmpty()) {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL) {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null) {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                final DslArg arg = argsByName.get(argument.name.toLowerCase()); // Lookup is case-insensitive\n                if (arg == null) {\n                    break;\n                }\n\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>()); // Get list for arg\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) {\n                    break;\n                }\n\n                checkValidValue(arg, argument.value);\n                \n                // Split value into multiple if allowed\n                String value = argument.value;\n                if (arg.isAllowMultipleValues()) {\n                    String[] parts = value.split(\"\\\\s*,\\\\s*\");\n                    for (String part : parts) {\n                        argValues.add(part.trim());\n                    }\n                } else {\n                    argValues.add(value);\n                }\n                arguments.pollFirst(); // Remove processed argument\n            }\n\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values()) {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue()) {\n                    valuesByName.put(simpleDslArg.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(\n                    new RepeatingParamValues(dslArgs, valuesByName));\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}