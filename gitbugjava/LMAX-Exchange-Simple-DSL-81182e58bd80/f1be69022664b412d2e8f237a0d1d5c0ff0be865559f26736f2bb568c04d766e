{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    boolean foundAny = false;\n    do {\n        foundAny = false;\n        Map<DslArg, List<String>> currentValuesByArg = new HashMap<>();\n        // Add the identity value from processor-consumed parameter\n        for (Map.Entry<DslArg, List<String>> entry : valuesByArg.entrySet()) {\n            currentValuesByArg.put(entry.getKey(), new ArrayList<>(entry.getValue()));\n        }\n        // Process parameters in the group until next group appears or input ends\n        while (!arguments.isEmpty()) {\n            final NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n            if (argument.name == null)\n            {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n            // New subgroup start? If so, break this repetition\n            if (argument.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {\n                break;\n            }\n\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null)\n            {\n                break;\n            }\n\n            final List<String> argValues = currentValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n            {\n                break;\n            }\n\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n            arguments.pollFirst();\n            foundAny = true;\n        }\n\n        // collect values and store into groupsByArg\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            SimpleDslParam param;\n            if (simpleDslArg.equals(groupArg.getIdentity())) {\n                // For the identity, use the value initially consumed by processor\n                param = processor.collect(simpleDslArg);\n            } else {\n                List<String> argVals = currentValuesByArg.getOrDefault(simpleDslArg, Collections.emptyList());\n                param = new SimpleDslParam(simpleDslArg, argVals);\n            }\n            if (param.hasValue())\n            {\n                valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n\n        // If the next argument is identity, start a new group\n        if (!arguments.isEmpty()) {\n            final NameValuePair nextArg = arguments.peekFirst();\n            if (nextArg != null && nextArg.name != null && nextArg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {\n                // Prepare for next repetition\n                processor.consume(groupArg.getIdentity(), arguments);\n                valuesByArg.clear();\n                foundAny = true; // will force another loop\n            }\n        }\n    } while (foundAny);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}