{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor =\n        new SimpleArgumentProcessor(valuesByArg,\n            \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    // first consume the group\u2010identity (e.g. \"group: Joe\")\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    // build a quick lookup of all args valid in this group\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        String key = dslArg.getName().toLowerCase();\n        if (argsByName.put(key, dslArg) != null)\n        {\n            throw new IllegalArgumentException(\n                \"Duplicate parameter '\" + dslArg.getName() +\n                \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // now consume any following args that belong to this group\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\n                \"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        final SimpleDslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            // this argument belongs to the next group or to a top\u2010level param\n            break;\n        }\n\n        final List<String> argValues =\n            valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        // if we've already seen this param once and it doesn't allow multiples, stop\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n        {\n            break;\n        }\n\n        // split on comma for multi\u2010valued params\n        if (arg.isAllowMultipleValues())\n        {\n            for (String part : argument.value.split(\"\\\\s*,\\\\s*\"))\n            {\n                checkValidValue(arg, part);\n                argValues.add(part);\n            }\n        }\n        else\n        {\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n        }\n        arguments.pollFirst();\n    }\n\n    // collect into the form the rest of the parser expects\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (SimpleDslArg simpleDslArg : argsByName.values())\n    {\n        SimpleDslParam param = processor.collect(simpleDslArg);\n        if (param.hasValue())\n        {\n            valuesByName.put(\n                param.getName().toLowerCase(),\n                param.getValuesAsList());\n        }\n    }\n\n    // register the completed group\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(\n        groupArg.getOtherArgs(), 0, dslArgs, 1,\n        groupArg.getOtherArgs().length);\n\n    groupsByArg\n        .computeIfAbsent(groupArg, k -> new ArrayList<>())\n        .add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}