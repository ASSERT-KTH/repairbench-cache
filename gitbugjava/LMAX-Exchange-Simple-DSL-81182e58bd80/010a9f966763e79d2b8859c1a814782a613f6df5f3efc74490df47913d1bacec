{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                // Retrieve the DslArg object corresponding to the current argument name.\n                // The map argsByName stores SimpleDslArg, so 'arg' should be of this type.\n                final SimpleDslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    // Argument name does not match any known argument for this group.\n                    // So, it must belong to the next top-level parameter or a new group instance.\n                    break;\n                }\n\n                final List<String> argValuesList = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n                \n                // If this argument (could be the identity arg or an other arg) has already been provided\n                // for this group instance and it does not allow multiple values,\n                // then this new occurrence signals the end of this group's parameters for this instance.\n                // For an identity argument (which typically doesn't allow multiple values for the same instance),\n                // seeing it again means we're at the start of the next group.\n                if (!argValuesList.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    break;\n                }\n\n                String rawValue = argument.value;\n\n                // If the argument allows multiple values, has a defined split regex, and the raw value is not null,\n                // split the raw value into parts. Otherwise, treat the raw value as a single value.\n                if (arg.isAllowMultipleValues() && arg.getSplitRegex() != null && rawValue != null) {\n                    String[] splitValues = rawValue.trim().split(arg.getSplitRegex());\n                    for (String sv : splitValues) {\n                        String trimmedSv = sv.trim();\n                        // Validate each individual part before adding it.\n                        checkValidValue(arg, trimmedSv);\n                        argValuesList.add(trimmedSv);\n                    }\n                } else {\n                    // Validate the raw value (which might be null for optional args or flags).\n                    checkValidValue(arg, rawValue);\n                    argValuesList.add(rawValue);\n                }\n                \n                arguments.pollFirst(); // Consume the argument from the deque\n            }\n\n            // TODO: this whole thing here is a bit hacky!\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}