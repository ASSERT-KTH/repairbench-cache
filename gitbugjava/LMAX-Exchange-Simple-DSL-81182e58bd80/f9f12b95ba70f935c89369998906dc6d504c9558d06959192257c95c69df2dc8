{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    // Holds the raw values encountered for each argument in this group\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n\n    // We still use the processor to pick up the required identity value\n    final SimpleArgumentProcessor processor =\n        new SimpleArgumentProcessor(valuesByArg,\n            \"Did not supply a value for %s in group \" + groupArg.getName());\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    // Build a quick lookup from lower\u2011cased name \u2192 arg\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        String key = dslArg.getName().toLowerCase();\n        if (argsByName.put(key, dslArg) != null)\n        {\n            throw new IllegalArgumentException(\n                \"Duplicate parameter '\" + dslArg.getName() +\n                \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // Now consume any further args that belong to this group\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\n                \"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        // see if this name maps to one of our group\u2010args\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            break;\n        }\n\n        // if it's not multi\u2010valued and we've already seen it, stop\n        final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n        {\n            break;\n        }\n\n        // split on commas if we're allowed multiple values\n        if (arg.isAllowMultipleValues())\n        {\n            for (String part : argument.value.split(\",\"))\n            {\n                String trimmed = part.trim();\n                checkValidValue(arg, trimmed);\n                argValues.add(trimmed);\n            }\n        }\n        else\n        {\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n        }\n\n        arguments.pollFirst();\n    }\n\n    // Build the final name\u2192values map for this group instance\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (Map.Entry<DslArg, List<String>> entry : valuesByArg.entrySet())\n    {\n        DslArg dslArg = entry.getKey();\n        List<String> raw = entry.getValue();\n        if (raw.isEmpty())\n        {\n            continue;\n        }\n        valuesByName.put(\n            dslArg.getName().toLowerCase(),\n            new ArrayList<>(raw));\n    }\n\n    // Create the DslArg[] (identity first, then the other args)\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n\n    // And finally record this one group\u2010instance\n    groupsByArg\n        .computeIfAbsent(groupArg, k -> new ArrayList<>())\n        .add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}