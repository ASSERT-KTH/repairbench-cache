{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            // Add identity arg to argsByName; used by the simpleArg == groupArg.getIdentity() check and the final collection loop.\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                // Store other args by lowercase name.\n                // This also catches if an otherArg has the same name as the identity (if identity added first),\n                // or duplicate otherArg names.\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst(); // Current NameValuePair from the input deque\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                // simpleArg is the DslArg definition from this group's spec (identity or otherArgs)\n                // that corresponds to the current argument.name.\n                final SimpleDslArg simpleArg = argsByName.get(argument.name.toLowerCase());\n\n                // If argument.name does not match any arg defined for this group (i.e., simpleArg is null),\n                // OR if it matches the group's identity argument (signaling the end of the current group's optional parameters\n                // and potentially the start of a new instance of this repeating group or a different top-level argument).\n                if (simpleArg == null || simpleArg == groupArg.getIdentity())\n                {\n                    break; // Stop processing \"other args\" for the current group instance.\n                }\n\n                // At this point, simpleArg is one of the \"otherArgs\" of this group.\n                // Check if this \"other arg\" has already received a value within this group instance\n                // and if it does not allow multiple values.\n                final List<String> existingValues = valuesByArg.get(simpleArg);\n                if (existingValues != null && !existingValues.isEmpty() && !simpleArg.isAllowMultipleValues())\n                {\n                    // This \"other arg\" already has a value, and it's single-value.\n                    // Break and leave 'argument' in the deque for the main parser loop to handle.\n                    break;\n                }\n\n                // Consume the 'argument' (NameValuePair) using the processor for the resolved 'simpleArg'.\n                // The processor will handle:\n                // - Value splitting if simpleArg.isAllowMultipleValues() is true.\n                // - Validation of the value(s).\n                // - Adding the value(s) to the `valuesByArg` map (associated with simpleArg).\n                // - Polling 'argument' from the `arguments` deque.\n                processor.consume(simpleArg, arguments);\n            }\n\n            // TODO: this whole thing here is a bit hacky!\n            // Collect all consumed values (identity and other args) for this group instance.\n            // Values are in `valuesByArg`, correctly split by processor.consume if applicable.\n            // This section translates `Map<DslArg, List<String>>` (valuesByArg)\n            // into `Map<String, List<String>> valuesByName`.\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            // argsByName.values() contains all SimpleDslArgs relevant to this group (identity + otherArgs).\n            for (final SimpleDslArg currentSimpleDslArg : argsByName.values())\n            {\n                // processor.collect retrieves list of values from valuesByArg.get(currentSimpleDslArg)\n                // and wraps it in a SimpleDslParam object.\n                final SimpleDslParam param = processor.collect(currentSimpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n                // If an optional arg was not provided, param.hasValue() is false, so it's not added to valuesByName.\n                // If a required arg was missing, processor.collect would have thrown an exception (unless it's an\n                // optional arg within the group or the identity which is handled by the first processor.consume call).\n            }\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}