{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair currentNvp = arguments.peekFirst();\n                if (currentNvp == NameValuePair.NULL)\n                {\n                    arguments.pollFirst(); // Consume NULL\n                    continue;\n                }\n\n                if (currentNvp.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + currentNvp.originalValue);\n                }\n\n                final DslArg dslArgDefinition = argsByName.get(currentNvp.name.toLowerCase());\n\n                if (dslArgDefinition == null) // Argument not part of this group definition\n                {\n                    break;\n                }\n\n                if (dslArgDefinition == groupArg.getIdentity()) // Start of a new group instance\n                {\n                    break;\n                }\n\n                // dslArgDefinition is one of groupArg.getOtherArgs()\n                final List<String> collectedValuesForDslArg = valuesByArg.computeIfAbsent(dslArgDefinition, k -> new ArrayList<>());\n\n                if (!collectedValuesForDslArg.isEmpty() && !dslArgDefinition.isAllowMultipleValues())\n                {\n                    // This argument (which is not the identity) already has a value and doesn't allow multiple.\n                    // e.g. \"item: x\" followed by \"item: y\" where item is not multi-valued.\n                    break;\n                }\n\n                arguments.pollFirst(); // Consume the argument from the queue\n\n                final String rawValue = currentNvp.value;\n\n                if (dslArgDefinition.isAllowMultipleValues())\n                {\n                    if (rawValue != null)\n                    {\n                        String separator = dslArgDefinition.getMultipleValueSeparator();\n                        // Quote separator in case it's a regex special character\n                        String[] splitValues = rawValue.split(java.util.regex.Pattern.quote(separator));\n                        for (String sv : splitValues)\n                        {\n                            String trimmedVal = sv.trim();\n                            checkValidValue(dslArgDefinition, trimmedVal); // Validate each individual part\n                            collectedValuesForDslArg.add(trimmedVal); // Add trimmed part\n                        }\n                    }\n                    else // rawValue is null (e.g., \"param:\")\n                    {\n                        checkValidValue(dslArgDefinition, null); // Validate null if necessary\n                        collectedValuesForDslArg.add(null); // Store null as one of the values\n                    }\n                }\n                else // dslArgDefinition does not allow multiple values from a single string entry\n                {\n                    checkValidValue(dslArgDefinition, rawValue);\n                    collectedValuesForDslArg.add(rawValue); // Add the raw value as is\n                }\n            }\n\n            // TODO: this whole thing here is a bit hacky!\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}