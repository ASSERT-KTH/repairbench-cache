{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // The bug: Only one set of group values is being \"grouped together\" per call,\n    // so we should loop, and for each set of group arguments, create one RepeatingParamValues,\n    // then add more, for the next match. So, as long as we can consume the identity argument,\n    // repeat the process.\n\n    while (true)\n    {\n        // Start a new group if identity parameter is present at this position in args\n        if (arguments.isEmpty())\n        {\n            break;\n        }\n\n        // Build for this group\n        final Map<DslArg, List<String>> groupValuesByArg = new HashMap<>();\n        final SimpleArgumentProcessor groupProcessor = new SimpleArgumentProcessor(groupValuesByArg,\n                \"Did not supply a value for %s in group \" + groupArg.getName());\n\n        // Only consume identity parameter, if present\n        if (!processor.tryConsumeIdentity(groupArg.getIdentity(), arguments))\n        {\n            break;\n        }\n\n        // Copy consumed value for group identity from valuesByArg to groupValuesByArg\n        List<String> identityVals = valuesByArg.get(groupArg.getIdentity());\n        if (identityVals != null)\n        {\n            groupValuesByArg.put(groupArg.getIdentity(), new ArrayList<>(identityVals));\n            valuesByArg.remove(groupArg.getIdentity());\n        }\n\n        // For all remaining arguments belonging to this group: match only until new group, or non-group param\n        while (!arguments.isEmpty())\n        {\n            final NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n\n            if (argument.name == null)\n            {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null || arg == groupArg.getIdentity())\n            {\n                break;\n            }\n\n            final List<String> argValues = groupValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n            {\n                break;\n            }\n\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n            arguments.pollFirst();\n        }\n\n        // Build SimpleDslArgs for this group\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            final SimpleDslParam param = groupProcessor.collectFromMap(simpleDslArg, groupValuesByArg);\n            if (param.hasValue())\n            {\n                valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}