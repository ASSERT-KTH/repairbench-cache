{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            // A list to accumulate all RepeatingParamValues instances found for this groupArg definition.\n            final List<RepeatingParamValues> allGroupInstances = new ArrayList<>();\n\n            // Outer loop to find and process multiple instances of the repeating group\n            while (true) {\n                // Check if the next argument in the deque is the identity of this repeating group.\n                // If not, we have processed all instances of this repeating group from the current stream.\n                if (arguments.isEmpty() || !groupArg.getIdentity().getName().equalsIgnoreCase(arguments.peekFirst().name)) {\n                    break; // No more identity arguments for this group in the current stream.\n                }\n\n                // --- Start processing for a single group instance ---\n                final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n                final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n                // Consume the identity argument for the current instance (e.g., \"group: Joe\")\n                // This will take the argument from the deque.\n                processor.consume(groupArg.getIdentity(), arguments);\n\n                final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n                argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n                for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n                {\n                    if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                    {\n                        throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                    }\n                }\n\n                // Inner loop to consume other arguments belonging to this specific group instance (e.g., \"value: 1, 2\")\n                while (!arguments.isEmpty())\n                {\n                    final NameValuePair argument = arguments.peekFirst();\n                    if (argument == NameValuePair.NULL)\n                    {\n                        arguments.pollFirst();\n                        continue;\n                    }\n\n                    if (argument.name == null)\n                    {\n                        throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                    }\n\n                    // If the next argument is the identity of a *new* instance of this same repeating group,\n                    // then the current instance is complete. Break the inner loop.\n                    if (groupArg.getIdentity().getName().equalsIgnoreCase(argument.name)) {\n                        break;\n                    }\n\n                    final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                    if (arg == null)\n                    {\n                        // The argument's name does not match any arguments defined for this group.\n                        // This implies it's either a top-level argument or belongs to another group type.\n                        // Stop consuming for the current group instance.\n                        break;\n                    }\n\n                    final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n                    // If the argument doesn't allow multiple values and already has one,\n                    // it means we've finished consuming values for this specific argument within the current group instance.\n                    // This implies the current group instance is done with its arguments.\n                    if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                    {\n                        break;\n                    }\n\n                    checkValidValue(arg, argument.value);\n                    argValues.add(argument.value);\n                    arguments.pollFirst(); // Remove the consumed argument from the deque\n                }\n\n                // TODO: this whole thing here is a bit hacky!\n                // Collect final values for this specific group instance\n                final Map<String, List<String>> valuesByName = new HashMap<>();\n                for (final SimpleDslArg simpleDslArg : argsByName.values())\n                {\n                    final SimpleDslParam param = processor.collect(simpleDslArg);\n                    if (param.hasValue())\n                    {\n                        valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                    }\n                }\n\n                final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n                dslArgs[0] = groupArg.getIdentity();\n                System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n                \n                // Add the current group instance's parsed values to the list of all collected instances.\n                allGroupInstances.add(new RepeatingParamValues(dslArgs, valuesByName));\n                // --- End processing for a single group instance ---\n            }\n\n            // After processing all instances in the arguments deque, add them to the global map.\n            // This ensures all instances are collected for the same RepeatingArgGroup definition.\n            if (!allGroupInstances.isEmpty()) {\n                groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).addAll(allGroupInstances);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}