{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    boolean groupStarted = true;\n    while (groupStarted)\n    {\n        groupStarted = false;\n\n        final Map<DslArg, List<String>> groupValuesByArg = new HashMap<>();\n        // Consume group identity\n        processor.consume(groupArg.getIdentity(), arguments);\n        final NameValuePair firstArg = (arguments.isEmpty() ? null : arguments.peekFirst());\n        if (firstArg != null && firstArg != NameValuePair.NULL && firstArg.name != null &&\n            groupArg.getIdentity().getName().equalsIgnoreCase(firstArg.name))\n        {\n            // Group identity value already added\n            groupStarted = true;\n            arguments.pollFirst();\n            groupValuesByArg.put(groupArg.getIdentity(), valuesByArg.get(groupArg.getIdentity()));\n        }\n        else if (!valuesByArg.containsKey(groupArg.getIdentity()))\n        {\n            break;\n        }\n        else\n        {\n            groupStarted = true;\n            groupValuesByArg.put(groupArg.getIdentity(), valuesByArg.get(groupArg.getIdentity()));\n        }\n\n        while (!arguments.isEmpty())\n        {\n            final NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n\n            if (argument.name == null)\n            {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n\n            // If it's another instance of the group identity parameter, break to allow a new group to be constructed\n            if (argument.name.equalsIgnoreCase(groupArg.getIdentity().getName()))\n            {\n                break;\n            }\n\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null)\n            {\n                break;\n            }\n            if (arg == groupArg.getIdentity())\n            {\n                break;\n            }\n            final List<String> argValues = groupValuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n            {\n                break;\n            }\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n            arguments.pollFirst();\n        }\n\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            final DslArg k = simpleDslArg;\n            List<String> vals = groupValuesByArg.get(k);\n            if (vals == null)\n            {\n                vals = Collections.emptyList();\n            }\n            if (!vals.isEmpty() || simpleDslArg == groupArg.getIdentity())\n            {\n                valuesByName.put(simpleDslArg.getName().toLowerCase(), vals);\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n\n        valuesByArg.clear();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}