{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments) {\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n    \n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    // Use lowercase key for identity to match with the other parameter lookups\n    String identityLower = groupArg.getIdentity().getName().toLowerCase();\n    argsByName.put(identityLower, groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs()) {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null) {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    while (!arguments.isEmpty()) {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL) {\n            arguments.pollFirst();\n            continue;\n        }\n\n        if (argument.name == null) {\n            throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n        \n        final String lowerCaseName = argument.name.toLowerCase();\n        final DslArg arg = argsByName.get(lowerCaseName);\n        if (arg == null || arg == groupArg.getIdentity()) {\n            break;\n        }\n\n        final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) {\n            break;\n        }\n\n        String valueStr = argument.value != null ? argument.value.trim() : \"\";\n        if (arg.isAllowMultipleValues()) {\n            String[] parts = valueStr.split(\"\\\\s*,\\\\s*\");\n            for (String part : parts) {\n                part = part.trim();\n                if (part.isEmpty()) continue;\n                checkValidValue(arg, part);\n                argValues.add(part);\n            }\n        } else {\n            checkValidValue(arg, valueStr);\n            argValues.add(valueStr);\n        }\n\n        arguments.pollFirst();\n    }\n\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (SimpleDslArg simpleDslArg : argsByName.values()) {\n        List<String> values = valuesByArg.get(simpleDslArg);\n        if (values != null && !values.isEmpty()) {\n            valuesByName.put(simpleDslArg.getName().toLowerCase(), values);\n        }\n    }\n\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}