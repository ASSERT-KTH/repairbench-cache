{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor =\n        new SimpleArgumentProcessor(valuesByArg,\n            \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    // first consume the identity value (\"group: Joe\", \"group: Jenny\", etc)\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    // build a lookup of all args in the group by name (lower\u2010cased)\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        String key = dslArg.getName().toLowerCase();\n        if (argsByName.put(key, dslArg) != null)\n        {\n            throw new IllegalArgumentException(\n                \"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // now consume any further parameters that belong to this same group\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\n                \"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            // this argument belongs to the next group or top\u2010level, so stop here\n            break;\n        }\n\n        final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        // if we've already got a value for a non\u2010multi\u2010valued arg, stop consuming\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n        {\n            break;\n        }\n\n        // split on the default separator (comma) if this arg allows multiple values\n        if (arg.isAllowMultipleValues())\n        {\n            String[] parts = argument.value.split(\",\");\n            for (String part : parts)\n            {\n                String trimmed = part.trim();\n                checkValidValue(arg, trimmed);\n                argValues.add(trimmed);\n            }\n        }\n        else\n        {\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n        }\n        arguments.pollFirst();\n    }\n\n    // collect into name\u2192values map\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (SimpleDslArg simpleDslArg : argsByName.values())\n    {\n        SimpleDslParam param = processor.collect(simpleDslArg);\n        if (param.hasValue())\n        {\n            valuesByName.put(param.getName().toLowerCase(),\n                             param.getValuesAsList());\n        }\n    }\n\n    // record this group\u2010instance\n    DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n    groupsByArg\n        .computeIfAbsent(groupArg, k -> new ArrayList<>())\n        .add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}