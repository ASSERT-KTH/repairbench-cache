{
    "generation": "    void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n    {\n        final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n        final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n        processor.consume(groupArg.getIdentity(), arguments);\n\n        final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n        argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity()); // Lowercase identity name for consistency\n        for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n        {\n            if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n            {\n                throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n            }\n        }\n\n        while (!arguments.isEmpty())\n        {\n            final NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n\n            if (argument.name == null)\n            {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null)\n            {\n                break;\n            }\n\n            final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n            {\n                break;\n            }\n            \n            // Split the argument value if multiple values are allowed for this parameter\n            String value = argument.value;\n            if (arg.isAllowMultipleValues()) {\n                String[] splitValues = value.split(\",\");\n                for (String v : splitValues) {\n                    v = v.trim();\n                    checkValidValue(arg, v);\n                    argValues.add(v);\n                } // No need to add the original argument.value in else clause; added only if not allowing multiple\n            } else {\n                checkValidValue(arg, value);\n                argValues.add(value);\n            }\n\n            arguments.pollFirst();\n        }\n\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            final SimpleDslParam param = processor.collect(simpleDslArg);\n            if (param.hasValue())\n            {\n                valuesByName.put(simpleDslArg.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}