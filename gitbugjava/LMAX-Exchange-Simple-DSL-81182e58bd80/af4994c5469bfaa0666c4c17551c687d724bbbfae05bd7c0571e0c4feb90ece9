{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor =\n        new SimpleArgumentProcessor(valuesByArg,\n            \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    // first consume the identity for one group\u2010instance\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    // build a lookup for the identity + any other args in the group\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        String lower = dslArg.getName().toLowerCase();\n        if (argsByName.put(lower, dslArg) != null)\n        {\n            throw new IllegalArgumentException(\n                \"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // now consume any remaining args belonging to this one group\u2010instance\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\n                \"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        // only consume names that belong to this group\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            break;\n        }\n\n        // if we've already seen a single\u2010valued arg, stop\n        final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n        {\n            break;\n        }\n\n        // consume this NameValuePair\n        arguments.pollFirst();\n\n        // split on commas for multi\u2010valued args\n        if (arg.isAllowMultipleValues())\n        {\n            for (String part : argument.value.split(\",\"))\n            {\n                String v = part.trim();\n                if (!v.isEmpty())\n                {\n                    checkValidValue(arg, v);\n                    argValues.add(v);\n                }\n            }\n        }\n        else\n        {\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n        }\n    }\n\n    // collect into a lowercase\u2010keyed map for this group\u2010instance\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (SimpleDslArg simpleDslArg : argsByName.values())\n    {\n        SimpleDslParam param = processor.collect(simpleDslArg);\n        if (param.hasValue())\n        {\n            valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n        }\n    }\n\n    // and finally record one more RepeatingParamValues for this group\u2010instance\n    DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n    groupsByArg\n        .computeIfAbsent(groupArg, k -> new ArrayList<>())\n        .add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}