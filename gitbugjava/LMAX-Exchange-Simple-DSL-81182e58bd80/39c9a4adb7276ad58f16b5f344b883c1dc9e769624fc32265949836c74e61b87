{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor =\n        new SimpleArgumentProcessor(valuesByArg,\n            \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    // first consume the identity (one occurrence per group)\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    // build a lookup of all valid names in this group\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(),\n                   groupArg.getIdentity());\n    for (final SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\n                \"Duplicate parameter '\" + dslArg.getName() +\n                \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // now consume any following values for the other args in this group\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\n                \"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        final DslArg arg =\n            argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            break;\n        }\n\n        final List<String> argValues =\n            valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n        {\n            break;\n        }\n\n        // if this arg allows multiple values, split on commas\n        if (arg.isAllowMultipleValues())\n        {\n            for (String part : argument.value.split(\",\"))\n            {\n                String trimmed = part.trim();\n                checkValidValue(arg, trimmed);\n                argValues.add(trimmed);\n            }\n        }\n        else\n        {\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n        }\n        arguments.pollFirst();\n    }\n\n    // collect into a name\u2192list map\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (final SimpleDslArg simpleDslArg : argsByName.values())\n    {\n        final SimpleDslParam param = processor.collect(simpleDslArg);\n        if (param.hasValue())\n        {\n            valuesByName.put(\n                param.getName().toLowerCase(),\n                param.getValuesAsList());\n        }\n    }\n\n    // record this one instance of the repeating group\n    final DslArg[] dslArgs =\n        new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(),\n                     0, dslArgs, 1,\n                     groupArg.getOtherArgs().length);\n\n    groupsByArg\n        .computeIfAbsent(groupArg, k -> new ArrayList<>())\n        .add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}