{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            // Consume the identity argument for this specific instance of the repeating group.\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            // Ensure all map keys are consistent (lowercase)\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            // Process subsequent arguments belonging to this group instance.\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                // Look up the DslArg using a lowercase version of the argument name for consistency.\n                final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    // If the argument name does not match any of the current group's arguments,\n                    // it implies this argument belongs to a new group instance or is unrelated.\n                    // Stop processing arguments for the current group instance.\n                    break;\n                }\n\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n\n                // Check for duplicate values for arguments that do not allow multiple values.\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    // If the current argument is the identity of the group itself, and it's already\n                    // been consumed for this group instance, encountering it again means a new group\n                    // instance is starting. So, break to let the parent parser handle it.\n                    if (arg == groupArg.getIdentity()) {\n                        break;\n                    }\n                    // For other arguments within the group, if they don't allow multiple values\n                    // but we've already collected one, it's an invalid duplicate.\n                    throw new IllegalArgumentException(\"Multiple values for \" + arg.getName() + \" are not allowed in group \" + groupArg.getName());\n                }\n\n                // Validate the argument's value(s). This method correctly splits for validation.\n                checkValidValue(arg, argument.value);\n\n                // Store the value(s). If multiple values are allowed, split them by the separator.\n                if (arg.isAllowMultipleValues())\n                {\n                    final String[] splitValues = argument.value.split(arg.getValueSeparator());\n                    for (String splitValue : splitValues)\n                    {\n                        argValues.add(splitValue.trim()); // Add each split part, trimming whitespace\n                    }\n                }\n                else\n                {\n                    // If multiple values are not allowed, add the raw value as is.\n                    argValues.add(argument.value);\n                }\n\n                // Consume the argument from the deque.\n                arguments.pollFirst();\n            }\n\n            // TODO: this whole thing here is a bit hacky!\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    // Ensure consistency: store parameter names in lowercase\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}