{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    // Consuming the identity argument for the first group\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    boolean firstGroupParsed = false;\n    while (true)\n    {\n        // For each group instance, collect values for its args\n        final Map<DslArg, List<String>> valuesForThisGroup = new HashMap<>();\n        final SimpleArgumentProcessor groupProcessor = new SimpleArgumentProcessor(valuesForThisGroup, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n        if (!firstGroupParsed) {\n            // The first group already had its identity argument consumed\n            for (Map.Entry<DslArg, List<String>> entry : valuesByArg.entrySet()) {\n                valuesForThisGroup.put(entry.getKey(), new ArrayList<>(entry.getValue()));\n            }\n            firstGroupParsed = true;\n        } else {\n            // For subsequent groups, require identity arg\n            if (arguments.isEmpty())\n                break;\n\n            final NameValuePair arg0 = arguments.peekFirst();\n            if (arg0 == NameValuePair.NULL || arg0.name == null || !arg0.name.equalsIgnoreCase(groupArg.getIdentity().getName()))\n                break;\n\n            groupProcessor.consume(groupArg.getIdentity(), arguments);\n        }\n\n        // Now try to parse 0..* other args for this group\n        while (!arguments.isEmpty())\n        {\n            final NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n\n            if (argument.name == null)\n            {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null || arg == groupArg.getIdentity())\n            {\n                // either a parameter not belonging to this group or the identity arg, which signals next group\n                break;\n            }\n\n            final List<String> argValues = valuesForThisGroup.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n            {\n                break;\n            }\n\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n            arguments.pollFirst();\n        }\n\n        // build valuesByName for this group\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            final SimpleDslParam param = groupProcessor.collect(simpleDslArg);\n            if (param.hasValue())\n            {\n                valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n\n        // If the next argument is not a new group, exit, else loop for next group\n        if (arguments.isEmpty())\n            break;\n\n        final NameValuePair next = arguments.peekFirst();\n        if (next == NameValuePair.NULL || next.name == null || !next.name.equalsIgnoreCase(groupArg.getIdentity().getName()))\n            break;\n        // else: loop, will consume identity arg and parse more group parameters\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}