{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity()); // Fix: store the identity name lowercased as well.\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // Change: Instead of adding all group values at once,\n    // handle splitting values for allow-multiple-value args here, so each group gets the correct value lists.\n    while (!arguments.isEmpty())\n    {\n        final Deque<NameValuePair> perGroupArgs = new ArrayDeque<>();\n\n        // gather as many arguments as belong to a single group occurrence\n        {\n            // always consume identity arg\n            final NameValuePair identityArg = arguments.pollFirst();\n            if (identityArg == null || identityArg == NameValuePair.NULL) {\n                break;\n            }\n            if (identityArg.name == null || !identityArg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {\n                // not a group anymore\n                arguments.addFirst(identityArg);\n                break;\n            }\n            perGroupArgs.add(identityArg);\n\n            // also collect the following \"otherArgs\" of this group occurrence\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair arg = arguments.peekFirst();\n                if (arg == NameValuePair.NULL) {\n                    arguments.pollFirst();\n                    continue;\n                }\n                if (arg.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + arg.originalValue);\n                }\n                if (arg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {\n                    // start of next group\n                    break;\n                }\n                if (!argsByName.containsKey(arg.name.toLowerCase()))\n                {\n                    // argument not relevant for this group, stop group collection\n                    break;\n                }\n                perGroupArgs.add(arguments.pollFirst());\n            }\n        }\n\n        // Now process the arguments for this particular group\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        // Identity arg\n        NameValuePair identityPair = perGroupArgs.pollFirst();\n        valuesByName.put(identityPair.name.toLowerCase(), Collections.singletonList(identityPair.value));\n\n        // Rest (group \"other\" args)\n        for (NameValuePair pair : perGroupArgs) {\n            SimpleDslArg dslArg = argsByName.get(pair.name.toLowerCase());\n            if (dslArg.isAllowMultipleValues()) {\n                // perform splitting\n                List<String> splitValues = new ArrayList<>();\n                String[] rawSplits = pair.value.split(\",\"); // Use default separator\n                for (String s : rawSplits) {\n                    String trimmed = s.trim();\n                    if (!trimmed.isEmpty()) {\n                        checkValidValue(dslArg, trimmed);\n                        splitValues.add(trimmed);\n                    }\n                }\n                valuesByName.put(dslArg.getName().toLowerCase(), splitValues);\n            } else {\n                checkValidValue(dslArg, pair.value);\n                valuesByName.put(dslArg.getName().toLowerCase(), Collections.singletonList(pair.value));\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}