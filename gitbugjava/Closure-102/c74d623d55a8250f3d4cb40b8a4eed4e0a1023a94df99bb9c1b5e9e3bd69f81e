{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    // Run VarCheck itself.\n    NodeTraversal.traverse(compiler, root, this);\n    // NOTE(nicksantos): If we run VarCheck before FunctionInjector, we may save\n    // a lot of time. But FunctionInjector does some weird things to the scope\n    // that VarCheck depends on. If we run VarCheck after FunctionInjector,\n    // we may miss some warnings. We run VarCheck both before and after.\n    // For now, remove the MakeDeclaredNamesUnique pass from the first run,\n    // and only run it after FunctionInjector.\n\n    // TODO(nicksantos): Re-enable this pass after FunctionInjector allows it.\n    // if (MAKE_LOCAL_NAMES_UNIQUE) {\n    //   MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    //   NodeTraversal t = new NodeTraversal(compiler, renamer);\n    //   t.traverseRoots(externs, root);\n    // }\n\n    // Run this pass again after injecting functions, omitting the traversal\n    // of the initial code. (The VariableMap functions are added manually.)\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}