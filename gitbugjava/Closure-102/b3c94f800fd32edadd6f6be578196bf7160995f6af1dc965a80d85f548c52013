{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    // Make local names unique first, so that the Normalize pass runs on\n    // code with unique names. This prevents potential issues with logic\n    // in Normalize that might rely on names being unique.\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      // Traverse both externs and root to ensure all names are handled.\n      t.traverseRoots(externs, root);\n    }\n\n    // Run the main normalization traversal.\n    // Pass 'this' as the callback, assuming 'this' is the Normalize instance.\n    // Traverse both externs and root for consistency.\n    NodeTraversal mainTraversal = new NodeTraversal(compiler, this);\n    mainTraversal.traverseRoots(externs, root);\n\n    // Remove duplicate declarations potentially introduced or made redundant\n    // by previous passes. Running only on root might be intentional,\n    // assuming externs are well-formed or handled differently.\n    removeDuplicateDeclarations(root);\n\n    // Propagate constant annotations. This pass often runs after normalization\n    // as it might rely on the simplified structure.\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}