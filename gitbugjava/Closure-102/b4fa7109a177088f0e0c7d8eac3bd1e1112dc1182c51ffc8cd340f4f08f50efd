{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    // Ensure that the initial pass (likely VarCheck or similar) runs first.\n    NodeTraversal.traverse(compiler, root, this);\n\n    // It's possible that removeDuplicateDeclarations needs to run before\n    // MakeDeclaredNamesUnique to handle the 'var arguments' case correctly,\n    // potentially simplifying it in a way that prevents incorrect renaming.\n    // The original bug (Issue 115) was fixed by modifying MakeDeclaredNamesUnique\n    // directly to not rename 'arguments'. Without modifying that class,\n    // changing the order of passes is the most plausible approach within this method.\n    removeDuplicateDeclarations(root);\n\n    // Run MakeDeclaredNamesUnique after removeDuplicateDeclarations.\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      // Ensure renaming happens in both externs and root, as originally done.\n      // Although the 'arguments' issue is specific to function scope (root),\n      // maintaining traversal of externs is safer if other renaming relies on it.\n      t.traverseRoots(externs, root);\n    }\n\n    // Run PropogateConstantAnnotations last in this sequence.\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}