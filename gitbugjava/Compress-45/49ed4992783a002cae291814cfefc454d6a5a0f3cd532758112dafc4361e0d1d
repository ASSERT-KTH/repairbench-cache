{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     *\n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     *\n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // --- START FIX ---\n        // Handle binary formatting.\n        // The original code incorrectly called formatLongBinary (if length < 9)\n        // *and* formatBigIntegerBinary unconditionally, then manually set the\n        // marker byte, potentially overwriting the first byte written by the formatters.\n        // Assuming formatBigIntegerBinary is the intended general method for\n        // binary formatting (handling range checks, marker byte, and data),\n        // we should call only that method for the binary case.\n        // The range check inside formatBigIntegerBinary seems to be working correctly\n        // based on the exception message for the out-of-range value.\n\n        if (length < 2) {\n             throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n\n        // The marker byte (0x80 or 0xFF) is assumed to be set by formatBigIntegerBinary.\n        // buf[offset] = (byte) (negative ? 0xff : 0x80); // REMOVED\n\n        return offset + length;\n        // --- END FIX ---\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}