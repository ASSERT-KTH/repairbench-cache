{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // Allow certain node types unconditionally.\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // We also don't check COMMA nodes themselves, only their children.\n    // We also don't need to check the wrapper EXPR_RESULT or BLOCK nodes.\n    if (n.isEmpty() || n.isComma() || n.isExprResult() || n.isBlock() || parent == null) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Check if the result of the expression is actually used. If it is, then\n    // the expression is not useless, even if it has no side effects.\n    if (NodeUtil.isExpressionResultUsed(n)) {\n      return;\n    }\n\n    // Special case: `var x;` declares a variable, this is not useless code.\n    // VAR -> NAME nodes often lack side effects according to the analysis\n    // but are structurally necessary.\n    if (parent.isVar() && n.isName()) {\n      // TODO(johnlenz): determine if we should report this case.\n      // It is technically useless code, but could be used for type annotations.\n      return;\n    }\n\n    // If the result is not used, check if the node is a simple operator\n    // (e.g. EQ, ADD) or if it lacks side effects. These are usually indicative\n    // of programmer error.\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // Keep track of potentially problematic nodes, perhaps for removal.\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      // We potentially want to remove simple expressions like ('str') or (1), but\n      // not qualified names even if they don't have side effects.\n      if (!NodeUtil.isStatement(n) && !n.isQualifiedName()) {\n         problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}