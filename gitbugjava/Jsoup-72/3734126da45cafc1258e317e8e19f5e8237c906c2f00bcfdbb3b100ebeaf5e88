{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // limit (no cache):\n        if (count > maxStringCacheLen)\n            return new String(charBuf, start, count);\n        // Avoid cache check for count == 0, as empty string is common and immutable.\n        // Also avoids potential edge cases with cache interactions for empty strings.\n        if (count == 0)\n            return \"\";\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        // Ensure parentheses for index calculation, although precedence might be sufficient.\n        final int index = hash & (stringCache.length - 1);\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                // Overwrite cache entry with new string on collision. Assumption is that recent strings are more likely.\n                cached = new String(charBuf, start, count);\n                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }\n\n    // Helper method assumed to exist and be correct for the fix context.\n    // Included here for completeness of the thought process, but not part of the required output block.\n    /*\n    private static boolean rangeEquals(final char[] charBuf, final int start, final int count, final String cached) {\n        if (count != cached.length()) {\n            return false;\n        }\n        int i = start;\n        int j = 0;\n        while (count-- != 0) { // loop 'count' times\n            if (charBuf[i++] != cached.charAt(j++)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    */",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}