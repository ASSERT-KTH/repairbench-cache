{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // defense against negative count argument which could cause StringIndexOutOfBoundsException\n        if (count < 0) {\n             // A negative count is invalid; return empty string as a sensible default\n             // similar to how count == 0 is handled. This avoids the exception downstream.\n            return \"\";\n        }\n        \n        // limit (no cache):\n        if (count > maxStringCacheLen)\n            return new String(charBuf, start, count);\n\n        // Optimize for common case of empty string argument. Avoids cache lookup/store for \"\".\n        if (count == 0)\n            return \"\";\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        // assumes stringCache.length is a power of 2, which allows modulo using bitwise AND\n        final int index = hash & (stringCache.length - 1);\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            // Check start and count bounds relative to charBuf length to prevent potential exceptions.\n            // Although the caller should ensure valid args, add a check here for robustness.\n            // Note: This check might be redundant if callers guarantee validity, but adds safety.\n            // However, adding this check changes behavior for potentially valid but large start/count.\n            // Let's stick to fixing the reported issue (negative count) without altering valid behavior.\n            // if (start < 0 || count < 0 || start + count > charBuf.length) return new String(charBuf, start, count); // Defensive but potentially alters behavior\n\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                // Overwrite cache with new string - assumes recently used strings are more likely requested again.\n                cached = new String(charBuf, start, count);\n                stringCache[index] = cached;\n            }\n        }\n        return cached;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}