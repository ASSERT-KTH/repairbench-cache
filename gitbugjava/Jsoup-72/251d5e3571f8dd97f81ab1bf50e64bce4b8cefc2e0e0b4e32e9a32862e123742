{
    "generation": "import org.jsoup.internal.StringUtil; // Assuming rangeEquals is StringUtil.rangeEquals\n\n// NOTE: The rangeEquals method is assumed to exist and be correct,\n// typically found in a utility class like StringUtil.\n// e.g., static boolean rangeEquals(final char[] charBuf, final int start, final int count, final String cached)\n\n/**\n * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n * <p />\n * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n * some more duplicates.\n */\nprivate static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // --- FIX START ---\n    // Add bounds checks to prevent StringIndexOutOfBoundsException or ArrayIndexOutOfBoundsException\n    // These checks mirror the validation done by the String constructor and ensure safe array access.\n    // The original code failed when passed invalid arguments (like count < 0), likely from the caller.\n    // Adding validation here makes cacheString robust against such invalid inputs.\n    if (count < 0) {\n         // count should not be negative.\n         throw new StringIndexOutOfBoundsException(\"count < 0: \" + count);\n    }\n    if (start < 0) {\n         // start should not be negative.\n         throw new StringIndexOutOfBoundsException(\"start < 0: \" + start);\n    }\n    // Check if the sum start + count exceeds the buffer length, preventing OutOfBounds.\n    // This check uses subtraction to avoid potential integer overflow if start + count > Integer.MAX_VALUE\n    if (start > charBuf.length - count) {\n        throw new StringIndexOutOfBoundsException(\"offset=\" + start + \", count=\" + count + \", bufLen=\" + charBuf.length);\n    }\n    // --- FIX END ---\n\n\n    // limit (no cache):\n    // Ensure maxStringCacheLen is defined somewhere accessible\n    // Assuming a static final int maxStringCacheLen exists in the class.\n    final int maxStringCacheLen = 12; // Example value, should use the actual class member\n    if (count > maxStringCacheLen)\n        return new String(charBuf, start, count); // Bounds already checked\n\n    // calculate hash:\n    int hash = 0;\n    int offset = start;\n    // Loop is now safe due to the bounds check above\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // get from cache\n    // --- FIX START ---\n    // Added parentheses for correct operator precedence (bitwise AND vs subtraction)\n    final int index = hash & (stringCache.length - 1);\n    // --- FIX END ---\n    String cached = stringCache[index];\n\n    if (cached == null) { // miss, add\n        cached = new String(charBuf, start, count); // Safe due to bounds check\n        stringCache[index] = cached;\n    } else { // hashcode hit, check equality\n        // Assuming rangeEquals correctly handles count=0 and respects bounds.\n        // The bounds checks at the start ensure charBuf access within rangeEquals is safe.\n        if (StringUtil.rangeEquals(charBuf, start, count, cached)) { // hit // Assuming StringUtil.rangeEquals exists\n            return cached;\n        } else { // hashcode conflict\n            cached = new String(charBuf, start, count); // Safe due to bounds check\n            // Overwrite cache on conflict: recently used strings are more likely hit again\n            stringCache[index] = cached;\n        }\n    }\n    return cached;\n}\n\n// Dummy rangeEquals for compilation - replace with actual implementation if needed for context\n// In the original jsoup code, this is likely org.jsoup.internal.StringUtil.rangeEquals\nprivate static class StringUtil {\n    static boolean rangeEquals(final char[] charBuf, final int start, final int count, final String cached) {\n        if (count != cached.length()) {\n            return false;\n        }\n        for (int i = 0; i < count; i++) {\n            if (charBuf[start + i] != cached.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// Dummy maxStringCacheLen for compilation\nprivate static final int maxStringCacheLen = 12;",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}