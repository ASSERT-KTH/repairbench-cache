{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // Added check for count == 0 to avoid potential negative start index causing SIOOBE in String constructor\n        // See https://github.com/jhy/jsoup/issues/1456\n        if (count == 0) {\n            // Assuming the hash of \"\" is 0, the cache index is 0.\n            final int index = 0;\n            String cached = stringCache[index];\n            if (\"\".equals(cached)) { // Using literal \"\" is efficient and safe\n                return cached; // Cache hit for empty string\n            } else {\n                // Cache miss or collision at index 0 for \"\". Store literal \"\" and return it.\n                stringCache[index] = \"\";\n                return \"\";\n            }\n        }\n\n        // Original logic for count > 0\n        // limit (no cache):\n        if (count > maxStringCacheLen)\n            // If start or count are invalid here (e.g., start < 0, start+count > charBuf.length),\n            // this constructor will throw the appropriate IndexOutOfBoundsException.\n            return new String(charBuf, start, count);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        // This loop will throw ArrayIndexOutOfBoundsException if start < 0 (and count > 0),\n        // which is appropriate for invalid input.\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        final int index = hash & (stringCache.length - 1); // Parentheses for clarity, equivalent to original\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            // If start or count are invalid here (e.g., start+count > charBuf.length),\n            // this constructor will throw the appropriate IndexOutOfBoundsException.\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            // rangeEquals expects valid parameters. If they are invalid due to caller error,\n            // it might throw AIOOBE, which is acceptable.\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                // If start or count are invalid, this constructor will throw.\n                cached = new String(charBuf, start, count);\n                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}