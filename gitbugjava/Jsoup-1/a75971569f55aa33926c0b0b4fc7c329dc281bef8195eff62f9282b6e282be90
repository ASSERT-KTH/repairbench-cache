{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        // Using element.childNodes() creates a snapshot List, safe for iteration while modifying element\n        for (Node node: element.childNodes()) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                // Collect non-blank text nodes to move.\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n            // Note: This only handles TextNodes. Misplaced Elements (other than head/body)\n            // found directly under <html> might also need moving according to HTML5 spec,\n            // but this function's scope seems limited based on original code and test case.\n        }\n\n        // Move the collected text nodes to the *start* of the body.\n        // Iterate backwards through the collected nodes list. When prepending nodes one by one\n        // in reverse order of their original appearance, they end up in the correct\n        // original relative order at the beginning of the target element (body).\n        for (int i = toMove.size() - 1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            element.removeChild(node); // Remove from the original parent (likely <html>)\n            // Prepend the node to the start of the body. This fixes the issue where\n            // text content before the body tag was moved to the end of the body.\n            // The original code also added a space, which is removed here as it caused issues.\n            body().prependChild(node);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}