{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        // Find non-blank text nodes directly under the element (e.g., <html>)\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        // Move the collected nodes to the start of the body() element.\n        // Iterate in reverse order to prepend them, maintaining their original relative order at the start.\n        for (int i = toMove.size() - 1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            element.removeChild(node); // Remove from original parent (e.g., html)\n\n            // If the body is not empty, prepend a space before inserting the node\n            // to ensure separation from existing body content.\n            if (body().childNodeSize() > 0) {\n                body().prependChild(new TextNode(\" \", \"\"));\n            }\n            body().prependChild(node); // Prepend the actual node (e.g., \"foo\") to the start of the body\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}