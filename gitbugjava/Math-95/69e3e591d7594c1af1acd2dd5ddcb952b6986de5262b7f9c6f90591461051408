{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // The mean of the F-distribution is d / (d - 2) for d > 2.\n        // It is undefined otherwise. Use the mean as the initial guess\n        // when it is defined and positive. Otherwise, use 1.0 as a default,\n        // reasonable value within the domain [0, +inf).\n        if (d > 2.0) {\n            ret = d / (d - 2.0);\n        } else {\n            ret = 1.0;\n        }\n        // Make sure the initial guess is strictly positive, F distribution is >= 0.\n        // Although 1.0 is chosen for d <= 2, d / (d-2) can be very large for d close to 2,\n        // potentially causing issues if the solver expects a value closer to the median.\n        // However, simply ensuring positivity fixes the reported IllegalArgumentException.\n        // A more sophisticated initial guess could be used (e.g., based on the median),\n        // but returning 1.0 when the mean is undefined is a minimal fix.\n        \n        // Note: A check for numerator degrees of freedom might also be relevant\n        // depending on the solver behavior, but is not strictly needed to fix\n        // the reported error related to denominator degrees of freedom <= 2.\n\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}