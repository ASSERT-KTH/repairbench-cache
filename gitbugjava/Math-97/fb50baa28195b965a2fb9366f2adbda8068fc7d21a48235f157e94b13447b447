{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     * (unless one endpoint is already a root within the function value accuracy)\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        // Calculate function values at endpoints\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Check if endpoints are roots within tolerance\n        // This must be done before checking the sign condition for bracketing,\n        // to handle cases where F(min) or F(max) is exactly or very close to zero.\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Found root at min endpoint, 0 iterations\n            return result; // 'result' is set by setResult\n        }\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Found root at max endpoint, 0 iterations\n            return result; // 'result' is set by setResult\n        }\n        \n        // Verify bracketing: signs should be opposite for Brent's method to proceed.\n        // This check is performed AFTER checking if endpoints themselves are roots.\n        double sign = yMin * yMax;\n        if (sign > 0) {\n            // If signs are the same, and neither endpoint is a root (checked above),\n            // then the interval does not bracket a root.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // sign < 0: The interval brackets a root. Proceed with Brent's method.\n            // The sign == 0 case is handled by the endpoint checks above,\n            // as one of yMin or yMax must be within functionValueAccuracy of zero.\n            ret = solve(min, yMin, max, yMax, min, yMin);\n            // The inner solve method performs the iterations and calls setResult.\n            // It returns the computed root.\n        }\n\n        // Return the root found by the inner solve method.\n        // Note: The result field is also set by the inner solve, but returning \n        // the value directly returned by the inner solve is consistent with original code.\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}