{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Calculate padding once for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n\n        // Process subsequent lines\n        while (true)\n        {\n            // Get the remainder of the text\n            String remainder = text.substring(pos);\n\n            // Left-trim the remainder to remove leading whitespace from wrapping\n            // Note: Using a simple loop for ltrim instead of String.trim()\n            // which removes both leading and trailing whitespace.\n            int ltrimIdx = 0;\n            while (ltrimIdx < remainder.length() && Character.isWhitespace(remainder.charAt(ltrimIdx)))\n            {\n                ltrimIdx++;\n            }\n            remainder = remainder.substring(ltrimIdx);\n\n            // Prepend the calculated padding to the l-trimmed remainder\n            text = padding + remainder;\n\n            // Find the next wrap position in the padded text\n            pos = findWrapPos(text, width, 0);\n\n            // If no further wrapping is needed\n            if (pos == -1)\n            {\n                sb.append(text); // Append the final padded line\n                return sb;\n            }\n\n            // Handle edge case CLI-134: Avoid wrapping just before the padding ends\n            // which might lead to printing only the padding.\n            // If the calculated wrap position 'pos' lands exactly at the padding boundary\n            // (nextLineTabStop - 1, because findWrapPos returns index + 1 for space),\n            // and the line still exceeds the width, force the wrap to the maximum width.\n             if ( (text.length() > width) && (pos == nextLineTabStop - 1) )\n            {\n                 pos = width;\n            }\n\n            // Append the wrapped line (rtrimmed) and a newline\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}