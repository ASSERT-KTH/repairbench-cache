{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            nextLineTabStop = width - 1;\n        }\n\n        // all following lines must be padded with nextLineTabStop space\n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        // use currentPos instead of pos, calculation involves String manipulation under the loop\n        int currentPos = pos;\n        String currentLine = text; // re-assign text in the loop\n\n        while (true)\n        {\n            currentLine = padding + currentLine.substring(currentPos).trim();\n            currentPos = findWrapPos(currentLine, width, 0);\n\n            if (currentPos == -1)\n            {\n                sb.append(currentLine);\n\n                return sb;\n            }\n\n            // Sometimes the wrap position is calculated although we are well over the width,\n            // so we check if the current text is longer than the width\n            // fix for CLI-162\n            if (currentLine.length() > width && currentPos <= nextLineTabStop) // check if wrap point is within padding\n            {\n                currentPos = width; // force break at width\n            }\n\n            sb.append(rtrim(currentLine.substring(0, currentPos))).append(defaultNewLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}