{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite cases first, as Erf.erf might struggle with them.\n        if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        }\n        if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n\n        final double dev = x - mean;\n        // Check for extreme values outside the range where Erf might fail or be inaccurate.\n        // The threshold choice (e.g., 20 or 40) depends on the Erf implementation behavior.\n        // The original code used 20 in the catch block. Let's stick with that logic.\n        if (Math.abs(dev / standardDeviation) > 40) { // Use 40 as per Javadoc for direct return\n             return x < mean ? 0.0 : 1.0;\n        }\n\n        try {\n            // Calculate CDF using the error function\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // Handle convergence issues, potentially near the limits of Erf calculation.\n            // Use the threshold from the original catch block logic.\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 per original comment\n                return 0.0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0;\n            } else {\n                // If failure occurs within a reasonable range, it's an unexpected issue.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}