{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite cases first, as Erf.erf might not handle them correctly (e.g., NaN or exception)\n        if (Double.isInfinite(x)) {\n            return (x < 0) ? 0.0 : 1.0;\n        }\n\n        // Handle NaN\n        if (Double.isNaN(x)) {\n            return Double.NaN;\n        }\n\n        final double dev = x - mean;\n        // Check for extreme values (more than 40 standard deviations from the mean)\n        // as described in the Javadoc. Erf.erf might struggle or be unnecessary\n        // for such extreme inputs.\n        if (Math.abs(dev / standardDeviation) > 40) {\n             return (dev < 0) ? 0.0 : 1.0;\n        }\n\n        // Standard case: Use the error function.\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // The Erf.erf algorithm failed to converge.\n            // Try to handle based on the side of the mean, similar to the original code's logic,\n            // although the check above for |Z| > 40 should cover most extreme cases.\n            // This fallback handles potential convergence issues within the |Z| <= 40 range.\n            if (x < (mean - 20 * standardDeviation)) { // Use the original threshold from catch block\n                return 0.0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0;\n            } else {\n                // If convergence failed for non-extreme values, re-throw the exception.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}