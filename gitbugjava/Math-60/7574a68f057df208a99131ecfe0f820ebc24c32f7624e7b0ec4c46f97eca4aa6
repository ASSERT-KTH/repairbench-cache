{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinity cases first, to avoid issues with Erf.erf\n        if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        }\n        if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n\n        final double dev = x - mean;\n        // Check for extreme values outside +/- 40 standard deviations\n        // Use the threshold from the Javadoc.\n        // Avoid calling Erf.erf for values where it might fail to converge\n        // or produce results extremely close to 0 or 1.\n        if (FastMath.abs(dev) / standardDeviation > 40) {\n             return dev < 0 ? 0.0d : 1.0d;\n        }\n        \n        // Calculate CDF using the error function\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // The extreme cases (|dev/stddev| > 40) are handled above.\n            // If Erf.erf fails to converge for values closer to the mean,\n            // it indicates a genuine convergence problem, so we rethrow.\n            // The original code had a secondary check here for +/- 20 std dev,\n            // but handling +/- 40 std dev before the call is cleaner and\n            // aligns with the Javadoc promise.\n            throw ex;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}