{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite cases first, as Erf.erf might fail or return NaN for infinite arguments.\n        if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        }\n        if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n\n        final double dev = x - mean;\n        try {\n            // Standard formula using the error function\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                        (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // Handle cases where Erf.erf fails to converge for extreme finite values.\n            // This logic was present in the original code to approximate the result for\n            // values far in the tails where convergence issues might arise.\n            if (x < (mean - 20 * standardDeviation)) { // Check if x is far to the left\n                return 0.0; // Probability is effectively 0\n            } else if (x > (mean + 20 * standardDeviation)) { // Check if x is far to the right\n                return 1.0; // Probability is effectively 1\n            } else {\n                // If convergence failed for a value not extremely far out, rethrow.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}