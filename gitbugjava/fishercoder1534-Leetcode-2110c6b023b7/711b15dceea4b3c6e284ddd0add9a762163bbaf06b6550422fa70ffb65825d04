{
    "generation": "public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null) {\n        return null;\n    }\n    // Check if current root is one of p or q by value\n    if (root.val == p.val || root.val == q.val) {\n        return root;\n    }\n    // Determine if both nodes are on the left or right subtree\n    boolean bothLeft = p.val < root.val && q.val < root.val;\n    boolean bothRight = p.val > root.val && q.val > root.val;\n    if (bothLeft) {\n        return lowestCommonAncestor(root.left, p, q);\n    } else if (bothRight) {\n        return lowestCommonAncestor(root.right, p, q);\n    } else {\n        // Nodes are on different sides, current root is LCA\n        return root;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}