{
    "generation": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            // Base case: If root is null, return null.\n            // (Problem constraints usually guarantee p and q exist in the non-empty tree)\n            if (root == null) {\n                return null;\n            }\n\n            // If both p and q's values are smaller than root's value,\n            // then the LCA must be in the left subtree.\n            if (p.val < root.val && q.val < root.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p and q's values are larger than root's value,\n            // then the LCA must be in the right subtree.\n            else if (p.val > root.val && q.val > root.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, we've found the node where p and q diverge,\n            // or one of p or q is the root itself. This root is the LCA.\n            // This case covers:\n            // 1. p.val < root.val < q.val\n            // 2. q.val < root.val < p.val\n            // 3. root.val == p.val (LCA is p)\n            // 4. root.val == q.val (LCA is q)\n            else {\n                return root;\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}