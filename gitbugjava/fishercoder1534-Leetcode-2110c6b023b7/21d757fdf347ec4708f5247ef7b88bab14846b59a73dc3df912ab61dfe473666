{
    "generation": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            // If the root is null, return null.\n            if (root == null) {\n                return null;\n            }\n\n            // If both p and q's values are less than the root's value,\n            // the LCA must be in the left subtree.\n            // We use direct comparison to avoid potential integer overflow\n            // from calculating (root.val - p.val) * (root.val - q.val).\n            if (p.val < root.val && q.val < root.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p and q's values are greater than the root's value,\n            // the LCA must be in the right subtree.\n            else if (p.val > root.val && q.val > root.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, the current root is the lowest common ancestor.\n            // This occurs when p and q are on different sides of the root,\n            // or when one of p or q is the root itself.\n            else {\n                return root;\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}