{
    "generation": "public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null || root == p || root == q) {\n        return root;\n    }\n    boolean pInLeft = search(root.left, p);\n    boolean qInLeft = search(root.left, q);\n    if (pInLeft != qInLeft) {\n        return pInLeft ? root.left : root.right;\n    }\n    return lowestCommonAncestor(root.left, p, q);\n}\n\nprivate boolean search(TreeNode root, TreeNode target) {\n    if (root == null) {\n        return false;\n    }\n    if (root == target) {\n        return true;\n    }\n    return search(root.left, target) || search(root.right, target);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}