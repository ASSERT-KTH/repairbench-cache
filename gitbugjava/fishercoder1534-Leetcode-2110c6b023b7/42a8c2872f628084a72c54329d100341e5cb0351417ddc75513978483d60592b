{
    "generation": "class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) {\n            return null;\n        }\n\n        // If both p and q are greater than root, then LCA must be in the right subtree.\n        // Note: We're comparing values, not object references, which is more robust\n        // given how p and q might be constructed in tests.\n        if (root.val < p.val && root.val < q.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        }\n        // If both p and q are smaller than root, then LCA must be in the left subtree.\n        else if (root.val > p.val && root.val > q.val) {\n            return lowestCommonAncestor(root.left, p, q);\n        }\n        // Otherwise, root is the LCA. This covers cases where:\n        // 1. One is smaller and one is larger (e.g., p.val < root.val < q.val or q.val < root.val < p.val).\n        // 2. One of them is equal to root.val (e.g., p.val == root.val or q.val == root.val).\n        else {\n            return root;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}