{
    "generation": "        /**\n         * Finds the lowest common ancestor (LCA) of two given nodes in a Binary Search Tree (BST).\n         *\n         * According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q\n         * as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n         *\n         * Constraints:\n         * All Node.val are unique.\n         * p and q will exist in the BST.\n         *\n         * @param root The root of the BST.\n         * @param p The first node.\n         * @param q The second node.\n         * @return The lowest common ancestor node of nodes p and q.\n         */\n        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            // Base case: If root is null, return null. (Should not happen based on constraints but good practice)\n            if (root == null) {\n                return null;\n            }\n\n            // If both p and q have values less than root's value, the LCA must be in the left subtree.\n            // The comparison avoids the integer overflow issue present in the original code's multiplication.\n            if (p.val < root.val && q.val < root.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p and q have values greater than root's value, the LCA must be in the right subtree.\n            else if (p.val > root.val && q.val > root.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, we've found the split point or one of the nodes equals the root.\n            // This occurs if:\n            //  1. p.val <= root.val <= q.val\n            //  2. q.val <= root.val <= p.val\n            // In either of these scenarios, the current root node is the LCA because the paths to p and q diverge at this node,\n            // or one of p or q is the root itself.\n            else {\n                return root;\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}