{
    "generation": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            if (root == null) {\n                // This case should ideally not be reached if p and q are guaranteed\n                // to be in the BST, and the initial root is not null.\n                // It handles recursion past a leaf node.\n                return null;\n            }\n\n            // If both p's value and q's value are less than root's value,\n            // then the LCA must be in the left subtree.\n            if (p.val < root.val && q.val < root.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p's value and q's value are greater than root's value,\n            // then the LCA must be in the right subtree.\n            else if (p.val > root.val && q.val > root.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, this root node is the LCA.\n            // This situation occurs if:\n            // 1. root.val is equal to p.val (root is p). Since q must be a descendant\n            //    (or p itself if p==q), root (p) is the LCA.\n            // 2. root.val is equal to q.val (root is q). Similarly, root (q) is the LCA.\n            // 3. p.val < root.val < q.val (or q.val < root.val < p.val). This means\n            //    p and q are in different subtrees of root, making root the LCA.\n            else {\n                return root;\n            }\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}