{
    "generation": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            if (root == null) {\n                return null;\n            }\n\n            // If both p and q have values less than root's value,\n            // LCA must be in the left subtree.\n            if (p.val < root.val && q.val < root.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p and q have values greater than root's value,\n            // LCA must be in the right subtree.\n            else if (p.val > root.val && q.val > root.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, root is the LCA. This occurs if:\n            // 1. p.val == root.val (p is root, q is in a subtree or q is also root).\n            // 2. q.val == root.val (q is root, p is in a subtree).\n            // 3. p.val < root.val < q.val (p and q straddle root).\n            // 4. q.val < root.val < p.val (q and p straddle root).\n            else {\n                return root;\n            }\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}