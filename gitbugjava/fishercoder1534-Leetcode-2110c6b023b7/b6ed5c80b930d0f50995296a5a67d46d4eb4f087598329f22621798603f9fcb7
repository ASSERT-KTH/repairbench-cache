{
    "generation": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    /**\n     * Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\n     *\n     * According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q\n     * as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n     *\n     * Constraints:\n     * The number of nodes in the tree is in the range [2, 10^5].\n     * -10^9 <= Node.val <= 10^9\n     * All Node.val are unique.\n     * p != q\n     * p and q will exist in the BST.\n     */\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // Base case: If root is null, return null. (Should not happen based on constraints)\n        if (root == null) {\n            return null;\n        }\n\n        // If both p and q have values smaller than the current root's value,\n        // the LCA must be in the left subtree.\n        if (p.val < root.val && q.val < root.val) {\n            return lowestCommonAncestor(root.left, p, q);\n        }\n        // If both p and q have values larger than the current root's value,\n        // the LCA must be in the right subtree.\n        else if (p.val > root.val && q.val > root.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        }\n        // Otherwise, the current root is the LCA. This happens when:\n        // 1. p is root, or q is root.\n        // 2. p is in one subtree and q is in the other subtree.\n        //    (i.e., p.val < root.val < q.val or q.val < root.val < p.val)\n        else {\n            return root;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}