{
    "generation": "class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // Base case: If root is null, it means we've gone past the target nodes,\n        // or p/q were not found in this branch. (Typically, p and q are guaranteed to be in the tree).\n        if (root == null) {\n            return null;\n        }\n\n        // If both p and q are in the left subtree (their values are less than root.val)\n        if (root.val > p.val && root.val > q.val) {\n            return lowestCommonAncestor(root.left, p, q);\n        }\n        // If both p and q are in the right subtree (their values are greater than root.val)\n        else if (root.val < p.val && root.val < q.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        }\n        // Otherwise, root is the LCA. This occurs if:\n        // 1. One node is in the left subtree and the other is in the right subtree.\n        // 2. One of the nodes (p or q) is the root itself (by value).\n        else {\n            return root;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}