{
    "generation": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            // Base case: If root is null, return null.\n            // Although typically constraints guarantee p and q are in the tree,\n            // and the root is not null initially.\n            if (root == null) {\n                return null;\n            }\n\n            // If both p and q have values smaller than the current root's value,\n            // the LCA must be in the left subtree.\n            if (p.val < root.val && q.val < root.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p and q have values larger than the current root's value,\n            // the LCA must be in the right subtree.\n            else if (p.val > root.val && q.val > root.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, the current root is the LCA. This happens when:\n            // 1. p is the root (p.val == root.val).\n            // 2. q is the root (q.val == root.val).\n            // 3. p and q are on different sides of the root (one is smaller, one is larger).\n            // In all these cases, the current root node is the lowest common ancestor.\n            else {\n                return root;\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}