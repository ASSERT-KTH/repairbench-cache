{
    "generation": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            // Node values can range from Integer.MIN_VALUE to Integer.MAX_VALUE.\n            // Direct comparisons avoid overflow issues with subtraction or multiplication.\n\n            // If both p's value and q's value are less than root's value,\n            // then the LCA must be in the left subtree.\n            if (p.val < root.val && q.val < root.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p's value and q's value are greater than root's value,\n            // then the LCA must be in the right subtree.\n            else if (p.val > root.val && q.val > root.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, this root is the LCA. This covers three cases:\n            // 1. p.val == root.val (p is root, so p is LCA).\n            // 2. q.val == root.val (q is root, so q is LCA).\n            // 3. One of p/q is in the left subtree and the other is in the right subtree\n            //    (e.g., p.val < root.val < q.val or q.val < root.val < p.val).\n            else {\n                return root;\n            }\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}