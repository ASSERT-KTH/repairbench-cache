{
    "generation": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            // It's good practice for robustness, though constraints might make root initially non-null\n            // if p and q are guaranteed to be in the tree.\n            if (root == null) {\n                return null;\n            }\n\n            int pVal = p.val;\n            int qVal = q.val;\n            int rootVal = root.val;\n\n            // If both p and q have values smaller than the current root's value,\n            // then the LCA must be in the left subtree.\n            if (pVal < rootVal && qVal < rootVal) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            // If both p and q have values larger than the current root's value,\n            // then the LCA must be in the right subtree.\n            else if (pVal > rootVal && qVal > rootVal) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            // Otherwise, the current root is the LCA. This occurs if:\n            // 1. p.val == root.val (p is the current root).\n            // 2. q.val == root.val (q is the current root).\n            // 3. p.val < root.val and q.val > root.val (p is in left, q is in right).\n            // 4. p.val > root.val and q.val < root.val (p is in right, q is in left).\n            // In all these scenarios, the current root node is the LCA.\n            else {\n                return root;\n            }\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}