{
    "generation": "    /**\n     * Creates a period from the given millisecond duration with the standard period type\n     * and ISO rules, ensuring that the calculation is performed with the time-only period type.\n     * <p>\n     * The calculation uses the hour, minute, second and millisecond fields.\n     * The millisecond duration is converted into a period based on a 24 hour day,\n     * 60 minute hour, 60 second minute and 1000 millisecond second.\n     * The result will have a standard period type, but only the time fields will be populated.\n     *\n     * @param duration  the duration, in milliseconds\n     */\n    protected BasePeriod(long duration) {\n        // Calculate period values using PeriodType.time() using UTC Chronology\n        // This ensures that the duration is distributed only across time fields H, M, S, Ms.\n        PeriodType timeType = PeriodType.time();\n        // Use UTC chronology for calculation as it is duration based, not calendar based.\n        Chronology chrono = ISOChronology.getInstanceUTC();\n        int[] values = chrono.get(timeType, duration);\n\n        // Extract time field values from the calculation result\n        // PeriodType.time() has H, M, S, Ms fields at indices 0, 1, 2, 3 respectively\n        int hours   = values[0]; // timeType.indexOf(DurationFieldType.hours()) == 0\n        int minutes = values[1]; // timeType.indexOf(DurationFieldType.minutes()) == 1\n        int seconds = values[2]; // timeType.indexOf(DurationFieldType.seconds()) == 2\n        int millis  = values[3]; // timeType.indexOf(DurationFieldType.millis()) == 3\n\n        // Construct the period using the explicit field constructor,\n        // setting date fields to zero and using standard period type.\n        // This fulfills the contract: standard type, but calculated using time-only logic.\n        this(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());\n        // bug [3264409] fixed by recalculating based on time fields only\n        // and using the appropriate constructor to set standard type with correct values.\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}