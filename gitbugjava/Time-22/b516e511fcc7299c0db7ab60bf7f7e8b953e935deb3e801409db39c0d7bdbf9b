{
    "generation": "    /**\n     * Creates a period from the given millisecond duration with the standard period type\n     * and ISO rules, ensuring that the calculation is performed with the time-only period type.\n     * <p>\n     * The calculation uses the hour, minute, second and millisecond fields.\n     * The chronology used is ISO UTC.\n     *\n     * @param duration  the duration, in milliseconds\n     */\n    protected BasePeriod(long duration) {\n        this(PeriodType.standard(), // Specify standard type for the resulting period\n             calculateStandardTimeOnlyValues(duration), // Calculate values using time-only logic\n             ISOChronology.getInstanceUTC()); // Use UTC chronology for calculation consistency\n        // bug [3264409] - Fixed by explicitly using time-only calculation logic\n    }\n\n    /**\n     * Calculates period values based only on time fields (H, M, S, Ms)\n     * from a duration, assuming standard definitions (e.g., 60 min/hr).\n     * The returned array matches the order of PeriodType.standard().\n     *\n     * @param duration the duration in milliseconds\n     * @return int[] array of values [Y, M, W, D, H, M, S, Ms]\n     */\n    private static int[] calculateStandardTimeOnlyValues(long duration) {\n        long hours = duration / DateTimeConstants.MILLIS_PER_HOUR;\n        long durationLeft = duration % DateTimeConstants.MILLIS_PER_HOUR;\n        int minutes = (int) (durationLeft / DateTimeConstants.MILLIS_PER_MINUTE);\n        durationLeft %= DateTimeConstants.MILLIS_PER_MINUTE;\n        int seconds = (int) (durationLeft / DateTimeConstants.MILLIS_PER_SECOND);\n        durationLeft %= DateTimeConstants.MILLIS_PER_SECOND;\n        int millis = (int) durationLeft;\n\n        if (hours < Integer.MIN_VALUE || hours > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"Period value overflow: Hours\");\n        }\n\n        // Return array matching PeriodType.standard() order [Y, M, W, D, H, M, S, Ms]\n        // Date fields are explicitly set to 0 as per the method's contract.\n        return new int[] {0, 0, 0, 0, (int) hours, minutes, seconds, millis};\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}