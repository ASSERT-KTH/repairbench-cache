{
    "generation": "    /**\n     * Creates a period from the given millisecond duration with the standard period type\n     * and ISO rules, ensuring that the calculation is performed with the time-only period type.\n     * <p>\n     * The calculation uses the hour, minute, second and millisecond fields.\n     *\n     * @param duration  the duration, in milliseconds\n     */\n    protected BasePeriod(long duration) {\n        super(); // Call base class constructor\n        \n        // Define the period types involved:\n        // - requiredType: The type this period object should have (standard).\n        // - calcType: The type to use for the initial calculation from duration (time-only).\n        PeriodType requiredType = PeriodType.standard();\n        PeriodType calcType = PeriodType.time();\n        \n        // Obtain the Chronology (ISO default) for the calculation.\n        // Using getInstance() implies default time zone, which is consistent with\n        // how durations without specific instants are typically handled, focusing on magnitudes.\n        // The time field calculations (h, m, s, ms) are independent of time zone for ISO.\n        Chronology chrono = ISOChronology.getInstance();\n\n        // Calculate the period fields using the time-only period type.\n        // Chronology.get(PeriodType, long) calculates the fields based on the duration\n        // according to the rules of the specified PeriodType.\n        // For PeriodType.time(), this yields [hours, minutes, seconds, millis].\n        int[] timeValues = chrono.get(calcType, duration);\n\n        // Create the final values array, sized according to the standard period type.\n        // The standard type includes years, months, weeks, days, hours, minutes, seconds, millis.\n        int[] standardValues = new int[requiredType.size()]; // size is 8 for standard\n\n        // Populate the standardValues array.\n        // Copy the calculated time field values into the correct positions for the standard type.\n        // Indices for PeriodType.standard(): Y=0, M=1, W=2, D=3, h=4, m=5, s=6, ms=7\n        // Indices for PeriodType.time(): h=0, m=1, s=2, ms=3\n        // We map timeValues[0..3] to standardValues[4..7].\n        // The date fields (years, months, weeks, days) remain zero, as per the requirement\n        // that the calculation only uses time fields.\n        standardValues[4] = timeValues[0]; // Hours\n        standardValues[5] = timeValues[1]; // Minutes\n        standardValues[6] = timeValues[2]; // Seconds\n        standardValues[7] = timeValues[3]; // Millis\n        \n        // Set the internal state (type and values) of this BasePeriod instance.\n        // We directly assign to iType and iValues, bypassing other constructors/setters,\n        // to ensure the object represents the computed state accurately.\n        this.iType = requiredType;\n        this.iValues = standardValues;\n        // bug [3264409] fixed by performing calculation with time-only type\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}