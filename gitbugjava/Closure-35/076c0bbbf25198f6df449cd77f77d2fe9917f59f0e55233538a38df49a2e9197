{
    "generation": "import com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.ObjectType;\n// NOTE: Assumes 'registry' is an instance variable of type JSTypeRegistry in the enclosing class.\n\n/**\n * Suppose X is an object with inferred properties.\n * Suppose also that X is used in a way where it would only type-check\n * correctly if some of those properties are widened.\n * Then we should be polite and automatically widen X's properties for him.\n *\n * For a concrete example, consider:\n * param x {{prop: (number|undefined)}}\n * function f(x) {}\n * f({});\n *\n * If we give the anonymous object an inferred property of (number|undefined),\n * then this code will type-check appropriately.\n */\nprivate void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  // Handle Union Types recursively. If the type is a union, we apply the\n  // inference logic to each alternate type in the union.\n  if (type.isUnionType()) {\n    for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n      inferPropertyTypesToMatchConstraint(alternate, constraint);\n    }\n    return; // Done processing the union\n  }\n\n  // Original logic for non-union types (now applied to each alternate if type was a union)\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    // Restrict the type being checked to its object form (excluding null/undefined).\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      // Iterate over properties defined in the constraint record type.\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        // We only infer properties that are not explicitly declared on the object type.\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer;\n          if (!objType.hasProperty(prop)) {\n            // If the object type doesn't have the property at all,\n            // infer it as T | undefined, where T is the property type from the constraint.\n            // This allows {} to match {prop: (T|undefined)}.\n            typeToInfer =\n                registry.getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n          } else {\n            // If the object type already has the property (likely inferred),\n            // we use the property type from the constraint. This might implicitly widen\n            // the existing property type if defineInferredProperty handles it.\n            // Example: objType has prop:number, constraint has prop:Object.\n            // We define prop:Object.\n            typeToInfer = propType;\n          }\n          // Define the inferred property on the object type. This mutates the type,\n          // potentially adding the property or widening an existing inferred one.\n          // The 'null' indicates this property definition comes from inference, not source code.\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}