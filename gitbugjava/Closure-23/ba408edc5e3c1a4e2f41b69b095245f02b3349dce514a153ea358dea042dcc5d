{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    // Ensure the index is a number.\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    // Check for non-integer indices, NaN, or Infinity.\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // Check for negative indices.\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element at the specified index.\n    Node current = left.getFirstChild();\n    // Iterate intIndex times to advance `current` to the correct node.\n    for (int i = 0; i < intIndex && current != null; i++) {\n      current = current.getNext();\n    }\n\n    // Check if the index is out of bounds.\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // We found the element node 'current'.\n    Node elem = current;\n    Node replacementNode;\n\n    // Handle empty elements, e.g., in [, 1][0]\n    if (elem.isEmpty()) {\n      // Create a new undefined node, preserving source info from the element.\n      replacementNode = NodeUtil.newUndefinedNode(elem);\n    } else {\n      // Detach the element from the original array literal.\n      // This is important for preserving the node's structure and source info\n      // when it replaces the GETELEM node.\n      left.removeChild(elem);\n      replacementNode = elem;\n    }\n\n    // Replace the entire GETELEM node (n) with the replacement node.\n    parent.replaceChild(n, replacementNode);\n    reportCodeChange();\n\n    // Return the node that replaced 'n'.\n    return replacementNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}