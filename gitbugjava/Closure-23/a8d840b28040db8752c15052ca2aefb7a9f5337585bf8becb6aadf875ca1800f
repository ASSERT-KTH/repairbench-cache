{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n\n    // Check index validity: must be a non-negative integer.\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n    // Check index bounds: must be non-negative.\n    // Bounds check against array length happens below.\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n\n    // Iterate through the array elements up to the target index.\n    // Check elements *before* the target index for side effects.\n    for (int i = 0; current != null; i++) {\n       if (i < intIndex) {\n         // Check side effects of element before the target index.\n         if (NodeUtil.mayHaveSideEffects(current, compiler)) {\n            return n; // Bail out: Preceding element has side effects.\n         }\n       } else if (i == intIndex) {\n         // Found the element at the target index.\n         elem = current;\n         break; // Element found, exit loop.\n       }\n       // Move to the next sibling element.\n       current = current.getNext();\n    }\n\n    // After the loop, if elem is null, the index was out of bounds.\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // We found the element 'elem' at the target index.\n    // Detach it from the array and prepare the replacement node.\n    Node replacementNode;\n    if (elem.isEmpty()) {\n      // Element is an array hole (EMPTY node), replace with 'undefined'.\n      replacementNode = NodeUtil.newUndefinedNode(elem);\n      // Detach the original EMPTY node.\n      elem.detach();\n    } else {\n      // Element is a regular node, detach it to be used as the replacement.\n      replacementNode = elem.detach();\n    }\n\n    // Replace the GETELEM node 'n' with the detached element or 'undefined'.\n    n.replaceWith(replacementNode);\n    reportCodeChange();\n\n    // Return the replacement node as the new node in the AST.\n    return replacementNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}