{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope); // Traverse the constructor expression first.\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null; // This will be the type of the object created by 'new'.\n    FunctionType ct = null; // This will be the function type of the constructor.\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n        // We can't do inference if the constructor type is unknown.\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // Handle NoObjectType, which is technically a FunctionType\n          // for the purpose of constructing objects.\n          ct = (FunctionType) constructorType;\n        }\n\n        if (ct != null && ct.isConstructor()) {\n          // If we found a valid constructor type:\n          // 1. Infer types for the arguments passed to the constructor.\n          inferArgumentsSlotTypes(n, ct);\n          // 2. Determine the type of the object that will be created.\n          type = ct.getInstanceType();\n        }\n        // If ct is null or not a constructor, type remains null for now.\n      }\n    }\n\n    // Now traverse the arguments. If inferArgumentsSlotTypes ran, it might have\n    // updated the types of argument nodes, influencing this traversal.\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    // Set the JSType for the NEW node itself.\n    // If 'type' is still null (e.g., constructorType was null, or ct wasn't a\n    // constructor), the NEW node's type will be set to null, matching\n    // the original code's behavior in those cases.\n    // If the constructor type was Unknown, we set it to Unknown above.\n    n.setJSType(type);\n\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}