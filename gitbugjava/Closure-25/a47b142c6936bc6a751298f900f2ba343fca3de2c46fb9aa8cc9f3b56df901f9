{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope); // Traverse constructor identifier\n    JSType constructorType = constructor.getJSType();\n    FunctionType ct = null; // Constructor function type\n    JSType type = null; // Instance type\n\n    // Determine the FunctionType ct\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        // Attempt to get the FunctionType\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // Handle NoObjectType case, which is implicitly constructible\n          // and implements FunctionType.\n          ct = (FunctionType) constructorType;\n        }\n\n        // Ensure ct is actually a constructor before using it.\n        // If ct is null or not a constructor, we'll handle it below.\n        if (ct != null && !ct.isConstructor()) {\n           ct = null; // Treat non-constructor functions as invalid for 'new'.\n        }\n      }\n    }\n\n    // Perform backwards inference and traverse arguments if we have a valid constructor type\n    if (ct != null) {\n        // Infer arguments based on parameter types (updates scope)\n        // and traverse arguments.\n        scope = inferArgumentsCoupled(scope, n, ct);\n        // Determine the instance type created by 'new'\n        type = ct.getInstanceType();\n    } else {\n        // If constructor is not valid/unknown, still traverse arguments\n        // to catch errors/side effects within argument expressions.\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n          scope = traverse(arg, scope);\n        }\n        // If we couldn't determine the constructor type earlier, or it wasn't\n        // a valid constructor, the result type is unknown.\n        if (type == null) { // type might already be UNKNOWN_TYPE if constructorType was unknown\n          type = getNativeType(UNKNOWN_TYPE);\n        }\n    }\n\n    // Set the JSType for the 'new' expression node. Type should not be null here.\n    Preconditions.checkNotNull(type, \"Calculated type for new expression cannot be null.\");\n    n.setJSType(type);\n\n    // Return the scope, potentially modified by argument inference/traversal\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}