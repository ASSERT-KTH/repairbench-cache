{
    "generation": "    /**\n     * Returns true iff they are equal as defined by\n     * {@link #equals(double,double,int) equals(x, y, 1)}.\n     * <p>\n     * This method handles NaN values according to the IEEE754 standard,\n     * i.e. <code>NaN != NaN</code>. It differs from the behavior of\n     * {@link #equalsIncludingNaN(double, double)}.</p>\n     *\n     * @param x first value\n     * @param y second value\n     * @return {@code true} if the values are equal.\n     */\n    public static boolean equals(double x, double y) {\n        // We don't use \"equals(x, y, 1)\" as the Javadoc suggests because\n        // the contract for equals(double[], double[]) requires that\n        // NaN != NaN. The behavior of equals(double, double, int)\n        // might treat NaNs as equal depending on its specific implementation,\n        // which would violate the array equals contract.\n        // The standard == comparison correctly handles NaN != NaN.\n        return x == y;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}