{
    "generation": "        /**\n         * Method called to check if the default type handler should be\n         * used for given type.\n         * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n         * use typing; that is both due to them being concrete and final,\n         * and since actual serializers and deserializers will also ignore any\n         * attempts to enforce typing.\n         */\n        public boolean useForType(JavaType t)\n        {\n            switch (_appliesFor) {\n            case NON_CONCRETE_AND_ARRAYS:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // fall through\n            case OBJECT_AND_NON_CONCRETE:\n                // usually caller should have checked for main type exclusion, but perhaps\n                // not for contents -- so check here:\n                // [databind#88] Should not apply to JSON tree models:\n                return ((t.getRawClass() == Object.class) || !t.isConcrete())\n                        && !TreeNode.class.isAssignableFrom(t.getRawClass());\n\n            case NON_FINAL:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // [databind#88] Should not apply to JSON tree models:\n                // Also, do NOT apply final to Objects as they are NOT final,\n                // but should use OBJECT_AND_NON_CONCRETE instead\n                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass())\n                        // [databind#1845]: Also avoid Object.class\n                        && (t.getRawClass() != Object.class);\n            default:\n            //case JAVA_LANG_OBJECT:\n                return (t.getRawClass() == Object.class);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}