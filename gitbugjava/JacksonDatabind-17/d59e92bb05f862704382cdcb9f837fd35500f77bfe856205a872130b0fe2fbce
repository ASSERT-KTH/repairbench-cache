{
    "generation": "        /**\n         * Method called to check if the default type handler should be\n         * used for given type.\n         * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n         * use typing; that is both due to them being concrete and final,\n         * and since actual serializers and deserializers will also ignore any\n         * attempts to enforce typing.\n         */\n        public boolean useForType(JavaType t)\n        {\n            switch (_appliesFor) {\n            case NON_CONCRETE_AND_ARRAYS:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // fall through\n            case OBJECT_AND_NON_CONCRETE:\n                 // First check for Object.class\n                 if (t.getRawClass() == Object.class) {\n                     return true;\n                 }\n                 // Then non-concrete types, but NOT TreeNode implementations (databind#88, databind#793)\n                 return (!t.isConcrete()\n                         && !TreeNode.class.isAssignableFrom(t.getRawClass()));\n\n            case NON_FINAL:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // [Issue#88] Should not apply to JSON tree models:\n                // Minor optimization: let's not call isFinal() twice\n                if (t.isFinal()) {\n                    return false;\n                }\n                // Maybe exclude primitive types too?\n//                if (t.isPrimitive()) { return false; }\n                \n                // And finally, exclude TreeNode implementations\n                return !TreeNode.class.isAssignableFrom(t.getRawClass());\n            default:\n            //case JAVA_LANG_OBJECT:\n                return (t.getRawClass() == Object.class);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}