{
    "generation": "    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n        for (int i = 0; i < s.length(); ) { // Loop increment is now handled manually inside the loop\n            int c = s.codePointAt(i);\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c > 127) { // out of ascii range\n                // URLEncoder.encode operates on strings. We convert the codepoint to its String\n                // representation first. Character.toChars handles supplementary characters correctly\n                // (creating a 2-char array for them if needed).\n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));\n                // ^^ is a bit heavy-handed - if perf critical, we could optimize\n            } else {\n                // ASCII character (0-127), not a space.\n                sb.append((char) c);\n            }\n            // Advance 'i' by the number of char units covered by the current code point.\n            // This is 1 for BMP characters and 2 for supplementary characters (like emojis).\n            i += Character.charCount(c);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}