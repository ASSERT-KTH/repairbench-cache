{
    "generation": "    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n        // The original loop (for i = 0; i < s.length(); i++) increments the index by 1 in each iteration.\n        // However, s.codePointAt(i) correctly extracts a Unicode code point, which might consume one or two char units\n        // (for BMP or supplementary characters, respectively).\n        // If a supplementary character (like an emoji) is encountered, it is represented by a surrogate pair (two 'char's).\n        // After processing the full code point at index 'i', the loop's automatic 'i++' would lead to the next iteration\n        // starting at 'i+1', which would be the second 'char' of the just-processed surrogate pair.\n        // This unpaired surrogate would then be incorrectly interpreted and encoded (often as '%3F' for replacement character).\n        // The fix is to advance the index 'i' by Character.charCount(c) to correctly skip the second surrogate char\n        // when a supplementary character is processed.\n        for (int i = 0; i < s.length(); /* increment handled inside */) {\n            int c = s.codePointAt(i); // Get the Unicode code point at the current index\n\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c > 127) { // Character is outside of the ASCII range, requires encoding\n                // Character.toChars(c) converts the code point into a char array.\n                // For BMP characters, it returns a single char. For supplementary characters, it returns a surrogate pair (two chars).\n                // URLEncoder.encode then correctly encodes this char sequence to UTF-8.\n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));\n            } else { // ASCII character, append directly\n                sb.append((char) c);\n            }\n\n            // Advance the index by the number of Java char units consumed by the current code point.\n            // This is 1 for BMP characters and 2 for supplementary characters.\n            i += Character.charCount(c);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}