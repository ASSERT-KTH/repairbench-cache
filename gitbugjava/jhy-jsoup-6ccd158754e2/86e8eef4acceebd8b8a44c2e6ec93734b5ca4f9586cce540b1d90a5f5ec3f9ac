{
    "generation": "import java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets; // Assuming UTF_8 is similar to StandardCharsets.UTF_8\n\n// Assuming UTF_8 is a defined Charset, like:\n// import java.nio.charset.Charset;\n// private static final Charset UTF_8 = StandardCharsets.UTF_8;\n// Or comes from org.jsoup.helper.DataUtil.UTF_8 as seen in imports usually\n\n// The fix involves correctly advancing the loop index when dealing with supplementary characters (code points > 0xFFFF),\n// which are represented by two char units (a surrogate pair) in Java Strings.\n// The original code always incremented the index by 1, causing the second char (low surrogate) of a supplementary character\n// to be processed incorrectly in the next iteration.\n\n    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n        for (int i = 0; i < s.length(); ) { // Modified loop: manual index increment inside\n            int c = s.codePointAt(i); // Correctly reads full code point, potentially spanning two chars\n            int charCount = Character.charCount(c); // Determine how many chars this code point occupies (1 or 2)\n\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c < 128) { // In ASCII range (excluding space, handled above)\n                sb.append((char) c);\n            } else { // Out of ASCII range (c >= 128), needs encoding\n                // Using Character.toChars(c) handles both BMP and supplementary characters correctly\n                // URLEncoder handles the conversion to bytes and percent-encoding\n                // Assuming UTF_8 is a Charset object available in the scope (e.g., StandardCharsets.UTF_8 or from DataUtil)\n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name()));\n                // ^^ is a bit heavy-handed - if perf critical, we could optimize by encoding bytes directly\n            }\n\n            i += charCount; // Advance index by the number of char units consumed (1 or 2)\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}