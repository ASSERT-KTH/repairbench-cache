{
    "generation": "import java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets; // Import needed for UTF_8\n\n// Assume UTF_8 is defined like:\n// import static org.jsoup.helper.HttpConnection.UTF_8;\n// Or use StandardCharsets.UTF_8 directly. The fix below uses StandardCharsets.UTF_8.\n\n    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n        // Iterate by code point to properly handle supplementary characters (like emojis)\n        for (int i = 0; i < s.length(); ) {\n            final int c = s.codePointAt(i); // get the code point at index i\n\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c <= 127) { // Basic ASCII range (0-127), excluding space\n                // Append basic ASCII characters directly\n                sb.append((char) c);\n            } else { // Character is non-ASCII (c > 127)\n                // This includes supplementary characters which are > 0xFFFF but also single chars > 127\n                // URLEncoder.encode handles converting the code point (via its char representation) to %-encoded UTF-8 bytes\n                // Character.toChars handles supplementary characters correctly, returning a 2-char array if needed\n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name()));\n                // ^^ is a bit heavy-handed - if perf critical, we could optimize\n            }\n\n            // Advance index by the number of chars used by the current code point (1 for BMP, 2 for supplementary)\n            i += Character.charCount(c);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}