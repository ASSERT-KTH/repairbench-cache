{
    "generation": "import java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\n// Assume UTF_8 is defined elsewhere, e.g.:\n// private static final Charset UTF_8 = StandardCharsets.UTF_8;\n\n// The fixed function:\n    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n        for (int i = 0; i < s.length(); ) { // Use manual increment inside the loop to handle supplementary characters correctly\n            int c = s.codePointAt(i);\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c > 127) { // out of ascii range\n                // Encode the full code point (which might be 1 or 2 chars)\n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name())); // Use StandardCharsets for clarity if possible, or keep existing UTF_8 field\n                // ^^ is a bit heavy-handed - if perf critical, we could optimize\n            } else {\n                // Basic ASCII characters are appended directly\n                sb.append((char) c);\n            }\n            // Advance index by the number of chars used by the current code point (1 for BMP, 2 for supplementary)\n            i += Character.charCount(c);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}