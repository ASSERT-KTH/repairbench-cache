{
    "generation": "private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n    // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n    for (int i = 0; i < s.length(); i++) {\n        int c = s.codePointAt(i);\n        if (c == ' ') {\n            sb.append(spaceAsPlus ? '+' : \"%20\");\n        } else if (c > 127) { // out of ascii range\n            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());\n            sb.append(encoded);\n            // in URLEncoder, astral codepoints are double-encoded as a two-character sequence; fix that\n            if (Character.isSupplementaryCodePoint(c)) {\n                sb.delete(sb.length() - 3, sb.length()); // delete the %3F (i.e. '?') that was tacked on the end\n            }\n            // ^^ is a bit heavy-handed - if perf critical, we could optimize\n        } else {\n            sb.append((char) c);\n        }\n        // URLEncoder encodes supplementary codepoints (astral unicode) as a two-character sequence, per the W3C spec\n        // for URL encoding, so we need to step over the low surrogate if we hit one\n        if (Character.isSupplementaryCodePoint(c)) {\n            i++; // next char is low surrogate, skip it\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}