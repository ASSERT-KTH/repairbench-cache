{
    "generation": "    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n        final int len = s.length();\n        for (int i = 0; i < len; ) { // Iterate by code point, incrementing i manually\n            int c = s.codePointAt(i);\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c > 127) { // out of ascii range\n                // This character is not in the basic ASCII range (0-127).\n                // It might be a BMP character (128-65535) or a supplementary character (>65535).\n                // We need to encode it using URLEncoder.\n                // Character.toChars(c) correctly handles both BMP and supplementary characters,\n                // returning a char[] of length 1 or 2 respectively.\n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));\n                // ^^ URLEncoder is a bit heavy-handed for single chars - if perf critical, we could optimize\n                // by doing the UTF-8 bytes -> % encoding manually.\n            } else {\n                // This character is in the basic ASCII range (0-127), excluding space handled above.\n                // Append it directly.\n                sb.append((char) c);\n            }\n            // Advance the index 'i' by the number of char units used by the current code point.\n            // This will be 1 for BMP characters and 2 for supplementary characters.\n            i += Character.charCount(c);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}