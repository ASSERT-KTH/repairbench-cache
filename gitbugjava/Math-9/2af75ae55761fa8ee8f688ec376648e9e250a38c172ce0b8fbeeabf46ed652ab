{
    "generation": "    /** Get a line with reversed direction.\n     * @return a new instance, with reversed direction\n     */\n    public Line revert() {\n        // The constructor Line(p1, p2) calculates the direction vector as (p2 - p1).normalize()\n        // and the zero point (closest to origin) based on p1 and the normalized direction.\n        // If we use p1 = zero and p2 = zero - direction, delta = -direction.\n        // Normalizing -direction (which should have norm 1) can introduce floating point errors\n        // if the norm calculation result is not exactly 1.0 or if the 1.0/sqrt(norm) calculation is imprecise.\n        // This leads to the reverted direction being slightly different from negate(direction).\n\n        // To avoid this, we can choose p1 and p2 such that the normalization calculation is more robust.\n        // Let p1 = this.zero\n        // Let p2 = this.zero - 2 * this.direction\n        // Then delta = p2 - p1 = -2 * this.direction.\n        // The norm squared is (-2)^2 * ||direction||^2 = 4 * 1 = 4.\n        // The normalization factor is 1 / sqrt(4) = 1 / 2 = 0.5.\n        // The new direction = 0.5 * delta = 0.5 * (-2 * this.direction) = -this.direction.\n        // This calculation involving sqrt(4.0) = 2.0 and 1.0/2.0 = 0.5 is likely more numerically stable\n        // than calculations involving sqrt(1.0).\n        // The zero point calculation in the constructor using p1=this.zero and new_direction = -this.direction\n        // should yield the same zero point, as this.zero is orthogonal to this.direction.\n        final Line reverted = new Line(this.zero, this.zero.subtract(this.direction.scalarMultiply(2.0)));\n        return reverted;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}