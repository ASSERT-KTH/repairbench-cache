{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        // Multiple possibilities...\n        JsonNode n = currentNode();\n        if (n != null) {\n            // [databind#2096]: although `binaryValue()` works for real binary node\n            // and embedded \"POJO\" node, coercion from TextNode may require variant, so:\n            byte[] data = n.binaryValue();\n            // Check if the node itself is binary or can be coerced by default:\n            if (data != null) {\n                return data;\n            }\n            // Second check: maybe it's embedded object?\n            if (n.isPojo()) {\n                Object ob = ((POJONode) n).getPojo();\n                if (ob instanceof byte[]) {\n                    return (byte[]) ob;\n                }\n            }\n            // Third check: maybe textual, requiring Base64 decoding?\n            // 15-Aug-2018, tatu: [databind#2096] Must use variant passed by caller\n            if (n.isTextual()) {\n                final String str = n.textValue();\n                if (str != null) {\n                    // Variant is passed by caller, use it:\n                    try {\n                        return b64variant.decode(str);\n                    } catch (IllegalArgumentException e) {\n                        // Problem: how should we indicate it? Need context... for now,\n                        // just wrap in a JsonParseException\n                        // 26-Oct-2018, tatu: Use variant name in error msg\n                        throw _constructError(\"Cannot access contents of \"+n.getClass().getName()+\" as binary\"\n                                +\" (\"+b64variant.getName()+\")\" // info about variant added in 2.9.7\n                                +\" due to broken Base64 encoding: \"+e.getMessage(),\n                                e);\n                    }\n                }\n            }\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}