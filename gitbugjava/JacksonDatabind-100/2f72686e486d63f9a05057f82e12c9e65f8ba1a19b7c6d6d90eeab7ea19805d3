{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        // Multiple possibilities...\n        JsonNode n = currentNode();\n        if (n != null) {\n            // If node is textual, must use specialized method that potentially uses\n            // the variant (compared to default String/byte[] conversions)\n            if (n.isTextual()) {\n                 // 15-Aug-2018, tatu: [databind#2096] requires variant handling for TextNode\n                 return ((TextNode)n).getBinaryValue(b64variant);\n            }\n            \n            // Check for binary node or POJO node holding byte[]...\n            // Note: `binaryValue()` does not necessarily use variant; assumption\n            // is that it's conventional base64 for BinaryNode (and for POJONode?)\n\n            // [databind#2096]: although `binaryValue()` works for real binary node\n            // and embedded \"POJO\" node, coercion from TextNode may require variant, so:\n            // (Above check handles TextNode)\n            \n            byte[] data = n.binaryValue();\n            if (data != null) {\n                return data;\n            }\n            if (n.isPojo()) {\n                Object ob = ((POJONode) n).getPojo();\n                if (ob instanceof byte[]) {\n                    return (byte[]) ob;\n                }\n            }\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}