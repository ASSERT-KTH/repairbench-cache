{
    "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.Map; // Assuming Entities.full is a Map accessible in the context\nimport org.jsoup.nodes.Entities; // Assuming Entities.full and Entities.unescapePattern are static members here\n\n// The static members Entities.unescapePattern and Entities.full are assumed to be defined\n// in the surrounding class, typically org.jsoup.nodes.Entities.\n\nclass BuggyClass { // Wrapper class for context, replace with actual class if needed\n    // Assume Entities.unescapePattern and Entities.full are defined and accessible statics\n    private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n    private static final Map<String, Integer> full = Entities.getFullEntities(); // Example: Obtain the map\n\n    /**\n     * Unescape the input string.\n     *\n     * @param string to unescape.\n     * @return unescaped string.\n     */\n    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n        // Use StringBuffer as required by Matcher.appendReplacement\n        StringBuffer accum = new StringBuffer(string.length());\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3); // Captured numeric value group\n            if (num != null) {\n                // Numeric entity\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // group(2) is hex indicator 'x' or 'X'\n                    charval = Integer.parseInt(num, base); // Use parseInt for primitive int\n                } catch (NumberFormatException e) {\n                    // charval remains -1 => keep original string\n                }\n            } else {\n                // Named entity\n                String name = m.group(1); // Captured entity name group\n                if (full.containsKey(name)) {\n                    charval = full.get(name);\n                }\n            }\n\n            if (charval != -1) {\n                // Valid entity found, replace it.\n                String replacement;\n                // Check if the character is outside the Basic Multilingual Plane (BMP)\n                if (charval > Character.MAX_VALUE) { // Use Character.MAX_VALUE ('\\uFFFF') for check\n                    replacement = new String(Character.toChars(charval));\n                } else {\n                    replacement = Character.toString((char) charval);\n                }\n                // *** FIX: Use Matcher.quoteReplacement to escape special characters like '\\' and '$' ***\n                m.appendReplacement(accum, Matcher.quoteReplacement(replacement));\n            } else {\n                // Invalid entity (numeric parse error or named entity not found).\n                // Append the original matched sequence.\n                // No need for quoteReplacement here as m.group(0) is the original literal string.\n                m.appendReplacement(accum, m.group(0));\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}