{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Define sibling nodes once for use throughout this block\n            Node prevSiblingNode = previousSibling();\n            Node nextSiblingNode = nextSibling();\n\n            // Initial trim flags based on TextNode's position within its parent\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSiblingNode == null; // Use nextSiblingNode var\n\n            // --- Start of fix: Adjust trim flags based on adjacent block elements ---\n            if (prevSiblingNode instanceof Element) {\n                Element prevElem = (Element) prevSiblingNode;\n                if (prevElem.tag().isBlock() || prevElem.tag().formatAsBlock()) {\n                    trimLeading = true;\n                }\n            }\n\n            if (nextSiblingNode instanceof Element) {\n                Element nextElem = (Element) nextSiblingNode;\n                if (nextElem.tag().isBlock() || nextElem.tag().formatAsBlock()) {\n                    trimTrailing = true;\n                }\n            }\n            // --- End of fix ---\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            boolean isBlank = isBlank();\n            // Use 'nextSiblingNode' var instead of a new call to nextSibling()\n            boolean couldSkip = (nextSiblingNode instanceof Element && ((Element) nextSiblingNode).shouldIndent(out)) // next will indent\n                || (nextSiblingNode instanceof TextNode && (((TextNode) nextSiblingNode).isBlank())); // next is blank text\n            if (couldSkip && isBlank) return;\n\n            // Indent logic: Use 'prevSiblingNode' var.\n            // The original 'br' check (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            // is simplified: (prevSiblingNode instanceof Element) implies siblingIndex > 0 if prevSiblingNode is not null.\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (prevSiblingNode instanceof Element && ((Element) prevSiblingNode).normalName().equals(\"br\"))\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}