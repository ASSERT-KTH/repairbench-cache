{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            boolean isBlank = isBlank(); // Calculate isBlank once for efficiency and clarity.\n            if (isBlank) {\n                Node next = nextSibling(); // Get next sibling for skip checks.\n\n                // Condition 1: Skip if next is a block-like element or another blank text node.\n                // This is the original logic of 'couldSkip'.\n                if ((next instanceof Element && ((Element) next).shouldIndent(out)) ||\n                    (next instanceof TextNode && ((TextNode) next).isBlank())) {\n                    return;\n                }\n\n                // Condition 2: Skip if previous element was block-like, this node is blank, and next is effectively inline.\n                // This specifically handles cases like <p>Block</p> [this blank node] <span>Inline</span>.\n                Node prev = previousSibling(); // Get previous sibling for this check.\n                if (prev instanceof Element) {\n                    Element prevElem = (Element) prev;\n                    if (prevElem.tag().isBlock() || prevElem.tag().formatAsBlock()) {\n                        // Previous element is block-like. This TextNode is blank.\n                        // Next node is not block-like and not a blank text node (due to Condition 1's fall-through).\n                        // So, if next is not null, it must be an inline element or non-blank text.\n                        if (next != null) {\n                            return;\n                        }\n                        // If next is null (i.e., pattern: Block - Blank - EndOfParent):\n                        // This blank TextNode's content will effectively be emptied by trimTrailing=true during Entities.escape.\n                        // No explicit 'return' needed here for this specific sub-case.\n                    }\n                }\n                // If prev is null (i.e., this blank TextNode is the first child of its parent):\n                // This blank TextNode's content will effectively be emptied by trimLeading=true during Entities.escape.\n                // No explicit 'return' needed here for this specific sub-case.\n            }\n\n            // Indent logic:\n            // Executed if normaliseWhite is true, AND the node was not skipped by the 'return' statements above.\n            // This applies to:\n            //  - Non-blank TextNodes.\n            //  - Blank TextNodes that were not skipped by the above logic (e.g., Inline - Blank - Inline, or Blank after <br>).\n            // The 'isBlank' variable (calculated earlier) is used in the first two indent conditions.\n            Node prev = previousSibling(); // Get previous sibling for indent logic, as in the original code.\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n                // Note: The third condition for indenting (after <br>) does not check !isBlank.\n                // This means a blank node after a <br> that wasn't skipped above WILL be indented. This preserves original behavior.\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}