{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            Node prev = previousSibling();\n            Node next = nextSibling();\n\n            // Determine if the previous sibling is a block-level element or a <br> tag.\n            // Whitespace preceding this TextNode should be trimmed if so.\n            boolean prevIsBlockOrBr = false;\n            if (prev instanceof Element) {\n                Element prevElem = (Element) prev;\n                prevIsBlockOrBr = prevElem.tag().isBlock() || prevElem.tag().formatAsBlock() || prevElem.normalName().equals(\"br\");\n            }\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || (parentNode instanceof Document) || prevIsBlockOrBr;\n\n            // Determine if the next sibling is a block-level element or a <br> tag.\n            // Whitespace trailing this TextNode should be trimmed if so.\n            boolean nextIsBlockOrBr = false;\n            if (next instanceof Element) {\n                Element nextElem = (Element) next;\n                nextIsBlockOrBr = nextElem.tag().isBlock() || nextElem.tag().formatAsBlock() || nextElem.normalName().equals(\"br\");\n            }\n            trimTrailing = (trimLikeBlock && next == null) || nextIsBlockOrBr;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            // indent logic - unchanged\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br>\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}