{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text is just whitespace, and it's not a space preserving tag, we may want to skip it.\n            Node next = nextSibling();\n            Node prev = previousSibling(); // Moved up for use in skip logic\n            boolean isBlank = isBlank();\n\n            if (isBlank) {\n                // if the next node will indent, or the next node is blank (from re-parenting),\n                // or the previous node was a block, skip this text node\n                boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));\n                boolean nextIsBlankTextNode = (next instanceof TextNode && (((TextNode) next).isBlank()));\n                \n                boolean prevIsBlock = false;\n                if (prev instanceof Element) {\n                    Element prevElem = (Element) prev;\n                    if (prevElem.tag().isBlock() || prevElem.tag().formatAsBlock()) {\n                        prevIsBlock = true;\n                    }\n                }\n\n                if (nextWillIndent || nextIsBlankTextNode || prevIsBlock) {\n                    return; // skip this blank text node\n                }\n            }\n            \n            // Indent logic (ensure prev is available for the <br> check)\n            // (The other conditions use parent and siblingIndex, or !isBlank which is already determined)\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}