{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        // Determine if this text consists solely of whitespace.\n        boolean isBlank = isBlank();\n        // --- FIX: If a blank text node sits between non-text siblings (e.g. between elements),\n        // it\u2019s only formatting cruft, so skip outputting it.\n        if (isBlank\n                && ((previousSibling() == null || !(previousSibling() instanceof TextNode))\n                    && (nextSibling() == null || !(nextSibling() instanceof TextNode)))) {\n            return;\n        }\n\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && nextSibling() == null;\n\n        // If this text is just whitespace, and the next node is about to be indented,\n        // skip this text. (For example, a newline between elements that should be collapsed.)\n        Node next = nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n            || (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && isBlank)\n            return;\n\n        Node prev = previousSibling();\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)\n            || (out.outline() && siblingNodes().size() > 0 && !isBlank)\n            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")))\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}