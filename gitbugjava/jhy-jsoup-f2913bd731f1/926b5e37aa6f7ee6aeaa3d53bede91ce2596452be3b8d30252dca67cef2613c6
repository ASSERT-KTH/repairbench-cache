{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextElementSibling() == null;\n\n            Node next = nextElementSibling();  // Fixed previous mistake: nextSibling() was causing issues\n            boolean isBlank = isBlank();\n\n            boolean couldSkip = \n                (next instanceof Element && ((Element) next).shouldIndent(out)) ||  \n                (next instanceof TextNode && ((TextNode) next).isBlank()) ||\n                (previousElementSibling() != null && next instanceof Element); // Add condition to skip when between element siblings\n\n            if (couldSkip && isBlank) return;\n\n            Node prev = previousElementSibling();\n            if (\n                (siblingIndex == 0 && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}