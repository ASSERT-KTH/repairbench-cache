{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // preserveWhitespace needs recursive check up the tree; let's assume Element.preserveWhitespace exists and does that.\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        if (!normaliseWhite) {\n            Entities.escape(accum, coreValue(), out, false, false, false, false);\n            return;\n        }\n\n        // outerHtmlHead execution for TextNode when normaliseWhite is true\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        Node prev = previousSibling(); // Calculate previous sibling once\n        Node next = nextSibling(); // Calculate next sibling once\n        boolean isBlank = isBlank(); // Check blankness once\n\n        // Calculate trim flags. Start with original logic:\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && next == null; // Use cached 'next'\n\n        // FIX: Add specific condition: If this node is blank, and previous sibling was a block, trim the leading space\n        if (!trimLeading && isBlank && prev instanceof Element && ((Element) prev).tag().isBlock()) {\n            trimLeading = true;\n        }\n\n        // Check if this node should be skipped entirely\n        boolean couldSkip = false;\n        if (next instanceof Element) {\n            // If next element will indent, potentially skip this blank node\n            couldSkip = ((Element) next).shouldIndent(out);\n        } else if (next instanceof TextNode) {\n            // If next node is also blank text, potentially skip this one (e.g. after reparenting)\n            couldSkip = ((TextNode) next).isBlank();\n        }\n\n        // If this node is blank, and the check above determined it could be skipped, then return early.\n        if (couldSkip && isBlank) {\n            return;\n        }\n\n        // Indentation check for this TextNode itself\n        if (\n            // If it's the first node in a block parent, and it's not blank.\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n            // If in outline mode, and there are siblings, and it's not blank.\n            (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n            // If the previous sibling was a <br> element.\n            (prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n        ) {\n            indent(accum, depth, out);\n        }\n\n        // Finally, escape and append the text content, applying normalization and calculated trim flags.\n        // Pass normaliseWhite=true because we are inside the normalization block.\n        Entities.escape(accum, coreValue(), out, false, true, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}