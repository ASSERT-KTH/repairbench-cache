{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            Node next = nextSibling();\n            Node prev = previousSibling(); // Moved declaration of 'prev' earlier to be used in new skip condition\n            boolean isBlank = isBlank();\n\n            // Check if this text node is just whitespace and should be skipped entirely\n            if (isBlank) {\n                // Condition 1: If previous sibling is a block and next sibling is an inline element,\n                // the whitespace text node between them should be removed. E.g., `</p>\\n<span>`\n                boolean prevBlock = prev instanceof Element && ((Element) prev).tag().isBlock();\n                boolean nextInline = next instanceof Element && !((Element) next).tag().isBlock();\n                if (prevBlock && nextInline) {\n                    return;\n                }\n\n                // Condition 2 (existing logic): If the next node will cause an indent (e.g., another block element),\n                // or the next node is also blank text, skip this text node.\n                boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n                                    || (next instanceof TextNode && (((TextNode) next).isBlank()));\n                if (couldSkip) {\n                    return;\n                }\n            }\n\n            // Original indentation logic, only applies if the text node was NOT skipped\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}