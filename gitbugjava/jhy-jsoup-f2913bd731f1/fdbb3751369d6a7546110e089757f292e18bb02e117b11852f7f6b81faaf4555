{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // Get prev and next siblings immediately for all subsequent checks\n            Node next = nextSibling();\n            Node prev = previousSibling(); // Moved up so 'prev' is available for the new skip condition\n            boolean isBlank = isBlank();\n\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n\n            // NEW CONDITION: if this text node is blank, follows a block-like element, and is followed by an\n            // element that should not cause an indent (e.g., an inline element).\n            // This prevents an unwanted space when pretty printing.\n            boolean skipBetweenBlockAndInline = isBlank\n                                                && (prev instanceof Element && ((Element) prev).tag().isBlock())\n                                                && (next instanceof Element && !((Element) next).shouldIndent(out));\n\n            // If the text node is blank and it falls into either the original skip condition or the new one, return early.\n            if ((couldSkip || skipBetweenBlockAndInline) && isBlank) return;\n\n            // Now, use prev for the indent logic\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}