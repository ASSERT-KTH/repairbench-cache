{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && nextSibling() == null;\n\n        // obtain the adjacent nodes once:\n        Node next = nextSibling();\n        Node prev = previousSibling();\n        boolean isBlank = isBlank();\n        // if the next node will be indented (or is a blank text node from re-parenting), skip output if this text is blank:\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n                            || (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && isBlank)\n            return;\n\n        // Additionally, if this is a blank text node sandwiched between two elements,\n        // and at least one of its neighbours is block-level, treat it as formatting whitespace and skip it.\n        if (isBlank && prev instanceof Element && next instanceof Element) {\n            boolean prevIsBlock = ((Element) prev).tag().isBlock();\n            boolean nextIsBlock = ((Element) next).tag().isBlock();\n            if (prevIsBlock || nextIsBlock)\n                return;\n        }\n\n        if (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n        ) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}