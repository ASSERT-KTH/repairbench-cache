{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        // First, check if this text node is entirely whitespace.\n        boolean blank = isBlank();\n        // If the whitespace immediately follows a block-level element, then skip it.\n        if (blank) {\n            Node previous = previousSibling();\n            if (previous instanceof Element) {\n                Element prevEl = (Element) previous;\n                if (prevEl.tag().isBlock() || prevEl.tag().formatAsBlock())\n                    return;\n            }\n        }\n\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && nextSibling() == null;\n\n        Node next = nextSibling();\n        // If the next node is one that would be indented or is blank (from reparenting),\n        // and this text node is only whitespace, then skip outputting it.\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n                         || (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && blank)\n            return;\n\n        Node previous = previousSibling();\n        // Conditionally indent if this text node isn\u2019t blank and:\n        // - it is the first sibling and the parent formats as block, or\n        // - outline mode is enabled, or\n        // - the previous sibling is a <br> element.\n        if (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !blank) ||\n            (out.outline() && siblingNodes().size() > 0 && !blank) ||\n            (siblingIndex > 0 && previous instanceof Element && ((Element) previous).normalName().equals(\"br\"))\n        ) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}