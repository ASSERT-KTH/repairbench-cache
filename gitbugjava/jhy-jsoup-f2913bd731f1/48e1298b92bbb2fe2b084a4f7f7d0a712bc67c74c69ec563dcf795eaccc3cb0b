{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // True if pretty printing and parent doesn't preserve WS (e.g. not <pre>)\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock()); // True if parent is like a block element\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) { // Only adjust whitespace if pretty printing and not preserving\n            Node prev = previousSibling(); // Calculate prev sibling earlier\n            Node next = nextSibling(); // Calculate next sibling earlier\n\n            // Determine if leading whitespace should be trimmed\n            trimLeading =\n                // Conditions for trimming leading WS:\n                // 1. First node in a block-like parent, or first node in Document\n                ((trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document)\n                // 2. OR This node follows a block element (fixes issue #1379)\n                || (prev instanceof Element && ((Element) prev).tag().isBlock());\n\n            // Determine if trailing whitespace should be trimmed\n            trimTrailing = trimLikeBlock && next == null; // last node in block-like parent\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next Element will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // OR next Node is blank text\n            if (couldSkip && isBlank) return; // Don't output this node\n\n            // Conditions for indenting this node:\n            if (\n                // 1. First non-blank node in a formatAsBlock parent\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                // 2. OR Outline mode is on, parent has >0 children, and this node is not blank\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                // 3. OR Previous sibling was a <br> element (and this node is not the first child) - special case wrap on inline <br>\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        // Now output the text, applying normalization and calculated trimming\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}