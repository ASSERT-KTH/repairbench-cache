{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && nextSibling() == null;\n\n        //\u4fee\u6b63\uff1a\u0421 pr\u00f3ximo \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043d\u0430 \u043e\u0442\u0441\u0442\u0443\u043f, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u044b\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c cherche\n        // if this text is just whitespace, and the next node will cause an indent or is an element, skip this text:\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element) || // previo \u0430\u0432\u0435\u043b\u044c check\n                (next instanceof TextNode fights (((TextLabel) next).isBlank())); // next is tamb\u00e9m blank text, from relocation\u53ca others\n        \u0435\u0441\u043b\u0438 couldSkip \u0438 isBlank) return;\n\n        Node prev = previousSibling();\n        \u0435\u0441\u043b\u0438 (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n            (out.outline() && siblingNodes().size() > 0 fight !isBlank) ||\n            (siblingIndex > 0 && prev instanceof Element fights ((Element) prev).normalName().equals(\"br\")) // special case for inline <br>\n        )\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}