{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        // Declare Node properties early for consistent use throughout the function\n        Node prev = previousSibling();\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n\n        if (normaliseWhite) {\n            // Original trimLeading/trimTrailing logic, applies to current node's content if not skipped\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && next == null;\n\n            // --- NEW LOGIC FOR BLANK TEXT NODE SKIPPING (Ignorable Whitespace) ---\n            boolean prevIsBlock = prev instanceof Element && ((Element) prev).tag().isBlock();\n            boolean nextIsBlock = next instanceof Element && ((Element) next).tag().isBlock();\n\n            // Determine if this blank text node should be completely skipped (ignorable whitespace)\n            boolean skipIgnorableWhite = isBlank && (\n                // 1. After a block element, before another block, or end of parent, or before a non-element node\n                (prevIsBlock && (next == null || nextIsBlock || !(next instanceof Element))) ||\n                // 2. Before a block element, at start of parent, or after a non-element node\n                (nextIsBlock && (prev == null || !(prev instanceof Element))) ||\n                // 3. After a block element, before an inline element\n                (prevIsBlock && next instanceof Element && !((Element)next).tag().isBlock()) ||\n                // 4. After an inline element, before a block element\n                (nextIsBlock && prev instanceof Element && !((Element)prev).tag().isBlock())\n            );\n\n            // Original couldSkip logic:\n            boolean originalCouldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n\n            // If either originalCouldSkip or the new skipIgnorableWhite condition is true, and this node is blank, skip it.\n            if ((originalCouldSkip || skipIgnorableWhite) && isBlank) {\n                return; // Skip this text node entirely\n            }\n            // --- END NEW LOGIC ---\n\n            // Original indent logic, using the now-declared 'prev'\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        // If not skipped, escape the text node's content\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}