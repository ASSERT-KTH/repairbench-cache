{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        // When a text node is adjacent to a block element, we want to trim its boundary whitespace.\n        trimLeading = (trimLikeBlock && (siblingIndex == 0\n                        || (previousSibling() instanceof Element\n                            && ((Element) previousSibling()).tag().isBlock())))\n                      || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && (nextSibling() == null\n                        || (nextSibling() instanceof Element\n                            && ((Element) nextSibling()).tag().isBlock()));\n\n        // If this text is just whitespace and the next sibling would normally trigger an indent, skip output.\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n                            || (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && isBlank)\n            return;\n\n        Node prev = previousSibling();\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)\n            || (out.outline() && siblingNodes().size() > 0 && !isBlank)\n            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}