{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n\n            // Determine the next node and whether it will cause indentation\n            Node next = nextSibling();\n            final boolean nextIsIndenting = (next instanceof Element) && ((Element) next).shouldIndent(out);\n\n            // Set trimTrailing to true if next node is either null or does not cause indentation\n            trimTrailing = trimLikeBlock && (next == null || !nextIsIndenting);\n\n            // Check if this blank node can be skipped if next will indent\n            final boolean isBlank = isBlank();\n            final boolean couldSkip = isBlank && (nextIsIndenting || (next instanceof TextNode && ((TextNode) next).isBlank()));\n            if (couldSkip) return;\n\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) \n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}