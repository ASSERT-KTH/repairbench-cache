{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Get siblings and isBlank status early for potential skip decisions\n            Node prev = previousSibling();\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n\n            // Calculate trim flags that will be passed to Entities.escape if not skipped\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && next == null; // Use 'next' variable for consistency\n\n            // Check if this blank text node should be skipped entirely (not outputted)\n            // 1. If the next node should indent (e.g., it's a block or formatAsBlock element)\n            boolean nextShouldIndent = next instanceof Element && ((Element) next).shouldIndent(out);\n            // 2. If the next node is also a blank TextNode (e.g., from re-parenting)\n            boolean nextIsBlankText = next instanceof TextNode && (((TextNode) next).isBlank());\n            // 3. If the previous node was a block-like element and the next node is a pure inline element,\n            //    the whitespace between them should typically be removed for pretty printing.\n            boolean prevIsBlocklike = prev instanceof Element && (((Element)prev).tag().isBlock() || ((Element)prev).tag().formatAsBlock());\n            boolean nextIsPureInline = next instanceof Element && !((Element)next).tag().isBlock() && !((Element)next).tag().formatAsBlock();\n\n            if (isBlank && (nextShouldIndent || nextIsBlankText || (prevIsBlocklike && nextIsPureInline))) {\n                return; // Skip this whitespace node completely\n            }\n\n            // Original indent logic, only applies if the text node was not skipped\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}