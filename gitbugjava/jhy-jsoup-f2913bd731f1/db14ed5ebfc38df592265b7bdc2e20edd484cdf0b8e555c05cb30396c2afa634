{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        final Node prev = previousSibling();\n        final Node next = nextSibling();\n        final boolean isBlankNode = isBlank(); // Cache result of isBlank()\n\n        if (normaliseWhite) {\n            // Determine if previous sibling was a block element\n            boolean prevIsBlock = (prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock()));\n\n            // Determine if leading whitespace should be trimmed\n            trimLeading = (trimLikeBlock && siblingIndex == 0) // First child of a block-like parent\n                          || (parentNode instanceof Document) // Direct child of the Document node\n                          || (isBlankNode && prevIsBlock); // NEW: if current text node is blank and previous sibling was a block\n            \n            // Determine if trailing whitespace should be trimmed\n            trimTrailing = trimLikeBlock && next == null;\n\n            // If this text is just whitespace, and the next node will cause an indent, skip this text:\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlankNode) return;\n\n            // If we didn't skip, maybe we need to indent\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlankNode) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlankNode) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}