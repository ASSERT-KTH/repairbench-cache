{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    // True if the parent is \u201cblock\u2010like\u201d (either a block tag or one formatted as a block)\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    // If in pretty-print mode and this text is only whitespace in a block context, skip output.\n    if (normaliseWhite && isBlank() && trimLikeBlock)\n        return;\n        \n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && nextSibling() == null;\n\n        // If this text is just whitespace, and the next node will cause an indent, skip it:\n        Node next = nextSibling();\n        boolean textIsBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n            || (next instanceof TextNode && ((TextNode) next).isBlank());\n        if (couldSkip && textIsBlank)\n            return;\n\n        Node prev = previousSibling();\n        if (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !textIsBlank) ||\n            (out.outline() && siblingNodes().size() > 0 && !textIsBlank) ||\n            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n        ) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}