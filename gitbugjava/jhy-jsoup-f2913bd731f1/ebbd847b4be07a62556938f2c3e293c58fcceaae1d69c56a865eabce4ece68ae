{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final @javax.annotation.Nullable Node prev = previousSibling(); // Calculate earlier\n        final @javax.annotation.Nullable Node next = nextSibling(); // Calculate earlier\n        // Check if whitespace normalization should occur. Does not apply in textarea or pre tags.\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // preserveWhitespace checks parent == null || !parent.tag().preserveWhitespace()\n\n        boolean trimLeading = false; // Determine if leading whitespace should be trimmed\n        boolean trimTrailing = false; // Determine if trailing whitespace should be trimmed\n\n        if (normaliseWhite) {\n            // Conditions for trimming leading whitespace:\n            // 1. Parent is a block/formatAsBlock element AND this is the first child (siblingIndex == 0)\n            // 2. Previous sibling exists AND is a block element\n            // 3. Parent is the document root (heuristic for trimming leading space)\n            final boolean isFirstChild = siblingIndex == 0;\n            // parent check required for tag access, and parent instanceof Document check\n            final boolean parentIsBlockLike = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n            final boolean prevIsBlock = prev instanceof Element && ((Element) prev).tag().isBlock();\n            final boolean parentIsDoc = parentNode instanceof Document;\n\n            if ((parentIsBlockLike && isFirstChild) || prevIsBlock || parentIsDoc) {\n                trimLeading = true;\n            }\n\n            // Conditions for trimming trailing whitespace:\n            // 1. Parent is a block/formatAsBlock element AND this is the last child (next == null)\n            // 2. Next sibling exists AND is a block element\n            final boolean isLastChild = next == null;\n            final boolean nextIsBlock = next instanceof Element && ((Element) next).tag().isBlock();\n\n            if ((parentIsBlockLike && isLastChild) || nextIsBlock) {\n                trimTrailing = true;\n            }\n\n            // If the text node is blank and the next node will cause an indent, or is blank, skip this node.\n            // Allows tidy handling of text nodes that are just newlines.\n            boolean isBlank = isBlank(); // calculate once\n            // original skip logic - check if blank and next sibling would indent, or is blank text\n            if (next != null && isBlank) {\n                boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n                    || (next instanceof TextNode && ((TextNode) next).isBlank());\n                if (couldSkip) {\n                    return; // skip this node entirely\n                }\n            }\n\n            // Indentation logic:\n            // Indent if this node is not blank AND is the first representation on a newline:\n            boolean requiresIndent = false;\n            if (!isBlank) { // only indent non-blank text nodes where normaliseWhite is true\n                // Condition 1: First child in a format-as-block parent (and parent exists)\n                if (isFirstChild && parent != null && parent.tag().formatAsBlock()) {\n                    requiresIndent = true;\n                }\n                // Condition 2: Follows a block or br element\n                else if (prev instanceof Element) {\n                    Element prevEl = (Element) prev;\n                    // Indent after blocks or <br> tags\n                    if (prevEl.tag().isBlock() || prevEl.normalName().equals(\"br\")) {\n                        requiresIndent = true;\n                    }\n                }\n                // Condition 3: Outline mode is enabled (and there are siblings)\n                else if (out.outline() && siblingNodes().size() > 0) {\n                     requiresIndent = true;\n                }\n            }\n            // Apply indentation if required\n            if (requiresIndent) {\n                indent(accum, depth, out);\n            }\n        } // end if(normaliseWhite)\n\n        // Call escape with the calculated trim flags. The escape method will handle normalization and trimming based on flags.\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}