{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // Flag for pretty-printing normalization, respects preserveWhitespace\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        final boolean isBlank = isBlank();\n        final Node prev = previousSibling(); // Calculate once\n        final Node next = nextSibling(); // Calculate once\n\n        // Section 1: Determine if this node should be skipped entirely for pretty printing.\n        boolean skip = false;\n        if (normaliseWhite && isBlank) {\n            // Skip blank node if previous sibling is block\n            if (prev instanceof Element && ((Element) prev).tag().isBlock()) {\n                skip = true;\n            } else if (next instanceof Element) {\n                Element nextEl = (Element) next;\n                // Skip blank node if next sibling element will indent or is block\n                if (nextEl.shouldIndent(out) || nextEl.tag().isBlock()) {\n                    skip = true;\n                }\n            } else if (next instanceof TextNode && ((TextNode) next).isBlank()) {\n                // Skip blank node if next sibling is also blank text\n                skip = true;\n            }\n        }\n\n        if (skip) return; // Skip outputting this node\n\n        // Section 2: Determine if indentation is needed *before* this node.\n        boolean indentBefore = false;\n        if (prettyPrint && !isBlank) { // Indent only before non-blank text\n             // Check context for indentation requirement\n             if (\n                 // First node in a block-formatted parent?\n                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||\n                 // Outline mode active and node has siblings?\n                 (out.outline() && siblingNodes().size() > 0) ||\n                 // Immediately after a <br> element?\n                 (prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n             ) {\n                 indentBefore = true;\n             }\n        }\n\n        // Section 3: Determine trimming needs for the content itself.\n        // These flags are used by Entities.escape during normalization.\n        boolean trimLeading = false, trimTrailing = false;\n        if (normaliseWhite) { // Trimming is part of normalization\n            // Check if the parent is block-like\n            final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n            // Trim leading space if first child in a block-like parent or the document root\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            // Trim trailing space if last child in a block-like parent\n            trimTrailing = trimLikeBlock && next == null; // Use hoisted 'next'\n        }\n\n        // Section 4: Perform indentation and output.\n        if (indentBefore) {\n            indent(accum, depth, out);\n        }\n        // Output the text content, applying escaping and normalization/trimming as needed.\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}