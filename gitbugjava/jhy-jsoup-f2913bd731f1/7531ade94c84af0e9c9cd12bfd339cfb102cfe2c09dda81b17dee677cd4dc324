{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && nextSibling() == null;\n\n        // if this text is just whitespace, and it sits between block-level and any element, skip it:\n        Node next = nextSibling();\n        Node prev = previousSibling();\n        boolean isBlank = isBlank();\n        boolean nextBlock = next instanceof Element && ((Element) next).shouldIndent(out);\n        boolean nextBlank = next instanceof TextNode && ((TextNode) next).isBlank();\n        boolean prevBlock = prev instanceof Element\n            && ((((Element) prev).tag().isBlock()) || (((Element) prev).tag().formatAsBlock()));\n        if (isBlank && (nextBlock || nextBlank || prevBlock)) {\n            return;\n        }\n\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)\n         || (out.outline() && siblingNodes().size() > 0 && !isBlank)\n         || (siblingIndex > 0 && prev instanceof Element\n             && ((Element) prev).normalName().equals(\"br\")))\n        {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}