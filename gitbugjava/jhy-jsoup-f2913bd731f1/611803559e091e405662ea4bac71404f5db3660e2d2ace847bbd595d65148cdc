{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // Don't normalize if preserveWhitespace is enabled = Don't trim if preserveWhitespace is enabled.\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text is just whitespace, and the previous node is block-like, skip this text:\n            Node prev = previousSibling();\n            boolean isBlank = isBlank(); // calculate isBlank once\n            if (isBlank && prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock())) {\n                return; // skip whitespace following a block\n            }\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text: (original logic)\n            Node next = nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n\n            // original indent logic\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first node in format-as-block container, if not blank\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // outline mode, if not blank\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}