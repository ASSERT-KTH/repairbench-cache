{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            Node prev = previousSibling(); // Calculate prev sibling once, used for trimLeading and indent logic\n\n            // Determine if leading whitespace should be trimmed\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            // New condition: if this TextNode follows a block element, trim its leading whitespace.\n            // This prevents a TextNode like \"\\n\" between a </p> and a <span> from becoming a \" \" space.\n            if (!trimLeading && prev instanceof Element) {\n                Element prevEl = (Element) prev;\n                if (prevEl.tag().isBlock() || prevEl.tag().formatAsBlock()) {\n                    trimLeading = true;\n                }\n            }\n\n            // Determine if trailing whitespace should be trimmed\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean isBlank = isBlank(); // is this TextNode empty or whitespace only?\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return; // don't output this text node\n\n            // Indent if required\n            // Original conditions for indent.\n            // The BR condition uses 'prev' calculated above. 'prev instanceof Element' correctly handles\n            // the case where prev is null (e.g. siblingIndex == 0).\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // Original buggy code did not have !isBlank here\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}