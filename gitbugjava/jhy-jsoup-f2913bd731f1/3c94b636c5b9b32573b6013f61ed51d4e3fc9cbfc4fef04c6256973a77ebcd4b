{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Initial calculation based on parent and sibling position\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // Additional trim logic based on previous and next element types\n            Node prev = previousSibling();\n            Node next = nextSibling();\n\n            // If the previous sibling is a block element, trim leading whitespace from this text node.\n            // This covers cases like `</p> ` where ` ` should be trimmed.\n            if (prev instanceof Element && ((Element) prev).tag().isBlock()) {\n                trimLeading = true;\n            }\n\n            // If the next sibling is a block element, trim trailing whitespace from this text node.\n            // This covers cases like ` <div>` where ` ` should be trimmed.\n            if (next instanceof Element && ((Element) next).tag().isBlock()) {\n                trimTrailing = true;\n            }\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node _next = nextSibling(); // Use a local var to avoid re-calling\n            boolean isBlank = isBlank();\n            boolean couldSkip = (_next instanceof Element && ((Element) _next).shouldIndent(out)) // next will indent\n                || (_next instanceof TextNode && (((TextNode) _next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            // Indent logic - only if not blank and other conditions met.\n            // Note: `prev` is re-declared here for safety, but `previousSibling()` would return the same.\n            Node _prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && _prev instanceof Element && ((Element) _prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}