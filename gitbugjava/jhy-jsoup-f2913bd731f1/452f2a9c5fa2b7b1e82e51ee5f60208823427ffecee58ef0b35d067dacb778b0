{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Determine previous, next siblings and if current node is blank early\n            // as they are used in trimLeading, couldSkip, and indent logic.\n            Node prev = previousSibling();\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n\n            // Original trimLeading: (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            // Added condition: || (prev instanceof Element && ((Element) prev).tag().isBlock() && isBlank)\n            // This handles cases like `</p>\\n<span>`, where the '\\n' is trimmed because 'p' is a block.\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document\n                          || (prev instanceof Element && ((Element) prev).tag().isBlock() && isBlank);\n\n            trimTrailing = trimLikeBlock && next == null;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            // Original couldSkip: (next instanceof Element && ((Element) next).shouldIndent(out)) || (next instanceof TextNode && (((TextNode) next).isBlank()));\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n                || (next instanceof TextNode && (((TextNode) next).isBlank()));\n            if (couldSkip && isBlank) return;\n\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}