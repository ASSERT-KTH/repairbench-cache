{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // Additional logic to trim whitespace between block elements\n            if (trimLikeBlock) {\n                Node prev = previousSibling();\n                if (prev instanceof Element && ((Element) prev).tag().isBlock()) {\n                    trimLeading = true;\n                }\n\n                Node next = nextSibling();\n                if (next instanceof Element && ((Element) next).tag().isBlock()) {\n                    trimTrailing = true;\n                }\n            }\n\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                             || (next instanceof TextNode && (((TextNode) next).isBlank()));\n            if (couldSkip && isBlank) return;\n\n            Node prevNode = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prevNode instanceof Element && ((Element) prevNode).normalName().equals(\"br\"))\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}