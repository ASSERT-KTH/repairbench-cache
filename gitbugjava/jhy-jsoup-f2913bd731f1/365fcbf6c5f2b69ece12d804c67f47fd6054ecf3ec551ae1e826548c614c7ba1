{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Determine initial trim flags for the text node's content based on its position within a block-like parent\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            Node next = nextSibling();\n            Node prev = previousSibling(); // Get previous node here for new conditions\n            boolean isBlank = isBlank(); // Cache isBlank() as it's used multiple times\n\n            // Fix: If this text node is just whitespace and it's adjacent to a block element, skip it entirely.\n            // This prevents unwanted spaces from newlines/tabs when block elements end or start,\n            // or when they are adjacent to inline elements, maintaining a compact output.\n            boolean prevIsBlock = (prev instanceof Element && ((Element) prev).tag().isBlock());\n            boolean nextIsBlock = (next instanceof Element && ((Element) next).tag().isBlock());\n\n            if (isBlank && (prevIsBlock || nextIsBlock)) {\n                return; // Skip this blank text node entirely\n            }\n\n            // Original logic: if this text is just whitespace, and the next node will cause an indent, skip this text:\n            boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out))\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (nextWillIndent && isBlank) return;\n\n            // Indent logic: add a newline/indent if specific conditions for a non-blank text node are met\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        // Escape and append the text node's value, applying determined trim and normalisation rules\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}