{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // normaliseWhite: parent null check is implicit as Element.preserveWhitespace handles null parentNode\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Calculate trim settings used by Entities.escape when normaliseWhite is true\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // Skip check:\n            final boolean isBlank = isBlank();\n            if (isBlank) {\n                // If this text is just whitespace, are we intending to skip it?\n                Node next = nextSibling();\n                Node prev = previousSibling();\n\n                boolean skip =\n                    // 1. Skip if the next node wants to indent (it will handle the leading space)\n                    (next instanceof Element && ((Element) next).shouldIndent(out))\n                    // 2. Skip if the next node is also blank (collapse adjacent blank text nodes)\n                    || (next instanceof TextNode && ((TextNode) next).isBlank())\n                    // 3. Skip if the previous node was a block/formatAsBlock (avoids spurious space after block, like <p> <span> vs <p><span>)\n                    || (prev instanceof Element && (((Element) prev).isBlock() || ((Element) prev).tag().formatAsBlock()));\n\n                if (skip) return; // Don't print this blank node\n            }\n\n            // Indent check (for the TextNode itself):\n            // If we are printing this node (e.g., it's not blank, or it's meaningful blank space like after a <br>),\n            // should we indent before writing the text?\n            Node prev = previousSibling(); // Re-fetch prev sibling for indent check robustness (might be null)\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // indent the first non-blank text node in a block parent\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // indent non-blank nodes in outline mode\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // indent after an inline <br>\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        // Print the text, applying normalization and calculated trimming\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}