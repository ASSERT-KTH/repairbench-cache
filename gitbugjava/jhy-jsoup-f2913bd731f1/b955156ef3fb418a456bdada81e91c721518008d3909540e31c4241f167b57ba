{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // determines if we are normalizing whitespace (removing leading/trailing space, consolidating internal space)\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        // used by Entities.escape() to determine if the start/end of the node needs trimming, if the node itself is boundary\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false; // flags for Entities.escape - not related to skipping the node\n\n        if (normaliseWhite) {\n            // calculate explicit trim flags for Entities.escape - only applied if node is not skipped\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text node is blank, and adjacent to a block, or the next node will indent, then skip this node\n            Node next = nextSibling();\n            Node prev = previousSibling(); // Calculate prev node\n            boolean isBlank = isBlank();\n\n            // Check if the previous node is a block element\n            boolean prevIsBlock = (prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock()));\n\n            // Check if the next node should indent, or is blank text\n            boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));\n            boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());\n\n            // *** FIX: Add prevIsBlock to the skip condition ***\n            // Skip if blank AND (prev is block OR next will indent OR next is blank text)\n            if (isBlank && (prevIsBlock || nextWillIndent || nextIsBlankText)) {\n                return; // skip this text node - formatting will be handled by adjacent element indentation\n            }\n\n            // Indentation logic (if node is not skipped)\n            if (\n                // indent if (!blank and first in block parent)\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                // indent if (!blank and outlining)\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                // indent if (previous is <br>) - handles blank nodes correctly after <br>\n                (prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        // If the node was not skipped, escape and print its content\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}