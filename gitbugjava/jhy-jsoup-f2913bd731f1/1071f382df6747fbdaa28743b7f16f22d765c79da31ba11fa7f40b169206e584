{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // If the parent element doesn't preserve whitespace, normalization occurs\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        // Check if the parent element is a block or acts like one for formatting\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Determine if leading/trailing whitespace should be trimmed based on context\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // If this text node is just whitespace, and normalization is enabled, decide whether to skip it entirely.\n            // This prevents inserting unnecessary spaces between block elements or before elements that will indent.\n            boolean isBlank = isBlank();\n            if (isBlank) { // Only consider skipping if the node is blank (whitespace only)\n                Node next = nextSibling();\n                Node prev = previousSibling();\n\n                // Check if the next sibling will handle indentation or is also blank text.\n                boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));\n                boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());\n                if (nextWillIndent || nextIsBlankText) {\n                    return; // Skip this blank node; the next element handles spacing or is also skippable.\n                }\n\n                // Check if the previous sibling was a block-level element.\n                // We want to skip blank nodes following block elements during pretty printing,\n                // unless it's after an inline <br> tag (which has special indent handling).\n                // The check for Element.preserveWhitespace on the parent handles cases like <pre>.\n                boolean prevIsBlock = prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock()) && !((Element) prev).normalName().equals(\"br\");\n                if (prevIsBlock) {\n                   return; // Skip this blank node as it directly follows a block element.\n                }\n            }\n\n            // Indentation logic: only applies if the node is not blank and meets certain conditions.\n            if (!isBlank) {\n                Node prev = previousSibling(); // Fetch previous sibling again if needed for <br> check\n                 // Conditions for indenting this text node:\n                 // 1. It's the first node within a block parent.\n                 // 2. Outline mode is enabled and there are siblings.\n                 // 3. It follows an inline <br> tag.\n                 if (\n                    (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||\n                    (out.outline() && siblingNodes().size() > 0) ||\n                    (prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n                 )\n                    indent(accum, depth, out);\n            }\n        }\n\n        // Finally, escape and append the text content, applying normalization and trimming if needed.\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}