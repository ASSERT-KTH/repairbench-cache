{
    "generation": "private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {\n    Parser parser = new Parser(PATTERN_ERI, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    long mask = parser.nextHexLong();\n\n    LinkedList<Position> positions = new LinkedList<>();\n\n    Integer power = parser.nextInt();\n\n    Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());\n    while (itemParser.find()) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        decodeLocation(position, itemParser);\n        positions.add(position);\n    }\n\n    Position position = positions.getLast();\n\n    skipLocation(parser);\n\n    if (power != null) {\n        position.set(Position.KEY_POWER, power * 0.001);\n    }\n\n    if (parser.hasNextAny(12)) {\n\n        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n        position.set(Position.KEY_HOURS, parseHours(parser.next()));\n        position.set(Position.PREFIX_ADC + 1, parser.next());\n        position.set(Position.PREFIX_ADC + 2, parser.next());\n        position.set(Position.PREFIX_ADC + 3, parser.next());\n        if (parser.hasNext(2)) {\n            position.set(Position.KEY_INPUT, parser.nextHexInt());\n            position.set(Position.KEY_OUTPUT, parser.nextHexInt());\n        }\n        if (parser.hasNext(4)) {\n            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n            decodeStatus(position, parser);\n        }\n\n        int index = 0;\n        String[] data = parser.next().split(\",\");\n\n        // skip device type\n        index++;\n\n        // digital fuel sensor (mask bit 0)\n        if (BitUtil.check(mask, 0)) {\n            // skip sensor id\n            index++;\n            int deviceCount = Integer.parseInt(data[index++]);\n            for (int i = 1; i <= deviceCount; i++) {\n                String fuelValue = data[index++];\n                if (!fuelValue.isEmpty()) {\n                    // digital fuel value is in hex\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(fuelValue, 16));\n                }\n            }\n        }\n\n        // temperature sensors (mask bit 1)\n        if (BitUtil.check(mask, 1)) {\n            int deviceCount = Integer.parseInt(data[index++]);\n            for (int i = 1; i <= deviceCount; i++) {\n                index++; // id\n                index++; // type\n                if (!data[index].isEmpty()) {\n                    position.set(\n                        Position.PREFIX_TEMP + i,\n                        (short) (Integer.parseInt(data[index], 16) * 0.0625)\n                    );\n                }\n                index++;\n            }\n        }\n\n        // CAN data (mask bit 2)\n        if (BitUtil.check(mask, 2)) {\n            index++;\n        }\n\n        // analog fuel/volume (mask bits 3 & 4)\n        if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {\n            int deviceCount = Integer.parseInt(data[index++]);\n            for (int i = 1; i <= deviceCount; i++) {\n                index++; // type\n                if (BitUtil.check(mask, 3)) {\n                    position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));\n                }\n                if (BitUtil.check(mask, 4)) {\n                    index++; // volume\n                }\n            }\n        }\n    }\n\n    if (parser.hasNext()) {\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    }\n\n    decodeDeviceTime(position, parser);\n    if (ignoreFixTime) {\n        positions.clear();\n        positions.add(position);\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}