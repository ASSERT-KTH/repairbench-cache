{
    "generation": "private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {\n    Parser parser = new Parser(PATTERN_ERI, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    long mask = parser.nextHexLong();\n\n    LinkedList<Position> positions = new LinkedList<>();\n\n    Integer power = parser.nextInt();\n\n    Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());\n    while (itemParser.find()) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        decodeLocation(position, itemParser);\n\n        positions.add(position);\n    }\n\n    Position position = positions.getLast();\n\n    skipLocation(parser);\n\n    if (power != null) {\n        position.set(Position.KEY_POWER, power * 0.001);\n    }\n\n    if (parser.hasNextAny(12)) {\n\n        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n        position.set(Position.KEY_HOURS, parseHours(parser.next()));\n        position.set(Position.PREFIX_ADC + 1, parser.next());\n        position.set(Position.PREFIX_ADC + 2, parser.next());\n        position.set(Position.PREFIX_ADC + 3, parser.next());\n        if (parser.hasNext(2)) {\n            position.set(Position.KEY_INPUT, parser.nextHexInt());\n            position.set(Position.KEY_OUTPUT, parser.nextHexInt());\n        }\n        if (parser.hasNext(4)) {\n            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n            decodeStatus(position, parser);\n        }\n\n        if (parser.hasNext()) {\n            String[] data = parser.next().split(\",\");\n            int index = 0;\n\n            // Device type (skip)\n            if (data.length > index) index++;\n\n            // Digital fuel sensor data\n            if (BitUtil.check(mask, 0)) {\n                if (data.length > index) index++;\n            }\n\n            // Temperature\n            if (BitUtil.check(mask, 1)) {\n                if (data.length > index) {\n                    int deviceCount = 0;\n                    try {\n                        deviceCount = Integer.parseInt(data[index++]);\n                    } catch (Exception e) {}\n                    for (int i = 1; i <= deviceCount; i++) {\n                        if (data.length > index) index++; // id\n                        if (data.length > index) index++; // type\n                        if (data.length > index && !data[index].isEmpty()) {\n                            try {\n                                double temp = (short) Integer.parseInt(data[index], 16) * 0.0625;\n                                position.set(Position.PREFIX_TEMP + i, temp);\n                            } catch (Exception e) {}\n                        }\n                        index++;\n                    }\n                }\n            }\n\n            // CAN data\n            if (BitUtil.check(mask, 2)) {\n                if (data.length > index) index++;\n            }\n\n            // Fuel level / volume\n            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {\n                if (data.length > index) {\n                    int deviceCount = 0;\n                    try {\n                        deviceCount = Integer.parseInt(data[index++]);\n                    } catch (Exception e) {}\n                    for (int i = 1; i <= deviceCount; i++) {\n                        if (data.length > index) index++; // type\n                        if (BitUtil.check(mask, 3) && data.length > index) {\n                            try {\n                                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index]));\n                            } catch (Exception e) {}\n                            index++;\n                        }\n                        if (BitUtil.check(mask, 4) && data.length > index) {\n                            index++; // volume (skip)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (parser.hasNext()) {\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    }\n\n    decodeDeviceTime(position, parser);\n    if (ignoreFixTime) {\n        positions.clear();\n        positions.add(position);\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}