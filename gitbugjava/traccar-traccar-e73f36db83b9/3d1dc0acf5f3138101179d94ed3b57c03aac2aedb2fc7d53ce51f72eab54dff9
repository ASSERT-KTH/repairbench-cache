{
    "generation": "private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {\n    Parser parser = new Parser(PATTERN_ERI, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    long mask = parser.nextHexLong();\n\n    LinkedList<Position> positions = new LinkedList<>();\n\n    Integer power = parser.nextInt();\n\n    Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());\n    while (itemParser.find()) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        decodeLocation(position, itemParser);\n\n        positions.add(position);\n    }\n\n    Position position = positions.getLast();\n\n    skipLocation(parser);\n\n    if (power != null) {\n        position.set(Position.KEY_POWER, power * 0.001);\n    }\n\n    if (parser.hasNextAny(12)) {\n        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n        position.set(Position.KEY_HOURS, parseHours(parser.next()));\n        position.set(Position.PREFIX_ADC + 1, parser.next());\n        position.set(Position.PREFIX_ADC + 2, parser.next());\n        position.set(Position.PREFIX_ADC + 3, parser.next());\n        if (parser.hasNext(2)) {\n            position.set(Position.KEY_INPUT, parser.nextHexInt());\n            position.set(Position.KEY_OUTPUT, parser.nextHexInt());\n        }\n        if (parser.hasNext(4)) {\n            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n            decodeStatus(position, parser);\n        }\n\n        int index = 0;\n        String[] data = parser.next().split(\",\");\n\n        // First field: device type (unused here)\n        index++;\n\n        if (BitUtil.check(mask, 0)) {\n            // Skip digital fuel sensor data if present\n            index++;\n        }\n\n        if (BitUtil.check(mask, 1)) {\n            // The sensor in mask bit 1 is now interpreted as a fuel sensor.\n            // Its value is sent as a hexadecimal number that should be converted\n            // using factor 0.0344 (so that e.g. 0x1168 \u2192 4456 * 0.0344 \u2248 153).\n            int deviceCount = Integer.parseInt(data[index++]);\n            for (int i = 1; i <= deviceCount; i++) {\n                index++; // skip sensor id\n                index++; // skip sensor type\n                if (!data[index].isEmpty()) {\n                    double fuelLevel = Integer.parseInt(data[index], 16) * 0.0344;\n                    position.set(Position.KEY_FUEL_LEVEL, fuelLevel);\n                }\n                index++;\n            }\n        }\n\n        if (BitUtil.check(mask, 2)) {\n            // Skip CAN data if present\n            index++;\n        }\n\n        if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {\n            int deviceCount = Integer.parseInt(data[index++]);\n            for (int i = 1; i <= deviceCount; i++) {\n                index++; // skip sensor type\n                if (BitUtil.check(mask, 3)) {\n                    position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));\n                }\n                if (BitUtil.check(mask, 4)) {\n                    index++; // skip volume\n                }\n            }\n        }\n    }\n\n    if (parser.hasNext()) {\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n    }\n\n    decodeDeviceTime(position, parser);\n    if (ignoreFixTime) {\n        positions.clear();\n        positions.add(position);\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}