{
    "generation": "    private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {\n        Parser parser = new Parser(PATTERN_ERI, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        long mask = parser.nextHexLong();\n        LinkedList<Position> positions = new LinkedList<>();\n        Integer power = parser.nextInt();\n        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());\n        while (itemParser.find()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            decodeLocation(position, itemParser);\n            positions.add(position);\n        }\n        Position position = positions.getLast();\n        skipLocation(parser);\n        if (power != null) {\n            position.set(Position.KEY_POWER, power * 0.001);\n        }\n        if (parser.hasNextAny(12)) {\n            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n            position.set(Position.KEY_HOURS, parseHours(parser.next()));\n            position.set(Position.PREFIX_ADC + 1, parser.next());\n            position.set(Position.PREFIX_ADC + 2, parser.next());\n            position.set(Position.PREFIX_ADC + 3, parser.next());\n            if (parser.hasNext(2)) {\n                position.set(Position.KEY_INPUT, parser.nextHexInt());\n                position.set(Position.KEY_OUTPUT, parser.nextHexInt());\n            }\n            if (parser.hasNext(4)) {\n                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n                decodeStatus(position, parser);\n            }\n            int index = 0;\n            String[] data = parser.next().split(\",\");\n            index += 1; // device type\n            if (BitUtil.check(mask, 0)) {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(data[index++]));\n            }\n            if (BitUtil.check(mask, 1)) {\n                int deviceCount = Integer.parseInt(data[index++]);\n                for (int i = 1; i <= deviceCount; i++) {\n                    index += 1; // id\n                    index += 1; // type\n                    if (!data[index++].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);\n                    }\n                }\n            }\n            if (BitUtil.check(mask, 2)) {\n                index += 1; // can data\n            }\n            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {\n                int deviceCount = Integer.parseInt(data[index++]);\n                for (int i = 1; i <= deviceCount; i++) {\n                    index += 1; // type\n                    if (BitUtil.check(mask, 3)) {\n                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));\n                    }\n                    if (BitUtil.check(mask, 4)) {\n                        index += 1; // volume\n                    }\n                }\n            }\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        }\n        decodeDeviceTime(position, parser);\n        if (ignoreFixTime) {\n            positions.clear();\n            positions.add(position);\n        }\n        return positions;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}