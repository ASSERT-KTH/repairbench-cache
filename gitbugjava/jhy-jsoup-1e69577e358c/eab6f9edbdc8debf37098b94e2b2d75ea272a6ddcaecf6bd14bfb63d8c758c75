{
    "generation": "URL build() {\n    try {\n        // Puny\u2011code the host (decode any % escapes, then IDN\u2010toASCII)\n        String protocol = u.getProtocol();\n        String userInfo = u.getUserInfo();\n        String host = IDN.toASCII(decodePart(u.getHost()));\n        int port = u.getPort();\n\n        // Preserve existing percent\u2010escapes in the path, but encode any non\u2011ASCII chars\n        String rawPath = u.getPath();\n        StringBuilder pathBuf = new StringBuilder();\n        for (int i = 0; i < rawPath.length(); i++) {\n            char c = rawPath.charAt(i);\n            if (c > 127) {\n                byte[] bytes = String.valueOf(c).getBytes(\"UTF-8\");\n                for (byte b : bytes) {\n                    pathBuf.append('%');\n                    pathBuf.append(Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)));\n                    pathBuf.append(Character.toUpperCase(Character.forDigit(b & 0xF, 16)));\n                }\n            } else {\n                pathBuf.append(c);\n            }\n        }\n        String path = pathBuf.toString();\n\n        // Build the normalized URL string\n        StringBuilder sb = StringUtil.borrowBuilder()\n            .append(protocol).append(\"://\");\n        if (userInfo != null && !userInfo.isEmpty()) {\n            sb.append(userInfo).append('@');\n        }\n        sb.append(host);\n        if (port != -1) {\n            sb.append(':').append(port);\n        }\n        if (path != null && !path.isEmpty()) {\n            if (!path.startsWith(\"/\")) sb.append('/');\n            sb.append(path);\n        } else {\n            sb.append('/');\n        }\n        if (q != null) {\n            sb.append('?');\n            appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n        }\n        if (u.getRef() != null) {\n            sb.append('#');\n            appendToAscii(u.getRef(), false, sb);\n        }\n\n        String normUrl = StringUtil.releaseBuilder(sb);\n        u = new URL(normUrl);\n        return u;\n\n    } catch (MalformedURLException | UnsupportedEncodingException e) {\n        // In production fall back to the original URL\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}