{
    "generation": "URL build() {\n    try {\n        // Re-encode the path so that any character that was percent\u2010encoded (like \u201c%2B\u201d) is preserved.\n        // (The URL\u2019s getPath() has already decoded escapes \u2013 so we must re\u2011encode characters like \u2018+\u2019)\n        String path = u.getPath();\n        StringBuilder pathEncoded = new StringBuilder();\n        for (int i = 0; i < path.length(); i++) {\n            char c = path.charAt(i);\n            // Allow letters, digits, and most punctuation \u2013 note that we *exclude* '+' so that a decoded plus becomes %2B.\n            if ((c >= 'A' && c <= 'Z') ||\n                (c >= 'a' && c <= 'z') ||\n                (c >= '0' && c <= '9') ||\n                \"-._~!$&'()*,;=:@/\".indexOf(c) != -1) {\n                pathEncoded.append(c);\n            } else {\n                // percent-encode the character (UTF-8 encoding)\n                byte[] bytes = String.valueOf(c).getBytes(\"UTF-8\");\n                for (byte b : bytes) {\n                    pathEncoded.append(String.format(\"%%%02X\", b));\n                }\n            }\n        }\n        String encodedPath = pathEncoded.toString();\n\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny-code, host decoding remains as before\n            u.getPort(),\n            encodedPath, // use our re-encoded path rather than decodePart(u.getPath())\n            null,\n            null // query and fragment appended later so as not to encode\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // For devel, we assert so that any incomplete normalization issues are caught;\n        // in prod we simply pass the original URL.\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}