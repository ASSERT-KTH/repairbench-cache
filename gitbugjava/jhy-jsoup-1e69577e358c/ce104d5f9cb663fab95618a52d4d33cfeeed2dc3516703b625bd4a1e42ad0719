{
    "generation": "URL build() {\n    try {\n        String protocol = u.getProtocol();\n        String userInfo = u.getUserInfo();\n        String host = IDN.toASCII(decodePart(u.getHost())); // puny-code\n        int port = u.getPort();\n        String path = u.getPath(); // don't decode the path, preserve the encoding\n        \n        // Build the base URL (without query and fragment)\n        StringBuilder sb = StringUtil.borrowBuilder()\n            .append(protocol).append(\"://\");\n        if (userInfo != null && !userInfo.isEmpty())\n            sb.append(userInfo).append('@');\n        sb.append(host);\n        if (port != -1)\n            sb.append(':').append(port);\n        if (path != null)\n            sb.append(path);\n        \n        // Append query and fragment\n        if (q != null) {\n            sb.append('?');\n            appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n        }\n        if (u.getRef() != null) {\n            sb.append('#');\n            appendToAscii(u.getRef(), false, sb);\n        }\n        \n        String normUrl = StringUtil.releaseBuilder(sb);\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}