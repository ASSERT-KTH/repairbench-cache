{
    "generation": "    URL build() {\n        try {\n            // Convert original URL to URI to access raw components like rawPath\n            URI initialUri = u.toURI(); \n            \n            // use the URI class to encode non-ascii in path\n            URI uri = new URI(\n                initialUri.getScheme(), // Use scheme from initial URI\n                initialUri.getRawUserInfo(), // Use raw user info to preserve explicit encoding if any\n                IDN.toASCII(decodePart(initialUri.getHost())), // puny-code, host needs to be decoded for IDN.toASCII\n                initialUri.getPort(), // Use port from initial URI\n                initialUri.getRawPath(), // FIX: Use raw path to preserve explicit %-encoding (e.g., %2B)\n                null, null // query and fragment appended later so as not to encode\n            );\n\n            String normUrl = uri.toASCIIString();\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n            u =  new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}