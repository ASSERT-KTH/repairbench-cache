{
    "generation": "    URL build() {\n        try {\n            // Get the URI representation of the original URL to access raw components\n            URI originalUri = u.toURI();\n\n            // Build a base URI with scheme, user info, host, and port.\n            // Path, query, and fragment are initially null to avoid URI's automatic encoding\n            // of components that we want to handle specially (like preserving raw path).\n            URI baseUri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                IDN.toASCII(decodePart(u.getHost())), // puny-code for host, and decode if necessary\n                u.getPort(),\n                null, null, null // path, query, and fragment are null\n            );\n\n            // Resolve the raw path from the original URI against the base URI.\n            // This correctly preserves existing percent-encoding in the path.\n            // If originalUri.getRawPath() is \"/%2B32\", resolve() will append it as is.\n            URI uri = baseUri.resolve(originalUri.getRawPath());\n\n            String normUrl = uri.toASCIIString();\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n            u =  new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}