{
    "generation": "    URL build() {\n        try {\n            String host = u.getHost();\n            String asciiHost = null;\n            if (host != null) {\n                // Convert to ASCII (Punycode) if non-ASCII exists. u.getHost() is Unicode.\n                asciiHost = IDN.toASCII(host);\n            }\n\n            // use the URI class to encode non-ascii in path\n            // and to protect existing %-encodings in path\n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                asciiHost, // Host can be null (e.g. file:/ URLs)\n                u.getPort(),\n                u.getPath(), // u.getPath() is %-encoded. URI constructor will re-encode if necessary (e.g. non-ASCII to %XX)\n                             // and preserves existing valid %-encodes like %2B, %20.\n                null, null // query and fragment appended later so as not to encode them here\n            );\n\n            String normUrl = uri.toASCIIString();\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n            u =  new URL(normUrl); // Create new URL from the normalized string.\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would primarily come from IDN.toASCII if an error occurs during conversion,\n            // or if an unsupported internal encoding is somehow referenced (highly unlikely for standard operations).\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}