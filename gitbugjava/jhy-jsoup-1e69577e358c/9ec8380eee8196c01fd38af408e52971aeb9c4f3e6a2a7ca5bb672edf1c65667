{
    "generation": "URL build() {\n    try {\n        // Pre-process the host using punycode\n        String host = IDN.toASCII(decodePart(u.getHost()));\n        \n        // Build a string URL manually instead of using URI to avoid re-encoding already encoded parts\n        StringBuilder sb = StringUtil.borrowBuilder()\n            .append(u.getProtocol())\n            .append(\"://\");\n        \n        if (u.getUserInfo() != null) {\n            sb.append(u.getUserInfo()).append('@');\n        }\n        \n        sb.append(host);\n        \n        if (u.getPort() != -1) {\n            sb.append(':').append(u.getPort());\n        }\n        \n        if (u.getPath() != null) {\n            sb.append(u.getPath()); // Keep path as is without decoding\n        }\n        \n        if (q != null) {\n            sb.append('?');\n            appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n        }\n        \n        if (u.getRef() != null) {\n            sb.append('#');\n            appendToAscii(u.getRef(), false, sb);\n        }\n        \n        String normUrl = StringUtil.releaseBuilder(sb);\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}