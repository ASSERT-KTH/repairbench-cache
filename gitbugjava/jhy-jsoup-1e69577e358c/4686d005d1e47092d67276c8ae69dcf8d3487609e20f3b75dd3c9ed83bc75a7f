{
    "generation": "    URL build() {\n        try {\n            // use the URI class to encode non-ascii in path\n            // Convert the URL to a URI first to access raw components\n            URI baseUri = u.toURI(); // This provides a URI representation of the current URL\n\n            URI uri = new URI(\n                baseUri.getScheme(),\n                baseUri.getUserInfo(),\n                IDN.toASCII(baseUri.getHost()), // puny-code: host must be decoded for IDN.toASCII\n                baseUri.getPort(),\n                baseUri.getRawPath(), // Use getRawPath() to preserve existing encoding like %2B\n                null, null // query and fragment appended later so as not to encode\n            );\n\n            String normUrl = uri.toASCIIString();\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n            u =  new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException e) {\n            // UnsupportedEncodingException removed as it would never happen with default UTF8\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}