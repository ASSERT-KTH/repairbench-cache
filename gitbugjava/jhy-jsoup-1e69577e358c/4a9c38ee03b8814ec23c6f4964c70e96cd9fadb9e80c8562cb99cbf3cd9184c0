{
    "generation": "URL build() {\n    try {\n        // use the URI class to encode non-ascii in path, but leave an already encoded path intact\n        // (i.e. do not decode u.getPath() so that \"%2B\" is not converted into a plain \"+\")\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny-code conversion on host\n            u.getPort(),\n            u.getPath(), // <\u2013\u2013 FIX: use the path as-is (do not call decodePart)\n            null, null // query and fragment are appended later so as not to have them re-encoded\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // In development we assert failure so that any normalization issues are caught,\n        // but in production the original URL is used (the UnsupportedEncodingException will never occur as UTF8 is always supported)\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}