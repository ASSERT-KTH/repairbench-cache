{
    "generation": "URL build() {\n    try {\n        // use the URI class to encode non-ascii in path, but preserve existing %\u2010encodings\n        URI original = u.toURI();\n        String rawPath = original.getRawPath();  // e.g. \"/%2B32\"\n        URI uri = new URI(\n            original.getScheme(),\n            original.getUserInfo(),\n            IDN.toASCII(decodePart(original.getHost())), // punycode the host\n            original.getPort(),\n            rawPath,    // preserve any % sequences in the path\n            null, null  // query and fragment appended later so as not to encode\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // on failure, fall back to the original URL\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}