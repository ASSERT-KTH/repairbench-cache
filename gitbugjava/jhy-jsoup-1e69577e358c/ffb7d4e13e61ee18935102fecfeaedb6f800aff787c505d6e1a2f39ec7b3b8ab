{
    "generation": "    URL build() {\n        try {\n            // use the URI class to encode non-ascii in path\n            // We use getRawPath() to retain original escaping, getPath() would decode it.\n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                IDN.toASCII(decodePart(u.getHost())), // puny-code host\n                u.getPort(),\n                u.getRawPath(), // Use raw path to preserve original encoding e.g. %2B\n                null, null // query and fragment appended later so as not to double-encode\n            );\n\n            String normUrl = uri.toASCIIString(); // generates encoded URL string\n\n            // Append query and fragment, which are not encoded by URI class\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    // Query needs specific encoding (application/x-www-form-urlencoded)\n                    // Let's assume appendToAscii handles this correctly.\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    // Fragment encoding rules are slightly different, assume appendToAscii handles it.\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n\n            // Create the final URL object\n            u = new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            // Using getRawPath() should minimize syntax exceptions if the original URL was valid.\n            assert Validate.assertFail(e.toString());\n            return u; // Return the original, less normalized URL on error\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}