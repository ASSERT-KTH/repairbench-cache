{
    "generation": "URL build() {\n    try {\n        // Construct a URI using the raw host but for the path, use u.getPath()\n        // (i.e. do not decode it) so that any percent-encoded characters are not lost.\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny-code conversion on host remains\n            u.getPort(),\n            u.getPath(), // do not decode the path \u2013 let non-ascii get encoded but preserve any % escapes\n            null, \n            null  // query and fragment will be appended later without further encoding\n        );\n        String normUrl = uri.toASCIIString();\n\n        // Because u.getPath() gives the decoded path (so that \"%2B\" becomes \"+\")\n        // we use the original URL\u2019s text (u.toExternalForm()) to extract the raw path.\n        // If the original raw path contains a '%' then we want to replace the path in normUrl\n        // with that original raw path so that encoded parts (like %2B) are preserved.\n        String original = u.toExternalForm();\n        int protoSep = original.indexOf(\"://\");\n        if (protoSep != -1) {\n            int origPathStart = original.indexOf(\"/\", protoSep + 3);\n            if (origPathStart != -1) {\n                int origPathEnd = original.length();\n                int qIdx = original.indexOf(\"?\", origPathStart);\n                if (qIdx != -1) origPathEnd = qIdx;\n                int fIdx = original.indexOf(\"#\", origPathStart);\n                if (fIdx != -1 && fIdx < origPathEnd) origPathEnd = fIdx;\n                String originalPath = original.substring(origPathStart, origPathEnd);\n                if (originalPath.contains(\"%\")) { // Only swap in if there was explicit encoding\n                    int normProtoSep = normUrl.indexOf(\"://\");\n                    if (normProtoSep != -1) {\n                        int normPathStart = normUrl.indexOf(\"/\", normProtoSep + 3);\n                        if (normPathStart != -1) {\n                            int normPathEnd = normUrl.length();\n                            int normQIdx = normUrl.indexOf(\"?\", normPathStart);\n                            if (normQIdx != -1) normPathEnd = normQIdx;\n                            int normFIdx = normUrl.indexOf(\"#\", normPathStart);\n                            if (normFIdx != -1 && normFIdx < normPathEnd) normPathEnd = normFIdx;\n                            normUrl = normUrl.substring(0, normPathStart)\n                                + originalPath\n                                + normUrl.substring(normPathEnd);\n                        }\n                    }\n                }\n            }\n        }\n\n        // Append query and fragment if available (unchanged to avoid extra encoding)\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // Development assert \u2013 in production we simply return the original URL.\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}