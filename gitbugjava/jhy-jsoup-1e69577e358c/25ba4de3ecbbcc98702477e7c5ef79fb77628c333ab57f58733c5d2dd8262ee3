{
    "generation": "    URL build() {\n        try {\n            // URL.getHost() returns the decoded hostname. IDN.toASCII expects a decoded hostname.\n            // Therefore, decodePart(u.getHost()) is redundant and can be simplified to u.getHost().\n            String host = IDN.toASCII(u.getHost());\n\n            // Build the base URI (scheme, userinfo, host, port) using the URI constructor.\n            // URL.getUserInfo() returns the decoded user info, which the URI constructor expects and will encode correctly.\n            // We pass null for path, query, and fragment as they will be appended manually to preserve original encoding.\n            URI baseUri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                host,\n                u.getPort(),\n                null, // path is handled separately\n                null, // query is handled separately\n                null  // fragment is handled separately\n            );\n\n            // Start building the full URL string.\n            // baseUri.toASCIIString() will produce \"https://example.com\" for the test case.\n            StringBuilder sb = StringUtil.borrowBuilder().append(baseUri.toASCIIString());\n\n            // Append the original path directly. URL.getPath() returns the already percent-encoded path (e.g., \"/%2B32\").\n            // Appending it directly preserves its existing encoding.\n            String originalPath = u.getPath();\n            if (originalPath != null && !originalPath.isEmpty()) {\n                sb.append(originalPath);\n            }\n\n            // Append query and fragment as in the original code.\n            // 'q' (user-provided query) and u.getRef() (URL fragment) are expected to be decoded,\n            // and appendToAscii will correctly re-encode them for the URL string.\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n\n            // Construct the final URL from the built string.\n            String normUrl = StringUtil.releaseBuilder(sb);\n            u = new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // We assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}