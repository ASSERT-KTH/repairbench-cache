{
    "generation": "    URL build() {\n        try {\n            // Convert original URL to URI to access its components.\n            // This allows us to use originalUri.getRawPath() to preserve path encoding.\n            URI originalUri = u.toURI();\n\n            // Reconstruct the URI using components from the original URI.\n            // Using originalUri.getAuthority() and originalUri.getRawPath() helps ensure\n            // hostnames (IDN) are correctly handled and path encodings are preserved.\n            // Query and fragment are null here as they are appended separately later.\n            URI uri = new URI(\n                originalUri.getScheme(),\n                originalUri.getAuthority(), // Includes userInfo, host, port\n                originalUri.getRawPath(),   // Preserves original path encoding like /%2B32\n                null, // Query will be appended later\n                null  // Fragment will be appended later\n            );\n\n            String normUrl = uri.toASCIIString(); // Converts URI to a US-ASCII string, handling necessary encoding\n\n            // Append query string (from q) and fragment (from original u.getRef()) if they exist\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n\n            u = new URL(normUrl); // Create the final URL object\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // Fallback to the original URL if any error occurs during normalization.\n            // UnsupportedEncodingException is theoretically possible from appendToAscii (UTF-8 encoding).\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}