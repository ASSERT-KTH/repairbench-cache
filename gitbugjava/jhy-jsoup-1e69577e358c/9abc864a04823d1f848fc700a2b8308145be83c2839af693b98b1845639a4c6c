{
    "generation": "URL build() {\n    try {\n        // Instead of URI (which decodes %2B to + in path), manually encode userInfo and host,\n        // but preserve the raw path as-is.\n        StringBuilder urlBuilder = new StringBuilder();\n        urlBuilder.append(u.getProtocol())\n                .append(\"://\");\n        if (u.getUserInfo() != null) {\n            urlBuilder.append(URLEncoder.encode(u.getUserInfo(), \"UTF-8\")).append('@');\n        }\n        String asciiHost = IDN.toASCII(decodePart(u.getHost()));\n        urlBuilder.append(asciiHost);\n        if (u.getPort() != -1) {\n            urlBuilder.append(':').append(u.getPort());\n        }\n        // Use getRawPath() if available, else getPath(). This preserves %XX encodings in path.\n        String rawPath;\n        try {\n            rawPath = u.toURI().getRawPath();\n        } catch (URISyntaxException e) {\n            // fallback in case of error (should not happen)\n            rawPath = u.getPath();\n        }\n        if (rawPath != null)\n            urlBuilder.append(rawPath);\n\n        if (q != null || u.getRef() != null) {\n            if (q != null) {\n                urlBuilder.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, urlBuilder);\n            }\n            if (u.getRef() != null) {\n                urlBuilder.append('#');\n                appendToAscii(u.getRef(), false, urlBuilder);\n            }\n        } else {\n            if (u.getQuery() != null) {\n                urlBuilder.append('?').append(u.toURI().getRawQuery());\n            }\n            if (u.getRef() != null) {\n                urlBuilder.append('#').append(u.toURI().getRawFragment());\n            }\n        }\n\n        String normUrl = urlBuilder.toString();\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}