{
    "generation": "URL build() {\n    try {\n        // Decode the percent-encoded characters in URI components\n        String path = decodePart(u.getPath());\n        String host = decodePart(u.getHost());\n\n        // use the URI class to encode non-ascii in path\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(host), // puny-code\n            u.getPort(),\n            path,\n            null, null // query and fragment appended later so as not to encode\n        );\n\n        String normPath = uri.getRawPath();// use the raw path to keep the encoded characters just like we want\n\n        String normUrl = u.getProtocol() + \"://\" + host;\n        normUrl += (u.getPort() > 0 ? \":\" + u.getPort() : \"\");\n\n        normUrl += normPath;\n\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?').append(URLDecoder.decode(q, StandardCharsets.UTF_8)); // append raw query\n            }\n            if (u.getRef() != null) {\n                sb.append('#').append(URLDecoder.decode(u.getRef(), StandardCharsets.UTF_8)); // append raw reference\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u =  new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}