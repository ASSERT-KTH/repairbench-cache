{
    "generation": "    URL build() {\n        try {\n            URI originalUri = u.toURI();\n            String encodedPath = originalUri.getRawPath();\n            \n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                IDN.toASCII(decodePart(u.getHost())), // puny-code\n                u.getPort(),\n                null, // path is handled via the URI string construction\n                null, null\n            );\n\n            String normUrl = uri.toASCIIString();\n            // Replace the path part with the original encoded path\n            int pathStart = normUrl.indexOf('/', normUrl.indexOf(\"://\") + 3);\n            StringBuilder sb = new StringBuilder();\n            if (pathStart == -1) {\n                sb.append(normUrl).append(encodedPath);\n            } else {\n                sb.append(normUrl.substring(0, pathStart)).append(encodedPath);\n            }\n\n            if (q != null || u.getRef() != null) {\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n            }\n            u = new URL(sb.toString());\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}