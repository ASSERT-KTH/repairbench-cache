{
    "generation": "URL build() {\n    try {\n        // use the URI class to encode non-ascii in path\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny-code\n            u.getPort(),\n            encodeWithPercentEncoding(u.getPath()), // ensure we do not decode special characters\n            null,\n            null // query and fragment are appended later so as not to encode\n        );\n\n        String normUrl = uri.toString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u =  new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}\n\nprivate String encodeWithPercentEncoding(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (char c : input.toCharArray()) {\n        if (c < 128) {\n            // In Java, ASCII is a subset of Unicode,\n            // so < 128 characteres are safe.\n            sb.append(c);\n        } else {\n            sb.append(String.format(\"%%%02X\", (int) c));\n        }\n    }\n    return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}