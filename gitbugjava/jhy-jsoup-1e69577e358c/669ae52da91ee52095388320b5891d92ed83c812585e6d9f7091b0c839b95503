{
    "generation": "URL build() {\n    try {\n        // use the URI class to encode non-ascii in path, but keep already-encoded parts as-is (issue 1952)\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny-code\n            u.getPort(),\n            // manually escape (not encode) the path, so that already encoded pieces stay encoded (#1952)\n            escapePath(u.getPath()),\n            null, null // query and fragment appended later so as not to encode\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u =  new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}\n\n// new helper method to manually escape the path\nprivate static String escapePath(String path) throws UnsupportedEncodingException {\n    StringBuilder sb = StringUtil.borrowBuilder();\n    for (int i = 0; i < path.length(); i++) {\n        char c = path.charAt(i);\n        if (c == '%' && i + 2 < path.length()) { // already escaped, leave as is\n            sb.append('%').append(path.charAt(i + 1)).append(path.charAt(i + 2));\n            i += 2;\n        } else if (c < 0x20 || c >= 0x7F || DataUtil.ReservedUrlChars.indexOf(c) != -1) {\n            // unreserved per RFC 3986 2.3\n            // escape non-ascii and unreserved chars\n            sb.append(URLEncoder.encode(String.valueOf(c), \"UTF-8\"));\n        } else {\n            sb.append(c);\n        }\n    }\n    return StringUtil.releaseBuilder(sb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}