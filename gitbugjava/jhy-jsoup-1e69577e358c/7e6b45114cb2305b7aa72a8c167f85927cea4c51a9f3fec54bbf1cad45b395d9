{
    "generation": "    URL build() {\n        try {\n            // use the URI class to encode non-ascii in path, but preserve already encoded parts\n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                IDN.toASCII(decodePart(u.getHost())), // puny-code\n                u.getPort(),\n                preserveEncodedParts(u.getPath()),\n                null, null // query and fragment appended later so as not to encode\n            );\n\n            String normUrl = uri.toASCIIString();\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n            u =  new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n\n    private String preserveEncodedParts(String path) {\n        StringBuilder preservedPath = new StringBuilder();\n        String[] parts = path.split(\"/\");\n        for (String part : parts) {\n            if (part.contains(\"%\")) {\n                preservedPath.append(part);\n            } else {\n                preservedPath.append(decodePart(part));\n            }\n            preservedPath.append(\"/\");\n        }\n        // remove the trailing slash if present\n        if (preservedPath.length() > 0 && preservedPath.charAt(preservedPath.length() - 1) == '/') {\n            preservedPath.deleteCharAt(preservedPath.length() - 1);\n        }\n        return preservedPath.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}