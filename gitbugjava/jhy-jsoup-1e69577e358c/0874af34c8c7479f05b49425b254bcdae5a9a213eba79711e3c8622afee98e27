{
    "generation": "    URL build() {\n        try {\n            // use the URI class to encode non-ascii in path\n            // We previously decoded the path component; that was wrong, as it could\n            // lead to encoded entities (%2B) being decoded to their bare char (+)\n            // which is then not re-encoded, changing the meaning of the path component.\n            // The URI class expects the path component to be provided with existing encoding preserved.\n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                IDN.toASCII(decodePart(u.getHost())), // puny-code host\n                u.getPort(),\n                u.getPath(), // pass path without decoding\n                null, null // query and fragment appended later so as not to encode them\n            );\n\n            String normUrl = uri.toASCIIString(); // encodes path, including non-ascii chars etc.\n\n            // now append query strings / fragments if defined\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    // Query string needs to be assembled manually to avoid unwanted encoding\n                    // of permissible chars like = & ; etc within the query name/value pairs\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    // Fragment needs to be appended manually as well - URI constructor would encode incorrectly\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n\n            // replace original URL with normalized version\n            u = new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            assert Validate.assertFail(\"Could not normalize URL \" + this.url + \": \" + e.getMessage());\n            return u; // return original on error\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}