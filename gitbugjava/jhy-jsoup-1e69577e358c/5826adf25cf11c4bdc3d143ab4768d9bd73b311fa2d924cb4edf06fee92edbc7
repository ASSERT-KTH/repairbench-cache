{
    "generation": "URL build() {\n    try {\n        // Save the original URL string so we can tell if a \u201c+\u201d was originally percent\u2010encoded.\n        String original = u.toExternalForm();\n        // use the URI class to encode non-ascii in path\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny\u2010code\n            u.getPort(),\n            decodePart(u.getPath()),\n            null, null // query and fragment appended later so as not to encode\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n\n        // Workaround: if the original URL contained a percent-encoded plus (\"%2B\"),\n        // then the URI constructor loses that encoding (producing a plain \"+\").\n        // To preserve the original encoding in the path we replace plus signs with \"%2B\"\n        // but only in the path portion (and only if the original string contained \"%2B\").\n        if (original.contains(\"%2B\") || original.contains(\"%2b\")) {\n            int queryOrRef = normUrl.length();\n            int qi = normUrl.indexOf('?');\n            int hi = normUrl.indexOf('#');\n            if (qi != -1) queryOrRef = qi;\n            if (hi != -1) queryOrRef = Math.min(queryOrRef, hi);\n            String pathPart = normUrl.substring(0, queryOrRef).replace(\"+\", \"%2B\");\n            normUrl = pathPart + normUrl.substring(queryOrRef);\n        }\n\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // \u2018assert\u2019 so any unexpected malformed URL / encoding issue is caught in development.\n        // In production we simply hand back the original URL.\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}