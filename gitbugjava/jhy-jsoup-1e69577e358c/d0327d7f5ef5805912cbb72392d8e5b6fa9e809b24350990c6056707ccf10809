{
    "generation": "URL build() {\n    try {\n        // Convert the host to punycode as before.\n        String host = IDN.toASCII(decodePart(u.getHost()));\n        // For the path, if it already contains percent escapes (e.g. \"%2B\"), leave it alone.\n        // Otherwise, decode it so that non-ascii characters can be re-encoded.\n        String rawPath = u.getPath();\n        String path = rawPath;\n        if (rawPath != null && rawPath.indexOf('%') == -1) {\n            path = decodePart(rawPath);\n        }\n\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            host,\n            u.getPort(),\n            path,\n            null, // query\n            null  // fragment\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u = new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // In development, assert so that normalization problems are caught; in production, return the original URL.\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}