{
    "generation": "    URL build() {\n        try {\n            // extract parts and ensure host is Punycode ASCII\n            String hostASCII = IDN.toASCII(u.getHost());\n            String protocol = u.getProtocol();\n            String authority = u.getAuthority().replace(u.getHost(), hostASCII);\n            if (u.getPort() != -1) {\n                // port is included in authority already, so ensure it's correct\n                authority = authority.replace(\":\" + u.getHost(), \":\" + hostASCII);\n            }\n            // rebuild URL with encoded path, query, fragment as original\n            URI uri = new URI(\n                protocol,\n                authority,\n                null, null, null  // path must be separate to retain encoding\n            );\n            String basicUrl = uri.toASCIIString(); // e.g., \"https://example.com\"\n            String fullUrl = basicUrl + u.toExternalForm().substring(basicUrl.length());\n\n            if (u.getRef() != null) {\n                // Append fragment if needed (though it might already be included)\n                fullUrl = insertFragment(fullUrl, u.getRef());\n            }\n\n            u = new URL(fullUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n\n    private String insertFragment(String url, String ref) {\n        int fragmentIndex = url.indexOf('#');\n        if (fragmentIndex != -1) {\n            return url.substring(0, fragmentIndex) + '#' + ref;\n        }\n        return url + '#' + ref;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}