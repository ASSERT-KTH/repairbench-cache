{
    "generation": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        // 1. Outline mode always formats as block to show structure\n        if (out.outline()) {\n            return true;\n        }\n\n        // 2. Check for explicit \"display: inline\" style override\n        String style = attributes().getIgnoreCase(\"style\");\n        if (style != null && !style.isEmpty()) {\n            String[] declarations = style.split(\";\");\n            for (String declaration : declarations) {\n                String trimmedDeclaration = declaration.trim();\n                if (trimmedDeclaration.isEmpty()) {\n                    continue;\n                }\n\n                // Check if the declaration is for \"display\"\n                // More robust check than simple startsWith to avoid matching e.g. \"display-mode\"\n                // but still efficient enough for this context.\n                if (trimmedDeclaration.length() > \"display:\".length() &&\n                    trimmedDeclaration.substring(0, \"display\".length()).equalsIgnoreCase(\"display\")) {\n                    \n                    String[] parts = trimmedDeclaration.split(\":\", 2);\n                    if (parts.length == 2) {\n                        String property = parts[0].trim().toLowerCase();\n                        if (\"display\".equals(property)) {\n                            String value = parts[1].trim().toLowerCase();\n                            // Handle cases like \"inline !important\" by checking only the first part of the value\n                            String[] valueKeywords = value.split(\"\\\\s+\");\n                            if (valueKeywords.length > 0 && \"inline\".equals(valueKeywords[0])) {\n                                return false; // Explicitly styled as inline, so not formatted as block\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // 3. Default to the tag's intrinsic block/inline nature.\n        // The condition `|| (parent() != null && parent().tag().formatAsBlock())` was removed\n        // as an element being inline should generally stay inline formatted even if its parent is block.\n        return tag.formatAsBlock();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}