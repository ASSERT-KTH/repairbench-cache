{
    "generation": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();\n    }\n    ```\n2.  **Issue #1926**: \"Nested inline elements in block parents cause unwanted newlines\".\n    *   Example: `<div><span>a</span><span>b</span></div>`\n    *   `<span>` is an inline element, so `tag.formatAsBlock()` for `span` is `false`.\n    *   `<div>` is a block element, so `parent().tag().formatAsBlock()` for `span` (whose parent is `div`) is `true`.\n    *   Due to the `(parent() != null && parent().tag().formatAsBlock())` condition, `isFormatAsBlock` returns `true` for the `<span>`. This causes a newline and indentation before the `<span>`, which is undesired for inline elements.\n    *   The fix for this issue requires that inline elements are *not* formatted as blocks just because their parent is a block.\n\n3.  **Test `nestedFormatAsInlinePrintsAsBlock`**:\n    *   HTML: `<p style=\"display:inline;\">A</p>` nested inside `<td>`.\n    *   Expected output shows the `<p>` tags on separate lines, implying they are formatted as blocks *despite* `display:inline;`.\n    *   For a `<p>` tag: `tag.formatAsBlock()` for `p` is `true` (because `p` is an inherently block-level HTML tag).\n    *   With the original function, `isFormatAsBlock` would return `true` for `p` because `tag.formatAsBlock()` is `true`. This would already lead to the expected block-like formatting for `p`.\n\n**Conclusion and Fix:**\nThe core problem identified by issue #1926 is the `(parent() != null && parent().tag().formatAsBlock())` condition. This condition incorrectly promotes inline children of block elements to be formatted as blocks, leading to unwanted newlines.\n\nRemoving this condition resolves issue #1926:\n*   For inline elements like `<span>`, `tag.formatAsBlock()` is `false`. Without the parent check, `isFormatAsBlock` will return `false` (unless `out.outline()` is true), correctly treating `<span>` as inline.\n*   For inherently block elements like `<p>`, `tag.formatAsBlock()` is `true`. So, `isFormatAsBlock` will still return `true`, causing them to be formatted as blocks, which aligns with the expectation of `nestedFormatAsInlinePrintsAsBlock` that `p` (even with inline style) still prints as a block.\n\nThe `out.outline()` condition is related to a global output setting that forces all elements to be on their own line, which should be preserved.\n\nTherefore, the minimal and effective fix is to remove the parent check.\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}