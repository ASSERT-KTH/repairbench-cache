{
    "generation": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        if (out.outline()) { // outline() is a global override for block formatting\n            return true;\n        }\n\n        // Check for CSS 'display' property override in the style attribute\n        final String style = attributes().getIgnoreCase(\"style\");\n        if (style != null && !style.isEmpty()) {\n            String displayValue = null;\n            // Basic parse of \"key: value;\" list. Last 'display' property declaration in the style string wins.\n            String[] kvs = style.split(\";\");\n            for (String kvString : kvs) {\n                if (kvString.trim().isEmpty()) {\n                    continue; // Handles cases like \"display: block;; color: red\" or trailing semicolon\n                }\n                String[] parts = kvString.split(\":\", 2);\n                if (parts.length == 2) {\n                    String key = parts[0].trim().toLowerCase();\n                    String value = parts[1].trim().toLowerCase();\n                    if (key.equals(\"display\")) {\n                        displayValue = value;\n                    }\n                }\n            }\n\n            if (displayValue != null) {\n                if (displayValue.equals(\"block\")) {\n                    return true; // \"display: block\" forces block formatting.\n                }\n                if (displayValue.equals(\"inline\") || displayValue.equals(\"inline-block\")) {\n                    // \"display: inline\" or \"display: inline-block\" implies inline formatting\n                    // for the purpose of pretty-printer's newline decisions.\n                    return false;\n                }\n                // For other 'display' values (e.g., flex, grid, table-cell, none),\n                // this logic currently falls through to the tag's default behavior.\n            }\n        }\n\n        // If no 'display' style override (or an unhandled 'display' value),\n        // fall back to the tag's inherent block/inline nature.\n        // This uses tag.isBlock() and, importantly, removes the original problematic\n        // parent check: (parent() != null && parent().tag().formatAsBlock()).\n        // That check could incorrectly make inline children of block parents format as block.\n        return tag.isBlock();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}