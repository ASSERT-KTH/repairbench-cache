{
    "generation": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        if (out.outline()) { // outline mode always formats as block\n            return true;\n        }\n\n        boolean selfAsBlock = tag.formatAsBlock(); // Start with the tag's default block status\n\n        // Check for 'style' attribute to override default block status\n        // Use attributes().get() as attr() is a shortcut to it.\n        // Attribute names are case-insensitive already via hasAttributes -> Attributes store.\n        final String style = attributes().get(\"style\"); \n        if (style != null && !style.isEmpty()) {\n            String styleValue = style.toLowerCase().trim();\n            // Simple check for \"display: value;\". A robust CSS parser would be more complex.\n            // We need to correctly extract the 'display' value.\n            String[] declarations = styleValue.split(\";\");\n            String displayCssValue = null;\n            for (String declaration : declarations) {\n                String trimmedDecl = declaration.trim();\n                if (trimmedDecl.startsWith(\"display:\")) {\n                    // Remove \"display:\" and trim spaces to get the value\n                    displayCssValue = trimmedDecl.substring(\"display:\".length()).trim();\n                    break; // Found display property, no need to check further declarations\n                }\n            }\n\n            if (\"inline\".equals(displayCssValue)) {\n                selfAsBlock = false; // CSS 'display: inline' overrides tag default to be not block\n            } else if (\"block\".equals(displayCssValue)) {\n                selfAsBlock = true;  // CSS 'display: block' overrides tag default to be block\n            }\n            // Other display values (e.g., inline-block, flex, grid) will currently use selfAsBlock from tag's default.\n            // This behavior could be enhanced in the future if more specific handling for other display types is needed.\n        }\n        \n        // An element is formatted as block if:\n        // 1. It's effectively block by its own nature (tag + style).\n        // OR 2. Its parent is a block-formatting element (this is a common rule for indenting children).\n        // Note: out.outline() is handled at the top and short-circuits this.\n        return selfAsBlock || (parent() != null && parent().tag().formatAsBlock());\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}