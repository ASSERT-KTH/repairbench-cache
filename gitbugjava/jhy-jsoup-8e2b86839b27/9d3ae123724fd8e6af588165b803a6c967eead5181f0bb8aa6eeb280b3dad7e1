{
    "generation": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        if (out.outline()) {\n            return true; // Outline mode forces block formatting for all elements.\n        }\n\n        // Check for CSS \"display: inline\" style override.\n        String styleAttr = attr(\"style\"); // Element.attr(String) gets the attribute value.\n        if (styleAttr != null && !styleAttr.isEmpty()) {\n            String[] declarations = styleAttr.split(\";\"); // CSS declarations are semicolon-separated.\n            for (String declaration : declarations) {\n                declaration = declaration.trim();\n                if (declaration.isEmpty()) {\n                    continue;\n                }\n\n                int colonIndex = declaration.indexOf(':');\n                // Ensure there's a property name and it's not empty, and a colon exists.\n                if (colonIndex > 0) { \n                    String propertyName = declaration.substring(0, colonIndex).trim().toLowerCase();\n                    if (propertyName.equals(\"display\")) {\n                        String propertyValue = declaration.substring(colonIndex + 1).trim().toLowerCase();\n                        if (propertyValue.equals(\"inline\")) {\n                            // \"display: inline\" style found, element should be formatted as inline.\n                            return false; \n                        }\n                        // If \"display\" is something else (e.g., \"block\", \"inline-block\", \"flex\"),\n                        // this specific \"inline\" override does not apply. We break from parsing styles\n                        // for \"display\" and let the default logic below handle it.\n                        // This ensures \"display: inline-block\" etc., are not mistakenly treated as \"inline\".\n                        break; \n                    }\n                }\n            }\n        }\n        \n        // If not outlining and not explicitly \"display: inline\", use original logic's core.\n        // An element is formatted as a block if its tag inherently formats as block,\n        // OR if its parent is a block-formatting tag (this helps with indenting\n        // inline elements that are direct children of block elements).\n        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock());\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}