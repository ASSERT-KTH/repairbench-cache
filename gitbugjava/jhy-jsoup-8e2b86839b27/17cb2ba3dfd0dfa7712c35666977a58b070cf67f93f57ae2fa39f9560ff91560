{
    "generation": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        String styleValue = attr(\"style\"); // Get the 'style' attribute value.\n        if (!styleValue.isEmpty()) {\n            String lowerCaseStyleValue = styleValue.toLowerCase(); // Convert to lowercase for case-insensitive matching.\n            String lastDisplayValue = null; // To store the value of the last 'display' property found.\n\n            // Iterate through style declarations (e.g., \"prop1:val1; prop2:val2\").\n            for (String declaration : lowerCaseStyleValue.split(\";\")) {\n                String trimmedDeclaration = declaration.trim();\n                // Optimization: only process declarations that start with \"display\".\n                if (trimmedDeclaration.startsWith(\"display\")) {\n                    String[] parts = trimmedDeclaration.split(\":\", 2); // Split into property and value.\n                    if (parts.length == 2) {\n                        String property = parts[0].trim();\n                        if (property.equals(\"display\")) {\n                            // Last declaration of 'display' wins in CSS (ignoring !important).\n                            lastDisplayValue = parts[1].trim();\n                        }\n                    }\n                }\n            }\n\n            // If the effective 'display' style is \"inline\", then format as inline.\n            if (lastDisplayValue != null && lastDisplayValue.equals(\"inline\")) {\n                return false;\n            }\n            // Note: if lastDisplayValue is \"block\" (e.g. <span style=\"display:block\">),\n            // we don't explicitly return true here. We let the original logic below handle it.\n            // This is because tag.formatAsBlock() for a span is false, and the element might still\n            // be formatted as inline if, for example, its parent is not block and outline is false.\n            // The fix primarily targets 'display:inline' overriding block tags.\n        }\n\n        // If \"display: inline\" is not set or style attribute is absent/empty,\n        // or if the display style is something else, fall back to the original logic.\n        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}