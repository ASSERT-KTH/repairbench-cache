{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n\n        return position;\n\n    }\n\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n        switch (subtype) {\n            // ... other cases unchanged ...\n\n            case 0xFE: {\n                /*\n                 * FE block can either be a single-byte battery level, or\n                 * a multi-byte block starting with '|' (0x7C) that carries\n                 * alarms and ends with a battery level byte.\n                 */\n                if (length == 1) {\n                    // Simple case: one byte = battery level\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                } else {\n                    int first = buf.readUnsignedByte();\n                    if (first == 0x7C) {\n                        // nested alarm block\n                        while (buf.readerIndex() < endIndex - 1) {\n                            int extType = buf.readUnsignedByte();\n                            int extLen = buf.readUnsignedByte();\n                            if (extType == 0x01) {\n                                long alarms = buf.readUnsignedInt();\n                                if (BitUtil.check(alarms, 0)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                }\n                                if (BitUtil.check(alarms, 1)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                }\n                                if (BitUtil.check(alarms, 2)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                }\n                                if (BitUtil.check(alarms, 3)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                }\n                                if (BitUtil.check(alarms, 4)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                }\n                            } else {\n                                buf.skipBytes(extLen);\n                            }\n                        }\n                        // last byte in FE block = battery level\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        // no nested alarms, first byte is battery level\n                        position.set(Position.KEY_BATTERY_LEVEL, first);\n                    }\n                }\n                break;\n            }\n\n            // ... other cases unchanged ...\n\n            default:\n                break;\n        }\n        // skip any remaining bytes in this block\n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}