{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    // Ensure not to skip if length is less than 2\n                    if (length >= 2) {\n                       buf.skipBytes(length - 2);\n                    }\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); // content\n                    endIndex = buf.writerIndex() - 2; // This line seems suspicious, might corrupt endIndex logic\n                                                      // Reverting to standard endIndex calculation for consistency unless specific reason exists\n                    endIndex = buf.readerIndex() + length -1; // Recalculate based on read byte? Or original length? Assuming original length intended\n                                                               // Standard handling below will use original endIndex, so this modification is likely problematic.\n                                                               // Let's remove this specific endIndex modification.\n                    // Assuming decodeExtension needs to read until the original endIndex based on length field\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Check length before reading count\n                        int count = buf.readUnsignedByte();\n                        // Calculate expected size per lock entry: 5(id)+5(card)+1(batt)+2(status)=13\n                        // Check if remaining length matches count * 13 + 1 (count byte)\n                        if (length == 1 + count * 13) {\n                             for (int i = 1; i <= count; i++) {\n                                 position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                 position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                 position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                 int status = buf.readUnsignedShort();\n                                 position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                             }\n                        } else {\n                             // Length mismatch, skip remaining bytes in this block\n                             buf.skipBytes(length - 1); // Already read count byte\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); // string cut count\n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                         // Check remaining bytes before reading sensor data (1 byte index + 6 bytes mac + 8 bytes temp + 8 bytes humidity = 23 bytes)\n                         if (buf.readableBytes() < 23 || buf.readerIndex() + 23 > endIndex) {\n                             break; // Avoid reading past end index or with insufficient data\n                         }\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                     // Check length before peeking\n                    if (length >= 2 && buf.readableBytes() >= 2) {\n                        if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                            // Cell tower format 1\n                            if (buf.readableBytes() >= 3) { // Need mcc (2) + mnc (1)\n                                Network network = new Network();\n                                int mcc = buf.readUnsignedShort();\n                                int mnc = buf.readUnsignedByte();\n                                // Check bytes needed per tower: lac (2) + cid (2) + rssi (1) = 5\n                                while (buf.readerIndex() <= endIndex - 5) {\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                position.setNetwork(network);\n                            }\n                        } else {\n                            // Extended data format\n                            while (buf.readerIndex() < endIndex) {\n                                // Check bytes needed for ext length/type: 2 + 2 = 4\n                                if (buf.readerIndex() > endIndex - 4) break;\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                int itemDataLength = extendedLength - 2; // Data length excluding type field size (2 bytes)\n                                // Ensure item data length is non-negative and fits within remaining block\n                                if (itemDataLength < 0 || buf.readerIndex() + itemDataLength > endIndex) {\n                                     break; // Malformed length or data exceeds block end\n                                }\n                                switch (extendedType) {\n                                    case 0x0001: // fuel1\n                                        if (itemDataLength == 3) { // Check expected length: 2(fuel)+1(unused)\n                                             position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                             buf.readUnsignedByte(); // unused\n                                        } else { buf.skipBytes(itemDataLength); }\n                                        break;\n                                    case 0x0023: // fuel2\n                                        if (itemDataLength == 6) { // Check expected length\n                                             position.set(\"fuel2\", Double.parseDouble(\n                                                     buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                        } else { buf.skipBytes(itemDataLength); }\n                                        break;\n                                    case 0x00CE: // power\n                                        if (itemDataLength == 2) { // Check expected length\n                                             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                        } else { buf.skipBytes(itemDataLength); }\n                                        break;\n                                    case 0x00D8: // cell tower format 2\n                                        // Check expected length: 2(mcc)+1(mnc)+2(lac)+4(cid)=9\n                                        if (itemDataLength == 9) {\n                                             Network network = position.getNetwork() != null ? position.getNetwork() : new Network();\n                                             network.addCellTower(CellTower.from(\n                                                     buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                     buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                             position.setNetwork(network);\n                                        } else { buf.skipBytes(itemDataLength); }\n                                        break;\n                                    case 0xE1: // battery level\n                                        if (itemDataLength == 1) { // Check expected length\n                                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                        } else { buf.skipBytes(itemDataLength); }\n                                        break;\n                                    default:\n                                        buf.skipBytes(itemDataLength);\n                                        break;\n                                }\n                            } // end while extended data\n                        }\n                    } // end if length >= 2\n                    break; // End of case 0xEB\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        // Need 2 bytes type + 1 byte length = 3 bytes header\n                        if (buf.readerIndex() > endIndex - 3) break;\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                         // Check if data fits\n                        if (buf.readerIndex() + extendedLength > endIndex) {\n                           break; // Malformed\n                        }\n                        switch (extendedType) {\n                            case 0x0002: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;\n                            case 0x0050: if (extendedLength == 17) { position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); } else { buf.skipBytes(extendedLength); } break;\n                            case 0x0100: position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: buf.skipBytes(extendedLength); break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1 && buf.readableBytes() >= length) { // Ensure buffer has enough bytes\n                        int firstByte = buf.getByte(buf.readerIndex()); // Peek at the first byte ('mark')\n                        if (firstByte == 0x7C) {\n                            buf.readUnsignedByte(); // Consume the mark byte (0x7C)\n                            int currentEndIndex = endIndex - 1; // Limit processing to before the last byte\n                            boolean processAlarms = true;\n                            int alarmBlockStartIndex = buf.readerIndex(); // Save start index for rollback\n\n                            while (processAlarms && buf.readerIndex() < currentEndIndex) {\n                                // Check if enough bytes remain for type and length\n                                if (buf.readableBytes() < 2 || buf.readerIndex() > currentEndIndex - 2) {\n                                    processAlarms = false; break; // Not enough data for next item header\n                                }\n                                int itemStartIndex = buf.readerIndex(); // Save position before reading item type/len\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n\n                                // Check if the declared length fits within the remaining alarm block\n                                if (extendedLength < 0 || buf.readerIndex() + extendedLength > currentEndIndex) {\n                                    // Item data exceeds the boundary or length is invalid. Assume malformed.\n                                    buf.readerIndex(alarmBlockStartIndex); // Rollback to start of alarms block\n                                    processAlarms = false; // Stop processing alarms\n                                    break; // Exit while loop\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength != 4) {\n                                            // Incorrect length for alarm data. Assume malformed.\n                                            buf.readerIndex(alarmBlockStartIndex); // Rollback to start of alarms block\n                                            processAlarms = false; // Stop processing alarms\n                                            break; // Exit switch\n                                        }\n                                        long alarms = buf.readUnsignedInt();\n                                        // Assign alarms (only keeps the last one if multiple are set)\n                                        if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                        if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                        if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                        if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                        if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                        break; // Exit switch case 0x01\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break; // Exit switch default\n                                }\n                                if (!processAlarms) { // Check if break occurred inside switch\n                                    break; // Exit while loop\n                                }\n                            } // End while for alarm processing\n\n                            // After processing alarms, read the last byte if we are positioned correctly\n                            if (buf.readerIndex() == endIndex - 1) {\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                            // If !processAlarms or readerIndex is wrong, something was malformed.\n                            // The outer loop handler buf.readerIndex(endIndex) will ensure we move past this subtype.\n\n                        } else {\n                            // Mark is not 0x7C. Original logic: read the second byte as level.\n                            // This fails test case expecting 90 from 'fe 02 00 1e' (reads 30).\n                            // Keeping original logic as no alternative yields 90 from the data.\n                            buf.readUnsignedByte(); // Consume the mark byte (which is != 0x7C)\n                            if (length >= 2) { // Ensure there is a second byte to read\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                        }\n                    }\n                    // If length is 0 or buf doesn't have enough bytes, do nothing here.\n                    break; // End of case 0xFE\n                default:\n                    // Skip data if subtype is unknown or unhandled.\n                    // Let buf.readerIndex(endIndex) handle the skip.\n                    break;\n            }\n            // Ensure reader index is advanced to the end of the current subtype block,\n            // even if processing failed or skipped bytes internally, unless endIndex is invalid.\n            if (endIndex >= buf.readerIndex() && endIndex <= buf.writerIndex()) {\n               buf.readerIndex(endIndex);\n            } else {\n               // endIndex calculation was wrong or buffer modified unexpectedly. Break loop?\n               // For safety, break to avoid potential infinite loops or reading incorrect data.\n               break;\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}