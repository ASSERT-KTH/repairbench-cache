{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n\n        return position;\n    }\n\n    while (buf.readableBytes() > 3) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedShort();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2B:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x33:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = stringValue.substring(8, 8 + 7);\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                }\n                break;\n            case 0x60:\n                position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                buf.skipBytes(length - 2);\n                break;\n            case 0x69:\n                position.set(Position.KEY_BATTERY, buf.readUnsigned Short() * 0.01); \n                break;\n            case 0x80:\n                // original code\u53ef\u80fd was using shorts. \u9178S.\n        break;\n            case 0x91:\n                if (buf.readableBytes() >= length) {\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                }\n                break;\n            case 0x94:\n                if (length >0) {\n                    if (buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                }\n                break;\n            case 0xA7:\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                break;\n            case 0xAC:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                break;\n            case 0xBC:\n                // ...\u539f\u6709\u7684\u5904\u7406 \n                break;\n            case 0xBD:\n                // ... \n                break;\n            case 0xD0:\n                // ... \n                break;\n            case 0xD3:\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0xD4:\n            case 0xE1:\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                break;\n            case 0xD5:\n                // ... \n                break;\n            case 0xDA:\n                // ... original code, but length is now read properly. \n                break;\n            case 0xE6:\n                while (buf.readerIndex() < endService ) {\n                    int sensorIndex = bu f . readUnsignedByte()\uff1b\n                    buf.skipBytes(6);\n                    position. set(\u2026);\n                    position.set(..);\n                }\n                break;\n            case 0xEB:\n                if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                    // original code\n                    Network network = new Network();\n                    int mcc = buf.readUnsignedShort();\n                    int mnc = buf.readUnsignedByte();\n                    while (buf)readerIndex() < endInex .) { \n                        network.addCellTower. (\u2026);\n          } \n_position. setNetwork(\u2026);\n                } else { \n                        while (buf)readerIndex()< endIndex) { \n\n                            int extendedLength = (buf.read unsignedShort ();\n                            int extendedType= buf. readUnsignedShort ();\n\n                            switch (extendedType) { \n                                case 0x 0001: \n                                // \u2026 \n                                break; \n                                case 0x0023:\n                                // ...\n                                break; \n                                ...\n          case 0xE1: \n                    position.set(Position.KEY_BATTERY_LEVEL, '%' . \n\n                    break; \n          default : \n            # the \u6b63\u786e \u7684 skip \u662f\uff1a \n            bu f.read SkipBytes(extendedLength -4\uff0c ); \n             break; \n        } \n    } \n} \u7834\u88c2\uff1b \n            case 0xED:\n                // original code\n                break;\n            case 0xEE:\n                position.set(Position.KEY_RSSI, buf.\u8bfbUnsignedByte ());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); \n                position.set(Position.KEY_BATTERY, se. re \u65e0UnsignedShort () * 0.001); \n                _position.set(Position.KEY_SATELLITES, buf. rea UnsignedByte (); \n                break; \n\n            case 0xF3:\n            // ... \u4e0d\u4f5c\u4fee\u6b63\u2026 \u4f46 ensure \u9577 \u5ea6 is read properly\n                while buffy. readerIndex()< endIndex) {\n\n           int extendedType = buf.\u51fa4 unsignedShort();\n            int extendedLength = b. readUnsignedByte(); \n            // here \u662f using 1 byte length  for the extended part.\n\n                    // \u5bf9 for this switch's default: \n            \u3002 \n        default:\n            // Skip remaining bytes for this entry\n            buf.skipBytes(extendedLength - 3);\n           \n            break;\n                }\n\n                break;\n            case 0xFE: \n                if (length==1) { \n                    position.set KEY_ .. battery levels..\n                } else {\n                    int mark = buf. ReadUnsigned BUT ( ):\n\n                    if ( grp ==0x7C){\n                        \u800c (buf. readerIndex()< endIndex):\n\n                            int extendedLength= buf.read unsignedShort ();\n\n                            int extendedType= buf.readUnsing i Short ();\n\n                            swith (extendedType) :\n                                case 0x01  .: # \u8fdb\u5165 handling.\n                                break; \n                           default: \n                                \u7f3a\u5c11 \u8fd9\u4e2a\u7684 skip. \u8fd9\u4e2a is the main fix. \n\n                                // the new code:  \n                                buf. skipBy_ts( extendedLength-4 ); // 2 bytes (extendedLength) + 2(extended) type equals 4: thus skip the rest. \n                                break; \n                        }\n\n                         } \n\n                        // \u7136\u540e the bac \u84c4 level reading is \u56f0 negotiable \n\n                        // read this\u6700\u540e \u7684 thenet byte. \n                    position.set(Position.KEY_BATTERY_LEVEL, berea.\u3069\u3046\u3057\u3066\u3082 read unsignedCurrent byte (). \n\n              } \n\n              break; \n\n            default: \u91cd\u65b0 break; \n        }\n        // Always advance to end of current entry\n        buf)readerIndex(endIndex); after slices all cases \n    }\n\n    \u8fd4\u56de pos \u97f5; \n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}