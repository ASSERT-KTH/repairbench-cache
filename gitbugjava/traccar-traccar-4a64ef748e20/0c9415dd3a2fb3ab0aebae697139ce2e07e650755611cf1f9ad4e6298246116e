{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) { // Process TLV attributes\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Basic validation for length and endIndex\n            if (length < 0 || endIndex > buf.writerIndex()) {\n                break; // Invalid length or endIndex, stop processing TLVs\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (length == 4 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    } else {\n                         // Skip if length wrong or not enough bytes - handled by outer readerIndex advance\n                    }\n                    break;\n                case 0x02:\n                    if (length == 2 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (length == 4 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (length == 1 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (length == 1 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) { // Check length before substring\n                            String lockStatus = stringValue.substring(8, 15); // Use bounds 8 and 15 (exclusive)\n                            if (lockStatus.length() >= 5) { // Double check parsed substring length\n                                try {\n                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                } catch (NumberFormatException | IndexOutOfBoundsException e) {\n                                    // Ignore parsing errors\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2 && buf.readableBytes() >= 2) { // Check we can read the short\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        // Remaining bytes skipped by outer loop index setting\n                    }\n                    break;\n                case 0x69:\n                    if (length == 2 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        buf.readUnsignedByte(); // content\n                        // Original suspicious code: endIndex = buf.writerIndex() - 2;\n                        // Use the endIndex calculated from the length field instead\n                        decodeExtension(position, buf, endIndex);\n                    }\n                    break;\n                case 0x91:\n                    if (length >= 18 && buf.readableBytes() >= 18) { // Check minimum readable bytes\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.skipBytes(2); // Skip 2 bytes (original: readUnsignedShort)\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.skipBytes(2); // Skip 2 bytes\n                        buf.skipBytes(4); // Skip 4 bytes\n                        buf.skipBytes(2); // Skip 2 bytes\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length == 4 && buf.readableBytes() >= length) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                     if (length == 4 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                    if (length == 4 && buf.readableBytes() >= length) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length == 2 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Handles both D4 and E1\n                    if (length == 1 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 1 && buf.readableBytes() >= 1) { // Need at least count byte\n                        int count = buf.readUnsignedByte();\n                        int requiredDataLength = count * (5 + 5 + 1 + 2); // Data length after count byte\n                        if (length == 1 + requiredDataLength && buf.readableBytes() >= requiredDataLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (length == 3 && buf.readableBytes() >= length) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    // Process sensor blocks only if buffer has enough bytes until endIndex\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes() < 23) { // Check space for one full sensor block\n                            break;\n                        }\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                     // Process only if buffer has enough bytes for the declared length\n                    if (buf.readableBytes() >= length && length > 0) {\n                         // Logic to distinguish based on first short value > 200?\n                         if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                             // Cell Tower Data Parsing\n                             Network network = new Network();\n                             if (length >= 3 && buf.readableBytes() >= 3) { // Need MCC (2) + MNC (1)\n                                 int mcc = buf.readUnsignedShort();\n                                 int mnc = buf.readUnsignedByte();\n                                 while (buf.readerIndex() < endIndex) {\n                                     if (buf.readableBytes() < 5) { // Need LAC (2), CID (2), RSSI (1)\n                                         break;\n                                     }\n                                     network.addCellTower(CellTower.from(\n                                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                             buf.readUnsignedByte()));\n                                 }\n                                 if (!network.getCellTowers().isEmpty()) {\n                                      position.setNetwork(network);\n                                 }\n                             }\n                         } else {\n                             // Nested TLV Structure Parsing\n                             while (buf.readerIndex() < endIndex) {\n                                 if (buf.readableBytes() < 4) { // Need extended length (2) + type (2)\n                                     break;\n                                 }\n                                 int extendedLength = buf.readUnsignedShort();\n                                 int extendedType = buf.readUnsignedShort();\n                                 // Calculate end index for this nested TLV. Data length is extendedLength - type(2)\n                                 int nestedDataLength = extendedLength - 2;\n                                 int extendedEndIndex = buf.readerIndex() + nestedDataLength;\n\n                                 if (nestedDataLength < 0 || extendedEndIndex > endIndex || buf.readableBytes() < nestedDataLength) {\n                                     // Invalid nested length or not enough bytes, stop processing nested TLVs\n                                     buf.readerIndex(endIndex); // Skip to end of parent TLV\n                                     break;\n                                 }\n\n                                 switch (extendedType) {\n                                     case 0x0001: // Fuel 1 - Seems to expect 3 bytes data (short value + byte unused) -> length 5\n                                          if (nestedDataLength == 3) {\n                                             position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                             buf.readUnsignedByte(); // skip unused byte\n                                          } else { buf.skipBytes(nestedDataLength); }\n                                         break;\n                                     case 0x0023: // Fuel 2 - Expects 6 bytes data -> length 8\n                                          if (nestedDataLength == 6) {\n                                             position.set(\"fuel2\", Double.parseDouble(\n                                                     buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                          } else { buf.skipBytes(nestedDataLength); }\n                                         break;\n                                     case 0x00CE: // Power - Expects 2 bytes data -> length 4\n                                          if (nestedDataLength == 2) {\n                                             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                          } else { buf.skipBytes(nestedDataLength); }\n                                         break;\n                                     case 0x00D8: // Cell Tower - Expects 9 bytes data -> length 11\n                                         if (nestedDataLength == 9) {\n                                             Network network = new Network();\n                                             network.addCellTower(CellTower.from(\n                                                     buf.readUnsignedShort(), buf.readUnsignedByte(), // mcc, mnc\n                                                     buf.readUnsignedShort(), buf.readUnsignedInt())); // lac, cid\n                                             position.setNetwork(network);\n                                         } else { buf.skipBytes(nestedDataLength); }\n                                         break;\n                                     case 0xE1: // Battery Level - Expects 1 byte data -> length 3\n                                         if (nestedDataLength == 1) {\n                                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                         } else { buf.skipBytes(nestedDataLength); }\n                                         break;\n                                     default:\n                                         buf.skipBytes(nestedDataLength); // Skip unknown nested type's data\n                                         break;\n                                 }\n                                 // Ensure reader index is correctly positioned after processing/skipping nested TLV\n                                 buf.readerIndex(extendedEndIndex);\n                             }\n                         }\n                    }\n                    break; // End of case 0xEB\n                case 0xED:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    if (length == 7 && buf.readableBytes() >= length) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3:\n                    // Nested TLV (type is 2 bytes, length is 1 byte)\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes() < 3) { // Need type (2) + length (1)\n                            break;\n                        }\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        int extendedEndIndex = buf.readerIndex() + extendedLength;\n\n                        if (extendedLength < 0 || extendedEndIndex > endIndex || buf.readableBytes() < extendedLength) {\n                            // Invalid length or not enough bytes\n                             buf.readerIndex(endIndex); // Skip to end of parent TLV\n                            break;\n                        }\n\n                        // Process based on type and length\n                        boolean processed = false; // Flag to check if data was read or needs skipping\n                        switch (extendedType) {\n                            case 0x0002: if (extendedLength == 2) { position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); processed = true; } break;\n                            case 0x0003: if (extendedLength == 2) { position.set(Position.KEY_RPM, buf.readUnsignedShort()); processed = true; } break;\n                            case 0x0004: if (extendedLength == 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); processed = true; } break;\n                            case 0x0005: if (extendedLength == 4) { position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); processed = true; } break;\n                            case 0x0007: if (extendedLength == 2) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); processed = true; } break;\n                            case 0x0008: if (extendedLength == 2) { position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); processed = true; } break;\n                            case 0x0009: if (extendedLength == 2) { position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); processed = true; } break;\n                            case 0x000B: if (extendedLength == 2) { position.set(\"intakePressure\", buf.readUnsignedShort()); processed = true; } break;\n                            case 0x000C: if (extendedLength == 2) { position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); processed = true; } break;\n                            case 0x000D: if (extendedLength == 2) { position.set(\"intakeFlow\", buf.readUnsignedShort()); processed = true; } break;\n                            case 0x000E: if (extendedLength == 2) { position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); processed = true; } break;\n                            case 0x0050: if (extendedLength == 17) { position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); processed = true; } break;\n                            case 0x0100: if (extendedLength == 2) { position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); processed = true; } break;\n                            case 0x0102: if (extendedLength == 2) { position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); processed = true; } break;\n                            case 0x0112: if (extendedLength == 2) { position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); processed = true; } break;\n                            case 0x0113: if (extendedLength == 2) { position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); processed = true; } break;\n                            case 0x0114: if (extendedLength == 2) { position.set(\"hardCorneringCount\", buf.readUnsignedShort()); processed = true; } break;\n                            default: break; // Unknown type, processed = false\n                        }\n                        // If data wasn't processed (due to length mismatch or unknown type), skip the bytes\n                        if (!processed) {\n                            buf.skipBytes(extendedLength);\n                        }\n                        // Ensure reader index is correct for next nested TLV or end of parent TLV\n                        buf.readerIndex(extendedEndIndex);\n                    }\n                    break;\n                 case 0xFE: // <<<< FIX APPLIED HERE\n                    if (length == 1 && buf.readableBytes() >= 1) {\n                        // If length is 1, it's battery level\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1 && buf.readableBytes() >= 1) {\n                        // If length > 1, check the first byte for alarm mark (0x7C)\n                        int mark = buf.readUnsignedByte(); // Read the first byte (mark)\n                        if (mark == 0x7C) {\n                            // Process alarm TLVs (nested structure: type 1 byte, length 1 byte)\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 2) { // Need type (1) + length (1)\n                                    break;\n                                }\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int alarmEndIndex = buf.readerIndex() + extendedLength;\n\n                                // Basic validation for alarmEndIndex and extendedLength\n                                if (extendedLength < 0 || alarmEndIndex > endIndex || buf.readableBytes() < extendedLength) {\n                                    buf.readerIndex(endIndex); // Avoid reading past end or skip if not enough data\n                                    break;\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength == 4) { // Expect exactly 4 bytes for alarm data\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            }\n                                            if (BitUtil.check(alarms, 1)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            }\n                                            if (BitUtil.check(alarms, 2)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            }\n                                            if (BitUtil.check(alarms, 3)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            }\n                                            if (BitUtil.check(alarms, 4)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                            }\n                                            // Add more alarm bit checks if necessary\n                                        } else {\n                                            buf.skipBytes(extendedLength); // Skip if length is not 4\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength); // Skip unknown alarm type\n                                        break;\n                                }\n                                // Ensure index is exactly at alarmEndIndex after processing/skipping this alarm TLV\n                                buf.readerIndex(alarmEndIndex);\n                            }\n                        }\n                        // If mark was not 0x7C, we have already read the mark byte.\n                        // Do nothing else here. The outer buf.readerIndex(endIndex) call (below the switch)\n                        // will advance the reader index past the remaining data for this TLV.\n                    }\n                    // If length == 0 or buffer was too short initially, do nothing.\n                    break; // End of case 0xFE\n                default:\n                    // Data for unknown subtypes will be skipped by buf.readerIndex(endIndex) below\n                    break;\n            }\n            // Set reader index to the end of the current TLV item.\n            // This ensures that even if a case partially reads, skips, or does nothing,\n            // the index moves correctly for the next iteration.\n            // It also handles skipping unknown subtypes entirely.\n            if (buf.readerIndex() < endIndex) {\n                 buf.readerIndex(endIndex);\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}