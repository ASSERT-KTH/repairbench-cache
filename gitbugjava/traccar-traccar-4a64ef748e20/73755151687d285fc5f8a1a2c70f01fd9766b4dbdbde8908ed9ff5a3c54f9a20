{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Ensure endIndex does not exceed buffer bounds or cause integer overflow\n            if (length < 0 || endIndex < buf.readerIndex() || endIndex > buf.writerIndex()) {\n                // Log error or break? For now, break to avoid reading past buffer or invalid lengths.\n                break;\n            }\n\n            // Ensure buffer has enough readable bytes for the declared length\n            if (buf.readableBytes() < length) {\n                 break;\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (length == 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x02:\n                    if (length == 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x2b:\n                    if (length == 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x30:\n                    if (length == 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x31:\n                    if (length == 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x33:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && length >= 15) { // Basic check for expected format\n                            try {\n                                String lockStatus = stringValue.substring(8, 8 + 7);\n                                position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                            } catch (IndexOutOfBoundsException | NumberFormatException e) {\n                                // Ignore if parsing fails\n                            }\n                        }\n                    }\n                    break;\n                case 0x60:\n                     if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        buf.skipBytes(length - 2);\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x69:\n                     if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x80:\n                    if (length >= 1) {\n                         buf.readUnsignedByte(); // content\n                         // Assuming decodeExtension should process remaining bytes up to endIndex\n                         decodeExtension(position, buf, endIndex);\n                    }\n                    // readerIndex will be set to endIndex outside the switch\n                    break;\n                case 0x91: // OBD data\n                    if (length == 20) { // Fixed length check based on fields read\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // intake air temperature?\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01); // instant\n                        buf.readUnsignedShort(); // average fuel consumption?\n                        buf.readUnsignedInt(); // mileage?\n                        buf.readUnsignedShort(); // fuel consumed this trip?\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01); // total fuel used?\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x94: // VIN\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7: // ADC\n                    if (length == 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xAC: // Odometer\n                     if (length == 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xBC: // Driver Name\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD: // Driver ID\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0: // User defined status\n                    if (length == 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD3: // External Power Voltage\n                    if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD4: // Battery Level (%)\n                case 0xE1: // Battery Level (%) - fallback/alternative\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD5: // Lock info / Battery Voltage\n                    if (length == 2) { // Simple battery voltage\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 1) { // Complex lock status\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // count byte + N * (id+card+batt+status)\n                        if (length == expectedLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        } else {\n                             buf.skipBytes(length - 1); // Skip remaining bytes after reading count\n                        }\n                    }\n                    break;\n                case 0xDA: // Device Status (e.g., string cut)\n                    if (length == 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xE6: // Temperature/Humidity Sensors\n                    if (length > 0 && length % (1 + 6 + 8 + 8) == 0) { // Check if length matches sensor block size\n                        while (buf.readerIndex() < endIndex) {\n                            int sensorIndex = buf.readUnsignedByte();\n                            buf.skipBytes(6); // mac\n                            position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                            position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                        }\n                    } else if (length > 0) {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xEB: // Network Info or Extended Data\n                    if (length > 0) {\n                        // Check first 2 bytes without consuming them to decide format\n                        if (buf.readableBytes() >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                             // Network info format\n                             if (buf.readableBytes() >= 3) { // Need MCC (2) + MNC (1) minimum\n                                Network network = new Network();\n                                int mcc = buf.readUnsignedShort();\n                                int mnc = buf.readUnsignedByte();\n                                while (buf.readerIndex() < endIndex) {\n                                    if (buf.readableBytes() < 5) break; // Need LAC(2) + CID(2) + RSSI(1)\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                if (!network.getCellTowers().isEmpty()) {\n                                   position.setNetwork(network);\n                                }\n                             } else {\n                                buf.skipBytes(length); // Not enough data for network header\n                             }\n                        } else {\n                            // Extended types format\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 4) break; // Need ext_length(2) + ext_type(2)\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                int dataLength = extendedLength - 2; // Adjust for type field size\n                                int extendedEndIndex = buf.readerIndex() + dataLength;\n\n                                if (dataLength < 0 || extendedEndIndex < buf.readerIndex() || extendedEndIndex > endIndex) {\n                                    buf.readerIndex(endIndex); // Invalid extended length, skip to main block end\n                                    break;\n                                }\n                                if (buf.readableBytes() < dataLength) {\n                                    buf.readerIndex(endIndex); // Not enough bytes, skip to main block end\n                                    break;\n                                }\n\n                                switch (extendedType) {\n                                    case 0x0001: if(dataLength==3) { position.set(\"fuel1\", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } else buf.skipBytes(dataLength); break;\n                                    case 0x0023: if(dataLength==6) { position.set(\"fuel2\", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } else buf.skipBytes(dataLength); break;\n                                    case 0x00CE: if(dataLength==2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } else buf.skipBytes(dataLength); break;\n                                    case 0x00D8: if(dataLength==9) { Network n = new Network(); n.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(n); } else buf.skipBytes(dataLength); break;\n                                    case 0xE1:   if(dataLength==1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } else buf.skipBytes(dataLength); break;\n                                    default: buf.skipBytes(dataLength); break;\n                                }\n                                buf.readerIndex(extendedEndIndex); // Move reader index robustly\n                            }\n                        }\n                    }\n                    break;\n                case 0xED: // Card Number\n                     if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE: // Basic Telemetry\n                     if (length == 7) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xF3: // Extended OBD\n                     if (length > 0) {\n                         while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 3) break; // Need type(2) + length(1)\n                            int extendedType = buf.readUnsignedShort();\n                            int extendedDataLength = buf.readUnsignedByte();\n                            int extendedEndIndex = buf.readerIndex() + extendedDataLength;\n\n                            if (extendedDataLength < 0 || extendedEndIndex < buf.readerIndex() || extendedEndIndex > endIndex) {\n                                buf.readerIndex(endIndex); break;\n                            }\n                            if (buf.readableBytes() < extendedDataLength) {\n                                buf.readerIndex(endIndex); break;\n                            }\n\n                            switch (extendedType) {\n                                case 0x0002: if(extendedDataLength==2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0003: if(extendedDataLength==2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0004: if(extendedDataLength==2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0005: if(extendedDataLength==4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0007: if(extendedDataLength==2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0008: if(extendedDataLength==2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0009: if(extendedDataLength==2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); else buf.skipBytes(extendedDataLength); break;\n                                case 0x000B: if(extendedDataLength==2) position.set(\"intakePressure\", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;\n                                case 0x000C: if(extendedDataLength==2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); else buf.skipBytes(extendedDataLength); break;\n                                case 0x000D: if(extendedDataLength==2) position.set(\"intakeFlow\", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;\n                                case 0x000E: if(extendedDataLength==2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0050: if(extendedDataLength==17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0100: if(extendedDataLength==2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0102: if(extendedDataLength==2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0112: if(extendedDataLength==2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0113: if(extendedDataLength==2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;\n                                case 0x0114: if(extendedDataLength==2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;\n                                default: buf.skipBytes(extendedDataLength); break;\n                            }\n                             buf.readerIndex(extendedEndIndex);\n                         }\n                    }\n                    break;\n                case 0xFE: // Battery Level / Extended Alarms\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) {\n                        int mark = buf.readUnsignedByte(); // Read the first byte (status or 0x7C marker)\n                        if (mark == 0x7C) {\n                            // Process extended data marked by 0x7C\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 2) break; // Need type(1) + length(1)\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedDataLength = buf.readUnsignedByte();\n                                int currentEndIndex = buf.readerIndex() + extendedDataLength;\n\n                                if (extendedDataLength < 0 || currentEndIndex < buf.readerIndex() || currentEndIndex > endIndex) {\n                                    buf.readerIndex(endIndex); break; // Invalid length\n                                }\n                                if (buf.readableBytes() < extendedDataLength) {\n                                    buf.readerIndex(endIndex); break; // Not enough data\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01: // Alarms\n                                        if (extendedDataLength == 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                            // Note: Does not set battery level here\n                                        } else {\n                                            buf.skipBytes(extendedDataLength);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedDataLength); // Skip unknown extended types\n                                        break;\n                                }\n                                buf.readerIndex(currentEndIndex); // Move reader index robustly\n                            }\n                        } else {\n                            // Mark is not 0x7C. Assume 'mark' is the battery level.\n                            position.set(Position.KEY_BATTERY_LEVEL, mark);\n                            // Skip remaining bytes within this subtype block (if any)\n                            buf.skipBytes(length - 1); // We already read 'mark' (1 byte)\n                        }\n                    } else {\n                        // Length is 0 or negative, should have been caught earlier but skip if reached\n                        buf.skipBytes(length);\n                    }\n                    break; // End of case 0xFE\n                default:\n                    // Skip unknown subtypes\n                    buf.skipBytes(length);\n                    break;\n            }\n            // Set reader index forcefully to end index for this subtype block\n            // This handles cases where processing didn't consume full length or skipped\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}