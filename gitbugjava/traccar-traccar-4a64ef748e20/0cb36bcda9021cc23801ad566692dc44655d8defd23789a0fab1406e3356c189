{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) { // Need at least subtype and length\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length; // End index for this TLV item\n\n            // Ensure length doesn't cause readerIndex to go beyond buffer capacity\n            if (endIndex > buf.writerIndex()) {\n                 // Data seems corrupt, stop processing TLVs\n                 break;\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                    if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) {\n                            String lockStatus = stringValue.substring(8, 8 + 7);\n                            if (lockStatus.length() >= 5) {\n                                try {\n                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                } catch (NumberFormatException e) {\n                                    // Ignore parsing error\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        buf.skipBytes(length - 2); // Skip remaining bytes if any\n                    }\n                    break;\n                case 0x69:\n                     if (length >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // endIndex is calculated relative to start of readerIndex *before* reading length\n                        // The following line seems wrong as it uses writerIndex. Assuming it intends to decode remaining TLV data.\n                        // decodeExtension(position, buf, endIndex); // Pass the correct end index for this TLV\n                        // Let's assume decodeExtension handles reading until endIndex\n                        decodeExtension(position, buf, endIndex);\n                    }\n                     break;\n                case 0x91:\n                    if (length >= 18) { // Check minimum length for all fields read\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort();\n                        buf.readUnsignedInt();\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                     if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1:\n                     if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) {\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2);\n                        if (length >= expectedLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    // Assuming decodeCustomDouble reads 8 bytes\n                    while (buf.readerIndex() < endIndex && buf.readableBytes() >= 1 + 6 + 8 + 8) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // Needs careful bounds checking\n                    if (length >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        if (length >= 3) {\n                            int mnc = buf.readUnsignedByte();\n                            while (buf.readerIndex() < endIndex && buf.readableBytes() >= 2 + 2 + 1) { // LAC, CID, RSSI\n                                network.addCellTower(CellTower.from(\n                                        mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                        buf.readUnsignedByte()));\n                            }\n                            if (!network.getCellTowers().isEmpty()) {\n                                position.setNetwork(network);\n                            }\n                        }\n                    } else {\n                        while (buf.readerIndex() < endIndex && buf.readableBytes() >= 4) { // Need length + type\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            int itemEndIndex = buf.readerIndex() + extendedLength - 2; // Data starts after type\n                            if (itemEndIndex > endIndex || extendedLength < 2) { // Check bounds and minimum length\n                                break; // Corrupt data\n                            }\n                            if (buf.readableBytes() < extendedLength - 2) { // Check enough data bytes remain\n                                break; // Corrupt data\n                            }\n                            switch (extendedType) {\n                                case 0x0001: // 3 bytes data\n                                    if (extendedLength - 2 >= 3) {\n                                        position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                        buf.readUnsignedByte(); // unused\n                                    }\n                                    break;\n                                case 0x0023: // 6 bytes data\n                                    if (extendedLength - 2 >= 6) {\n                                        try {\n                                            position.set(\"fuel2\", Double.parseDouble(\n                                                    buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                        } catch (NumberFormatException e) { /* ignore */ }\n                                    }\n                                    break;\n                                case 0x00CE: // 2 bytes data\n                                    if (extendedLength - 2 >= 2) {\n                                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    }\n                                    break;\n                                case 0x00D8: // 9 bytes data\n                                    if (extendedLength - 2 >= 9) {\n                                        Network network = new Network();\n                                        network.addCellTower(CellTower.from(\n                                                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                        position.setNetwork(network);\n                                    }\n                                    break;\n                                case 0xE1: // 1 byte data\n                                     if (extendedLength - 2 >= 1) {\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    }\n                                    break;\n                                default:\n                                    // Skip remaining bytes of this item\n                                    buf.readerIndex(itemEndIndex);\n                                    break;\n                            }\n                             // Ensure reader index is correctly positioned even if data was skipped or partially read\n                            buf.readerIndex(itemEndIndex);\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                     if (length >= 7) { // Check length for all reads\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex && buf.readableBytes() >= 3) { // Need type + length\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        int itemEndIndex = buf.readerIndex() + extendedLength;\n                        if (itemEndIndex > endIndex) { // Check bounds\n                            break; // Corrupt data\n                        }\n                        if (buf.readableBytes() < extendedLength) { // Check enough data bytes remain\n                             break; // Corrupt data\n                        }\n                        switch (extendedType) {\n                            // Add length checks for each case\n                            case 0x0002: if(extendedLength>=2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: if(extendedLength>=2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: if(extendedLength>=2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: if(extendedLength>=4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: if(extendedLength>=2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: if(extendedLength>=2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: if(extendedLength>=2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: if(extendedLength>=2) position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: if(extendedLength>=2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: if(extendedLength>=2) position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: if(extendedLength>=2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;\n                            case 0x0050: if(extendedLength>=17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: if(extendedLength>=2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: if(extendedLength>=2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: if(extendedLength>=2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: if(extendedLength>=2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: if(extendedLength>=2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: buf.skipBytes(extendedLength); break;\n                        }\n                        // Ensure reader index is correctly positioned\n                        buf.readerIndex(itemEndIndex);\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            // Process alarm TLVs within the remaining data\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 2) { // Need type and length bytes\n                                    break;\n                                }\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int itemEndIndex = buf.readerIndex() + extendedLength;\n                                if (itemEndIndex > endIndex) { // Check bounds against the overall FE block end\n                                     buf.readerIndex(endIndex); // Move to the end to avoid overreading\n                                     break; // Corrupt data\n                                }\n                                if (buf.readableBytes() < extendedLength) { // Check enough data bytes remain\n                                     buf.readerIndex(endIndex); // Move to the end\n                                     break; // Corrupt data\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength >= 4) { // Check length for alarm data\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            }\n                                            if (BitUtil.check(alarms, 1)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            }\n                                            if (BitUtil.check(alarms, 2)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            }\n                                            if (BitUtil.check(alarms, 3)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            }\n                                            if (BitUtil.check(alarms, 4)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                            }\n                                            // Skip remaining bytes within this item if any\n                                            buf.readerIndex(itemEndIndex);\n                                        } else {\n                                             buf.skipBytes(extendedLength); // Skip corrupt item\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                                // Ensure reader is at the end of the processed item\n                                buf.readerIndex(itemEndIndex);\n                            }\n                            // No separate battery level byte expected in this 7C structure\n                        } else { // mark != 0x7C\n                           // Assume the byte immediately following the mark is the battery level\n                           if (buf.readerIndex() < endIndex) { // Check if there's a byte left to read\n                               position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                           }\n                           // Any further remaining bytes will be skipped by the outer buf.readerIndex(endIndex)\n                        }\n                    }\n                    // Let the outer mechanism handle setting readerIndex to endIndex\n                    break;\n                default:\n                    // Skip unknown TLV type\n                    buf.readerIndex(endIndex); // Move reader index to the end of this TLV item\n                    break;\n            }\n            // Ensure reader index is set to the end of the current TLV item,\n            // even if processing logic didn't consume all bytes (e.g., due to errors or partial reads)\n            // This prevents infinite loops or incorrect reading of subsequent TLVs.\n             if (buf.readerIndex() > endIndex) {\n                 // If processing logic somehow went beyond endIndex, log error or break\n                 // Log.warning(\"Reader index moved beyond endIndex for subtype \" + subtype);\n                 break; // Avoid potential issues\n             }\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}