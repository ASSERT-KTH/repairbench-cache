{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        if (length > 2) {\n                            buf.skipBytes(length - 2);\n                        }\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); // content\n                    // The re-assignment of endIndex using writerIndex is highly suspect and a common source of issues.\n                    // However, altering it without full context of decodeExtension might break other parts.\n                    // For this specific fix, we focus on the reported issue.\n                    int extensionEndIndex = buf.writerIndex() - 2; // Original potentially problematic line\n                    decodeExtension(position, buf, extensionEndIndex);\n                    // The main loop's buf.readerIndex(endIndex) will use the original endIndex based on 'length'.\n                    // If decodeExtension doesn't consume up to the original 'endIndex' or if 'extensionEndIndex'\n                    // is unrelated to 'length', this might lead to data misinterpretation.\n                    // For now, assuming this case correctly manages its reader index or the main loop's\n                    // readerIndex adjustment correctly handles it.\n                    break;\n                case 0x91:\n                    // This case reads a fixed number of bytes. Ensure 'length' is sufficient.\n                    // Total bytes read: 2+2+1+1+1+1+2+2+4+2+2 = 20 bytes.\n                    if (length >= 20) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // unknown\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // unknown\n                        buf.readUnsignedInt();   // unknown\n                        buf.readUnsignedShort(); // unknown\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Ensure length is positive before reading count\n                        int count = buf.readUnsignedByte();\n                        // Check if remaining length is sufficient for 'count' items\n                        // Each item: 5 (id) + 5 (card) + 1 (battery) + 2 (status) = 13 bytes\n                        if (1 + count * 13 <= length) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                     // Needs 2 (cut count) + 1 (status) = 3 bytes\n                    if (length >= 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    // Each sensor: 1 (index) + 6 (mac) + 8 (temp) + 8 (humidity) = 23 bytes\n                    while (buf.readerIndex() + 23 <= endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // Needs to check readableBytes against endIndex before each read.\n                    // This case has complex nested structures. Adding full robustness here is extensive.\n                    // The primary fix is for 0xFE. Assuming 0xEB is functional for common cases.\n                    // Original logic for 0xEB is kept for now.\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) { // Check for cell tower data size\n                             if (buf.readerIndex() + 2 + 2 + 1 > endIndex) break; // lac, cid, rssi\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readerIndex() + 4 > endIndex) break; // Need 2 for len, 2 for type\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            int dataBytesToRead = extendedLength - 2; // Assuming extLen includes type field\n                            if (dataBytesToRead < 0 || buf.readerIndex() + dataBytesToRead > endIndex) {\n                                break; // Invalid length or not enough data\n                            }\n                            // ... (sub-cases for 0xEB as in original, with checks for dataBytesToRead) ...\n                            // Simplified for brevity, apply same robustness as in 0xFE for sub-fields\n                            switch (extendedType) {\n                                case 0x0001: if(dataBytesToRead>=3) {position.set(\"fuel1\", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte();} else buf.skipBytes(dataBytesToRead); break;\n                                case 0x0023: if(dataBytesToRead>=6) {position.set(\"fuel2\", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));} else buf.skipBytes(dataBytesToRead); break;\n                                case 0x00CE: if(dataBytesToRead>=2) {position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);} else buf.skipBytes(dataBytesToRead); break;\n                                case 0x00D8: if(dataBytesToRead>=9) {Network network = new Network(); network.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(network);} else buf.skipBytes(dataBytesToRead); break;\n                                case 0xE1: if(dataBytesToRead>=1) {position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());} else buf.skipBytes(dataBytesToRead); break;\n                                default: buf.skipBytes(dataBytesToRead); break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                     // Needs 1 (rssi) + 2 (power) + 2 (battery) + 1 (sat) = 6 bytes\n                    if (length >= 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3:\n                    // Similar to 0xEB, needs robust parsing for nested TLVs\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readerIndex() + 3 > endIndex) break; // Need 2 for type, 1 for len\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte(); // This is data length *after* this byte\n                        if (buf.readerIndex() + extendedLength > endIndex) {\n                            break; // Not enough data\n                        }\n                        // ... (sub-cases for 0xF3 as in original, with checks for extendedLength) ...\n                        // Simplified for brevity, apply same robustness\n                        switch (extendedType) {\n                            case 0x0002: if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); if (extendedLength > 2) buf.skipBytes(extendedLength - 2); break;\n                            case 0x0003: if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedLength); if (extendedLength > 2) buf.skipBytes(extendedLength - 2); break;\n                            // ... other 0xF3 cases ...\n                            case 0x0050: if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedLength); if (extendedLength > 17) buf.skipBytes(extendedLength - 17); break;\n                            default: buf.skipBytes(extendedLength); break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) { // length > 1\n                        int markByte = buf.readUnsignedByte(); // Read the first byte of the payload\n                        if (markByte == 0x7C) {\n                            // This is the 0x7C sub-protocol for alarms.\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 2) { // Need 1 for type, 1 for length\n                                    break; \n                                }\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedDataLength = buf.readUnsignedByte(); // Length of data following this byte\n\n                                if (buf.readableBytes() < extendedDataLength || buf.readerIndex() + extendedDataLength > endIndex) {\n                                    break; // Not enough data or exceeds FE block\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01: // Alarms\n                                        if (extendedDataLength >= 4) { // Alarm data is 4 bytes\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            }\n                                            if (BitUtil.check(alarms, 1)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            }\n                                            if (BitUtil.check(alarms, 2)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            }\n                                            if (BitUtil.check(alarms, 3)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            }\n                                            if (BitUtil.check(alarms, 4)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                            }\n                                            if (extendedDataLength > 4) { // Skip any padding bytes\n                                                buf.skipBytes(extendedDataLength - 4);\n                                            }\n                                        } else { // Not enough data for a full alarm dword\n                                            buf.skipBytes(extendedDataLength);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedDataLength);\n                                        break;\n                                }\n                            }\n                        } else {\n                            // If markByte is not 0x7C, the byte *after* markByte is the battery level.\n                            // This requires payload for FE to be at least 2 bytes: [markByte, batteryLevelByte].\n                            // We've read markByte (1 byte). Check if there's another byte within the 'length' of FE.\n                            if (buf.readerIndex() < endIndex) { \n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                        }\n                    }\n                    // If length was 0 or 1 (and not handled by length==1), or other unhandled conditions,\n                    // data will be skipped by buf.readerIndex(endIndex)\n                    break;\n                default:\n                    // For unknown subtypes, all 'length' bytes of payload are skipped by buf.readerIndex(endIndex)\n                    break;\n            }\n            // Ensure reader index is correctly positioned for the next TLV item,\n            // by advancing it to the end of the current item's defined length.\n            // This handles cases where a subtype's processing didn't consume all 'length' bytes.\n            if (buf.readerIndex() > endIndex) {\n                // This should not happen if parsing logic within each case is correct and respects 'length'.\n                // Log an error or handle as appropriate for protocol violations.\n            }\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}