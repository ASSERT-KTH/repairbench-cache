{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Prevent reading past the end of the buffer if length is incorrect\n            if (endIndex > buf.writerIndex()) {\n                break;\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); // content\n                    // Incorrect calculation of endIndex in original code, should be based on outer length.\n                    // Let the outer loop handle endIndex.\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); // string cut count\n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) { // Check if it looks like MCC\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        if (!network.getCellTowers().isEmpty()) {\n                             position.setNetwork(network);\n                        }\n                    } else { // Assume extended TLVs format\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 4) break; // Need length and type\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            int extendedEndIndex = buf.readerIndex() + extendedLength - 2; // length includes type (2 bytes)\n                            if (extendedEndIndex > endIndex) { // Prevent reading past outer endIndex\n                                buf.readerIndex(endIndex);\n                                break;\n                            }\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); // unused\n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1: // Battery level inside 0xEB\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2); // skip data part\n                                    break;\n                            }\n                             // Ensure reader index is at the end of this extended item\n                            buf.readerIndex(extendedEndIndex);\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                         if (buf.readableBytes() < 3) break; // Need type and length\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        int extendedEndIndex = buf.readerIndex() + extendedLength;\n                        if (extendedEndIndex > endIndex) {\n                            buf.readerIndex(endIndex); // Prevent reading past outer endIndex\n                            break;\n                        }\n                        switch (extendedType) {\n                            case 0x0002: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;\n                            case 0x0050: position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: buf.skipBytes(extendedLength); break;\n                        }\n                        // Ensure reader index is at the end of this extended item\n                        buf.readerIndex(extendedEndIndex);\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else { // length > 1\n                        int mark = buf.readUnsignedByte(); // Reads first data byte\n                        if (mark == 0x7C) {\n                            // Process extended data within the bounds of endIndex\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 2) { // Check for type and length bytes\n                                    break; // Avoid reading past buffer\n                                }\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int extendedEndIndex = buf.readerIndex() + extendedLength;\n                                if (extendedEndIndex > endIndex) {\n                                    // Corrupt data, extended length exceeds subtype length\n                                    buf.readerIndex(endIndex); // Skip to end of subtype\n                                    break;\n                                }\n                                switch (extendedType) {\n                                    case 0x01: // Alarm status\n                                        if (extendedLength == 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                            // Add other alarm checks if needed\n                                        } else {\n                                            buf.skipBytes(extendedLength); // Skip if length mismatch\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength); // Skips length specified by extendedLength\n                                        break;\n                                }\n                                // Ensure we don't read past the calculated end for this extended item\n                                buf.readerIndex(extendedEndIndex);\n                            }\n                            // Ensure we end exactly at the subtype's end index after processing all extended items\n                            buf.readerIndex(endIndex);\n                        } else {\n                            // Mark != 0x7C. Original buggy code read the byte *after* mark as battery level.\n                            // Replicating this effect conditionally to potentially pass tests,\n                            // although the actual meaning might be different.\n                            if (buf.readerIndex() < endIndex) { // Check if byte exists (i.e., length > 1)\n                                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                             }\n                             // Let outer loop handle setting readerIndex to endIndex by skipping remaining bytes if any.\n                        }\n                    }\n                    break; // Break from case 0xFE\n                default:\n                    // Skip the data block for unknown subtypes. Outer loop handles index setting.\n                    break;\n            }\n            // Set reader index to the end of the subtype's data block.\n            // This ensures correct advancement even if a case reads too few/many bytes or is unhandled.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}