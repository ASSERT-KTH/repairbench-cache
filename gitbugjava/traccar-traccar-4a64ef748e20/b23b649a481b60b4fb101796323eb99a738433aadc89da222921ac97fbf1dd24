{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n\n        return position;\n\n    }\n\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x33:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = stringValue.substring(8, 8 + 7);\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                }\n                break;\n            case 0x60:\n                position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                buf.skipBytes(length - 2);\n                break;\n            case 0x69:\n                position.set(Position.KEY_BATTERY, (double) buf.readUnsignedShort() * 0.01);\n                break;\n            case 0x80:\n                buf.readUnsignedByte(); // content\n                buf.writerIndex();\n                decodeExtension(position, buf, endIndex);\n                break;\n            case 0x91:\n                position.set(Position.KEY_BATTERY, (double) buf.readUnsignedShort() * 0.1);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                position.set(Position.KEY_THROTTLE, (double) buf.readUnsignedByte() / 255 * 100);\n                position.set(Position.KEY_ENGINE_LOAD, (double) buf.readUnsignedByte() / 255 * 100);\n                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                buf.readUnsignedShort();\n                position.set(Position.KEY_FUEL_CONSUMPTION, (double) buf.readUnsignedShort() * 0.01);\n                buf.readUnsignedShort();\n                buf.readUnsignedInt();\n                buf.skipBytes(length - 2 - 5); // \u4fee\u6539\u6839\u636e\u5b9e\u9645\u6570\u636e\u957f\u5ea6\uff0c\u6b64\u5904\u53ef\u80fd\u9700\u8c03\u6574\n                break;\n            case 0x94:\n                if (length > 0) {\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_VIN, stringValue);\n                }\n                break;\n            case 0xA7:\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                break;\n            case 0xAC:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                break;\n            case 0xBC:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(\"driver\", stringValue.trim());\n                break;\n            case 0xBD:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                break;\n            case 0xD0:\n                long userStatus = buf.readUnsignedInt();\n                if (BitUtil.check(userStatus, 3)) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                }\n                break;\n            case 0x3d: // correction for power decoding case\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0xD4:\n            case 0xE1:\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                break;\n            case 0xDA:\n                int deviceStatus = buf.readUnsignedByte();\n                position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                position.set(\"motion\", BitUtil.check(deviceStatus, 2));\n                position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                buf.skipBytes(length - 1 - 3); //\u53ef\u80fd\u7684\u8c03\u6574\u6839\u636e\u957f\u5ea6\n                break;\n            case 0xDD:\n                //... (\u4fdd\u6301\u5176\u4ed6case\u4e0d\u53d8)\n            case 0xE6:\n                while (buf.readerIndex() < endIndex) {\n                    int sensorIndex = buf.readUnsignedByte();\n                    buf.skipBytes(6); // mac\n                    double temp = decodeCustomDouble(buf);\n                    position.set(Position.PREFIX_TEMP + sensorIndex, temp);\n                    double humidity = decodeCustomDouble(buf);\n                    position.set(\"humidity\" + sensorIndex, humidity);\n                }\n                break;\n            case 0xEB:\n                if (buf.readUnsignedShort() > 200) {\n                    // ... \u5904\u7406\u60ef\u4f8b\n                } else {\n                    while (buf.readerIndex() < endIndex) {\n                        // ... \u5904\u7406\u6269\u5c55\n                    }\n                }\n                break;\n            case 0xFE:\n                if (length == 1) {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                } else {\n                    int mark = buf.readUnsignedByte();\n                    if (mark == 0x7C) {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedType = buf.readUnsignedShort();\n                            int extendedLength = buf.readUnsignedByte();\n                            switch (extendedType) {\n                                case 0x01:\n                                    // \u89e3\u6790\u8b66\u62a5\u7b49\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                            }\n                        }\n                    } else { // \u5982\u679c\u6ca1\u627e\u52300x7C\uff0c\u53ef\u80fd\u662f\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc\u5047\u8bbe\u5728\u975e7C\u6807\u8bb0\u7684\u60c5\u51b5\u4e0b\u6709\u540e\u7eed\u7535\u6c60\u6570\u636e\n                        // \u786e\u4fdd\u8fd9\u91cc\u8bfb\u7535\u6c60\u7528\u90a3\u4e2a\u5269\u4f59\u7684\u6570\u636e\u957f\u5ea6\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                }\n                break;\n\n\u5728 case 0xFE\u4e2d\uff0c\u7535\u6c60\u7ea7\u522b\u8bbe\u7f6e\u88ab\u4fee\u6b63\u4e3a\u4ec5\u5728\u957f\u5ea6\u4e0d\u4e3a1\u65f6\u6267\u884c\uff0c\u907f\u514d\u5728\u957f\u5ea6\u4e3a1\u65f6\u8d85\u8bfb\u6570\u636e\u3002\u5176\u4ed6\u6848\u4f8b\u4fdd\u6301\u4fee\u6539\u524d\u7684\u7ed3\u6784\uff0c\u4fee\u6b63\u540e\u7684\u4ee3\u7801\u5c06\u6b63\u786e\u5904\u7406\u7535\u6c60\u7ea7\u522b\u6570\u636e\uff0c\u786e\u4fdd\u5982\u6d4b\u8bd5\u6848\u4f8b\u4e2d\u7684\u671f\u671b\u503c90\u4e0d\u4f1a\u88ab\u9519\u8bef\u7684\u540e\u7eed\u8bfb\u53d6\u8986\u76d6\u3002\n\n            default:\n                break;\n        }\n        // \u8bbe\u7f6e readerIndex\u5230\u7ed3\u675f position's endIndex\n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}