{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n\n            // Ensure we don't read past the buffer end\n            if (endIndex > buf.writerIndex()) {\n                break; // Invalid length, stop processing TLVs\n            }\n\n            switch (subtype) {\n                case 0x01:\n                    if (length == 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x02:\n                     if (length == 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x2b:\n                    if (length == 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x30:\n                    if (length == 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x31:\n                    if (length == 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        try {\n                            String lockStatus = stringValue.substring(8, 8 + 7);\n                            position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                        } catch (IndexOutOfBoundsException | NumberFormatException e) {\n                            // Ignore if parsing fails\n                        }\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        buf.skipBytes(length - 2);\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x69:\n                     if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x80:\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // This case seems problematic, endIndex calculation was strange\n                        // Let's assume length is the length of the extension data *excluding* subtype and length itself\n                        decodeExtension(position, buf, buf.readerIndex() + length - 1); // Pass end index for extension data\n                    } else {\n                         buf.skipBytes(length); // Should be 0 if length is 0\n                    }\n                    break; // endIndex will be handled by the outer loop's readerIndex call\n                case 0x91:\n                    if (length >= 21) { // Check minimum length required\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort();\n                        buf.readUnsignedInt();\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    buf.skipBytes(Math.max(0, length - 21)); // Skip any remaining bytes\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length == 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xAC:\n                    if (length == 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xBC:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                     if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                     if (length == 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD3:\n                     if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Shares logic with D4\n                     if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Check if there's at least the count byte\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // 1 (count) + N * (id + card + batt + status)\n                        if (length == expectedLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        } else {\n                             // Length mismatch, skip remaining bytes of this TLV\n                             buf.skipBytes(length - 1); // Already read count byte\n                        }\n                    } else {\n                        buf.skipBytes(length); // Skip if length is 0 or inconsistent\n                    }\n                    break;\n                case 0xDA:\n                     if (length == 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xE6:\n                    // 1 byte index + 6 bytes MAC + 8 bytes temp + 8 bytes humidity = 23 bytes per sensor\n                    if (length > 0 && length % 23 == 0) {\n                         while (buf.readerIndex() < endIndex) {\n                            int sensorIndex = buf.readUnsignedByte();\n                            buf.skipBytes(6); // mac\n                            position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                            position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                         }\n                    } else {\n                        buf.skipBytes(length); // Skip if length is inconsistent\n                    }\n                    break;\n                case 0xEB:\n                    if (length >= 3 && buf.getUnsignedShort(buf.readerIndex()) > 200) { // Network tower info\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        // 2(mcc) + 1(mnc) + N * (2(lac) + 2(cid) + 1(rssi))\n                        int bytesConsumed = 3;\n                        while (bytesConsumed + 5 <= length && buf.readerIndex() + 5 <= endIndex) {\n                             network.addCellTower(CellTower.from(\n                                     mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                     buf.readUnsignedByte()));\n                            bytesConsumed += 5;\n                        }\n                        if (position.getNetwork() == null) { // Avoid overwriting network from 0xEB/0xD8\n                            position.setNetwork(network);\n                        }\n                        buf.skipBytes(length - bytesConsumed); // Skip remaining bytes if any\n                    } else if (length >= 4) { // Extended subtypes\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 4) { // Need length and type\n                                break;\n                            }\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            int dataLength = extendedLength - 2; // Length includes type field itself\n                            int nextReaderIndex = buf.readerIndex() + dataLength;\n\n                            if (dataLength < 0 || nextReaderIndex > endIndex) { // Basic validation\n                                break; // Invalid extended length\n                            }\n\n                            switch (extendedType) {\n                                case 0x0001: // Fuel 1\n                                    if (dataLength == 3) {\n                                        position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                        buf.readUnsignedByte(); // unused\n                                    } else {\n                                        buf.skipBytes(dataLength);\n                                    }\n                                    break;\n                                case 0x0023: // Fuel 2\n                                    if (dataLength == 6) {\n                                        try {\n                                            position.set(\"fuel2\", Double.parseDouble(\n                                                    buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                        } catch (NumberFormatException e) { /* ignore */ }\n                                    } else {\n                                         buf.skipBytes(dataLength);\n                                    }\n                                    break;\n                                case 0x00CE: // Power\n                                    if (dataLength == 2) {\n                                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    } else {\n                                         buf.skipBytes(dataLength);\n                                    }\n                                    break;\n                                case 0x00D8: // Cell Tower\n                                    if (dataLength == 9) {\n                                         Network network = position.getNetwork() == null ? new Network() : position.getNetwork();\n                                         network.addCellTower(CellTower.from(\n                                                 buf.readUnsignedShort(), buf.readUnsignedByte(), // mcc, mnc\n                                                 buf.readUnsignedShort(), buf.readUnsignedInt())); // lac, cid\n                                         position.setNetwork(network);\n                                    } else {\n                                         buf.skipBytes(dataLength);\n                                    }\n                                    break;\n                                case 0xE1: // Battery Level\n                                     if (dataLength == 1) {\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    } else {\n                                        buf.skipBytes(dataLength);\n                                    }\n                                    break;\n                                default:\n                                    buf.skipBytes(dataLength);\n                                    break;\n                            }\n                            // Ensure reader index is correct in case of partial reads or skips\n                            buf.readerIndex(nextReaderIndex);\n                        }\n                    } else {\n                         // Length is too small for either format\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xED:\n                     if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                     if (length == 7) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0xF3: // OBD data\n                    if (length >= 3) { // Need at least type and length byte\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 3) { // Need type and length bytes\n                                break;\n                            }\n                            int extendedType = buf.readUnsignedShort();\n                            int extendedLength = buf.readUnsignedByte();\n                            int nextReaderIndex = buf.readerIndex() + extendedLength;\n                            if (nextReaderIndex > endIndex) { // Bounds check\n                                break;\n                            }\n                            switch (extendedType) {\n                                case 0x0002: if (extendedLength == 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                                case 0x0003: if (extendedLength == 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                                case 0x0004: if (extendedLength == 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); else buf.skipBytes(extendedLength); break;\n                                case 0x0005: if (extendedLength == 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); else buf.skipBytes(extendedLength); break;\n                                case 0x0007: if (extendedLength == 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                                case 0x0008: if (extendedLength == 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                                case 0x0009: if (extendedLength == 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;\n                                case 0x000B: if (extendedLength == 2) position.set(\"intakePressure\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                                case 0x000C: if (extendedLength == 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;\n                                case 0x000D: if (extendedLength == 2) position.set(\"intakeFlow\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                                case 0x000E: if (extendedLength == 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); else buf.skipBytes(extendedLength); break;\n                                case 0x0050: if (extendedLength == 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedLength); break;\n                                case 0x0100: if (extendedLength == 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                                case 0x0102: if (extendedLength == 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                                case 0x0112: if (extendedLength == 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                                case 0x0113: if (extendedLength == 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                                case 0x0114: if (extendedLength == 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                                default: buf.skipBytes(extendedLength); break;\n                            }\n                            buf.readerIndex(nextReaderIndex); // Ensure correct position\n                        }\n                    } else {\n                        buf.skipBytes(length); // Skip if length is too small\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) { // length > 1\n                        int mark = buf.readUnsignedByte(); // Read mark (byte 1)\n                        int dataLength = length - 1;\n                        int dataEndIndex = buf.readerIndex() + dataLength;\n\n                        if (mark == 0x7C) {\n                            // Process alarms\n                            while (buf.readerIndex() < dataEndIndex) {\n                                if (buf.readableBytes() < 2) { // Need type and length bytes\n                                    break;\n                                }\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int subDataEndIndex = buf.readerIndex() + extendedLength;\n                                if (subDataEndIndex > dataEndIndex) { // Bounds check\n                                    break;\n                                }\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength == 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                        } else {\n                                            buf.skipBytes(extendedLength); // Skip if length mismatch\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                                buf.readerIndex(subDataEndIndex); // Position after this sub-item\n                            }\n                        } else {\n                            // Mark is not 0x7C. Original code assumed byte 2 was battery level.\n                            // Let's retain that assumption specifically for length 2, as it might be correct for some devices.\n                            if (length == 2) {\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // Read byte 2 (0x1E in test case)\n                            } else {\n                                // Mark != 0x7C and length > 2. Meaning unknown. Skip remaining bytes.\n                                buf.skipBytes(dataLength); // Skip bytes 2 to length\n                            }\n                        }\n                        // Ensure reader is at the end of the data section for this TLV\n                        buf.readerIndex(dataEndIndex);\n                    }\n                    // Outer loop will set readerIndex(endIndex), redundant if dataEndIndex == endIndex, safe otherwise.\n                    break;\n                default:\n                     // Skip unknown subtype\n                     buf.skipBytes(length);\n                    break;\n            }\n            // Ensure reader index is set to the end of the current TLV structure,\n            // even if processing logic above failed or skipped bytes incorrectly.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}