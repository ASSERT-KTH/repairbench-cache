{
    "generation": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n    final var commandType = ariCommand.extractCommandType();\n\n    // If the command type indicates it's a delete command, it should not register.\n    // Also, if it's not a creation command (and not a delete command that was caught by the first part),\n    // it should not register.\n    // This combined check correctly handles the case where a delete command might erroneously\n    // be classified as a creation command by `isCreationCommand()`.\n    // This assumes that the object returned by `extractCommandType()` has a method\n    // `isDeleteCommand()` (or similar) to identify delete operations.\n    if (commandType.isDeleteCommand() || !commandType.isCreationCommand()) {\n      return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}