{
    "generation": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n    // Extract command type once to use for multiple checks\n    final AriCommandType commandType = ariCommand.extractCommandType();\n\n    // If the command is a delete command, or if it's not a creation command,\n    // do not attempt to register a call context.\n    // This explicitly handles DELETE requests as per the test requirements,\n    // and maintains the original logic for other non-creation commands.\n    // We assume AriCommandType has an isDeleteCommand() method.\n    if (commandType.isDeleteCommand() || !commandType.isCreationCommand()) {\n      return Try.success(Done.done());\n    }\n\n    // If we reach here, the command is considered a creation command and not a delete command.\n    // Proceed to extract the resource.\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n      // This case means it was marked as a creation command,\n      // but no specific \"created\" resource was found via extractResourceRelations.\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}