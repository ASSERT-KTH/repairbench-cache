{
    "generation": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n    // A command needs to be a creation command AND result in a created resource\n    // relation to trigger context registration.\n    // Check the command type first. If it's not a creation command, we're done.\n    if (!ariCommand.extractCommandType().isCreationCommand()) {\n      return Try.success(Done.done());\n    }\n\n    // If it IS classified as a creation command, try to find the resource\n    // that was actually created according to the resource relations.\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n\n    // Only if we find a specific created resource do we register the context.\n    // If isCreationCommand() was true, but we don't find a created resource,\n    // that indicates an inconsistency or error.\n    if (maybeResource.isEmpty()) {\n      // Log or handle the inconsistency? The original code threw an exception.\n      // Let's maintain that behavior: if it's supposedly a creation command,\n      // we expect a created resource.\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Command '%s' classified as creation, but failed to extract created resourceId\",\n                  ariCommand.toString())));\n    }\n\n    // We found the created resource, proceed with registration.\n    final AriResource resource = maybeResource.get();\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}