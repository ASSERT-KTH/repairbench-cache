{
    "generation": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n    if (!ariCommand.extractCommandType().isCreationCommand()) {\n      return Try.success(Done.done());\n    }\n\n    // Only register call context for commands that both:\n    // (a) are creation commands\n    // (b) NOT DELETE commands (DELETE may satisfy isCreationCommand for some reason, so check explicitly)\n    if (\"DELETE\".equalsIgnoreCase(ariCommand.extractMethod())) {\n      return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}