{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null; // Current parameter node corresponding to the argument\n    Node argument = null;\n    Node varArgsParameter = null; // Stores the varargs parameter node if found\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      // Determine the parameter node to use for the current argument.\n      parameter = null; // Reset parameter for this argument\n      if (varArgsParameter != null) {\n        // If we've already found the varargs parameter, use it for subsequent arguments.\n        parameter = varArgsParameter;\n      } else if (parameters.hasNext()) {\n        // Otherwise, if there are more formal parameters, get the next one.\n        parameter = parameters.next();\n        // Check if this parameter is the varargs parameter.\n        // Node.isVarArgs() checks if the parameter is declared with '...'\n        if (parameter.isVarArgs()) {\n            varArgsParameter = parameter;\n        }\n      }\n      // If parameter is still null here, it means we have more arguments\n      // than formal parameters, and none of the formal parameters was varargs.\n      // The argument count check later will handle this specific error (WRONG_ARGUMENT_COUNT).\n\n      // Perform the type check if we have a parameter node for this argument.\n      if (parameter != null) {\n          // We need the JSType associated with the parameter node.\n          // For varargs parameter (...T), the type check should be against T.\n          // getJSType(parameter) should return the appropriate type for validation.\n          JSType parameterType = getJSType(parameter);\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), parameterType, call, ordinal);\n      }\n    }\n\n    // Check argument count after iterating through all provided arguments.\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      // This check correctly reports errors for too few arguments (< minArgs),\n      // or too many arguments (> maxArgs) when the function is not varargs.\n      // If the function is varargs, maxArgs is usually Integer.MAX_VALUE,\n      // so maxArgs < numArgs should not trigger.\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              // Only add the upper bound string if it's not effectively infinite.\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}