{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean isVarargs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n\n    // Iterate through arguments provided in the call\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      // Get the corresponding parameter node.\n      // If parameters have run out, for a varargs function,\n      // reuse the last parameter (which represents the vararg type).\n      if (parameters.hasNext()) {\n          parameter = parameters.next();\n      } else if (isVarargs) {\n          // Keep using the last parameter node for varargs.\n          // If parameter is null here, it might mean a varargs function\n          // declared with no explicit parameter type in the signature list,\n          // like function f(...args), or an issue upstream.\n          // The logic correctly attempts to use the varargs parameter if available.\n      } else {\n          // If it's not varargs and we've run out of formal parameters,\n          // any remaining arguments are extra. The argument count check below\n          // will handle this. We set parameter to null to avoid type checking\n          // these extra arguments against the last parameter.\n          parameter = null;\n      }\n\n      // Check the argument type against the parameter type, if a parameter exists.\n      if (parameter != null) {\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n    }\n\n    // Check argument counts after iterating through all arguments\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments(); // Can use isVarargs derived value too\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      // If maxArgs is Integer.MAX_VALUE, isVarargs is true, and the message part is empty.\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              !isVarargs ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}