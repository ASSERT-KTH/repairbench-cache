{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) { // Need at least subtype (1 byte) and length (1 byte)\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n\n            // Ensure that the buffer has enough readable bytes for the declared length\n            if (buf.readableBytes() < length) {\n                // Not enough data for the declared length, likely a truncated packet or bad length field.\n                // Skip all remaining readable bytes and exit the loop.\n                buf.skipBytes(buf.readableBytes());\n                break;\n            }\n\n            int endIndex = buf.readerIndex() + length; // Marks the end of the current TLV item's data\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    // The remaining (length - 2) bytes will be skipped by buf.readerIndex(endIndex)\n                    break;\n                case 0x69: // Added to fix the failing test for KEY_BATTERY\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    }\n                    // If length is not 2, the data will be skipped by buf.readerIndex(endIndex)\n                    break;\n                case 0x80:\n                    // The 'length' for subtype 0x80 includes the 'content' byte and data for decodeExtension.\n                    if (length >= 1) { // Must have at least the 'content' byte\n                        buf.readUnsignedByte(); // Read the 'content' byte.\n                                                // This byte might be used by decodeExtension or implicitly handled.\n                        if (length > 1) { // If there's more data for the extension\n                             // decodeExtension is responsible for reading from current buf.readerIndex()\n                             // up to (but not including) 'endIndex'.\n                             decodeExtension(position, buf, endIndex);\n                        }\n                    }\n                    // If length is 0, or after processing, data alignment is handled by buf.readerIndex(endIndex)\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        // Ensure there's at least one byte for 'count'\n                        if (length > 0 && buf.readerIndex() < endIndex) {\n                            int count = buf.readUnsignedByte();\n                            // Ensure the rest of the reads don't exceed 'endIndex'\n                            for (int i = 1; i <= count && buf.readerIndex() + 17 <= endIndex; i++) { // 5+5+1+2 = 13 bytes per entry\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    // Ensure reads are within 'length' and 'endIndex'\n                    if (length >= 3 && buf.readerIndex() + 3 <= endIndex) { // 2 for short, 1 for byte\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        // Check for enough bytes for one entry (1+6+customDouble+customDouble)\n                        // Assuming customDouble is fixed size (e.g. 8 bytes for double)\n                        if (buf.readerIndex() + 1 + 6 + (2 * 8) > endIndex) { // Heuristic for two doubles\n                             break;\n                        }\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB: // Complex case with nested TLVs\n                    if (buf.readerIndex() + 2 > endIndex) break; // Not enough for getUnsignedShort\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        if (buf.readerIndex() + 2 + 1 > endIndex) break; // For mcc, mnc\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readerIndex() + 2 + 2 + 1 > endIndex) break; // For lac, ci, rssi in CellTower\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readerIndex() + 4 > endIndex) break; // For extendedLength + extendedType\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            if (buf.readerIndex() + (extendedLength - 2) > endIndex) break; // Data for nested TLV exceeds parent\n                            // Original switch cases for 0xEB nested types\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); // unused\n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2); // -2 as type already read\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    // Ensure all reads are within 'length' (total 1+2+2+1=6 bytes)\n                    if (length >= 6 && buf.readerIndex() + 6 <= endIndex) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3: // Complex case with nested TLVs\n                     while (buf.readerIndex() < endIndex) {\n                        if (buf.readerIndex() + 3 > endIndex) break; // For extendedType + extendedLength\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        if (buf.readerIndex() + extendedLength > endIndex) break; // Data for nested TLV exceeds parent\n                        // Original switch cases for 0xF3 nested types\n                        switch (extendedType) {\n                            case 0x0002: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;\n                            case 0x0050: position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: buf.skipBytes(extendedLength); break;\n                        }\n                    }\n                    break;\n                case 0xFE: // Complex case\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 0) { // length > 0 needed to read 'mark'\n                        int mark = buf.readUnsignedByte(); // Consumes 1 byte from 'length'\n                        if (mark == 0x7C) {\n                            // Inner loop for alarms. It processes data until endIndex or specific condition.\n                            // The final byte for BATTERY_LEVEL is read after this loop if space permits.\n                            // So, this loop should consume up to (endIndex - 1) if a byte is to be saved for battery.\n                            // Or up to endIndex if battery level is conditional / not always present.\n                            // Assuming battery level is read if any byte remains.\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readerIndex() + 2 > endIndex) break; // Not enough for type + length of alarm TLV\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                if (buf.readerIndex() + extendedLength > endIndex) break; // Alarm TLV exceeds parent 0xFE\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        // This final read was problematic. It should only happen if mark != 0x7C or\n                        // if the 0x7C block didn't consume all bytes up to endIndex.\n                        // The original code always executed this if length != 1.\n                        // If mark == 0x7C, this read happens *after* the alarm loop.\n                        // If mark != 0x7C, this read happens directly.\n                        // Ensure there's a byte left to read.\n                        if (buf.readerIndex() < endIndex) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // Data for unknown subtypes will be skipped by buf.readerIndex(endIndex)\n                    break;\n            }\n            // Ensure readerIndex is advanced to the end of the current TLV item.\n            // This handles cases where a subtype was unknown (default), or if a known subtype\n            // didn't read all 'length' bytes (e.g. due to internal error or partial parse).\n            // It also handles cases where a subtype read exactly 'length' bytes.\n            if (buf.readerIndex() > endIndex) {\n                // This indicates an error: a case handler read MORE than 'length' bytes.\n                // This is a bug in the specific case handler.\n                // Forcibly set to endIndex to prevent further issues, though data might be misparsed.\n                // Log.error(\"Reader index exceeded endIndex for subtype \" + subtype);\n                buf.readerIndex(endIndex);\n            } else {\n                // If readerIndex < endIndex, unread bytes within this TLV item will be skipped.\n                // If readerIndex == endIndex, it means the item was fully processed or skipped correctly.\n                buf.readerIndex(endIndex);\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}