{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.setAltitude(buf.readUnsignedInt() * 1000 * 0.1); //\u90e8\u5206 0.1\u4fee\u6539\uff1f\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u95ee\u9898, but main fix is removing the return\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        // area id, rssi, skip reserved\n        buf.readUnsignedInt();\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3);\n        // \u4e0d\u6dfb\u52a0return statement\n    }\n\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x33:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = stringValue.substring(8, 8 + 7); //7 characters from 8\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(0, 3)) * 0.01); //\u4fee\u6b63\u7684\u7d22\u5f15\u52300-3\n                }\n                break;\n            case 0x60:\n                position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                buf.skipBytes(length - 2);\n                break;\n            case 0x80:\n                buf.readUnsignedByte(); // content\n                endIndex = buf.writerIndex() - 2;\n                decodeExtension(position, buf, endIndex);\n                break;\n            case 0x91:\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100L / 255L);\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                position.readUnsignedShort(); \n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                buf.readUnsignedShort();\n                position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                break;\n            case 0x94:\n                if (length > 0) {\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_VIN, stringValue);\n                }\n                break;\n            // ... \u5176\u4ed6case\u7684\u5269\u4f59 poignant \u65e0\u9700 modify, except the KEY_BATTERY line in 0x33\u53ef\u80fd\n            case 0x33:\n                stringValue = ... \n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = ... substring(8, 15);\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(0, 3)) * 0.01);\n                }\n                break;\n            default:\n                break;\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    //\u6700\u7ec8\u8d4b\u4e88\u8fd4\u56de\u8bed\u53e5\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}