{
    "generation": "import io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport org.traccar.helper.BitUtil;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\nimport org.traccar.session.DeviceSession;\n\nimport java.nio.charset.StandardCharsets;\n\npublic abstract class HuabaoProtocolDecoder { // Class must be abstract as per context or implement needed methods\n\n    protected abstract String getProtocolName();\n    protected abstract int decodeAlarm(long alarm); // Placeholder for existing method\n    protected abstract void decodeCoordinates(Position position, ByteBuf buf); // Placeholder for existing method\n    protected abstract java.util.Date readDate(ByteBuf buf, Object timezone); // Placeholder for existing method\n    protected abstract double decodeCustomDouble(ByteBuf buf); // Placeholder for existing method\n    protected abstract void decodeExtension(Position position, ByteBuf buf, int endIndex); // Placeholder for existing method\n\n    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x02:\n                    if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x2b:\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x30:\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x31:\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x33:\n                    if (length > 0) { // Ensure length is positive before reading char sequence\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\")) {\n                            // Ensure lockStatus string has enough characters before substring operations\n                            if (stringValue.length() >= 8 + 7) {\n                                String lockStatus = stringValue.substring(8, 8 + 7);\n                                if (lockStatus.length() >= 5) { // Needs at least 5 chars for substring(2, 5)\n                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        buf.skipBytes(length - 2);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x80:\n                    // Removed `endIndex = buf.writerIndex() - 2;` to respect TLV length for 0x80\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // Ensure decodeExtension operates within this TLV's bounds.\n                        // Pass this TLV's endIndex to decodeExtension.\n                        decodeExtension(position, buf, endIndex);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x91:\n                    // Total bytes read is 22. Ensure length is sufficient.\n                    if (length >= 22) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort();\n                        buf.readUnsignedInt();\n                        buf.readUnsignedShort();\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xBC:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 2) {\n                        if (length >= 1 && buf.readableBytes() >= 1) { // Ensure enough bytes for count\n                            int count = buf.readUnsignedByte();\n                            int bytesRead = 1; // 1 byte for count\n                            for (int i = 1; i <= count; i++) {\n                                // Each lock consumes 5+5+1+2 = 13 bytes\n                                if (bytesRead + 13 <= length && buf.readableBytes() >= 13) {\n                                    position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                    position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                    position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                    int status = buf.readUnsignedShort();\n                                    position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                                    bytesRead += 13;\n                                } else {\n                                    // Not enough bytes for full lock data or remaining part of the length, skip rest\n                                    buf.skipBytes(endIndex - buf.readerIndex());\n                                    break;\n                                }\n                            }\n                        } else {\n                            buf.skipBytes(length); // Not enough bytes for count\n                        }\n                    } else { // length is 0 or 1, and not 2\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xE6:\n                    // This internal loop correctly uses `endIndex` for this subtype's payload.\n                    // decodeCustomDouble is assumed to consume fixed bytes or handle its own bounds.\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes() < 1) { // Sensor index\n                            break;\n                        }\n                        int sensorIndex = buf.readUnsignedByte();\n                        if (buf.readableBytes() < 6 + 8 + 8) { // mac (6) + temp (8) + humidity (8)\n                            buf.skipBytes(endIndex - buf.readerIndex());\n                            break;\n                        }\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (length >= 4 && buf.readableBytes() >= 4) { // check if enough for getUnsignedShort\n                        // This uses buf.getUnsignedShort(buf.readerIndex()) which doesn't advance pointer\n                        if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                            Network network = new Network();\n                            if (length >= 3) { // mcc (2) + mnc (1)\n                                int mcc = buf.readUnsignedShort();\n                                int mnc = buf.readUnsignedByte();\n                                // Inner loop for cell towers, respect TLV endIndex\n                                while (buf.readerIndex() < endIndex) {\n                                    if (buf.readableBytes() < 5) { // CellTower.from needs 5 bytes (2+2+1)\n                                        buf.skipBytes(endIndex - buf.readerIndex());\n                                        break;\n                                    }\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                position.setNetwork(network);\n                            } else { // length is not enough for mcc/mnc, skip remaining.\n                                buf.skipBytes(endIndex - buf.readerIndex());\n                            }\n                        } else {\n                            // Inner loop for extended TLVs within 0xEB, respect TLV endIndex\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 4) { // extendedLength (2) + extendedType (2)\n                                    buf.skipBytes(endIndex - buf.readerIndex());\n                                    break;\n                                }\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                // Ensure `extendedLength` includes the 2 bytes for `extendedType`\n                                // and doesn't read beyond `endIndex` of parent `0xEB` TLV.\n                                int extendedSubEndIndex = buf.readerIndex() + extendedLength - 2;\n                                if (extendedSubEndIndex > endIndex) {\n                                    extendedSubEndIndex = endIndex;\n                                }\n\n                                switch (extendedType) {\n                                    case 0x0001:\n                                        if (extendedLength >= 3 && buf.readableBytes() >= 3) { // fuel (2) + unused (1)\n                                            position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                            buf.readUnsignedByte(); // unused\n                                        }\n                                        break;\n                                    case 0x0023:\n                                        if (extendedLength >= 6 && buf.readableBytes() >= 6) { // 6 bytes for string\n                                            position.set(\"fuel2\", Double.parseDouble(\n                                                    buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                        }\n                                        break;\n                                    case 0x00CE:\n                                        if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                        }\n                                        break;\n                                    case 0x00D8:\n                                        if (extendedLength >= 9 && buf.readableBytes() >= 9) { // 2+1+2+4\n                                            Network network = new Network();\n                                            network.addCellTower(CellTower.from(\n                                                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                    buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                            position.setNetwork(network);\n                                        }\n                                        break;\n                                    case 0xE1:\n                                        if (extendedLength >= 1 && buf.readableBytes() >= 1) {\n                                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                        }\n                                        break;\n                                    default:\n                                        // Handled by buf.readerIndex(extendedSubEndIndex);\n                                        break;\n                                }\n                                // Ensure readerIndex is at the end of the current extended TLV\n                                buf.readerIndex(extendedSubEndIndex);\n                            }\n                        }\n                    } else { // Not enough bytes for initial check or length is 0\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xED:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    // Total bytes read is 6. Ensure length is sufficient.\n                    if (length >= 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xF3:\n                    // Similar to 0xEB, nested TLV.\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes() < 3) { // extendedType (2) + extendedLength (1)\n                            buf.skipBytes(endIndex - buf.readerIndex());\n                            break;\n                        }\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        int extendedSubEndIndex = buf.readerIndex() + extendedLength;\n\n                        // Prevent reading beyond parent endIndex\n                        if (extendedSubEndIndex > endIndex) {\n                            extendedSubEndIndex = endIndex;\n                        }\n\n                        switch (extendedType) {\n                            case 0x0002:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                }\n                                break;\n                            case 0x0003:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                }\n                                break;\n                            case 0x0004:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                }\n                                break;\n                            case 0x0005:\n                                if (extendedLength >= 4 && buf.readableBytes() >= 4) {\n                                    position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                }\n                                break;\n                            case 0x0007:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                }\n                                break;\n                            case 0x0008:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                }\n                                break;\n                            case 0x0009:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                }\n                                break;\n                            case 0x000B:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(\"intakePressure\", buf.readUnsignedShort());\n                                }\n                                break;\n                            case 0x000C:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                }\n                                break;\n                            case 0x000D:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                }\n                                break;\n                            case 0x000E:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                }\n                                break;\n                            case 0x0050:\n                                if (extendedLength >= 17 && buf.readableBytes() >= 17) {\n                                    position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                }\n                                break;\n                            case 0x0100:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                }\n                                break;\n                            case 0x0102:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                }\n                                break;\n                            case 0x0112:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                }\n                                break;\n                            case 0x0113:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                }\n                                break;\n                            case 0x0114:\n                                if (extendedLength >= 2 && buf.readableBytes() >= 2) {\n                                    position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                }\n                                break;\n                            default:\n                                // Handled by buf.readerIndex(extendedSubEndIndex);\n                                break;\n                        }\n                        // Ensure readerIndex is at the end of the current extended TLV\n                        buf.readerIndex(extendedSubEndIndex);\n                    }\n                    break;\n                case 0xFE:\n                    // Fix: Ensure bytes are read only if length allows, preventing buffer rewind.\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length >= 2) { // Minimum length for mark + potential battery level\n                        int mark = buf.readUnsignedByte(); // Consumes 1 byte for mark\n                        if (mark == 0x7C) {\n                            // This internal loop processes sub-TLVs until the end of the 0xFE's payload.\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes() < 2) { // extendedType (1) + extendedLength (1)\n                                    buf.skipBytes(endIndex - buf.readerIndex()); // Consume remaining bytes if any\n                                    break;\n                                }\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int extendedSubEndIndex = buf.readerIndex() + extendedLength;\n\n                                // Prevent reading beyond parent 0xFE's endIndex\n                                if (extendedSubEndIndex > endIndex) {\n                                    extendedSubEndIndex = endIndex;\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength >= 4 && buf.readableBytes() >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            }\n                                            if (BitUtil.check(alarms, 1)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            }\n                                            if (BitUtil.check(alarms, 2)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            }\n                                            if (BitUtil.check(alarms, 3)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            }\n                                            if (BitUtil.check(alarms, 4)) {\n                                                position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                            }\n                                        }\n                                        break;\n                                    default:\n                                        // Handled by buf.readerIndex(extendedSubEndIndex);\n                                        break;\n                                }\n                                buf.readerIndex(extendedSubEndIndex); // Ensure consumed up to sub-endIndex\n                            }\n                        }\n                        // After mark or inner loop, if there's still a byte left before endIndex, read it as battery level.\n                        if (buf.readerIndex() < endIndex && buf.readableBytes() >= 1) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    } else {\n                        // If length is 0, nothing to read in this case.\n                        // The outer `buf.readerIndex(endIndex)` will handle skipping 0 bytes.\n                    }\n                    break;\n                default:\n                    // If subtype is not handled, skip its payload using the length.\n                    break;\n            }\n            // Ensure the reader index is at the end of the current subtype's payload.\n            // This handles unhandled subtypes and ensures correct positioning for next TLV.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}