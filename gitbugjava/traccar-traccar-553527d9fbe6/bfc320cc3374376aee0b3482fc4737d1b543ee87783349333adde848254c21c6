{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        // Check for the fixed 20-byte format AFTER reading the common fields\n        // Common fields read: alarm(4) + coords(13) + alt(2) + speed(2) + course(2) + time(6) = 29 bytes.\n        // If exactly 20 bytes remain after these, use the fixed format.\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            // The battery calculation here uses 0.1 multiplier.\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n            return position;\n        }\n\n        // Handle variable TLV extensions\n        while (buf.readableBytes() > 1) { // Need at least subtype and length bytes\n\n            buf.markReaderIndex(); // Mark position before reading TLV header\n            int subtype = buf.readUnsignedByte();\n            if (!buf.isReadable()) {\n                 // Should not happen if readableBytes > 1, but safety check\n                 buf.resetReaderIndex();\n                 break;\n            }\n            int length = buf.readUnsignedByte();\n            int currentReaderIndex = buf.readerIndex();\n            int endIndex = currentReaderIndex + length;\n\n            // Boundary check: ensure declared length doesn't lead beyond buffer limits\n            if (endIndex > buf.writerIndex()) {\n                // Log error: \"TLV length exceeds buffer bounds\"\n                buf.resetReaderIndex(); // Restore index to before this invalid TLV header\n                break; // Stop processing TLVs for this message\n            }\n\n            // Boundary check: ensure buffer has enough remaining bytes for the declared value length\n            if (length > buf.readableBytes()) {\n                 // Log error: \"Not enough data in buffer for declared TLV length\"\n                 buf.resetReaderIndex(); // Restore index\n                 break; // Stop processing TLVs\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01: // Odometer\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02: // Fuel Level\n                    if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b: // Fuel Consumption\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30: // RSSI\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31: // Satellites\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33: // String based lock status / battery\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) { // Check length before substring\n                            String lockStatus = stringValue.substring(8, 15); // 7 chars expected\n                            if (lockStatus.length() >= 5) { // Check length for substring [2, 5)\n                                try {\n                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                } catch (NumberFormatException e) {\n                                    // Ignore parsing error\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x60: // Event Code\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0x69: // ADDED CASE FOR BATTERY based on test data inspection (0x018B -> 3.95)\n                    if (length == 2) {\n                       position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x80: // Extension data block\n                    // Original code incorrectly modified endIndex.\n                    // Assuming decodeExtension parses the content of this TLV item up to the correct endIndex.\n                    if (length > 0) {\n                         // Pass the correct end boundary for this TLV item\n                         decodeExtension(position, buf, endIndex);\n                    }\n                    break;\n                case 0x91: // OBD data block\n                     // Calculate required length: 2+2+1+1+1+1+2+2+2+4+2+2 = 24 bytes\n                     if (length >= 24) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0); // Use float division\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0); // Use float division\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.skipBytes(2); // Skip unknown/reserved\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.skipBytes(2); // Skip unknown/reserved\n                        buf.skipBytes(4); // Skip unknown/reserved\n                        buf.skipBytes(2); // Skip unknown/reserved\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                     }\n                    break;\n                case 0x94: // VIN\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7: // ADC values\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC: // Odometer (alternative)\n                     if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC: // Driver Name string\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD: // Driver ID string\n                     if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0: // User Status / Vibration Alarm\n                     if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                     }\n                    break;\n                case 0xD3: // Power (Voltage)\n                     if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4: // Battery Level percentage\n                case 0xE1: // Battery Level percentage (duplicate type code?)\n                     if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5: // Battery Voltage or Lock Status\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) {\n                        // Check if structure matches lock info format\n                        int count = buf.getUnsignedByte(buf.readerIndex()); // Peek count byte\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // Calculate expected length based on count\n                        if (count > 0 && length == expectedLength) {\n                            buf.readUnsignedByte(); // Consume count byte\n                            for (int i = 1; i <= count; i++) {\n                                // Ensure enough bytes for one lock structure before reading\n                                if (buf.readableBytes() >= 13) {\n                                    position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                    position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                    position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                    int status = buf.readUnsignedShort();\n                                    position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                                } else {\n                                     break; // Not enough data remaining for the full lock structure\n                                }\n                            }\n                        }\n                        // If length doesn't match expected structure, data will be skipped below\n                    }\n                    break;\n                case 0xDA: // Device Status (String Cut, Motion, Cover)\n                    if (length >= 3) {\n                        buf.readUnsignedShort(); // string cut count (unused)\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6: // Wireless Temperature/Humidity Sensors\n                    // Unknown structure of decodeCustomDouble, loop safely until endIndex\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes() < 7) break; // Need at least index(1) + mac(6)\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        // Assume decodeCustomDouble handles reading its data and stops before endIndex\n                        if (buf.readerIndex() < endIndex) {\n                             position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        }\n                        if (buf.readerIndex() < endIndex) {\n                             position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                        }\n                        // Break if decodeCustomDouble didn't advance readerIndex to prevent infinite loop\n                        if (buf.readerIndex() == currentReaderIndex + 7) { // Check if index only advanced by 7 (index+mac)\n                            break;\n                        }\n                    }\n                    break;\n                case 0xEB: // Network Info or Nested Extended TLVs\n                    if (length > 0) {\n                        int firstTwoBytes = buf.getUnsignedShort(buf.readerIndex()); // Peek first 2 bytes\n                        // Use heuristic: MCC > 200 likely means GSM Cell Info structure\n                        if (firstTwoBytes > 200 && length >= 3) { // GSM Cell Info\n                             if (buf.readableBytes() >= 3) { // Check readable bytes before reading\n                                Network network = new Network();\n                                int mcc = buf.readUnsignedShort();\n                                int mnc = buf.readUnsignedByte();\n                                // Size of each cell tower: lac(2) + cid(2) + rssi(1) = 5 bytes\n                                while (buf.readableBytes() >= 5 && buf.readerIndex() < endIndex) {\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                if (!network.getCellTowers().isEmpty()) {\n                                    position.setNetwork(network);\n                                }\n                             }\n                        } else { // Nested Extended TLVs (Type(2)+Length(2)+Value)\n                            while (buf.readableBytes() >= 4 && buf.readerIndex() < endIndex) { // Need inner header\n                                int extendedLength = buf.readUnsignedShort(); // Total length including type field\n                                int extendedType = buf.readUnsignedShort();\n                                int extendedValueIndex = buf.readerIndex();\n                                int bytesInValue = extendedLength - 2; // Length of value part\n                                int extendedEndIndex = extendedValueIndex + bytesInValue;\n\n                                // Validate inner TLV structure and boundaries\n                                if (extendedLength < 2 || bytesInValue < 0 || extendedEndIndex > endIndex) {\n                                    break; // Invalid inner TLV structure or boundary violation\n                                }\n                                 if (buf.readableBytes() < bytesInValue) {\n                                     break; // Not enough data for inner value\n                                 }\n\n                                // Process known inner types\n                                switch (extendedType) {\n                                    case 0x0001: if (bytesInValue >= 3) { position.set(\"fuel1\", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } break;\n                                    case 0x0023: if (bytesInValue >= 6) { try { position.set(\"fuel2\", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (Exception e) {/* ignore */} } break;\n                                    case 0x00CE: if (bytesInValue >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } break;\n                                    case 0x00D8: if (bytesInValue >= 9) { Network n = new Network(); n.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(n); } break;\n                                    case 0xE1:   if (bytesInValue >= 1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } break;\n                                    default: break; // Skip unknown inner type\n                                }\n                                buf.readerIndex(extendedEndIndex); // Ensure index is at end of inner value block\n                            }\n                        }\n                    }\n                    break;\n                case 0xED: // Card string\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE: // RSSI, Power, Battery, Satellites block\n                     if (length >= 6) { // 1+2+2+1 = 6 bytes\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3: // OBD Data (Nested TLV: type(2)+len(1)+value)\n                     while (buf.readableBytes() >= 3 && buf.readerIndex() < endIndex) { // Need inner header\n                        int extendedType = buf.readUnsignedShort();\n                        if (buf.readableBytes() < 1) break; // Need inner length byte\n                        int extendedLength = buf.readUnsignedByte(); // Length of value part\n                        int extendedValueIndex = buf.readerIndex();\n                        int extendedEndIndex = extendedValueIndex + extendedLength;\n\n                        // Validate inner TLV structure and boundaries\n                        if (extendedLength < 0 || extendedEndIndex > endIndex) {\n                           break; // Invalid inner TLV structure or boundary violation\n                        }\n                         if (buf.readableBytes() < extendedLength) {\n                             break; // Not enough data for inner value\n                         }\n\n                        // Process known inner types\n                        switch (extendedType) {\n                            case 0x0002: if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: if (extendedLength >= 2) position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: if (extendedLength >= 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: if (extendedLength >= 2) position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: if (extendedLength >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); break;\n                            case 0x0050: if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: if (extendedLength >= 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: if (extendedLength >= 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: if (extendedLength >= 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: if (extendedLength >= 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: break; // Skip unknown inner type\n                        }\n                        buf.readerIndex(extendedEndIndex); // Ensure index is at end of inner value block\n                    }\n                    break;\n                case 0xFE: // Battery Level or Driving Behavior Alarms (Nested TLV: marker(0x7C)+type(1)+len(1)+value)\n                    if (length == 1) { // Simple case: single byte battery level\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 0) {\n                        // Check for 0x7C marker indicating nested TLV structure\n                        if (buf.getUnsignedByte(buf.readerIndex()) == 0x7C) {\n                            buf.readUnsignedByte(); // Consume 0x7C marker\n                             // Process inner TLVs (type(1)+len(1)+value)\n                             while (buf.readableBytes() >= 2 && buf.readerIndex() < endIndex) { // Need inner header\n                                int extendedType = buf.readUnsignedByte();\n                                if (buf.readableBytes() < 1) break; // Need inner length byte\n                                int extendedLength = buf.readUnsignedByte(); // Length of value part\n                                int extendedValueIndex = buf.readerIndex();\n                                int extendedEndIndex = extendedValueIndex + extendedLength;\n\n                                // Validate inner TLV structure and boundaries\n                                if (extendedLength < 0 || extendedEndIndex > endIndex) {\n                                   break; // Invalid inner TLV structure or boundary violation\n                                }\n                                 if (buf.readableBytes() < extendedLength) {\n                                     break; // Not enough data for inner value\n                                 }\n\n                                // Process known inner types\n                                switch (extendedType) {\n                                    case 0x01: // Driving Behavior Alarms\n                                        if (extendedLength >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            // Use position.add to accumulate multiple alarms if necessary\n                                            if (BitUtil.check(alarms, 0)) position.add(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            if (BitUtil.check(alarms, 1)) position.add(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            if (BitUtil.check(alarms, 2)) position.add(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            if (BitUtil.check(alarms, 3)) position.add(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            if (BitUtil.check(alarms, 4)) position.add(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default: break; // Skip unknown inner type\n                                }\n                                buf.readerIndex(extendedEndIndex); // Ensure index is at end of inner value block\n                             }\n                        } else {\n                             // If marker is not 0x7C, assume original intent was single byte battery level if length=1\n                             // (already handled by the length == 1 check above)\n                             // If length > 1 and no 0x7C, the format is unknown, data will be skipped.\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype, data will be skipped by buf.readerIndex(endIndex) below\n                    break;\n            }\n            // Ensure reader index is advanced to the end of the TLV item's value block.\n            // This handles skipping unknown subtypes and ensures correct positioning even\n            // if a case handler didn't read the full length (due to insufficient data or format mismatch).\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}