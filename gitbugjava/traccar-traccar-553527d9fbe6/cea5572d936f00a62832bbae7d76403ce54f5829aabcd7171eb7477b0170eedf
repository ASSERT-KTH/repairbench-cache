{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte(); // Declared length from TLV\n            int endIndex = buf.readerIndex() + length; // Tentative end index\n\n            // General robustness: ensure endIndex does not exceed buffer capacity.\n            // This helps prevent IndexOutOfBoundsException if a declared length is too large.\n            if (endIndex > buf.writerIndex()) {\n                endIndex = buf.writerIndex();\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (length == 4 && buf.readerIndex() + 4 <= endIndex) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    } else {\n                        // Malformed or data won't fit, skip to calculated endIndex\n                        // The final buf.readerIndex(endIndex) will handle this.\n                    }\n                    break;\n                case 0x02:\n                    if (length > 0 && buf.readerIndex() + 2 <= endIndex) { // Assuming length refers to data size\n                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x16: // Special handling for subtype 0x16 based on test data behavior\n                    final int ACTUAL_DATA_LENGTH_FOR_0x16 = 25;\n                    // The 'length' variable (0x59 in test case) is the declared TLV length.\n                    // We override this with a fixed interpretation for 0x16's data consumption.\n                    if (buf.readerIndex() + ACTUAL_DATA_LENGTH_FOR_0x16 <= buf.writerIndex()) {\n                        // Skip the 25 bytes of 0x16's actual data content.\n                        buf.skipBytes(ACTUAL_DATA_LENGTH_FOR_0x16);\n                        // Update 'endIndex' for the main loop to reflect actual consumption.\n                        endIndex = buf.readerIndex();\n                    } else {\n                        // Not enough data for even the assumed fixed length. Skip to (potentially capped) buffer end.\n                        endIndex = buf.writerIndex(); // ensure we don't try to read past buffer\n                    }\n                    break;\n                case 0x2b:\n                    if (length > 0 && buf.readerIndex() + 4 <= endIndex) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                     if (length > 0 && buf.readerIndex() + 1 <= endIndex) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (length > 0 && buf.readerIndex() + 1 <= endIndex) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    if (length > 0 && buf.readerIndex() + length <= endIndex) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\")) {\n                            String lockStatus = stringValue.substring(8, 8 + 7);\n                            position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                        }\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2 && buf.readerIndex() + length <= endIndex) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        if (length > 2) {\n                           buf.skipBytes(length - 2);\n                        }\n                    }\n                    break;\n                case 0x69: // Added case to handle battery information for the failing test\n                    if (length == 2 && buf.readerIndex() + 2 <= endIndex) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                         // Data is not in the expected format for battery or length is wrong.\n                         // The main loop's buf.readerIndex(endIndex) will skip remaining bytes of this item.\n                    }\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); // content\n                    int extensionActualEnd = buf.writerIndex() - 2;\n                    // Ensure extensionActualEnd is not before current reader index\n                    if (extensionActualEnd < buf.readerIndex()) {\n                        extensionActualEnd = buf.readerIndex();\n                    }\n                    decodeExtension(position, buf, extensionActualEnd);\n                    // Ensure buf.readerIndex is at extensionActualEnd after decodeExtension,\n                    // as decodeExtension might stop short if it finds an issue.\n                    buf.readerIndex(extensionActualEnd);\n                    // Update the main loop's endIndex to reflect where this item actually finished.\n                    endIndex = extensionActualEnd;\n                    break;\n                case 0x91:\n                    // This case reads many fields; ensure total read bytes match 'length'\n                    // For brevity, not adding individual checks here, assuming original was correct for its length\n                    // or that final buf.readerIndex(endIndex) correctly skips if it reads less.\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0 && buf.readerIndex() + length <= endIndex) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4 && buf.readerIndex() + 4 <= endIndex) { // 2 shorts = 4 bytes\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length == 4 && buf.readerIndex() + 4 <= endIndex) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                     if (length > 0 && buf.readerIndex() + length <= endIndex) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0 && buf.readerIndex() + length <= endIndex) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4 && buf.readerIndex() + 4 <= endIndex) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2 && buf.readerIndex() + 2 <= endIndex) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Merged from 0xEB's sub-case\n                    if (length >= 1 && buf.readerIndex() + 1 <= endIndex) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2 && buf.readerIndex() + 2 <= endIndex) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0 && buf.readerIndex() + length <= endIndex) { // Check if enough bytes for the more complex structure\n                        int count = buf.readUnsignedByte();\n                        // Validate 'count' against remaining length if necessary\n                        for (int i = 1; i <= count; i++) {\n                            // Each item: 5 (id) + 5 (card) + 1 (battery) + 2 (status) = 13 bytes\n                            if (buf.readerIndex() + 13 <= endIndex) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            } else {\n                                break; // Not enough data for full lock item\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3 && buf.readerIndex() + 3 <= endIndex) { // 2 (count) + 1 (status)\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    // This is a loop, ensure it doesn't go past endIndex\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readerIndex() + 1 + 6 + 8 + 8 > endIndex && buf.readableBytes() < (1 + 6 + 8 + 8) ) { // Approximation: 1 byte sensorIndex + 6 MAC + 2*double (assume decodeCustomDouble reads 8 bytes)\n                            break; // Not enough for a full entry\n                        }\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB: // This case has complex internal logic and nested TLVs.\n                           // Original code should be reviewed for robustness against 'length' and 'endIndex'.\n                           // For this fix, we assume its internal logic correctly respects its own 'length'.\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) { // check against outer endIndex\n                            if (buf.readerIndex() + 5 > endIndex) break; // CellTower needs 2+2+1 bytes\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        if(!network.getCellTowers().isEmpty()) position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) { // check against outer endIndex\n                            if (buf.readerIndex() + 4 > endIndex) break; // extendedLength + extendedType\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            if (buf.readerIndex() + (extendedLength - 2) > endIndex) { // Data part of sub-TLV\n                                buf.readerIndex(endIndex); // Skip to end of parent TLV\n                                break;\n                            }\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); // unused\n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1: // Already handled as top-level case D4/E1\n                                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (length > 0 && buf.readerIndex() + length <= endIndex) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    if (length >= (1+2+2+1) && buf.readerIndex() + (1+2+2+1) <= endIndex) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3: // Similar to 0xEB, complex internal logic\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readerIndex() + 3 > endIndex) break; // type + length for sub-TLV\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte(); // This length is for data part\n                         if (buf.readerIndex() + extendedLength > endIndex) {\n                            buf.readerIndex(endIndex); // Skip to end of parent TLV\n                            break;\n                        }\n                        switch (extendedType) {\n                            case 0x0002: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;\n                            case 0x0050: position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: buf.skipBytes(extendedLength); break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1 && buf.readerIndex() + 1 <= endIndex) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1 && buf.readerIndex() + length <= endIndex) { // Check if enough bytes for the structure\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            // This is another nested loop, ensure it respects 'endIndex' of parent 0xFE\n                            // Original was: while (buf.readerIndex() < endIndex)\n                            // This means endIndex of 0xFE itself.\n                            int feContentEndIndex = buf.readerIndex() -1 + length; // end for 0xFE data, -1 for mark already read\n                            if (feContentEndIndex > endIndex) feContentEndIndex = endIndex; // cap\n\n                            while (buf.readerIndex() < feContentEndIndex -1) { // -1 for the trailing battery level byte\n                                if (buf.readerIndex() + 2 > feContentEndIndex -1 ) break; // type + length\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                if (buf.readerIndex() + extendedLength > feContentEndIndex -1) {\n                                    buf.readerIndex(feContentEndIndex -1); // skip to before battery level\n                                    break;\n                                }\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        // This battery level read should be conditional on remaining bytes and if mark was 0x7C or not.\n                        // Assuming it's always present if length > 1\n                        if (buf.readerIndex() < feContentEndIndex) { // Check if there's a byte left for battery level.\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // For unknown subtypes, the main buf.readerIndex(endIndex) call will skip 'length' bytes.\n                    // If length > 0 and buf.readerIndex() < endIndex, data will be skipped.\n                    break;\n            }\n            buf.readerIndex(endIndex); // Move reader to the end of the current TLV item\n        }\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}