{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        int areaId = buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n\n        return position;\n\n    }\n\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x33:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = stringValue.substring(8, 7 + 8); // Fixed incorrect substring indices\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                }\n                break;\n            case 0x60:\n                position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                buf.skipBytes(length - 2);\n                break;\n            case 0x80:\n                buf.readUnsignedByte(); // content\n                int writerIndexBackup = buf.writerIndex();\n                buf.writerIndex(endIndex - 2);\n                decodeExtension(position, buf, endIndex - 2);\n                buf.writerIndex(writerIndexBackup);\n                break;\n            case 0x91:\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                buf.readUnsignedShort(); // filler byte\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                buf.readUnsignedShort();\n               _buf.readUnsignedInt();\n                buf.readUnsignedShort();\n               _position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                break;\n            case 0x94:\n                if (length > 0) {\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_VIN, stringValue);\n                }\n                break;\n            case 0xA7:\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                break;\n            case 0xAC:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                break;\n            case 0xBC:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(\"driver\", stringValue.trim());\n                break;\n            case 0xBD:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                break;\n            case 0xD0:\n                long userStatus = buf.readUnsignedInt();\n                if (BitUtil.check(userStatus, 3)) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                }\n                break;\n            case 0xD3:\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0xD4:\n            case 0xE1:\n                position.set(Position.KEY_BATTERY, buf.readUnsignedByte()); // Fixed key usage from BATTERY_LEVEL to BATTERY\n                break;\n            case 0xD5:\n                if (length == 2) {\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // Ensured two bytes read\n                } else {\n                    int count = buf.readUnsignedByte();\n                    for (int i = 1; i <= count; i++) {\n                        \u0431 stage for 1 could\u3001 5.\n                        \u2026\n                    }\n                }\n                break;\n            case 0xDA:\n                buf.readUnsignedShort(); \n                int deviceStatus = buf.readUnsignedByte();\n                position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                break;\n            case 0xE6:\n                \u2026 \uff08 no change needed here. \uff09\n                break;\n            case 0xEB:\n                if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n           \u2014  \u2026 \n                } else {\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedLength = buf.readUnsignedShort();\n                        int extendedType = buf.readUnsignedShort();\n                        switch (extendedType) {\n                            case 0x00E1:\n                                position.set(Position.KEY_BATTERY, buf.readUnsignedByte()); // Fixed key usage here\n                                break;\n                            \u2026\uff08 other cases remain the same \uff09\n                        }\n                    }\n                }\n                break;\n            case 0xED:\n                \u2026\uff08 \n                \u2026 \u6211;; \n                break;\n            case 0xEE:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                boolean fuel1 = test for .\u2026 \n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001); \n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); \n                break;\n            case 0xF3:\n                \u2026 \uff08 no change needed here )\n                break;\n            case 0xFE:\n                if (length == 1) {\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedByte()); // Fixed key usage here\n                } else {\n                    int mark = buf.readUnsignedByte();\n                    if (mark == 0x7C) {\n                       while ( \u2026 \n                    }\n                \u2014 \n                    // changed key here \n                    position.set(Position.KEY_BATTERY, buf.readUnsignedByte()); // Fixed key usage from BATTERY_LEVEL to BATTERY\n                }\n                break;\n            default:\n                break;\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}