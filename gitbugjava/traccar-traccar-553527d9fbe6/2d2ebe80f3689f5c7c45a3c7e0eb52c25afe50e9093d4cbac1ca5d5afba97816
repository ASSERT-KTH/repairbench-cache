{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf); // Assumes reads 12 bytes (status, lat, lon)\n\n        position.setAltitude(buf.readShort()); // 2 bytes\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1)); // 2 bytes\n        position.setCourse(buf.readUnsignedShort()); // 2 bytes\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE))); // Assumes reads 6 bytes\n\n        // Process Type-Length-Value fields\n        // The original 'if (buf.readableBytes() == 20)' block was removed as it seemed\n        // too specific and potentially conflicted with the general TLV structure.\n        // If specific fixed formats exist, they need clearer identification (e.g., based on message type).\n\n        while (buf.readableBytes() > 1) { // Need at least 2 bytes for Type and Length/Data\n\n            int subtype = buf.getUnsignedByte(buf.readerIndex()); // Peek subtype to check for special case\n            int length;\n            int dataStartIndex;\n\n            // Special handling for subtype 0x01 (Odometer):\n            // Based on test data, this subtype might be followed by a bogus length byte (e.g., 0xFE).\n            // Assume the actual data length is fixed at 4 bytes, and skip the bogus length byte.\n            if (subtype == 0x01) {\n                if (buf.readableBytes() < 1 + 1 + 4) { // Need ID(1) + BogusLength(1) + Data(4)\n                    // Log.warn(\"Huabao: Not enough data for special subtype 0x01 processing\");\n                    break; // Not enough data for this structure\n                }\n                buf.readUnsignedByte(); // Consume subtype 0x01\n                buf.readUnsignedByte(); // Consume and IGNORE the byte following 0x01 (bogus length)\n                length = 4; // Use fixed length for odometer data\n                dataStartIndex = buf.readerIndex(); // Data starts after the ignored byte\n            } else {\n                // Standard TLV structure: Type(1), Length(1), Value(Length)\n                buf.readUnsignedByte(); // Consume subtype\n                if (buf.readableBytes() < 1) { // Check if Length byte exists\n                    // Log.warn(\"Huabao: Not enough data for TLV length byte\");\n                    break; // Not enough data\n                }\n                length = buf.readUnsignedByte(); // Consume length byte\n                dataStartIndex = buf.readerIndex(); // Data starts after length byte\n            }\n\n            int endIndex = dataStartIndex + length;\n\n            // Basic bounds check for safety - ensure endIndex is valid and data is available\n            if (length < 0 || endIndex > buf.writerIndex()) {\n                 // Log.warn(\"Huabao: Invalid TLV length(\" + length + \") or endIndex calculated for subtype \" + subtype);\n                 break; // Stop processing TLV - indicates data corruption\n            }\n            // Check if buffer actually contains enough data for the declared length\n            if (length > buf.readableBytes()) {\n                 // Log.warn(\"Huabao: Declared TLV length (\" + length + \") exceeds readable bytes (\"\n                 //         + buf.readableBytes() + \") for subtype \" + subtype);\n                 break; // Stop processing TLV - indicates data corruption or incorrect length\n            }\n\n            // Process based on subtype\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    // Length is guaranteed to be 4 due to special handling above\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02: // Fuel Level\n                    if (length == 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if length != 2, ensure index is advanced\n                    }\n                    break;\n                case 0x2b: // Fuel Consumption\n                    if (length == 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if length != 4\n                    }\n                    break;\n                case 0x30: // RSSI\n                    if (length == 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if length != 1\n                    }\n                    break;\n                case 0x31: // Satellites\n                    if (length == 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if length != 1\n                    }\n                    break;\n                case 0x33: // Lock Status String\n                    if (length >= 15) { // Minimum length for \"*M00\" + 8 chars prefix + 7 chars status\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        // Example format \"*M00,ID?,+0038600Roy1Open&000000000000&1234567890123456#\"\n                        // Battery seems to be 3 digits after \"+\", like \"+00386\" -> 3.86\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) { // Check length again after read\n                            try {\n                                String lockStatus = stringValue.substring(8, 15); // Extract status part (e.g., \"+0038600\")\n                                if (lockStatus.length() >= 5 && lockStatus.startsWith(\"+\")) { // Check prefix and min length\n                                     position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01); // Parse digits 2,3,4\n                                }\n                            } catch (NumberFormatException | IndexOutOfBoundsException e) {\n                                // Log.warn(\"Huabao: Failed to parse battery from lock status string\", e);\n                            }\n                        }\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if too short\n                    }\n                    break;\n                case 0x60: // Event\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    }\n                    // Let final index setting handle skipping remaining bytes if length > 2\n                    break;\n                case 0x80: // Extension\n                    if (length > 0) {\n                        // Pass the end boundary for the extension data; assume decodeExtension respects it.\n                        decodeExtension(position, buf, endIndex);\n                    }\n                    // Let final index setting ensure correct positioning\n                    break;\n                case 0x91: // OBD Data\n                    if (length >= 24) { // Minimum length for all fields read\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1); // Note: 0.1 factor\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255.0); // Use double division\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255.0); // Use double division\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.skipBytes(2); // Skip 2 bytes (unused)\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.skipBytes(2); // Skip 2 bytes (unused)\n                        buf.skipBytes(4); // Skip 4 bytes (unused)\n                        buf.skipBytes(2); // Skip 2 bytes (unused)\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                        // Set reader index to end of consumed data (24 bytes from start)\n                        buf.readerIndex(dataStartIndex + 24);\n                    }\n                    // Let final index setting handle skipping remaining bytes if length > 24 or skipping entirely if length < 24\n                    break;\n                case 0x94: // VIN\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7: // ADC 1, 2\n                    if (length == 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if length != 4\n                    }\n                    break;\n                case 0xAC: // Odometer (alternative)\n                    if (length == 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if length != 4\n                    }\n                    break;\n                case 0xBC: // Driver Name\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD: // Driver ID\n                     if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                     }\n                     break;\n                 case 0xD0: // User Status / Alarm\n                     if (length == 4) {\n                         long userStatus = buf.readUnsignedInt();\n                         if (BitUtil.check(userStatus, 3)) {\n                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                         }\n                     } else {\n                          buf.readerIndex(endIndex); // Skip if length != 4\n                     }\n                     break;\n                 case 0xD3: // Power Voltage\n                     if (length == 2) {\n                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                     } else {\n                          buf.readerIndex(endIndex); // Skip if length != 2\n                     }\n                     break;\n                 case 0xD4: // Battery Level (%)\n                 case 0xE1: // Battery Level (%) - may be nested\n                     if (length == 1) {\n                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                     } else {\n                          buf.readerIndex(endIndex); // Skip if length != 1\n                     }\n                     break;\n                 case 0xD5: // Battery Voltage or Lock Status\n                    if (length == 2) { // Voltage\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // Note: 0.01 factor (395 -> 3.95)\n                    } else if (length > 1) { // Lock Status\n                        // Check if enough data for count byte\n                        if (buf.readableBytes() >= 1) {\n                            int count = buf.readUnsignedByte();\n                            int expectedDataLength = count * (5 + 5 + 1 + 2); // N * (id+card+batt+status)\n                            // Check if remaining length matches expected and count > 0\n                            if (length == 1 + expectedDataLength && count > 0 && buf.readableBytes() >= expectedDataLength) {\n                                for (int i = 1; i <= count; i++) {\n                                    position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                    position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                    position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                    int status = buf.readUnsignedShort();\n                                    position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                                }\n                            } else {\n                                // Length mismatch or count=0 or not enough data, skip remaining part of this TLV\n                                buf.readerIndex(endIndex);\n                            }\n                        } else {\n                             // Not enough data for count byte, skip TLV\n                             buf.readerIndex(endIndex);\n                        }\n                    }\n                    // If length is 0 or 1, it's skipped by setting index below\n                     break;\n                case 0xDA: // Device Status (string cut etc)\n                    if (length >= 3) {\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    // Let final index setting handle skipping remaining bytes if length > 3 or skipping entirely if length < 3\n                    break;\n                case 0xE6: // Temp/Humidity Sensors\n                     int sensorRecordSize = 1 + 6 + 8 + 8; // index(1) + mac(6) + temp(8) + humidity(8) = 23 bytes\n                     if (length > 0 && length % sensorRecordSize == 0) {\n                         while (buf.readerIndex() < endIndex) { // Process sensor records\n                            // Add bounds check inside loop for robustness\n                            if (buf.readableBytes() < sensorRecordSize) break;\n                             int sensorIndex = buf.readUnsignedByte();\n                             buf.skipBytes(6); // mac\n                             position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                             position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                         }\n                     } else {\n                         // Skip if length is not a positive multiple of record size\n                         buf.readerIndex(endIndex);\n                     }\n                     break;\n                 case 0xEB: // Network Info or Extended Fuel/Power/Battery (Sub-TLV: Type 2, Length 2)\n                     // Peek first short to decide structure type\n                     if (buf.readableBytes() >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) { // Cell Towers\n                         Network network = new Network();\n                         int mcc = buf.readUnsignedShort();\n                         int mnc = buf.readUnsignedByte();\n                         // Process cell towers until the end of this TLV element (endIndex)\n                         while (buf.readerIndex() < endIndex && buf.readableBytes() >= 5) { // Need lac(2)+cid(2)+rssi(1)\n                             network.addCellTower(CellTower.from(\n                                     mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                         }\n                         if (!network.getCellTowers().isEmpty()) {\n                             position.setNetwork(network);\n                         }\n                     } else { // Extended fields (Sub-TLV)\n                         // Process sub-TLVs until the end of this TLV element (endIndex)\n                         while (buf.readerIndex() < endIndex && buf.readableBytes() >= 4) { // Need extLength(2)+extType(2)\n                             int extendedLength = buf.readUnsignedShort();\n                             int extendedType = buf.readUnsignedShort();\n                             int extendedDataLength = extendedLength - 2; // Data part length, must be >= 0\n                             int extendedEndIndex = buf.readerIndex() + extendedDataLength;\n\n                             // Validate sub-TLV length and bounds\n                             if (extendedLength < 2 || extendedEndIndex > endIndex || extendedDataLength < 0) break;\n                             if (extendedDataLength > buf.readableBytes()) break; // Check data availability\n\n                             switch (extendedType) {\n                                 case 0x0001: // fuel1\n                                     if (extendedDataLength >= 3) { position.set(\"fuel1\", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); }\n                                     break;\n                                 case 0x0023: // fuel2 (string)\n                                     if (extendedDataLength >= 6) { try { position.set(\"fuel2\", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (RuntimeException e) {/*ignore*/}}\n                                     break;\n                                 case 0x00CE: // power voltage\n                                     if (extendedDataLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); }\n                                     break;\n                                 case 0x00D8: // cell tower\n                                     if (extendedDataLength >= 9) { Network network = new Network(); network.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(network); }\n                                     break;\n                                 case 0xE1: // battery level %\n                                     if (extendedDataLength >= 1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); }\n                                     break;\n                                 // default: unknown extendedType - data is skipped by setting index below\n                             }\n                             buf.readerIndex(extendedEndIndex); // Move to end of sub-TLV element\n                         }\n                     }\n                     break;\n                 case 0xED: // Card Number\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE: // Extended Status\n                    if (length == 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                         buf.readerIndex(endIndex); // Skip if length != 6\n                    }\n                    break;\n                case 0xF3: // Nested OBD Data (Sub-TLV: Type 2, Length 1)\n                     // Process sub-TLVs until the end of this TLV element (endIndex)\n                     while (buf.readerIndex() < endIndex && buf.readableBytes() >= 3) { // Need type(2)+len(1)\n                         int extendedType = buf.readUnsignedShort();\n                         int extendedLength = buf.readUnsignedByte(); // This is the length of the *data* part\n                         int extendedEndIndex = buf.readerIndex() + extendedLength;\n\n                         // Validate sub-TLV length and bounds\n                         if (extendedEndIndex > endIndex || extendedLength < 0) break;\n                         if (extendedLength > buf.readableBytes()) break; // Check data availability\n\n                         switch (extendedType) {\n                             case 0x0002: if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0003: if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                             case 0x0004: if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                             case 0x0005: if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                             case 0x0007: if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0008: if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0009: if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                             case 0x000B: if (extendedLength >= 2) position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                             case 0x000C: if (extendedLength >= 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                             case 0x000D: if (extendedLength >= 2) position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                             case 0x000E: if (extendedLength >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); break;\n                             case 0x0050: if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                             case 0x0100: if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                             case 0x0102: if (extendedLength >= 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                             case 0x0112: if (extendedLength >= 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                             case 0x0113: if (extendedLength >= 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                             case 0x0114: if (extendedLength >= 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                             // default: unknown extendedType - data is skipped by setting index below\n                         }\n                         buf.readerIndex(extendedEndIndex); // Move to end of sub-TLV data part\n                     }\n                    break;\n                case 0xFE: // Battery % or Nested Driving Behavior Alarms (Sub-TLV: Type 1, Length 1)\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) { // Contains mark byte + potentially sub-TLVs\n                        if (buf.readableBytes() >= 1) { // Need mark byte\n                            int mark = buf.readUnsignedByte();\n                            if (mark == 0x7C) { // Nested TLV structure follows\n                                int nestedEndIndex = dataStartIndex + length; // Use outer TLV end index\n                                // Process sub-TLVs until the end of this TLV element\n                                while (buf.readerIndex() < nestedEndIndex && buf.readableBytes() >= 2) { // Need type(1)+len(1)\n                                    int extendedType = buf.readUnsignedByte();\n                                    int extendedLength = buf.readUnsignedByte(); // Length of sub-TLV data part\n                                    int subEndIndex = buf.readerIndex() + extendedLength;\n\n                                    // Validate sub-TLV length and bounds\n                                    if (subEndIndex > nestedEndIndex || extendedLength < 0) break;\n                                    if (extendedLength > buf.readableBytes()) break; // Check data availability\n\n                                    switch (extendedType) {\n                                        case 0x01: // Driving Behavior Alarms\n                                            if (extendedLength >= 4) {\n                                                long alarms = buf.readUnsignedInt();\n                                                // Note: Setting KEY_ALARM multiple times overwrites. Last one wins.\n                                                if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                                if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                                if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                                if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                                if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                            }\n                                            break;\n                                        // default: unknown extendedType - data is skipped by setting index below\n                                    }\n                                    buf.readerIndex(subEndIndex); // Move to end of sub-TLV data part\n                                }\n                            }\n                            // If mark != 0x7C, the rest of the TLV is skipped by setting index below\n                        }\n                        // If not enough data for mark byte, also skipped\n                    }\n                    // If length is 0, it's skipped by setting index below\n                    break;\n                default:\n                    // Unknown subtype, data will be skipped by setting reader index below\n                    break;\n            }\n\n            // Set reader index to the calculated end of the current TLV element.\n            // This ensures correct positioning for the next element, even if the\n            // case logic skipped bytes, partially read data, or encountered errors.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}