{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x69: // Fix: Handle subtype 0x69 for battery voltage\n                    if (length == 2) {\n                        // Value 0x018B = 395. 395 * 0.01 = 3.95 (matches test case)\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        buf.skipBytes(length); // Skip data if length is not as expected\n                    }\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); // content\n                    // This line looks incorrect, endIndex should likely be calculated based on readerIndex + length\n                    // endIndex = buf.writerIndex() - 2; \n                    // Assuming decodeExtension handles reading until endIndex or similar logic\n                    // Reverting to standard calculation for safety, needs verification based on protocol spec\n                    // If decodeExtension truly needs writerIndex, it should be handled there.\n                    // For now, stick to the standard pattern unless proven otherwise.\n                    // Re-using the calculated endIndex based on length read earlier.\n                    decodeExtension(position, buf, endIndex); \n                    // Note: If decodeExtension reads *everything* till the end minus checksum, \n                    // the original logic might have been intended but seems fragile.\n                    // Setting readerIndex at the end of the loop handles advancing past this section.\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Check length before reading count\n                        int count = buf.readUnsignedByte();\n                        // Check if remaining bytes match expected structure (1 + count * (5 + 5 + 1 + 2)) == length\n                        int expectedLength = 1 + count * 13;\n                        if (length == expectedLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        } else {\n                             buf.skipBytes(length - 1); // Skip remaining bytes if structure doesn't match\n                        }\n                    } else {\n                         // length is 0, do nothing or skip 0 bytes\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); // string cut count\n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        // Check readable bytes before reading doubles\n                        if (buf.readableBytes() >= 16) { // decodeCustomDouble reads 8 bytes twice\n                           position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                           position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                        } else {\n                           // Avoid reading past endIndex if remaining bytes are insufficient\n                           break; \n                        }\n                    }\n                    break;\n                case 0xEB:\n                    // Check length before peeking/reading\n                    if (length >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        // Ensure enough bytes for mcc (2) + mnc (1) before reading\n                        if (length >= 3) {\n                            Network network = new Network();\n                            int mcc = buf.readUnsignedShort();\n                            int mnc = buf.readUnsignedByte();\n                            // Cell tower structure: lac (2), cid (2), rssi (1) = 5 bytes\n                            while (buf.readerIndex() <= endIndex - 5) {\n                                network.addCellTower(CellTower.from(\n                                        mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                        buf.readUnsignedByte()));\n                            }\n                             position.setNetwork(network);\n                        } else {\n                             buf.skipBytes(length); // Skip if not enough data for MCC/MNC\n                        }\n                    } else { // Structure with extended length/type\n                        while (buf.readerIndex() <= endIndex - 4) { // Need 4 bytes for extendedLength/Type\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            // Check if extendedLength allows reading the type and potential data\n                            if (buf.readerIndex() > endIndex - (extendedLength - 2) || extendedLength < 2) {\n                                break; // Avoid reading past endIndex or handle invalid length\n                            }\n                            int extendedDataEndIndex = buf.readerIndex() + extendedLength - 2;\n\n                            switch (extendedType) {\n                                case 0x0001: // fuel1 (2 bytes) + unused (1 byte) = 3 bytes\n                                    if (extendedLength == 5) {\n                                        position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                        buf.readUnsignedByte(); // unused\n                                    } else {\n                                        buf.skipBytes(extendedLength - 2);\n                                    }\n                                    break;\n                                case 0x0023: // fuel2 (6 bytes ASCII) = 6 bytes\n                                    if (extendedLength == 8) {\n                                        position.set(\"fuel2\", Double.parseDouble(\n                                                buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    } else {\n                                        buf.skipBytes(extendedLength - 2);\n                                    }\n                                    break;\n                                case 0x00CE: // power (2 bytes) = 2 bytes\n                                     if (extendedLength == 4) {\n                                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                     } else {\n                                         buf.skipBytes(extendedLength - 2);\n                                     }\n                                    break;\n                                case 0x00D8: // Network: mcc(2)+mnc(1)+lac(2)+cid(4) = 9 bytes\n                                     if (extendedLength == 11) {\n                                         Network network = position.getNetwork() == null ? new Network() : position.getNetwork();\n                                         network.addCellTower(CellTower.from(\n                                                 buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                 buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                         position.setNetwork(network);\n                                     } else {\n                                          buf.skipBytes(extendedLength - 2);\n                                     }\n                                    break;\n                                case 0xE1: // battery level (1 byte) = 1 byte\n                                     if (extendedLength == 3) {\n                                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                     } else {\n                                          buf.skipBytes(extendedLength - 2);\n                                     }\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                             // Ensure we don't exceed the sub-section boundary\n                             if (buf.readerIndex() > extendedDataEndIndex) {\n                                 buf.readerIndex(extendedDataEndIndex);\n                             }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE: // RSSI(1)+Power(2)+Battery(2)+Sats(1) = 6 bytes\n                    if (length == 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    } else {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() <= endIndex - 3) { // Need 3 bytes for type+length\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                         if (buf.readerIndex() > endIndex - extendedLength) {\n                             break; // Avoid reading past end index\n                         }\n                         int extendedDataEndIndex = buf.readerIndex() + extendedLength;\n                        switch (extendedType) {\n                            case 0x0002: if (extendedLength==2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0003: if (extendedLength==2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x0004: if (extendedLength==2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); else buf.skipBytes(extendedLength); break;\n                            case 0x0005: if (extendedLength==4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); else buf.skipBytes(extendedLength); break;\n                            case 0x0007: if (extendedLength==2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0008: if (extendedLength==2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0009: if (extendedLength==2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;\n                            case 0x000B: if (extendedLength==2) position.set(\"intakePressure\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x000C: if (extendedLength==2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;\n                            case 0x000D: if (extendedLength==2) position.set(\"intakeFlow\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x000E: if (extendedLength==2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); else buf.skipBytes(extendedLength); break;\n                            case 0x0050: if (extendedLength==17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedLength); break;\n                            case 0x0100: if (extendedLength==2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0102: if (extendedLength==2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0112: if (extendedLength==2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x0113: if (extendedLength==2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x0114: if (extendedLength==2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                         // Ensure we don't exceed the sub-section boundary\n                         if (buf.readerIndex() > extendedDataEndIndex) {\n                             buf.readerIndex(extendedDataEndIndex);\n                         }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length > 1) { // Need at least 1 byte for mark\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            // Process 0x7C extensions\n                            while (buf.readerIndex() <= endIndex - 2) { // Need 2 bytes for type+length\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                if (buf.readerIndex() > endIndex - extendedLength) {\n                                    break; // Avoid reading past end index\n                                }\n                                int extendedDataEndIndex = buf.readerIndex() + extendedLength;\n\n                                switch (extendedType) {\n                                    case 0x01: // Alarms (4 bytes)\n                                        if (extendedLength == 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            // Set alarms (note: subsequent alarms might overwrite previous ones)\n                                            if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        } else {\n                                            buf.skipBytes(extendedLength);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                                // Ensure we don't exceed the sub-section boundary\n                                if (buf.readerIndex() > extendedDataEndIndex) {\n                                     buf.readerIndex(extendedDataEndIndex);\n                                }\n                            }\n                        } else {\n                             // If mark is not 0x7C, skip the rest of the data except the last byte?\n                             // The original code read battery level *after* the loop regardless of mark.\n                             // This seems suspicious. Assuming the battery level byte is *only* present\n                             // if mark is not 0x7C, or maybe it's always the last byte?\n                             // Sticking to original logic for now: read battery level if mark != 0x7C is dubious.\n                             // Let's assume the battery level byte follows the 0x7C block if present.\n                             buf.readerIndex(endIndex - 1); // Position before the last byte\n                        }\n                         // Check if there is still a byte to read for battery level\n                         if (buf.readerIndex() < endIndex) {\n                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                         }\n                    }\n                    break;\n                default:\n                     // Skip unknown subtype's data\n                     buf.skipBytes(length);\n                    break;\n            }\n            // Ensure reader index is set to the end of the subtype block,\n            // even if processing logic within a case failed or didn't consume all bytes.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}