{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length; // endIndex for the current TLV item's data\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    // Should ideally check if length == 4\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    // Should ideally check if length == 2\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    // Should ideally check if length == 4\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    // Should ideally check if length == 1\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    // Should ideally check if length == 1\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) { // Ensure length is sufficient before reading\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        // If length > 2, remaining bytes will be skipped by buf.readerIndex(endIndex)\n                    }\n                    // If length < 2, this item is malformed for KEY_EVENT.\n                    // It will be skipped by buf.readerIndex(endIndex).\n                    break;\n                case 0x80:\n                    // Ensure there's at least one byte for \"content\" if length implies it.\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // The original endIndex for this TLV item (calculated above) is passed to decodeExtension.\n                        // decodeExtension should process data up to this endIndex.\n                        decodeExtension(position, buf, endIndex);\n                    }\n                    break;\n                case 0x91:\n                    // This case reads a fixed number of bytes (22).\n                    // Should ideally check if length == 22.\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    // Reads 4 bytes. Should ideally check if length == 4.\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    // Reads 4 bytes. Should ideally check if length == 4.\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    // Reads 4 bytes. Should ideally check if length == 4.\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    // Reads 2 bytes. Should ideally check if length == 2.\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1: // This is also used as an extended type in 0xEB\n                    // Reads 1 byte. Should ideally check if length == 1.\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        // This part seems to handle variable length based on internal structure.\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    // Reads 2 + 1 = 3 bytes. Should ideally check if length == 3.\n                    buf.readUnsignedShort(); // string cut count\n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) { // Check before reading MCC\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            // Ensure reading extended item does not go past endIndex or its own extendedLength\n                            int extendedItemEndIndex = buf.readerIndex() + extendedLength - 2; // -2 for type already read\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); // unused\n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1: // Note: 0xE1 is also a top-level subtype\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(Math.min(extendedLength - 2, extendedItemEndIndex - buf.readerIndex()));\n                                    break;\n                            }\n                             // Ensure reader index is set to end of extended item, respecting overall endIndex\n                            buf.readerIndex(Math.min(extendedItemEndIndex, endIndex));\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    // Reads 1+2+2+1 = 6 bytes. Should ideally check if length == 6.\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        // Similar to 0xEB, ensure reads are bounded\n                        int extendedItemEndIndex = buf.readerIndex() + extendedLength;\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            // ... other 0xF3 sub-cases ...\n                            default:\n                                buf.skipBytes(Math.min(extendedLength, extendedItemEndIndex - buf.readerIndex()));\n                                break;\n                        }\n                        buf.readerIndex(Math.min(extendedItemEndIndex, endIndex));\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex -1) { // -1 for the trailing battery level byte\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int extendedItemEndIndex = buf.readerIndex() + extendedLength;\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        // ... other alarm checks ...\n                                        break;\n                                    default:\n                                        buf.skipBytes(Math.min(extendedLength, extendedItemEndIndex - buf.readerIndex()));\n                                        break;\n                                }\n                                buf.readerIndex(Math.min(extendedItemEndIndex, endIndex -1));\n                            }\n                        }\n                        // Final byte for battery level, if present and not consumed by loop.\n                        if (buf.readerIndex() < endIndex) {\n                           position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // For unhandled subtypes, do nothing.\n                    // The buf.readerIndex(endIndex) call below will skip 'length' bytes.\n                    break;\n            }\n            buf.readerIndex(endIndex); // Set reader index to the end of the current TLV item's data\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}