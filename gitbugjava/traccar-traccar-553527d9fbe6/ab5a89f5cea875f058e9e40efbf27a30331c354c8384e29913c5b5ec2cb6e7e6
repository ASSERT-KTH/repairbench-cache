{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Decode alarm (4 bytes)\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    // Decode coordinates (latitude, longitude)\n    decodeCoordinates(position, buf);\n\n    // Altitude (2 bytes), speed (2 bytes, kph*0.1 -> knots), course (2 bytes)\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n\n    // Timestamp (6 bytes)\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    /*\n     * Simple tail format:\n     * If after reading the fixed header there's exactly 20 bytes left,\n     * this is the \"simple\" format containing:\n     *   - skip 4 bytes (reserved battery/mileage)\n     *   - odometer (4 bytes)\n     *   - battery voltage (2 bytes * 0.1)\n     *   - area id (4 bytes)\n     *   - RSSI (1 byte)\n     *   - 3 bytes reserved\n     */\n    if (buf.readableBytes() == 20) {\n        buf.skipBytes(4); // reserved\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n        return position;\n    }\n\n    /*\n     * Extended TLV format:\n     * Iterate through type-length-value blocks until less than 2 bytes remain.\n     */\n    while (buf.readableBytes() > 2) {\n\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n        String stringValue;\n\n        switch (subtype) {\n\n            //\n            // ODOMETER / NESTED EXTENSIONS\n            //\n            case 0x01:\n                if (length == 4) {\n                    // flat odometer\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                } else {\n                    // nested TLV group: parse inner TLVs to extract battery, etc.\n                    int nestedEnd = endIndex;\n                    while (buf.readerIndex() + 2 <= nestedEnd) {\n                        int ntype = buf.readUnsignedByte();\n                        int nlength = buf.readUnsignedByte();\n                        int nEndIndex = buf.readerIndex() + nlength;\n                        switch (ntype) {\n                            case 0xEE:\n                                // Example nested block: RSSI, power (mW?), battery (mV), satellites\n                                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                                break;\n                            case 0xD5:\n                                // nested battery voltage (0.01 V units)\n                                if (nlength == 2) {\n                                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                                } else {\n                                    // skip lock info (if any)\n                                    int count = buf.readUnsignedByte();\n                                    for (int i = 1; i <= count; i++) {\n                                        buf.skipBytes(5); // lock ID\n                                        buf.skipBytes(5); // card\n                                        buf.skipBytes(1); // battery\n                                        buf.skipBytes(2); // status\n                                    }\n                                }\n                                break;\n                            case 0xD4:\n                            case 0xE1:\n                                // battery level %\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                break;\n                            case 0x60:\n                                // event code\n                                position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                                buf.skipBytes(nlength - 2);\n                                break;\n                            default:\n                                // skip unknown nested TLV\n                                break;\n                        }\n                        buf.readerIndex(nEndIndex);\n                    }\n                }\n                break;\n\n            //\n            // FUEL LEVEL\n            //\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n\n            //\n            // FUEL CONSUMPTION\n            //\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n\n            //\n            // RSSI\n            //\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n\n            //\n            // SATELLITES\n            //\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n\n            //\n            // *M00... string with embedded battery\n            //\n            case 0x33:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (stringValue.startsWith(\"*M00\")) {\n                    String lockStatus = stringValue.substring(8, 15);\n                    position.set(Position.KEY_BATTERY,\n                            Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                }\n                break;\n\n            //\n            // EVENT\n            //\n            case 0x60:\n                position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                buf.skipBytes(length - 2);\n                break;\n\n            //\n            // Nested extension (0x80) -- delegate\n            //\n            case 0x80:\n                buf.readUnsignedByte(); // skip content byte\n                // decodeExtension will parse until (writerIndex - 2)\n                decodeExtension(position, buf, buf.writerIndex() - 2);\n                break;\n\n            //\n            // OBD-II block (0x91)\n            //\n            case 0x91:\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                buf.readUnsignedShort();\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                buf.readUnsignedShort();\n                buf.readUnsignedInt();\n                buf.readUnsignedShort();\n                position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                break;\n\n            //\n            // VIN\n            //\n            case 0x94:\n                if (length > 0) {\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_VIN, stringValue);\n                }\n                break;\n\n            //\n            // ADC inputs\n            //\n            case 0xA7:\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                break;\n\n            //\n            // ODOMETER (alternate)\n            //\n            case 0xAC:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                break;\n\n            //\n            // DRIVER\n            //\n            case 0xBC:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(\"driver\", stringValue.trim());\n                break;\n\n            case 0xBD:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                break;\n\n            //\n            // VIBRATION ALARM\n            //\n            case 0xD0:\n                long userStatus = buf.readUnsignedInt();\n                if (BitUtil.check(userStatus, 3)) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                }\n                break;\n\n            //\n            // POWER (voltage)\n            //\n            case 0xD3:\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                break;\n\n            //\n            // BATTERY LEVEL %\n            //\n            case 0xD4:\n            case 0xE1:\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                break;\n\n            //\n            // LOCK INFO or simple battery\n            //\n            case 0xD5:\n                if (length == 2) {\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                } else {\n                    int count = buf.readUnsignedByte();\n                    for (int i = 1; i <= count; i++) {\n                        position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                        position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                        position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                        int status = buf.readUnsignedShort();\n                        position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                    }\n                }\n                break;\n\n            //\n            // DEVICE STATUS\n            //\n            case 0xDA:\n                buf.readUnsignedShort(); // string cut count\n                int deviceStatus = buf.readUnsignedByte();\n                position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                break;\n\n            //\n            // CUSTOM SENSORS\n            //\n            case 0xE6:\n                while (buf.readerIndex() < endIndex) {\n                    int sensorIndex = buf.readUnsignedByte();\n                    buf.skipBytes(6); // mac\n                    position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                    position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                }\n                break;\n\n            //\n            // NETWORK / CELLS\n            //\n            case 0xEB:\n                if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                    Network network = new Network();\n                    int mcc = buf.readUnsignedShort();\n                    int mnc = buf.readUnsignedByte();\n                    while (buf.readerIndex() < endIndex) {\n                        network.addCellTower(CellTower.from(\n                                mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                buf.readUnsignedByte()));\n                    }\n                    position.setNetwork(network);\n                } else {\n                    while (buf.readerIndex() < endIndex) {\n                        int extLen = buf.readUnsignedShort();\n                        int extType = buf.readUnsignedShort();\n                        switch (extType) {\n                            case 0x0001:\n                                position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                buf.readUnsignedByte();\n                                break;\n                            case 0x0023:\n                                position.set(\"fuel2\", Double.parseDouble(\n                                        buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                break;\n                            case 0x00CE:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x00D8:\n                                Network net = new Network();\n                                net.addCellTower(CellTower.from(\n                                        buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                        buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                position.setNetwork(net);\n                                break;\n                            case 0xE1:\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                break;\n                            default:\n                                buf.skipBytes(extLen - 2);\n                                break;\n                        }\n                    }\n                }\n                break;\n\n            //\n            // CARD\n            //\n            case 0xED:\n                stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                position.set(Position.KEY_CARD, stringValue.trim());\n                break;\n\n            //\n            // POWER / BATTERY info\n            //\n            case 0xEE:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n\n            //\n            // OBD-II EXT\n            //\n            case 0xF3:\n                while (buf.readerIndex() < endIndex) {\n                    int extType = buf.readUnsignedShort();\n                    int extLen = buf.readUnsignedByte();\n                    switch (extType) {\n                        case 0x0002:\n                            position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0003:\n                            position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                            break;\n                        case 0x0004:\n                            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                            break;\n                        case 0x0005:\n                            position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                            break;\n                        case 0x0007:\n                            position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0008:\n                            position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0009:\n                            position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                            break;\n                        case 0x000B:\n                            position.set(\"intakePressure\", buf.readUnsignedShort());\n                            break;\n                        case 0x000C:\n                            position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                            break;\n                        case 0x000D:\n                            position.set(\"intakeFlow\", buf.readUnsignedShort());\n                            break;\n                        case 0x000E:\n                            position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                            break;\n                        case 0x0050:\n                            position.set(Position.KEY_VIN,\n                                    buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                            break;\n                        case 0x0100:\n                            position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0102:\n                            position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                            break;\n                        case 0x0112:\n                            position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                            break;\n                        case 0x0113:\n                            position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                            break;\n                        case 0x0114:\n                            position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                            break;\n                        default:\n                            buf.skipBytes(extLen);\n                            break;\n                    }\n                }\n                break;\n\n            //\n            // ALARMS (0xFE)\n            //\n            case 0xFE:\n                if (length == 1) {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                } else {\n                    int mark = buf.readUnsignedByte();\n                    if (mark == 0x7C) {\n                        while (buf.readerIndex() < endIndex) {\n                            int extType = buf.readUnsignedByte();\n                            int extLen = buf.readUnsignedByte();\n                            if (extType == 0x01) {\n                                long alarms = buf.readUnsignedInt();\n                                if (BitUtil.check(alarms, 0)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                }\n                                if (BitUtil.check(alarms, 1)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                }\n                                if (BitUtil.check(alarms, 2)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                }\n                                if (BitUtil.check(alarms, 3)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                }\n                                if (BitUtil.check(alarms, 4)) {\n                                    position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                }\n                            } else {\n                                buf.skipBytes(extLen);\n                            }\n                        }\n                    }\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                }\n                break;\n\n            default:\n                // skip unknown TLV subtype\n                break;\n        }\n\n        // jump to the end of this TLV block\n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}