{
    "generation": "    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n    {\n        // There are certain nasty classes that could cause problems, mostly\n        // via default typing -- catch them here.\n        final Class<?> raw = type.getRawClass();\n        // assuming type.getRawClass() does not return null based on usage patterns\n        String full = raw.getName();\n\n        main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break; // Break -> throw exception\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            // 10-Jul-2019, tatu: Make sure this check is only applied to Classes; interfaces\n            //    and primitives handled properly.\n            // NOTE: logic was moved here in 2.9.9 from BeanDeserializerBase\n\n            // 18-Mar-2019, tatu: As per [databind#2272], need separate check for primitives\n            if (raw.isPrimitive()) {\n                // By default, we are ok with primitives, let's not worry about blocking\n                // (although perhaps filtering of wrappers for security purposes (like Void)\n                // may be needed in future?\n                return;\n            }\n\n            if (full.startsWith(PREFIX_STRING)) {\n                // Check superclasses using the fixed loop condition that handles interfaces and primitives\n                // Super-class check: also need to ensure we do not check Object.class OR null\n                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                    String name = cls.getSimpleName();\n                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                    if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name)) {\n                        // Break -> throw exception\n                        break main_check;\n                    }\n                }\n            }\n            // If checks passed, return\n            return;\n        } while (false); // Never loops, just a way to use break 'main_check'\n\n        // Only reached if break was called\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}