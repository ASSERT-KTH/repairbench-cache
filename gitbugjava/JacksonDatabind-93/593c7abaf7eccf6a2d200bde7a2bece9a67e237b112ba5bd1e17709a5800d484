{
    "generation": "    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n    {\n        // There are certain nasty classes that could cause problems, mostly\n        // via default typing -- catch them here.\n        final Class<?> raw = type.getRawClass();\n        String full = raw.getName();\n\n        main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            if (full.startsWith(PREFIX_STRING)) {\n                // Check added to prevent NPE for interfaces, as Class.getSuperclass() returns null for interfaces\n                if (!raw.isInterface()) { // <-- FIX: prevent NPE for interface types\n                    for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                        // We will get null for super class of Object, interfaces, primitives\n                        // and void, but the loop condition should take care of Object case.\n                        // Interfaces are handled by the outer check.\n                        // Primitives/void should not be passed here.\n                        String name = cls.getSimpleName();\n                        // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                        if (\"AbstractPointcutAdvisor\".equals(name)\n                                // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                                || \"AbstractApplicationContext\".equals(name)) {\n                            break main_check;\n                        }\n                    }\n                } // <-- END FIX\n            }\n            // If we get this far, type is considered acceptable\n            return;\n        } while (false);\n\n        // If we get here, problematic type\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}