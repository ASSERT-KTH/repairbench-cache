{
    "generation": "    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n    {\n        // There are certain nasty classes that could cause problems, mostly\n        // via default typing -- catch them here.\n        final Class<?> raw = type.getRawClass();\n        // 28-Mar-2019, tatu: Let's not block primitive types ever\n        if (raw.isPrimitive()) {\n             return;\n        }\n\n        String full = raw.getName();\n\n        main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            // 28-Mar-2019, tatu: Make check bit tighter for [databind#1872] (may need further work)\n            if (full.startsWith(PREFIX_STRING)) {\n                // 28-Mar-2019, tatu: Added null check for [databind#1872]. Need that\n                //     for interfaces, and possibly some other odd types?\n                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                    String name = cls.getSimpleName();\n                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                    if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name)) {\n                        break main_check;\n                    }\n                }\n            }\n            // Check for some other well-known dangerous classes...\n            // (note: JDK types are only blocked on JDK 9+)\n            else if (full.startsWith(PREFIX_THROWABLE)) {\n                // prevent RemoteInvocation / UserInfo / ... secret gadgets\n                // which can be used for RCE via writeReplace().\n                Throwable cause = new Exception();\n                Throwable rootCause = cause;\n                // Vuokko analysis recommended max depth of 10: may need refinement?\n                for (int i = 0; (rootCause = rootCause.getCause()) != null && i <= 10; ++i) {\n                    String className = rootCause.getClass().getName();\n                    if (className.equals(full)) {\n                        break main_check;\n                    }\n                }\n            }\n            return;\n        } while (false);\n\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}