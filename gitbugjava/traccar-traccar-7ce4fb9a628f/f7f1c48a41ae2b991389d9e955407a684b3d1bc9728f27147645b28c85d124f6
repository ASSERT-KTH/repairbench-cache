{
    "generation": "protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {\n\n    Parser parser = new Parser(PATTERN_POSITION, content);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int event = parser.nextInt();\n    String eventData = parser.next();\n    position.set(Position.KEY_EVENT, event);\n    if (event == 53) {\n        position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);\n    } else {\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n    }\n\n    position.setTime(parser.nextDateTime());\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextDouble());\n    position.setLongitude(parser.nextDouble());\n\n    position.setSatellites(parser.nextInt());\n    position.setHdop(parser.nextDouble());\n\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n    position.setCourse(parser.nextInt());\n    position.setAltitude(parser.nextInt());\n\n    position.setOdometer(parser.nextLong()); // Changed to nextLong()\n\n    position.setNetwork(new Network(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));\n\n    position.setStatus(parser.nextHexInt());\n\n    int input = parser.nextHexInt();\n    int output = parser.nextHexInt();\n    position.setIgnition(BitUtil.check(input, 1));\n    position.setDoor(BitUtil.check(input, 2));\n    position.setInput(input);\n    position.setOutput(output);\n\n    position.setPower(parser.nextHexInt() * 0.01);\n    position.setBattery(parser.nextHexInt() * 0.01);\n\n    if (parser.hasNext()) {\n        String[] adc = parser.next().split(\"\\\\|\");\n        for (int i = 1; i < adc.length; i++) {\n            position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] fuels = parser.next().split(\"\\\\|\");\n        for (String fuel : fuels) {\n            int index = Integer.parseInt(fuel.substring(0, 2));\n            int value = Integer.parseInt(fuel.substring(2), 16);\n            position.set(\"fuel\" + index, value * 0.1);\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] temperatures = parser.next().split(\"\\\\|\");\n        for (String temperature : temperatures) {\n            int index = Integer.parseInt(temperature.substring(0, 2));\n            int value = Integer.parseInt(temperature.substring(2), 16);\n            double convertedValue = BitUtil.to(value, 15);\n            if (BitUtil.check(value, 15)) {\n                convertedValue = -convertedValue;\n            }\n            position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);\n        }\n    }\n\n    if (parser.hasNextAny(9)) {\n        position.setRpm(parser.nextInt());\n        position.setEngineLoad(parser.nextInt());\n        position.setAirFlow(parser.nextInt());\n        position.setAirPressure(parser.nextInt());\n        if (parser.hasNext()) {\n            position.setAirTemp(parser.nextInt() - 40);\n        }\n        position.setThrottle(parser.nextInt());\n        if (parser.hasNext()) {\n            position.setCoolantTemp(parser.nextInt() - 40);\n        }\n        if (parser.hasNext()) {\n            position.setFuelConsumption(parser.nextInt() * 0.1);\n        }\n        position.setFuelLevel(parser.nextInt());\n    }\n\n    if (parser.hasNext()) {\n        position.setHours(parser.nextLong() * 1000L); // Changed to nextLong()\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}