{
    "generation": "protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {\n\n    // Handle result messages (e.g. \"&&:23,860262050015424,129,OKA2\")\n    if (content.startsWith(\"&&:\")) {\n        // Remove the \"&&:\" prefix and split the remaining string by comma.\n        // Expected format: \"23,860262050015424,129,OKA2\" where\n        // - the third field is the result code and\n        // - the fourth field provides a text like \"OKA2\" (we take the first two letters)\n        String[] resultTokens = content.substring(3).split(\",\");\n        if (resultTokens.length >= 4) {\n            return resultTokens[2] + \",\" + resultTokens[3].substring(0, 2);\n        }\n        return null;\n    }\n\n    Parser parser = new Parser(PATTERN_POSITION, content);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // The message format starts with two fields that are already known or ignored:\n    // a device id from the message and a reserved field (often \"000\").\n    // We skip these because we rely on the deviceSession and the proper fields later.\n    parser.next(); // skip device id field from the message\n    parser.next(); // skip reserved field\n\n    int event = parser.nextInt();\n    String eventData = parser.next();\n    position.set(Position.KEY_EVENT, event);\n    if (event == 53) {\n        position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);\n    } else {\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n    }\n\n    position.setTime(parser.nextDateTime());\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextDouble());\n    position.setLongitude(parser.nextDouble());\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt());\n    position.set(Position.KEY_HDOP, parser.nextDouble());\n\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n    position.setCourse(parser.nextInt());\n    position.setAltitude(parser.nextInt());\n\n    // Use nextLong() instead of nextInt() for odometer to avoid number format exceptions\n    position.set(Position.KEY_ODOMETER, parser.nextLong());\n\n    position.setNetwork(new Network(CellTower.from(\n            parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));\n\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    int input = parser.nextHexInt();\n    int output = parser.nextHexInt();\n    position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));\n    position.set(Position.KEY_DOOR, BitUtil.check(input, 2));\n    position.set(Position.KEY_INPUT, input);\n    position.set(Position.KEY_OUTPUT, output);\n\n    position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);\n    position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);\n\n    if (parser.hasNext()) {\n        String[] adc = parser.next().split(\"\\\\|\");\n        for (int i = 1; i < adc.length; i++) {\n            position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] fuels = parser.next().split(\"\\\\|\");\n        for (String fuel : fuels) {\n            int index = Integer.parseInt(fuel.substring(0, 2));\n            int value = Integer.parseInt(fuel.substring(2), 16);\n            position.set(\"fuel\" + index, value * 0.1);\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] temperatures = parser.next().split(\"\\\\|\");\n        for (String temperature : temperatures) {\n            int index = Integer.parseInt(temperature.substring(0, 2));\n            int value = Integer.parseInt(temperature.substring(2), 16);\n            double convertedValue = BitUtil.to(value, 15);\n            if (BitUtil.check(value, 15)) {\n                convertedValue = -convertedValue;\n            }\n            position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);\n        }\n    }\n\n    if (parser.hasNextAny(9)) {\n        position.set(Position.KEY_RPM, parser.nextInt());\n        position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());\n        position.set(\"airFlow\", parser.nextInt());\n        position.set(\"airPressure\", parser.nextInt());\n        if (parser.hasNext()) {\n            position.set(\"airTemp\", parser.nextInt() - 40);\n        }\n        position.set(Position.KEY_THROTTLE, parser.nextInt());\n        if (parser.hasNext()) {\n            position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);\n        }\n        position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());\n    }\n\n    if (parser.hasNext()) {\n        position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}