{
    "generation": "protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {\n\n    Parser parser = new Parser(PATTERN_POSITION, content);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int event = parser.nextInt();\n    String eventData = parser.next();\n    position.set(Position.KEY_EVENT, event);\n    if (event == 53) {\n        position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);\n    } else {\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n    }\n\n    position.setTime(parser.nextDateTime());\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextDouble());\n    position.setLongitude(parser.nextDouble());\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt());\n    position.set(Position.KEY_HDOP, parser.nextDouble());\n\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n    position.setCourse(parser.nextInt());\n    position.setAltitude(parser.nextInt());\n\n    // Fix (satelliteId) may be decimal, odometer can be large, use long or double\n    String odometerString = parser.next();\n    try {\n        // Accept both integer and float odometer\n        if (odometerString.contains(\".\") || odometerString.contains(\"e\") || odometerString.contains(\"E\")) {\n            position.set(Position.KEY_ODOMETER, Double.parseDouble(odometerString));\n        } else {\n            position.set(Position.KEY_ODOMETER, Long.parseLong(odometerString));\n        }\n    } catch (NumberFormatException error) {\n        position.set(Position.KEY_ODOMETER, null);\n    }\n\n    // CellTower\n    String[] cellTowerParts = parser.next().split(\"\\\\|\");\n    if (cellTowerParts.length >= 5) {\n        try {\n            int mcc = Integer.parseInt(cellTowerParts[0]);\n            int mnc = Integer.parseInt(cellTowerParts[1]);\n            int lac, cid;\n            // These may be in hex\n            try {\n                lac = Integer.parseInt(cellTowerParts[2], 16);\n            } catch (NumberFormatException ignore) {\n                lac = Integer.parseInt(cellTowerParts[2]);\n            }\n            try {\n                cid = Integer.parseInt(cellTowerParts[3], 16);\n            } catch (NumberFormatException ignore) {\n                cid = Integer.parseInt(cellTowerParts[3]);\n            }\n            int bsic = Integer.parseInt(cellTowerParts[4]);\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, bsic)));\n        } catch (NumberFormatException nfe) {\n            // skip cell tower if can't parse\n        }\n    }\n\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    int input = parser.nextHexInt();\n    int output = parser.nextHexInt();\n    position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));\n    position.set(Position.KEY_DOOR, BitUtil.check(input, 2));\n    position.set(Position.KEY_INPUT, input);\n    position.set(Position.KEY_OUTPUT, output);\n\n    position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);\n    position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);\n\n    if (parser.hasNext()) {\n        String[] adc = parser.next().split(\"\\\\|\");\n        for (int i = 1; i < adc.length; i++) {\n            if (!adc[i].isEmpty()) {\n                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);\n            }\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] fuels = parser.next().split(\"\\\\|\");\n        for (String fuel : fuels) {\n            if (!fuel.isEmpty()) {\n                int index = Integer.parseInt(fuel.substring(0, 2));\n                int value = Integer.parseInt(fuel.substring(2), 16);\n                position.set(\"fuel\" + index, value * 0.1);\n            }\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] temperatures = parser.next().split(\"\\\\|\");\n        for (String temperature : temperatures) {\n            if (temperature.length() >= 4) {\n                int index = Integer.parseInt(temperature.substring(0, 2));\n                int value = Integer.parseInt(temperature.substring(2), 16);\n                double convertedValue = BitUtil.to(value, 15);\n                if (BitUtil.check(value, 15)) {\n                    convertedValue = -convertedValue;\n                }\n                position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);\n            }\n        }\n    }\n\n    if (parser.hasNextAny(9)) {\n        position.set(Position.KEY_RPM, parser.nextInt());\n        position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());\n        position.set(\"airFlow\", parser.nextInt());\n        position.set(\"airPressure\", parser.nextInt());\n        if (parser.hasNext()) {\n            position.set(\"airTemp\", parser.nextInt() - 40);\n        }\n        position.set(Position.KEY_THROTTLE, parser.nextInt());\n        if (parser.hasNext()) {\n            position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());\n        }\n    }\n\n    if (parser.hasNext()) {\n        try {\n            position.set(Position.KEY_HOURS, parser.nextLong() * 1000L);\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}