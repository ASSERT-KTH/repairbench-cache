{
    "generation": "protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {\n\n    Parser parser = new Parser(PATTERN_POSITION, content);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int event = parser.nextInt();\n    String eventData = parser.next();\n    position.set(Position.KEY_EVENT, event);\n    if (event == 53) {\n        position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);\n    } else {\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n    }\n\n    position.setTime(parser.nextDateTime());\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextDouble());\n    position.setLongitude(parser.nextDouble());\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt());\n    position.set(Position.KEY_HDOP, parser.nextDouble());\n\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n    position.setCourse(parser.nextInt());\n    position.setAltitude(parser.nextInt());\n\n    // Odometer may be int or long, try decoding as long\n    try {\n        position.set(Position.KEY_ODOMETER, parser.nextLong());\n    } catch (Exception error) {\n        // fallback to int if not long\n        position.set(Position.KEY_ODOMETER, parser.nextInt());\n    }\n\n    // Network (Cell Tower): May have 5 parts or 4 parts (sometimes last is missing)\n    String cell = parser.next();\n    String[] cellParts = cell.split(\"\\\\|\");\n    int mcc = 0, mnc = 0, lac = 0, cid = 0, signal = 0;\n    if (cellParts.length >= 4) {\n        mcc = Integer.parseInt(cellParts[0]);\n        mnc = Integer.parseInt(cellParts[1]);\n        lac = Integer.parseInt(cellParts[2], 16);\n        cid = Integer.parseInt(cellParts[3], 16);\n        if (cellParts.length >= 5) {\n            signal = Integer.parseInt(cellParts[4]);\n        }\n    }\n    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, signal)));\n\n    position.set(Position.KEY_STATUS, parser.nextHexInt());\n\n    int input = parser.nextHexInt();\n    int output = parser.nextHexInt();\n    position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));\n    position.set(Position.KEY_DOOR, BitUtil.check(input, 2));\n    position.set(Position.KEY_INPUT, input);\n    position.set(Position.KEY_OUTPUT, output);\n\n    position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);\n    position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);\n\n    if (parser.hasNext()) {\n        String[] adc = parser.next().split(\"\\\\|\");\n        for (int i = 0; i < adc.length; i++) {\n            // Prefix ADC starts at 1, adc[0] => ADC1, etc.\n            try {\n                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);\n            } catch (Exception e) {\n                // ignore\n            }\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] fuels = parser.next().split(\"\\\\|\");\n        for (String fuel : fuels) {\n            if (fuel.length() >= 2) {\n                int index;\n                double value;\n                try {\n                    index = Integer.parseInt(fuel.substring(0, 2));\n                    value = Integer.parseInt(fuel.substring(2), 16) * 0.1;\n                    position.set(\"fuel\" + index, value);\n                } catch (Exception e) {\n                    // ignore\n                }\n            }\n        }\n    }\n\n    if (parser.hasNext()) {\n        String[] temperatures = parser.next().split(\"\\\\|\");\n        for (String temperature : temperatures) {\n            if (temperature.length() >= 2) {\n                int index;\n                int value;\n                try {\n                    index = Integer.parseInt(temperature.substring(0, 2));\n                    value = Integer.parseInt(temperature.substring(2), 16);\n                    double convertedValue = BitUtil.to(value, 15);\n                    if (BitUtil.check(value, 15)) {\n                        convertedValue = -convertedValue;\n                    }\n                    position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);\n                } catch (Exception e) {\n                    // ignore\n                }\n            }\n        }\n    }\n\n    if (parser.hasNextAny(9)) {\n        position.set(Position.KEY_RPM, parser.nextInt());\n        position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());\n        position.set(\"airFlow\", parser.nextInt());\n        position.set(\"airPressure\", parser.nextInt());\n        if (parser.hasNext()) {\n            position.set(\"airTemp\", parser.nextInt() - 40);\n        }\n        position.set(Position.KEY_THROTTLE, parser.nextInt());\n        if (parser.hasNext()) {\n            position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());\n        }\n    }\n\n    if (parser.hasNext()) {\n        try {\n            position.set(Position.KEY_HOURS, parser.nextLong() * 1000L);\n        } catch (Exception e) {\n            // ignore\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}