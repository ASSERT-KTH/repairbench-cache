{
    "generation": "import org.jsoup.internal.StringUtil;\nimport org.jsoup.internal.Validate;\nimport org.jsoup.nodes.Attributes; // Assuming Attributes is accessible\nimport org.jsoup.nodes.Node; // Assuming Node is accessible and defines absUrlKeyPrefix\n\n// Imports added for context, assume they exist in the original file.\n// The following is the corrected function:\n\n    /**\n     * Test if this element has an attribute.\n     * @param attributeKey The attribute key to check.\n     * @return true if the attribute exists, false if not. Case-insensitive.\n     */\n    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        // Check for the 'abs:' prefix first, as attr() handles this special case\n        if (attributeKey.startsWith(Node.absUrlKeyPrefix)) {\n            String key = attributeKey.substring(Node.absUrlKeyPrefix.length());\n            // Check if the underlying attribute exists (case-insensitively) and has a non-empty absolute URL\n            // The key must also be valid (e.g. not just \"abs:\")\n            if (key.length() > 0 && attributes.hasKeyIgnoreCase(key) && !absUrl(key).isEmpty()) {\n                return true;\n            }\n            // if attributeKey starts with abs:, but the conditions above are not met,\n            // it means the attribute, when resolved absolutely, is not present or empty.\n            // We should return false, not fall through to check for a literal \"abs:key\" attribute.\n            return false;\n        } else {\n            // For standard attributes, check existence case-insensitively for consistency with attr() and HTML.\n            return attributes.hasKeyIgnoreCase(attributeKey);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}