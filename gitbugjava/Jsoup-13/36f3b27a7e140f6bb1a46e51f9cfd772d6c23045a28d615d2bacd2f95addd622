{
    "generation": "    /**\n     * Test if this element has an attribute. The attribute key is case-insensitive.\n     * Supports the {@code abs:} prefix query to check if the attribute exists and has an absolute URL.\n     * @param attributeKey The attribute key to check.\n     * @return true if the attribute exists, false if not.\n     */\n    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        // Handle the 'abs:' prefix case check first\n        if (attributeKey.startsWith(Attributes.absKeyPrefix)) {\n            String key = attributeKey.substring(Attributes.absKeyPrefix.length());\n            // Ensure the key after 'abs:' is not empty (e.g., handle \"abs:\")\n            // Then check if the underlying attribute exists and its value resolves to a non-empty absolute URL.\n            // absUrl(key) returns \"\" if the attribute 'key' doesn't exist or can't be resolved absolutely.\n            // It internally uses attr(key) which should handle case-insensitivity.\n            if (key.length() > 0) {\n                 return !absUrl(key).isEmpty();\n            } else {\n                 return false; // Invalid key like \"abs:\", has no attribute.\n            }\n        }\n\n        // Otherwise, perform the standard check using the attributes collection.\n        // This assumes attributes.hasKey() correctly handles case-insensitivity as per HTML standards,\n        // matching the behavior of other methods like attr() and Node#attributes().\n        return attributes.hasKey(attributeKey);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}