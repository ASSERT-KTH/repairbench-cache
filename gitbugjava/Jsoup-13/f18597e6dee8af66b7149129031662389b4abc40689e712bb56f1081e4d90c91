{
    "generation": "import org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Attributes; // Assuming attributes is of this type or similar\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\n// Add imports if Node.absKeyPrefix is used and defined elsewhere, e.g.:\n// import org.jsoup.nodes.Node;\n\n    /**\n     * Test if this element has an attribute.\n     * @param attributeKey The attribute key to check. If the key starts with {@code abs:}, the key following the prefix is checked for being present, and the attribute must have a non-empty absolute URL.\n     * @return true if the attribute exists, false if not.\n     */\n    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        // Assuming Node.absKeyPrefix = \"abs:\"\n        final String absPrefix = \"abs:\";\n        if (attributeKey.startsWith(absPrefix)) {\n            String key = attributeKey.substring(absPrefix.length());\n             // Check if the underlying attribute exists AND has a non-blank absolute URL\n            if (attributes.hasKeyIgnoreCase(key) && !absUrl(key).isEmpty()) {\n                 return true;\n            }\n            // Note: previous versions might have returned true if hasKey(key) was true,\n            // regardless of absUrl validity. This version aligns with attr(\"abs:key\") behaviour.\n            return false; // Doesn't have the base attribute or absUrl is empty\n        } else {\n            return attributes.hasKeyIgnoreCase(attributeKey);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}