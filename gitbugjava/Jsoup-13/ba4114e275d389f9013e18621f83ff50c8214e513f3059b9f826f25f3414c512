{
    "generation": "import org.jsoup.internal.Validate;\nimport org.jsoup.nodes.Attributes;\n\n// Assuming the method is part of a class that has 'attributes' field (org.jsoup.nodes.Attributes)\n// and an 'absUrl(String key)' method, like org.jsoup.nodes.Element.\n\n    /**\n     * Test if this element has an attribute. Case-insensitive.\n     * @param attributeKey The attribute key to check.\n     * @return true if the attribute exists, false if not.\n     */\n    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        // Check for absolute attribute key (case-insensitive for prefix check)\n        // The Attributes.absKeyPrefix (\"abs:\") is lowercase, but check supplied key case-insensitively\n        if (attributeKey.toLowerCase().startsWith(Attributes.absKeyPrefix)) {\n            String key = attributeKey.substring(Attributes.absKeyPrefix.length());\n            // Ensure the key after \"abs:\" is not empty\n            if (key.length() > 0) {\n                 // Check if the corresponding base attribute exists and resolves to a non-empty absolute URL.\n                 // absUrl(key) internally checks for the base attribute's existence (case-insensitively)\n                 // and returns an empty string if the base attribute doesn't exist or cannot be resolved to an absolute URL.\n                return !absUrl(key).isEmpty();\n            }\n            // If attributeKey was just \"abs:\", fall through to regular check\n        }\n\n        // Fallback to regular attribute existence check (case-insensitive)\n        // attributes field is assumed to be non-null for Element instances\n        return attributes.hasKeyIgnoreCase(attributeKey);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}