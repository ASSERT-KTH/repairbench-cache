{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        // note: comparing Class instances works reliably here\n        if (_class == subclass) {\n            return this;\n        }\n        // Must check for sub-class relationship (or identical):\n        // (this appears to be optional, but let's do it)\n        if (!_class.isAssignableFrom(subclass)) {\n             throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                     +_class.getName());\n        }\n\n        // Otherwise, need to create new instance. We are not Genealogical,\n        // so let's just create specialization of this type, not replacement.\n        // We also must keep track of type bindings.\n        // And importantly: handlers are specific to the type, CAN NOT be\n        // reused. Let's also NOT reuse relationships, they need to be\n        // re-resolved.\n        // 15-Jan-2016, tatu: This is simpler approach, which may or may not\n        //    work perfectly...\n        // 18-Jun-2016, tatu: As per [databind#1243], we need to consider\n        //    type parameters AND super-type declaration.\n        // 29-Sep-2016, tatu: Seems like passing 'this' requires further changes,\n        //    causes issues like [databind#1391]. So, revert for now\n        // 28-Mar-2021, tatu: [databind#3077]: Except! Abstract types should not block...\n        //   looks like `this` works better than `_superClass` here\n        return new SimpleType(subclass, _bindings, this, /*_superClass,*/ _superInterfaces,\n                // value/type handlers are intentionally NOT passed (see note above)\n                null, null, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}