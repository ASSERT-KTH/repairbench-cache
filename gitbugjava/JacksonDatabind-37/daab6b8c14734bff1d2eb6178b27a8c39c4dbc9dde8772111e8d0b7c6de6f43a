{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        \n        // 15-Jan-2015, tatu: Not correct; should really re-resolve... -> Fixed below\n        // 25-Mar-2024, AI: Original code incorrectly copied supertype and binding\n        // information from the base type (_class) to the new specialized type (subclass).\n        // This can lead to incorrect type resolution and errors like UnrecognizedPropertyException\n        // if the subclass has different properties or structure than what the incorrect\n        // supertype information implies.\n        // The fix is to create a new SimpleType for the subclass without copying the\n        // superclass, superinterfaces, or bindings from the original type.\n        // We pass empty bindings, assuming this narrowing path is taken for non-generic\n        // subclasses or when base type bindings are not relevant.\n        // We pass null for super-class and super-interfaces, as resolving them correctly\n        // here without TypeFactory is complex and prone to errors; not providing them\n        // is safer than providing incorrect ones. Handlers and 'asStatic' flag are inherited.\n        return new SimpleType(subclass, TypeBindings.emptyBindings(),\n                /* superClass */ null, /* superInterfaces */ null,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}