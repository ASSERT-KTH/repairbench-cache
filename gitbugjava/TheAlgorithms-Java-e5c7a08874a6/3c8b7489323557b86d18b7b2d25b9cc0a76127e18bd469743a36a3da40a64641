{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // else it's an operator or an invalid token\n                String op = tokens.next(); // Read the token first\n\n                // Check if there are enough operands on the stack.\n                // This must be done BEFORE popping.\n                // If not, it's an invalid postfix expression (e.g. \"+\", or \"1 +\").\n                if (s.size() < 2) {\n                    tokens.close(); // Close scanner before throwing exception\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n                }\n                \n                int num2 = s.pop();\n                int num1 = s.pop();\n                // String op = tokens.next(); // This was the original problematic position\n\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        // Check for division by zero explicitly to provide a standard ArithmeticException\n                        // or to close the scanner before the exception is thrown by JVM.\n                        // The original code `s.push(num1 / num2)` would also throw ArithmeticException\n                        // for num2 == 0, but this makes resource handling (scanner closing) consistent.\n                        if (num2 == 0) {\n                            tokens.close();\n                            throw new ArithmeticException(\"Division by zero.\");\n                        }\n                        s.push(num1 / num2);\n                    }\n                    default -> {\n                        tokens.close(); // Close scanner before throwing exception\n                        throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                    }\n                }\n            }\n        }\n        \n        tokens.close(); // Close scanner when all tokens are processed or if exp was empty\n        \n        // After processing all tokens, the stack should contain exactly one result.\n        // If not, the expression was malformed (e.g., \"1 2\", or \"1 2 3 +\").\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        \n        return s.pop(); // The final result\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}