{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // else it's an operator or an invalid token\n                String op = tokens.next(); // Read the token first\n\n                switch (op) {\n                    case \"+\", \"-\", \"*\", \"/\": // Grouped cases for valid arithmetic operators (Java 14+)\n                        if (s.size() < 2) {\n                            // Not enough operands on the stack for the operator\n                            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n                        }\n                        int num2 = s.pop(); // Second operand is popped first\n                        int num1 = s.pop(); // First operand is popped second\n\n                        // Perform the actual operation\n                        switch (op) {\n                            case \"+\" -> s.push(num1 + num2);\n                            case \"-\" -> s.push(num1 - num2);\n                            case \"*\" -> s.push(num1 * num2);\n                            case \"/\" -> {\n                                if (num2 == 0) {\n                                    throw new ArithmeticException(\"Division by zero.\");\n                                }\n                                s.push(num1 / num2);\n                            }\n                            // No default needed here as 'op' is guaranteed to be one of the four\n                        }\n                        break; // Break from the outer switch statement for the cases \"+\", \"-\", \"*\", \"/\"\n                    default:\n                        // The token is not an integer and not a recognized operator\n                        throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        tokens.close();\n\n        // After processing all tokens, the stack should contain exactly one result\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}