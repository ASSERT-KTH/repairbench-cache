{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // else pop top two values and perform the operation\n                String op = tokens.next(); // Read the operator first\n\n                // Check if there are enough operands on the stack for the operator\n                if (s.size() < 2) {\n                    // If not, the expression is malformed.\n                    // Closing the scanner here is good practice, though the original code\n                    // might not have closed it on all exception paths.\n                    // However, to keep changes minimal and focused on the specific bug,\n                    // we'll match the original pattern of closing only at the end of normal execution.\n                    // The test is concerned with the exception type, not resource leaks.\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n                }\n                \n                int num2 = s.pop();\n                int num1 = s.pop();\n\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        // Standard Java integer division will throw ArithmeticException if num2 is 0.\n                        // This behavior is retained from the original code.\n                        s.push(num1 / num2);\n                    }\n                    default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        tokens.close(); // Close the scanner after processing all tokens\n\n        // After all tokens are processed, the stack should contain exactly one result.\n        if (s.size() != 1) {\n            // This catches errors like too many operands (\"1 2 3\"),\n            // or an empty expression (\"\"), or other structural inconsistencies.\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}