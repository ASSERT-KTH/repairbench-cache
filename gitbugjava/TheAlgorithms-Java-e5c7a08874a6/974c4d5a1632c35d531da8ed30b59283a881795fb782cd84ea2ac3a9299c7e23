{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            String token = tokens.next(); // Read the token first\n\n            try {\n                int value = Integer.parseInt(token);\n                s.push(value); // If it's an integer, push it to the stack\n            } catch (NumberFormatException e) { // If it's not an integer, it must be an operator\n                // Before performing an operation, ensure there are at least two operands on the stack.\n                if (s.size() < 2) {\n                    throw new IllegalArgumentException(\"exp contains an operation with too few arguments.\");\n                }\n\n                int num2 = s.pop();\n                int num1 = s.pop();\n\n                switch (token) { // Use the read token as the operator\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        if (num2 == 0) {\n                            throw new IllegalArgumentException(\"Division by zero is not allowed.\");\n                        }\n                        s.push(num1 / num2);\n                    }\n                    default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        tokens.close();\n\n        // After processing all tokens, the stack should contain exactly one result.\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}