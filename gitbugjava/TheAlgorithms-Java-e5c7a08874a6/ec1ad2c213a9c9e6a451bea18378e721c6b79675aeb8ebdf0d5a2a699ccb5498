{
    "generation": "import java.util.Scanner;\nimport java.util.Stack;\nimport java.util.EmptyStackException; // Import necessary for clarification, though handled now\n\n// Evaluates the given postfix expression string and returns the result.\npublic static int postfixEvaluate(final String exp) {\n    // Check for null or empty input expression\n    if (exp == null || exp.trim().isEmpty()) {\n        throw new IllegalArgumentException(\"Expression cannot be null or empty.\");\n    }\n\n    Stack<Integer> s = new Stack<>(); // Use diamond operator for cleaner syntax\n    // Use try-with-resources for Scanner to ensure it's closed automatically\n    try (Scanner tokens = new Scanner(exp)) {\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // else it's an operator\n                String op = tokens.next();\n\n                // Check if there are enough operands on the stack BEFORE popping\n                // This prevents EmptyStackException and throws the expected IllegalArgumentException\n                if (s.size() < 2) {\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression. Insufficient operands for operator: \" + op);\n                }\n                int num2 = s.pop();\n                int num1 = s.pop();\n\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        // Although not in the original code, checking for division by zero is good practice.\n                        // However, sticking to the original behavior unless specified otherwise.\n                        // if (num2 == 0) {\n                        //     throw new ArithmeticException(\"Division by zero.\");\n                        // }\n                        s.push(num1 / num2); // Original behavior: throws ArithmeticException if num2 is 0\n                    }\n                    default -> throw new IllegalArgumentException(\"exp contains an unknown operation: \" + op);\n                }\n            }\n        }\n    } // Scanner is automatically closed here due to try-with-resources\n\n    // Final check: After processing all tokens, the stack should contain exactly one element (the result)\n    if (s.size() != 1) {\n        // Using the original exception message for consistency\n        throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n    }\n    return s.pop();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}