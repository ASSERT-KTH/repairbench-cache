{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // The next token must be an operator\n                // Read the operator first to handle unknown operations or insufficient operands correctly.\n                String op = tokens.next(); \n\n                // Before performing an operation, ensure there are enough operands on the stack.\n                // An operator requires two operands.\n                if (s.size() < 2) {\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression: too few operands for operator '\" + op + \"'.\");\n                }\n\n                int num2 = s.pop();\n                int num1 = s.pop();\n                \n\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        // Check for division by zero\n                        if (num2 == 0) {\n                            throw new IllegalArgumentException(\"Division by zero.\");\n                        }\n                        s.push(num1 / num2);\n                    }\n                    default -> throw new IllegalArgumentException(\"exp contains an unknown operation: '\" + op + \"'.\");\n                }\n            }\n        }\n        tokens.close();\n        if (s.size() != 1) {\n            // This handles cases like \"1 2 +\" (too many operands if result is not consumed) \n            // or \"1 2\" (too many operands left on stack)\n            // or \"\" (no expression given)\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}