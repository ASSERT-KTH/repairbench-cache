{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // else it's an operator\n                // First, read the token which is expected to be an operator.\n                // The original code read this *after* popping, which was problematic.\n                String op = tokens.next();\n\n                // FIX: Check if there are enough operands on the stack\n                // BEFORE attempting to pop them. This addresses the EmptyStackException.\n                if (s.size() < 2) {\n                    // If an operator is encountered but there are fewer than two operands on the stack,\n                    // the expression is invalid.\n                    // No explicit tokens.close() here to maintain consistency with the original code's\n                    // exception handling pattern within the loop (e.g., in the default case of the switch).\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression (not enough operands for operator '\" + op + \"').\");\n                }\n                \n                // Pop the two operands. num2 is popped first, making it the right-hand operand.\n                int num2 = s.pop();\n                int num1 = s.pop();\n                \n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        // The original code would implicitly throw ArithmeticException if num2 is 0.\n                        // This behavior is maintained. An explicit check could be added if desired:\n                        // if (num2 == 0) {\n                        //     throw new ArithmeticException(\"Division by zero.\");\n                        // }\n                        s.push(num1 / num2);\n                    }\n                    default -> \n                        // This is the original code for handling unknown operators.\n                        throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        tokens.close(); // Close the scanner if the loop completed without unhandled exceptions.\n\n        // Final validation: After processing all tokens, the stack should contain exactly one result.\n        // This handles cases like too many numbers left on stack (e.g., \"1 2 3\") or an empty expression.\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}