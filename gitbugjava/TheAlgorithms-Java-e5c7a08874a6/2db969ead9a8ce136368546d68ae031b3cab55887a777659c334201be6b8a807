{
    "generation": "import java.util.Scanner;\nimport java.util.Stack;\nimport java.util.EmptyStackException; // Although we aim to avoid it, it's good practice to import if potentially relevant\n\n/**\n * Utility class for evaluating postfix expressions.\n */\npublic class StackPostfixNotation {\n\n    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        // Use try-with-resources for the Scanner to ensure it's closed\n        try (Scanner tokens = new Scanner(exp)) {\n\n            while (tokens.hasNext()) {\n                if (tokens.hasNextInt()) {\n                    s.push(tokens.nextInt()); // If int then push to stack\n                } else { // else it should be an operator\n                    String op = tokens.next();\n\n                    // Check if there are enough operands on the stack BEFORE popping\n                    if (s.size() < 2) {\n                        // Throw IllegalArgumentException if not enough operands for the operator\n                        throw new IllegalArgumentException(\"exp is not a proper postfix expression (too few operands for operator '\" + op + \"').\");\n                    }\n\n                    // Now it's safe to pop\n                    int num2 = s.pop();\n                    int num1 = s.pop();\n\n                    switch (op) {\n                        case \"+\" -> s.push(num1 + num2);\n                        case \"-\" -> s.push(num1 - num2);\n                        case \"*\" -> s.push(num1 * num2);\n                        case \"/\" -> {\n                            if (num2 == 0) {\n                                throw new ArithmeticException(\"Division by zero encountered.\");\n                            }\n                            s.push(num1 / num2);\n                        }\n                        default -> throw new IllegalArgumentException(\"exp contains an unknown token: \" + op);\n                    }\n                }\n            }\n        } // Scanner is automatically closed here\n\n        // After processing all tokens, the stack should contain exactly one element: the result.\n        if (s.size() != 1) {\n            // If not, the expression was malformed (e.g., too many numbers)\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression (invalid final stack size).\");\n        }\n\n        // Return the final result\n        return s.pop();\n    }\n    // Assume other parts of the class exist if necessary, but only provide the fixed function as requested.\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}