{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // else pop top two values and perform the operation\n                // ADDED CHECK: Before popping operands for an operator,\n                // ensure there are at least two operands on the stack.\n                if (s.size() < 2) {\n                    // If not, the expression is malformed.\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n                }\n                \n                int num2 = s.pop();\n                int num1 = s.pop();\n                String op = tokens.next(); // Assume this token is an operator\n\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        // Note: num1 / num2 will throw ArithmeticException if num2 is 0,\n                        // which is standard Java behavior.\n                        s.push(num1 / num2);\n                    }\n                    default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        tokens.close();\n        \n        // Final check: a valid postfix expression should result in exactly one value on the stack.\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}