{
    "generation": "import java.util.EmptyStackException;\nimport java.util.Scanner;\nimport java.util.Stack;\n\n/**\n * Utility class for handling postfix notation expressions.\n */\npublic class StackPostfixNotation { // Added class wrapper for context, will remove in final output\n\n    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        // Use try-with-resources for the Scanner to ensure it's closed\n        try (Scanner tokens = new Scanner(exp)) {\n            while (tokens.hasNext()) {\n                if (tokens.hasNextInt()) {\n                    s.push(tokens.nextInt()); // If int then push to stack\n                } else { // else it's an operator\n                    String op = tokens.next();\n\n                    // Check if there are enough operands on the stack BEFORE popping\n                    if (s.size() < 2) {\n                        // Throw IllegalArgumentException as specified by tests for malformed expressions\n                        throw new IllegalArgumentException(\"exp is not a proper postfix expression (too few operands for operator '\" + op + \"').\");\n                    }\n                    // Now it's safe to pop\n                    int num2 = s.pop();\n                    int num1 = s.pop();\n\n                    switch (op) {\n                        case \"+\" -> s.push(num1 + num2);\n                        case \"-\" -> s.push(num1 - num2);\n                        case \"*\" -> s.push(num1 * num2);\n                        case \"/\" -> {\n                            // Add check for division by zero\n                            if (num2 == 0) {\n                                throw new ArithmeticException(\"Division by zero encountered in postfix expression.\");\n                            }\n                            s.push(num1 / num2);\n                        }\n                        default -> throw new IllegalArgumentException(\"exp contains an unknown operation: \" + op);\n                    }\n                    // \"+\", \"-\", \"*\", \"/\"\n                }\n            }\n        } // Scanner is automatically closed here\n\n        // After processing all tokens, the stack should contain exactly one element: the result\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression (stack size is not 1 at the end).\");\n        }\n        // Return the final result\n        return s.pop();\n    }\n} // End of wrapper class",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}