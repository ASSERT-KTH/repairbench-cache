{
    "generation": "import java.util.EmptyStackException;\nimport java.util.Scanner;\nimport java.util.Stack;\n\n// The surrounding class structure is added for context, but only the function should be returned.\nclass StackPostfixNotation {\n\n    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // else it's an operator\n                String op = tokens.next();\n                // Check if there are enough operands before popping\n                if (s.size() < 2) {\n                    tokens.close(); // Close the scanner before throwing\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression (too few operands for operator '\" + op + \"').\");\n                }\n                int num2 = s.pop();\n                int num1 = s.pop();\n\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> {\n                        if (num2 == 0) {\n                            tokens.close(); // Close the scanner before throwing\n                            throw new ArithmeticException(\"Division by zero.\");\n                        }\n                        s.push(num1 / num2);\n                    }\n                    default -> {\n                        tokens.close(); // Close the scanner before throwing\n                        throw new IllegalArgumentException(\"exp contains an unknown operation: \" + op);\n                    }\n                }\n            }\n        }\n        tokens.close();\n        // After processing all tokens, the stack should contain exactly one value (the result)\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression (invalid final stack size).\");\n        }\n        return s.pop();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}