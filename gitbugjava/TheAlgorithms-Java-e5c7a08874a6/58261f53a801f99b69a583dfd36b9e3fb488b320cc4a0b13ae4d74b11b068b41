{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); // If int then push to stack\n            } else { // Token is not an int, assume it's an operator\n                String op = tokens.next(); // Read operator first\n\n                // Check if the token is a known arithmetic operator\n                if (op.equals(\"+\") || op.equals(\"-\") || op.equals(\"*\") || op.equals(\"/\")) {\n                    // It's a known operator, check for sufficient operands on the stack\n                    if (s.size() < 2) {\n                        // Not enough operands for the operation.\n                        // This addresses the EmptyStackException by checking stack size before popping,\n                        // and throws IllegalArgumentException as required by the test case.\n                        throw new IllegalArgumentException(\"exp is not a proper postfix expression (too few operands for operator '\" + op + \"').\");\n                    }\n                    // Pop the two operands. Order matters for non-commutative operations.\n                    int num2 = s.pop();\n                    int num1 = s.pop();\n\n                    // Perform the operation\n                    switch (op) {\n                        case \"+\" -> s.push(num1 + num2);\n                        case \"-\" -> s.push(num1 - num2);\n                        case \"*\" -> s.push(num1 * num2);\n                        case \"/\" -> {\n                            // Integer division by zero will naturally throw an ArithmeticException.\n                            // This behavior is preserved from the original code.\n                            if (num2 == 0) {\n                                throw new ArithmeticException(\"Division by zero.\");\n                            }\n                            s.push(num1 / num2);\n                        }\n                        // No default case needed here as 'op' has been pre-validated by the if-condition.\n                    }\n                } else {\n                    // Token is not one of the known operators\n                    throw new IllegalArgumentException(\"exp contains an unknown operation: \" + op);\n                }\n            }\n        }\n        \n        tokens.close(); // Close the scanner\n\n        // After processing all tokens, the stack should contain exactly one result.\n        if (s.size() != 1) {\n            // Covers cases like:\n            // - \"1 2\" (too many operands left on stack)\n            // - \"\" (empty expression, stack is empty)\n            // - \"1 2 3 +\" (expression resolves to [1, 5], stack has more than one item)\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        \n        // Return the final result from the stack\n        return s.pop();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}