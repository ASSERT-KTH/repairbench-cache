{
    "generation": "    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        // Scanner should be closed to prevent resource leaks, hence the try-finally block.\n        // If exp is null, new Scanner(exp) will throw NullPointerException.\n        // This behavior is kept as is, as it's not specified as a bug to fix.\n        Scanner tokens = new Scanner(exp);\n\n        try {\n            while (tokens.hasNext()) {\n                if (tokens.hasNextInt()) {\n                    s.push(tokens.nextInt()); // If int then push to stack\n                } else { // Token is not an integer, assume it's an operator or an invalid token.\n                    // First, get the supposed operator token.\n                    // In the original code, this was done AFTER attempting to pop operands.\n                    String op = tokens.next();\n\n                    // BUG FIX: Check for sufficient operands BEFORE popping.\n                    // This prevents EmptyStackException for inputs like \"+\" or \"1 +\".\n                    // The test expects an IllegalArgumentException in this scenario.\n                    if (s.size() < 2) {\n                        // Using a message consistent with other \"malformed expression\" errors.\n                        throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n                    }\n                    \n                    // Now it's safe to pop operands.\n                    int num2 = s.pop();\n                    int num1 = s.pop();\n\n                    switch (op) {\n                        case \"+\" -> s.push(num1 + num2);\n                        case \"-\" -> s.push(num1 - num2);\n                        case \"*\" -> s.push(num1 * num2);\n                        case \"/\" -> {\n                            if (num2 == 0) {\n                                // Explicitly checking for division by zero.\n                                // The original code would also throw an ArithmeticException,\n                                // but this makes it clearer and allows a custom message if desired.\n                                throw new ArithmeticException(\"Division by zero.\");\n                            }\n                            s.push(num1 / num2);\n                        }\n                        default -> \n                            // Handling unknown operators.\n                            // The original message was \"exp contains an unknown operation.\"\n                            // Appending the specific operator token makes the error more informative.\n                            throw new IllegalArgumentException(\"exp contains an unknown operation: \" + op);\n                    }\n                }\n            }\n            \n            // After all tokens are processed, the stack should hold exactly one result.\n            // If not, the expression is malformed (e.g., \"1 2\" resulting in too many items,\n            // or an empty string \"\" resulting in an empty stack).\n            if (s.size() != 1) {\n                throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n            }\n            return s.pop();\n\n        } finally {\n            // Ensure scanner resources are released, even if an exception occurs.\n            tokens.close();\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}