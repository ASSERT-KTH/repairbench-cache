{
    "generation": "  /**\n   * Handles a goog.require call.\n   */\n  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      boolean requireOk = true; // Assume ok initially\n\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n        requireOk = false; // Mark as broken, provide is missing\n      } else {\n        // Namespace is provided. Check module dependencies.\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n          // A module dependency error doesn't mean the require is broken\n          // regarding symbol provision. requireOk remains true.\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Remove the goog.require call node if:\n      // 1) The require referred to a successfully provided name (requireOk == true),\n      //    regardless of the check level.\n      //    -OR-\n      // 2) The require is broken (requireOk == false), but we are checking\n      //    for missing provides (requiresLevel is not OFF). Removing the node\n      //    prevents subsequent passes like VarCheck from reporting errors related\n      //    to the unknown 'goog' base object when the MISSING_PROVIDE_ERROR is\n      //    the intended error.\n      // If requireOk is false (broken require) and requiresLevel is OFF,\n      // the node is preserved, allowing a subsequent pass with checks enabled\n      // to detect the missing provide.\n      if (requireOk || requiresLevel != CheckLevel.OFF) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}