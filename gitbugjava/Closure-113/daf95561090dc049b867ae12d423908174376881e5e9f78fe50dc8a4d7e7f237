{
    "generation": "  /**\n   * Handles a goog.require call.\n   */\n  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        // Report error for missing/late provide.\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        // Explicit provide found, check module dependencies.\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed after processing to avoid issues with\n      // subsequent passes like VarCheck potentially seeing 'goog' undeclared,\n      // and because the require statement itself has no runtime effect.\n      // The check for missing provides or cross-module errors has already happened.\n      // Removing the node regardless of whether the provide was found fixes\n      // the case where a missing provide error occurred but the node was left,\n      // potentially causing a VarCheck error later.\n      // The original code only removed the node if 'provided != null'.\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}