{
    "generation": "  /**\n   * Handles a goog.require call.\n   */\n  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        // Record the error, but don't report it until the end of the pass.\n        // This allows reporting errors only for namespaces that are never\n        // provided (even transitively).\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        // Check module dependencies.\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Remove the require call if it's valid, or if we're checking\n      // for missing provides and are going to report an error.\n      // If require checking is off, leave the node intact for subsequent\n      // runs. This prevents the VarCheck pass from complaining about\n      // the undeclared var \"goog\" when the require is bad.\n      // Note: requiresLevel is final and set in the constructor.\n      if (provided != null || requiresLevel.isOn()) {\n        // Detach the EXPR_RESULT node.\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}