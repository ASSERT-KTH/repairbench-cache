{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The value of x1 has switched to the other bound, thus inverting\n                // the interval. Root is between x1 and x. Update [x0, x1] to [x1, x].\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                // Root is between x0 and x. Update [x0, x1] to [x0, x].\n                // Update the retained endpoint based on the selected variant.\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // In standard Regula Falsi, the old endpoint (x0, f0) is retained unmodified.\n                    // This can lead to stagnation, which is expected behavior for this variant.\n                    // The previous code had a condition \"if (x == x1)\" here which tried to\n                    // prevent stagnation, contradicting the expected behavior for the\n                    // standard Regula Falsi method in test cases like testIssue631.\n                    // We intentionally do nothing here for the REGULA_FALSI case.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n            // Update the endpoint that moved.\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Adjust solution if FunctionValueAccuracy is met but solution is not Bracketing\n                    final double x_bracket = (f1 <= 0) ? x1 : x0;\n                    final double f_bracket = computeObjectiveValue(x_bracket);\n                    if(FastMath.abs(f_bracket) <= ftol) return x_bracket; else return (f1 <= 0) ? x1 : x0; // return best candidate based on allowed side\n                case ABOVE_SIDE:\n                    // Adjust solution if FunctionValueAccuracy is met but solution is not Bracketing\n                    final double x_bracket_abv = (f1 >= 0) ? x1 : x0;\n                    final double f_bracket_abv = computeObjectiveValue(x_bracket_abv);\n                     if(FastMath.abs(f_bracket_abv) <= ftol) return x_bracket_abv; else return (f1 >= 0) ? x1 : x0; // return best candidate based on allowed side\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}