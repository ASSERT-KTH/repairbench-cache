{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild(); // Function body block\n\n    // CALL NODE: [ NAME/GETPROP, (THIS), ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext(); // Potential 'this' or first real argument\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        // If 'this' is passed specifically, it must be the first arg.\n        // We currently don't support arbitrary 'this' values for direct inlining.\n        if (cArg == null || !cArg.isThis()) {\n           // This case implies either no 'this' arg for .call, or an arbitrary one.\n           // We could potentially allow it if the function doesn't use 'this',\n           // but for simplicity, disallow direct inlining for now.\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext(); // Skip 'this' node, move to the next argument\n      } else {\n        // \".apply\" call should be filtered before this point.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(); // First function parameter\n\n    while (cArg != null || fnParam != null) {\n      // Check parameters and arguments pairwise\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check Criterion 1: If argument might have side-effects or modify state,\n          // ensure the corresponding parameter is used at most once within the function body.\n          // Note: NodeUtil.mayEffectMutableState checks for modifying properties of\n          // existing objects or arrays, which is okay if the parameter is used once.\n          if ((NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n               NodeUtil.mayEffectMutableState(cArg, compiler)) &&\n              NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n            // Argument with side effects or mutable state effect is used more than once.\n            return CanInlineResult.NO;\n          }\n        }\n        // else: Parameter exists, but no argument provided (e.g. call f(1) for function f(a,b){...})\n        // This is fine, the parameter will be 'undefined'.\n\n        fnParam = fnParam.getNext(); // Move to the next parameter\n      }\n\n      // Check arguments, especially those without a corresponding parameter\n      if (cArg != null) {\n         // If this argument doesn't correspond to a formal parameter (fnParam is null),\n         // and this argument has side-effects, prevent inlining. Its value would be\n         // evaluated but potentially discarded (unless used via 'arguments', which direct\n         // replacement doesn't handle). Don't evaluate side effects of unused arguments.\n        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          // Extra argument has side effects.\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext(); // Move to the next argument\n      }\n    }\n\n    // All checks passed.\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}