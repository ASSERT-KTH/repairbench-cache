{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME/GETPROP, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    // If the call is '.call'\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        // This is the \"this\" value. It isn't part of the called function's args.\n        // For direct function replacement, we can't be sure what the 'this'\n        // value should be, so we don't handle it. Block inlining may handle it.\n        // We also need to handle the case where the this object is provided\n        // but the function doesn't use this.\n        // For now, just be conservative.\n        // NodeUtil.isDirectCallNodeReplacementPossible already checks for 'this' usage\n        // in the function body, so if 'this' is referenced, it's already NO.\n        // If 'this' is not referenced, is it ok to just ignore the cArg here?\n        // It might have side effects.\n        if (cArg == null) {\n          // .call requires at least the this arg.\n          return CanInlineResult.NO;\n        }\n        // If the this argument has side effects, we can't inline this.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        // If the function references this, we can't inline it.\n        // This is already checked by isDirectCallNodeReplacementPossible.\n\n        // Skip the 'this' argument.\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        // Other indirect calls are not direct references.\n         return CanInlineResult.NO;\n      }\n    }\n\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // Check each argument expression.\n      if (cArg != null) {\n        // Check the corresponding parameter.\n        if (fnParam != null) {\n          // If the parameter is referenced more than once...\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop for direct replacement.\n          int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n          if (refCount > 1) {\n            // ...the argument must not cause side effects or affect mutable state,\n            // as it will be duplicated.\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n              return CanInlineResult.NO; // Side effect arg used multiple times\n            }\n            if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n               // This check might be overly strict for some cases like array literals\n               // but is generally safer. Example: f([a, b], [a, b]) -> refCount = 2\n               // If called with f(g(), g()), side effects matter.\n               // If called with f(obj, obj), mutation matters.\n              return CanInlineResult.NO; // Mutable arg used multiple times\n            }\n          }\n        } else {\n          // Argument is provided but no corresponding parameter (e.g. var args).\n          // If the extra argument has side-effects, these effects will happen,\n          // but the value is unused. This seems unsafe for direct replacement.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO; // Side effect in unused argument\n          }\n        }\n        cArg = cArg.getNext();\n      }\n\n      // Move to the next parameter.\n      if (fnParam != null) {\n        // Check for parameters that are not provided arguments. Default values (like undefined)\n        // are okay. Var_args functions are complex and generally handled by block inlining.\n        // If a required parameter is missing, it might evaluate to undefined, which is fine.\n        fnParam = fnParam.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}