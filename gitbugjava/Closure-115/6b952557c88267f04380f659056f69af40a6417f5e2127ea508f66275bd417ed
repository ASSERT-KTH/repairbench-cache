{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * 2) If a call's arguments may represent mutable state, the corresponding\n   * argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(this.bar);\n   * </pre>\n   * 3) Extra arguments (passed to the call but not part of the function's\n   *    signature) that have side effects will prevent inlining.\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    // Check if the block has the expected structure: { return EXPR; }\n    // This is implicitly handled by isDirectCallNodeReplacementPossible,\n    // but we need the block for reference counting.\n    Preconditions.checkState(block.isBlock() && block.hasOneChild());\n    Node returnNode = block.getFirstChild();\n    Preconditions.checkState(returnNode.isReturn());\n    // A return node with no right hand side shouldn't be replaced.\n    if (!returnNode.hasChildren()) {\n      return CanInlineResult.NO;\n    }\n\n    // CALL NODE: [ NAME/GETPROP, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // Check arguments first.\n      if (cArg != null) {\n        boolean argMayHaveSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);\n        boolean argMayMutateState = NodeUtil.mayEffectMutableState(cArg, compiler);\n\n        // Rule 1 & 3: Check arguments with side effects.\n        if (argMayHaveSideEffects) {\n          if (fnParam != null) {\n            // Argument corresponds to a parameter. Check parameter usage count.\n            if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n              // Parameter used more than once, side effects would be duplicated.\n              return CanInlineResult.NO;\n            }\n            // Parameter used 0 or 1 time is OK.\n          } else {\n            // Extra argument has side-effects. Don't inline, as the side-effect\n            // would be lost in direct replacement.\n             return CanInlineResult.NO;\n          }\n        }\n\n        // Rule 2: Check arguments that may represent mutable state.\n        // (Skip check if already handled by side effect check)\n        if (!argMayHaveSideEffects && argMayMutateState) {\n           if (fnParam != null) {\n             if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n               // Parameter used more than once, potentially observing different states\n               // or duplicating mutations.\n               return CanInlineResult.NO;\n             }\n           }\n           // If fnParam is null (extra argument), its potential mutation doesn't matter\n           // because direct replacement won't use it.\n        }\n\n        cArg = cArg.getNext();\n      }\n\n      // Move to the next parameter.\n      if (fnParam != null) {\n        fnParam = fnParam.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}