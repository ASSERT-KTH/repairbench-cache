{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        // These nodes define scopes but don't directly generate or kill variables\n        // based on their own node type. Their children are handled by traversal.\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Only the condition expression affects liveness locally.\n        // Loop bodies/if branches are handled by the dataflow analysis traversal.\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          // Regular FOR loop: for(init; condition; increment)\n          // Only the condition involves reads relevant to the loop test.\n          // Init and increment are handled separately by the flow analysis.\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // FOR-IN loop: for(lhs in rhs)\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          // Process RHS first (evaluated once before the loop)\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // Process LHS expression. This handles reads within the LHS,\n          // e.g., reading 'a' in 'for (a[0] in ...)'.\n          // It also handles the case where lhs is just a NAME, adding it to gen.\n          computeGenKill(lhs, gen, kill, conditional);\n\n          // Handle the kill effect if LHS is a simple variable assignment.\n          // The assignment happens inside the loop iterations, so it's complex,\n          // but if the LHS is a simple local name, it might be considered killed.\n          Node assignedVar = null;\n          if (NodeUtil.isName(lhs)) {\n            // Case: for (x in rhs)\n            assignedVar = lhs;\n          } else if (NodeUtil.isVar(lhs) && lhs.hasOneChild() &&\n                     NodeUtil.isName(lhs.getFirstChild())) {\n            // Case: for (var x in rhs)\n            assignedVar = lhs.getFirstChild();\n          }\n\n          if (assignedVar != null) {\n            // If the variable is local and the context isn't conditional,\n            // mark it as killed by this statement.\n            if (!conditional) {\n              addToSetIfLocal(assignedVar, kill);\n            }\n            // Unlike compound assignments (e.g., x += 1), the for-in assignment\n            // itself doesn't read the previous value of the assigned variable.\n            // Any reads (like 'x' in 'for (x in ...)') were handled by the\n            // recursive computeGenKill(lhs,...) call above.\n          }\n          // If LHS is complex (e.g., a[0]), the assignment modifies a property,\n          // it doesn't kill a local variable directly. Reads within the complex\n          // LHS (like 'a') were handled by the recursive call.\n        }\n        return;\n\n      case Token.VAR:\n        // Variable declarations: var x, y=1, z;\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // c is the NAME node (e.g., x, y, z)\n          if (c.hasChildren()) {\n            // If there's an initializer (e.g., y=1), process the RHS\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            // The assignment kills the variable if not conditional\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n          // A var declaration introduces the variable, but doesn't \"read\" it (gen).\n          // It \"kills\" any prior value if initialized and not conditional.\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        // Left side is always executed\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Right side is conditional\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK: // The ternary operator (condition ? true_expr : false_expr)\n        // Condition is always executed\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Both branches are conditional\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        // A variable read\n        if (isArgumentsName(n)) {\n          // Accessing the 'arguments' object potentially reads all parameters\n          markAllParametersEscaped();\n        } else {\n          // Reading a local variable adds it to the gen set\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Handle assignments and other expressions\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          // Assignment to a simple variable: x = ..., x += ..., etc.\n          Node lhs = n.getFirstChild(); // The NAME node being assigned to\n\n          // Assignment kills the variable if not conditional\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n\n          // Compound assignments (e.g., +=, *=) also read the variable\n          if (!NodeUtil.isAssign(n)) { // Check if it's not simple assignment (=)\n            addToSetIfLocal(lhs, gen);\n          }\n\n          // Process the right-hand side expression\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          // For other node types, recursively process children\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}