{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        // These nodes represent scopes, they don't generate or kill variables\n        // themselves, but their children might. The CFG traversal handles\n        // going into children appropriately.\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Only the condition expression is evaluated directly by the node itself.\n        // Body execution is handled by CFG edges.\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          // Standard FOR loop: for(init; cond; inc)\n          // Only the condition is relevant for the node's gen/kill set here.\n          // Init and increment are handled as separate nodes in the CFG.\n          if (n.getChildCount() == 4) { // Ensure it's not for(;;)\n              Node condition = NodeUtil.getConditionExpression(n);\n              if (condition != null) {\n                  computeGenKill(condition, gen, kill, conditional);\n              }\n          }\n        } else {\n          // FOR-IN loop: for(lhs in rhs) { body }\n          Node lhs = n.getFirstChild(); // The iterator part (e.g., a[1], var x, x)\n          Node rhs = lhs.getNext();    // The object being iterated over (e.g., foo)\n\n          // Analyze the RHS expression first, as it's always evaluated.\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // Analyze the LHS. It's an assignment target.\n          if (NodeUtil.isVar(lhs)) {\n            // Case: for(var x in rhs)\n            // The loop assigns to 'x'. Kill 'x' if the context isn't conditional.\n            Node nameNode = lhs.getLastChild();\n            if (!conditional) {\n                addToSetIfLocal(nameNode, kill);\n            }\n            // Declaration doesn't generate (read) 'x'.\n          } else if (NodeUtil.isName(lhs)) {\n            // Case: for(x in rhs)\n            // The loop assigns to existing variable 'x'. Kill 'x' if context isn't conditional.\n             if (!conditional) {\n                 addToSetIfLocal(lhs, kill);\n             }\n             // Simple assignment doesn't generate (read) 'x'.\n          } else {\n            // Case: for(a[1] in rhs), for(obj.prop in rhs), etc.\n            // The LHS expression is evaluated to determine the assignment target.\n            // This evaluation involves reads (e.g., 'a' in a[1]).\n            // Recursively compute the gen set for the LHS expression.\n            // The assignment itself doesn't kill a local variable directly here.\n            computeGenKill(lhs, gen, kill, conditional);\n          }\n          // The body of the loop is handled by the CFG traversal.\n        }\n        return;\n\n      case Token.VAR:\n        // VAR declarations: var x = ..., y, z = ...;\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // c is the NAME node (x, y, z)\n          if (c.hasChildren()) {\n            // If there's an initializer (var x = ...)\n            // Compute gen/kill for the initializer expression.\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            // Assignment kills the variable if not conditional.\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n          // A VAR declaration itself doesn't generate (read) the variable.\n          // If it's just `var x;`, it doesn't kill either (value is undefined).\n          // However, the analysis might treat uninitialized declarations as kills\n          // depending on its exact definition. The original code killed only if\n          // there was an initializer and !conditional. Let's keep that.\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        // Left side is always evaluated.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Right side is conditional.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK: // Ternary operator: cond ? trueExpr : falseExpr\n        // Condition is always evaluated.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Both branches are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          // Accessing 'arguments' potentially reads all parameters.\n          markAllParametersEscaped();\n        } else {\n          // Reading a variable generates it.\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Handle assignments and other expressions.\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          // Assignment to a simple variable: x = ..., x += ..., etc.\n          Node lhs = n.getFirstChild();\n          // Assignment kills the variable if not conditional.\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          // If it's not a simple assignment (e.g., +=, -=), it also reads the LHS.\n          if (!NodeUtil.isAssign(n)) {\n            addToSetIfLocal(lhs, gen);\n          }\n          // Compute gen/kill for the RHS expression.\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          // For other node types (like calls, member accesses, operators),\n          // recursively compute gen/kill for children.\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}