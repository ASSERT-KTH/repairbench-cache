{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        // These nodes define lexical scope but have no effect on KILL/GEN sets\n        // for the node itself.\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Only the condition expression affects the GEN/KILL sets for the node.\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          // Handle 'for(init;cond;inc)'\n          // The gen/kill set for the FOR node itself is determined by the\n          // condition, which is evaluated before each iteration.\n          // Init, increment and body are handled by the flow analysis graph edges.\n          Node condition = NodeUtil.getConditionExpression(n);\n          if (condition != null) {\n             computeGenKill(condition, gen, kill, conditional);\n          }\n        } else {\n          // Handle 'for(lhs in rhs)'\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          // Process the rhs expression first, as it's evaluated to get the object\n          // to iterate over.\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // Process the lhs expression. It determines where the property name\n          // is assigned in each iteration.\n          if (NodeUtil.isVar(lhs)) {\n            // case: for(var x in rhs)\n            // The 'var x' declares x. The assignment within the loop kills 'x'.\n            Node varName = lhs.getLastChild();\n            // Check if varName is a local variable before adding to kill set\n            if (!conditional) {\n               addToSetIfLocal(varName, kill);\n            }\n            // Declaration doesn't read the variable, so no GEN here.\n          } else if (NodeUtil.isName(lhs)) {\n             // case: for(x in rhs)\n             // Assignment to 'x' kills the previous value.\n             if (!conditional) {\n               addToSetIfLocal(lhs, kill);\n             }\n             // Assignment doesn't read the variable 'x' itself before assigning.\n          } else {\n             // case: for(a[1] in rhs) or other complex LHS\n             // The LHS expression itself (e.g., a[1]) is evaluated. This involves\n             // reading variables (like 'a'). Recursively compute GEN/KILL.\n             computeGenKill(lhs, gen, kill, conditional);\n             // The assignment to the result (e.g., property '1' of object 'a')\n             // doesn't kill a *local variable* in the sense tracked here,\n             // unless the expression itself involves an assignment that kills.\n          }\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // c is the NAME node.\n          if (c.hasChildren()) {\n            // If there's an initializer: var name = initializer;\n            // Process the initializer first.\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            // The assignment to name kills the previous value.\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n          // Declaration without initializer (var name;) doesn't read or kill\n          // based on prior values in this analysis.\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        // lhs && rhs / lhs || rhs\n        // Process lhs unconditionally.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Process rhs conditionally (it might not execute).\n        computeGenKill(n.getLastChild(), gen, kill, true); // Pass true for conditional\n        return;\n\n      case Token.HOOK:\n        // cond ? trueExpr : falseExpr\n        // Process condition unconditionally.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Process both branches conditionally.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          // Accessing 'arguments' potentially leaks all parameters.\n          markAllParametersEscaped();\n        } else {\n          // Reading a variable adds it to the GEN set.\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Handle assignments and other expressions.\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          // Assignment like: name = rhs; or name op= rhs;\n          Node lhs = n.getFirstChild(); // The NAME node being assigned to.\n          Node rhs = lhs.getNext();     // The RHS expression.\n\n          // For compound assignments (e.g., a += 1), the LHS ('a') is read first.\n          if (!NodeUtil.isAssign(n)) { // Check if it's NOT simple assignment (=)\n            addToSetIfLocal(lhs, gen); // Read LHS ('a')\n          }\n\n          // Process the RHS expression (e.g., 'b' in a += b).\n          if (rhs != null) {\n              computeGenKill(rhs, gen, kill, conditional); // Read RHS ('b')\n          }\n\n          // The assignment to the LHS kills its previous value. This happens last semantically.\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill); // Kill LHS ('a')\n          }\n\n        } else {\n          // For other node types (like calls, array literals, etc.) or\n          // assignments to non-NAME lhs (e.g., a[0]=1),\n          // simply recurse on children to find reads/writes within them.\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}