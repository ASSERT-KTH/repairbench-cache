{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        // These nodes represent scopes, they don't directly generate or kill\n        // variables at the node itself. Their children are handled by the\n        // control flow graph traversal.\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Only the condition expression affects GEN/KILL for the node itself.\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          // Standard FOR loop: for(init; condition; increment)\n          // Only the condition is evaluated at the loop check.\n          // Init and increment are handled as separate statements in the CFG.\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // FOR-IN loop: for(lhs in rhs)\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          // Process RHS first (evaluated before assignment)\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // Process LHS (assignment target)\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in rhs)\n            // The VAR node itself doesn't generate/kill. The child NAME node 'x'\n            // is the assignment target.\n            Node varName = lhs.getFirstChild();\n            // Assignment to 'x' happens here. Kills previous value.\n            // For-in assignments are effectively unconditional within the iteration.\n            if (!conditional) {\n              addToSetIfLocal(varName, kill);\n            }\n            // The declaration 'var x' itself doesn't read 'x'.\n          } else if (NodeUtil.isName(lhs)) {\n            // for(x in rhs)\n            // Assignment to 'x' happens here. Kills previous value.\n             if (!conditional) {\n               addToSetIfLocal(lhs, kill);\n             }\n             // The name 'x' is used as an L-value, not read at this point.\n          } else {\n            // for(a[1] in rhs), for(obj.prop in rhs), etc.\n            // The LHS expression needs to be evaluated. This may read variables.\n            // E.g., `a` is read in `a[1]`. Recursively compute GEN/KILL for the LHS expr.\n            computeGenKill(lhs, gen, kill, conditional);\n            // The assignment happens to the result of the expression,\n            // but it doesn't directly kill a *local variable* NAME node\n            // represented by the top-level LHS node itself.\n          }\n        }\n        return;\n\n      case Token.VAR:\n        // VAR declarations: var x = foo, y;\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // c is the NAME node (x, y)\n          if (c.hasChildren()) {\n            // If there's an initializer (e.g., var x = foo)\n            // Compute GEN/KILL for the initializer expression (foo)\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            // The assignment to the variable happens here.\n            if (!conditional) {\n              addToSetIfLocal(c, kill); // Kills the variable 'c' (e.g., 'x')\n            }\n          }\n          // A var declaration itself doesn't read the variable.\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        // Left side is always executed.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Right side is conditionally executed.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK: // ?: operator\n        // Condition is always executed.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Both branches are conditionally executed.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          // Accessing 'arguments' potentially reads all parameters.\n          markAllParametersEscaped();\n        } else {\n          // Reading a variable name.\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Handle assignments and other expressions.\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          // Assignment to a simple variable name: x = ..., x += ...\n          Node lhs = n.getFirstChild(); // The NAME node (e.g., 'x')\n          // Process RHS first, as its value is needed for the assignment.\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n\n          // Assignment kills the LHS variable.\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          // Compound assignments (e.g., +=, *=) also read the LHS variable.\n          if (!NodeUtil.isAssign(n)) {\n            addToSetIfLocal(lhs, gen);\n          }\n        } else {\n          // For other node types (like GETPROP, GETELEM, CALL, operators),\n          // simply traverse the children to find reads/writes within them.\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}