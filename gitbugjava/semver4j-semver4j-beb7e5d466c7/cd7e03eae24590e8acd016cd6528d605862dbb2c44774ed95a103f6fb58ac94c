{
    "generation": "    @Override\n    public String process(String range) {\n        String[] rangeVersions = range.split(\"\\\\s+\");\n        List<String> objects = new ArrayList<>();\n        for (String rangeVersion : rangeVersions) {\n            Matcher matcher = pattern.matcher(rangeVersion);\n            if (matcher.matches()) {\n                // Left unused variables for brevity.\n                String fullRange = matcher.group(0);\n                String compareSign = matcher.group(1);\n                int major = parseIntWithXSupport(matcher.group(2));\n                int minor = parseIntWithXSupport(matcher.group(3));\n                int patch = parseIntWithXSupport(matcher.group(4));\n                String preRelease = matcher.group(5);\n                String build = matcher.group(6);\n                if (compareSign.equals(EQ.asString()) && isX(patch)) {\n                    compareSign = EMPTY;\n                }\n                if (!compareSign.isEmpty() && isX(patch)) {\n                    if (compareSign.equals(EQ.asString())) {\n                        compareSign = GTE.asString();\n                    }\n                    String from = format(Locale.ROOT, \"%s%d.%d.%d\", compareSign, major, minor, patch);\n                    objects.add(from);\n                } else if (isX(minor)) {\n                    String from = format(Locale.ROOT, \"%s%d.0.0\", GTE.asString(), major);\n                    String to = format(Locale.ROOT, \"%s%d.0.0\", LT.asString(), (major + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else if (isX(patch)) {\n                    String from = format(Locale.ROOT, \"%s%d.%d.0\", GTE.asString(), major, minor);\n                    String to = format(Locale.ROOT, \"%s%d.%d.0\", LT.asString(), major, (minor + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else {\n                    objects.add(fullRange);\n                }\n            }\n        }\n        if (objects.isEmpty()) {\n            return range;\n        }\n        return join(SPACE, objects);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}