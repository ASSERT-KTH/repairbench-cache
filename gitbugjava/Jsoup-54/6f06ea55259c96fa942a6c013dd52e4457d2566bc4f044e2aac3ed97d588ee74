{
    "generation": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                // Attempt to sanitize the attribute key by removing characters invalid in XML names\n                // XML name constraints: Must start with letter, '_', or ':', subsequent chars can be letter, digit, '.', '-', '_', ':'\n                // Simplified rule used here: remove chars not in [-a-zA-Z0-9_:.]\n                String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n\n                // Check if the sanitized key is a valid XML Name.\n                // Must not be empty, must start with a letter, '_', or ':',\n                // and subsequent characters must be letters, digits, '-', '.', '_', or ':'.\n                if (key.isEmpty()) {\n                    continue; // Skip if the key becomes empty after sanitization\n                }\n                char start = key.charAt(0);\n                boolean valid = true;\n                if (!Character.isLetter(start) && start != '_' && start != ':') {\n                    valid = false; // Invalid start character\n                } else {\n                    // Check subsequent characters\n                    for (int i = 1; i < key.length(); i++) {\n                        char c = key.charAt(i);\n                        if (!Character.isLetterOrDigit(c) && c != '-' && c != '.' && c != '_' && c != ':') {\n                            valid = false; // Invalid subsequent character\n                            break;\n                        }\n                    }\n                }\n\n                // Only set the attribute if the sanitized key is a valid XML name.\n                if (valid) {\n                    try {\n                        el.setAttribute(key, attribute.getValue());\n                    } catch (org.w3c.dom.DOMException e) {\n                        // While the check above covers most cases, the XML spec is complex.\n                        // Catching the exception provides a fallback for edge cases not covered\n                        // by the simplified validation logic. For instance, names starting with \"xml\" (case-insensitive)\n                        // are reserved. Instead of adding complex checks, we catch the exception if the DOM impl rejects it.\n                        // Log or handle the exception if necessary, but for repair, we skip the attribute.\n                    }\n                }\n                // else: skip the attribute if the sanitized key is not a valid XML name.\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}