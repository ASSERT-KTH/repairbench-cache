{
    "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Check to see if the given block comment looks like it should be JSDoc.\n * This method assumes it is only called for comments starting with /*, not /**.\n * It checks for patterns like \"@tag\", \" @tag\", \"\\n@tag\", \"\\n *@tag\", etc.,\n * inside the comment body, which suggest an attempt to use JSDoc tags.\n */\nprivate void handleBlockComment(Comment comment) {\n  // Pattern to find JSDoc tags inside non-JSDoc block comments.\n  // Looks for @ followed by a word character, where the @ is preceded by\n  // whitespace or the start of the comment's content, possibly with a *.\n  // (^|\\s) - Start of string or whitespace.\n  // \\*?    - Optional asterisk.\n  // @\\w    - @ followed by a word character (to avoid matching random @ symbols).\n  // Using Pattern.compile().matcher().find() is more robust than indexOf checks.\n  final Pattern SUSPICIOUS_COMMENT_PATTERN = Pattern.compile(\"(^|\\\\s)\\\\*?@\\\\w\");\n\n  String value = comment.getValue();\n  // comment.getValue() returns the content *between* /* and */.\n  Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(value);\n  if (matcher.find()) {\n    errorReporter.warning(\n        SUSPICIOUS_COMMENT_WARNING,\n        sourceName,\n        comment.getLineno(), \"\", 0);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}