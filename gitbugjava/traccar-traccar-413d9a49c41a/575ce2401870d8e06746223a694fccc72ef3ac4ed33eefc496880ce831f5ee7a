{
    "generation": "private Position decodePosition(\n        Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int status = buf.readUnsignedShort();\n\n    position.setValid(BitUtil.check(status, 15));\n\n    position.set(Position.KEY_STATUS, status);\n    position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n    int event = buf.readUnsignedShort();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, event);\n\n    String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n    DateBuilder dateBuilder = new DateBuilder()\n            .setYear(Integer.parseInt(time.substring(0, 2)))\n            .setMonth(Integer.parseInt(time.substring(2, 4)))\n            .setDay(Integer.parseInt(time.substring(4, 6)))\n            .setHour(Integer.parseInt(time.substring(6, 8)))\n            .setMinute(Integer.parseInt(time.substring(8, 10)))\n            .setSecond(Integer.parseInt(time.substring(10, 12)));\n    position.setTime(dateBuilder.getDate());\n\n    position.setLongitude(buf.readInt() * 0.00001);\n    position.setLatitude(buf.readInt() * 0.00001);\n\n    // The odometer can sometimes appear in the next bytes after the latitude/longitude block, before the sub-blocks\n    // This value may be zero if not present, so we will capture it regardless\n    int odometerHigh = buf.readUnsignedShort();\n    int odometerLow = buf.readUnsignedShort();\n\n    long odometer = ((long) odometerHigh << 16 | odometerLow) * 1000L;\n\n    // Advance to speed, course, altitude as before\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n    position.setCourse(buf.readUnsignedShort());\n    position.setAltitude(buf.readUnsignedShort());\n\n    // In some cases, protocols like HuaSheng use these two bytes as odometer, \n    // but in some cases the KEY_ODOMETER field is repeated as a sub-block, \n    // so only set KEY_ODOMETER here if it's not later overwritten\n    position.set(Position.KEY_ODOMETER, odometer);\n\n    Network network = new Network();\n\n    while (buf.readableBytes() > 4) {\n        int subtype = buf.readUnsignedShort();\n        int length = buf.readUnsignedShort() - 4;\n        int endIndex = buf.readerIndex() + length;\n        switch (subtype) {\n            case 0x0001:\n                int coolantTemperature = buf.readUnsignedByte() - 40;\n                if (coolantTemperature <= 215) {\n                    position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                }\n                int rpm = buf.readUnsignedShort();\n                if (rpm <= 65535) {\n                    position.set(Position.KEY_RPM, rpm);\n                }\n                position.set(\"averageSpeed\", buf.readUnsignedByte());\n                buf.readUnsignedShort(); // interval fuel consumption\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                buf.readUnsignedInt(); // trip id\n                if (buf.readerIndex() < endIndex) {\n                    position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                }\n                break;\n            case 0x0005:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                buf.readUnsignedInt(); // run time\n                break;\n            case 0x0009:\n                position.set(\n                        Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                break;\n            case 0x000F:\n                // DTC codes\n                String dtcs = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (!dtcs.isEmpty()) {\n                    // Each code consists of 5 characters\n                    StringBuilder result = new StringBuilder();\n                    for (int i = 0; i + 5 <= dtcs.length(); i += 5) {\n                        if (result.length() > 0) {\n                            result.append(\" \");\n                        }\n                        // Convert first char (0-5 A-F) to prefix, rest is the number.\n                        String code = dtcs.substring(i, i + 5);\n                        char prefix;\n                        switch (code.charAt(0)) {\n                            case '0':\n                                prefix = 'P';\n                                break;\n                            case '1':\n                                prefix = 'C';\n                                break;\n                            case '2':\n                                prefix = 'B';\n                                break;\n                            case '3':\n                                prefix = 'U';\n                                break;\n                            case '4':\n                                prefix = 'P';\n                                break;\n                            case '5':\n                                prefix = 'C';\n                                break;\n                            case '6':\n                                prefix = 'B';\n                                break;\n                            case '7':\n                                prefix = 'U';\n                                break;\n                            case 'A':\n                            case 'a':\n                                prefix = 'P';\n                                break;\n                            case 'B':\n                            case 'b':\n                                prefix = 'C';\n                                break;\n                            case 'C':\n                            case 'c':\n                                prefix = 'B';\n                                break;\n                            case 'D':\n                            case 'd':\n                                prefix = 'U';\n                                break;\n                            case 'E':\n                            case 'e':\n                                prefix = 'P';\n                                break;\n                            case 'F':\n                            case 'f':\n                                prefix = 'C';\n                                break;\n                            default:\n                                prefix = code.charAt(0);\n                        }\n                        result.append(prefix).append(code.substring(1));\n                    }\n                    position.set(Position.KEY_DTCS, result.toString());\n                }\n                break;\n            case 0x0011:\n                position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                break;\n            case 0x0014:\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                break;\n            case 0x0020:\n                String[] cells = buf.readCharSequence(\n                        length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                for (String cell : cells) {\n                    String[] values = cell.split(\"@\");\n                    network.addCellTower(CellTower.from(\n                            Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                            Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                }\n                break;\n            case 0x0021:\n                String[] points = buf.readCharSequence(\n                        length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                for (String point : points) {\n                    String[] values = point.split(\"@\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                }\n                break;\n            case 0x0010:\n                // Some devices send odometer here as double-word (4 bytes, meters)\n                if (length >= 4) {\n                    long odoMeters = buf.readUnsignedInt();\n                    position.set(Position.KEY_ODOMETER, odoMeters * 1.0);\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}