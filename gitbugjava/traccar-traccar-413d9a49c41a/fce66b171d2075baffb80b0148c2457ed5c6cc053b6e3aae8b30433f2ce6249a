{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000L); // Use long for multiplication to avoid overflow if result is large before conversion\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) { // Each TLV block needs at least 2 bytes for subtype and 2 for length\n            int subtype = buf.readUnsignedShort();\n            int dataBlockLength = buf.readUnsignedShort(); // This is the length of the entire data block (subtype field + length field + data)\n            int length = dataBlockLength - 4; // Actual data length\n            int endIndex = buf.readerIndex() + length;\n\n            if (length < 0) { // Corrupted data block length\n                // Potentially log this error and break or skip to what might be the next message\n                break; \n            }\n\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) { // This condition is always true for unsigned short\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); // interval fuel consumption\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); // trip id\n                    if (buf.readerIndex() < endIndex) { // check if there's data left for adBlueLevel\n                        position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); // run time\n                    break;\n                case 0x0009:\n                    if (length > 0) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                case 0x0010: // Handler for Odometer data\n                    if (length > 0) {\n                        String odometerKmStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        try {\n                            // The string might contain null characters if it's null-padded.\n                            int nullCharIndex = odometerKmStr.indexOf('\\0');\n                            if (nullCharIndex != -1) {\n                                odometerKmStr = odometerKmStr.substring(0, nullCharIndex);\n                            }\n                            double odometerKm = Double.parseDouble(odometerKmStr);\n                            position.set(Position.KEY_ODOMETER, odometerKm * 1000.0); // Convert KM to meters\n                        } catch (NumberFormatException e) {\n                            // Failed to parse odometer string, KEY_ODOMETER will retain its previous value (e.g. initial one or from other sources)\n                            // Optionally log e\n                        }\n                    }\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    if (length > 0) {\n                        String[] cells = buf.readCharSequence(\n                                length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                        for (String cell : cells) {\n                            String[] values = cell.split(\"@\");\n                            if (values.length == 4) {\n                                try {\n                                    network.addCellTower(CellTower.from(\n                                            Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                            Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                                } catch (NumberFormatException e) {\n                                    // Optional: Log parsing error for a cell\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x0021:\n                    if (length > 0) {\n                        String[] points = buf.readCharSequence(\n                                length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                        for (String point : points) {\n                            String[] values = point.split(\"@\");\n                            if (values.length == 2) {\n                                try {\n                                    network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                                } catch (NumberFormatException e) {\n                                    // Optional: Log parsing error for a wifi point\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    if (length > 0) {\n                        buf.skipBytes(length);\n                    }\n                    break;\n            }\n            // Ensure reader index is advanced to the end of the current data block\n            // This handles cases where a subtype handler might not read all 'length' bytes\n            // or if length was 0.\n            if (buf.readerIndex() < endIndex) {\n                 buf.readerIndex(endIndex);\n            } else if (buf.readerIndex() > endIndex) {\n                // This indicates an over-read, a bug in a subtype handler. Log and potentially stop.\n                // For now, assume handlers are correct or `endIndex` logic manages it.\n                // Consider breaking the loop if this happens:\n                // Log.warning(\"Buffer over-read in subtype \" + subtype); break;\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}