{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        // Set initial odometer; use 1000.0 to ensure double type if not overwritten\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000.0);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() >= 4) { // Changed from > 4 to >= 4\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4; // Data payload length\n\n            if (length < 0) {\n                // Invalid length (total length field < 4), indicates data corruption or parsing error.\n                // Stop processing further subtypes.\n                break;\n            }\n\n            int readerStartIndexForSubtype = buf.readerIndex();\n            int endIndex = readerStartIndexForSubtype + length;\n\n            // Protective check: if calculated endIndex is beyond buffer's actual data, cap it.\n            // This prevents IndexOutOfBoundsException if length field is erroneously large.\n            if (endIndex > buf.writerIndex()) {\n                // Log.warn(\"Subtype \" + subtype + \" has invalid length \" + length +\n                //          \", exceeding buffer bounds. Truncating read.\");\n                endIndex = buf.writerIndex(); // Cap to buffer limit\n                length = endIndex - readerStartIndexForSubtype; // Adjust length accordingly\n            }\n\n            switch (subtype) {\n                case 0x0001:\n                    // Check if there's enough data to read all fixed fields before attempting.\n                    if (length >= 17) { // Minimum expected length for core fields\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        buf.readUnsignedInt(); // trip id\n                        if (buf.readerIndex() < endIndex) { // If more data declared for this subtype\n                            position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                        }\n                    } else if (length > 0) { // Not enough for full parse, skip remaining declared bytes\n                         buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0005:\n                    if (length >= 1 + 1 + 4) { // RSSI (1) + HDOP (1) + run time (4)\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                        buf.readUnsignedInt(); // run time\n                    } else if (length > 0) {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0009:\n                    if (length > 0) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                case 0x0010: // ADDED CASE for Odometer\n                    if (length > 0) {\n                        String odometerString = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        try {\n                            double odometerKm = Double.parseDouble(odometerString);\n                            position.set(Position.KEY_ODOMETER, odometerKm * 1000.0); // Value in km, convert to meters\n                        } catch (NumberFormatException e) {\n                            // Optional: Log.warn(\"Failed to parse odometer from subtype 0x0010\", e);\n                        }\n                    }\n                    break;\n                case 0x0011:\n                    if (length == 4) { // Expects an unsigned int (4 bytes)\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    } else if (length > 0) {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0014:\n                    if (length >= 1 + 1 + 1 + 2 + 1) { // engine load + timing adv + air temp + air flow + throttle\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    } else if (length > 0) {\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0020:\n                    if (length > 0) {\n                        String cellsData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (!cellsData.isEmpty()) {\n                            String[] cells = cellsData.split(\"\\\\+\");\n                            for (String cell : cells) {\n                                if (cell.contains(\"@\")) {\n                                    String[] values = cell.split(\"@\");\n                                    if (values.length == 4) {\n                                        try {\n                                            network.addCellTower(CellTower.from(\n                                                    Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                                    Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                                        } catch (NumberFormatException e) { /* ignore malformed cell */ }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x0021:\n                    if (length > 0) {\n                        String pointsData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (!pointsData.isEmpty()) {\n                            String[] points = pointsData.split(\"\\\\+\");\n                            for (String point : points) {\n                                if (point.contains(\"@\")) {\n                                    String[] values = point.split(\"@\");\n                                    if (values.length == 2) {\n                                        try {\n                                            network.addWifiAccessPoint(WifiAccessPoint.from(\n                                                    values[0], Integer.parseInt(values[1])));\n                                        } catch (NumberFormatException e) { /* ignore malformed point */ }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    if (length > 0) {\n                        buf.skipBytes(length); // length is already capped if it exceeded buffer bounds\n                    }\n                    break;\n            }\n            // Ensure the reader index is advanced to the calculated endIndex for this subtype.\n            // This handles cases where a subtype's case doesn't read all 'length' bytes,\n            // or if it accidentally reads more (though individual cases should be careful).\n            // readerStartIndexForSubtype + length = original endIndex before potential capping.\n            // We must use the potentially capped 'endIndex'.\n            buf.readerIndex(endIndex);\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}