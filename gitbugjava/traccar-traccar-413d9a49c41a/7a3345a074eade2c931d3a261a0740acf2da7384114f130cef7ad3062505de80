{
    "generation": "import io.netty.buffer.ByteBuf;\nimport io.netty.channel.Channel;\nimport java.net.SocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.traccar.BaseProtocolDecoder;\nimport org.traccar.session.DeviceSession;\nimport org.traccar.Protocol;\nimport org.traccar.helper.BitUtil;\nimport org.traccar.helper.DateBuilder;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\nimport org.traccar.model.WifiAccessPoint;\n\n// Assume the containing class defines:\n// - private static final Logger Log = LoggerFactory.getLogger(HuaShengProtocolDecoder.class);\n// - private String decodeAlarm(int event) { ... }\n// - private void sendResponse(Channel channel, int type, int index, ByteBuf data) { ... }\n// - private static final int MSG_POSITION_RSP = ...;\n\n    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        try {\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(Integer.parseInt(time.substring(0, 2)) + 2000) // YY to YYYY\n                    .setMonth(Integer.parseInt(time.substring(2, 4)))\n                    .setDay(Integer.parseInt(time.substring(4, 6)))\n                    .setHour(Integer.parseInt(time.substring(6, 8)))\n                    .setMinute(Integer.parseInt(time.substring(8, 10)))\n                    .setSecond(Integer.parseInt(time.substring(10, 12)));\n            position.setTime(dateBuilder.getDate());\n        } catch (NumberFormatException e) {\n            // Log potentially available in the class scope\n            // Log.warning(\"Failed to parse time: \" + time, e);\n            // Depending on requirements, might return null or continue without time\n        }\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        // Odometer is read from subtype 0x0010, removed from here:\n        // position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) { // Need subtype (2) + totalLength (2)\n            int startIndex = buf.readerIndex();\n            int subtype = buf.readUnsignedShort();\n            int totalLength = buf.readUnsignedShort();\n\n            // Validate totalLength and ensure buffer has enough bytes for the TLV item\n            // totalLength includes the 4 bytes of subtype+totalLength itself.\n            if (totalLength < 4 || startIndex + totalLength > buf.writerIndex()) {\n                // Log.warning(\"Invalid TLV total length: \" + totalLength + \" or buffer overflow at index \" + startIndex);\n                break; // Stop processing TLVs for this message if length is invalid\n            }\n\n            int length = totalLength - 4; // Actual data length\n            int endIndex = startIndex + totalLength;\n\n            // Ensure buffer has enough readable bytes for the data part.\n            // This check handles cases where totalLength is valid but points beyond the readable buffer.\n            if (buf.readableBytes() < length) {\n                // Log.warning(\"Buffer underflow for TLV data, expected \" + length + \" bytes, readable \" + buf.readableBytes());\n                break; // Stop processing TLVs if not enough data for claimed length\n            }\n\n            switch (subtype) {\n                case 0x0001:\n                    // Basic check if length accommodates minimum mandatory fields\n                    if (length >= 17) {\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) { // Max sensible value check\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = buf.readUnsignedShort();\n                        position.set(Position.KEY_RPM, rpm);\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // skip interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        // Assuming trip odometer is in KM, convert to meters\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 1000.0);\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        buf.readUnsignedInt(); // skip trip id\n                        // Check if AdBlue level data is present (length allows) and readable bytes exist\n                        if (length >= 18 && buf.readerIndex() < endIndex) { // Check index vs endIndex\n                            position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                        }\n                    } else {\n                        // Log.warning(\"Incorrect length for subtype 0x0001: \" + length + \", skipping data.\");\n                        buf.skipBytes(length); // Skip the data block\n                    }\n                    break;\n                case 0x0005:\n                    if (length >= 6) { // Needs 1(RSSI) + 1(HDOP) + 4(runtime)\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte()); // Keep original behavior (no scaling)\n                        buf.readUnsignedInt(); // skip run time\n                    } else {\n                        // Log.warning(\"Incorrect length for subtype 0x0005: \" + length + \", skipping data.\");\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0009: // VIN\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0010: // Odometer (Total)\n                    String odometerKmStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    try {\n                        // Value is in kilometers (e.g., \"13212.000000\"), convert to meters\n                        double odometerKm = Double.parseDouble(odometerKmStr);\n                        position.set(Position.KEY_ODOMETER, odometerKm * 1000.0);\n                    } catch (NumberFormatException e) {\n                        // Log.warning(\"Failed to parse odometer from subtype 0x0010: '\" + odometerKmStr + \"'\", e);\n                    }\n                    break;\n                case 0x0011: // Hours\n                    if (length >= 4) { // Needs 4 bytes for Unsigned Int\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    } else {\n                        // Log.warning(\"Incorrect length for subtype 0x0011: \" + length + \", skipping data.\");\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0014: // Engine data\n                    if (length >= 6) { // Needs 1+1+1+2+1 = 6 bytes\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    } else {\n                        // Log.warning(\"Incorrect length for subtype 0x0014: \" + length + \", skipping data.\");\n                        buf.skipBytes(length);\n                    }\n                    break;\n                case 0x0020: // Cell towers\n                    String cellsData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    try {\n                        String[] cells = cellsData.split(\"\\\\+\");\n                        for (String cell : cells) {\n                            if (cell.isEmpty()) {\n                                continue;\n                            }\n                            String[] values = cell.split(\"@\");\n                            if (values.length == 4) {\n                                network.addCellTower(CellTower.from(\n                                        Integer.parseInt(values[0]), Integer.parseInt(values[1]), // MCC, MNC\n                                        Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16))); // LAC (hex), CID (hex)\n                            } else {\n                                // Log.warning(\"Invalid cell tower format: \" + cell);\n                            }\n                        }\n                    } catch (Exception e) { // Catch parsing errors (NumberFormat, etc.)\n                        // Log.warning(\"Failed to parse cell tower data: '\" + cellsData + \"'\", e);\n                    }\n                    break;\n                case 0x0021: // WiFi points\n                    String wifiData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    try {\n                        String[] points = wifiData.split(\"\\\\+\");\n                        for (String point : points) {\n                            if (point.isEmpty()) {\n                                continue;\n                            }\n                            String[] values = point.split(\"@\");\n                            if (values.length == 2) {\n                                network.addWifiAccessPoint(WifiAccessPoint.from(\n                                        values[0], Integer.parseInt(values[1]))); // MAC, RSSI\n                            } else {\n                                // Log.warning(\"Invalid wifi point format: \" + point);\n                            }\n                        }\n                    } catch (Exception e) { // Catch parsing errors\n                        // Log.warning(\"Failed to parse wifi data: '\" + wifiData + \"'\", e);\n                    }\n                    break;\n                default:\n                    // Skip data for unknown or unhandled subtypes\n                    buf.skipBytes(length);\n                    break;\n            }\n            // Set reader index to the end of the current TLV item.\n            // This ensures correct positioning for the next item, even if the current\n            // item's data wasn't fully read or skipped due to errors/length issues inside the switch.\n            buf.readerIndex(endIndex);\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        // Response sending logic might depend on specific protocol requirements\n        // sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}