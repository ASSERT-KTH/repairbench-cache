{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        // Read initial odometer value (might be overwritten by subtype 0x0010 if present)\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000L);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) { // Need at least 4 bytes for subtype and length\n            int subtype = buf.readUnsignedShort();\n            int blockLength = buf.readUnsignedShort(); // Total length of subtype block (including type and length fields)\n            int dataLength = blockLength - 4; // Length of the actual data\n            int endIndex = buf.readerIndex() + dataLength;\n\n            // Ensure dataLength is not negative and doesn't exceed buffer bounds\n            if (dataLength < 0 || dataLength > buf.readableBytes()) {\n                 // Invalid length, break loop or log error, advance reader to where it should be if length was correct\n                 // For now, just break to avoid potential errors. The readerIndex will not be advanced further.\n                 // Consider logging this situation.\n                 break;\n            }\n\n            switch (subtype) {\n                case 0x0001:\n                    if (dataLength >= 19) { // Minimum expected length for base fields\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = buf.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 1000L); // Assuming km -> m\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        buf.readUnsignedInt(); // trip id\n                        if (buf.readerIndex() < endIndex) { // Check if AdBlue level is present\n                            position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                        }\n                    }\n                    break;\n                case 0x0005:\n                     if (dataLength >= 6) { // Check required length\n                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                         position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1); // Assuming scale 0.1\n                         buf.readUnsignedInt(); // run time\n                     }\n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0010: // Total odometer\n                     if (dataLength > 0) {\n                         String odometerKmStr = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();\n                         try {\n                             // Value is in kilometers, convert to meters for KEY_ODOMETER\n                             position.set(Position.KEY_ODOMETER, Double.parseDouble(odometerKmStr) * 1000.0);\n                         } catch (NumberFormatException e) {\n                             // Ignore invalid format\n                         }\n                     }\n                     break;\n                case 0x0011:\n                    if (dataLength >= 4) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    }\n                    break;\n                case 0x0014:\n                    if (dataLength >= 7) { // Check required length\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 2.55); // % = value / 2.55\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5 - 64); // degrees = value * 0.5 - 64\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40); // Celsius = value - 40\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01); // g/s = value * 0.01\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 2.55); // % = value / 2.55\n                    }\n                    break;\n                case 0x0020:\n                    String cellsText = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();\n                    if (!cellsText.isEmpty()) {\n                        String[] cells = cellsText.split(\"\\\\+\");\n                        for (String cell : cells) {\n                            String[] values = cell.split(\"@\");\n                            try {\n                                if (values.length >= 4) {\n                                    network.addCellTower(CellTower.from(\n                                            Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                            Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                                }\n                            } catch (NumberFormatException e) {\n                                // Ignore invalid cell data\n                            }\n                        }\n                    }\n                    break;\n                case 0x0021:\n                    String pointsText = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();\n                     if (!pointsText.isEmpty()) {\n                         String[] points = pointsText.split(\"\\\\+\");\n                         for (String point : points) {\n                             String[] values = point.split(\"@\");\n                             try {\n                                 if (values.length >= 2) {\n                                     network.addWifiAccessPoint(WifiAccessPoint.from(\n                                             values[0].replace('-', ':'), // Correct MAC format\n                                             Integer.parseInt(values[1])));\n                                 }\n                             } catch (NumberFormatException e) {\n                                // Ignore invalid wifi data\n                             }\n                         }\n                     }\n                    break;\n                default:\n                    // Skip unknown subtypes\n                    buf.skipBytes(dataLength);\n                    break;\n            }\n            // Ensure reader index is set to the end of the current subtype block,\n            // even if parsing failed or dataLength was smaller than expected.\n            buf.readerIndex(endIndex);\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}