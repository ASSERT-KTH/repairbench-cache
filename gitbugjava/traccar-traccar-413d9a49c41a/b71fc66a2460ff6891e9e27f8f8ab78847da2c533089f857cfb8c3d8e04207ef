{
    "generation": "import io.netty.buffer.ByteBuf;\nimport io.netty.channel.Channel;\nimport org.traccar.BaseProtocolDecoder; // Assuming base class for context methods\nimport org.traccar.DeviceSession;\nimport org.traccar.NetworkMessage;\nimport org.traccar.Protocol;\nimport org.traccar.helper.BitUtil;\nimport org.traccar.helper.DateBuilder;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\nimport org.traccar.model.WifiAccessPoint;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.SocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\n\n// Define necessary context methods/fields if not extending a suitable base class\n// e.g., getDeviceSession, getProtocolName, sendResponse, decodeAlarm, Log, MSG_POSITION_RSP\n\npublic class FixedHuaShengProtocolDecoder { // Renamed class for clarity\n\n    // Assume Log is available, like this:\n    private static final Logger Log = LoggerFactory.getLogger(FixedHuaShengProtocolDecoder.class);\n    // Assume MSG_POSITION_RSP is defined, e.g.:\n    private static final int MSG_POSITION_RSP = 0x8001; // Example value, use actual value\n\n    // Dummy context methods for compilation - replace with actual implementation context\n    private DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress) { return null; }\n    private String getProtocolName() { return \"huasheng\"; }\n    private void sendResponse(Channel channel, int type, int index, ByteBuf data) { }\n    private String decodeAlarm(int event) { return null; }\n\n\n    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        try {\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(Integer.parseInt(time.substring(0, 2)))\n                    .setMonth(Integer.parseInt(time.substring(2, 4)))\n                    .setDay(Integer.parseInt(time.substring(4, 6)))\n                    .setHour(Integer.parseInt(time.substring(6, 8)))\n                    .setMinute(Integer.parseInt(time.substring(8, 10)))\n                    .setSecond(Integer.parseInt(time.substring(10, 12)));\n            position.setTime(dateBuilder.getDate());\n        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {\n            Log.warn(\"Failed to parse time: \" + time, e);\n            return null; // Position is likely invalid without time\n        }\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        // Read initial odometer value (unit uncertain, original code used * 1000 suggesting km -> m).\n        // This might be overwritten by subtype 0x0010 if present.\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000.0);\n\n        Network network = new Network();\n\n        // Process subtypes\n        while (buf.readableBytes() >= 4) { // Need at least 4 bytes for subtype and length\n            int subtype = buf.readUnsignedShort();\n            int totalLength = buf.readUnsignedShort(); // Total length including subtype and length fields\n\n            if (totalLength < 4) {\n                Log.warn(\"Invalid subtype total length: \" + totalLength + \" for subtype: 0x\" + Integer.toHexString(subtype));\n                break; // Stop processing potentially corrupt data\n            }\n\n            int dataLength = totalLength - 4;\n            int startIndex = buf.readerIndex();\n            int endIndex = startIndex + dataLength;\n\n            // Check buffer bounds BEFORE trying to read/skip\n            if (endIndex > buf.writerIndex()) {\n                Log.warn(\"Subtype data length \" + dataLength + \" exceeds buffer limit for subtype 0x\" + Integer.toHexString(subtype)\n                        + \". Start index: \" + startIndex + \", End index: \" + endIndex + \", Writer index: \" + buf.writerIndex());\n                buf.readerIndex(buf.writerIndex()); // Consume rest of buffer\n                break; // Stop processing subtypes\n            }\n\n            // Ensure buffer has enough readable bytes for the declared data length NOW\n            if (buf.readableBytes() < dataLength) {\n                // This case should theoretically not be hit if endIndex check above is correct, but added for safety.\n                Log.warn(\"Not enough readable bytes for subtype 0x\" + Integer.toHexString(subtype) + \". Declared data length: \" + dataLength + \", available: \" + buf.readableBytes());\n                buf.readerIndex(buf.writerIndex()); // Consume rest of buffer\n                break; // Stop processing subtypes\n            }\n\n            try {\n                switch (subtype) {\n                    case 0x0001:\n                        // Minimum length for fixed fields: 1+2+1+2+2+2+2+1+4 = 17 bytes\n                         if (dataLength >= 17) {\n                            int coolantTemperature = buf.readUnsignedByte() - 40;\n                            if (coolantTemperature <= 215) {\n                                position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                            }\n                            int rpm = buf.readUnsignedShort();\n                            if (rpm <= 65535) {\n                                position.set(Position.KEY_RPM, rpm);\n                            }\n                            position.set(\"averageSpeed\", buf.readUnsignedByte());\n                            buf.readUnsignedShort(); // interval fuel consumption - skip\n                            position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                            position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort()); // Assuming short value is correct unit\n                            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                            position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                            buf.readUnsignedInt(); // trip id - skip\n                            // Check remaining readable bytes within subtype for optional field\n                            if (buf.readerIndex() < endIndex) {\n                                position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                            }\n                         } else {\n                             Log.warn(\"Insufficient data length for subtype 0x0001: \" + dataLength + \", skipping.\");\n                             buf.skipBytes(dataLength); // Skip the declared bytes\n                         }\n                        break;\n                    case 0x0005: // RSSI, HDOP, Runtime\n                         if (dataLength >= 6) { // 1 byte RSSI + 1 byte HDOP + 4 bytes runtime\n                            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                            position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1); // Apply 0.1 scaling\n                            buf.readUnsignedInt(); // run time - skip\n                         } else {\n                             Log.warn(\"Insufficient data length for subtype 0x0005: \" + dataLength + \", skipping.\");\n                             buf.skipBytes(dataLength);\n                         }\n                        break;\n                    case 0x0009: // VIN\n                        if (dataLength > 0) {\n                            position.set(Position.KEY_VIN, buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString());\n                        } else {\n                            buf.skipBytes(dataLength); // Skip if length is 0, though technically case 0x0009 implies VIN data\n                        }\n                        break;\n                    case 0x0010: // Odometer (ASCII km)\n                        if (dataLength > 0) {\n                            String odometerKm = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();\n                            try {\n                                // Parse odometer (km) and convert to meters (standard unit)\n                                position.set(Position.KEY_ODOMETER, Double.parseDouble(odometerKm) * 1000.0);\n                            } catch (NumberFormatException e) {\n                                Log.warn(\"Failed to parse odometer from subtype 0x0010: '\" + odometerKm + \"'\", e);\n                            }\n                        } else {\n                           buf.skipBytes(dataLength); // Skip if length is 0\n                        }\n                        break;\n                    case 0x0011: // Hours\n                        if (dataLength >= 4) {\n                            position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05); // Store as hours (double)\n                        } else {\n                            Log.warn(\"Insufficient data length for subtype 0x0011: \" + dataLength + \", skipping.\");\n                            buf.skipBytes(dataLength);\n                        }\n                        break;\n                    case 0x0014: // Engine Load etc.\n                         if (dataLength >= 6) { // 1+1+1+2+1 = 6 bytes\n                            position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                            position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                            position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                            position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                            position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                         } else {\n                             Log.warn(\"Insufficient data length for subtype 0x0014: \" + dataLength + \", skipping.\");\n                             buf.skipBytes(dataLength);\n                         }\n                        break;\n                    case 0x0020: // Cell Towers\n                        if (dataLength > 0) {\n                            String cellsText = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();\n                            String[] cells = cellsText.split(\"\\\\+\");\n                            for (String cell : cells) {\n                                if (cell == null || cell.isEmpty()) { continue; }\n                                String[] values = cell.split(\"@\");\n                                if (values.length >= 4) {\n                                     try {\n                                        network.addCellTower(CellTower.from(\n                                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                                Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                                     } catch (NumberFormatException e) {\n                                        Log.warn(\"Failed to parse cell tower info: \" + cell, e);\n                                     }\n                                } else {\n                                    Log.warn(\"Invalid cell tower format: \" + cell);\n                                }\n                            }\n                        } else {\n                            buf.skipBytes(dataLength); // Skip if length is 0\n                        }\n                        break;\n                    case 0x0021: // WiFi Access Points\n                        if (dataLength > 0) {\n                            String pointsText = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();\n                            String[] points = pointsText.split(\"\\\\+\");\n                            for (String point : points) {\n                                 if (point == null || point.isEmpty()) { continue; }\n                                String[] values = point.split(\"@\");\n                                 if (values.length >= 2) {\n                                    try {\n                                        // Normalize MAC address format (replace hyphens with colons if necessary)\n                                        String mac = values[0].replace('-', ':');\n                                        network.addWifiAccessPoint(WifiAccessPoint.from(\n                                                mac, Integer.parseInt(values[1])));\n                                    } catch (NumberFormatException e) {\n                                        Log.warn(\"Failed to parse WiFi access point info: \" + point, e);\n                                    }\n                                 } else {\n                                    Log.warn(\"Invalid WiFi access point format: \" + point);\n                                 }\n                            }\n                        } else {\n                            buf.skipBytes(dataLength); // Skip if length is 0\n                        }\n                        break;\n                    default:\n                        // Skip unknown subtypes safely\n                        buf.skipBytes(dataLength);\n                        break;\n                }\n            } catch (Exception e) {\n                Log.warn(\"Error processing subtype 0x\" + Integer.toHexString(subtype) + \": \" + e.getMessage(), e);\n                // Let finally block handle reader index correction\n            } finally {\n                 // Set reader index to the expected end of the current subtype block,\n                 // unless it's already past that point due to an error or over-read.\n                 // This ensures the next loop iteration starts at the correct position.\n                 if (buf.readerIndex() < endIndex) {\n                     buf.readerIndex(endIndex);\n                 } else if (buf.readerIndex() > endIndex) {\n                     // If we read past end index somehow (should not happen with checks), log it.\n                     Log.warn(\"Reader index (\" + buf.readerIndex() + \") is beyond endIndex (\" + endIndex + \") after processing subtype 0x\" + Integer.toHexString(subtype));\n                     // Do not move index backward, leave it where it is to avoid infinite loops.\n                 }\n                 // If buf.readerIndex() == endIndex, do nothing, it's already correct.\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}