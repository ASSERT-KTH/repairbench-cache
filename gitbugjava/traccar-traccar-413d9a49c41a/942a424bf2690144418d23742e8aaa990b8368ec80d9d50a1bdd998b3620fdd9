{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        try {\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(Integer.parseInt(time.substring(0, 2)))\n                    .setMonth(Integer.parseInt(time.substring(2, 4)))\n                    .setDay(Integer.parseInt(time.substring(4, 6)))\n                    .setHour(Integer.parseInt(time.substring(6, 8)))\n                    .setMinute(Integer.parseInt(time.substring(8, 10)))\n                    .setSecond(Integer.parseInt(time.substring(10, 12)));\n            position.setTime(dateBuilder.getDate());\n        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {\n            // Ignore invalid time format\n        }\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        // This might be a trip odometer or an older field. Subtype 0x0010 provides total odometer.\n        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 1000L); // Renamed key, use long multiplier\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int lengthField = buf.readUnsignedShort();\n            // Assuming lengthField is the total length including subtype and length field itself\n            int length = lengthField - 4;\n            if (length < 0 || length > buf.readableBytes()) {\n                // Invalid length, stop processing subtypes for this message\n                break;\n            }\n            int endIndex = buf.readerIndex() + length;\n\n            switch (subtype) {\n                case 0x0001:\n                    if (length >= 16) { // Minimum length for fixed part of this subtype\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = buf.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        // Overwrite trip odometer if present here\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 1000L);\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        buf.readUnsignedInt(); // trip id\n                        if (buf.readerIndex() < endIndex) { // Check if optional field exists\n                            position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                        }\n                    }\n                    break;\n                case 0x0005:\n                    if (length >= 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                        buf.readUnsignedInt(); // run time\n                    }\n                    break;\n                case 0x0009: // VIN\n                    if (length > 0) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                case 0x0010: // Odometer (Total Distance in KM as string)\n                    if (length > 0) {\n                        String odometerStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        try {\n                            // Value is in KM, convert to meters (standard unit for KEY_ODOMETER)\n                            position.set(Position.KEY_ODOMETER, Double.parseDouble(odometerStr) * 1000.0);\n                        } catch (NumberFormatException e) {\n                            // Ignore invalid format\n                        }\n                    }\n                    break;\n                case 0x0011: // Engine Hours\n                    if (length >= 4) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    }\n                    break;\n                case 0x0014: // Engine params\n                    if (length >= 5) { // Adjusted minimum length\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                        if (buf.readerIndex() < endIndex) { // Check if optional field exists\n                           position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                        }\n                    }\n                    break;\n                case 0x0020: // Cell Towers\n                    if (length > 0) {\n                        String cellsData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        String[] cells = cellsData.split(\"\\\\+\");\n                        for (String cell : cells) {\n                            String[] values = cell.split(\"@\");\n                            try {\n                                if (values.length == 4) {\n                                    network.addCellTower(CellTower.from(\n                                            Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                            Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                                }\n                            } catch (NumberFormatException e) { /* ignore */ }\n                        }\n                    }\n                    break;\n                case 0x0021: // WiFi Access Points\n                    if (length > 0) {\n                        String wifiData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        String[] points = wifiData.split(\"\\\\+\");\n                        for (String point : points) {\n                            String[] values = point.split(\"@\");\n                            try {\n                                if (values.length == 2) {\n                                    network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                                }\n                            } catch (NumberFormatException e) { /* ignore */ }\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype, skip its data by advancing reader index\n                    // buf.skipBytes(length); // Original - less safe\n                    break; // readerIndex will be set below\n            }\n            // Ensure reader index is positioned at the end of the current subtype's data,\n            // regardless of whether it was fully parsed or skipped.\n            buf.readerIndex(endIndex);\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}