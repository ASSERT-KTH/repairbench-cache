{
    "generation": "import com.google.common.base.Preconditions;\nimport com.google.common.collect.ImmutableList;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.TemplateType;\nimport com.google.javascript.rhino.jstype.TemplateTypeMap;\nimport com.google.javascript.rhino.jstype.TemplatizedType;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n *\n * <p>This function is also responsible for inferring method template types\n * based on the call arguments and resolving class template types based on the\n * receiver type.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final TemplateTypeMap typeMap = fnType.getTemplateTypeMap();\n  final ImmutableList<TemplateType> keys = typeMap.getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types from parameters.\n  // This primarily infers method-specific template types (like K in method<K>).\n  Map<TemplateType, JSType> inferredFromParams =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Resolve template types that come from the receiver object's type.\n  // For example, if calling `instanceOfClass<string>.method()`, resolve the class's\n  // template parameter based on `instanceOfClass<string>`.\n  Map<TemplateType, JSType> resolvedFromReceiver = Collections.emptyMap();\n  Node callTargetNode = n.getFirstChild();\n  JSType receiverType = null;\n  // Safely get the type of the receiver expression (e.g., 'obj' in obj.method()).\n  if (callTargetNode.isQualifiedName() || callTargetNode.isGetElem()) {\n    Node receiverNode = callTargetNode.getFirstChild();\n    if (receiverNode != null) {\n       receiverType = getJSType(receiverNode);\n    }\n  }\n  // Note: This doesn't handle all call patterns, e.g., `super`.\n\n  if (receiverType != null) {\n    // If the receiver type is explicitly templatized (e.g., Class<string>),\n    // extract the type arguments relevant to the function's template keys.\n    if (receiverType.isTemplatizedType()) {\n      TemplatizedType templatizedReceiver = receiverType.toMaybeTemplatizedType();\n      Map<TemplateType, JSType> resolved = new HashMap<>();\n      // Iterate over the function's template keys. If a key is also defined\n      // by the receiver's type definition (matching by TemplateType object identity),\n      // use the receiver's resolved type for it.\n      for (TemplateType key : keys) {\n         if (templatizedReceiver.hasTemplateType(key)) {\n            resolved.put(key, templatizedReceiver.getTemplateType(key));\n         }\n      }\n      resolvedFromReceiver = resolved;\n    } else if (receiverType.isInstanceType()) {\n      // Handle cases like raw `new C()` where C itself is generic.\n      // The receiverType might be `C<?>` or `C`. We might need more complex matching\n      // against the constructor if necessary, but often `C<?>` is represented as a\n      // TemplatizedType resolving templates to UNKNOWN, handled above.\n    }\n  }\n\n  // Combine parameter inference and receiver resolution. Receiver resolution takes precedence\n  // for any template keys defined by the receiver's class.\n  Map<TemplateType, JSType> combined = new HashMap<>(inferredFromParams);\n  combined.putAll(resolvedFromReceiver); // Overwrite inferred with resolved from receiver.\n\n  // Replace template types in the function signature using the combined map.\n  // The standard TemplateTypeReplacer substitutes JSTypeRegistry#getNativeType(UNKNOWN_TYPE)\n  // for any template keys encountered that are *not* in the 'combined' map. It also\n  // uses the types provided in the map, even if they are UNKNOWN/?.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, combined);\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType); // Should still be a function type\n\n  // Update the type information on the AST nodes.\n  // The call target (e.g., `obj.method`) gets the specialized function type.\n  callTargetNode.setJSType(replacementFnType);\n  // The call node itself (e.g., `obj.method(...)`) gets the specialized return type.\n  n.setJSType(replacementFnType.getReturnType());\n\n  // Return value indicates if the replacer actually substituted any types.\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}