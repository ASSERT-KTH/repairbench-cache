{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    // Visit the function type using the replacer.\n    // It's possible that visiting fails or returns a type that is not a function\n    // (e.g. if inference resulted in inconsistent types).\n    JSType visitedType = fnType.visit(replacer);\n    FunctionType replacementFnType = visitedType.toMaybeFunctionType();\n\n    // If the result is not a function type, something went wrong.\n    // Avoid proceeding to prevent potential errors down the line.\n    if (replacementFnType == null) {\n      // Consider logging a warning here if appropriate.\n      return false; // Indicate that inference/replacement did not succeed.\n    }\n    // Previous code had: Preconditions.checkNotNull(replacementFnType);\n    // The check above is slightly more robust as it handles non-function types.\n\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    // Return true only if the replacer actually made changes to the type.\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}