{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    // NOTE: 'n' is the call node.\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    // The original code had the arguments swapped, passing fnType first.\n    // The correct order is the call node 'n' first, then the function type 'fnType'.\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(n, fnType);\n\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    // TODO(nicksantos): See lengthy comment above. This is interim hack\n    // to support the new type inference. This should be removed by adding\n    // clone methods to all JSTypes.\n    if (!fnType.equals(callTarget.getJSType())) {\n      callTarget.setJSType(replacementFnType);\n    }\n\n    n.setJSType(replacementFnType.getReturnType());\n\n    // TODO(nicksantos): We are not accurately reporting whether the template\n    // types changed. We should be.\n    return !inferred.isEmpty(); // Return true if any template types were inferred.\n    // This differs from the original 'replacer.madeChanges' but aligns\n    // with later versions of the code and likely reflects the intent better.\n    // Returning replacer.madeChanges would also be a valid fix if\n    // inferTemplateTypesFromParameters guarantees non-trivial inference maps.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}