{
    "generation": "    /**\n     * Create an archive input stream from an input stream, autodetecting\n     * the archive type from the first few bytes of the stream. The InputStream\n     * must support marks, like BufferedInputStream.\n     *\n     * @param in the input stream\n     * @return the archive input stream\n     * @throws ArchiveException if the archiver name is not known or the stream could not be reset\n     * @throws IllegalArgumentException if the stream is null or does not support mark\n     * @since 1.1\n     */\n    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException {\n        if (in == null) {\n            throw new IllegalArgumentException(\"Stream must not be null.\");\n        }\n\n        if (!in.markSupported()) {\n            throw new IllegalArgumentException(\"Mark is not supported.\");\n        }\n\n        final byte[] signature = new byte[12];\n        in.mark(signature.length);\n        try {\n            int signatureLength = readFully(in, signature); // Use readFully to ensure buffer is filled if possible\n            in.reset();\n            if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                return new ZipArchiveInputStream(in);\n            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                return new JarArchiveInputStream(in);\n            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n                return new ArArchiveInputStream(in);\n            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n                return new CpioArchiveInputStream(in);\n            }\n\n            // Dump needs a bigger buffer to check the signature;\n            final byte[] dumpsig = new byte[32];\n            in.mark(dumpsig.length);\n            signatureLength = readFully(in, dumpsig);\n            in.reset();\n            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n                return new DumpArchiveInputStream(in);\n            }\n\n            // Tar needs an even bigger buffer to check the signature; read the first block\n            final byte[] tarheader = new byte[512];\n            in.mark(tarheader.length);\n            signatureLength = readFully(in, tarheader);\n            in.reset();\n            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n                return new TarArchiveInputStream(in);\n            }\n            // COMPRESS-117 - improve auto-recognition\n            // COMPRESS-191 - verify the header checksum\n            if (signatureLength >= 512) {\n                TarArchiveInputStream tais = null;\n                try {\n                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                    // A non-null ArchiveEntry indicates a valid TAR header\n                    if (tais.getNextEntry() != null) {\n                        // Resets already done\n                        return new TarArchiveInputStream(in);\n                    }\n                } catch (Exception e) { // NOPMD\n                    // can generate IllegalArgumentException as well\n                    // as IOException\n                    // autodetection, simply not a TAR\n                    // ignored\n                } finally {\n                    // Avoid resource leak if tais was instantiated\n                    if (tais != null) {\n                        try {\n                            tais.close();\n                        } catch (IOException e) { // NOPMD\n                            // Close errors on ByteArrayInputStream are highly unlikely\n                            // and irrelevant to autodetection logic\n                        }\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n\n        throw new ArchiveException(\"No Archiver found for the stream signature\");\n    }\n\n    /**\n     * Reads the requested number of bytes from the stream or until\n     * end of stream.<br/>\n     * Note: this is simplified from IOUtils.readFully as we don't need EOF checks\n     *\n     * @param in The stream to read from\n     * @param b The buffer to store data in\n     * @return The number of bytes read\n     * @throws IOException If an I/O error occurs\n     */\n    private int readFully(InputStream in, byte[] b) throws IOException {\n        int len = b.length;\n        int off = 0;\n        int read;\n        while (off < len && (read = in.read(b, off, len - off)) != -1) {\n            off += read;\n        }\n        return off;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}