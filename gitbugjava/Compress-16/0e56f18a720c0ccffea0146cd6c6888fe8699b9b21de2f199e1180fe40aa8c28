{
    "generation": "    /**\n     * Create an archive input stream from an input stream, autodetecting\n     * the archive type from the first few bytes of the stream. The InputStream\n     * must support marks, like BufferedInputStream.\n     *\n     * @param in the input stream\n     * @return the archive input stream\n     * @throws ArchiveException if the archiver name is not known\n     * @throws IllegalArgumentException if the stream is null or does not support mark\n     */\n    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException {\n        if (in == null) {\n            throw new IllegalArgumentException(\"Stream must not be null.\");\n        }\n\n        if (!in.markSupported()) {\n            throw new IllegalArgumentException(\"Mark is not supported.\");\n        }\n\n        // Buffer for the short signatures\n        final byte[] signature = new byte[12];\n        in.mark(signature.length); // Mark for the first 12 bytes\n        try {\n            int signatureLength = in.read(signature); // Attempt to read 12 bytes\n            in.reset(); // Reset back to the start\n\n            // Check formats using the first 12 bytes\n            if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                return new ZipArchiveInputStream(in);\n            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                // Note: JAR detection might need more bytes/logic if ZipArchiveInputStream.matches is too general\n                return new JarArchiveInputStream(in);\n            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n                return new ArArchiveInputStream(in);\n            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n                return new CpioArchiveInputStream(in);\n            }\n\n            // Dump needs a bigger buffer (32 bytes)\n            final byte[] dumpsig = new byte[32];\n            in.mark(dumpsig.length); // Mark for 32 bytes\n            signatureLength = in.read(dumpsig);\n            in.reset(); // Reset back to the start\n            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n                return new DumpArchiveInputStream(in);\n            }\n\n            // Tar needs an even bigger buffer (512 bytes)\n            final byte[] tarheader = new byte[512];\n            in.mark(tarheader.length); // Mark for 512 bytes\n            signatureLength = in.read(tarheader);\n            in.reset(); // Reset back to the start\n            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n                return new TarArchiveInputStream(in);\n            }\n\n            // The following code block caused COMPRESS-191 - identifying AIFF files as TAR archives\n            // It was attempting to validate the TAR header including checksum by reading the first entry\n            // However, this proved unreliable and led to false positives.\n            // It is removed in favour of relying solely on TarArchiveInputStream.matches().\n            /*\n            // COMPRESS-117 - improve auto-recognition\n            if (signatureLength >= 512) {\n                try {\n                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                    // COMPRESS-191 - verify the header checksum\n                    tais.getNextEntry();\n                        return new TarArchiveInputStream(in);\n                } catch (Exception e) { // NOPMD\n                    // can generate IllegalArgumentException as well\n                    // as IOException\n                    // autodetection, simply not a TAR\n                    // ignored\n                }\n            }\n            */\n        } catch (IOException e) {\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n\n        // If no format matched\n        throw new ArchiveException(\"No Archiver found for the stream signature\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}