{
    "generation": "import org.apache.commons.math3.util.FastMath;\n\n// Note: This code snippet assumes the context of a class providing methods like\n// getSize(), multiply(), add(), subtract(), divide(), rootN(), atan()\n// which operate on arrays representing derivative structures.\n\n    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r^2 = x^2+y^2\n        double[] tmp1 = new double[getSize()]; // Will store x^2, then r^2 = x^2+y^2, then r\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()]; // Will store y^2, then intermediate results\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp1, 0);                 // r^2 = x^2 + y^2\n\n        // Check if r is zero (i.e., x = 0 and y = 0, considering only the values)\n        // This handles the special cases atan2(\u00b10, \u00b10) correctly.\n        if (tmp1[0] == 0.0) {\n            // Handle atan2(\u00b10, \u00b10) cases\n            // The value is computed using FastMath.atan2 to handle signs of zero correctly.\n            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n            // All derivatives are zero in this case\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            // Return early as the result is fully determined.\n            return;\n        }\n\n        // r = sqrt(r^2) = sqrt(x^2 + y^2)\n        // tmp1 now holds r\n        rootN(tmp1, 0, 2, tmp1, 0);\n\n        // Get the value of x and y for branching and sign checks\n        final double x0 = x[xOffset];\n        final double y0 = y[yOffset];\n\n        // Use tmp2 for intermediate calculations\n        if (x0 >= 0) {\n\n            // compute atan2(y, x) = 2 * atan(y / (r + x))\n            // This formula is stable for x >= 0 and r != 0.\n            // tmp2 = r + x (denominator is safe as r > 0 and x >= 0 implies r + x >= r > 0)\n            add(tmp1, 0, x, xOffset, tmp2, 0);\n            // tmp1 = y / (r + x)\n            divide(y, yOffset, tmp2, 0, tmp1, 0);\n            // tmp2 = atan(y / (r + x))\n            atan(tmp1, 0, tmp2, 0);\n            // result = 2 * atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i];\n            }\n\n        } else {\n\n            // compute atan2(y, x) = sign(y) * pi - 2 * atan(y / (r - x))\n            // This formula is stable for x < 0 and r != 0.\n            // tmp2 = r - x (denominator is safe as r > 0 and x < 0 implies r - x > r > 0)\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);\n            // tmp1 = y / (r - x)\n            divide(y, yOffset, tmp2, 0, tmp1, 0);\n            // tmp2 = atan(y / (r - x))\n            atan(tmp1, 0, tmp2, 0);\n\n            // Determine the sign for pi based on y's sign.\n            // Use FastMath.copySign to distinguish +0.0 and -0.0.\n            // If y0 is negative (including -0.0), pi should be -PI.\n            // Otherwise (y0 positive or +0.0), pi should be +PI.\n            final double pi = (FastMath.copySign(1.0, y0) < 0) ? -FastMath.PI : FastMath.PI;\n\n            // result[0] = pi - 2 * atan(y / (r - x))[0]\n            result[resultOffset] = pi - 2 * tmp2[0];\n            // result[i] = -2 * atan(y / (r - x))[i] for i > 0 (derivative part)\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i];\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}