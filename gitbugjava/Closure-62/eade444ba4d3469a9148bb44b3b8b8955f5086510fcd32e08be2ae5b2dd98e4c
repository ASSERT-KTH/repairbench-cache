{
    "generation": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExcerpt.length() means something is missing\n      // at the end of the line (or the error is pointing after the last char)\n      if (excerpt.equals(LINE)\n          && 0 <= charno && charno <= sourceExcerpt.length()) { // FIXED: Changed < to <=\n        for (int i = 0; i < charno; i++) {\n          // Prevent index out of bounds if the loop runs an extra iteration\n          // due to the fix (when charno == sourceExcerpt.length()).\n          // However, the loop condition i < charno already ensures i only goes\n          // up to charno-1, which is sourceExcerpt.length()-1 in the edge case.\n          // So, accessing sourceExcerpt.charAt(i) is safe.\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}