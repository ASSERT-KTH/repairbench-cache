{
    "generation": "    private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n        position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n        int battery = buf.readUnsignedByte();\n        if (battery <= 100) {\n            position.set(Position.KEY_BATTERY_LEVEL, battery);\n        } else if (battery == 0xAA) {\n            position.set(Position.KEY_CHARGE, true);\n        }\n        position.setNetwork(new Network(CellTower.fromCidLac(\n                getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n        int product = buf.readUnsignedByte();\n        int status = buf.readUnsignedShort();\n        int alarm = buf.readUnsignedShort();\n        if (product == 1 || product == 2) {\n            if (BitUtil.check(alarm, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n        } else if (product == 3) {\n            position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n            if (BitUtil.check(alarm, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n            if (BitUtil.check(alarm, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            }\n            if (BitUtil.check(alarm, 3)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n            }\n        }\n        position.set(Position.KEY_STATUS, status);\n        while (buf.readableBytes() > 2) {\n            int id = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setAltitude(buf.readShort());\n                    break;\n                case 0x0C:\n                    position.set(Position.KEY_HEADING, buf.readUnsignedShort());\n                    break;\n                case 0x0D:\n                    position.set(Position.KEY_SPEED, buf.readUnsignedShort());\n                    break;\n                case 0x0E:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n                    break;\n                case 0x0F:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0x10:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x11:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x12:\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte());\n                    break;\n                case 0x13:\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte());\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte());\n                    break;\n                case 0x16:\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte());\n                    break;\n                case 0x17:\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte());\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}