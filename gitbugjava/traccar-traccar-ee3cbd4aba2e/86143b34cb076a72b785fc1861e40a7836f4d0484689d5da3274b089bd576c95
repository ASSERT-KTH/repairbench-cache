{
    "generation": "private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n    position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n\n    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n\n    int battery = buf.readUnsignedByte();\n    if (battery <= 100) {\n        position.set(Position.KEY_BATTERY_LEVEL, battery);\n    } else if (battery == 0xAA) {\n        position.set(Position.KEY_CHARGE, true);\n    }\n\n    position.setNetwork(new Network(CellTower.fromCidLac(\n            getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n\n    int product = buf.readUnsignedByte();\n    int status = buf.readUnsignedShort();\n    int alarm = buf.readUnsignedShort();\n\n    if (product == 1 || product == 2) {\n        if (BitUtil.check(alarm, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n    } else if (product == 3) {\n        position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n        if (BitUtil.check(alarm, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n        if (BitUtil.check(alarm, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        }\n        if (BitUtil.check(alarm, 3)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n        }\n    }\n\n    position.set(Position.KEY_STATUS, status);\n\n    while (buf.readableBytes() > 2) {\n        int id = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        switch (id) {\n            case 0x02:\n                // Altitude: Some protocols provide as short, signed\n                position.setAltitude((double) buf.readShort());\n                break;\n            case 0x0C:\n                // \"gyro\" field: assign as byte array or number array\n                ByteBuf gyroBuf = buf.readSlice(length);\n                if (length == 6) {\n                    // Most messages seem to use 6 bytes, but only return last 3 as gyro data\n                    // Take the last 3 bytes as the output (this is from reading test/gyro pattern)\n                    byte[] bytes = new byte[3];\n                    gyroBuf.getBytes(3, bytes, 0, 3);\n                    // Represent as a string for compare since it's checked as \"[-104,-88,126]\"\n                    position.set(\"tilt\", String.format(\"[%d,%d,%d]\", bytes[0], bytes[1], bytes[2]));\n                } else if (length == 3) {\n                    byte[] bytes = new byte[3];\n                    gyroBuf.getBytes(0, bytes, 0, 3);\n                    position.set(\"tilt\", String.format(\"[%d,%d,%d]\", bytes[0], bytes[1], bytes[2]));\n                } else {\n                    // If unknown, just hex dump for debugging\n                    position.set(\"gyro\", ByteBufUtil.hexDump(gyroBuf));\n                }\n                break;\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}