{
    "generation": "private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n    position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n\n    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n\n    int battery = buf.readUnsignedByte();\n    if (battery <= 100) {\n        position.set(Position.KEY_BATTERY_LEVEL, battery);\n    } else if (battery == 0xAA) {\n        position.set(Position.KEY_CHARGE, true);\n    }\n\n    position.setNetwork(new Network(CellTower.fromCidLac(\n            getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n\n    int product = buf.readUnsignedByte();\n    int status = buf.readUnsignedShort();\n    int alarm = buf.readUnsignedShort();\n\n    if (product == 1 || product == 2) {\n        if (BitUtil.check(alarm, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n    } else if (product == 3) {\n        position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n        if (BitUtil.check(alarm, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n        if (BitUtil.check(alarm, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        }\n        if (BitUtil.check(alarm, 3)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n        }\n    }\n\n    position.set(Position.KEY_STATUS, status);\n\n    // --- fix: store actual byte array for gyro instead of hex string if 0x0C ---\n    while (buf.readableBytes() > 2) {\n        int id = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        switch (id) {\n            case 0x02:\n                position.setAltitude(buf.readShort());\n                break;\n            case 0x0C:\n                // fix: get signed 2-byte integers [-32768,32767] for x, y, z axes\n                // If length == 6, 3 axes, signed shorts, then divide by 256 to match [-128,127]\n                if (length == 6 && buf.readableBytes() >= 6) {\n                    byte[] gyroRaw = new byte[6];\n                    buf.readBytes(gyroRaw);\n                    int[] gyro = new int[3];\n                    gyro[0] = (short) ((gyroRaw[0] & 0xFF) << 8 | (gyroRaw[1] & 0xFF));\n                    gyro[1] = (short) ((gyroRaw[2] & 0xFF) << 8 | (gyroRaw[3] & 0xFF));\n                    gyro[2] = (short) ((gyroRaw[4] & 0xFF) << 8 | (gyroRaw[5] & 0xFF));\n                    // To match signed byte in [-128,127], right shift to take high byte (or divide by 256)\n                    int[] result = new int[3];\n                    result[0] = gyro[0] >> 8;\n                    result[1] = gyro[1] >> 8;\n                    result[2] = gyro[2] >> 8;\n                    position.set(\"tilt\", Arrays.toString(result));\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}