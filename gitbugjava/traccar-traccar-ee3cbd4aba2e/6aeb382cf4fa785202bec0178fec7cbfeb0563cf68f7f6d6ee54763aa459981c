{
    "generation": "private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n    position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n\n    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n\n    int battery = buf.readUnsignedByte();\n    if (battery <= 100) {\n        position.set(Position.KEY_BATTERY_LEVEL, battery);\n    } else if (battery == 0xAA) {\n        position.set(Position.KEY_CHARGE, true);\n    }\n\n    position.setNetwork(new Network(CellTower.fromCidLac(\n            getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n\n    int product = buf.readUnsignedByte();\n    int status = buf.readUnsignedShort();\n    int alarm = buf.readUnsignedShort();\n\n    if (product == 1 || product == 2) {\n        if (BitUtil.check(alarm, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n    } else if (product == 3) {\n        position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n        if (BitUtil.check(alarm, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n        if (BitUtil.check(alarm, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        }\n        if (BitUtil.check(alarm, 3)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n        }\n    }\n\n    position.set(Position.KEY_STATUS, status);\n\n    while (buf.readableBytes() >= 2) {  // Bug fix: allow to process sub-packet with 0-length\n        int id = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n\n        // Defensive: check if length is not more than available bytes or zero\n        if (length > buf.readableBytes()) {\n            // not enough bytes, ignore rest\n            break;\n        }\n\n        switch (id) {\n            case 0x02:\n                if (length == 2) {\n                    position.setAltitude(buf.readShort());\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            case 0x0C:\n                // For \"gyro\" value, keep the original length check. Older code assumed 6 always, but length may vary.\n                if (length == 6) {\n                    position.set(\"gyro\", ByteBufUtil.hexDump(buf.readSlice(6)));\n                } else {\n                    // Accept variable length (some devices send 3 or other), store as byte array if possible\n                    if (length > 0) {\n                        byte[] gyroBytes = new byte[length];\n                        buf.readBytes(gyroBytes);\n                        // Store as array of signed integers for compatibility with test expectations\n                        List<Integer> gyroList = new ArrayList<>();\n                        for (byte b : gyroBytes) {\n                            gyroList.add((int) b); // sign extend\n                        }\n                        position.set(\"tilt\", gyroList); // KEY to match test expectations\n                    }\n                }\n                break;\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}