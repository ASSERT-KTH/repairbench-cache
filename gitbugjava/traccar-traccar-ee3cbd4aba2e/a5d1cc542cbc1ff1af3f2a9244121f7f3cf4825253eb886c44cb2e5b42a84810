{
    "generation": "private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n    position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n\n    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n\n    int battery = buf.readUnsignedByte();\n    if (battery <= 100) {\n        position.set(Position.KEY_BATTERY_LEVEL, battery);\n    } else if (battery == 0xAA) {\n        position.set(Position.KEY_CHARGE, true);\n    }\n\n    position.setNetwork(new Network(CellTower.fromCidLac(\n            getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n\n    int product = buf.readUnsignedByte();\n    int status = buf.readUnsignedShort();\n    int alarm = buf.readUnsignedShort();\n\n    if (product == 1 || product == 2) {\n        if (BitUtil.check(alarm, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n    } else if (product == 3) {\n        position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n        if (BitUtil.check(alarm, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n        if (BitUtil.check(alarm, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        }\n        if (BitUtil.check(alarm, 3)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n        }\n    }\n\n    position.set(Position.KEY_STATUS, status);\n\n    // fix: avoid reading/splitting when not enough data\n    while (buf.readableBytes() > 2) {\n        int id = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        if (buf.readableBytes() < length) {\n            buf.skipBytes(buf.readableBytes());\n            break;\n        }\n        switch (id) {\n            case 0x02:\n                if (length >= 2) {\n                    position.setAltitude(buf.readShort());\n                    if (length > 2) {\n                        buf.skipBytes(length - 2);\n                    }\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            case 0x0C:\n                if (length == 6) {\n                    // fix: store \"gyro\" attribute as signed 3 bytes array\n                    byte[] gyroBytes = new byte[6];\n                    buf.readBytes(gyroBytes);\n                    int[] gyro = new int[3];\n                    gyro[0] = (short) ((gyroBytes[0] & 0xFF) << 8 | (gyroBytes[1] & 0xFF));\n                    gyro[1] = (short) ((gyroBytes[2] & 0xFF) << 8 | (gyroBytes[3] & 0xFF));\n                    gyro[2] = (short) ((gyroBytes[4] & 0xFF) << 8 | (gyroBytes[5] & 0xFF));\n                    position.set(\"gyro\", \"[\" + gyro[0] + \",\" + gyro[1] + \",\" + gyro[2] + \"]\");\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}