{
    "generation": "    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n        int newLen;\n\n        // Let's grow by 50% by default\n        // but above intended maximum, slow to increase by 25% (comment appears outdated)\n        // Also: if we are at the max, grow just by one\n\n        if (len == MAX_SEGMENT_LEN) {\n            // Special case: can grow by one past MAX\n            newLen = MAX_SEGMENT_LEN + 1;\n        } else if (len > MAX_SEGMENT_LEN) {\n            // Already exceeded max: append tiny bit (1 char), don't overflow growth calculation\n            // This prevents shrinking observed in the bug.\n            newLen = len + 1;\n        } else {\n            // Otherwise, grow by 50%, but capped at MAX_SEGMENT_LEN\n            newLen = len + (len >> 1);\n            if (newLen > MAX_SEGMENT_LEN) {\n                 newLen = MAX_SEGMENT_LEN;\n            }\n            // Also must ensure we grow by at least one (handles len=0, len=1 cases)\n            if (newLen == len) {\n                 newLen = len + 1;\n            }\n        }\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}