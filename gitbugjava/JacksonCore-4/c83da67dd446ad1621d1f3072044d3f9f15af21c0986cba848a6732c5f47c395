{
    "generation": "    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n\n        // Determine new length using strategy based on current length\n        int newLen;\n        if (len == 0) {\n            // Segment length 0 is possible if buffer is initialized, but not used;\n            // unlikely path, but just in case let's grow by minimum possible, 1\n             newLen = 1;\n        } else if (len < MAX_SEGMENT_LEN) {\n            // Below max, grow by 50%, but cap at MAX_SEGMENT_LEN\n            newLen = len + (len >> 1);\n            // Check for potential overflow:\n            if (newLen < 0) {\n                 throw new IllegalStateException(\"Maximum Java array size (\"+Integer.MAX_VALUE+\") exceeded by `TextBuffer` expansion request\");\n            }\n            // Ensure it does not exceed max segment length\n            if (newLen > MAX_SEGMENT_LEN) {\n                newLen = MAX_SEGMENT_LEN;\n            }\n        } else if (len == MAX_SEGMENT_LEN) {\n            // Exactly at max, grow by just 1\n            newLen = MAX_SEGMENT_LEN + 1;\n             // Check for potential overflow (if MAX_SEGMENT_LEN = Integer.MAX_VALUE)\n             if (newLen < 0) {\n                  throw new IllegalStateException(\"Maximum Java array size (\"+Integer.MAX_VALUE+\") exceeded by `TextBuffer` expansion request\");\n             }\n        } else { // len > MAX_SEGMENT_LEN\n            // Already above max, grow by 25% (slower growth)\n            newLen = len + (len >> 2);\n            // Check for potential overflow:\n            if (newLen < 0) {\n                 throw new IllegalStateException(\"Maximum Java array size (\"+Integer.MAX_VALUE+\") exceeded by `TextBuffer` expansion request\");\n            }\n        }\n\n        // Sanity check: Must grow, minimum growth is by one\n        // (handles cases like len=1 where len>>1 is 0)\n        if (newLen <= len) {\n            newLen = len + 1;\n            // Check for overflow one last time\n             if (newLen < 0) {\n                  throw new IllegalStateException(\"Maximum Java array size (\"+Integer.MAX_VALUE+\") exceeded by `TextBuffer` expansion request\");\n             }\n        }\n\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}