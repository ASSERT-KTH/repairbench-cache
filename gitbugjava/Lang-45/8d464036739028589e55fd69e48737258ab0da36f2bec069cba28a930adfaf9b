{
    "generation": "    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit; negative value is treated as 0.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // Adjust lower bound\n        if (lower < 0) {\n            lower = 0;\n        }\n        // If lower is greater than length, we logically can't find a space >= lower.\n        // Clamp lower to length for consistency in subsequent logic and safety.\n        if (lower > str.length()) {\n            lower = str.length();\n        }\n\n        // Adjust upper bound based on length and -1\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n\n        // Adjust upper bound based on lower bound (\"if upper is less than lower, raise it to lower\")\n        if (upper < lower) {\n            // After this, it might be possible that upper > str.length() if lower was initially > str.length().\n            // However, lower has already been clamped to str.length().\n            // So, this correctly sets upper = lower, and we know lower <= str.length().\n            upper = lower;\n        }\n        // At this point: 0 <= lower <= upper <= str.length() is guaranteed.\n\n        StringBuffer result = new StringBuffer();\n        \n        // Now perform the abbreviation logic based on adjusted bounds\n        if (lower >= str.length()) { \n            // If lower is at or beyond the end, no space can be found >= lower.\n            // The result is determined entirely by 'upper'. Append substring up to 'upper'.\n            // Since 'upper' is clamped to str.length(), this is safe.\n            // Also handles the case lower == upper == str.length(), returning the full string.\n            result.append(str.substring(0, upper));\n            // Append suffix only if 'upper' caused truncation (i.e., upper < full string length).\n            if (upper < str.length()) {\n                 result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else {\n             // Search for the first space starting from 'lower'.\n             // Since lower < str.length(), the search starts within the string bounds.\n             int index = StringUtils.indexOf(str, \" \", lower);\n\n             if (index != -1 && index <= upper) {\n                 // Found a space within the [lower, upper] bounds. Abbreviate at the space.\n                 result.append(str.substring(0, index));\n                 // Append the suffix because abbreviation occurred at the space.\n                 result.append(StringUtils.defaultString(appendToEnd));\n             } else {\n                 // Either no space was found (index == -1), or the first space is beyond 'upper'.\n                 // In both cases, abbreviate forcibly at 'upper'.\n                 result.append(str.substring(0, upper));\n                 // Append suffix only if 'upper' caused truncation.\n                 if (upper < str.length()) { \n                     result.append(StringUtils.defaultString(appendToEnd));\n                 }\n             }\n        }\n        \n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}