{
    "generation": "    /**\n     * Defines a typed variable. The defining node will be annotated with the\n     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is\n     * inferred.\n     *\n     * Slots may be any variable or any qualified name in the global scope.\n     *\n     * @param n the defining NAME or GETPROP node.\n     * @param parent the {@code n}'s parent.\n     * @param type the variable's type. It may be {@code null} if\n     *     {@code inferred} is {@code true}.\n     */\n    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualfied names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n\n      // Determine the scope to declare the variable in.\n      Scope scopeToDeclareIn = scope; // Default to the current scope.\n\n      // If n is a property (e.g., ns.foo), we want to declare it in the scope\n      // where the root object (e.g., ns) is defined. This allows qualified names\n      // defined in local scopes (like IIFEs) to be properly associated with\n      // the scope of their root object (often the global scope).\n      if (n.getType() == Token.GETPROP) {\n        Node root = n;\n        while (root.isGetProp()) {\n          root = root.getFirstChild();\n        }\n\n        // We only handle qualified names where the root is a NAME.\n        // Other roots like THIS or function calls aren't handled here.\n        if (root.isName()) {\n          String rootVarName = root.getString();\n          // Find the variable in the current scope or its ancestors.\n          Var rootVar = scope.getVar(rootVarName);\n          if (rootVar != null && rootVar.getScope() != null) {\n            // Declare the qualified name (e.g., \"ns.foo\") in the same scope\n            // where the root variable (e.g., \"ns\") was declared.\n            scopeToDeclareIn = rootVar.getScope();\n          }\n          // If rootVar is not found, it might be an undeclared var error,\n          // or potentially a property on the global 'window' object not explicitly declared.\n          // In such cases, falling back to the current scope (original behavior)\n          // or potentially the global scope might be considered. For now, we use\n          // the root var's scope if found, otherwise the current scope. This matches\n          // the behavior for the test cases.\n        }\n      }\n\n      // Check if the variable is already declared in the chosen scope.\n      // Use isDeclared(..., false) to check only the specific scope, not ancestors.\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        // If it is already declared, check for potential redeclaration issues.\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        // If not declared in the target scope, proceed with the declaration.\n        if (!inferred) {\n          // Set the type if it's explicitly provided (not inferred).\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        // Declare the variable in the determined scope.\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        // Additional handling for global variables and properties on global 'this'.\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          // Define the property on the global 'this' object type.\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                // If type is null during inference, use NO_TYPE\n                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're declaring a constructor or interface in the global scope,\n        // also declare its prototype property. This check should use scopeToDeclareIn\n        // as the variable might be a qualified name declared globally from a local scope.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            // Declare \"FunctionName.prototype\" in the global scope.\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype, and it's not Object */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}