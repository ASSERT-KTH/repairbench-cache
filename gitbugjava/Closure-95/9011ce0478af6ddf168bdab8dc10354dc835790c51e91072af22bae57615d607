{
    "generation": "    /**\n     * Defines a typed variable. The defining node will be annotated with the\n     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is\n     * inferred.\n     *\n     * Slots may be any variable or any qualified name in the global scope.\n     *\n     * @param n the defining NAME or GETPROP node.\n     * @param parent the {@code n}'s parent.\n     * @param type the variable's type. It may be {@code null} if\n     *     {@code inferred} is {@code true}.\n     */\n    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualfied names.\n      boolean isName = n.getType() == Token.NAME;\n      boolean isGetProp = n.getType() == Token.GETPROP;\n      if (isName) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n      } else {\n        Preconditions.checkArgument(\n            isGetProp &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n      if (isGetProp) {\n          String rootName = NodeUtil.getRootOfQualifiedName(n);\n          if (!rootName.isEmpty()) {\n              Var rootVar = scope.getVar(rootName); // Find the scope of the first name (e.g., 'a' in a.b.c)\n              if (rootVar != null) {\n                  scopeToDeclareIn = rootVar.getScope();\n              } else {\n                  // Root not defined locally. Assume global.\n                  if (!scope.isGlobal()) {\n                     scopeToDeclareIn = scope.getGlobalScope();\n                  } // else, already global (scopeToDeclareIn remains 'scope')\n              }\n          }\n          // If rootName is empty (e.g. this.prop or (expr).prop), declare in the current scope.\n          // This is the default because scopeToDeclareIn was initialized to 'scope'.\n      }\n\n      // Handle externs: externs always go in the global scope.\n      CompilerInput input = compiler.getInput(sourceName);\n      boolean isExtern = input.isExtern();\n      if (isExtern && !scopeToDeclareIn.isGlobal()) {\n          scopeToDeclareIn = scope.getGlobalScope();\n      }\n\n      // Check for redeclaration in the *target* scope.\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n\n        // Declare the variable ('x' or 'a.b.c') in the determined scope.\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        // Define properties on the global this object, BUT only for simple names (NAME)\n        // declared globally.\n        if (isName && scopeToDeclareIn.isGlobal()) {\n             boolean isFunction = parent.getType() == Token.FUNCTION;\n             boolean isVar = parent.getType() == Token.VAR;\n             // Catch clauses are handled differently. A NAME in a catch clause\n             // isn't a global property, even if the catch is in global scope.\n             if ((isFunction || isVar)) {\n                ObjectType globalThis =\n                    typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n                if (inferred) {\n                  globalThis.defineInferredProperty(variableName,\n                      type == null ?\n                          getNativeType(JSTypeNative.NO_TYPE) :\n                          type,\n                      isExtern);\n                } else {\n                  globalThis.defineDeclaredProperty(variableName, type, isExtern);\n                }\n             }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain, but only for NAMEs.\n        if (scopeToDeclareIn.isGlobal() && isName && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), input,\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}