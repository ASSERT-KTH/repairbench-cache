{
    "generation": "    /**\n     * Defines a typed variable. The defining node will be annotated with the\n     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is\n     * inferred.\n     *\n     * Slots may be any variable or any qualified name in the global scope.\n     *\n     * @param n the defining NAME or GETPROP node.\n     * @param parent the {@code n}'s parent.\n     * @param type the variable's type. It may be {@code null} if\n     *     {@code inferred} is {@code true}.\n     */\n    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualfied names.\n      boolean isGlobalDeclaration = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n        isGlobalDeclaration = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n      boolean isQualifiedNameRootedGlobal = false;\n\n      if (n.getType() == Token.GETPROP) {\n        Node rootNode = NodeUtil.getRootOfQualifiedName(n);\n        if (rootNode.getType() == Token.NAME) {\n          String rootName = rootNode.getString();\n          // This should lookup in the current scope chain.\n          Var rootVar = scope.getVar(rootName);\n          // If the root is declared in the global scope, declare the property\n          // in the global scope.\n          if (rootVar != null && rootVar.isGlobal()) {\n             // Make sure the rootVar is defined in the global scope before\n             // trying to declare the property in the global scope.\n             if (rootVar.getScope().isGlobal()) {\n                scopeToDeclareIn = rootVar.getScope();\n                isQualifiedNameRootedGlobal = true;\n             }\n          }\n        }\n      }\n\n      // A definition implies assignment or declaration, so it should affect the global 'this'\n      // object type if either the variable name itself is global (var x = ...) or if it's\n      // a property access whose root object is global (ns.foo = ...).\n      boolean shouldDeclareOnGlobalThis = isGlobalDeclaration || isQualifiedNameRootedGlobal;\n\n      // Check for redeclaration in the chosen scope.\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        // If the type is null, use UNKNOWN_TYPE for the declaration.\n        // This can happen if inferred is true.\n        JSType declaredType = type;\n        if (declaredType == null) {\n          declaredType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n\n        if (!inferred) {\n          setDeferredType(n, declaredType);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, declaredType, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          // Use the declaredType (which handles the null case) when defining\n          // on the global this object.\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName, declaredType, isExtern);\n          } else {\n            // If !inferred, type was non-null initially, so declaredType == type.\n            globalThis.defineDeclaredProperty(variableName, declaredType, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain. Use the original 'type' here, because\n        // functions have prototypes, but UNKNOWN_TYPE doesn't.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}