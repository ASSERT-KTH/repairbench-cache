{
    "generation": "    /** Factor used for splitting double numbers: {@value}. */\n    private static final double SPLIT_FACTOR = 134217729.0d; // 2^27 + 1\n\n    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws org.apache.commons.math3.exception.DimensionMismatchException {\n        final int len = a.length;\n        if (len != b.length) {\n            throw new org.apache.commons.math3.exception.DimensionMismatchException(len, b.length);\n        }\n\n        if (len == 0) {\n            return 0.0;\n        }\n\n        final double[] prodHigh = new double[len];\n        double prodLowSum = 0;\n\n        // Compute products ai * bi accurately, splitting into high and low parts\n        for (int i = 0; i < len; i++) {\n            final double ai = a[i];\n            final double bi = b[i];\n\n            // Split ai, bi into high/low parts using Dekker's method\n            final double ca = SPLIT_FACTOR * ai;\n            final double aHigh = ca - (ca - ai);\n            final double aLow = ai - aHigh;\n\n            final double cb = SPLIT_FACTOR * bi;\n            final double bHigh = cb - (cb - bi);\n            final double bLow = bi - bHigh;\n\n            // Calculate high part of product\n            prodHigh[i] = ai * bi;\n\n            // Calculate low part of product using Dekker's multiplication algorithm\n            // prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)\n            final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n            prodLowSum += prodLow; // Accumulate low parts of products\n        }\n\n\n        // Sum the high parts of the products accurately using AccurateSum algorithm (Algorithm 4 from the paper)\n        double s = prodHigh[0]; // Initialize sum with the first product's high part\n        double c = 0.0;         // Initialize compensation term (low part of sum)\n\n        // Loop producesesk = s + p_i and error term e_i = error(s + p_i)\n        // s = sk + (c + e_i) where sk is the high part of sum and (c+e_i) is the low part\n        for (int i = 1; i < len; i++) {\n            final double pi = prodHigh[i]; // Current product's high part to add\n\n            // Apply TwoSum algorithm: (t, e) = TwoSum(s, pi)\n            final double t = s + pi;    // High part of sum s + pi\n            // Calculate error e = (s - (t - (t - s))) + (pi - (t - s))\n            // More robustly: e = (s - (t - bb)) + (pi - bb) where bb = t - s\n            final double bb = t - s;\n            final double e = (s - (t - bb)) + (pi - bb);\n\n            s = t;     // Update sum's high part\n            c = c + e; // Update sum's low part (compensation) by adding the error\n        }\n\n        // The final result is the high part of the sum (s) plus the low part of the sum (c)\n        // plus the sum of the low parts of the products (prodLowSum).\n        // Add low parts using simple floating point addition.\n        double result = s + (c + prodLowSum);\n\n        if (Double.isNaN(result)) {\n            // either we have split infinite numbers or some coefficients were NaNs,\n            // just rely on the naive implementation and let IEEE754 handle this\n            result = 0;\n            for (int i = 0; i < len; ++i) {\n                result += a[i] * b[i];\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}