{
    "generation": "    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException {\n        final int len = a.length;\n        if (len != b.length) {\n            throw new DimensionMismatchException(len, b.length);\n        }\n\n        // Handle special cases for empty or single-element arrays\n        if (len == 0) {\n            return 0.0;\n        }\n        if (len == 1) {\n            // Return the standard multiplication result for single element case.\n            // This avoids ArrayIndicesOutOfBoundsException in the subsequent summation logic\n            // and matches the expectation of the unit test for len = 1.\n            return a[0] * b[0];\n        }\n\n        // Arrays have length >= 2, proceed with high-accuracy algorithm.\n\n        final double[] prodHigh = new double[len];\n        double prodLowSum = 0;\n\n        // Calculate high and low parts of each product a_i * b_i\n        for (int i = 0; i < len; i++) {\n            final double ai = a[i];\n            // Split a[i] into high/low parts using Dekker's method\n            final double ca = SPLIT_FACTOR * ai;\n            final double aHigh = ca - (ca - ai);\n            final double aLow = ai - aHigh;\n\n            final double bi = b[i];\n            // Split b[i] into high/low parts using Dekker's method\n            final double cb = SPLIT_FACTOR * bi;\n            final double bHigh = cb - (cb - bi);\n            final double bLow = bi - bHigh;\n\n            // Calculate high part of product (standard result)\n            prodHigh[i] = ai * bi;\n            // Calculate low part (error) of product using Dekker's algorithm variant\n            final double prodLow = aLow * bLow - (((prodHigh[i] -\n                                                    aHigh * bHigh) -\n                                                   aLow * bHigh) -\n                                                  aHigh * bLow);\n            // Accumulate the low parts of the products\n            prodLowSum += prodLow;\n        }\n\n\n        // Sum the high parts of the products (prodHigh) accurately using\n        // a compensated summation algorithm (similar to Kahan/Neumaier sum).\n        // Initialize the sum with the first two elements. Access prodHigh[1] is safe as len >= 2.\n        final double prodHighCur = prodHigh[0];\n        double prodHighNext = prodHigh[1];\n        double sHighPrev = prodHighCur + prodHighNext; // High part of sum of first two elements\n        double sPrime = sHighPrev - prodHighNext;\n        // Low part (error/compensation) of sum of first two elements\n        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n\n        // Add remaining prodHigh elements to the sum accurately\n        final int lenMinusOne = len - 1;\n        for (int i = 1; i < lenMinusOne; i++) { // Loop runs only for len >= 3\n            prodHighNext = prodHigh[i + 1];\n            final double sHighCur = sHighPrev + prodHighNext; // Add next element to high part of sum\n            sPrime = sHighCur - prodHighNext;\n            // Accumulate low part (error/compensation) for the summation\n            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n            sHighPrev = sHighCur; // Update high part of sum\n        }\n\n        // Final result is the high part of the sum + accumulated low parts (product errors + summation errors)\n        double result = sHighPrev + (prodLowSum + sLowSum);\n\n        if (Double.isNaN(result)) {\n            // If the high-accuracy result is NaN (e.g., due to splitting infinity, or input NaNs),\n            // fall back to the naive (standard) summation. This handles cases not naturally covered\n            // by standard IEEE754 arithmetic for the naive sum.\n            result = 0;\n            for (int i = 0; i < len; ++i) {\n                result += a[i] * b[i];\n            }\n        }\n\n        return result;\n    }\n\n    // Assume SPLIT_FACTOR is defined elsewhere in the class or file, e.g.:\n    /** Factor used for splitting double numbers: 2^27 + 1. */\n    private static final double SPLIT_FACTOR = 134217729.0d;\n\n    // Assume DimensionMismatchException is defined and imported, e.g.:\n    // import org.apache.commons.math3.exception.DimensionMismatchException;\n    // Definition for context:\n    public static class DimensionMismatchException extends RuntimeException {\n         public DimensionMismatchException(int len1, int len2) {\n             super(\"Dimension mismatch: \" + len1 + \" != \" + len2);\n         }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}