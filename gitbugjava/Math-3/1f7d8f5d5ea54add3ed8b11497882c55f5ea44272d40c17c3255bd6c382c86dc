{
    "generation": "    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException {\n        final int len = a.length;\n        if (len != b.length) {\n            throw new DimensionMismatchException(len, b.length);\n        }\n\n        // Handle dimension 0 special case.\n        if (len == 0) {\n            return 0.0;\n        }\n\n        // Split each number into high and low parts using Dekker's algorithm.\n        // Split factors = (2^27 + 1) = 134217729 => SPLIT_FACTOR * DBL_EPSILON = 1.\n        final double SPLIT_FACTOR = (1 << 27) + 1.0;\n\n        final double[] prodHigh = new double[len];\n        double prodLowSum = 0;\n\n        // Perform multiplication step.\n        for (int i = 0; i < len; i++) {\n            final double ai = a[i];\n            final double ca = SPLIT_FACTOR * ai;\n            final double aHigh = ca - (ca - ai);\n            final double aLow = ai - aHigh;\n\n            final double bi = b[i];\n            final double cb = SPLIT_FACTOR * bi;\n            final double bHigh = cb - (cb - bi);\n            final double bLow = bi - bHigh;\n            prodHigh[i] = ai * bi; // High part of ai * bi\n            // Low part of ai * bi = (aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow))\n            final double prodLow = aLow * bLow - (((prodHigh[i] -\n                                                    aHigh * bHigh) -\n                                                   aLow * bHigh) -\n                                                  aHigh * bLow);\n            prodLowSum += prodLow; // Accumulate low parts\n        }\n\n        // Handle dimension 1 special case (no summation needed).\n        if (len == 1) {\n             // Result is just the single high-precision product.\n             double result = prodHigh[0] + prodLowSum;\n             // Check for possible NaNs (e.g. from Inf * 0).\n             if (Double.isNaN(result)) {\n                 result = a[0] * b[0]; // Fallback to simple multiplication\n             }\n             return result;\n        }\n\n        // Sum the high parts of the products using Ogita's Sum2S algorithm.\n        // s = Sum(prodHigh) (accumulated error-free)\n        // sLowSum = error part of the sum\n        double sHighPrev = prodHigh[0];\n        double sLowSum = 0;\n        double sPrime; // Error-free transformation intermediate\n\n        // Calculate Sum2S(prodHigh[0], prodHigh[1])\n        double prodHighNext = prodHigh[1];\n        double sHighCur = sHighPrev + prodHighNext; // s = prodHigh[0] + prodHigh[1]\n        sPrime = sHighCur - prodHighNext;\n        sLowSum = (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime); // Low part of sum\n        sHighPrev = sHighCur; // Update high part of sum\n\n        // Accumulate remaining products using Sum2S\n        // Loop runs from index i = 1 to len - 2, processing prodHigh[i+1] = prodHigh[2] ... prodHigh[len-1]\n        final int lenMinusOne = len - 1;\n        for (int i = 1; i < lenMinusOne; i++) {\n            prodHighNext = prodHigh[i + 1]; // Next high part product\n            sHighCur = sHighPrev + prodHighNext; // Add to current high sum: s = sHighPrev + prodHighNext\n            sPrime = sHighCur - prodHighNext; // Error-free transform intermediate\n            // Accumulate low part of sum: sLowSum += LowPart(sHighPrev + prodHighNext)\n            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n            sHighPrev = sHighCur; // Update high part sum\n        }\n\n        // Final result is the high-part sum + accumulated low parts (from multiplication & summation)\n        double result = sHighPrev + (prodLowSum + sLowSum);\n\n        if (Double.isNaN(result)) {\n            // either we have split infinite numbers or some coefficients were NaNs,\n            // just rely on the naive implementation and let IEEE754 handle this\n            result = 0;\n            for (int i = 0; i < len; ++i) {\n                result += a[i] * b[i];\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}