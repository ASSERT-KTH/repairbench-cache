{
    "generation": "    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException {\n        final int len = a.length;\n        if (len != b.length) {\n            throw new DimensionMismatchException(len, b.length);\n        }\n\n        // handle empty arrays\n        if (len == 0) {\n            return 0.0;\n        }\n\n        // compute approximate products and their lower parts accurately\n        final double[] prodHigh = new double[len];\n        double prodLowSum = 0;\n\n        for (int i = 0; i < len; i++) {\n            final double ai = a[i];\n            // split a[i] into high and low parts\n            final double ca = SPLIT_FACTOR * ai;\n            final double aHigh = ca - (ca - ai);\n            final double aLow = ai - aHigh;\n\n            final double bi = b[i];\n            // split b[i] into high and low parts\n            final double cb = SPLIT_FACTOR * bi;\n            final double bHigh = cb - (cb - bi);\n            final double bLow = bi - bHigh;\n\n            // compute product high part\n            prodHigh[i] = ai * bi;\n\n            // compute product low part: aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)\n            final double prodLow = aLow * bLow - (((prodHigh[i] -\n                                                    aHigh * bHigh) -\n                                                   aLow * bHigh) -\n                                                  aHigh * bLow);\n            prodLowSum += prodLow; // accumulate low parts\n        }\n\n\n        // Accurately compute the sum of the high parts (prodHigh)\n        double sHighPrev; // The running accurate sum (high part)\n        double sLowSum;   // The running accurate sum (low part, accumulated correction)\n\n        // Special case: arrays contains only one element.\n        if (len == 1) {\n             sHighPrev = prodHigh[0];\n             // sLowSum is the low part of the sum of prodHigh elements.\n             // Since there's only one element, the sum is exact and the low part is 0.\n             sLowSum = 0.0;\n        } else {\n            // Compute the sum of the first two elements accurately using TwoSum.\n            final double prodHighCur = prodHigh[0];\n            double prodHighNext = prodHigh[1];\n            sHighPrev = prodHighCur + prodHighNext; // Approximate sum of first two\n            double sPrime = sHighPrev - prodHighNext;\n            // Low part of the sum of first two elements\n            sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n\n            // Accurately sum the remaining elements (from index 2 onwards)\n            final int lenMinusOne = len - 1;\n            for (int i = 1; i < lenMinusOne; i++) { // loop from element at index 2 up to element at len-1\n                prodHighNext = prodHigh[i + 1];\n                // Calculate sHighCur = sHighPrev + prodHighNext accurately (TwoSum)\n                final double sHighCur = sHighPrev + prodHighNext; // Approximate sum\n                sPrime = sHighCur - prodHighNext;\n                // Low part (error) of the current sum step\n                double sLowCur = (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n                // Accumulate the low parts (errors)\n                sLowSum += sLowCur;\n                sHighPrev = sHighCur; // Update the approximate sum\n            }\n        }\n\n        // Combine the accurate sum of high parts with the sum of low parts\n        double result = sHighPrev + (prodLowSum + sLowSum);\n\n        if (Double.isNaN(result)) {\n            // either we have split infinite numbers or some coefficients were NaNs,\n            // just rely on the naive implementation and let IEEE754 handle this\n            result = 0;\n            for (int i = 0; i < len; ++i) {\n                result += a[i] * b[i];\n            }\n        }\n\n        return result;\n    }\n\n    // Assuming SPLIT_FACTOR is defined elsewhere in the class like this:\n    /** Split factor for splitting multiplication. */\n    private static final double SPLIT_FACTOR = (1 << 27) + 1.0;\n\n    // Dummy exception class for compilation\n    private static class DimensionMismatchException extends RuntimeException {\n        public DimensionMismatchException(int d1, int d2) {\n            super(\"Dimension mismatch: \" + d1 + \" != \" + d2);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}