{
    "generation": "import java.math.BigDecimal;\nimport java.util.Arrays;\n\n// Assuming EqualsBuilder class structure as context\n// @SuppressWarnings(\"unused\") // Assuming methods like setEquals, append overloads exist\n// class EqualsBuilder {\n//    private boolean isEquals = true;\n//    protected void setEquals(boolean isEquals) { this.isEquals = isEquals; }\n//    public boolean isEquals() { return this.isEquals; }\n//    // Dummy overloads for compilation context\n//    public EqualsBuilder append(long[] lhs, long[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(int[] lhs, int[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(short[] lhs, short[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(char[] lhs, char[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(byte[] lhs, byte[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(double[] lhs, double[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(float[] lhs, float[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) { if (!Arrays.equals(lhs, rhs)) setEquals(false); return this; }\n//    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n//         if (lhs == rhs) return this;\n//         if (lhs == null || rhs == null) { setEquals(false); return this; }\n//         if (lhs.length != rhs.length) { setEquals(false); return this; }\n//         for (int i = 0; i < lhs.length && isEquals; ++i) {\n//             append(lhs[i], rhs[i]);\n//         }\n//         return this;\n//    }\n\n    /**\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass(); // Use generic type\n        if (!lhsClass.isArray()) {\n                // The simple case, not an array.\n                // Special handling for BigDecimal required by test LANG-393,\n                // which expects compareTo semantics for BigDecimals.\n                if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {\n                    isEquals = (((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0);\n                } else {\n                    // Default behavior: use equals() for non-array objects.\n                    isEquals = lhs.equals(rhs);\n                }\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }\n// } // End of assumed EqualsBuilder class structure",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}