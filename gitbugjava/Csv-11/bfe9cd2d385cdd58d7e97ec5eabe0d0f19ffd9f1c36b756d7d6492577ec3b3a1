{
    "generation": "    /**\n     * Initializes the name to index mapping if the format defines a header.\n     *\n     * @return null if the format has no header.\n     * @throws IOException if there is a problem reading the header or skipping the first record\n     */\n    private Map<String, Integer> initializeHeader() throws IOException {\n        Map<String, Integer> hdrMap = null;\n        // Use a copy of the header array from the format as the format is immutable.\n        final String[] formatHeader = this.format.getHeader() == null ? null : this.format.getHeader().clone();\n        if (formatHeader != null) {\n            hdrMap = new LinkedHashMap<String, Integer>();\n\n            String[] headerRecord = null;\n            if (formatHeader.length == 0) {\n                // read the header from the first line of the file\n                final CSVRecord nextRecord = this.nextRecord();\n                if (nextRecord != null) {\n                    headerRecord = nextRecord.values();\n                }\n            } else {\n                if (this.format.getSkipHeaderRecord()) {\n                    this.nextRecord();\n                }\n                headerRecord = formatHeader; // Use the cloned formatHeader\n            }\n\n            // build the name to index mappings\n            if (headerRecord != null) {\n                for (int i = 0; i < headerRecord.length; i++) {\n                    final String header = headerRecord[i];\n                    // Check for null first to avoid NPE on trim()\n                    final boolean emptyHeader = header == null || header.trim().isEmpty();\n\n                    // Determine if this header should be ignored\n                    final boolean ignoreHeader = emptyHeader && this.format.getIgnoreEmptyHeaders();\n\n                    if (!ignoreHeader) {\n                        // If not ignoring this header, check for duplicates and add\n                        if (hdrMap.containsKey(header)) { // containsKey handles null keys correctly in LinkedHashMap\n                             // Format the error message based on whether the duplicate is null\n                             final String Hdr = header == null ? \"null\": header;\n                             // Added index information to the error message for clarity\n                             throw new IllegalArgumentException(\n                                     \"The header contains a duplicate name: \\\"\" + Hdr + \"\\\" at index \" + i +\n                                     \" in \" + Arrays.toString(headerRecord));\n                        }\n                        hdrMap.put(header, Integer.valueOf(i));\n                    }\n                    // If ignoreHeader is true, do nothing (skip adding, skip duplicate check for ignored header)\n                }\n            }\n        }\n        return hdrMap;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}