{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern; // Import needed for Matcher and Pattern if charsetPattern is defined here\n\n    /**\n     * Parse out a charset from a content type header.\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return The parsed charset name, or null if not found, empty, or unsupported. Case is preserved if supported.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n\n        // Assuming charsetPattern is a static Pattern field defined elsewhere in the class.\n        // It should capture the charset value in group 1. Examples:\n        // Pattern.compile(\"(?i)\\\\bcharset=\\\\s*([^;]*)\"); // Simple version, might capture quotes\n        // Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s;\\\"']*)\"); // More robust, excludes quotes from group\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim(); // Extract and trim whitespace\n\n            // Remove optional leading/trailing quotes (double or single)\n            // Necessary if the regex might capture quotes (like the simple version above)\n            if (charset.length() > 1) {\n               if ((charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\"))\n                 || (charset.startsWith(\"'\") && charset.endsWith(\"'\"))) {\n                    // Substring to remove quotes and trim again in case of spaces inside quotes\n                    charset = charset.substring(1, charset.length() - 1).trim();\n               }\n            }\n\n            // Previous version converted to uppercase, causing test failures:\n            // charset = charset.toUpperCase(Locale.ENGLISH);\n\n            // Return null if charset name is empty after trimming/quote removal\n            if (charset.isEmpty()) {\n                return null;\n            }\n\n            try {\n                // Validate that the charset is supported by the JVM.\n                // This check ensures we return null for unsupported values like \"Unknown\" or \"Unsupported\".\n                if (Charset.isSupported(charset)) {\n                    // Return the charset name, preserving its original case, as required by tests.\n                    return charset;\n                } else {\n                    return null; // Charset not supported\n                }\n            } catch (IllegalCharsetNameException e) {\n                // The charset name has invalid syntax (e.g., contains illegal characters)\n                return null;\n            }\n        }\n        // No \"charset=\" found in the content type string\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}