{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n// Assume charsetPattern is defined somewhere in the class, e.g.:\n// private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"']?)([^\\\\s;\\\"']*)(?:[\\\"']?)\");\n// Or perhaps the original pattern captured quotes/whitespace differently, handled below.\n\n    /**\n     * Parse out a charset from a content type header.\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found or not supported. Charset is trimmed and case is preserved from the input.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        \n        // Assuming charsetPattern is available in the class scope\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim(); // Extract charset string and trim basic whitespace\n\n            // Remove surrounding quotes (double or single) if present\n            if (charset.length() > 1) {\n                if ((charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\")) || (charset.startsWith(\"'\") && charset.endsWith(\"'\"))) {\n                    // Substring to remove the first and last character (the quotes)\n                    charset = charset.substring(1, charset.length() - 1);\n                    // Trim again in case there was whitespace inside the quotes, like charset=\" utf-8 \"\n                    charset = charset.trim();\n                }\n            }\n\n            // After potentially removing quotes and trimming, check if the result is empty\n            if (charset.isEmpty()) {\n                return null;\n            }\n\n            // Validate that the charset is supported on this platform.\n            try {\n                if (Charset.isSupported(charset)) {\n                    // Return the cleaned charset name, preserving the original case found.\n                    // This deviates from the original javadoc (\"uppercased\") but matches test expectations.\n                    return charset;\n                } else {\n                    // Charset name is syntactically valid but not supported.\n                    return null;\n                }\n            } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {\n                // Charset name is syntactically invalid (per Charset spec) or system doesn't support lookup.\n                return null;\n            }\n        }\n        return null; // No charset parameter found in the content type string.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}