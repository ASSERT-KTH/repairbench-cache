{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n    /**\n     * Parse out a charset from a content type header.\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return The extracted charset name, trimmed and unquoted, if supported by the JVM, otherwise null.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n\n        // A robust pattern for matching charset values, including quoted ones.\n        // Assumes charsetPattern is a pre-compiled Pattern like:\n        // Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)?\\\"?\");\n        // If charsetPattern is simpler, the quote removal logic below handles it.\n        // Let's stick to the original code's structure where charsetPattern is external.\n        // Assume charsetPattern is defined elsewhere, e.g., as a static field.\n        // private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*([^;]*)\"); // Example if simpler pattern used\n\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1); // Get the captured group (the charset value)\n            if (charset != null) {\n                charset = charset.trim(); // Trim leading/trailing whitespace\n\n                // Remove surrounding quotes (double or single) if present\n                if (charset.length() > 1) {\n                    if ((charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\"))\n                            || (charset.startsWith(\"'\") && charset.endsWith(\"'\"))) {\n                        // Substring to remove the first and last characters (the quotes)\n                        charset = charset.substring(1, charset.length() - 1);\n                        // Trim again in case there were spaces inside the quotes like charset=\" utf-8 \"\n                        charset = charset.trim();\n                    }\n                }\n\n                // Validate charset: Check if it's empty or unsupported\n                if (charset.isEmpty()) {\n                    return null; // Return null if charset value is empty after trimming/unquoting\n                }\n\n                try {\n                    // Check if the charset is supported by the current Java virtual machine.\n                    // This check works regardless of the case of the charset string.\n                    if (Charset.isSupported(charset)) {\n                        // Return the original case charset name as extracted and processed\n                        return charset;\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    // If the charset name is syntactically invalid (e.g., contains illegal characters)\n                    return null;\n                }\n                // UnsupportedCharsetException is not thrown by isSupported, but good practice\n                // if using forName. Since we return based on isSupported, we don't strictly need the catch block\n                // unless some JVMs behave differently, but keeping it makes it slightly more robust.\n                // If isSupported returns false, fall through to return null.\n            }\n        }\n        // Return null if no charset= part found, or if the extracted charset is null, empty, or unsupported.\n        return null;\n    }\n\n    // Assume charsetPattern is defined somewhere in the class like:\n    // import java.util.regex.Pattern;\n    // private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)?\\\"?\");\n    // Or a simpler one that requires the quote removal logic:\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*([^;]*)\");\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}