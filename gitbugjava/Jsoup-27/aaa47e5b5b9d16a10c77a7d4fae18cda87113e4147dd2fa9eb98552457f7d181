{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern; // Assuming charsetPattern is a static field of this type\n\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found or not supported. Charset is trimmed.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n\n        // Note: The effectiveness of this method depends on the definition of charsetPattern.\n        // Assuming a pattern like: Pattern.compile(\"(?i)\\\\bcharset=\\\\s*([^;]+)\")\n        // This pattern captures the value after 'charset=' up to the next semicolon or end of string.\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1); // Extract the potentially quoted charset value.\n            if (charset == null) { // Defensive check, should not happen with typical regex group(1)\n                 return null;\n            }\n            charset = charset.trim(); // Trim leading/trailing whitespace.\n\n            // Remove surrounding quotes (single or double) if present.\n            if (charset.length() > 1) {\n                if ((charset.startsWith(\"'\") && charset.endsWith(\"'\"))\n                        || (charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\"))) {\n                    // Extract content within quotes.\n                    charset = charset.substring(1, charset.length() - 1);\n                    // Trim again in case of whitespace inside quotes: charset=\" utf-8 \"\n                    charset = charset.trim();\n                }\n            }\n\n            // After cleaning, check if the result is empty.\n            if (charset.isEmpty()) {\n                return null;\n            }\n\n            // Validate the extracted charset name.\n            try {\n                // Charset.forName() checks if the charset is supported and throws\n                // exceptions for invalid or unsupported names.\n                if (Charset.isSupported(charset)) // Use isSupported for check first\n                    return charset; // Return the original case version if supported.\n                // Some systems might support a charset name but isSupported returns false, try forName as fallback/confirmation\n                Charset.forName(charset);\n                return charset; // Return the original case version if supported by forName.\n            } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {\n                // If the charset name is syntactically invalid or the charset is unsupported, return null.\n                return null;\n            }\n        }\n        // No charset found in the content type header.\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}