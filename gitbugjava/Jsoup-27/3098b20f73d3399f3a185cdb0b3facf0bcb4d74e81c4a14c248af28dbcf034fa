{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern; // Assuming charsetPattern is a static Pattern field in the same class\n\n    /**\n     * Parse out a charset from a content type header.\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found or not supported. Charset is trimmed and returned case-inherit.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        \n        // Use the existing charsetPattern (assumed to be defined elsewhere)\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            // Extract the charset name - group 1 must capture the value part\n            String charset = m.group(1).trim();\n            \n            // Remove surrounding quotes (single or double) if present\n            if (charset.length() > 1) { // Need at least 2 chars for quotes\n                 if ((charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\"))\n                         || (charset.startsWith(\"'\") && charset.endsWith(\"'\"))) {\n                     charset = charset.substring(1, charset.length() - 1);\n                     // Trim again in case of spaces within quotes like \" utf-8 \"\n                     charset = charset.trim();\n                 }\n            }\n\n            // Ensure charset name is not empty after cleaning\n            if (charset.length() == 0) {\n                return null;\n            }\n\n            // Check if the charset is supported by the JVM. We want to return null if\n            // the JVM does not support it, so the default charset can be used instead.\n            // This also catches invalid charset names.\n            try {\n                if (Charset.isSupported(charset)) {\n                    // Return the charset name, preserving its original case\n                    return charset;\n                } else {\n                    // Return null if the charset is explicitly known to be unsupported\n                    return null;\n                }\n            } catch (IllegalCharsetNameException e) {\n                // Return null if the charset name is syntactically invalid\n                return null;\n            }\n        }\n        \n        // Return null if the charset pattern is not found in the content type string\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}