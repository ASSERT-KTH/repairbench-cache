{
    "generation": "    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else\n        {\n            // Handle types not explicitly listed above by trying to find and use a String constructor.\n            try\n            {\n                // Find the constructor accepting a single String argument.\n                java.lang.reflect.Constructor<T> constructor = clazz.getConstructor(String.class);\n                // Invoke the constructor with the input string.\n                return constructor.newInstance(str);\n            }\n            catch (NoSuchMethodException e)\n            {\n                // The class doesn't have a Constructor(String).\n                // Indicate that this type cannot be handled via String conversion.\n                // Note: Returning null might be an alternative, but throwing seems more consistent\n                // with the method's contract (throws ParseException if creation fails).\n                throw new ParseException(\"Class \" + clazz.getName() + \" does not support creation from a String\");\n            }\n            catch (Exception e)\n            {\n                // Handle exceptions during constructor invocation (e.g., NumberFormatException, SecurityException).\n                // If it's an InvocationTargetException, get the underlying cause for a clearer message.\n                Throwable cause = e;\n                if (e instanceof java.lang.reflect.InvocationTargetException && e.getCause() != null)\n                {\n                    cause = e.getCause();\n                }\n                // Wrap the underlying exception in a ParseException.\n                throw new ParseException(\"Unable to create an instance of \" + clazz.getName() + \" from '\" + str + \"': \" + cause.getMessage());\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}