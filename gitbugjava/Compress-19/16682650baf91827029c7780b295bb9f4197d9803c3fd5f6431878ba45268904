{
    "generation": "    /**\n     * Parses the raw bytes read from the central directory extra\n     * field with knowledge which fields are expected to be there.\n     *\n     * <p>All four fields inside the zip64 extended information extra\n     * field are optional and must only be present if their corresponding\n     * entry inside the central directory contains the correct magic\n     * value.</p>\n     * @param hasUncompressedSize flag indicating that the uncompressed size is present\n     * @param hasCompressedSize flag indicating that the compressed size is present\n     * @param hasRelativeHeaderOffset flag indicating that the relative header offset is present\n     * @param hasDiskStart flag indicating that the disk start number is present\n     * @throws ZipException if the extra field buffer is too short\n     * @since 1.1\n     */\n    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            // DWORD = 8 bytes, WORD = 4 bytes in this context\n            int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);\n            // Specification says: The Central Directory Header MUST include a\n            // Zip64 Extended Information Extra Field if any of the corresponding\n            // Size, Compressed Size, Relative Header Offset , or Disk Start Number\n            // fields are set to 0xFFFFFFFF.\n            //\n            // The order of the fields in the extra field MUST be:\n            // Original Size          8 bytes\n            // Compressed Size        8 bytes\n            // Relative Header Offset 8 bytes\n            // Disk Start Number      4 bytes\n            //\n            // The data MAY be truncated, i.e. the extra field can be shorter\n            // than 28 bytes. Information MUST only be present if the corresponding\n            // Central Directory Header field is set to 0xFFFFFFFF.\n            //\n            // This method is invoked with flags telling us which fields to expect\n            // based on the values in the central directory entry.\n            //\n            // The specification is somewhat ambiguous about whether the extra field\n            // can be *longer* than needed. Some ZIP tools seem to produce archives\n            // where this happens (e.g. COMPRESS-228). We should tolerate this.\n            if (rawCentralDirectoryData.length < expectedLength) {\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" is too short, expected minimum length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += DWORD;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasDiskStart) {\n                // The offset check is implicit: the constructor would throw an exception\n                // if the buffer was too short. We've already checked the total length.\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                // No need to increment offset further, as this is the last potential field.\n                // offset += WORD;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}