{
    "generation": "  /**\n   * Given a node, get a human-readable name for the type of that node so\n   * that will be easy for the programmer to find the original declaration.\n   *\n   * For example, if SubFoo's property \"bar\" might have the human-readable\n   * name \"Foo.prototype.bar\".\n   *\n   * @param n The node.\n   * @param dereference If true, the type of the node will be dereferenced\n   *     to an Object type, if possible. This is used, for example, when\n   *     generating warnings about property access on primitive types. It's\n   *     also used when generating \"property never defined\" warnings, where\n   *     we want the name of the base object type, not a qualified property name.\n   */\n  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    // However, if 'dereference' is true, we are likely interested in the base\n    // type name for error reporting (like \"property X never defined on Y\"),\n    // rather than the qualified name of the property definition.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        ObjectType definingType = null; // Type where the property is defined\n\n        // Find the type that directly defines the property.\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          // interfaces\n          definingType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          ObjectType currentType = objectType;\n          while (currentType != null) {\n            if (currentType.hasOwnProperty(propName)) {\n              definingType = currentType;\n              break;\n            }\n            currentType = currentType.getImplicitPrototype();\n          }\n        }\n\n        // If we found the defining type and it's suitable (constructor/prototype)\n        // AND dereference is false, return the qualified name (e.g., Foo.prototype.bar).\n        if (definingType != null &&\n            (definingType.getConstructor() != null ||\n             definingType.isFunctionPrototypeType())) {\n          // Only return the qualified property name if dereference is false.\n          // If dereference is true, we fall through to the general logic below,\n          // which will give the type name of the node 'n' itself.\n          if (!dereference) {\n             return definingType.toString() + \".\" + propName;\n          }\n          // If dereference is true, fall through.\n        }\n        // Fall through if property not found, defining type unsuitable, or dereference is true.\n      }\n      // Fall through if objectType was null.\n    }\n\n    // General logic to get the name of the type of node 'n'.\n    JSType type = getJSType(n);\n    if (dereference) {\n      // If dereference is true, get the Object type associated with the\n      // node's type. For example, convert primitive number to Number object,\n      // or constructor type Ctor to instance type Ctor.\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    // If the resulting type 'type' represents a class instance or a prototype,\n    // use its toString() name (e.g., \"MyClass\", \"MyClass.prototype\").\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n\n    // Otherwise, try the qualified name of the node 'n' itself, if available.\n    // This can be useful for names like 'a.b.c'.\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function signatures.\n      return \"function\";\n    } else {\n      // Fallback to the type's toString() representation.\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}