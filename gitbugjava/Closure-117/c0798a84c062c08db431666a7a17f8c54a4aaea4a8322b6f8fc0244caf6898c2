{
    "generation": "  /**\n   * Given a node, get a human-readable name for the type of that node so\n   * that will be easy for the programmer to find the original declaration.\n   *\n   * For example, if SubFoo's property \"bar\" might have the human-readable\n   * name \"Foo.prototype.bar\".\n   *\n   * @param n The node.\n   * @param dereference If true, the type of the node will be dereferenced\n   *     to an Object type, if possible.\n   */\n  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    // Check if the type itself provides a good name (nominal type or prototype).\n    // Function types with constructors have qualified names.\n    // This check is done upfront to prioritize the actual type name over potentially\n    // misleading property origin names (like in Issue 1047).\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n\n    // If the type name wasn't informative (e.g., primitive, structural type),\n    // and it's a GETPROP, try finding where the property was originally defined.\n    // This helps provide more context, e.g., \"Foo.prototype.bar\".\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          // Interfaces can't be instantiated, so climb the hierarchy looking\n          // for the property.\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // Classes, climb the prototype chain looking for the property.\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        // If we found the object type where the property is defined,\n        // and that object type has a printable name (constructor/prototype),\n        // return the qualified property name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    // If we couldn't find a good name using the type or property origin,\n    // try the qualified name of the node itself (e.g., \"my.namespace.someVar\").\n    // This might be better than a very generic type name like \"Object\".\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    }\n\n    // If it's a function type, just say \"function\".\n    // Complex function names/signatures are often unhelpful here.\n    if (type.isFunctionType()) {\n      return \"function\";\n    }\n\n    // Otherwise, fall back to the type's basic toString representation.\n    // This might be \"number\", \"string\", \"{...}\", \"Object\", etc.\n    return type.toString();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}