{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) { // Need at least subtype (1) + length (1)\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Fix 1: Check if the declared length is valid within buffer bounds\n            if (endIndex > buf.writerIndex()) {\n                // Log.warning(\"Invalid length \" + length + \" for subtype 0x\" + Integer.toHexString(subtype) + \", exceeds buffer size. Stopping TLV parsing.\");\n                break; // Stop processing TLVs for this message to prevent IndexOutOfBoundsException\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) { // Check length before reading\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                    if (length >= 2) { // Check length before reading\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (length >= 4) { // Check length before reading\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (length >= 1) { // Check length before reading\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                     if (length >= 1) { // Check length before reading\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                     }\n                    break;\n                case 0x33:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) { // Add length check for substring\n                            String lockStatus = stringValue.substring(8, 8 + 7);\n                            if (lockStatus.length() >= 5) { // Add length check for inner substring\n                                try {\n                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                } catch (NumberFormatException e) {\n                                    // Handle parsing error if needed\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x56:\n                    // Requires 2 bytes according to original code structure\n                    if (length >= 2) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                        buf.readUnsignedByte(); // reserved\n                    } else if (length == 1) {\n                        // If only 1 byte is available, read just that. Or consider it an error?\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) { // Check length before reading\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    }\n                    // Rely on outer index setting to skip remaining bytes\n                    break;\n                case 0x69:\n                     if (length >= 2) { // Check length before reading\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                     }\n                    break;\n                case 0x80:\n                    // Fix 2: Remove incorrect logic. Assume decodeExtension handles the buffer slice correctly.\n                    // The passed endIndex is calculated based on the 'length' field read before the switch.\n                    // decodeExtension must read data from the current buf.readerIndex() up to endIndex.\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    // Structure requires 24 bytes. Check length.\n                    if (length >= 24) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // Skip unknown/reserved\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // Skip unknown/reserved\n                        buf.readUnsignedInt();   // Skip unknown/reserved\n                        buf.readUnsignedShort(); // Skip unknown/reserved\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    // Rely on outer index setting to skip remaining bytes if length > 24\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) { // Requires 2 + 2 bytes\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) { // Check length before reading\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0) {\n                        // Fix 3: Use ISO_8859_1 for potential non-ASCII chars, and trim.\n                        stringValue = buf.readCharSequence(length, StandardCharsets.ISO_8859_1).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue.trim());\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4) { // Check length before reading\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2) { // Check length before reading\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Fallthrough, also handles 0xE1 within 0xEB\n                    if (length >= 1) { // Check length before reading\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Check length before reading count byte\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * 13; // 1 byte count + N * (5+5+1+2) bytes structure\n                        if (length >= expectedLength && count > 0) { // Check if length is sufficient for count and structure\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        } // else: length mismatch or count=0, rely on outer index setting to skip remaining bytes\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3) { // Structure requires 2 + 1 bytes\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    // Rely on outer index setting to skip remaining bytes if length > 3\n                    break;\n                case 0xE6:\n                    // Process sensor data tuples. Each tuple: 1(index) + 6(mac) + 8(temp) + 8(humidity) = 23 bytes\n                    while (buf.readerIndex() <= endIndex - 23) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // Complex case with two possible formats based on MCC value\n                    if (length < 3) break; // Need at least MCC (2) + MNC (1)\n                    int startIndexEb = buf.readerIndex(); // Remember start index for boundary checks\n                    int mcc = buf.readUnsignedShort();\n                    int mnc = buf.readUnsignedByte();\n                    if (mcc > 200) { // Cell tower list format\n                        Network network = new Network();\n                        // Each tower: 2(lac) + 2(cid) + 1(rssi) = 5 bytes\n                        while (buf.readerIndex() <= endIndex - 5) {\n                             network.addCellTower(CellTower.from(\n                                     mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                     buf.readUnsignedByte()));\n                        }\n                        if (network.getCellTowers() != null && !network.getCellTowers().isEmpty()) {\n                            position.setNetwork(network);\n                        }\n                    } else { // Nested TLV format\n                        // Each inner TLV needs at least 2(extLen) + 2(extType) = 4 bytes header\n                        while (buf.readerIndex() <= endIndex - 4) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            int extValueIndex = buf.readerIndex();\n                            // Data length = total declared length - type field size (2)\n                            int extDataLength = extendedLength - 2;\n                            // Ensure data length is non-negative and fits within outer boundary\n                            if (extDataLength < 0 || extValueIndex + extDataLength > endIndex) break;\n                            int extEndIndex = extValueIndex + extDataLength;\n\n                            switch (extendedType) {\n                                case 0x0001: // fuel1: 2(fuel) + 1(unused) = 3 bytes data\n                                    if (extDataLength >= 3) {\n                                        position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                        buf.readUnsignedByte(); // unused\n                                    }\n                                    break;\n                                case 0x0023: // fuel2: 6 bytes ASCII data\n                                     if (extDataLength >= 6) {\n                                         try {\n                                             position.set(\"fuel2\", Double.parseDouble(\n                                                     buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                         } catch (NumberFormatException e) { /* Handle error */ }\n                                     }\n                                    break;\n                                case 0x00CE: // power: 2 bytes data\n                                    if (extDataLength >= 2) {\n                                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    }\n                                    break;\n                                case 0x00D8: // cell tower: 2(mcc)+1(mnc)+2(lac)+4(cid) = 9 bytes data\n                                    if (extDataLength >= 9) {\n                                        Network network = position.getNetwork(); // Get existing or create new\n                                        if (network == null) {\n                                            network = new Network();\n                                        }\n                                        network.addCellTower(CellTower.from(\n                                                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                        position.setNetwork(network);\n                                    }\n                                    break;\n                                case 0xE1: // battery level: 1 byte data (duplicate of top-level)\n                                    if (extDataLength >= 1) {\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    }\n                                    break;\n                                default:\n                                    // Unknown extended type, skip its data block\n                                    // Skipping is handled by setting reader index below\n                                    break;\n                            }\n                             // Ensure we move to the end of this inner TLV's data block\n                            buf.readerIndex(extEndIndex);\n                        }\n                    }\n                    break; // End of case 0xEB\n                case 0xED:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                     // Structure requires 1(rssi) + 2(power) + 2(battery) + 1(sat) = 6 bytes\n                     if (length >= 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                     }\n                    break;\n                case 0xF3:\n                    // Nested TLV structure: 2(type) + 1(length) header\n                    while (buf.readerIndex() <= endIndex - 3) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte(); // Data length\n                        int extValueIndex = buf.readerIndex();\n                        // Ensure data length is non-negative and fits within outer boundary\n                        if (extValueIndex + extendedLength > endIndex) break;\n                        int extEndIndex = extValueIndex + extendedLength;\n\n                        // Add length checks for robustness inside each case\n                        switch (extendedType) {\n                            case 0x0002: if(extendedLength>=2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: if(extendedLength>=2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: if(extendedLength>=2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: if(extendedLength>=4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: if(extendedLength>=2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: if(extendedLength>=2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: if(extendedLength>=2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: if(extendedLength>=2) position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: if(extendedLength>=2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: if(extendedLength>=2) position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: if(extendedLength>=2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); break; // Use double division\n                            case 0x0050: if(extendedLength>=17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: if(extendedLength>=2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: if(extendedLength>=2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: if(extendedLength>=2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: if(extendedLength>=2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: if(extendedLength>=2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: /* Unknown type, skip below */ break;\n                        }\n                        // Ensure we move to the end of this inner TLV's data block\n                        buf.readerIndex(extEndIndex);\n                    }\n                    break; // End of case 0xF3\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else if (length > 0) { // length >= 3 potentially\n                        int mark = buf.readUnsignedByte(); // Read first byte (mark or data)\n                        if (mark == 0x7C && length > 1) { // Nested TLV structure if mark is 0x7C\n                            // Inner TLV header: 1(type) + 1(length)\n                            while (buf.readerIndex() <= endIndex - 2) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte(); // Data length\n                                int extValueIndex = buf.readerIndex();\n                                // Ensure data length is non-negative and fits within outer boundary\n                                if (extValueIndex + extendedLength > endIndex) break;\n                                int extEndIndex = extValueIndex + extendedLength;\n\n                                switch (extendedType) {\n                                    case 0x01: // Alarms: 4 bytes data\n                                        if (extendedLength >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            // Set alarm only if not already set by main status field? Or overwrite? Overwriting is simpler.\n                                            if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default: /* Unknown type, skip below */ break;\n                                }\n                                // Ensure we move to the end of this inner TLV's data block\n                                buf.readerIndex(extEndIndex);\n                            }\n                        }\n                        // Original code read battery level AFTER the 0x7C block handling, if length > 2.\n                        // This implies it might be the last byte? Let's preserve this, checking bounds.\n                        if (buf.readerIndex() < endIndex) {\n                             // Make sure we didn't consume the whole buffer already\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype, data will be skipped by the readerIndex update below\n                    break;\n            }\n            // Set reader index to the end of the current TLV segment.\n            // This handles skipping remaining bytes in handled cases and all bytes in unhandled cases.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }\n\n    // Dummy implementations for compilation/reference\n    private static class DeviceSession {\n        public long getDeviceId() { return 0; }\n        public java.util.TimeZone get(String key) { return null; }\n        public static final String KEY_TIMEZONE = \"timezone\";\n    }\n    private java.util.Date readDate(ByteBuf buf, java.util.TimeZone tz) { buf.skipBytes(6); return new java.util.Date(); }\n    private String decodeAlarm(long value) { return null; }\n    private void decodeCoordinates(Position position, ByteBuf buf) { buf.skipBytes(12); }\n    private void decodeExtension(Position position, ByteBuf buf, int endIndex) { buf.readerIndex(endIndex); }\n    private double decodeCustomDouble(ByteBuf buf) { buf.readLong(); return 0.0; }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}