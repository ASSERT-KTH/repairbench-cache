{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) { // Ensure at least 1 byte for type, 1 for length, and 1 for data (>0 means readableBytes >=1)\n\n            int subtype = buf.readUnsignedByte();\n            int declaredTlvDataLength = buf.readUnsignedByte(); // Length of the TLV's data part\n\n            int availableBytesForTlvData = buf.readableBytes();\n            // Effective length of data to process for this TLV, capped by available bytes\n            int tlvDataLength = Math.min(declaredTlvDataLength, availableBytesForTlvData);\n\n            int currentReaderIndex = buf.readerIndex();\n            int tlvEndIndex = currentReaderIndex + tlvDataLength;\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (tlvDataLength >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                    if (tlvDataLength >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (tlvDataLength >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (tlvDataLength >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (tlvDataLength >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    // Ensure string operations are safe with tlvDataLength\n                    if (tlvDataLength > 0) {\n                        stringValue = buf.readCharSequence(tlvDataLength, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= (8 + 7)) {\n                            String lockStatus = stringValue.substring(8, 8 + 7);\n                            if (lockStatus.length() >= 5) { // For substring(2,5)\n                                position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                            }\n                        }\n                    }\n                    break;\n                case 0x56:\n                    if (tlvDataLength >= 2) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                        buf.readUnsignedByte(); // reserved\n                    }\n                    break;\n                case 0x60:\n                    if (tlvDataLength >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    }\n                    // buf.skipBytes(length - 2); Removed, main loop handles skipping unread TLV data\n                    break;\n                case 0x69:\n                    if (tlvDataLength >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    if (tlvDataLength >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // Pass the current TLV's end index to decodeExtension.\n                        // decodeExtension should not read beyond this tlvEndIndex.\n                        decodeExtension(position, buf, tlvEndIndex);\n                    }\n                    break;\n                case 0x91:\n                    if (tlvDataLength >= 22) { // Sum of all fixed reads in this case\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // skip\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // skip\n                        buf.readUnsignedInt();   // skip\n                        buf.readUnsignedShort(); // skip\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (tlvDataLength > 0) {\n                        stringValue = buf.readCharSequence(tlvDataLength, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (tlvDataLength >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                        // KEY_DRIVER_UNIQUE_ID is at offset 8 of A7 data, length 8\n                        // Total 4 (ADCs) + 4 (padding) + 8 (DriverID) = 16 bytes needed\n                        if (tlvDataLength >= 16) {\n                            buf.skipBytes(4); // Skip 4 padding bytes\n                            // Use ISO_8859_1 for \\u0090 character\n                            stringValue = buf.readCharSequence(8, StandardCharsets.ISO_8859_1).toString();\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                        }\n                    }\n                    break;\n                case 0xAC:\n                    if (tlvDataLength >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                    if (tlvDataLength > 0) {\n                        stringValue = buf.readCharSequence(tlvDataLength, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (tlvDataLength > 0) {\n                        // Note: Original KEY_DRIVER_UNIQUE_ID was here. Test data implies it's in 0xA7.\n                        // If it can be in 0xBD as well, this is fine. Otherwise, this might be redundant.\n                        stringValue = buf.readCharSequence(tlvDataLength, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                    if (tlvDataLength >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (tlvDataLength >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Merged from 0xEB's inner switch\n                    if (tlvDataLength >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (tlvDataLength == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (tlvDataLength > 0) { // Check if there's at least 1 byte for count\n                        int count = buf.readUnsignedByte();\n                        // Each lock item: 5 (id) + 5 (card) + 1 (battery) + 2 (status) = 13 bytes\n                        // Total required: 1 (count) + count * 13\n                        if (tlvDataLength >= 1 + count * 13) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (tlvDataLength >= 3) { // short + byte\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    // Each sensor: 1 (index) + 6 (mac) + 8 (temp_double) + 8 (humidity_double) = 23 bytes\n                    // Loop condition buf.readerIndex() < tlvEndIndex already ensures bounds.\n                    while (buf.readerIndex() < tlvEndIndex && (tlvEndIndex - buf.readerIndex()) >= 23) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // This case has complex internal logic. Check tlvDataLength before first read.\n                    if (tlvDataLength >= 2) { // For getUnsignedShort\n                        if (buf.getUnsignedShort(buf.readerIndex()) > 200) { // Network data\n                            // MCC (2) + MNC (1) = 3 bytes minimum before loop\n                            if (tlvDataLength >= 3) {\n                                Network network = new Network();\n                                int mcc = buf.readUnsignedShort();\n                                int mnc = buf.readUnsignedByte();\n                                // Each cell tower: LAC (2) + CID (2) + RSSI (1) = 5 bytes\n                                while (buf.readerIndex() < tlvEndIndex && (tlvEndIndex - buf.readerIndex()) >= 5) {\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                if (!network.getCellTowers().isEmpty()) {\n                                    position.setNetwork(network);\n                                }\n                            }\n                        } else { // Extended key-value pairs\n                            // Each pair: extendedLength (2) + extendedType (2) + data (extendedLength - 2)\n                            while (buf.readerIndex() < tlvEndIndex && (tlvEndIndex - buf.readerIndex()) >= 4) { // Min 4 for ext_len + ext_type\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                // Ensure extendedLength is valid for remaining data in this TLV\n                                if (buf.readerIndex() + (extendedLength - 2) <= tlvEndIndex && extendedLength >=2) {\n                                    switch (extendedType) {\n                                        case 0x0001: // fuel1 (2) + unused (1) = 3 bytes\n                                            if (extendedLength - 2 >= 3) {\n                                                position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                                buf.readUnsignedByte(); // unused\n                                            } else { buf.skipBytes(extendedLength - 2); }\n                                            break;\n                                        case 0x0023: // fuel2 (6 char) = 6 bytes\n                                            if (extendedLength - 2 >= 6) {\n                                                position.set(\"fuel2\", Double.parseDouble(\n                                                        buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                            } else { buf.skipBytes(extendedLength - 2); }\n                                            break;\n                                        case 0x00CE: // power (2) = 2 bytes\n                                            if (extendedLength - 2 >= 2) {\n                                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                            } else { buf.skipBytes(extendedLength - 2); }\n                                            break;\n                                        case 0x00D8: // cell (MCC(2)+MNC(1)+LAC(2)+CID(4)) = 9 bytes\n                                            if (extendedLength - 2 >= 9) {\n                                                Network network = new Network();\n                                                network.addCellTower(CellTower.from(\n                                                        buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                        buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                                position.setNetwork(network);\n                                            } else { buf.skipBytes(extendedLength - 2); }\n                                            break;\n                                        case 0xE1: // battery_level (1) = 1 byte\n                                            if (extendedLength - 2 >= 1) {\n                                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                            } else { buf.skipBytes(extendedLength - 2); }\n                                            break;\n                                        default:\n                                            buf.skipBytes(extendedLength - 2);\n                                            break;\n                                    }\n                                } else { // Invalid extendedLength, skip to end of current TLV\n                                    buf.readerIndex(tlvEndIndex); break;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (tlvDataLength > 0) {\n                        stringValue = buf.readCharSequence(tlvDataLength, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    if (tlvDataLength >= 7) { // RSSI(1)+POWER(2)+BATTERY(2)+SATS(1) (+ CALIBRATION_STATE(1) = 7)\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        // Assuming one more byte based on common patterns, if tlvDataLength implies more\n                    }\n                    break;\n                case 0xF3:\n                    // Each ext item: type(2) + len(1) + data(len)\n                    while (buf.readerIndex() < tlvEndIndex && (tlvEndIndex - buf.readerIndex()) >= 3) { // Min 3 for type+len\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedFieldLength = buf.readUnsignedByte();\n                        if (buf.readerIndex() + extendedFieldLength <= tlvEndIndex) {\n                            switch (extendedType) {\n                                case 0x0002: if (extendedFieldLength >= 2) { position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0003: if (extendedFieldLength >= 2) { position.set(Position.KEY_RPM, buf.readUnsignedShort()); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0004: if (extendedFieldLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0005: if (extendedFieldLength >= 4) { position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0007: if (extendedFieldLength >= 2) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0008: if (extendedFieldLength >= 2) { position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0009: if (extendedFieldLength >= 2) { position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x000B: if (extendedFieldLength >= 2) { position.set(\"intakePressure\", buf.readUnsignedShort()); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x000C: if (extendedFieldLength >= 2) { position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x000D: if (extendedFieldLength >= 2) { position.set(\"intakeFlow\", buf.readUnsignedShort()); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x000E: if (extendedFieldLength >= 2) { position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0050: if (extendedFieldLength >= 17) { position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0100: if (extendedFieldLength >= 2) { position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0102: if (extendedFieldLength >= 2) { position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0112: if (extendedFieldLength >= 2) { position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0113: if (extendedFieldLength >= 2) { position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); } else { buf.skipBytes(extendedFieldLength); } break;\n                                case 0x0114: if (extendedFieldLength >= 2) { position.set(\"hardCorneringCount\", buf.readUnsignedShort()); } else { buf.skipBytes(extendedFieldLength); } break;\n                                default: buf.skipBytes(extendedFieldLength); break;\n                            }\n                        } else { buf.readerIndex(tlvEndIndex); break; } // Invalid extendedFieldLength\n                    }\n                    break;\n                case 0xFE:\n                    if (tlvDataLength == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (tlvDataLength == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else if (tlvDataLength > 0) { // Must be at least 1 for mark\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) { // Another sub-TLV structure\n                            // Each sub-item: type(1) + len(1) + data(len)\n                            while (buf.readerIndex() < tlvEndIndex && (tlvEndIndex - buf.readerIndex()) >= 2) { // Min 2 for type+len\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedFieldLength = buf.readUnsignedByte();\n                                if (buf.readerIndex() + extendedFieldLength <= tlvEndIndex) {\n                                    switch (extendedType) {\n                                        case 0x01: // alarms (4 bytes)\n                                            if (extendedFieldLength >= 4) {\n                                                long alarms = buf.readUnsignedInt();\n                                                if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                                if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                                if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                                if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                                if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                            } else { buf.skipBytes(extendedFieldLength); }\n                                            break;\n                                        default: buf.skipBytes(extendedFieldLength); break;\n                                    }\n                                } else { buf.readerIndex(tlvEndIndex); break; } // Invalid extendedFieldLength\n                            }\n                        } else { // If mark is not 0x7C, it might be part of data or an error.\n                                 // The original code has battery level read *after* this sub-TLV loop\n                                 // This seems problematic. Re-evaluating based on original.\n                                 // Original: `position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());` was outside `if (mark == 0x7C)`.\n                                 // This means it expects a battery level byte at the end of the 0xFE payload regardless of `mark`.\n                                 // The current loop structure for `mark == 0x7C` consumes bytes.\n                                 // If `mark != 0x7C`, then `buf.readUnsignedByte()` for battery level should use the byte *after* `mark`.\n                                 // This means the `mark` byte itself was not the battery level.\n                                 // The `else` for `if (tlvDataLength == 2)` was `position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());`\n                                 // This suggests if `tlvDataLength > 2`, it attempts the mark logic, THEN reads battery.\n                                 // So, the final battery read should be outside the if(mark==0x7C), but conditional on remaining bytes.\n\n                            // If after parsing sub-TLVs (if any), or if mark was not 0x7C (and we skipped reading mark),\n                            // we attempt to read a final byte for battery level if it fits.\n                            // The original code read it unconditionally if length > 2.\n                            // The `mark` was read if length > 2.\n                            // If `mark != 0x7C`, it implicitly skipped the sub-TLV parsing loop.\n                            // Then `position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());` executed.\n                            // This means `buf.readerIndex()` should be correctly positioned.\n\n                            // If mark != 0x7C, current buf.readerIndex is after reading 'mark'.\n                            // If mark == 0x7C, current buf.readerIndex is after the inner loop.\n                            // In both cases, if there's a byte left AT THE END OF THE TLV, it's battery.\n                            // This is difficult to express cleanly with current structure.\n                            // Let's assume the final byte of the TLV is battery if length > 2 and not consumed by 0x7C loop.\n                            // This part of 0xFE is complex and might need actual device logs/spec.\n                            // For now, keeping original logic for the final battery read:\n                            if (buf.readerIndex() < tlvEndIndex) { // If there's still data left in this TLV\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    // Data for unknown subtypes will be skipped by buf.readerIndex(tlvEndIndex)\n                    break;\n            }\n            // Ensure readerIndex is advanced to the end of current TLV's processed data section.\n            // This skips any unread parts of the TLV data block, or if tlvDataLength was capped.\n            buf.readerIndex(tlvEndIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}