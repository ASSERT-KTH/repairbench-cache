{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            // Prevent reading past buffer end if length is invalid\n            if (endIndex > buf.writerIndex()) {\n                // Log error or break? Let's break to prevent further issues.\n                // Log.warn(\"Invalid TLV length in Huabao decoder\"); // Assuming Log is available\n                break;\n            }\n\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    if (length >= 2) position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    if (length >= 4) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    if (length >= 1) position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    if (length >= 1) position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    // Check length before reading CharSequence\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\")) {\n                            if (stringValue.length() >= 15) { // Check length for substring\n                                String lockStatus = stringValue.substring(8, 8 + 7);\n                                if (lockStatus.length() >= 5) { // Check length for inner substring\n                                    try {\n                                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                    } catch (NumberFormatException e) {\n                                        // Handle parsing error if needed\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x56:\n                    if (length >= 2) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                        buf.readUnsignedByte(); // reserved\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    // relies on readerIndex(endIndex) below to skip remaining bytes\n                    break;\n                case 0x69:\n                    if (length >= 2) position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    // Original logic was buggy, rely on default skip via readerIndex(endIndex) for now\n                    // buf.readUnsignedByte(); // content\n                    // endIndex = buf.writerIndex() - 2; // Incorrect endIndex calculation\n                    // decodeExtension(position, buf, endIndex); // Cannot call correctly\n                    break; // Fall through to default skip logic\n                case 0x91:\n                    if (length >= 24) { // Check length for all fields\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // Skip 2\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // Skip 2\n                        buf.readUnsignedInt();   // Skip 4\n                        buf.readUnsignedShort(); // Skip 2\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                     if (length > 0 && buf.readableBytes() >= length) {\n                        // Use ISO-8859-1 based on analysis for 0xBD, plus trim.\n                        stringValue = buf.readCharSequence(length, StandardCharsets.ISO_8859_1).toString().trim();\n                        position.set(\"driver\", stringValue);\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        // FIX: Use ISO-8859-1 based on test value \"\\u0090...\" and add trim\n                        stringValue = buf.readCharSequence(length, StandardCharsets.ISO_8859_1).toString().trim();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    if (length >= 1) position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Check length before reading count\n                        int count = buf.readUnsignedByte();\n                        int expectedMinLength = 1 + count * (5 + 5 + 1 + 2); // 1 for count, 13 per item\n                        // Ensure enough bytes declared by length and available in buffer\n                        if (expectedMinLength <= length && buf.readableBytes() >= expectedMinLength - 1) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3) { // Needs 2 (count) + 1 (status)\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    int itemSizeE6 = 1 + 6 + 8 + 8; // index + mac + temp + hum = 23 bytes\n                    while (buf.readerIndex() <= endIndex - itemSizeE6) { // Check space for one item\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // Keep close to original logic but add safety checks\n                    if (length >= 2) { // Need at least 2 bytes to check MCC\n                        int mccCheck = buf.getUnsignedShort(buf.readerIndex());\n                        if (mccCheck > 200 && length >= 3) { // Cell Tower data path check\n                            Network network = new Network();\n                            int mcc = buf.readUnsignedShort();\n                            int mnc = buf.readUnsignedByte();\n                            int itemSizeCell = 2 + 2 + 1; // lac + cid + rssi = 5 bytes\n                            while (buf.readerIndex() <= endIndex - itemSizeCell) { // Check space for one cell\n                                network.addCellTower(CellTower.from(\n                                        mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                        buf.readUnsignedByte()));\n                            }\n                            // Only set network if we haven't overread the TLV item boundary\n                            if (buf.readerIndex() <= endIndex) {\n                                position.setNetwork(network);\n                            }\n                        } else { // Nested TLV data path\n                            while (buf.readerIndex() <= endIndex - 4) { // Need 4 for nested type+length\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                int extendedValueEndIndex = buf.readerIndex() + extendedLength;\n                                if (extendedValueEndIndex > endIndex) break; // Check bounds\n\n                                // Process nested types with length checks\n                                switch (extendedType) {\n                                    case 0x0001: if(extendedLength == 3){ position.set(\"fuel1\", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } else { buf.skipBytes(extendedLength); } break;\n                                    case 0x0023: if(extendedLength == 6){ try { position.set(\"fuel2\", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (Exception e) { buf.skipBytes(extendedLength);/* ignore parse error, skip */ } } else { buf.skipBytes(extendedLength); } break;\n                                    case 0x00CE: if(extendedLength == 2){ position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } else { buf.skipBytes(extendedLength); } break;\n                                    case 0x00D8: if(extendedLength == 9){ Network network = new Network(); network.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(network); } else { buf.skipBytes(extendedLength); } break;\n                                    case 0xE1: if(extendedLength == 1){ position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } else { buf.skipBytes(extendedLength); } break;\n                                    default: buf.skipBytes(extendedLength); break;\n                                }\n                                // Ensure reader index is correct after processing nested item\n                                if (buf.readerIndex() < extendedValueEndIndex && extendedValueEndIndex <= endIndex) {\n                                    buf.readerIndex(extendedValueEndIndex);\n                                } else if (buf.readerIndex() > extendedValueEndIndex) {\n                                    break; // Avoid infinite loop if overread occurred\n                                }\n                            }\n                        }\n                    }\n                    break; // End case 0xEB\n                case 0xED:\n                    if (length > 0 && buf.readableBytes() >= length) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    if (length >= 6) { // Needs 1(rssi)+2(power)+2(battery)+1(sat)\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3:\n                     while (buf.readerIndex() <= endIndex - 3) { // Need 3 for nested type+length\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        int extendedValueEndIndex = buf.readerIndex() + extendedLength;\n                        if (extendedValueEndIndex > endIndex) break; // Check bounds\n\n                        // Process nested types with length checks\n                        switch (extendedType) {\n                            case 0x0002: if(extendedLength == 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0003: if(extendedLength == 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x0004: if(extendedLength == 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); else buf.skipBytes(extendedLength); break;\n                            case 0x0005: if(extendedLength == 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); else buf.skipBytes(extendedLength); break;\n                            case 0x0007: if(extendedLength == 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0008: if(extendedLength == 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0009: if(extendedLength == 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;\n                            case 0x000B: if(extendedLength == 2) position.set(\"intakePressure\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x000C: if(extendedLength == 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;\n                            case 0x000D: if(extendedLength == 2) position.set(\"intakeFlow\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x000E: if(extendedLength == 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); else buf.skipBytes(extendedLength); break;\n                            case 0x0050: if(extendedLength == 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedLength); break;\n                            case 0x0100: if(extendedLength == 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0102: if(extendedLength == 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;\n                            case 0x0112: if(extendedLength == 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x0113: if(extendedLength == 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            case 0x0114: if(extendedLength == 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;\n                            default: buf.skipBytes(extendedLength); break;\n                        }\n                         // Ensure reader index is correct after processing nested item\n                        if (buf.readerIndex() < extendedValueEndIndex && extendedValueEndIndex <= endIndex) {\n                            buf.readerIndex(extendedValueEndIndex);\n                        } else if (buf.readerIndex() > extendedValueEndIndex) {\n                             break; // Avoid infinite loop if overread occurred\n                        }\n                    }\n                    break; // End case 0xF3\n                case 0xFE:\n                    // Keep original FE logic exactly, adding bounds check for safety\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else if (length > 2) { // Check length before reading mark\n                        int mark = buf.readUnsignedByte();\n                        int currentEndIndex = endIndex; // Use original endIndex for bounds checks\n                        if (mark == 0x7C) {\n                             while (buf.readerIndex() <= currentEndIndex - 2) { // Need 2 for nested TL\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int extendedValueEndIndex = buf.readerIndex() + extendedLength;\n                                if (extendedValueEndIndex > currentEndIndex) break; // Check bounds\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLength == 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }\n                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }\n                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }\n                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }\n                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }\n                                        } else { buf.skipBytes(extendedLength); }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                                // Ensure reader index is correct after processing nested item\n                                if (buf.readerIndex() < extendedValueEndIndex && extendedValueEndIndex <= currentEndIndex) {\n                                    buf.readerIndex(extendedValueEndIndex);\n                                } else if (buf.readerIndex() > extendedValueEndIndex) {\n                                    break; // Avoid infinite loop if overread occurred\n                                }\n                            }\n                        }\n                        // Original code reads battery level if length > 2, after potential 0x7C block\n                        // Check if there's exactly one byte remaining before original endIndex\n                        if (buf.readerIndex() == currentEndIndex - 1) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break; // End case 0xFE\n                default:\n                    // Skip unknown subtypes by advancing reader index below\n                    break;\n            }\n\n            // Set reader index to the end of the TLV item.\n            // Handles skipping remaining bytes in handled cases and skips unknown/default subtypes.\n            if (buf.readerIndex() < endIndex) {\n                buf.readerIndex(endIndex);\n            } else if (buf.readerIndex() > endIndex) {\n                // If we read past endIndex (e.g., due to bug in case logic or bad length),\n                // log it or break? For robustness, let loop condition handle exit.\n                // Log.warn(\"Reader index exceeded endIndex in Huabao decoder\");\n            }\n\n        } // End while loop\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}