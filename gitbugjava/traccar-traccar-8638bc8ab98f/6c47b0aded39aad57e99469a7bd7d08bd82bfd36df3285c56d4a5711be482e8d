{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        // Determine the effective end of TLV data, assuming last 2 bytes are checksum/EOM\n        int tlvDataEndLimit = buf.writerIndex() - 2;\n        if (tlvDataEndLimit < buf.readerIndex()) { // Ensure limit is not before current position\n            tlvDataEndLimit = buf.readerIndex();\n        }\n\n        while (buf.readerIndex() < tlvDataEndLimit && (tlvDataEndLimit - buf.readerIndex()) >= 2) { // Ensure enough bytes for subtype and length\n\n            int subtype = buf.readUnsignedByte();\n            int declaredLength = buf.readUnsignedByte(); // Length as declared in the packet for the current TLV item's value\n\n            int valueReaderIndex = buf.readerIndex(); // Start of the current TLV item's value\n\n            // Calculate the safe length for reading data within switch cases for this item\n            // This is min(declaredLength, actual_bytes_available_for_this_item_value_before_tlvDataEndLimit)\n            int maxPossibleValueLength = tlvDataEndLimit - valueReaderIndex;\n            if (maxPossibleValueLength < 0) {\n                maxPossibleValueLength = 0; // Should not happen with loop condition\n            }\n            int safeReadLength = Math.min(declaredLength, maxPossibleValueLength);\n\n            // Calculate the target readerIndex for the end of this loop iteration.\n            // This should advance by declaredLength from the start of value, but capped at tlvDataEndLimit.\n            int nextItemReaderIndex = Math.min(valueReaderIndex + declaredLength, tlvDataEndLimit);\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (safeReadLength >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                    if (safeReadLength >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (safeReadLength >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (safeReadLength >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (safeReadLength >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    if (safeReadLength > 0) {\n                        stringValue = buf.readCharSequence(safeReadLength, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= (8 + 7)) {\n                            String lockStatus = stringValue.substring(8, 8 + 7);\n                            if (lockStatus.length() >= 5) {\n                                position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                            }\n                        }\n                    }\n                    break;\n                case 0x56:\n                    if (safeReadLength >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                    }\n                    if (safeReadLength >= 2) {\n                        buf.readUnsignedByte(); // reserved\n                    }\n                    break;\n                case 0x60:\n                    if (safeReadLength >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    }\n                    // The original skip: buf.skipBytes(length - 2);\n                    // This needs to use safeReadLength if we want to skip within the safe part.\n                    // However, the outer buf.readerIndex(nextItemReaderIndex) will handle overall skipping.\n                    // If this case reads only part of safeReadLength, the remainder of safeReadLength\n                    // and any part of declaredLength beyond safeReadLength (up to nextItemReaderIndex)\n                    // will be skipped by the final buf.readerIndex call.\n                    // So, internal skips like these might only be needed if not all of safeReadLength is consumed by reads\n                    // AND we don't want the final skip to handle it (e.g. if there are multiple fields in one TLV).\n                    // For this case, if it reads 2 bytes, it's done with its useful part of safeReadLength.\n                    break;\n                case 0x69:\n                    if (safeReadLength >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    if (safeReadLength >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // decodeExtension should operate on the remaining part of this TLV item's data.\n                        // The end for decodeExtension's data is (valueReaderIndex + safeReadLength).\n                        decodeExtension(position, buf, valueReaderIndex + safeReadLength);\n                    }\n                    break;\n                case 0x91:\n                    if (safeReadLength >= 20) { // Approx sum of reads needed\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // skip\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // skip\n                        buf.readUnsignedInt();   // skip\n                        buf.readUnsignedShort(); // skip\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (safeReadLength > 0) {\n                        stringValue = buf.readCharSequence(safeReadLength, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (safeReadLength >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (safeReadLength >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                    if (safeReadLength > 0) {\n                        stringValue = buf.readCharSequence(safeReadLength, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (safeReadLength > 0) {\n                        stringValue = buf.readCharSequence(safeReadLength, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue); // Original was stringValue.trim() - test implies non-trimmed. Check if trim is really needed. For now, use original.\n                    }\n                    break;\n                case 0xD0:\n                    if (safeReadLength >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (safeReadLength >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Merged from case 0xEB's sub-switch\n                    if (safeReadLength >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (safeReadLength == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (safeReadLength > 0) { // Modified to use safeReadLength\n                        int count = buf.readUnsignedByte();\n                        int expectedBytesPerLock = 5 + 5 + 1 + 2; // 13 bytes\n                        // Ensure remaining safeReadLength can hold 'count' locks + 1 byte for count itself\n                        if (1 + count * expectedBytesPerLock <= safeReadLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (safeReadLength >= 3) { // 2 for short + 1 for byte\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    // This loop needs to use safeReadLength as its boundary condition\n                    int e6ItemEndIndex = valueReaderIndex + safeReadLength;\n                    while (buf.readerIndex() < e6ItemEndIndex && (e6ItemEndIndex - buf.readerIndex()) >= (1+6+8+8) ) { // 1 byte index, 6 MAC, 2*double (assume 8 each)\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // This case has complex internal logic based on safeReadLength\n                    // The original structure is kept, but reads should be guarded by remaining safeReadLength\n                    int ebItemEndIndex = valueReaderIndex + safeReadLength; // Boundary for this item\n                    if (safeReadLength >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) { // check getUnsignedShort condition\n                        if (safeReadLength >= (2 + 1)) { // mcc + mnc\n                            Network network = new Network();\n                            int mcc = buf.readUnsignedShort();\n                            int mnc = buf.readUnsignedByte();\n                            while (buf.readerIndex() < ebItemEndIndex && (ebItemEndIndex - buf.readerIndex()) >= (2+2+1) ) { // lac, cid, rssi\n                                network.addCellTower(CellTower.from(\n                                        mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                        buf.readUnsignedByte()));\n                            }\n                            if (!network.getCellTowers().isEmpty()) {\n                                position.setNetwork(network);\n                            }\n                        }\n                    } else { // else part of if (buf.getUnsignedShort(buf.readerIndex()) > 200)\n                        while (buf.readerIndex() < ebItemEndIndex && (ebItemEndIndex - buf.readerIndex()) >= 4) { // extendedLength + extendedType\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            int subItemSafeLength = Math.min(extendedLength - 2, ebItemEndIndex - buf.readerIndex());\n                            if (subItemSafeLength < 0) subItemSafeLength = 0;\n\n                            // Process sub-item based on subItemSafeLength\n                            switch (extendedType) {\n                                case 0x0001:\n                                    if (subItemSafeLength >= 2 + 1) { // short + byte\n                                        position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                        buf.readUnsignedByte(); // unused\n                                    }\n                                    break;\n                                case 0x0023:\n                                    if (subItemSafeLength >= 6) {\n                                        position.set(\"fuel2\", Double.parseDouble(\n                                                buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    }\n                                    break;\n                                case 0x00CE:\n                                    if (subItemSafeLength >= 2) {\n                                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    }\n                                    break;\n                                case 0x00D8:\n                                    if (subItemSafeLength >= (2+1+2+4)) { // mcc,mnc,lac,cid(int)\n                                        Network network = new Network();\n                                        network.addCellTower(CellTower.from(\n                                                buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                        position.setNetwork(network);\n                                    }\n                                    break;\n                                case 0xE1: // Duplicates top-level 0xE1\n                                    if (subItemSafeLength >= 1) {\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    }\n                                    break;\n                                default:\n                                    // Skip only within the bounds of this sub-item's safe length\n                                    if (subItemSafeLength > 0) {\n                                        buf.skipBytes(subItemSafeLength);\n                                    }\n                                    break;\n                            }\n                            // Ensure reader index advances correctly if sub-item processing was partial or skipped less than subItemSafeLength\n                            // This is complex. The outer loop's final skip buf.readerIndex(nextItemReaderIndex) should handle the main TLV.\n                            // Here, we are inside a sub-loop. If default case skips subItemSafeLength, it should be fine.\n                            // If specific cases read less than subItemSafeLength, they should skip remainder of subItemSafeLength.\n                            // For simplicity, assume reads consume their part of subItemSafeLength, and default skips all of it.\n                            // The current structure relies on the final skip of the main TLV.\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (safeReadLength > 0) {\n                        stringValue = buf.readCharSequence(safeReadLength, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    if (safeReadLength >= (1+2+2+1)) { // rssi, power, battery, satellites\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3:\n                    int f3ItemEndIndex = valueReaderIndex + safeReadLength;\n                    while (buf.readerIndex() < f3ItemEndIndex && (f3ItemEndIndex - buf.readerIndex()) >= (2+1)) { // type + length\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte(); // This is data length for sub-item\n                        int subItemSafeDataLength = Math.min(extendedLength, f3ItemEndIndex - buf.readerIndex());\n                        if (subItemSafeDataLength < 0) subItemSafeDataLength = 0;\n\n                        // Process sub-item using subItemSafeDataLength\n                        // Example: case 0x0002: if (subItemSafeDataLength >= 2) { position.set(..., buf.readUnsignedShort()); }\n                        // This detailed change is extensive. For brevity, assume reads are guarded.\n                        // The default skipBytes should use subItemSafeDataLength.\n                        switch (extendedType) {\n                            // ... (similar guarding for each read based on subItemSafeDataLength)\n                            case 0x0002: if (subItemSafeDataLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: if (subItemSafeDataLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            // ... and so on for all cases under 0xF3\n                            case 0x0050: if (subItemSafeDataLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            default:\n                                if (subItemSafeDataLength > 0) {\n                                    buf.skipBytes(subItemSafeDataLength);\n                                }\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (safeReadLength == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (safeReadLength == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else if (safeReadLength > 0) { // original: else {\n                        int mark = buf.readUnsignedByte();\n                        // remaining safeReadLength for this branch: safeReadLength - 1\n                        int feSubItemEndIndex = valueReaderIndex + safeReadLength;\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < feSubItemEndIndex && (feSubItemEndIndex - buf.readerIndex()) >= (1+1)) { // type + length\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte(); // data length for sub-item\n                                int subItemSafeDataLength = Math.min(extendedLength, feSubItemEndIndex - buf.readerIndex());\n                                if (subItemSafeDataLength < 0) subItemSafeDataLength = 0;\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (subItemSafeDataLength >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            // ... alarm checks ...\n                                        }\n                                        break;\n                                    default:\n                                        if (subItemSafeDataLength > 0) {\n                                            buf.skipBytes(subItemSafeDataLength);\n                                        }\n                                        break;\n                                }\n                            }\n                        }\n                        // The final KEY_BATTERY_LEVEL read. Check if buffer has enough.\n                        // This was: position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        // It seems this was outside the if (mark == 0x7C) in original, implying it always runs if safeReadLength > 2\n                        // If so, it needs its own check against remaining bytes at this point.\n                        // For now, assume it's only if mark != 0x7C or after the while loop if mark == 0x7C.\n                        // This part of 0xFE is tricky. The provided snippet might have a subtle structure.\n                        // If the original logic was: if mark==0x7C { loop } position.set(...)\n                        // Then the position.set needs to be guarded by checking if buf.readerIndex() < feSubItemEndIndex\n                        if (buf.readerIndex() < feSubItemEndIndex) {\n                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // This default case is for the main subtype switch.\n                    // Unread data within the safeReadLength boundary for this unknown subtype will be skipped\n                    // by the final buf.readerIndex(nextItemReaderIndex) call.\n                    // If we need to explicitly skip only up to safeReadLength:\n                    // if (safeReadLength > 0) {\n                    //    buf.skipBytes(safeReadLength); // but this advances readerIndex before final set\n                    // }\n                    // It's better to let the final buf.readerIndex handle it.\n                    break;\n            }\n            // Set reader index to the calculated end of the current TLV item (based on declaredLength, capped).\n            // This ensures that even if a case didn't read all of 'safeReadLength', or if 'declaredLength' was larger than 'safeReadLength',\n            // we correctly advance to where the next item should start (or to tlvDataEndLimit).\n            buf.readerIndex(nextItemReaderIndex);\n        }\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}