{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        // Speed conversion might need adjustment based on specific device variant if issues persist\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        // Handle potential fixed-format message variant\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); // remaining battery and mileage (alternative format/location)\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000); // Odometer factor might vary\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1); // Battery factor might vary\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n            return position;\n        }\n\n        // Handle TLV formatted extension data\n        while (buf.readableBytes() > 2) { // Ensure at least subtype and length can be read\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            // Ensure endIndex does not exceed buffer bounds to prevent OOB read attempts\n            if (endIndex > buf.writerIndex()) {\n                 // Log warning or break? Skipping might be safer if length is corrupt.\n                 // Log.warn(\"Invalid TLV length: \" + length + \", subtype: \" + subtype);\n                 break; // Stop processing TLVs if length is invalid\n            }\n\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                    if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                     if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                     }\n                    break;\n                case 0x30:\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                     if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                     }\n                    break;\n                case 0x33:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) {\n                            try {\n                                String lockStatus = stringValue.substring(8, 8 + 7);\n                                position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                            } catch (IndexOutOfBoundsException | NumberFormatException e) {\n                                // Log parse error\n                            }\n                        }\n                    }\n                    break;\n                case 0x56:\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                    }\n                    if (length >= 2) {\n                        buf.readUnsignedByte(); // reserved\n                    }\n                    break;\n                case 0x60:\n                     if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                     }\n                     // Skip remaining bytes explicitly if any, though readerIndex(endIndex) handles it\n                     // buf.skipBytes(length - 2); // No need if readerIndex is set correctly below\n                    break;\n                case 0x69:\n                     if (length >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                     }\n                    break;\n                case 0x80:\n                    // The original endIndex calculated based on length is correct for this TLV item.\n                    // The faulty endIndex = buf.writerIndex() - 2; is removed.\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content byte, consume it as original code did\n                        // Assuming decodeExtension reads from current position up to endIndex\n                        decodeExtension(position, buf, endIndex);\n                    }\n                    // Let the main loop advance the readerIndex to endIndex.\n                    break;\n                case 0x91:\n                     // Check length >= required bytes (2+2+1+1+1+1+2+2+2+4+2+2 = 24)\n                     if (length >= 24) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255.0); // Use double division\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255.0); // Use double division\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // MAF?\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // ?\n                        buf.readUnsignedInt();  // ?\n                        buf.readUnsignedShort(); // ?\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                     }\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue.trim()); // Trim added\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Combined case if logic is identical\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length >= 1) { // Minimum length for count byte\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // Calculate expected length\n                        if (length >= expectedLength) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3) { // Check length\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6:\n                    // length should be multiple of (1 + 6 + 8 + 8) = 23? No, double is custom\n                    // length should be multiple of (1 + 6 + size(double) + size(double))\n                    // Assume decodeCustomDouble reads 8 bytes? length multiple of 1+6+8+8 = 23\n                    while (buf.readerIndex() < endIndex) {\n                        // Need check here to prevent reading past endIndex if structure is wrong\n                        if (buf.readableBytes() < 1 + 6 + 8 + 8) break; // Assuming 8 bytes per double\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    // This case has complex nested/alternative structures. Needs careful validation.\n                    if (length > 0) { // Basic check\n                        // Check if it looks like cell tower data based on first short\n                        if (buf.getUnsignedShort(buf.readerIndex()) > 200 && length >= 3) { // Possible cell tower\n                            Network network = new Network();\n                            int mcc = buf.readUnsignedShort();\n                            int mnc = buf.readUnsignedByte();\n                            // Ensure length matches expected cell tower structure size\n                            // Size = 2(mcc) + 1(mnc) + N * (2(lac) + 2(cid) + 1(rssi)) = 3 + N*5\n                            if ((length - 3) % 5 == 0) {\n                                while (buf.readerIndex() < endIndex) {\n                                    network.addCellTower(CellTower.from(\n                                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                            buf.readUnsignedByte()));\n                                }\n                                if (!network.getCellTowers().isEmpty()) {\n                                    position.setNetwork(network);\n                                }\n                            }\n                        } else { // Assume extended TLV format\n                            while (buf.readerIndex() < endIndex - 3) { // Need at least len+type (4 bytes)\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                int extendedEndIndex = buf.readerIndex() + extendedLength - 2; // Data ends here\n\n                                // Validate nested length and indices\n                                if (extendedLength < 2 || extendedEndIndex > endIndex) {\n                                    // Log.warn(\"Invalid nested TLV length/type in 0xEB\");\n                                    break; // Corrupt nested TLV\n                                }\n\n                                switch (extendedType) {\n                                    case 0x0001: // Fuel 1\n                                        if (extendedLength >= 2 + 1) { // short + byte\n                                            position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                            buf.readUnsignedByte(); // unused\n                                        }\n                                        break;\n                                    case 0x0023: // Fuel 2\n                                         if (extendedLength >= 6) { // Assuming fixed length 6 for string\n                                             try {\n                                                position.set(\"fuel2\", Double.parseDouble(\n                                                    buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                             } catch (NumberFormatException e) { /* ignore */ }\n                                         }\n                                        break;\n                                    case 0x00CE: // Power\n                                         if (extendedLength >= 2) {\n                                            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                         }\n                                        break;\n                                    case 0x00D8: // Network (single cell)\n                                        if (extendedLength >= 2 + 1 + 2 + 4) { // mcc,mnc,lac,cid\n                                            Network network = new Network();\n                                            network.addCellTower(CellTower.from(\n                                                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                    buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                            position.setNetwork(network);\n                                        }\n                                        break;\n                                    case 0xE1: // Battery Level (nested) - same as top level 0xE1\n                                         if (extendedLength >= 1) {\n                                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                         }\n                                        break;\n                                    default:\n                                        // Skip unknown nested types correctly\n                                        // buf.skipBytes(extendedLength - 2); // Already handled by readerIndex advance below\n                                        break;\n                                }\n                                // Ensure reader index is set to end of nested item, even if skipped/failed\n                                buf.readerIndex(extendedEndIndex);\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    if (length >= 1 + 2 + 2 + 1) { // rssi, power, battery, satellites\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3:\n                     // Nested TLV: Type (WORD), Length (BYTE)\n                     while (buf.readerIndex() < endIndex - 2) { // Need at least type+len (3 bytes)\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        int extendedEndIndex = buf.readerIndex() + extendedLength;\n\n                        // Validate nested length and indices\n                        if (extendedEndIndex > endIndex) {\n                            // Log.warn(\"Invalid nested TLV length/type in 0xF3\");\n                            break; // Corrupt nested TLV\n                        }\n\n                        switch (extendedType) {\n                            case 0x0002: if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;\n                            case 0x0007: if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: if (extendedLength >= 2) position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: if (extendedLength >= 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: if (extendedLength >= 2) position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: if (extendedLength >= 1) position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255); break; // Original read short? Check spec. Assuming byte.\n                            case 0x0050: if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: if (extendedLength >= 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: if (extendedLength >= 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: if (extendedLength >= 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: if (extendedLength >= 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: break; // Skip unknown nested types handled by readerIndex advance below\n                        }\n                         // Ensure reader index is set to end of nested item\n                         buf.readerIndex(extendedEndIndex);\n                    }\n                    break;\n                case 0xFE:\n                    // Structure depends on length and potentially a mark byte\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else if (length >= 1) { // length >= 3 implicitly from outer checks\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            // Nested structure: Type (BYTE), Length (BYTE)\n                            while (buf.readerIndex() < endIndex - 1) { // Need at least type+len (2 bytes)\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                int extendedEndIndex = buf.readerIndex() + extendedLength;\n\n                                // Validate nested length and indices\n                                if (extendedEndIndex > endIndex) {\n                                     // Log.warn(\"Invalid nested TLV length/type in 0xFE\");\n                                     break; // Corrupt nested TLV\n                                }\n\n                                switch (extendedType) {\n                                    case 0x01: // Alarms\n                                        if (extendedLength >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            // Set specific alarms based on bits\n                                            if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            // ... check other relevant alarm bits ...\n                                            if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default: break; // Skip unknown nested types handled below\n                                }\n                                // Ensure reader index is set to end of nested item\n                                buf.readerIndex(extendedEndIndex);\n                            }\n                        } else {\n                            // If mark is not 0x7C, assume the byte *after* mark is battery level\n                            // Reader index is already past mark. Check if we are still within TLV bounds.\n                            if (buf.readerIndex() < endIndex) {\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype, skip length bytes handled by readerIndex advance below\n                    break;\n            }\n            // Ensure reader index is advanced to the end of the TLV item,\n            // even if processing failed or didn't consume all bytes.\n            // This prevents infinite loops or incorrect parsing of subsequent TLVs.\n            if (buf.readerIndex() > endIndex) {\n                // Log.warn(\"Reader index exceeded endIndex after processing subtype: \" + subtype);\n                // Consider breaking the loop if this happens, indicates a severe parsing error in a case\n                break;\n            }\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}