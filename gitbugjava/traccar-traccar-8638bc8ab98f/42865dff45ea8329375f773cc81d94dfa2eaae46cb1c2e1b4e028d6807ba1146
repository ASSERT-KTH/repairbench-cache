{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) { // Assuming this specific length implies a fixed format\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        while (buf.readableBytes() > 2) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n\n            // Ensure that any attempt to read from 'buf' within a case\n            // does not exceed 'length' bytes for that specific field.\n            // The buf.readerIndex(endIndex) call at the end of the loop\n            // will ensure the buffer is correctly advanced past this TLV item.\n\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    }\n                    break;\n                case 0x02:\n                    if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0x2b:\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) { // Min length for \"*M00\" + 7 char lockStatus + other parts\n                            String lockStatus = stringValue.substring(8, 8 + 7); // lockStatus is 7 chars\n                            // Integer.parseInt needs a non-empty string. substring(2,5) gives 3 chars.\n                            position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                        }\n                    }\n                    break;\n                case 0x56:\n                    if (length >= 2) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                        buf.readUnsignedByte(); // reserved\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        if (length > 2) {\n                             // buf.skipBytes(length - 2); // This skip is actually handled by buf.readerIndex(endIndex) later\n                        }\n                    }\n                    break;\n                case 0x69:\n                    if (length >= 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    // This case has unusual logic with endIndex. Assuming it's intentional for this specific subtype.\n                    // If length is too small for readUnsignedByte, it's an issue.\n                    if (length >= 1) {\n                        buf.readUnsignedByte(); // content\n                        // Original code: endIndex = buf.writerIndex() - 2;\n                        // This local 'endIndex' is different from the one used by buf.readerIndex(endIndex) later.\n                        // For decodeExtension, we should use the TLV length.\n                        decodeExtension(position, buf, buf.readerIndex() + (length - 1)); // Pass remaining length\n                    }\n                    break;\n                case 0x91:\n                    // Total 23 bytes: 2+2+1+1+1+1+2+2+2+4+2+2\n                    if (length >= 23) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // unknown\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // unknown\n                        buf.readUnsignedInt();   // unknown\n                        buf.readUnsignedShort(); // unknown\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    if (length >= 4) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC:\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD:\n                    if (length > 0) {\n                        // Consider if ISO_8859_1 is more appropriate if non-US-ASCII chars like \\u0090 are expected\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0:\n                    if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                    }\n                    break;\n                case 0xD3:\n                    if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    }\n                    break;\n                case 0xD4:\n                case 0xE1: // Combined case\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 0) { // Must have at least 1 byte for count\n                        int count = buf.readUnsignedByte();\n                        // Check if length is sufficient for 'count' records\n                        // Each record: 5 (Id) + 5 (Card) + 1 (Battery) + 2 (status) = 13 bytes\n                        if (length >= 1 + count * 13) {\n                            for (int i = 1; i <= count; i++) {\n                                position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                                position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                                int status = buf.readUnsignedShort();\n                                position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                            }\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    if (length >= 3) { // 2 for short, 1 for byte\n                        buf.readUnsignedShort(); // string cut count\n                        int deviceStatus = buf.readUnsignedByte();\n                        position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                        position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6: // Loop processes data up to endIndex, inherently respecting length\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes() < 1 + 6 + 8 + 8 && buf.readerIndex() + (1+6+8+8) <= endIndex) { // decodeCustomDouble assumed 8 bytes\n                             break; // Not enough data for a full record within declared length\n                        }\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB: // Complex nested structure, original logic seems to handle lengths internally.\n                           // Add top-level check for initial reads if any.\n                    if (length > 0) { // Ensure there's data to process\n                        if (buf.getUnsignedShort(buf.readerIndex()) > 200) { // Check for readable short first\n                            if (length < 2) break; // Not enough for the getUnsignedShort and subsequent reads\n                            Network network = new Network();\n                            if (length < 3) break; // Not enough for mcc/mnc\n                            int mcc = buf.readUnsignedShort();\n                            int mnc = buf.readUnsignedByte();\n                            while (buf.readerIndex() < endIndex) { // Loop for cell towers\n                                if (buf.readerIndex() + 2 + 2 + 1 > endIndex && buf.readableBytes() < 2+2+1) break; // CellTower.from reads 2+2+1=5 bytes\n                                network.addCellTower(CellTower.from(\n                                        mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                        buf.readUnsignedByte()));\n                            }\n                            if (!network.getCellTowers().isEmpty()) {\n                                position.setNetwork(network);\n                            }\n                        } else {\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readerIndex() + 4 > endIndex && buf.readableBytes() < 4) break; // For extendedLength, extendedType\n                                int extendedLength = buf.readUnsignedShort();\n                                int extendedType = buf.readUnsignedShort();\n                                int expectedContentLength = extendedLength - 2; // Type itself is 2 bytes.\n                                if (buf.readerIndex() + expectedContentLength > endIndex || expectedContentLength < 0) break; // Data overrun or invalid length\n\n                                switch (extendedType) {\n                                    case 0x0001: // fuel1 (2 bytes) + unused (1 byte) = 3 bytes\n                                        if (expectedContentLength >= 3) {\n                                            position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                            buf.readUnsignedByte(); // unused\n                                        } else { buf.skipBytes(expectedContentLength); }\n                                        break;\n                                    case 0x0023: // fuel2 (6 bytes char)\n                                        if (expectedContentLength >= 6) {\n                                            position.set(\"fuel2\", Double.parseDouble(\n                                                    buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                        } else { buf.skipBytes(expectedContentLength); }\n                                        break;\n                                    case 0x00CE: // power (2 bytes)\n                                        if (expectedContentLength >= 2) {\n                                            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                        } else { buf.skipBytes(expectedContentLength); }\n                                        break;\n                                    case 0x00D8: // CellTower (2+1+2+4 = 9 bytes)\n                                        if (expectedContentLength >= 9) {\n                                            Network network = new Network();\n                                            network.addCellTower(CellTower.from(\n                                                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                                    buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                            position.setNetwork(network);\n                                        } else { buf.skipBytes(expectedContentLength); }\n                                        break;\n                                    case 0xE1: // battery level (1 byte)\n                                        if (expectedContentLength >= 1) {\n                                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                        } else { buf.skipBytes(expectedContentLength); }\n                                        break;\n                                    default:\n                                        buf.skipBytes(expectedContentLength);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE:\n                    if (length >= 6) { // 1+2+2+1\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xF3: // Loop processes data up to endIndex. Inner items have their own length field.\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readerIndex() + 3 > endIndex && buf.readableBytes() < 3) break; // For extendedType, extendedLength\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLengthPayload = buf.readUnsignedByte(); // This is length of data part for extendedType\n                        if (buf.readerIndex() + extendedLengthPayload > endIndex) break; // Data overrun\n\n                        switch (extendedType) {\n                            case 0x0002: if (extendedLengthPayload >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0003: if (extendedLengthPayload >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0004: if (extendedLengthPayload >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0005: if (extendedLengthPayload >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0007: if (extendedLengthPayload >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0008: if (extendedLengthPayload >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0009: if (extendedLengthPayload >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x000B: if (extendedLengthPayload >= 2) position.set(\"intakePressure\", buf.readUnsignedShort()); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x000C: if (extendedLengthPayload >= 2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x000D: if (extendedLengthPayload >= 2) position.set(\"intakeFlow\", buf.readUnsignedShort()); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x000E: if (extendedLengthPayload >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0050: if (extendedLengthPayload >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0100: if (extendedLengthPayload >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0102: if (extendedLengthPayload >= 2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0112: if (extendedLengthPayload >= 2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0113: if (extendedLengthPayload >= 2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLengthPayload); break;\n                            case 0x0114: if (extendedLengthPayload >= 2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); else buf.skipBytes(extendedLengthPayload); break;\n                            default: buf.skipBytes(extendedLengthPayload); break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else if (length > 0) { // Must have at least 1 byte for mark\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            // Remaining length for inner TLVs: length - 1 (for mark)\n                            int remainingLengthForInnerTlvs = length - 1;\n                            int currentInnerTlvsReaderStart = buf.readerIndex();\n                            while (buf.readerIndex() < currentInnerTlvsReaderStart + remainingLengthForInnerTlvs) {\n                                if (buf.readerIndex() + 1 + 1 > currentInnerTlvsReaderStart + remainingLengthForInnerTlvs && buf.readableBytes() < 2) break; // For type, length\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLengthPayload = buf.readUnsignedByte();\n                                if (buf.readerIndex() + extendedLengthPayload > currentInnerTlvsReaderStart + remainingLengthForInnerTlvs) break; // Data overrun\n\n                                switch (extendedType) {\n                                    case 0x01:\n                                        if (extendedLengthPayload >= 4) {\n                                            long alarms = buf.readUnsignedInt();\n                                            if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                            if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                            if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                            if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                            if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        } else { buf.skipBytes(extendedLengthPayload); }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLengthPayload);\n                                        break;\n                                }\n                            }\n                        } else {\n                            // If mark is not 0x7C, original code seems to misinterpret last byte as battery level.\n                            // Assuming the intention was that if mark is not 0x7C, the rest of 'length-1' bytes are skipped\n                            // and then a final battery level is read if there's one AFTER all these TLVs.\n                            // The original code had position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); *after* the loop.\n                            // This seems like a protocol ambiguity or a bug in original logic structure.\n                            // For now, ensure we don't read past `endIndex`.\n                            // If after processing or skipping inner TLVs, there's still a byte within `length`:\n                            if (buf.readerIndex() < endIndex) { // Check if there are bytes left within this TLV\n                                // The original code reads a byte here unconditionally IF mark!=0x7C or after the 0x7C loop.\n                                // This is complex. Let's assume the last byte of this TLV *could* be battery if it's not consumed by 0x7C block.\n                                // This requires careful positioning.\n                                // Safest is to skip unparsed bytes within this TLV if mark != 0x7C path is taken\n                                buf.readerIndex(currentInnerTlvsReaderStart + remainingLengthForInnerTlvs);\n                            }\n                        }\n                        // The original code had this battery level read *outside* the 'if (mark == 0x7C)'\n                        // This implies it could be read after the 0x7C block OR if mark was not 0x7C.\n                        // This needs to be conditional on bytes being available *within the current TLV item*.\n                        if (buf.readerIndex() < endIndex) {\n                           // This seems to be a bug in the original logic if it intended to read from beyond the TLV.\n                           // Assuming it's the last byte *of this TLV item if not consumed*.\n                           // position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                           // Given the ambiguity, it's safer to rely on buf.readerIndex(endIndex) to skip any unread part.\n                        }\n                    }\n                    break;\n                default:\n                    // For unhandled subtypes, data is skipped by buf.readerIndex(endIndex)\n                    // buf.skipBytes(length); // Not needed due to buf.readerIndex(endIndex)\n                    break;\n            }\n            // Ensure readerIndex is set to the end of the current TLV item's data,\n            // regardless of how much was read or skipped within the case.\n            // This handles cases where 'length' is smaller than expected by a case,\n            // or when a case does not consume all 'length' bytes.\n            if (buf.readerIndex() > endIndex) {\n                // This should not happen if length checks inside cases are correct and reads don't exceed 'length'.\n                // If it does, it means a case read more than 'length' bytes. This is a severe bug in that case.\n                // For safety, reset to endIndex to prevent further stream corruption.\n                // Log this error in a real system.\n            }\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}