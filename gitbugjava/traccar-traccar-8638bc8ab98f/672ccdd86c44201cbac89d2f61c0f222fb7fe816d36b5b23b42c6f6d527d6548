{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position;\n\n        }\n\n        // Loop while there are at least 2 bytes to read (for subtype and length)\n        while (buf.readableBytes() > 1) {\n\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n\n            // Check if the declared length is valid given the remaining buffer size\n            if (length > buf.readableBytes()) {\n                // If length is too large, it's an error or truncated packet.\n                // Stop processing further TLVs from this point.\n                // Consume the rest of the buffer.\n                buf.skipBytes(buf.readableBytes());\n                break; \n            }\n\n            int endIndex = buf.readerIndex() + length; // Calculate end index for this TLV item's data\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x56:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                    buf.readUnsignedByte(); // reserved\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    // 'length' is the length of the 0x80 payload.\n                    // 'endIndex' (calculated above) is buf.readerIndex() (at start of payload) + length.\n                    // This 'endIndex' is the correct boundary for the 0x80 TLV's data.\n                    if (length > 0) { // Ensure there's at least one byte for \"content\"\n                        buf.readUnsignedByte(); // Read the \"content\" byte from payload\n                        // Call decodeExtension. It should parse from the current readerIndex\n                        // up to the calculated 'endIndex' for this 0x80 TLV item.\n                        // decodeExtension must not read past 'endIndex'.\n                        decodeExtension(position, buf, endIndex);\n                    }\n                    // The main loop's buf.readerIndex(endIndex) call (after the switch)\n                    // will ensure the reader advances to the end of this 0x80 item.\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); // string cut count\n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); // mac\n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); // unused\n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1: // Duplicated from main switch, likely for a nested structure\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2); // Assuming extendedLength includes the 2 bytes for extendedType\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) { // This loop should also check length of internal TLVs\n                                if (buf.readableBytes() < 2) break; // Not enough for type + length\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLengthInner = buf.readUnsignedByte();\n                                if (extendedLengthInner > buf.readableBytes()) {\n                                    buf.skipBytes(buf.readableBytes()); break;\n                                }\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLengthInner);\n                                        break;\n                                }\n                            }\n                        }\n                        // This line seems misplaced if mark == 0x7C leads to consuming the rest of the TLV.\n                        // If mark != 0x7C, it might be correct. The logic for 0xFE is complex.\n                        // Original code has this outside the if (mark == 0x7C) block, which might be an error\n                        // if the inner loop is supposed to consume all of the primary 0xFE TLV's data.\n                        // For now, maintaining original structure beyond the specific 0x80 fix and general TLV length check.\n                        // However, if `buf.readerIndex() < endIndex` after the inner while loop and `mark == 0x7C`,\n                        // this will attempt to read battery level from remaining bytes.\n                        // This could be an issue if the `0x7C` block was meant to be the *only* content for that length.\n                        if (buf.readerIndex() < endIndex) { // Only read if bytes are left within this TLV item\n                           position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                    }\n                    break;\n                default:\n                    // For unhandled subtypes, or subtypes that don't consume their full declared length implicitly,\n                    // the reader index will be advanced by the buf.readerIndex(endIndex) call below.\n                    break;\n            }\n            // Ensure readerIndex is advanced to the end of the current TLV item's data segment.\n            // This handles cases that don't read all 'length' bytes (e.g. default, or if a case breaks early)\n            // and correctly positions for the next TLV.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}