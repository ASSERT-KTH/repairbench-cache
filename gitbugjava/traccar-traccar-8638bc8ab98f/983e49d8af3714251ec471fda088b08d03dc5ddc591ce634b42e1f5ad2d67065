{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n        decodeCoordinates(position, buf);\n\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n        // Check for fixed 20-byte structure (before processing TLVs)\n        // Note: Added check buf.readableBytes() >= 20 as some messages might have TLVs after the fixed block.\n        // If exactly 20 bytes remain, assume it's the fixed block ONLY.\n        if (buf.readableBytes() == 20) {\n\n            buf.skipBytes(4); // remaining battery and mileage\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L); // Use long literal for multiplication\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); // area id\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); // reserved\n\n            return position; // Return early if fixed structure is detected\n\n        }\n\n        // Process TLV (Type-Length-Value) optional fields\n        while (buf.readableBytes() > 1) { // Need at least 1 byte for subtype and 1 byte for length\n\n            int subtype = buf.readUnsignedByte();\n            // Check if we can read length byte\n            if (buf.readableBytes() < 1) {\n                 break; // Not enough data for length byte\n            }\n            int length = buf.readUnsignedByte();\n            int readerIndex = buf.readerIndex(); // Save start index of value field\n\n            // Check if the buffer contains enough bytes for the declared length\n            if (buf.readableBytes() < length) {\n                // Length is inconsistent with remaining buffer size. Stop processing TLVs for this message.\n                 // Log.warning(\"Invalid TLV length for subtype \" + subtype + \". Length: \" + length + \", Remaining: \" + buf.readableBytes());\n                 break;\n            }\n\n            int endIndex = readerIndex + length; // Calculate end index for this TLV block\n\n            String stringValue;\n            Network network = null; // Used in case 0xEB, declare here to potentially aggregate across TLVs if needed\n            switch (subtype) {\n                case 0x01:\n                    if (length >= 4) {\n                       position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100L);\n                    }\n                    break;\n                case 0x02:\n                     if (length >= 2) {\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                     }\n                    break;\n                case 0x2b:\n                    if (length >= 4) {\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0x30:\n                    if (length >= 1) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x31:\n                    if (length >= 1) {\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0x33:\n                    // Ensure length is sufficient for the logic inside\n                    if (length >= 15) { // \"*M00...\" needs at least 4 + 4 + 7 = 15 bytes? Check format.\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        // Check string format before accessing substrings to avoid exceptions\n                        if (stringValue.startsWith(\"*M00\") && stringValue.length() >= 15) {\n                            String lockStatus = stringValue.substring(8, 15); // Extract 7 chars after \"*M00xxxx\"\n                            if (lockStatus.length() >= 5) { // Ensure substring for parseInt is valid\n                                try {\n                                    // Parse battery from characters at index 2,3,4 of lockStatus string\n                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                                } catch (NumberFormatException | IndexOutOfBoundsException e) {\n                                    // Log or ignore parsing error if the format is unexpected\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x56:\n                    if (length >= 2) { // Needs 1 byte for level, 1 byte reserved\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                        buf.readUnsignedByte(); // read reserved byte\n                    }\n                    break;\n                case 0x60:\n                    if (length >= 2) {\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                        // If length > 2, remaining bytes are skipped by buf.readerIndex(endIndex) below\n                    }\n                    break;\n                case 0x69:\n                     if (length >= 2) {\n                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                     }\n                    break;\n                case 0x80: // Extension data block\n                    if (length >= 1) { // Needs at least the 'content' byte\n                        buf.readUnsignedByte(); // read content byte, seems unused\n                        int extensionDataLength = length - 1;\n                        if (extensionDataLength >= 0) {\n                            int extensionEndIndex = buf.readerIndex() + extensionDataLength;\n                            // Ensure extension end index is within the main TLV block and buffer bounds\n                            if (extensionEndIndex <= endIndex && extensionEndIndex <= buf.writerIndex()) {\n                                decodeExtension(position, buf, extensionEndIndex);\n                            }\n                        }\n                    }\n                    // Let buf.readerIndex(endIndex) below handle skipping potentially remaining bytes\n                    break;\n                case 0x91:\n                    // Total bytes read by this case: 2+2+1+1+1+1+2+2+2+4+2+2 = 24 bytes\n                    if (length >= 24) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                        position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0); // Use double division\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0); // Use double division\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                        buf.readUnsignedShort(); // Skip reserved/unused\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        buf.readUnsignedShort(); // Skip reserved/unused\n                        buf.readUnsignedInt();   // Skip reserved/unused\n                        buf.readUnsignedShort(); // Skip reserved/unused\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    }\n                    break;\n                case 0x94: // VIN\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7: // ADC\n                    if (length >= 4) { // Needs 2 shorts\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                        position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    }\n                    break;\n                case 0xAC: // Odometer\n                    if (length >= 4) {\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    }\n                    break;\n                case 0xBC: // Driver Name\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(\"driver\", stringValue.trim());\n                    }\n                    break;\n                case 0xBD: // Driver Unique ID\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0xD0: // User Status / Alarm\n                     if (length >= 4) {\n                        long userStatus = buf.readUnsignedInt();\n                        if (BitUtil.check(userStatus, 3)) {\n                            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                        }\n                     }\n                    break;\n                case 0xD3: // Power\n                     if (length >= 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                     }\n                    break;\n                case 0xD4: // Battery Level\n                case 0xE1: // Also Battery Level? Handle both.\n                    if (length >= 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                case 0xD5: // Lock status / Battery\n                    if (length == 2) { // Simple battery voltage\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else if (length > 1) { // Complex lock status\n                        int count = buf.readUnsignedByte();\n                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // 1 byte count + N * (ID + Card + Batt + Status)\n                        if (length == expectedLength && count > 0) { // Check length matches expected structure\n                           for (int i = 1; i <= count; i++) {\n                               // Check readable bytes before reading each part? Might be overkill if length check passed.\n                               position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                               position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                               position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                               int status = buf.readUnsignedShort();\n                               position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                           }\n                        } // If length mismatch, data is skipped by buf.readerIndex(endIndex) below\n                    }\n                    break;\n                case 0xDA: // Device Status (string cut, motion, cover)\n                    if (length >= 3) { // Needs 2 bytes count + 1 byte status\n                         buf.readUnsignedShort(); // string cut count - value ignored\n                         int deviceStatus = buf.readUnsignedByte();\n                         position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                         position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    }\n                    break;\n                case 0xE6: // Temperature/Humidity Sensors\n                     // Each sensor block is 1 (index) + 6 (mac) + 8 (temp) + 8 (humidity) = 23 bytes\n                     while (buf.readerIndex() < endIndex) {\n                         if (buf.readableBytes(endIndex - buf.readerIndex()) < 23) break; // Check remaining bytes within this TLV block\n                         int sensorIndex = buf.readUnsignedByte();\n                         buf.skipBytes(6); // mac\n                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                         position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                     }\n                    break;\n                case 0xEB: // Network Info or Extended Fuel/Power\n                    if (length >= 2 && buf.getUnsignedShort(readerIndex) > 200) { // Network Info Path\n                        if (length >= 3) { // Need mcc (2) + mnc (1)\n                            int mcc = buf.readUnsignedShort();\n                            int mnc = buf.readUnsignedByte();\n                            while (buf.readerIndex() < endIndex) {\n                                if (buf.readableBytes(endIndex - buf.readerIndex()) < 5) break; // Need lac(2) + cid(2) + rssi(1)\n                                if (network == null) {\n                                    network = new Network();\n                                }\n                                network.addCellTower(CellTower.from(\n                                        mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                        buf.readUnsignedByte()));\n                            }\n                            if (network != null && !network.getCellTowers().isEmpty()) {\n                                position.setNetwork(network);\n                            }\n                        }\n                    } else { // Extended Data Path\n                        while (buf.readerIndex() < endIndex) {\n                             if (buf.readableBytes(endIndex - buf.readerIndex()) < 4) break; // Need ext_len(2) + ext_type(2)\n                             int extendedLength = buf.readUnsignedShort(); // Is this total length or value length? Assuming total length incl type field.\n                             int extendedType = buf.readUnsignedShort();\n                             int extendedValueLength = extendedLength - 2; // Data length (assuming extLength included type field)\n                             int extendedValueIndex = buf.readerIndex();\n\n                             if (extendedValueLength < 0 || buf.readableBytes(endIndex - buf.readerIndex()) < extendedValueLength) break; // Check validity and remaining bytes\n\n                             switch (extendedType) {\n                                case 0x0001: if (extendedValueLength >= 3) { position.set(\"fuel1\", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } break;\n                                case 0x0023: if (extendedValueLength >= 6) { try { position.set(\"fuel2\", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (NumberFormatException e) {/*ignore*/} } break;\n                                case 0x00CE: if (extendedValueLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } break;\n                                case 0x00D8: if (extendedValueLength >= 9) { if(network == null) network = new Network(); network.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); if(!network.getCellTowers().isEmpty()) position.setNetwork(network); } break;\n                                case 0xE1:   if (extendedValueLength >= 1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } break;\n                                default: buf.skipBytes(extendedValueLength); break; // Skip if not handled\n                             }\n                             // Ensure reader index is at the end of this extended value block\n                             buf.readerIndex(extendedValueIndex + extendedValueLength);\n                        }\n                    }\n                    break;\n                case 0xED: // Card\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_CARD, stringValue.trim());\n                    }\n                    break;\n                case 0xEE: // RSSI, Power, Battery, Satellites\n                     if (length >= 6) { // 1(rssi)+2(pwr)+2(batt)+1(sat)\n                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                     }\n                    break;\n                case 0xF3: // OBD Extended Data (Type: 2 bytes, Length: 1 byte)\n                    while (buf.readerIndex() < endIndex) {\n                        if (buf.readableBytes(endIndex - buf.readerIndex()) < 3) break; // Need ext_type(2) + ext_len(1)\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte(); // Length of value data\n                        int extendedValueIndex = buf.readerIndex();\n                        if (buf.readableBytes(endIndex - buf.readerIndex()) < extendedLength) break; // Check remaining bytes for value\n\n                        switch (extendedType) {\n                            case 0x0002: if(extendedLength>=2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0003: if(extendedLength>=2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;\n                            case 0x0004: if(extendedLength>=2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;\n                            case 0x0005: if(extendedLength>=4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100L); break;\n                            case 0x0007: if(extendedLength>=2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0008: if(extendedLength>=2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0009: if(extendedLength>=2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;\n                            case 0x000B: if(extendedLength>=2) position.set(\"intakePressure\", buf.readUnsignedShort()); break;\n                            case 0x000C: if(extendedLength>=2) position.set(\"intakeTemp\", buf.readUnsignedShort() - 40); break;\n                            case 0x000D: if(extendedLength>=2) position.set(\"intakeFlow\", buf.readUnsignedShort()); break;\n                            case 0x000E: if(extendedLength>=2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); break;\n                            case 0x0050: if(extendedLength>=17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;\n                            case 0x0100: if(extendedLength>=2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;\n                            case 0x0102: if(extendedLength>=2) position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1); break;\n                            case 0x0112: if(extendedLength>=2) position.set(\"hardAccelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0113: if(extendedLength>=2) position.set(\"hardDecelerationCount\", buf.readUnsignedShort()); break;\n                            case 0x0114: if(extendedLength>=2) position.set(\"hardCorneringCount\", buf.readUnsignedShort()); break;\n                            default: buf.skipBytes(extendedLength); break; // Skip if not handled\n                        }\n                        // Ensure reader index is correct\n                         buf.readerIndex(extendedValueIndex + extendedLength);\n                    }\n                    break;\n                case 0xFE: // Battery/Power or Extended Alarms\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else if (length > 0) { // Possible extended structure\n                        int mark = buf.readUnsignedByte(); // Read first byte\n                        if (mark == 0x7C && length > 1) { // Check for extended alarm marker\n                            // Process extended alarms TLV structure (Type: 1 byte, Length: 1 byte)\n                             while (buf.readerIndex() < endIndex) {\n                                 if (buf.readableBytes(endIndex - buf.readerIndex()) < 2) break; // Need ext_type(1) + ext_len(1)\n                                 int extendedType = buf.readUnsignedByte();\n                                 int extendedLength = buf.readUnsignedByte(); // Length of value data\n                                 int extendedValueIndex = buf.readerIndex();\n                                 if (buf.readableBytes(endIndex - buf.readerIndex()) < extendedLength) break; // Check remaining bytes for value\n\n                                 switch (extendedType) {\n                                    case 0x01: // Alarm bits\n                                        if (extendedLength >= 4) {\n                                             long alarms = buf.readUnsignedInt();\n                                             // Use position.add to accumulate alarms, rather than overwrite\n                                             if (BitUtil.check(alarms, 0)) position.add(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                             if (BitUtil.check(alarms, 1)) position.add(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                             if (BitUtil.check(alarms, 2)) position.add(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                             if (BitUtil.check(alarms, 3)) position.add(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                             if (BitUtil.check(alarms, 4)) position.add(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default: buf.skipBytes(extendedLength); break; // Skip if not handled\n                                 }\n                                 // Ensure reader index is correct\n                                 buf.readerIndex(extendedValueIndex + extendedLength);\n                             }\n                        } else if (mark != 0x7C) {\n                            // If first byte wasn't the marker, assume it was battery level.\n                            // Rewind by 1 byte as we already consumed 'mark'.\n                            buf.readerIndex(readerIndex);\n                            if (length >= 1) { // Re-check length as we rewound\n                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype. Data is skipped by buf.readerIndex(endIndex) below.\n                    break;\n            }\n            // Ensure reader index is advanced to the end of the TLV block.\n            // This skips any unread bytes within the current TLV block,\n            // ensuring the next iteration starts at the correct position.\n            buf.readerIndex(endIndex);\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}