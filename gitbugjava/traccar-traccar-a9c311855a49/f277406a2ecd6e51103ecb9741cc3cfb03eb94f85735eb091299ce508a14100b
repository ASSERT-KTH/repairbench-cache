{
    "generation": "    @Override\n    protected Object decode(DeviceSession deviceSession, MqttPublishMessage message) throws Exception {\n\n        JsonObject json;\n        try (org.traccar.helper.ByteBufferInputStream inputStream = new org.traccar.helper.ByteBufferInputStream(message.payload().nioBuffer())) {\n            json = javax.json.Json.createReader(inputStream).readObject();\n        }\n\n        String type = json.getString(\"rpt\");\n        switch (type) {\n            case \"hf\":\n            case \"loc\":\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setValid(true);\n\n                // The original SimpleDateFormat was not compatible with the ISO 8601 format of the timestamp.\n                // java.time.Instant.parse directly handles ISO 8601 date strings like \"2023-06-01T03:09:51.362Z\".\n                // Position.setTime expects a java.util.Date, so we convert the Instant to Date.\n                position.setTime(java.util.Date.from(java.time.Instant.parse(json.getString(\"ts\"))));\n\n                JsonObject location = json.getJsonObject(\"location\");\n                position.setLatitude(location.getJsonNumber(\"lat\").doubleValue());\n                position.setLongitude(location.getJsonNumber(\"lon\").doubleValue());\n\n                position.setCourse(json.getInt(\"bear\"));\n                position.setSpeed(UnitsConverter.knotsFromCps(json.getInt(\"spd\")));\n\n                position.set(Position.KEY_IGNITION, json.getString(\"ign\").equals(\"on\"));\n\n                return position;\n\n            default:\n                return null;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}