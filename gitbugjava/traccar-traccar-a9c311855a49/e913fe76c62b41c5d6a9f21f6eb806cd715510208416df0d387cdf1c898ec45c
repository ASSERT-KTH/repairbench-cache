{
    "generation": "    @Override\n    protected Object decode(DeviceSession deviceSession, MqttPublishMessage message) throws Exception {\n\n        JsonObject json;\n        try (ByteBufferInputStream inputStream = new ByteBufferInputStream(message.payload().nioBuffer())) {\n            json = Json.createReader(inputStream).readObject();\n        }\n\n        String type = json.getString(\"rpt\");\n        switch (type) {\n            case \"hf\":\n            case \"loc\":\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setValid(true);\n\n                // Correct the date format to match the input \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\n                // Use 'X' for ISO 8601 time zone designator to handle 'Z' as UTC\n                DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\");\n                // Setting TimeZone explicitly is also an option if 'X' is not used, but 'X' is generally preferred for ISO 8601\n                // dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n                position.setTime(dateFormat.parse(json.getString(\"ts\")));\n\n                JsonObject location = json.getJsonObject(\"location\");\n                position.setLatitude(location.getJsonNumber(\"lat\").doubleValue());\n                position.setLongitude(location.getJsonNumber(\"lon\").doubleValue());\n\n                // Use getJsonNumber and intValue() for consistency and potential type safety\n                position.setCourse(json.getJsonNumber(\"bear\").intValue());\n                position.setSpeed(UnitsConverter.knotsFromCps(json.getJsonNumber(\"spd\").intValue()));\n\n                position.set(Position.KEY_IGNITION, json.getString(\"ign\").equals(\"on\"));\n\n                return position;\n\n            default:\n                // It's good practice to log or handle unknown types if necessary\n                // Log.warning(\"Unknown PUI report type: \" + type);\n                return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}