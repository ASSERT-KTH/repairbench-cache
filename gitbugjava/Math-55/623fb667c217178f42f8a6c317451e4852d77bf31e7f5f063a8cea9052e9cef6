{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector3D\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Kahan's algorithm to compute cross product v1 x v2 with improved precision.\n      // This method aims to reduce cancellation errors that occur when vectors are nearly parallel.\n      // See Kahan lecture \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n      // The algorithm computes v3 = v1 - rho * v2, where rho = (v1 . v2) / (v2 . v2)\n      // and then the cross product is c = v3 x v2.\n\n      // Using getters assuming Vector3D provides them (e.g., getX(), getY(), getZ())\n      // If fields x, y, z are directly accessible, use v1.x, v1.y, v1.z instead.\n      double x1 = v1.getX();\n      double y1 = v1.getY();\n      double z1 = v1.getZ();\n      double x2 = v2.getX();\n      double y2 = v2.getY();\n      double z2 = v2.getZ();\n\n      double normSq2 = x2 * x2 + y2 * y2 + z2 * z2;\n\n      // Check if v2 is the zero vector.\n      if (normSq2 == 0) {\n          // The cross product of any vector with the zero vector is the zero vector.\n          // Assuming Vector3D has a constructor for (0,0,0) or a ZERO constant.\n          return new Vector3D(0, 0, 0);\n      }\n\n      double dot = x1 * x2 + y1 * y2 + z1 * z2;\n      double rho = dot / normSq2;\n\n      // Compute components of v3 = v1 - rho * v2\n      // This intermediate vector v3 is orthogonal to v2, or close to it numerically.\n      double x3 = x1 - rho * x2;\n      double y3 = y1 - rho * y2;\n      double z3 = z1 - rho * z2;\n\n      // Compute components of the cross product c = v3 x v2\n      // This calculation is potentially more stable when v1 and v2 are nearly parallel,\n      // as v3's components are smaller in that case, reducing cancellation in the final step.\n      double cx = y3 * z2 - z3 * y2;\n      double cy = z3 * x2 - x3 * z2;\n      double cz = x3 * y2 - y3 * x2;\n\n      return new Vector3D(cx, cy, cz);\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}