{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Reference: Kahan, W. (2006). Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces.\n      // University of California, Berkeley. http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n      // The implementation follows the spirit of Kahan's algorithm to mitigate cancellation errors\n      // when vectors are nearly parallel, as suggested by the code comments in the original buggy version.\n\n      // Assumes Vector3D class has isNaN() and isInfinite() methods.\n      // Check for NaN components first, as they propagate.\n      if (v1.isNaN() || v2.isNaN()) {\n          // Returning Vector3D.NaN requires the class to define such a constant.\n          // If not available, use new Vector3D(Double.NaN, Double.NaN, Double.NaN).\n          return new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n      }\n\n      // Check for infinite components. Result is often NaN for cross product involving infinity.\n      if (v1.isInfinite() || v2.isInfinite()) {\n          // Policy for cross product involving infinity can vary. NaN is a common choice.\n          // Returning Vector3D.NaN requires the class to define such a constant.\n          return new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n      }\n\n      // Calculate squared norms\n      // Assumes Vector3D class has getNormSq() method.\n      double norm1Sq = v1.getNormSq();\n      double norm2Sq = v2.getNormSq();\n\n      // Check for zero vectors. Cross product with zero vector is zero.\n      if (norm1Sq == 0 || norm2Sq == 0) {\n          // Returning Vector3D.ZERO requires the class to define such a constant.\n          // If not available, use new Vector3D(0, 0, 0).\n          return new Vector3D(0, 0, 0);\n      }\n\n      // Select vectors u and v such that v has the larger norm squared.\n      // u will be the vector with the smaller norm squared.\n      final Vector3D u, v;\n      final boolean swapped;\n      final double vNormSq; // Store the squared norm of v for efficiency\n\n      if (norm1Sq > norm2Sq) {\n          u = v2;\n          v = v1;\n          vNormSq = norm1Sq;\n          swapped = true;\n      } else {\n          u = v1;\n          v = v2;\n          vNormSq = norm2Sq;\n          swapped = false;\n      }\n\n      // Compute rho = (u . v) / (v . v)\n      // vNormSq is the squared norm of the vector with the larger magnitude,\n      // which improves numerical stability of the division.\n      // vNormSq is guaranteed to be positive finite here due to earlier checks.\n      // Assumes Vector3D class has dotProduct() method.\n      double uv = u.dotProduct(v);\n      double rho = uv / vNormSq;\n\n      // Compute w = u - rho * v\n      // This step computes the component of u orthogonal to v.\n      // It can still suffer cancellation, but often less severely than the naive cross product.\n      // Assumes Vector3D class has getX(), getY(), getZ() methods.\n      double wx = u.getX() - rho * v.getX();\n      double wy = u.getY() - rho * v.getY();\n      double wz = u.getZ() - rho * v.getZ();\n\n      // Compute cross product c = w x v\n      // Since w is (approximately) orthogonal to v, this cross product calculation\n      // is generally more numerically stable than the direct v1 x v2.\n      double resX = wy * v.getZ() - wz * v.getY();\n      double resY = wz * v.getX() - wx * v.getZ();\n      double resZ = wx * v.getY() - wy * v.getX();\n\n      // If u and v were swapped, the result 'res' is u x v = v2 x v1.\n      // We need to return v1 x v2 = - (v2 x v1).\n      if (swapped) {\n          return new Vector3D(-resX, -resY, -resZ);\n      } else {\n          // Result 'res' is u x v = v1 x v2.\n          return new Vector3D(resX, resY, resZ);\n      }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}