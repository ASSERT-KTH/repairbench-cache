{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // Check requires str.charAt(index-1) and str.charAt(index-2)\n        if (index > 1 && mappedChar != '0') { // Ensure index >= 2 and current char is consonant.\n            final char hwChar = str.charAt(index - 1);\n            if ('H' == hwChar || 'W' == hwChar) { // Check if previous char is H or W.\n                final char preHWChar = str.charAt(index - 2);\n                final char firstCode = this.map(preHWChar); // Get code of char before H/W.\n                // Fixed: The original condition \"firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar\"\n                // was incorrect. It incorrectly caused consonant codes to be skipped if the character\n                // before the H/W was also H or W, even if the consonant codes were different.\n                // The correct HW rule only skips if the consonant codes are the same.\n                if (firstCode == mappedChar) {\n                    // Consonants from the same code group separated by H or W are treated as one.\n                    return 0; // Return 0 to ignore this consonant.\n                }\n            }\n        }\n        return mappedChar; // Otherwise, return the mapped code.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}