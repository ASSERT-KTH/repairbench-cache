{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     * Vowels and H, W are mapped to '0'.\n     * <p>\n     * The Soundex algorithm requires map(char1) != map(char2) for neighbouring consonants.\n     * This is handled by the main loop which calls this method, comparing the result code\n     * to the last non-'0' code obtained.\n     * </p>\n     * <p>\n     * This method handles the H/W rule: if sequence is C1 H C2 or C1 W C2 and map(C1) == map(C2),\n     * then the code for C2 should be ignored (returned as '0').\n     * </p>\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character, or '0' if the character should be ignored\n     *         due to H/W rule.\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped (should not happen with A-Z input)\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        // Map the current character\n        final char mappedChar = this.map(str.charAt(index));\n\n        // Rule: Consonants from the same code group separated by W or H are treated as one.\n        // This means C1 H C2 or C1 W C2 -> ignore C2 if map(C1) == map(C2).\n        // Check applies only if the current character maps to a consonant code (is not 0),\n        // and we are far enough into the string to check C1 and H/W (index > 1).\n        if (index > 1 && mappedChar != '0') { // Check required index and non-zero code\n            final char hwChar = str.charAt(index - 1);\n            // Check if the preceding character is H or W\n            if ('H' == hwChar || 'W' == hwChar) {\n                // Get the character before H/W\n                final char preHWChar = str.charAt(index - 2);\n                // Get the code of the character before H/W\n                final char firstCode = this.map(preHWChar);\n                // If the code before H/W matches the current code, ignore the current code by returning 0\n                if (firstCode == mappedChar) {\n                    return 0; // Return 0 to ignore the code for the current character (C2)\n                }\n                // The original code had an additional condition here:\n                // || 'H' == preHWChar || 'W' == preHWChar\n                // This caused incorrect behavior. For example, in \"YHWDYT\", when processing 'D' (index 3),\n                // hwChar was 'W', preHWChar was 'H'. The condition ('H' == preHWChar) was true,\n                // causing 'D' to be incorrectly ignored (returned 0). This extra check is removed in the fix.\n            }\n        }\n        // Return the mapped code (or 0 if the H/W rule applied)\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}