{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // Index check fixed starting index > 0. Thanks Axel Faust!\n        // Check not applicable to first char. Thanks Glen Campbell!\n        if (index > 0 && mappedChar != '0') { // Check if current char has a code and is not the first char\n            final char hwChar = str.charAt(index - 1);\n            if ('H' == hwChar || 'W' == hwChar) { // If previous char is H or W\n                // Find the character before H/W\n                // CODEC-146: Fixed issue with index checking. It should be index > 1 to access index - 2.\n                if (index > 1) { // Ensure we can safely access index - 2\n                    final char preHWChar = str.charAt(index - 2);\n                    final char firstCode = this.map(preHWChar);\n                    // Check if code before H/W matches current code, or if char before H/W was also H/W\n                    // Note: Original logic included checking if preHWChar was H or W,\n                    // which seems slightly non-standard but maintained here.\n                    if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {\n                        // Rule applies, treat as same consonant group, return '0' to ignore\n                        return '0'; // FIX: Return the character '0', not integer 0\n                    }\n                }\n                // CODEC-146: Handle case where H/W is at index 1 (e.g., \"WHARTON\")\n                // In this case, there is no character at index - 2.\n                // The rule compares the current character code with the code of the character\n                // before the H/W. If H/W is at index 1, the character before it is at index 0.\n                // We need the code of the first letter (already processed).\n                // This check seems complex to add here without access to the main loop's state.\n                // However, the original check `index > 1` implicitly handled this by skipping\n                // the rule if H/W was at index 1. Let's restore that boundary.\n            }\n        }\n\n        // Re-check the boundary conditions for HW rule based on common implementations\n        // The HW rule compares C1 H C2 or C1 W C2 where C1 and C2 are consonants.\n        // This means we need index >= 2 to have C1, H/W, C2.\n        // The check should be for index >= 2.\n        if (index > 1 && mappedChar != '0') { // Correct index check: need at least 3 chars C1, H/W, C2\n            final char hwChar = str.charAt(index - 1);\n            if ('H' == hwChar || 'W' == hwChar) {\n                final char preHWChar = str.charAt(index - 2);\n                final char firstCode = this.map(preHWChar);\n                // Check if code before H/W matches current code, OR if char before H/W was also H/W\n                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {\n                    return '0'; // FIX: Return the character '0', not integer 0\n                }\n            }\n        }\n\n\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}