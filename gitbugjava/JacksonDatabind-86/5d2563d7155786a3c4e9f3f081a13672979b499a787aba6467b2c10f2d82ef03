{
    "generation": "\t/**\n\t * Method called to check if type is included in known type cache;\n\t * if so, returning it; if not, returning null.\n     * Note: does NOT check for recursive merging, related types, so caller\n     * must handle checking.\n\t *\n\t * @param cl Class to look for\n\t *\n\t * @return Type found, if any; null if none\n\t */\n\tprotected JavaType _findCachedType(Class<?> cl) {\n\t    // 01-Mar-2016, tatu: For some reason, this caching seems to have issues\n\t    //   with default typing and perhaps modules. Disabling for now.\n\t    //   (re-enabling seems to make default typing tests fail)\n\t    // 08-Sep-2016, tatu: Actually, problem might be that type modifiers may\n\t    //    change aspects of type... so let's try re-enabling, but only if\n\t    //    no modifiers are present.\n\t    if (_modifiers != null) {\n\t        // TODO: Need to ensure this is sufficient; also, should we perhaps\n\t        // clear cache upon registration?\n\t        return null;\n\t    }\n\t    // Should not need ClassKey; identity comparison should be fine\n\t    // 01-Mar-2016, tatu: Except for seemingly very rare occurrences of class loader leaks,\n\t    //   maybe? Let's revert to ClassKey just in case. Alas, does not help with [databind#1148]\n\t    //   ... so maybe revert back? For now, keep ClassKey.\n\t    JavaType type = _cachedTypes.get(new ClassKey(cl));\n\n\t    // 18-Oct-2017, tatu: As per [databind#1647], need to ensure we don't\n\t    //   return placeholder type (ResolvedRecursiveType) but an actual resolved one.\n\t    if (type instanceof ResolvedRecursiveType) {\n\t        ResolvedRecursiveType rrt = (ResolvedRecursiveType) type;\n\t        JavaType resolved = rrt.getSelfReferencedType();\n\t        // If resolved, return the resolved type; otherwise return placeholder\n\t        // (which indicates type construction is in progress)\n\t        if (resolved != null) {\n\t            return resolved;\n\t        }\n\t    }\n\t    return type;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}