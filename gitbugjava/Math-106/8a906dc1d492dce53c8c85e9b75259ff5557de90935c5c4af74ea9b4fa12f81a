{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        int numStartIndex = pos.getIndex();\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // minus signs should be leading, invalid expression\n        if (num.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStartIndex);\n            return null;\n        }\n\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            // This case is problematic because \"2 3\" should not be parsed as 2/1 or 3/1.\n            // It implies a proper fraction was expected but not found.\n            // However, the original code returned num as fraction (num.intValue(), 1)\n            // which seems incorrect for a proper fraction format.\n            // Let's stick to the original logic for minimal change, assuming the intent\n            // was perhaps to handle \"integer\" input loosely, although the method doc\n            // specifies proper fraction format. A better behavior might be erroring out.\n            // For now, let's assume \"2 3\" should be parsed as whole number 2, if that's the only number,\n            // but if a numerator follows, the '/' is mandatory.\n            // The original code actually returns new Fraction(num.intValue(), 1) if '/' is missing.\n            // This path seems unlikely to be hit given the whole number was already parsed.\n            // If source is \"2\", whole is 2, num is null.\n            // If source is \"2 3\", whole is 2, num is 3, c is 0. Original returns 3/1. Incorrect.\n            // If source is \"3\", whole is null, super.parse handles it.\n            // Let's assume the intent was: if '/' is not there after numerator, it's an error for proper fraction format.\n            // Reset index and set error index.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null; // Indicate parsing failure for \"2 3\" type inputs.\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid character instead of '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denStartIndex = pos.getIndex();\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // minus signs must be leading, invalid\n        if (den.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStartIndex);\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        // Check for denominator == 0 separately, Fraction constructor will throw ArithmeticException\n        // which might not be desired for parsing. Let's return null.\n        if (d == 0) {\n             pos.setIndex(initialIndex);\n             pos.setErrorIndex(denStartIndex);\n             return null;\n        }\n        \n        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}