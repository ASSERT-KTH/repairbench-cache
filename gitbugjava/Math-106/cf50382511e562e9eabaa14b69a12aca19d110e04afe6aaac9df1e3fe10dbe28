{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        int numeratorStartIndex = pos.getIndex(); // Store index before parsing numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            // The NumberFormat parser should have set the error index.\n            // However, if it didn't find any digits after whitespace, the error\n            // index might be the start of the whitespace. Let's explicitly set\n            // it to where we expected the numerator to start.\n            pos.setErrorIndex(numeratorStartIndex);\n            return null;\n        }\n        \n        // Check for negative numerator, which is not allowed in proper fractions\n        if (num.intValue() < 0) {\n            // minus signs should be leading, invalid expression\n            pos.setIndex(initialIndex); // Reset main index\n            pos.setErrorIndex(numeratorStartIndex); // Set error index to where num parsing started\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/' found after numerator. Proper fraction format requires \"w n/d\".\n            // This indicates an invalid format like \"w n\".\n            pos.setIndex(initialIndex); // Reset main index\n            pos.setErrorIndex(startIndex); // Set error index to where '/' was expected\n            return null; // Indicate parsing failure\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid character where '/' was expected.\n            // set index back to initial, error index should be the location of the invalid character.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex); // startIndex is the position of the unexpected character\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denominatorStartIndex = pos.getIndex(); // Store index before parsing denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n             // Explicitly set error index to where denominator parsing was expected to start.\n            pos.setErrorIndex(denominatorStartIndex);\n            return null;\n        }\n        \n        // Check for negative denominator, which is not allowed in proper fractions\n        if (den.intValue() < 0) {\n            // minus signs must be leading, invalid\n            pos.setIndex(initialIndex); // Reset main index\n            pos.setErrorIndex(denominatorStartIndex); // Set error index to where den parsing started\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        // The calculation correctly handles the sign of the whole part.\n        // e.g., \"-3 1/2\" becomes (-(abs(-3)*2 + 1)) / 2 = -(3*2+1)/2 = -7/2\n        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}