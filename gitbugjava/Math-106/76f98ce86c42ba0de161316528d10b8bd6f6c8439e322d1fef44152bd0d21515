{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse numerator\n        int numStartIndex = pos.getIndex(); // Store index before parsing numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            // Error index is likely set by getNumeratorFormat().parse()\n            return null;\n        }\n\n        // Check for misplaced minus sign in numerator - documentation specifies only whole can be negative\n        if (num.intValue() < 0) {\n            // minus signs should be leading, invalid expression\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStartIndex); // Point to the start of the numerator\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/' found, signifies end of string or non-matching character\n            // This format requires \"W N/D\", so absence of '/' after N is an error.\n            // However, the original code returned num as fraction. We keep this behaviour\n            // unless further context suggests otherwise, although it seems questionable\n            // for a ProperFractionFormat. Let's stick to fixing the reported bug.\n             // If the caller expects a proper fraction, this path might lead to unexpected results for inputs like \"1 2\".\n             return new Fraction(num.intValue(), 1); // Original behavior\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid character encountered where '/' expected\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex); // Point to where '/' was expected\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denStartIndex = pos.getIndex(); // Store index before parsing denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            // Error index is likely set by getDenominatorFormat().parse()\n            return null;\n        }\n\n        // Check for misplaced minus sign or zero in denominator\n        if (den.intValue() <= 0) { // Denominator must be positive\n            // minus signs must be leading, invalid expression, or denominator is zero\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStartIndex); // Point to the start of the denominator\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n\n        // Calculate the fraction value: (abs(W) * D + N) * sign(W) / D\n        // Example: \"-3 1/2\" -> w=-3, n=1, d=2 -> ((abs(-3)*2)+1)*sign(-3) / 2 = ((3*2)+1)*(-1) / 2 = (6+1)*(-1) / 2 = -7 / 2\n        // Example: \"3 1/2\" -> w=3, n=1, d=2 -> ((abs(3)*2)+1)*sign(3) / 2 = ((3*2)+1)*(1) / 2 = (6+1)*(1) / 2 = 7 / 2\n        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}