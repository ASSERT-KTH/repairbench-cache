{
    "generation": "import java.text.NumberFormat;\nimport java.text.ParsePosition;\n// Assume Fraction, MathUtils, superclass methods are available in the context.\nimport org.apache.commons.math.util.MathUtils; // Keep import if superclass needs it, though calculation changed.\n\n    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // Keep track of the position before parsing the numerator\n        int nStartIndex = pos.getIndex();\n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // Check for negative numerator, which is disallowed for proper fractions\n        if (num.intValue() < 0) {\n             // minus signs must be leading in the whole number part, invalid expression\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(nStartIndex); // Error occurred at the start of the numerator\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/' found after parsing \"whole num\"\n            // This is invalid for a proper fraction \"whole num/den\" format.\n            // Set error index back to the start, indicating incomplete fraction.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex); // Indicate error where '/' was expected\n            return null;\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid character where '/' was expected.\n            // set index back to initial, error index should be the last\n            // character examined (startIndex).\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // Keep track of the position before parsing the denominator\n        int dStartIndex = pos.getIndex();\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // Check for negative denominator, which is disallowed for proper fractions\n        if (den.intValue() < 0) {\n             // minus signs must be leading in the whole number part, invalid\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(dStartIndex); // Error occurred at the start of the denominator\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue(); // Denominator 'd' must be positive (checked < 0 above, constructor handles d=0).\n\n        // Calculate the numerator for the final fraction.\n        // The approach is based on the magnitude and the sign of the whole part.\n        // For w >= 0, fraction is w + n/d = (w*d + n) / d\n        // For w < 0, fraction is w - n/d = (w*d - n) / d (e.g., -3 1/2 = -3 - 1/2 = (-6-1)/2 = -7/2)\n        int numeratorValue;\n        if (w < 0) {\n            numeratorValue = w * d - n; \n        } else { // w >= 0\n            numeratorValue = w * d + n;\n        }\n\n        return new Fraction(numeratorValue, d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}