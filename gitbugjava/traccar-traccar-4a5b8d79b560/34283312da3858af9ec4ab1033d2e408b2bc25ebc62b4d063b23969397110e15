{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            // Ensure robust parsing of key-value, though not directly related to the reported bug's core cause.\n            // If delimiter is not found, or at the start/end, it could lead to issues.\n            // The original code would throw StringIndexOutOfBoundsException or produce empty keys/values in such cases.\n            // For this fix, we assume valid \"key=value\" structures as per the provided data.\n            if (delimiter == -1 || delimiter == 0 || delimiter == entry.length() -1 && entry.length() > 1) { \n                // Handle malformed entry if necessary, or rely on subsequent parsing to fail.\n                // For now, keeping original behavior for malformed entries unless it's the root cause.\n                // The issue is NumberFormatException from Double.parseDouble, not malformed key=value structure.\n            }\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            switch (key) {\n                case \"unit\":\n                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    break;\n                case \"gps_valid\":\n                    position.setValid(Integer.parseInt(value) != 0);\n                    break;\n                case \"datetime_actual\":\n                    position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value));\n                    break;\n                case \"latitude\":\n                    position.setLatitude(new java.math.BigDecimal(value).doubleValue());\n                    break;\n                case \"longitude\":\n                    position.setLongitude(new java.math.BigDecimal(value).doubleValue());\n                    break;\n                case \"altitude\":\n                    position.setAltitude(new java.math.BigDecimal(value).doubleValue());\n                    break;\n                case \"velocity\":\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    break;\n                case \"heading\":\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case \"eventid\":\n                    position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                    break;\n                case \"mileage\":\n                    position.set(Position.KEY_ODOMETER, (long) (new java.math.BigDecimal(value).doubleValue() * 1000));\n                    break;\n                case \"satellites\":\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case \"ignition\":\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                    break;\n                case \"door\":\n                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                    break;\n                case \"arm\":\n                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                    break;\n                case \"fuel\":\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                    break;\n                case \"rpm\":\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case \"main_voltage\":\n                    position.set(Position.KEY_POWER, new java.math.BigDecimal(value).doubleValue());\n                    break;\n                case \"backup_voltage\":\n                    position.set(Position.KEY_BATTERY, new java.math.BigDecimal(value).doubleValue());\n                    break;\n                case \"analog1\":\n                case \"analog2\":\n                case \"analog3\":\n                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), new java.math.BigDecimal(value).doubleValue());\n                    break;\n                case \"extra1\":\n                case \"extra2\":\n                case \"extra3\":\n                default:\n                    position.set(key, value);\n                    break;\n            }\n        }\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}