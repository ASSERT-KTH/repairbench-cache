{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n    sentence = sentence.substring(\n            sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n    Position position = new Position();\n    position.setProtocol(getProtocolName());\n    // If the message doesn't explicitely say gps_valid=0, assume it's valid\n    position.setValid(true);\n\n    for (String entry : sentence.split(\",\")) {\n        int delimiter = entry.indexOf('=');\n        if (delimiter == -1) {\n            continue;\n        }\n        String key = entry.substring(0, delimiter);\n        String value = entry.substring(delimiter + 1);\n        switch (key) {\n            case \"unit\":\n                DeviceSession deviceSession = getDeviceSession(\n                        channel, remoteAddress, value);\n                if (deviceSession != null) {\n                    position.setDeviceId(deviceSession.getDeviceId());\n                }\n                break;\n            case \"gps_valid\":\n                position.setValid(Integer.parseInt(value) != 0);\n                break;\n            case \"datetime_actual\":\n                position.setTime(\n                        new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\")\n                                .parse(value));\n                break;\n            case \"latitude\":\n                position.setLatitude(Double.parseDouble(value));\n                break;\n            case \"longitude\":\n                position.setLongitude(Double.parseDouble(value));\n                break;\n            case \"altitude\":\n                position.setAltitude(Double.parseDouble(value));\n                break;\n            case \"velocity\":\n                position.setSpeed(\n                        UnitsConverter.knotsFromKph(\n                                Integer.parseInt(value)));\n                break;\n            case \"heading\":\n                position.setCourse(Integer.parseInt(value));\n                break;\n            case \"eventid\":\n                position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                break;\n            case \"mileage\":\n                position.set(Position.KEY_ODOMETER,\n                        (long) (Double.parseDouble(value) * 1000));\n                break;\n            case \"satellites\":\n                position.set(Position.KEY_SATELLITES,\n                        Integer.parseInt(value));\n                break;\n            case \"ignition\":\n                position.set(Position.KEY_IGNITION,\n                        Integer.parseInt(value) != 0);\n                break;\n            case \"door\":\n                position.set(Position.KEY_DOOR,\n                        Integer.parseInt(value) != 0);\n                break;\n            case \"arm\":\n                position.set(Position.KEY_ARMED,\n                        Integer.parseInt(value) != 0);\n                break;\n            case \"fuel\":\n                position.set(Position.KEY_FUEL_LEVEL,\n                        Integer.parseInt(value));\n                break;\n            case \"rpm\":\n                position.set(Position.KEY_RPM,\n                        Integer.parseInt(value));\n                break;\n            case \"main_voltage\":\n                position.set(Position.KEY_POWER,\n                        Double.parseDouble(value));\n                break;\n            case \"backup_voltage\":\n                position.set(Position.KEY_BATTERY,\n                        Double.parseDouble(value));\n                break;\n            case \"analog1\":\n            case \"analog2\":\n            case \"analog3\":\n                position.set(Position.PREFIX_ADC\n                        + (key.charAt(key.length() - 1) - '0'),\n                        Double.parseDouble(value));\n                break;\n            case \"extra1\":\n            case \"extra2\":\n            case \"extra3\":\n            default:\n                position.set(key, value);\n                break;\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}