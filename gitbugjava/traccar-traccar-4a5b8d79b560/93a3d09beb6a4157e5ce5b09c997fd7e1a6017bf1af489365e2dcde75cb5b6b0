{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n        // Check if the message contains the expected delimiters before substring operations\n        int firstPipe = sentence.indexOf('|');\n        int lastPipe = sentence.lastIndexOf('|');\n        if (firstPipe == -1 || lastPipe == -1 || firstPipe == lastPipe) {\n            // Return null for malformed message that doesn't fit the expected |...| structure\n             return null;\n        }\n        sentence = sentence.substring(firstPipe + 1, lastPipe);\n\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n\n        boolean gpsValidFound = false; // Track if gps_valid key is present in the message\n\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            // Ensure key=value format and ignore entries without '=' or with empty key/value parts\n            if (delimiter <= 0 || delimiter == entry.length() - 1) {\n                continue; // Skip malformed or empty entries\n            }\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n\n            // Use try-catch blocks for parsing to handle potential errors gracefully\n            try {\n                switch (key) {\n                    case \"unit\":\n                        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                        if (deviceSession != null) {\n                            position.setDeviceId(deviceSession.getDeviceId());\n                        }\n                        break;\n                    case \"gps_valid\":\n                        position.setValid(Integer.parseInt(value) != 0);\n                        gpsValidFound = true; // Mark gps_valid as processed\n                        break;\n                    case \"datetime_actual\":\n                        position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value));\n                        break;\n                    case \"latitude\":\n                        position.setLatitude(Double.parseDouble(value));\n                        break;\n                    case \"longitude\":\n                        position.setLongitude(Double.parseDouble(value));\n                        break;\n                    case \"altitude\":\n                        position.setAltitude(Double.parseDouble(value));\n                        break;\n                    case \"velocity\":\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                        break;\n                    case \"heading\":\n                        position.setCourse(Integer.parseInt(value));\n                        break;\n                    case \"eventid\":\n                        position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                        break;\n                    case \"mileage\":\n                        // Assuming mileage is in km, convert to meters for KEY_ODOMETER\n                        position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                        break;\n                    case \"satellites\":\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        break;\n                    case \"ignition\":\n                        position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                        break;\n                    case \"door\":\n                        position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                        break;\n                    case \"arm\":\n                        position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                        break;\n                    case \"fuel\":\n                        position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                        break;\n                    case \"rpm\":\n                        position.set(Position.KEY_RPM, Integer.parseInt(value));\n                        break;\n                    case \"main_voltage\":\n                        position.set(Position.KEY_POWER, Double.parseDouble(value));\n                        break;\n                    case \"backup_voltage\":\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                        break;\n                    case \"analog1\":\n                    case \"analog2\":\n                    case \"analog3\":\n                        // Calculate ADC index (1, 2, or 3) from the last character\n                        position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                        break;\n                    case \"extra1\":\n                    case \"extra2\":\n                    case \"extra3\":\n                        // Store extra fields as string attributes\n                        position.set(key, value);\n                        break;\n                    default:\n                        // Store any other unknown key-value pairs as string attributes\n                        position.set(key, value);\n                        break;\n                }\n            } catch (NumberFormatException | ParseException | IndexOutOfBoundsException e) {\n                // Log or ignore parsing errors for individual fields?\n                // For robustness, ignore the field causing the error and continue parsing others.\n                // Logger.getLogger(StarcomProtocolDecoder.class.getName()).log(Level.WARNING, \"Failed to parse field: \" + entry, e);\n            }\n        }\n\n        // After processing all pairs, infer validity if gps_valid was missing\n        // and we have non-zero latitude and longitude coordinates.\n        // The Position object's valid flag defaults to false.\n        if (!gpsValidFound && position.getLatitude() != 0 && position.getLongitude() != 0) {\n            position.setValid(true);\n        }\n\n        // Return the position object, potentially incomplete if essential fields were missing or failed parsing.\n        // Downstream logic in Traccar usually handles filtering of incomplete positions if necessary.\n        if (position.getDeviceId() == 0) {\n             return null; // Return null if device ID could not be determined.\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}