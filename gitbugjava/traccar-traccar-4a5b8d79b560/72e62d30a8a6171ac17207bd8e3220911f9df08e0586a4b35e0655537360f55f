{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            switch (key) {\n                case \"unit\":\n                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    break;\n                case \"unittype\":\n                    position.set(Position.KEY_UNIT_TYPE, Integer.parseInt(value));\n                    break;\n                case \"address\":\n                    position.set(Position.KEY_ADDRESS, value);\n                    break;\n                case \"kind\":\n                    position.set(Position.KEY_KIND, Integer.parseInt(value));\n                    break;\n                case \"pending\":\n                    position.set(Position.KEY_PENDING, Integer.parseInt(value));\n                    break;\n                case \"mileage\":\n                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                    break;\n                case \"odometer\":\n                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                    break;\n                case \"logic_state\":\n                    position.set(Position.KEY_LOGIC_STATE, Integer.parseInt(value));\n                    break;\n                case \"reason\":\n                    position.set(Position.KEY_REASON, Integer.parseInt(value));\n                    break;\n                case \"eventid\":\n                    position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                    break;\n                case \"response\":\n                    position.set(Position.KEY_RESPONSE, Integer.parseInt(value));\n                    break;\n                case \"longitude\":\n                    position.setLongitude(Double.parseDouble(value));\n                    break;\n                case \"latitude\":\n                    position.setLatitude(Double.parseDouble(value));\n                    break;\n                case \"altitude\":\n                    position.setAltitude(Double.parseDouble(value));\n                    break;\n                case \"gps_valid\":\n                    position.setValid(Integer.parseInt(value) != 0);\n                    break;\n                case \"gps_connected\":\n                    position.set(Position.KEY_GPS_CONNECTED, Integer.parseInt(value) != 0);\n                    break;\n                case \"satellites\":\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case \"velocity\":\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    break;\n                case \"heading\":\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case \"emergency\":\n                    position.set(Position.KEY_EMERGENCY, Integer.parseInt(value) != 0);\n                    break;\n                case \"driver\":\n                    position.set(Position.KEY_DRIVER, Integer.parseInt(value) != 0);\n                    break;\n                case \"ignition\":\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                    break;\n                case \"door\":\n                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                    break;\n                case \"arm\":\n                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                    break;\n                case \"disarm\":\n                    position.set(Position.KEY_DISARMED, Integer.parseInt(value) != 0);\n                    break;\n                case \"extra1\":\n                case \"extra2\":\n                case \"extra3\":\n                    position.set(Position.PREFIX_EXTRA + (key.charAt(key.length() - 1) - '0'), Integer.parseInt(value));\n                    break;\n                case \"siren\":\n                    position.set(Position.KEY_SIREN, Integer.parseInt(value) != 0);\n                    break;\n                case \"lock\":\n                    position.set(Position.KEY_LOCK, Integer.parseInt(value) != 0);\n                    break;\n                case \"immobilizer\":\n                    position.set(Position.KEY_IMMOBILIZER, Integer.parseInt(value) != 0);\n                    break;\n                case \"unlock\":\n                    position.set(Position.KEY_UNLOCK, Integer.parseInt(value) != 0);\n                    break;\n                case \"fuel\":\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                    break;\n                case \"rpm\":\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case \"modemsignal\":\n                    position.set(Position.KEY_MODEM_SIGNAL, Integer.parseInt(value));\n                    break;\n                case \"main_voltage\":\n                    position.set(Position.KEY_POWER, Double.parseDouble(value));\n                    break;\n                case \"backup_voltage\":\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                    break;\n                case \"analog1\":\n                case \"analog2\":\n                case \"analog3\":\n                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                    break;\n                case \"datetime_utc\":\n                    position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value));\n                    break;\n                case \"datetime_actual\":\n                    position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value));\n                    break;\n                case \"network\":\n                    position.set(Position.KEY_NETWORK, value);\n                    break;\n                default:\n                    position.set(key, value);\n                    break;\n            }\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}