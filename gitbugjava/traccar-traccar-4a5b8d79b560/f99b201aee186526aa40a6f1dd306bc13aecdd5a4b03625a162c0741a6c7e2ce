{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n        position.setTime(new Date()); // Initialize with current time, will be overwritten if valid time found\n\n        Date timeActual = null;\n        Date timeUtc = null;\n\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            switch (key) {\n                case \"unit\":\n                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    break;\n                case \"gps_valid\":\n                    position.setValid(Integer.parseInt(value) != 0);\n                    break;\n                case \"datetime_actual\":\n                    // Store the actual time; will be evaluated after parsing all fields\n                    timeActual = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value);\n                    break;\n                case \"datetime_utc\":\n                    // Store the UTC time; will be evaluated after parsing all fields\n                    timeUtc = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value);\n                    break;\n                case \"latitude\":\n                    position.setLatitude(Double.parseDouble(value));\n                    break;\n                case \"longitude\":\n                    position.setLongitude(Double.parseDouble(value));\n                    break;\n                case \"altitude\":\n                    position.setAltitude(Double.parseDouble(value));\n                    break;\n                case \"velocity\":\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    break;\n                case \"heading\":\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case \"eventid\":\n                    position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                    break;\n                case \"mileage\":\n                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                    break;\n                case \"satellites\":\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case \"ignition\":\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                    break;\n                case \"door\":\n                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                    break;\n                case \"arm\":\n                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                    break;\n                case \"fuel\":\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                    break;\n                case \"rpm\":\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case \"main_voltage\":\n                    position.set(Position.KEY_POWER, Double.parseDouble(value));\n                    break;\n                case \"backup_voltage\":\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                    break;\n                case \"analog1\":\n                case \"analog2\":\n                case \"analog3\":\n                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                    break;\n                case \"extra1\":\n                case \"extra2\":\n                case \"extra3\":\n                default:\n                    position.set(key, value);\n                    break;\n            }\n        }\n\n        // Determine the final position time based on parsed values\n        // A common practice in Traccar is to consider dates before 2000-01-01 as invalid/default\n        // 2000-01-01 00:00:00 UTC corresponds to 946684800000L milliseconds from epoch.\n        final long MIN_VALID_TIME_MILLIS = 946684800000L;\n\n        if (timeActual != null && timeActual.getTime() > MIN_VALID_TIME_MILLIS) {\n            position.setTime(timeActual);\n        } else if (timeUtc != null && timeUtc.getTime() > MIN_VALID_TIME_MILLIS) {\n            position.setTime(timeUtc);\n        }\n        // If neither timeActual nor timeUtc are provided or are too old/invalid,\n        // the position's time will remain the current time set at initialization,\n        // which ensures position.isValid() doesn't fail due to an ancient timestamp.\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}