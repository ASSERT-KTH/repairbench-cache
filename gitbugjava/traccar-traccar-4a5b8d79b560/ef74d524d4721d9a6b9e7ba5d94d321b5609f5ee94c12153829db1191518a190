{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n        // Ensure sentence is not empty and contains at least two '|'\n        int firstPipe = sentence.indexOf('|');\n        int lastPipe = sentence.lastIndexOf('|');\n        if (firstPipe == -1 || lastPipe == -1 || firstPipe == lastPipe) {\n            return null; // Or throw an exception for malformed message\n        }\n        sentence = sentence.substring(firstPipe + 1, lastPipe);\n\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n\n        String actualDateString = null;\n        String utcDateString = null;\n        \n        // Prepare DateFormat object for parsing, assuming UTC times\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        sdf.setTimeZone(java.util.TimeZone.getTimeZone(\"UTC\"));\n\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            if (delimiter == -1) { // Skip malformed key-value pairs\n                continue;\n            }\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            switch (key) {\n                case \"unit\":\n                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    break;\n                case \"gps_valid\":\n                    position.setValid(Integer.parseInt(value) != 0);\n                    break;\n                case \"datetime_actual\":\n                    actualDateString = value; // Store for post-loop processing\n                    // Do not add to attributes here, as it's handled specially for position.setTime\n                    break;\n                case \"datetime_utc\":\n                    utcDateString = value; // Store for post-loop processing\n                    position.set(key, value); // Also store as a string attribute (as per original default behavior)\n                    break;\n                case \"latitude\":\n                    position.setLatitude(Double.parseDouble(value));\n                    break;\n                case \"longitude\":\n                    position.setLongitude(Double.parseDouble(value));\n                    break;\n                case \"altitude\":\n                    position.setAltitude(Double.parseDouble(value));\n                    break;\n                case \"velocity\":\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    break;\n                case \"heading\":\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case \"eventid\":\n                    position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                    break;\n                case \"mileage\":\n                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                    break;\n                case \"satellites\":\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case \"ignition\":\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                    break;\n                case \"door\":\n                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                    break;\n                case \"arm\":\n                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                    break;\n                case \"fuel\":\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                    break;\n                case \"rpm\":\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case \"main_voltage\":\n                    position.set(Position.KEY_POWER, Double.parseDouble(value));\n                    break;\n                case \"backup_voltage\":\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                    break;\n                case \"analog1\":\n                case \"analog2\":\n                case \"analog3\":\n                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                    break;\n                case \"extra1\":\n                case \"extra2\":\n                case \"extra3\":\n                default:\n                    // All other keys are stored as string attributes.\n                    // datetime_utc is handled explicitly above to capture its value AND store as attribute.\n                    // datetime_actual is not stored as a generic attribute if this logic is followed.\n                    // If datetime_actual should also be an attribute, add: if (key.equals(\"datetime_actual\")) position.set(key,value);\n                    position.set(key, value);\n                    break;\n            }\n        }\n\n        // After loop, process collected date strings to set position time\n        java.util.Date parsedActualDate = null;\n        if (actualDateString != null && !actualDateString.equals(\"1899/12/30 00:00:00\")) {\n            try {\n                parsedActualDate = sdf.parse(actualDateString);\n            } catch (java.text.ParseException e) {\n                // Error parsing actualDateString, parsedActualDate remains null\n            }\n        }\n\n        if (parsedActualDate != null) {\n            position.setTime(parsedActualDate);\n        } else if (utcDateString != null) {\n            // Fallback to utcDateString if actualDate was placeholder, null, or unparseable\n            try {\n                // Potentially add checks for placeholder values in utcDateString too if needed\n                java.util.Date parsedUtcDate = sdf.parse(utcDateString);\n                position.setTime(parsedUtcDate);\n            } catch (java.text.ParseException e) {\n                // Error parsing utcDateString, position.time remains null if actualDate also failed\n            }\n        }\n        // If both actualDate and utcDate are unusable, position.time remains null.\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}