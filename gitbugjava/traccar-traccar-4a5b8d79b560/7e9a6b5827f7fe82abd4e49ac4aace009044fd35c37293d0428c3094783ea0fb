{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n        // Ensure substring indices are valid before calling substring\n        int startIndex = sentence.indexOf('|');\n        int endIndex = sentence.lastIndexOf('|');\n        if (startIndex == -1 || endIndex == -1 || startIndex >= endIndex) {\n            return null; // Invalid format, missing delimiters or wrong order\n        }\n        sentence = sentence.substring(startIndex + 1, endIndex);\n\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n\n        DeviceSession deviceSession = null;\n        String unitValue = null;\n\n        // Pre-scan for unit to get DeviceSession early\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            if (delimiter > 0 && entry.substring(0, delimiter).equals(\"unit\")) {\n                unitValue = entry.substring(delimiter + 1);\n                break;\n            }\n        }\n\n        // Get device session using the unit value\n        if (unitValue != null && !unitValue.isEmpty()) {\n            deviceSession = getDeviceSession(channel, remoteAddress, unitValue);\n            if (deviceSession == null) {\n                // Log missing device session?\n                return null; // Cannot identify device, reject message\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n        } else {\n            // Log missing unit field?\n            return null; // 'unit' field is mandatory\n        }\n\n        // Process all key-value pairs\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            // Ensure delimiter exists and key is not empty\n            if (delimiter <= 0 || delimiter + 1 > entry.length()) {\n                continue; // Skip malformed entries\n            }\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n\n            // Skip unit field as it's already processed\n            if (key.equals(\"unit\")) {\n                continue;\n            }\n\n            // Use try-catch blocks for parsing to avoid crashing on unexpected values\n            try {\n                switch (key) {\n                    case \"gps_valid\":\n                        position.setValid(Integer.parseInt(value) != 0);\n                        break;\n                    case \"datetime_actual\":\n                        // Consider TimeZone UTC if needed:\n                        // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n                        // sdf.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n                        // position.setTime(sdf.parse(value));\n                        position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value));\n                        break;\n                    case \"latitude\":\n                        position.setLatitude(Double.parseDouble(value));\n                        break;\n                    case \"longitude\":\n                        position.setLongitude(Double.parseDouble(value));\n                        break;\n                    case \"altitude\":\n                        position.setAltitude(Double.parseDouble(value));\n                        break;\n                    case \"velocity\":\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                        break;\n                    case \"heading\":\n                        position.setCourse(Integer.parseInt(value));\n                        break;\n                    case \"eventid\":\n                        position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                        break;\n                    case \"mileage\":\n                        // Use mileage for odometer if odometer field is not present or preferred\n                        // Assuming mileage is in km, convert to meters\n                        position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                        break;\n                    case \"satellites\":\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        break;\n                    case \"ignition\":\n                        position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                        break;\n                    case \"door\":\n                        position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                        break;\n                    case \"arm\":\n                        position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                        break;\n                    case \"fuel\":\n                        position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                        break;\n                    case \"rpm\":\n                        position.set(Position.KEY_RPM, Integer.parseInt(value));\n                        break;\n                    case \"main_voltage\":\n                        position.set(Position.KEY_POWER, Double.parseDouble(value));\n                        break;\n                    case \"backup_voltage\":\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                        break;\n                    case \"analog1\":\n                    case \"analog2\":\n                    case \"analog3\":\n                        position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                        break;\n                    default:\n                        // Store other fields as attributes if value is not empty\n                        if (!value.isEmpty()) {\n                            position.set(key, value);\n                        }\n                        break;\n                }\n            } catch (NumberFormatException | ParseException e) {\n                // Log parsing exception? For now, ignore and continue processing other fields.\n                // Potentially log: Log.getLogger(StarcomProtocolDecoder.class).warn(\"Failed to parse field: \" + key, e);\n            }\n        }\n\n        // Check if essential fields like time and coordinates are set.\n        // If not, the position might still be invalid despite gps_valid=1.\n        // The Position class itself might handle this logic in isValid().\n        if (position.getTime() == null || position.getLatitude() == 0 && position.getLongitude() == 0) {\n             // If position lacks time or coordinates, it might not be valid.\n             // However, rely on the gps_valid flag primarily as per original logic.\n             // No change needed here unless protocol specifies otherwise.\n        }\n\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}