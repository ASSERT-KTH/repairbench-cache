{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index].substring(1)));\n            if (values[index++].charAt(0) == 'S') {\n                position.setLatitude(-position.getLatitude());\n            }\n            position.setLongitude(Double.parseDouble(values[index].substring(1)));\n            if (values[index++].charAt(0) == 'W') {\n                position.setLongitude(-position.getLongitude());\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index]));\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                index++;\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (values.length - index >= 5) {\n                position.setNetwork(new Network(CellTower.from(\n                        safeParseInt(values[index++], 10),\n                        safeParseInt(values[index++], 10),\n                        safeParseInt(values[index++], 16),\n                        safeParseInt(values[index++], 16),\n                        safeParseInt(values[index++], 10)\n                )));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                        + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                        + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            } else if (index < values.length) {\n                index++;\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            StringBuilder geofence = new StringBuilder();\n            if (index < values.length && !values[index].isEmpty()) {\n                geofence.append(values[index]);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                geofence.append(values[index]);\n            }\n            index++;\n            if (geofence.length() > 0) {\n                position.set(Position.KEY_GEOFENCE, geofence.toString());\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index]);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex;\n                int dataType;\n                if (index < values.length && !values[index].isEmpty()) {\n                    sensorIndex = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                    continue;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    dataType = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                    continue;\n                }\n                if (dataType == 0) {\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (index < values.length) {\n                        index++;\n                    }\n                } else if (dataType == 1) {\n                    index++; // temperature sensor serial number, skip\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    } else if (index < values.length) {\n                        index++;\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nprivate int safeParseInt(String s, int radix) {\n    if (s != null && !s.isEmpty()) {\n        return Integer.parseInt(s, radix);\n    } else {\n        return 0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}