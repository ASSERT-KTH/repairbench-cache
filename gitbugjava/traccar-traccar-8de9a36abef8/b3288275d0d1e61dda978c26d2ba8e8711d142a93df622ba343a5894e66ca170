{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (dataIndex < 0) {\n        // No ':' found, nothing to decode\n        return;\n    }\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (values.length == 0) {\n                break;\n            }\n            position.setValid(index < values.length && values[index++].equals(\"A\"));\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n                } catch (NumberFormatException e) {\n                    // Ignore speed if it's not a valid number\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setCourse(Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // Ignore course if not valid\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // Ignore altitude if not valid\n                }\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                index++;\n            }\n            break;\n        case \"GSM\":\n            // registration status & signal strength\n            index += 2;\n            // Accept from 5 up to 7 cell parameters (each cell is mcc, mnc, lac, cid, rssi)\n            java.util.List<CellTower> cellTowers = new java.util.ArrayList<>();\n            while (index + 4 < values.length && !values[index].isEmpty() && !values[index + 2].isEmpty() && !values[index + 3].isEmpty()\n                    && !values[index + 4].isEmpty()) {\n                try {\n                    int mcc = Integer.parseInt(values[index++]);\n                    int mnc = Integer.parseInt(values[index++]);\n                    int lac = Integer.parseInt(values[index++], 16);\n                    int cid = Integer.parseInt(values[index++], 16);\n                    int rssi = Integer.parseInt(values[index++]);\n                    cellTowers.add(CellTower.from(mcc, mnc, lac, cid, rssi));\n                } catch (NumberFormatException e) {\n                    break; // Stop on parsing error\n                }\n            }\n            if (!cellTowers.isEmpty()) {\n                position.setNetwork(new Network(cellTowers));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                try {\n                    int totalSeconds = (hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) * 3600 : 0)\n                            + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0);\n                    position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    int io = Integer.parseInt(values[index], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index + 1 < values.length) {\n                String geofence1 = !values[index].isEmpty() ? values[index] : \"\";\n                index++;\n                String geofence2 = !values[index].isEmpty() ? values[index] : \"\";\n                position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);\n                index++;\n            } else if (index < values.length) {\n                String geofence = !values[index].isEmpty() ? values[index] : \"\";\n                position.set(Position.KEY_GEOFENCE, geofence);\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index]);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (index + 1 >= values.length) break;\n                String sensorIndexStr = values[index++];\n                String dataTypeStr = values[index++];\n                if (sensorIndexStr.isEmpty() || dataTypeStr.isEmpty()) {\n                    continue;\n                }\n                int sensorIndex;\n                int dataType;\n                try {\n                    sensorIndex = Integer.parseInt(sensorIndexStr);\n                    dataType = Integer.parseInt(dataTypeStr);\n                } catch (NumberFormatException e) {\n                    continue;\n                }\n                if (dataType == 0) {\n                    // uniqueId\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                    }\n                    index++;\n                } else if (dataType == 1) {\n                    // temperature\n                    // sometimes there is one serial number string between dataType and value\n                    if (index < values.length && values[index].length() == 16) {\n                        // skip temperature sensor serial number\n                        index++;\n                    }\n                    if (index < values.length && !values[index].isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                        } catch (NumberFormatException e) {\n                            // ignore\n                        }\n                    }\n                    index++;\n                } else {\n                    // unknown data\n                    index++;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}