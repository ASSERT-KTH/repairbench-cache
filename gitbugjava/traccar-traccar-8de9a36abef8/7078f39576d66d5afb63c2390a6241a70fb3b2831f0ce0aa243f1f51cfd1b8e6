{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        String type;\n        String[] values;\n        int index = 0; // Initialized here, as it's used regardless of dataIndex\n\n        if (dataIndex == -1) {\n            type = fragment; // The whole fragment is the type (e.g., \"RST\")\n            values = new String[0];\n        } else {\n            type = fragment.substring(0, dataIndex);\n            if (fragment.length() == dataIndex + 1) { // Data part is empty (e.g., \"TYPE:\")\n                values = new String[0];\n            } else {\n                // Use limit -1 for split to preserve trailing empty strings\n                values = fragment.substring(dataIndex + 1).split(\";\", -1);\n            }\n        }\n\n        switch (type) {\n            case \"GPS\":\n                // Validity (field 0) - Assuming this field is always present and non-empty (\"A\" or \"V\")\n                if (index < values.length) { // Check if value exists\n                    position.setValid(values[index++].equals(\"A\"));\n                } else {\n                    // If strictly positional and this field is missing, still advance index\n                    // but this case implies malformed data if GPS type is asserted.\n                    index++; \n                }\n\n                // Satellites (field 1)\n                if (index < values.length) {\n                    String satStr = values[index++];\n                    if (!satStr.isEmpty()) {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(satStr));\n                    }\n                } else { index++; }\n\n\n                // Latitude (field 2)\n                if (index < values.length) {\n                    String latStr = values[index++];\n                    if (!latStr.isEmpty() && latStr.length() > 0) { // Must have at least N/S char\n                        if (latStr.length() > 1) { // e.g. \"N12.34\"\n                            position.setLatitude(Double.parseDouble(latStr.substring(1)));\n                        }\n                        // If latStr is just \"N\" or \"S\", value is considered 0 or remains unset based on default Position behavior.\n                        // Polarity is applied if latitude was set (either to parsed value or potentially to default 0.0).\n                        if (latStr.charAt(0) == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                    }\n                } else { index++; }\n\n                // Longitude (field 3)\n                if (index < values.length) {\n                    String lonStr = values[index++];\n                    if (!lonStr.isEmpty() && lonStr.length() > 0) { // Must have at least E/W char\n                        if (lonStr.length() > 1) { // e.g. \"E12.34\"\n                            position.setLongitude(Double.parseDouble(lonStr.substring(1)));\n                        }\n                        if (lonStr.charAt(0) == 'W') {\n                            position.setLongitude(-position.getLongitude());\n                        }\n                    }\n                } else { index++; }\n\n                // Speed (field 4) - original logic using values[index-1] was correct for its specific structure\n                // To align with consistent pattern:\n                if (index < values.length) {\n                    String speedStr = values[index++];\n                    if (!speedStr.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                    }\n                } else { index++; }\n                \n                // Course (field 5)\n                if (index < values.length) {\n                    String courseStr = values[index++];\n                    if (!courseStr.isEmpty()) {\n                        position.setCourse(Integer.parseInt(courseStr));\n                    }\n                } else { index++; }\n\n                // Altitude (field 6) - This was the source of the reported NFE\n                if (index < values.length) {\n                    String altStr = values[index++];\n                    if (!altStr.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altStr));\n                    }\n                }\n                // HDOP (field 7)\n                if (index < values.length) {\n                    String hdopStr = values[index++];\n                    if (!hdopStr.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                    }\n                }\n                // VDOP (field 8)\n                if (index < values.length) {\n                    String vdopStr = values[index++];\n                    if (!vdopStr.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n                // Ensure enough elements for CellTower.from(...)\n                if (index + 4 < values.length) {\n                    String mccStr = values[index++];\n                    String mncStr = values[index++];\n                    String lacStr = values[index++];\n                    String cidStr = values[index++];\n                    String rssiStr = values[index++]; // Assuming last value is RSSI, based on common patterns.\n                                                 // Original code had Integer.parseInt(values[index++]) as 5th param.\n                    if (!mccStr.isEmpty() && !mncStr.isEmpty() && !lacStr.isEmpty() && !cidStr.isEmpty() && !rssiStr.isEmpty()) {\n                        position.setNetwork(new Network(CellTower.from(\n                                Integer.parseInt(mccStr), Integer.parseInt(mncStr),\n                                Integer.parseInt(lacStr, 16), Integer.parseInt(cidStr, 16),\n                                Integer.parseInt(rssiStr))));\n                    }\n                } else {\n                    // Not enough data for GSM, advance index past expected fields if necessary\n                    index += 5;\n                }\n                break;\n            case \"COT\":\n                if (index < values.length) { // Odometer\n                    String odometerStr = values[index++];\n                    if (!odometerStr.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerStr));\n                    }\n                }\n                if (index < values.length) { // Hours\n                    String hoursField = values[index++];\n                    if (!hoursField.isEmpty()) {\n                        String[] hoursParts = hoursField.split(\"-\");\n                        long totalSeconds = 0;\n                        if (hoursParts.length > 0 && !hoursParts[0].isEmpty()) {\n                            totalSeconds += Long.parseLong(hoursParts[0]) * 3600;\n                        }\n                        if (hoursParts.length > 1 && !hoursParts[1].isEmpty()) {\n                            totalSeconds += Long.parseLong(hoursParts[1]) * 60;\n                        }\n                        if (hoursParts.length > 2 && !hoursParts[2].isEmpty()) {\n                            totalSeconds += Long.parseLong(hoursParts[2]);\n                        }\n                        position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) { // Power\n                    String powerStr = values[index++];\n                    if (!powerStr.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n                    }\n                }\n                if (index < values.length) { // Battery\n                    String batteryStr = values[index++];\n                    if (!batteryStr.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n                    }\n                }\n                if (index < values.length) { // ADC1\n                    String adc1Str = values[index++];\n                    if (!adc1Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));\n                    }\n                }\n                if (index < values.length) { // ADC2\n                    String adc2Str = values[index++];\n                    if (!adc2Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));\n                    }\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) { // Status\n                    String statusStr = values[index++];\n                    if (!statusStr.isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));\n                    }\n                }\n                if (index < values.length) { // IO\n                    String ioValue = values[index++];\n                    if (!ioValue.isEmpty()) {\n                        int io = Integer.parseInt(ioValue, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                // Geofence and other string fields\n                String field1 = \"\", field2 = \"\"; // Default to empty if not enough values\n                if (index < values.length) field1 = values[index++];\n                if (index < values.length) field2 = values[index++];\n                position.set(Position.KEY_GEOFENCE, field1 + field2);\n\n                if (index < values.length) position.set(\"eventStatus\", values[index++]);\n                if (index < values.length) position.set(\"packetType\", values[index++]);\n                break;\n            case \"ETD\": // String data\n                if (index < values.length) position.set(\"eventData\", values[index++]);\n                break;\n            case \"OBD\": // String data\n                if (index < values.length) position.set(\"obd\", values[index++]);\n                break;\n            case \"TAG\": // String data\n                if (index < values.length) position.set(\"tagData\", values[index++]);\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    String sensorIndexStr = values[index++];\n                    if (sensorIndexStr.isEmpty() || index >= values.length) break;\n                    int sensorIndexVal;\n                    try {\n                        sensorIndexVal = Integer.parseInt(sensorIndexStr);\n                    } catch (NumberFormatException e) { break; } // Malformed, stop IWD processing\n\n\n                    String dataTypeStr = values[index++];\n                    if (dataTypeStr.isEmpty()) break;\n                    int dataTypeVal;\n                    try {\n                        dataTypeVal = Integer.parseInt(dataTypeStr);\n                    } catch (NumberFormatException e) { break; }\n\n\n                    if (dataTypeVal == 0) { // Driver ID (String)\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        } else { break; }\n                    } else if (dataTypeVal == 1) { // Temperature\n                        if (index < values.length) { // Skip temperature sensor serial number\n                           index++; \n                        } else { break; }\n                        \n                        if (index < values.length) { // Temperature value\n                            String tempValueStr = values[index++];\n                            if (!tempValueStr.isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndexVal, Double.parseDouble(tempValueStr));\n                            }\n                        } else { break; }\n                    } else {\n                        // Unknown data type for IWD, could mean end of IWD data or malformed.\n                        // Safest to break to avoid misinterpreting subsequent fields.\n                        break; \n                    }\n                }\n                break;\n            default:\n                // Unknown type, do nothing or log\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}