{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (dataIndex == -1 || fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(index < values.length && values[index++].equals(\"A\"));\n\n            if (index < values.length) {\n                String satellitesStr = values[index++];\n                if (!satellitesStr.isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesStr));\n                }\n            }\n\n            if (index < values.length) {\n                String latitudeStr = values[index++];\n                if (!latitudeStr.isEmpty()) {\n                    try {\n                        position.setLatitude(Double.parseDouble(latitudeStr.substring(1)));\n                        if (latitudeStr.charAt(0) == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                    } catch (Exception ignore) {\n                        // gracefully handle invalid latitude format\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String longitudeStr = values[index++];\n                if (!longitudeStr.isEmpty()) {\n                    try {\n                        position.setLongitude(Double.parseDouble(longitudeStr.substring(1)));\n                        if (longitudeStr.charAt(0) == 'W') {\n                            position.setLongitude(-position.getLongitude());\n                        }\n                    } catch (Exception ignore) {\n                        // gracefully handle invalid longitude format\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String speedStr = values[index++];\n                if (!speedStr.isEmpty()) {\n                    try {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid speed\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String courseStr = values[index++];\n                if (!courseStr.isEmpty()) {\n                    try {\n                        position.setCourse(Integer.parseInt(courseStr));\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid course\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String altitudeStr = values[index++];\n                if (!altitudeStr.isEmpty()) {\n                    try {\n                        position.setAltitude(Integer.parseInt(altitudeStr));\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid altitude\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String hdopStr = values[index++];\n                if (!hdopStr.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid hdop\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String vdopStr = values[index++];\n                if (!vdopStr.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid vdop\n                    }\n                }\n            }\n\n            break;\n\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index < values.length && index + 2 < values.length) {\n                try {\n                    position.setNetwork(new Network(CellTower.from(\n                            Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                            Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                            Integer.parseInt(values[index++]))\n                    ));\n                } catch (NumberFormatException ignore) {\n                    // skip invalid input, avoid crash\n                }\n            }\n            break;\n\n        case \"COT\":\n            if (index < values.length) {\n                String cotStr = values[index++];\n                if (!cotStr.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(cotStr));\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid input\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String hoursSet = values[index++];\n                if (!hoursSet.isEmpty()) {\n                    String[] hours = hoursSet.split(\"-\");\n                    try {\n                        position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600 +\n                                (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0) +\n                                (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid hour string\n                    }\n                }\n            }\n\n            break;\n\n        case \"ADC\":\n            if (index < values.length) {\n                String powerStr = values[index++];\n                if (!powerStr.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n                    } catch (NumberFormatException ignore) {\n                        // skip faulty ADC data\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String batteryStr = values[index++];\n                if (!batteryStr.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n                    } catch (NumberFormatException ignore) {\n                        // skip faulty ADC value\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String adc1Str = values[index++];\n                if (!adc1Str.isEmpty()) {\n                    try {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));\n                    } catch (NumberFormatException ignore) {\n                        // skip faulty ADC value\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                String adc2Str = values[index++];\n                if (!adc2Str.isEmpty()) {\n                    try {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));\n                    } catch (NumberFormatException ignore) {\n                        // skip faulty ADC value\n                    }\n                }\n            }\n\n            break;\n\n        case \"DTT\":\n            if (index < values.length) {\n                String ioStr = values[index++];\n                if (!ioStr.isEmpty()) {\n                    try {\n                        int io = Integer.parseInt(ioStr, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    } catch (NumberFormatException ignore) {\n                        // skip invalid IO input\n                    }\n                }\n            }\n\n            if (index < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            }\n\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n\n            break;\n\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n\n        case \"IWD\":\n            while (index < values.length) {\n                try {\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n\n                    if (dataType == 0) {\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        }\n                    } else if (dataType == 1) {\n                        if (index + 1 < values.length) {\n                            index += 1; // sensor ID\n                            try {\n                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                            } catch (NumberFormatException iaba) {\n                                index++; // advance anyway\n                            }\n                        } else {\n                            index += 2; // skip sensor data\n                        }\n                    }\n                } catch (NumberFormatException ignore) {\n                    // skip malformed IWD data\n                }\n            }\n\n            break;\n\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}