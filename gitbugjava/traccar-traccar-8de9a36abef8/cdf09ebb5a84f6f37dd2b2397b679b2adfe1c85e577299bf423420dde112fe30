{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (index < values.length) {\n                position.setValid(values[index++].equals(\"A\"));\n            } else break;\n\n            if (index < values.length) {\n                String satellites = values[index++];\n                if (!satellites.isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellites));\n                }\n            } else break;\n\n            if (index < values.length) {\n                String latitude = values[index++];\n                if (!latitude.isEmpty()) {\n                    position.setLatitude(Double.parseDouble(latitude.substring(1)));\n                }\n                if (!latitude.isEmpty() && latitude.charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            } else break;\n\n            if (index < values.length) {\n                String longitude = values[index++];\n                if (!longitude.isEmpty()) {\n                    position.setLongitude(Double.parseDouble(longitude.substring(1)));\n                }\n                if (!longitude.isEmpty() && longitude.charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            } else break;\n\n            if (index < values.length) {\n                String speed = values[index++];\n                if (!speed.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n                }\n            } else break;\n\n            if (index < values.length) {\n                String course = values[index++];\n                if (!course.isEmpty()) {\n                    position.setCourse(Integer.parseInt(course));\n                }\n            } else break;\n\n            if (index < values.length) {\n                String altitude = values[index++];\n                if (!altitude.isEmpty()) {\n                    position.setAltitude(Integer.parseInt(altitude));\n                }\n            } else break;\n\n            if (index < values.length) {\n                String hdop = values[index++];\n                if (!hdop.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                }\n            } else break;\n\n            if (index < values.length) {\n                String vdop = values[index++];\n                if (!vdop.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                }\n            }\n\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index + 3 < values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                    Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++]))));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length) {\n                String odometer = values[index++];\n                if (!odometer.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));\n                }\n            }\n            if (index < values.length) {\n                String hoursStr = values[index++];\n                if (!hoursStr.isEmpty()) {\n                    String[] hours = hoursStr.split(\"-\");\n                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000L);\n                }\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length) {\n                String power = values[index++];\n                if (!power.isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(power));\n                }\n            }\n            if (index < values.length) {\n                String battery = values[index++];\n                if (!battery.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(battery));\n                }\n            }\n            if (index < values.length) {\n                String adc1 = values[index++];\n                if (!adc1.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                }\n            }\n            if (index < values.length) {\n                String adc2 = values[index++];\n                if (!adc2.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                }\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length) {\n                String status = values[index++];\n                if (!status.isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));\n                }\n            }\n            if (index < values.length) {\n                String io = values[index++];\n                if (!io.isEmpty()) {\n                    int val = Integer.parseInt(io, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(val, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(val, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(val, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(val, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(val, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(val, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(val, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(val, 7));\n                }\n            }\n            if (index + 1 < values.length) {\n                String geofence = values[index++] + values[index++];\n                position.set(Position.KEY_GEOFENCE, geofence);\n            }\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index + 1 < values.length) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0 && index < values.length) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1 && index + 2 < values.length) {\n                    index++; // skip sensor serial number\n                    String tempStr = values[index++];\n                    if (!tempStr.isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));\n                    }\n                } else {\n                    break;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}