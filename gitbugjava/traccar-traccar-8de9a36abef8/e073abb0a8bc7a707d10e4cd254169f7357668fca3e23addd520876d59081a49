{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        if (dataIndex == -1) {\n            return; // Invalid fragment format\n        }\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            // Split by semicolon, preserving trailing empty strings if any\n            values = fragment.substring(dataIndex + 1).split(\";\", -1);\n        }\n\n        String type = fragment.substring(0, dataIndex);\n\n        try {\n            switch (type) {\n                case \"GPS\":\n                    if (index < values.length) { // Validity\n                        position.setValid(values[index].equals(\"A\"));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // Satellites\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) { // Latitude\n                        position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                        if (values[index].charAt(0) == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) { // Longitude\n                        position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                        if (values[index].charAt(0) == 'W') {\n                            position.setLongitude(-position.getLongitude());\n                        }\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // Speed\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index]))); // Use Double for kph\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // Course\n                        position.setCourse(Double.parseDouble(values[index])); // Course can be decimal\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // Altitude\n                        position.setAltitude(Double.parseDouble(values[index])); // Altitude can be decimal\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // HDOP\n                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // VDOP\n                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                    }\n                    // index++; // No need to increment after the last field\n                    break;\n                case \"GSM\":\n                    index += 1; // skip registration status\n                    index += 1; // skip signal strength\n                    Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        mcc = Integer.parseInt(values[index]);\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        mnc = Integer.parseInt(values[index]);\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        lac = Integer.parseInt(values[index], 16);\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        cid = Integer.parseInt(values[index], 16);\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        rssi = Integer.parseInt(values[index]);\n                    }\n                    // index++; // No need to increment after the last field\n                    if (mcc != null && mnc != null && lac != null && cid != null) {\n                        CellTower cellTower = CellTower.from(mcc, mnc, lac, cid, rssi); // rssi can be null\n                        position.setNetwork(new Network(cellTower));\n                    }\n                    break;\n                case \"COT\":\n                    if (index < values.length && !values[index].isEmpty()) { // Odometer\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // Hours\n                        String[] hours = values[index].split(\"-\");\n                        if (hours.length > 0 && !hours[0].isEmpty()) {\n                            long totalSeconds = Long.parseLong(hours[0]) * 3600;\n                            if (hours.length > 1 && !hours[1].isEmpty()) {\n                                totalSeconds += Long.parseLong(hours[1]) * 60;\n                            }\n                            if (hours.length > 2 && !hours[2].isEmpty()) {\n                                totalSeconds += Long.parseLong(hours[2]);\n                            }\n                            position.set(Position.KEY_HOURS, totalSeconds * 1000L);\n                        }\n                    }\n                    // index++; // No need to increment after the last field\n                    break;\n                case \"ADC\":\n                    if (index < values.length && !values[index].isEmpty()) { // Power\n                        position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // Battery\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // ADC1\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // ADC2\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n                    }\n                    // index++; // No need to increment after the last field\n                    break;\n                case \"DTT\":\n                    if (index < values.length && !values[index].isEmpty()) { // Status\n                        position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n                    }\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) { // IO\n                        int io = Integer.parseInt(values[index], 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                    index++;\n                    String geofence = \"\";\n                    if (index < values.length) { // Geofence part 1\n                        geofence += values[index];\n                    }\n                    index++;\n                    if (index < values.length) { // Geofence part 2\n                        geofence += values[index];\n                    }\n                    index++;\n                    if (!geofence.isEmpty()) {\n                        position.set(Position.KEY_GEOFENCE, geofence);\n                    }\n\n                    if (index < values.length) { // eventStatus\n                        position.set(\"eventStatus\", values[index]);\n                    }\n                    index++;\n\n                    if (index < values.length) { // packetType\n                        position.set(\"packetType\", values[index]);\n                    }\n                    // index++; // No need to increment after the last field\n                    break;\n                case \"ETD\":\n                    if (index < values.length) {\n                        position.set(\"eventData\", values[index]);\n                    }\n                    // index++; // Only one field expected\n                    break;\n                case \"OBD\":\n                    if (index < values.length) {\n                        position.set(\"obd\", values[index]);\n                    }\n                    // index++; // Only one field expected\n                    break;\n                case \"TAG\":\n                    if (index < values.length) {\n                        position.set(\"tagData\", values[index]);\n                    }\n                    // index++; // Only one field expected\n                    break;\n                case \"IWD\":\n                    while (index < values.length) {\n                        int sensorIndex = -1;\n                        if (!values[index].isEmpty()) {\n                            sensorIndex = Integer.parseInt(values[index]);\n                        }\n                        index++;\n\n                        if (index >= values.length) {\n                            break; // Need data type\n                        }\n                        int dataType = -1;\n                        if (!values[index].isEmpty()) {\n                            dataType = Integer.parseInt(values[index]);\n                        }\n                        index++;\n\n                        if (dataType == 0) { // Driver ID\n                            if (index < values.length) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                            } else {\n                                break; // Not enough data for Driver ID value\n                            }\n                        } else if (dataType == 1) { // Temperature\n                            index += 1; // Skip temperature sensor serial number (present or not)\n                            if (index < values.length && !values[index].isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                            }\n                            index++;\n                        } else {\n                            // Unknown data type, assume it takes one value field like others\n                            if (index < values.length) {\n                                index++; // Skip the unknown value field\n                            } else {\n                                break; // No value field to skip\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown fragment type, ignore\n                    break;\n            }\n        } catch (NumberFormatException e) {\n            // Log error or handle corrupted data if necessary\n            // System.err.println(\"Failed to parse number in fragment: \" + fragment + \" - \" + e.getMessage());\n        } catch (IndexOutOfBoundsException e) {\n            // Log error or handle corrupted data if necessary\n            // System.err.println(\"Index out of bounds in fragment: \" + fragment + \" - \" + e.getMessage());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}