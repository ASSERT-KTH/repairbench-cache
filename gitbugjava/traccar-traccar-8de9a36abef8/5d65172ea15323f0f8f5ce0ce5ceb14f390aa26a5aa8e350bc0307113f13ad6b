{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            // Use -1 limit to keep trailing empty strings, which might be significant.\n            // However, the original split behavior handles `;;` into `[\"\", \"\"]` correctly.\n            // The fix is more about checking individual elements for emptiness.\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                // First field: validity status (\"A\", \"V\", \"L\")\n                if (index < values.length) {\n                    String validity = values[index++];\n                    position.setValid(validity.equals(\"A\"));\n                }\n\n                // Second field: Satellites\n                if (index < values.length) {\n                    String satellitesValue = values[index++];\n                    if (!satellitesValue.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error if necessary, skip this field\n                        }\n                    }\n                }\n\n                // Third field: Latitude\n                if (index < values.length) {\n                    String latitudeRaw = values[index++];\n                    if (!latitudeRaw.isEmpty() && latitudeRaw.length() > 1) { // Ensure there's a sign and data\n                        try {\n                            position.setLatitude(Double.parseDouble(latitudeRaw.substring(1)));\n                            if (latitudeRaw.charAt(0) == 'S') {\n                                position.setLatitude(-position.getLatitude());\n                            }\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Fourth field: Longitude\n                if (index < values.length) {\n                    String longitudeRaw = values[index++];\n                    if (!longitudeRaw.isEmpty() && longitudeRaw.length() > 1) { // Ensure there's a sign and data\n                        try {\n                            position.setLongitude(Double.parseDouble(longitudeRaw.substring(1)));\n                            if (longitudeRaw.charAt(0) == 'W') {\n                                position.setLongitude(-position.getLongitude());\n                            }\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Fifth field: Speed\n                if (index < values.length) {\n                    String speedValue = values[index++];\n                    if (!speedValue.isEmpty()) {\n                        try {\n                            position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Sixth field: Course\n                if (index < values.length) {\n                    String courseValue = values[index++];\n                    if (!courseValue.isEmpty()) {\n                        try {\n                            position.setCourse(Integer.parseInt(courseValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Seventh field: Altitude (optional)\n                if (index < values.length) {\n                    String altitudeValue = values[index++];\n                    if (!altitudeValue.isEmpty()) {\n                        try {\n                            position.setAltitude(Integer.parseInt(altitudeValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Eighth field: HDOP (optional)\n                if (index < values.length) {\n                    String hdopValue = values[index++];\n                    if (!hdopValue.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Ninth field: VDOP (optional)\n                if (index < values.length) {\n                    String vdopValue = values[index++];\n                    if (!vdopValue.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status (skipped)\n                index += 1; // signal strength (skipped)\n\n                // CellTower fields: mcc, mnc, lac, cid, rsrp\n                if (index + 4 < values.length) { // Ensure all 5 values exist for CellTower.from\n                    String mcc = values[index++];\n                    String mnc = values[index++];\n                    String lac = values[index++];\n                    String cid = values[index++];\n                    String rsrp = values[index++];\n\n                    if (!mcc.isEmpty() && !mnc.isEmpty() && !lac.isEmpty() && !cid.isEmpty() && !rsrp.isEmpty()) {\n                        try {\n                            position.setNetwork(new Network(CellTower.from(\n                                    Integer.parseInt(mcc),\n                                    Integer.parseInt(mnc),\n                                    Integer.parseInt(lac, 16),\n                                    Integer.parseInt(cid, 16),\n                                    Integer.parseInt(rsrp))));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                break;\n            case \"COT\":\n                // Odometer\n                if (index < values.length) {\n                    String odometerValue = values[index++];\n                    if (!odometerValue.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Hours (can be \"HH-MM-SS\" or empty/single part)\n                if (index < values.length) {\n                    String hoursValue = values[index++]; // Get the value and increment index\n                    if (!hoursValue.isEmpty()) { // Only process if the string is not empty\n                        String[] hours = hoursValue.split(\"-\");\n                        if (hours.length > 0 && !hours[0].isEmpty()) { // Check if the first part exists and is not empty\n                            try {\n                                long totalSeconds = (long) Integer.parseInt(hours[0]) * 3600;\n                                if (hours.length > 1 && !hours[1].isEmpty()) {\n                                    totalSeconds += (long) Integer.parseInt(hours[1]) * 60;\n                                }\n                                if (hours.length > 2 && !hours[2].isEmpty()) {\n                                    totalSeconds += Integer.parseInt(hours[2]);\n                                }\n                                position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                            } catch (NumberFormatException e) {\n                                // Log or handle error\n                            }\n                        }\n                    }\n                }\n                break;\n            case \"ADC\":\n                // Power\n                if (index < values.length) {\n                    String powerValue = values[index++];\n                    if (!powerValue.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_POWER, Double.parseDouble(powerValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Battery\n                if (index < values.length) {\n                    String batteryValue = values[index++];\n                    if (!batteryValue.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryValue));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // ADC 1\n                if (index < values.length) {\n                    String adc1Value = values[index++];\n                    if (!adc1Value.isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Value));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // ADC 2\n                if (index < values.length) {\n                    String adc2Value = values[index++];\n                    if (!adc2Value.isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Value));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                break;\n            case \"DTT\":\n                // Status\n                if (index < values.length) {\n                    String statusValue = values[index++];\n                    if (!statusValue.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_STATUS, Integer.parseInt(statusValue, 16));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // IO state\n                if (index < values.length) {\n                    String ioValue = values[index++];\n                    if (!ioValue.isEmpty()) {\n                        try {\n                            int io = Integer.parseInt(ioValue, 16);\n                            position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                            position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                            position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                            position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                            position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                            position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                            position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                            position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                // Geofence (two parts concatenated)\n                if (index + 1 < values.length) {\n                    position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                } else if (index < values.length) { // Only one part available\n                    position.set(Position.KEY_GEOFENCE, values[index++]);\n                }\n\n                // Event Status\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]); // String field, no parsing issues with empty string\n                }\n\n                // Packet Type\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]); // String field, no parsing issues with empty string\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]); // String field\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]); // String field\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]); // String field\n                }\n                break;\n            case \"IWD\":\n                while (index + 1 < values.length) { // Ensure at least sensorIndex and dataType are available for the current record\n                    String sensorIndexValue = values[index++];\n                    String dataTypeValue = values[index++];\n\n                    if (!sensorIndexValue.isEmpty() && !dataTypeValue.isEmpty()) {\n                        try {\n                            int sensorIndex = Integer.parseInt(sensorIndexValue);\n                            int dataType = Integer.parseInt(dataTypeValue);\n\n                            if (dataType == 0) { // Driver ID\n                                if (index < values.length) {\n                                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                                }\n                            } else if (dataType == 1) { // Temperature sensor\n                                index += 1; // Skip temperature sensor serial number\n                                if (index < values.length) { // Check if temperature value exists\n                                    String tempValue = values[index++];\n                                    if (!tempValue.isEmpty()) {\n                                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));\n                                    }\n                                }\n                            } else {\n                                // Unknown dataType, advance index by 0 (already advanced by 2 for sensorIndex and dataType)\n                                // and break loop to avoid infinite loop on malformed data\n                                break;\n                            }\n                        } catch (NumberFormatException e) {\n                            // Log or handle error, then break this malformed record\n                            break;\n                        }\n                    } else {\n                        // Malformed sensorIndex or dataType, break the loop\n                        break;\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}