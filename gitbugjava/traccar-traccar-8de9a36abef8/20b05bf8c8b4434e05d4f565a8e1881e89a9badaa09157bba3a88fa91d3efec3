{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    String type = fragment.substring(0, dataIndex);\n    switch (type) {\n        case \"GPS\":\n            // Validity\n            String valid = (index < values.length ? values[index++] : \"\");\n            position.setValid(\"A\".equals(valid));\n\n            // Satellites\n            String satellites = (index < values.length ? values[index++] : \"\");\n            if (!satellites.isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(satellites));\n            }\n\n            // Latitude: expected format \"N31.551856\" or \"S31.551856\"\n            if (index < values.length) {\n                String latField = values[index++];\n                if (latField.length() > 1) {\n                    double latitude = Double.parseDouble(latField.substring(1));\n                    if (latField.charAt(0) == 'S') {\n                        latitude = -latitude;\n                    }\n                    position.setLatitude(latitude);\n                }\n            }\n\n            // Longitude: expected format \"E74.366920\" or \"W74.366920\"\n            if (index < values.length) {\n                String lonField = values[index++];\n                if (lonField.length() > 1) {\n                    double longitude = Double.parseDouble(lonField.substring(1));\n                    if (lonField.charAt(0) == 'W') {\n                        longitude = -longitude;\n                    }\n                    position.setLongitude(longitude);\n                }\n            }\n\n            // Speed (in kph, converted to knots)\n            String speedStr = (index < values.length ? values[index++] : \"\");\n            if (!speedStr.isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n            }\n\n            // Course\n            String courseStr = (index < values.length ? values[index++] : \"\");\n            if (!courseStr.isEmpty()) {\n                position.setCourse(Integer.parseInt(courseStr));\n            }\n\n            // Altitude (optional)\n            if (index < values.length) {\n                String altStr = values[index++];\n                if (!altStr.isEmpty()) {\n                    position.setAltitude(Integer.parseInt(altStr));\n                }\n            }\n\n            // HDOP (optional)\n            if (index < values.length) {\n                String hdopStr = values[index++];\n                if (!hdopStr.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                }\n            }\n\n            // VDOP (optional)\n            if (index < values.length) {\n                String vdopStr = values[index++];\n                if (!vdopStr.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                }\n            }\n            break;\n\n        case \"GSM\":\n            // Skip registration status and signal strength\n            index++;\n            index++;\n            String mccStr = (index < values.length ? values[index++] : \"\");\n            String mncStr = (index < values.length ? values[index++] : \"\");\n            String lacStr = (index < values.length ? values[index++] : \"\");\n            String cidStr = (index < values.length ? values[index++] : \"\");\n            String signalStr = (index < values.length ? values[index++] : \"\");\n            if (!mccStr.isEmpty() && !mncStr.isEmpty() && !lacStr.isEmpty()\n                    && !cidStr.isEmpty() && !signalStr.isEmpty()) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(mccStr),\n                        Integer.parseInt(mncStr),\n                        Integer.parseInt(lacStr, 16),\n                        Integer.parseInt(cidStr, 16),\n                        Integer.parseInt(signalStr))));\n            }\n            break;\n\n        case \"COT\":\n            // Odometer\n            if (index < values.length) {\n                String odometerStr = values[index++];\n                if (!odometerStr.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometerStr));\n                }\n            }\n            // Hours (optional)\n            if (index < values.length) {\n                String hoursStr = values[index++];\n                if (!hoursStr.isEmpty()) {\n                    String[] parts = hoursStr.split(\"-\");\n                    int totalSeconds = 0;\n                    if (parts.length > 0 && !parts[0].isEmpty()) {\n                        totalSeconds += Integer.parseInt(parts[0]) * 3600;\n                    }\n                    if (parts.length > 1 && !parts[1].isEmpty()) {\n                        totalSeconds += Integer.parseInt(parts[1]) * 60;\n                    }\n                    if (parts.length > 2 && !parts[2].isEmpty()) {\n                        totalSeconds += Integer.parseInt(parts[2]);\n                    }\n                    position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                }\n            }\n            break;\n\n        case \"ADC\":\n            String powerStr = (index < values.length ? values[index++] : \"\");\n            if (!powerStr.isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n            }\n            if (index < values.length) {\n                String batteryStr = values[index++];\n                if (!batteryStr.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n                }\n            }\n            if (index < values.length) {\n                String adc1Str = values[index++];\n                if (!adc1Str.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));\n                }\n            }\n            if (index < values.length) {\n                String adc2Str = values[index++];\n                if (!adc2Str.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));\n                }\n            }\n            break;\n\n        case \"DTT\":\n            if (index < values.length) {\n                String statusStr = values[index++];\n                if (!statusStr.isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));\n                }\n            }\n            if (index < values.length) {\n                String ioStr = values[index++];\n                if (!ioStr.isEmpty()) {\n                    int io = Integer.parseInt(ioStr, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n            // Geofence expected parts\n            String geoPart1 = (index < values.length ? values[index++] : \"\");\n            String geoPart2 = (index < values.length ? values[index++] : \"\");\n            position.set(Position.KEY_GEOFENCE, geoPart1 + geoPart2);\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n\n        case \"IWD\":\n            while (index < values.length) {\n                String sensorIndexStr = (index < values.length ? values[index++] : \"\");\n                if (sensorIndexStr.isEmpty()) {\n                    break;\n                }\n                int sensorIndex = Integer.parseInt(sensorIndexStr);\n                String dataTypeStr = (index < values.length ? values[index++] : \"\");\n                if (dataTypeStr.isEmpty()) {\n                    break;\n                }\n                int dataType = Integer.parseInt(dataTypeStr);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    // Skip temperature sensor serial number\n                    index++;\n                    if (index < values.length) {\n                        String tempStr = values[index++];\n                        if (!tempStr.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));\n                        }\n                    }\n                }\n            }\n            break;\n\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}