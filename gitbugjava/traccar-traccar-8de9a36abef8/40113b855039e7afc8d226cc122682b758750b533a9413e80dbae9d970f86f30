{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values.length > index && values[index++].equals(\"A\"));\n            if (values.length > index) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            }\n            if (values.length > index) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            if (values.length > index) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            if (values.length > index) {\n                String speedStr = values[index++];\n                if (!speedStr.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                }\n            }\n            if (values.length > index) {\n                String courseStr = values[index++];\n                if (!courseStr.isEmpty()) {\n                    position.setCourse(Integer.parseInt(courseStr));\n                }\n            }\n            if (values.length > index) {\n                String altitudeStr = values[index++];\n                if (!altitudeStr.isEmpty()) {\n                    position.setAltitude(Double.parseDouble(altitudeStr));\n                }\n            }\n            if (values.length > index) {\n                String hdopStr = values[index++];\n                if (!hdopStr.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                }\n            }\n            if (values.length > index) {\n                String vdopStr = values[index++];\n                if (!vdopStr.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                }\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (values.length >= index + 5) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n            }\n            break;\n        case \"COT\":\n            if (values.length > index) {\n                String odo = values[index++];\n                if (!odo.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));\n                }\n            }\n            if (values.length > index) {\n                String hoursValue = values[index++];\n                if (!hoursValue.isEmpty()) {\n                    String[] hoursSplit = hoursValue.split(\"-\");\n                    int totalSeconds = Integer.parseInt(hoursSplit[0]) * 3600\n                            + (hoursSplit.length > 1 ? Integer.parseInt(hoursSplit[1]) * 60 : 0)\n                            + (hoursSplit.length > 2 ? Integer.parseInt(hoursSplit[2]) : 0);\n                    position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                }\n            }\n            break;\n        case \"ADC\":\n            if (values.length > index) {\n                String val = values[index++];\n                if (!val.isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(val));\n                }\n            }\n            if (values.length > index) {\n                String val = values[index++];\n                if (!val.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(val));\n                }\n            }\n            if (values.length > index) {\n                String val = values[index++];\n                if (!val.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(val));\n                }\n            }\n            if (values.length > index) {\n                String val = values[index++];\n                if (!val.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(val));\n                }\n            }\n            break;\n        case \"DTT\":\n            if (values.length > index) {\n                String statusValue = values[index++];\n                if (!statusValue.isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(statusValue, 16));\n                }\n            }\n            if (values.length > index) {\n                String ioValue = values[index++];\n                if (!ioValue.isEmpty()) {\n                    int io = Integer.parseInt(ioValue, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n            if (values.length > index + 1) {\n                String gf1 = values[index++];\n                String gf2 = values[index++];\n                position.set(Position.KEY_GEOFENCE, gf1 + gf2);\n            } else {\n                index = values.length; // skip to end if insufficient\n            }\n            if (values.length > index) {\n                String evtStatus = values[index++];\n                position.set(\"eventStatus\", evtStatus);\n            }\n            if (values.length > index) {\n                String packetType = values[index++];\n                position.set(\"packetType\", packetType);\n            }\n            break;\n        case \"ETD\":\n            if (values.length > index) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (values.length > index) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (values.length > index) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (values.length > index) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index++; // skip temperature sensor serial number\n                    if (values.length > index) {\n                        String tempVal = values[index++];\n                        if (!tempVal.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempVal));\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}