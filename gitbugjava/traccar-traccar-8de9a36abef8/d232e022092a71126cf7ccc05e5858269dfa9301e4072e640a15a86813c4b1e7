{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // validity and satellites\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            // latitude\n            position.setLatitude(Double.parseDouble(values[index].substring(1)));\n            if (values[index++].charAt(0) == 'S') {\n                position.setLatitude(-position.getLatitude());\n            }\n            // longitude\n            position.setLongitude(Double.parseDouble(values[index].substring(1)));\n            if (values[index++].charAt(0) == 'W') {\n                position.setLongitude(-position.getLongitude());\n            }\n            // speed (guard empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n            }\n            index++;\n            // course (guard empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index]));\n            }\n            index++;\n            // altitude (guard empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index]));\n            }\n            index++;\n            // HDOP (guard empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n            }\n            index++;\n            // VDOP (guard empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n            }\n            break;\n\n        case \"GSM\":\n            // skip registration status, signal strength\n            index += 2;\n            position.setNetwork(new Network(CellTower.from(\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++])\n            )));\n            break;\n\n        case \"COT\":\n            // odometer (guard empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n            }\n            index++;\n            // hours (guard empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int time = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) {\n                    time += Integer.parseInt(hours[0]) * 3600;\n                }\n                if (hours.length > 1 && !hours[1].isEmpty()) {\n                    time += Integer.parseInt(hours[1]) * 60;\n                }\n                if (hours.length > 2 && !hours[2].isEmpty()) {\n                    time += Integer.parseInt(hours[2]);\n                }\n                position.set(Position.KEY_HOURS, time * 1000);\n            }\n            break;\n\n        case \"ADC\":\n            position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            if (index < values.length) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n\n        case \"DTT\":\n            position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            if (index < values.length) {\n                String fence1 = values[index++];\n                String fence2 = index < values.length ? values[index++] : \"\";\n                position.set(Position.KEY_GEOFENCE, fence1 + fence2);\n            }\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n\n        case \"IWD\":\n            while (index + 1 < values.length) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index++; // skip serial\n                    if (index < values.length) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex,\n                                Double.parseDouble(values[index++]));\n                    }\n                }\n            }\n            break;\n\n        default:\n            // ignore other fragments\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}