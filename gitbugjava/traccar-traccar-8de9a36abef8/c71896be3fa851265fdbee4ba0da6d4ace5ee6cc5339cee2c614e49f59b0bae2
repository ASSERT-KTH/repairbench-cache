{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (dataIndex == -1) {\n        // No colon, treat everything as the type, no values\n        values = new String[0];\n    } else if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    String type = dataIndex == -1 ? fragment : fragment.substring(0, dataIndex);\n\n    switch (type) {\n        case \"GPS\":\n            if (values.length > 0 && index < values.length) {\n                position.setValid(values[index++].equals(\"A\"));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                index++; // skip\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                index++;\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                index++;\n            } else {\n                index++;\n            }\n            // Speed\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n                } catch (NumberFormatException error) {\n                    // ignore\n                }\n            }\n            index++;\n            // Course\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setCourse(Double.parseDouble(values[index]));\n                } catch (NumberFormatException error) {\n                    // ignore\n                }\n            }\n            index++;\n            // Altitude (optional)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Double.parseDouble(values[index]));\n                } catch (NumberFormatException error) {\n                    // ignore\n                }\n                index++;\n            } else if (index < values.length) {\n                index++;\n            }\n            // HDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException error) {\n                    // ignore\n                }\n                index++;\n            } else if (index < values.length) {\n                index++;\n            }\n            // VDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException error) {\n                    // ignore\n                }\n            }\n            break;\n\n        case \"GSM\":\n            index += 2; // registration status and signal strength\n            // Multiple cell info possible, parse in sequence (normally groups of 6 or 7 fields per cell)\n            while (index + 4 < values.length) {\n                try {\n                    int mcc = Integer.parseInt(values[index++]);\n                    int mnc = Integer.parseInt(values[index++]);\n                    int lac = Integer.parseInt(values[index++], 16);\n                    int cid = Integer.parseInt(values[index++], 16);\n                    int rssi = Integer.parseInt(values[index++]);\n                    // Optionally may have extra fields (e.g., NB-IoT/TAC), but basic parsing should work\n                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                } catch (Exception error) {\n                    // ignore.\n                    break;\n                }\n            }\n            break;\n\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                } catch (NumberFormatException error) {\n                    // ignore\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                try {\n                    long totalMillis =\n                        (Long.parseLong(hours[0]) * 3600 +\n                            (hours.length > 1 ? Long.parseLong(hours[1]) * 60 : 0) +\n                            (hours.length > 2 ? Long.parseLong(hours[2]) : 0)) * 1000;\n                    position.set(Position.KEY_HOURS, totalMillis);\n                } catch (NumberFormatException error) {\n                    // ignore\n                }\n            }\n            break;\n\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException error) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException error) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException error) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException error) {\n                    index++;\n                }\n            }\n            break;\n\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                } catch (NumberFormatException error) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    int io = Integer.parseInt(values[index], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                } catch (NumberFormatException error) {\n                    // ignore\n                }\n                index++;\n            } else if (index < values.length) {\n                index++;\n            }\n            // Geofence: can be one or two non-empty fields (concatenate them if present)\n            String geofence = \"\";\n            if (index < values.length && !values[index].isEmpty()) {\n                geofence += values[index++];\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                geofence += values[index++];\n            } else if (index < values.length) {\n                index++;\n            }\n            if (!geofence.isEmpty()) {\n                position.set(Position.KEY_GEOFENCE, geofence);\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n\n        case \"IWD\":\n            while (index + 1 < values.length) {\n                // Defensive to avoid IndexOutOfBounds\n                int sensorIndex;\n                int dataType;\n                try {\n                    sensorIndex = Integer.parseInt(values[index++]);\n                    dataType = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException error) {\n                    break;\n                }\n                if (dataType == 0) {\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (index < values.length) {\n                        index++;\n                    }\n                } else if (dataType == 1) {\n                    // temperature sensor serial number, can be skipped (always present), then value\n                    if (index < values.length) {\n                        index++; // skip serial number\n                    }\n                    if (index < values.length && !values[index].isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        } catch (NumberFormatException error) {\n                            index++;\n                        }\n                    } else if (index < values.length) {\n                        index++;\n                    }\n                } else {\n                    // skip unknown dataType\n                    index++;\n                }\n            }\n            break;\n        // case fallback for other types\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}