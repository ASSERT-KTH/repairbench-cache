{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (index < values.length) {\n                position.setValid(values[index].equals(\"A\"));\n                index++;\n            } else {\n                position.setValid(false);\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String latStr = values[index];\n                double latitude = Double.parseDouble(latStr.substring(1));\n                if (latStr.charAt(0) == 'S') {\n                    latitude = -latitude;\n                }\n                position.setLatitude(latitude);\n                index++;\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String lonStr = values[index];\n                double longitude = Double.parseDouble(lonStr.substring(1));\n                if (lonStr.charAt(0) == 'W') {\n                    longitude = -longitude;\n                }\n                position.setLongitude(longitude);\n                index++;\n            } else {\n                index++;\n            }\n            if (index < values.length) {\n                String speedStr = values[index++];\n                if (!speedStr.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                }\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index + 4 < values.length) {\n                int mcc = Integer.parseInt(values[index++]);\n                int mnc = Integer.parseInt(values[index++]);\n                int lac = Integer.parseInt(values[index++], 16);\n                int cid = Integer.parseInt(values[index++], 16);\n                int rssi = Integer.parseInt(values[index++]);\n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int totalHours = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) {\n                    totalHours += Integer.parseInt(hours[0]) * 3600;\n                }\n                if (hours.length > 1 && !hours[1].isEmpty()) {\n                    totalHours += Integer.parseInt(hours[1]) * 60;\n                }\n                if (hours.length > 2 && !hours[2].isEmpty()) {\n                    totalHours += Integer.parseInt(hours[2]);\n                }\n                position.set(Position.KEY_HOURS, totalHours * 1000);\n                index++;\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else {\n                index++;\n            }\n            if (index < values.length) {\n                String ioStr = values[index++];\n                if (!ioStr.isEmpty()) {\n                    int io = Integer.parseInt(ioStr, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n            String geo1 = index < values.length ? values[index++] : \"\";\n            String geo2 = index < values.length ? values[index++] : \"\";\n            position.set(Position.KEY_GEOFENCE, geo1 + geo2);\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (index + 3 < values.length) {\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n                    if (dataType == 0) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1) {\n                        index++; // temperature sensor serial number\n                        if (index < values.length && !values[index].isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        } else {\n                            index++;\n                        }\n                    } else {\n                        index += 2;\n                    }\n                } else {\n                    break;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}