{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Defensive: Make sure values are long enough before accessing\n            position.setValid(index < values.length && values[index++].equals(\"A\"));\n            if (index < values.length) {\n                position.set(Position.KEY_SATELLITES, parseIntSafe(values[index++]));\n            }\n            if (index < values.length) {\n                String latValue = values[index];\n                double lat = 0.0;\n                if (!latValue.isEmpty()) {\n                    lat = Double.parseDouble(latValue.substring(1));\n                }\n                position.setLatitude(lat);\n                if (latValue.length() > 0 && latValue.charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                index++;\n            }\n            if (index < values.length) {\n                String lonValue = values[index];\n                double lon = 0.0;\n                if (!lonValue.isEmpty()) {\n                    lon = Double.parseDouble(lonValue.substring(1));\n                }\n                position.setLongitude(lon);\n                if (lonValue.length() > 0 && lonValue.charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                index++;\n            }\n            if (index < values.length) {\n                String speedValue = values[index++];\n                if (!speedValue.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedValue)));\n                }\n            }\n            if (index < values.length) {\n                String courseValue = values[index++];\n                if (!courseValue.isEmpty()) {\n                    position.setCourse(Double.parseDouble(courseValue));\n                }\n            }\n            if (index < values.length) {\n                String altitudeValue = values[index++];\n                if (!altitudeValue.isEmpty()) {\n                    position.setAltitude(Double.parseDouble(altitudeValue));\n                }\n            }\n            if (index < values.length) {\n                String hdopValue = values[index++];\n                if (!hdopValue.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));\n                }\n            }\n            if (index < values.length) {\n                String vdopValue = values[index++];\n                if (!vdopValue.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));\n                }\n            }\n            break;\n        case \"GSM\":\n            // Defensive skip\n            index += 2; // registration status and signal strength\n            // Handle cell tower chains: allow groups of 5 (MCC, MNC, LAC, CID, RSSI) and skip incomplete\n            while (index + 4 < values.length) {\n                try {\n                    int mcc = parseIntSafe(values[index++]);\n                    int mnc = parseIntSafe(values[index++]);\n                    int lac = parseIntSafe(values[index++], 16);\n                    int cid = parseIntSafe(values[index++], 16);\n                    int rssi = parseIntSafe(values[index++]);\n                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                } catch (NumberFormatException e) {\n                    // skip bad cell\n                }\n            }\n            break;\n        case \"COT\":\n            if (index < values.length) {\n                String odo = values[index++];\n                if (!odo.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));\n                }\n            }\n            if (index < values.length) {\n                String hoursStr = values[index];\n                if (!hoursStr.isEmpty()) {\n                    String[] hours = hoursStr.split(\"-\");\n                    int seconds =\n                            (hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) * 3600 : 0)\n                            + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0);\n                    position.set(Position.KEY_HOURS, seconds * 1000L);\n                }\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length) {\n                String power = values[index++];\n                if (!power.isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(power));\n                }\n            }\n            if (index < values.length) {\n                String battery = values[index++];\n                if (!battery.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(battery));\n                }\n            }\n            // Some models supply more ADCs (e.g., 0.01 for voltage channels)\n            int adcChannel = 1;\n            while (index < values.length) {\n                String adc = values[index++];\n                if (!adc.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + adcChannel, Double.parseDouble(adc));\n                }\n                adcChannel++;\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length) {\n                String status = values[index++];\n                if (!status.isEmpty()) {\n                    // status is often hexadecimal, but sometimes decimal, keep as string\n                    try {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));\n                    } catch (NumberFormatException e) {\n                        position.set(Position.KEY_STATUS, parseIntSafe(status));\n                    }\n                }\n            }\n            if (index < values.length) {\n                String ioVal = values[index++];\n                if (!ioVal.isEmpty()) {\n                    int io;\n                    try {\n                        io = Integer.parseInt(ioVal, 16);\n                    } catch (NumberFormatException ex) {\n                        io = 0;\n                    }\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n            // Make sure we don't join empty strings\n            String geofenceA = index < values.length ? values[index++] : \"\";\n            String geofenceB = index < values.length ? values[index++] : \"\";\n            position.set(Position.KEY_GEOFENCE, geofenceA + geofenceB);\n\n            String eventStatus = index < values.length ? values[index++] : \"\";\n            position.set(\"eventStatus\", eventStatus);\n\n            if (index < values.length) {\n                String packetType = values[index++];\n                position.set(\"packetType\", packetType);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index + 1 < values.length) {\n                int sensorIndex = parseIntSafe(values[index++]);\n                int dataType = parseIntSafe(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    if (index < values.length) {\n                        index++; // skip temperature sensor serial number\n                    }\n                    if (index < values.length) {\n                        String temp = values[index++];\n                        if (!temp.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temp));\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n// Helper to avoid exceptions on empty strings\nprivate int parseIntSafe(String v) {\n    return parseIntSafe(v, 10);\n}\nprivate int parseIntSafe(String v, int radix) {\n    if (v == null || v.isEmpty()) {\n        return 0;\n    }\n    return Integer.parseInt(v, radix);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}