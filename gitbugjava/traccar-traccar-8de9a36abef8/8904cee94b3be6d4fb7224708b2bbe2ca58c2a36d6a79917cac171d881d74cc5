{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                // Valid\n                if (index < values.length) {\n                    position.setValid(values[index++].equals(\"A\"));\n                }\n\n                // Satellites\n                if (index < values.length) {\n                    String satellites = values[index++];\n                    if (!satellites.isEmpty()) {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(satellites));\n                    }\n                }\n\n                // Latitude\n                if (index < values.length) {\n                    String latitude = values[index++];\n                    if (!latitude.isEmpty() && latitude.length() > 1) { // Check length for substring(1)\n                        position.setLatitude(Double.parseDouble(latitude.substring(1)));\n                        if (latitude.charAt(0) == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                    }\n                }\n\n                // Longitude\n                if (index < values.length) {\n                    String longitude = values[index++];\n                    if (!longitude.isEmpty() && longitude.length() > 1) { // Check length for substring(1)\n                        position.setLongitude(Double.parseDouble(longitude.substring(1)));\n                        if (longitude.charAt(0) == 'W') {\n                            position.setLongitude(-position.getLongitude());\n                        }\n                    }\n                }\n\n                // Speed\n                if (index < values.length) {\n                    String speed = values[index++];\n                    if (!speed.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n                    }\n                }\n\n                // Course\n                if (index < values.length) {\n                    String course = values[index++];\n                    if (!course.isEmpty()) {\n                        position.setCourse(Integer.parseInt(course));\n                    }\n                }\n\n                // Altitude\n                if (index < values.length) {\n                    String altitude = values[index++];\n                    if (!altitude.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altitude));\n                    }\n                }\n\n                // HDOP\n                if (index < values.length) {\n                    String hdop = values[index++];\n                    if (!hdop.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                    }\n                }\n\n                // VDOP\n                if (index < values.length) {\n                    String vdop = values[index++];\n                    if (!vdop.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n\n                int mcc = 0, mnc = 0, lac = 0, cid = 0, psc = 0;\n                if (index < values.length) {\n                    String val = values[index++];\n                    if (!val.isEmpty()) mcc = Integer.parseInt(val);\n                }\n                if (index < values.length) {\n                    String val = values[index++];\n                    if (!val.isEmpty()) mnc = Integer.parseInt(val);\n                }\n                if (index < values.length) {\n                    String val = values[index++];\n                    if (!val.isEmpty()) lac = Integer.parseInt(val, 16);\n                }\n                if (index < values.length) {\n                    String val = values[index++];\n                    if (!val.isEmpty()) cid = Integer.parseInt(val, 16);\n                }\n                if (index < values.length) {\n                    String val = values[index++];\n                    if (!val.isEmpty()) psc = Integer.parseInt(val);\n                }\n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, psc)));\n                break;\n            case \"COT\":\n                if (index < values.length) {\n                    String odometer = values[index++];\n                    if (!odometer.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));\n                    }\n                }\n                if (index < values.length) {\n                    String hoursString = values[index++];\n                    if (!hoursString.isEmpty()) {\n                        String[] hours = hoursString.split(\"-\");\n                        position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                                + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                                + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) {\n                    String power = values[index++];\n                    if (!power.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(power));\n                    }\n                }\n                if (index < values.length) {\n                    String battery = values[index++];\n                    if (!battery.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(battery));\n                    }\n                }\n                if (index < values.length) {\n                    String adc1 = values[index++];\n                    if (!adc1.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                    }\n                }\n                if (index < values.length) {\n                    String adc2 = values[index++];\n                    if (!adc2.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                    }\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) {\n                    String status = values[index++];\n                    if (!status.isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));\n                    }\n                }\n                if (index < values.length) {\n                    String ioString = values[index++];\n                    if (!ioString.isEmpty()) {\n                        int io = Integer.parseInt(ioString, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                // KEY_GEOFENCE expects two concatenated values, so only check for bounds\n                if (index + 1 < values.length) {\n                    position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                } else if (index < values.length) { // handle case where only one part is present\n                    position.set(Position.KEY_GEOFENCE, values[index++]);\n                }\n\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    int sensorIndex = -1; // Default or indicate not parsed\n                    if (index < values.length) { // Sensor Index\n                        String val = values[index++];\n                        if (!val.isEmpty()) sensorIndex = Integer.parseInt(val);\n                    } else { // Should not happen if loop condition is met and parsing is strict\n                        break;\n                    }\n\n                    int dataType = -1; // Default or indicate not parsed\n                    if (index < values.length) { // Data Type\n                        String val = values[index++];\n                        if (!val.isEmpty()) dataType = Integer.parseInt(val);\n                    } else { // Should not happen\n                        break;\n                    }\n\n                    if (dataType == 0) {\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        }\n                    } else if (dataType == 1) {\n                        index += 1; // temperature sensor serial number (skip)\n                        if (sensorIndex != -1 && index < values.length) { // Only set if sensorIndex was parsed\n                            String temperature = values[index++];\n                            if (!temperature.isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temperature));\n                            }\n                        }\n                    } else {\n                        // If data type is unknown, consume the field to avoid infinite loop\n                        if (index < values.length) {\n                             index++;\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}