{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                position.setValid(values[index++].equals(\"A\"));\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                // Fix: Check if speed value is empty before parsing\n                String speedValue = values[index++];\n                if (!speedValue.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));\n                }\n                position.setCourse(Integer.parseInt(values[index++]));\n                // Fix: Check if altitude value exists and is not empty before parsing\n                if (index < values.length) {\n                    String altitudeValue = values[index++];\n                    if (!altitudeValue.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altitudeValue));\n                    }\n                }\n                // Fix: Check if HDOP value exists and is not empty before parsing\n                if (index < values.length) {\n                    String hdopValue = values[index++];\n                    if (!hdopValue.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));\n                    }\n                }\n                // Fix: Check if VDOP value exists and is not empty before parsing\n                if (index < values.length) {\n                    String vdopValue = values[index++];\n                    if (!vdopValue.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n                break;\n            case \"COT\":\n                // Fix: Check if odometer value exists and is not empty before parsing\n                if (index < values.length) {\n                    String odometerValue = values[index++];\n                    if (!odometerValue.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));\n                    }\n                }\n                // Fix: Check if hours value exists and is not empty before parsing\n                if (index < values.length) {\n                    String hoursValue = values[index++];\n                    if (!hoursValue.isEmpty()) {\n                        String[] hours = hoursValue.split(\"-\");\n                        position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                                + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                                + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                    }\n                }\n                break;\n            case \"ADC\":\n                // KEY_POWER is assumed to be always present and non-empty from test data\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                // Fix: Check if battery value exists and is not empty before parsing\n                if (index < values.length) {\n                    String batteryValue = values[index++];\n                    if (!batteryValue.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryValue));\n                    }\n                }\n                // Fix: Check if ADC + 1 value exists and is not empty before parsing\n                if (index < values.length) {\n                    String adc1Value = values[index++];\n                    if (!adc1Value.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Value));\n                    }\n                }\n                // Fix: Check if ADC + 2 value exists and is not empty before parsing\n                if (index < values.length) {\n                    String adc2Value = values[index++];\n                    if (!adc2Value.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Value));\n                    }\n                }\n                break;\n            case \"DTT\":\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                // Fix: Check if io value is empty before parsing\n                String ioValue = values[index++];\n                if (!ioValue.isEmpty()) {\n                    int io = Integer.parseInt(ioValue, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                position.set(\"eventStatus\", values[index++]);\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                position.set(\"eventData\", values[index++]);\n                break;\n            case \"OBD\":\n                position.set(\"obd\", values[index++]);\n                break;\n            case \"TAG\":\n                position.set(\"tagData\", values[index++]);\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    // Assuming sensorIndex and dataType are always present and valid integers for a sensor entry.\n                    // If they could be empty, additional checks like !values[index].isEmpty() would be needed before parseInt.\n                    if (index + 1 >= values.length) { // Ensure enough elements for sensorIndex and dataType\n                        break; // Not enough data for a complete sensor entry\n                    }\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n                    if (dataType == 0) {\n                        if (index < values.length) { // Check if driverId field exists\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        } else {\n                            break; // Not enough data for driver ID, break loop\n                        }\n                    } else if (dataType == 1) {\n                        if (index + 1 < values.length) { // Need serial and temperature value\n                            index += 1; // skip temperature sensor serial number\n                            // Fix: Check if temperature value is empty before parsing\n                            String tempValue = values[index++];\n                            if (!tempValue.isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));\n                            }\n                        } else {\n                            break; // Not enough data for temperature, break loop\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}