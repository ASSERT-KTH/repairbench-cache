{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (index < values.length && !values[index].equals(\"A\") && !values[index].equals(\"V\") && !values[index].equals(\"L\")) {\n                position.setValid(values[index++].equals(\"A\"));\n            } else {\n                index++;\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            }\n            if (index < values.length) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            if (index < values.length) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            if (index < values.length) {\n                if (!values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index++])));\n                }\n            }\n            if (index < values.length) {\n                position.setCourse(Integer.parseInt(values[index++]));\n            }\n            if (index < values.length) {\n                position.setAltitude(Integer.parseInt(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            if (index < values.length) index++;\n            if (index < values.length) index++;\n            if (index < values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(index < values.length ? values[index++] : \"0\"),\n                        Integer.parseInt(index < values.length ? values[index++] : \"0\"),\n                        Integer.parseInt(index < values.length ? values[index++] : \"0\", 16),\n                        Integer.parseInt(index < values.length ? values[index++] : \"0\", 16),\n                        Integer.parseInt(index < values.length ? values[index++] : \"0\")\n                )));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setOdometer(Long.parseLong(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index++].split(\"-\");\n                int total = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) {\n                    total += Integer.parseInt(hours[0]) * 3600 * 1000;\n                }\n                if (hours.length > 1 && !hours[1].isEmpty()) {\n                    total += Integer.parseInt(hours[1]) * 60 * 1000;\n                }\n                if (hours.length > 2 && !hours[2].isEmpty()) {\n                    total += Integer.parseInt(hours[2]) * 1000;\n                }\n                position.set(Position.KEY_HOURS, total);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setBattery(Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index - 1], 16);\n                position.setIgnition(BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            if (index < values.length) {\n                position.setGeofence(values[index++]);\n            }\n            if (index < values.length) {\n                position.setAttribute(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.setAttribute(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAttribute(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAttribute(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAttribute(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length && !values[index].isEmpty()) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.setDriverUniqueId(values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    if (index < values.length && !values[index].isEmpty()) {\n                        index++;\n                        if (index < values.length && !values[index].isEmpty()) {\n                            position.setTemperature(sensorIndex, Double.parseDouble(values[index++]));\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}