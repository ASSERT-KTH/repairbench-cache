{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(index < values.length && values[index++].equals(\"A\"));\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                index++; // skip\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                String speedValue = values[index];\n                try {\n                    int speed = Integer.parseInt(speedValue);\n                    position.setSpeed(UnitsConverter.knotsFromKph(speed));\n                } catch (NumberFormatException e) {\n                    // non-numeric speed, skip\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setCourse(Integer.parseInt(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Integer.parseInt(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                index++;\n            }\n            break;\n        case \"GSM\":\n            index += 2; // registration status and signal strength, might be empty\n            if (values.length - index >= 5) {\n                try {\n                    position.setNetwork(new Network(CellTower.from(\n                            Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                            Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                            Integer.parseInt(values[index++]))));\n                } catch (Exception e) {\n                    // ignore\n                }\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int hoursInt = 0;\n                try {\n                    hoursInt = (Integer.parseInt(hours[0]) * 3600\n                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000;\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                position.set(Position.KEY_HOURS, hoursInt);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++; // skip on error\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++; // skip\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            int io = 0;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    io = Integer.parseInt(values[index], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            StringBuilder geofenceBuilder = new StringBuilder();\n            if (index < values.length && !values[index].isEmpty()) {\n                geofenceBuilder.append(values[index]);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                geofenceBuilder.append(values[index]);\n            }\n            index++;\n            position.set(Position.KEY_GEOFENCE, geofenceBuilder.toString());\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) position.set(\"eventData\", values[index++]);\n            break;\n        case \"OBD\":\n            if (index < values.length) position.set(\"obd\", values[index++]);\n            break;\n        case \"TAG\":\n            if (index < values.length) position.set(\"tagData\", values[index++]);\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = -1;\n                int dataType = -1;\n                // protect against missing values\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        sensorIndex = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        index++;\n                        continue;\n                    }\n                } else {\n                    index++;\n                    continue;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        dataType = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        index++;\n                        continue;\n                    }\n                } else {\n                    index++;\n                    continue;\n                }\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    if (index < values.length) index++; // temperature sensor serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        } catch (NumberFormatException e) {\n                            index++;\n                        }\n                    } else {\n                        index++;\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}