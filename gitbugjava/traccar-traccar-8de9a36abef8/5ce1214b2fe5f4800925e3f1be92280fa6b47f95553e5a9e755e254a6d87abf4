{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (dataIndex == -1 || fragment.length() == dataIndex + 1) { // Handle cases like \"GPS\" or \"GPS:\"\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\", -1); // Use -1 limit to preserve trailing empty strings\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                if (index < values.length) { // Validity\n                    position.setValid(values[index].equals(\"A\"));\n                    index++;\n                } else { index++; } // Consume field slot even if not present\n\n                if (index < values.length) { // Satellites\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // Latitude\n                    if (!values[index].isEmpty() && values[index].length() > 1) {\n                        position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                        if (values[index].charAt(0) == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // Longitude\n                    if (!values[index].isEmpty() && values[index].length() > 1) {\n                        position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                        if (values[index].charAt(0) == 'W') {\n                            position.setLongitude(-position.getLongitude());\n                        }\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // Speed\n                    if (!values[index].isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // Course\n                    if (!values[index].isEmpty()) {\n                        position.setCourse(Integer.parseInt(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // Altitude\n                    if (!values[index].isEmpty()) {\n                        position.setAltitude(Integer.parseInt(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // HDOP\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // VDOP\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength (overall device signal, not tower specific)\n\n                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;\n\n                if (index < values.length && !values[index].isEmpty()) mcc = Integer.parseInt(values[index]);\n                index++;\n                if (index < values.length && !values[index].isEmpty()) mnc = Integer.parseInt(values[index]);\n                index++;\n                if (index < values.length && !values[index].isEmpty()) lac = Integer.parseInt(values[index], 16);\n                index++;\n                if (index < values.length && !values[index].isEmpty()) cid = Integer.parseInt(values[index], 16);\n                index++;\n                if (index < values.length && !values[index].isEmpty()) rssi = Integer.parseInt(values[index]); // tower specific RSSI\n                index++;\n                \n                if (mcc != null && mnc != null && lac != null && cid != null) {\n                    CellTower cellTower = CellTower.from(mcc, mnc, lac, cid);\n                    if (rssi != null) {\n                        cellTower.setSignalStrength(rssi);\n                    }\n                    position.setNetwork(new Network(cellTower));\n                }\n                break;\n            case \"COT\":\n                if (index < values.length) { // Odometer\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // Hours\n                    if (!values[index].isEmpty()) {\n                        String[] hours = values[index].split(\"-\");\n                        long totalMillis = 0;\n                        if (hours.length > 0 && !hours[0].isEmpty()) {\n                            totalMillis += Long.parseLong(hours[0]) * 3600L;\n                        }\n                        if (hours.length > 1 && !hours[1].isEmpty()) {\n                            totalMillis += Long.parseLong(hours[1]) * 60L;\n                        }\n                        if (hours.length > 2 && !hours[2].isEmpty()) {\n                            totalMillis += Long.parseLong(hours[2]);\n                        }\n                        position.set(Position.KEY_HOURS, totalMillis * 1000);\n                    }\n                    index++;\n                } else { index++; }\n                break;\n            case \"ADC\":\n                if (index < values.length) { // Power\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // Battery\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // ADC + 1\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // ADC + 2\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                } else { index++; }\n                break;\n            case \"DTT\":\n                if (index < values.length) { // Status\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n                    }\n                    index++;\n                } else { index++; }\n\n                if (index < values.length) { // IO value\n                    String ioValue = values[index];\n                    if (!ioValue.isEmpty()) {\n                        int io = Integer.parseInt(ioValue, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                    index++;\n                } else { index++; }\n\n                String geoPart1 = \"\";\n                if (index < values.length) {\n                    geoPart1 = values[index++];\n                } else { index++; }\n                String geoPart2 = \"\";\n                if (index < values.length) {\n                    geoPart2 = values[index++];\n                } else { index++; }\n                position.set(Position.KEY_GEOFENCE, geoPart1 + geoPart2);\n\n                if (index < values.length) { // eventStatus\n                    position.set(\"eventStatus\", values[index++]);\n                } else { index++; }\n                if (index < values.length) { // packetType\n                    position.set(\"packetType\", values[index++]);\n                } else { index++; }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                } else { index++; }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                } else { index++; }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                } else { index++; }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    String sensorIndexStr = values[index];\n                    index++; \n                    if (sensorIndexStr.isEmpty()) continue;\n                    int sensorIndexVal = Integer.parseInt(sensorIndexStr);\n\n                    if (index >= values.length) break;\n                    String dataTypeStr = values[index];\n                    index++;\n                    if (dataTypeStr.isEmpty()) continue;\n                    int dataTypeVal = Integer.parseInt(dataTypeStr);\n\n                    if (dataTypeVal == 0) { // Driver ID\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        } else { break; }\n                    } else if (dataTypeVal == 1) { // Temperature\n                        if (index < values.length) { // skip serial number\n                            index++; \n                        } else { break; }\n\n                        if (index < values.length) { // temperature value\n                            if (!values[index].isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndexVal, Double.parseDouble(values[index]));\n                            }\n                            index++;\n                        } else { break; }\n                    } else {\n                        break; \n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}