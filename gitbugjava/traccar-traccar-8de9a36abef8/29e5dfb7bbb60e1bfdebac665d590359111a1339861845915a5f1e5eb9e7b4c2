{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Validity\n            position.setValid(values[index].equals(\"A\"));\n            index++;\n\n            // Satellites (if non-empty)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n            }\n            index++;\n\n            // Latitude (the field includes hemisphere; e.g. \"N31.551856\" or \"S25.750200\")\n            if (index < values.length && !values[index].isEmpty()) {\n                double latitude = Double.parseDouble(values[index].substring(1));\n                if (values[index].charAt(0) == 'S') {\n                    latitude = -latitude;\n                }\n                position.setLatitude(latitude);\n            }\n            index++;\n\n            // Longitude (the field includes hemisphere; e.g. \"E74.366920\" or \"W122.238720\")\n            if (index < values.length && !values[index].isEmpty()) {\n                double longitude = Double.parseDouble(values[index].substring(1));\n                if (values[index].charAt(0) == 'W') {\n                    longitude = -longitude;\n                }\n                position.setLongitude(longitude);\n            }\n            index++;\n\n            // Speed\n            if (index < values.length) {\n                String speedVal = values[index];\n                index++;\n                if (!speedVal.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedVal)));\n                }\n            }\n\n            // Course\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index]));\n            }\n            index++;\n\n            // Altitude (optional, may be empty)\n            if (index < values.length) {\n                String alt = values[index];\n                if (!alt.isEmpty()) {\n                    position.setAltitude(Integer.parseInt(alt));\n                }\n                index++;\n            }\n\n            // HDOP (optional)\n            if (index < values.length) {\n                String hdop = values[index];\n                if (!hdop.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                }\n                index++;\n            }\n\n            // VDOP (optional)\n            if (index < values.length) {\n                String vdop = values[index];\n                if (!vdop.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                }\n                index++;\n            }\n            break;\n\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            position.setNetwork(new Network(CellTower.from(\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++])\n            )));\n            break;\n\n        case \"COT\":\n            if (index < values.length) {\n                // Odometer may be empty\n                String odometer = values[index];\n                if (!odometer.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));\n                }\n                index++;\n            }\n            if (index < values.length) {\n                String hoursField = values[index];\n                index++;\n                if (!hoursField.isEmpty()) {\n                    String[] hours = hoursField.split(\"-\");\n                    int h = hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) : 0;\n                    int m = hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) : 0;\n                    int s = hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0;\n                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n                }\n            }\n            break;\n\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length) {\n                String battery = values[index];\n                if (!battery.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(battery));\n                }\n            }\n            index++;\n            if (index < values.length) {\n                String adc1 = values[index];\n                if (!adc1.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                }\n            }\n            index++;\n            if (index < values.length) {\n                String adc2 = values[index];\n                if (!adc2.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                }\n            }\n            index++;\n            break;\n\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            if (index + 1 < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);\n            }\n            index += 2;\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index++; // skip temperature sensor serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n            }\n            break;\n\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}