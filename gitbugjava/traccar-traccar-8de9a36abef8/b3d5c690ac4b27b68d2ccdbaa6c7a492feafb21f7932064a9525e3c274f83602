{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Defensive: need at least 5 elements for normal GPS, but allow shorter input\n            if (index < values.length) position.setValid(values[index++].equals(\"A\"));\n            if (index < values.length && !values[index].isEmpty()) position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            // Latitude\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n            // Longitude\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n            // Speed (optional for some protocols -- defensive parse)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n                } catch (NumberFormatException e) {\n                    // Ignore invalid speed\n                }\n            }\n            index++;\n            // Course\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setCourse(Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // Ignore invalid course\n                }\n            }\n            index++;\n            // Altitude (optional)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // Ignore invalid altitude\n                }\n                index++;\n            }\n            // HDOP (optional)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // Ignore\n                }\n                index++;\n            }\n            // VDOP (optional)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // Ignore\n                }\n                index++;\n            }\n            break;\n        case \"GSM\":\n            // Defensive: empty slots allowed.\n            // Skip registration status and signal strength\n            index += 2;\n            // Defensive: support multiple cell towers (groups of 6 elements each; cell serials skip)\n            List<CellTower> cellTowers = new ArrayList<>();\n            while (index + 4 < values.length) {\n                try {\n                    int mcc = Integer.parseInt(values[index++]);\n                    int mnc = Integer.parseInt(values[index++]);\n                    int lac = Integer.parseInt(values[index++], 16);\n                    int cid = Integer.parseInt(values[index++], 16);\n                    int rssi = Integer.parseInt(values[index++]);\n                    cellTowers.add(CellTower.from(mcc, mnc, lac, cid, rssi));\n                } catch (Exception ignored) {\n                    break;\n                }\n            }\n            if (!cellTowers.isEmpty()) {\n                position.setNetwork(new Network(cellTowers));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            } else {\n                index++; // skip empty\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int h = 0;\n                try {\n                    h = (Integer.parseInt(hours[0]) * 3600\n                        + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                        + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000;\n                } catch (NumberFormatException e) {\n                    // Ignore bad hour values\n                }\n                position.set(Position.KEY_HOURS, h);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else {\n                index++;\n            }\n            // IO status next\n            int io = 0;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    io = Integer.parseInt(values[index], 16);\n                } catch (NumberFormatException ignore) { }\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            // Geofence (two values - can be empty)\n            String geofenceFirst = index < values.length ? values[index++] : \"\";\n            String geofenceSecond = index < values.length ? values[index++] : \"\";\n            position.set(Position.KEY_GEOFENCE, geofenceFirst + geofenceSecond);\n            // eventStatus\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            } else {\n                index++;\n            }\n            // packetType\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            // IWD: pairs of (sensorIndex;dataType;...)\n            while (index < values.length) {\n                if (index + 1 >= values.length) break;\n                int sensorIndex = 0;\n                int dataType = 0;\n                try {\n                    sensorIndex = Integer.parseInt(values[index++]);\n                    dataType = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    // Malformed, exit.\n                    break;\n                }\n                if (dataType == 0) {\n                    // driver unique id\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else {\n                        index++;\n                    }\n                } else if (dataType == 1) {\n                    // skip sensor serial\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        String val = values[index++];\n                        try {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(val));\n                        } catch (NumberFormatException ignore) { }\n                    } else {\n                        index++;\n                    }\n                } else {\n                    // unsupported type\n                    index++;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}