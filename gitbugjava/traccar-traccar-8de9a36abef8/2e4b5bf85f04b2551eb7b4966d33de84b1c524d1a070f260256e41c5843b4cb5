{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    if (dataIndex == -1) {\n        // Invalid fragment format\n        return;\n    }\n\n    int index = 0;\n    String[] values = fragment.substring(dataIndex + 1).split(\";\");\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, getIntValue(values, index++));\n            position.setLatitude(getDoubleValue(values, index++, 1));\n            if (values[index].length() > 0 && values[index].charAt(0) == 'S') {\n                position.setLatitude(-position.getLatitude());\n            }\n            index++;\n            position.setLongitude(getDoubleValue(values, index++, 1));\n            if (values[index].length() > 0 && values[index++].charAt(0) == 'W') {\n                position.setLongitude(-position.getLongitude());\n            }\n            if (index < values.length && !values[index++].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n            }\n            position.setCourse(getIntValue(values, index++));\n            if (index < values.length) {\n                position.setAltitude(getIntValue(values, index++));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            index += 2; // registration status and signal strength\n            position.setNetwork(new Network(CellTower.from(\n                    getIntValue(values, index++),\n                    getIntValue(values, index++),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++], 16),\n                    getIntValue(values, index++)\n            )));\n            break;\n        case \"COT\":\n            if (index < values.length) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            }\n            if (index < values.length) {\n                String[] hours = values[index].split(\"-\");\n                position.set(Position.KEY_HOURS, (getIntValue(hours, 0) * 3600\n                        + (hours.length > 1 ? getIntValue(hours, 1) * 60 : 0)\n                        + (hours.length > 2 ? getIntValue(hours, 2) : 0)) * 1000);\n            }\n            break;\n        case \"ADC\":\n            position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            if (index < values.length) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            position.set(Position.KEY_STATUS, getIntValue(values, index++, 16));\n            if (!values[index++].isEmpty()) {\n                int io = getIntValue(values, index - 1, 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            position.set(\"eventStatus\", values[index++]);\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            position.set(\"eventData\", values[index++]);\n            break;\n        case \"OBD\":\n            position.set(\"obd\", values[index++]);\n            break;\n        case \"TAG\":\n            position.set(\"tagData\", values[index++]);\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = getIntValue(values, index++);\n                int dataType = getIntValue(values, index++);\n                if (dataType == 0) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1) {\n                    index += 1; // temperature sensor serial number\n                    position.set(Position.PREFIX_TEMP + sensorIndex, getDoubleValue(values, index++));\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nprivate int getIntValue(String[] values, int index) {\n    if (index < values.length) {\n        String value = values[index];\n        if (value.isEmpty()) {\n            return 0;\n        } else {\n            return Integer.parseInt(value);\n        }\n    } else {\n        return 0;\n    }\n}\n\nprivate int getIntValue(String[] values, int index, int radix) {\n    if (index < values.length) {\n        String value = values[index];\n        if (value.isEmpty()) {\n            return 0;\n        } else {\n            return Integer.parseInt(value, radix);\n        }\n    } else {\n        return 0;\n    }\n}\n\nprivate double getDoubleValue(String[] values, int index) {\n    if (index < values.length) {\n        String value = values[index];\n        if (value.isEmpty()) {\n            return 0.0;\n        } else {\n            return Double.parseDouble(value);\n        }\n    } else {\n        return 0.0;\n    }\n}\n\nprivate double getDoubleValue(String[] values, int index, int startIndex) {\n    if (index < values.length) {\n        String value = values[index];\n        if (value.isEmpty() || value.length() < startIndex) {\n            return 0.0;\n        } else {\n            return Double.parseDouble(value.substring(startIndex));\n        }\n    } else {\n        return 0.0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}