{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    String header = fragment.substring(0, dataIndex);\n\n    switch (header) {\n        case \"GPS\":\n            if (values.length == 0) break;\n            position.setValid(values[index++].equals(\"A\"));\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                // Defensive: skip/supply reasonable value/leave as null\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n\n            Double speed = null;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    speed = Double.parseDouble(values[index]);\n                } catch (NumberFormatException error) {\n                    // Ignore parsing error, leave speed null\n                }\n            }\n            index++;\n\n            Double course = null;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    course = Double.parseDouble(values[index]);\n                } catch (NumberFormatException error) {\n                    // Ignore parsing error, leave course null\n                }\n            }\n            index++;\n\n            // For some formats, there is a speed in knots and/or KPH before/after course, or omitted fields (\";\" empty slot)\n            if (index < values.length && !values[index].isEmpty()) {\n                // If not empty, check if this value looks like integer speed in KPH, else try as a double.\n                String val = values[index];\n                try {\n                    int speedKph = Integer.parseInt(val);\n                    speed = UnitsConverter.knotsFromKph(speedKph);\n                } catch (Exception nfe) {\n                    try {\n                        speed = Double.parseDouble(val); // Possibly speed in knots\n                    } catch (Exception ignore) {\n                    }\n                }\n            }\n            // Only set speed if not already set and we got a value\n            if (speed != null) {\n                position.setSpeed(speed);\n            }\n            index++;\n\n            if (course != null) {\n                position.setCourse(course);\n            }\n            // Additional optional fields\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Double.parseDouble(values[index++]));\n                } catch (Exception ignore) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                } catch (Exception ignore) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                } catch (Exception ignore) {\n                    index++;\n                }\n            }\n            break;\n        case \"GSM\":\n            // Defensive: GSM can have empty fields; skip accordingly\n            // Network: MCC;MNC;LAC;CID;RSSI\n            // In some samples there are fields like GSM:1;4;416;3;627A;A84B;-66 or GSM:;;310;260;C76D;9F1D;-85\n            while (index < values.length && index < 2) {\n                index++; // registration status, signal strength\n            }\n            try {\n                while (index + 4 < values.length) {\n                    int mcc = Integer.parseInt(values[index++]);\n                    int mnc = Integer.parseInt(values[index++]);\n                    int lac = Integer.parseInt(values[index++], 16);\n                    int cid = Integer.parseInt(values[index++], 16);\n                    int rssi = Integer.parseInt(values[index++]);\n                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                }\n            } catch (Exception ignore) {\n                // Defensive: in case any parsing/length fails, ignore chunk\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                String odometer = values[index++];\n                try {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));\n                } catch (Exception ignore) {\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                try {\n                    int h = Integer.parseInt(hours.length > 0 ? hours[0] : \"0\");\n                    int m = Integer.parseInt(hours.length > 1 ? hours[1] : \"0\");\n                    int s = Integer.parseInt(hours.length > 2 ? hours[2] : \"0\");\n                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n                } catch (Exception ignore) {\n                }\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                } catch (Exception ignore) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                } catch (Exception ignore) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                } catch (Exception ignore) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                } catch (Exception ignore) {\n                    index++;\n                }\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                String status = values[index++];\n                try {\n                    // Numeric status may be hex or decimal\n                    if (status.startsWith(\"0x\") || status.startsWith(\"0X\")) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(status.substring(2), 16));\n                    } else if (status.matches(\"[0-9A-Fa-f]+\")) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));\n                    } else {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(status));\n                    }\n                } catch (Exception ignore) {\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String ioString = values[index++];\n                try {\n                    int io = Integer.parseInt(ioString, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                } catch (Exception ignore) {\n                }\n            } else {\n                index++;\n            }\n            // Defensive: skip up to geofence\n            if (index + 1 < values.length) {\n                String g1 = values[index++] == null ? \"\" : values[index - 1];\n                String g2 = values[index++] == null ? \"\" : values[index - 1];\n                position.set(Position.KEY_GEOFENCE, g1 + g2);\n            } else {\n                index += 2;\n            }\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                String sensorIndexStr = \"\";\n                String dataTypeStr = \"\";\n                try {\n                    sensorIndexStr = values[index++];\n                    dataTypeStr = values[index++];\n                    int sensorIndex = Integer.parseInt(sensorIndexStr);\n                    int dataType = Integer.parseInt(dataTypeStr);\n                    if (dataType == 0 && index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1) {\n                        if (index < values.length) {\n                            // serial\n                            index += 1;\n                        }\n                        if (index < values.length && !values[index].isEmpty()) {\n                            try {\n                                position.set(Position.PREFIX_TEMP + sensorIndex,\n                                        Double.parseDouble(values[index++]));\n                            } catch (Exception ignore) {\n                                index++;\n                            }\n                        } else {\n                            index++;\n                        }\n                    } else {\n                        // Unhandled datatype, skip as many as possible\n                        index++;\n                    }\n                } catch (Exception ignore) {\n                    // Defensive: malformed data, advance index\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}