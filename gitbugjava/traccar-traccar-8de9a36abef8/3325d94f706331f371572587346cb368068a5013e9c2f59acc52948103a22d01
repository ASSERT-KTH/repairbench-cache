{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Some devices (like GS02) send GPS fragments in a different format:\n            // For GS02 the tokens are: [time, valid, latitude, longitude, speed, course, odometer]\n            // Whereas in other cases the tokens are: [valid, satellites, latitude, longitude, speed, course, altitude (opt), hdop (opt), vdop (opt)]\n            if (values.length == 7 && !values[0].isEmpty() && Character.isDigit(values[0].charAt(0))) {\n                // GS02 format: skip the time token\n                index = 1;\n                // valid\n                position.setValid(\"A\".equalsIgnoreCase(values[index]));\n                index++;\n                // latitude\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                    double latitude = Double.parseDouble(values[index].substring(1));\n                    if (values[index].charAt(0) == 'S') {\n                        latitude = -latitude;\n                    }\n                    position.setLatitude(latitude);\n                }\n                index++;\n                // longitude\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                    double longitude = Double.parseDouble(values[index].substring(1));\n                    if (values[index].charAt(0) == 'W') {\n                        longitude = -longitude;\n                    }\n                    position.setLongitude(longitude);\n                }\n                index++;\n                // speed\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                }\n                index++;\n                // course\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setCourse(Integer.parseInt(values[index]));\n                }\n                index++;\n                // odometer\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                }\n            } else {\n                // Standard format: tokens: [valid, satellites, latitude, longitude, speed, course, altitude (optional), hdop (optional), vdop (optional)]\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setValid(values[index].equals(\"A\"));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                    double latitude = Double.parseDouble(values[index].substring(1));\n                    if (values[index].charAt(0) == 'S') {\n                        latitude = -latitude;\n                    }\n                    position.setLatitude(latitude);\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                    double longitude = Double.parseDouble(values[index].substring(1));\n                    if (values[index].charAt(0) == 'W') {\n                        longitude = -longitude;\n                    }\n                    position.setLongitude(longitude);\n                }\n                index++;\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                    }\n                }\n                index++;\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.setCourse(Integer.parseInt(values[index]));\n                    }\n                }\n                index++;\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.setAltitude(Integer.parseInt(values[index]));\n                    }\n                }\n                index++;\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                    }\n                }\n                index++;\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                    }\n                }\n            }\n            break;\n        case \"GSM\":\n            // Skip registration status and signal strength tokens\n            index++;\n            index++;\n            int mcc = 0;\n            int mnc = 0;\n            int lac = 0;\n            int cid = 0;\n            int signal = 0;\n            if (index < values.length && !values[index].isEmpty()) {\n                mcc = Integer.parseInt(values[index]);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                mnc = Integer.parseInt(values[index]);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                lac = Integer.parseInt(values[index], 16);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                cid = Integer.parseInt(values[index], 16);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                signal = Integer.parseInt(values[index]);\n            }\n            index++;\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, signal)));\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int h = (hours.length > 0 && !hours[0].isEmpty()) ? Integer.parseInt(hours[0]) : 0;\n                int m = (hours.length > 1 && !hours[1].isEmpty()) ? Integer.parseInt(hours[1]) : 0;\n                int s = (hours.length > 2 && !hours[2].isEmpty()) ? Integer.parseInt(hours[2]) : 0;\n                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n            }\n            index++;\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n            }\n            index++;\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            String geoFencePart1 = index < values.length ? values[index++] : \"\";\n            String geoFencePart2 = index < values.length ? values[index++] : \"\";\n            position.set(Position.KEY_GEOFENCE, geoFencePart1 + geoFencePart2);\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (values[index].isEmpty()) {\n                    break;\n                }\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1) {\n                    index++; // skip temperature sensor serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}