{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                // Validity (String check, not a number parse)\n                position.setValid(values[index++].equals(\"A\"));\n\n                // Satellites\n                if (index < values.length) {\n                    String satStr = values[index++];\n                    if (!satStr.isEmpty()) {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(satStr));\n                    }\n                } else { index++; } // Still advance index if field was expected but missing from array (keeps indexing consistent for subsequent fixed fields)\n\n                // Latitude\n                if (index < values.length) {\n                    String latStr = values[index++];\n                    if (!latStr.isEmpty() && latStr.length() > 1) { // Ensure there's a char and a value part\n                        position.setLatitude(Double.parseDouble(latStr.substring(1)));\n                        if (latStr.charAt(0) == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                    }\n                } else { index++; }\n\n                // Longitude\n                if (index < values.length) {\n                    String lonStr = values[index++];\n                    if (!lonStr.isEmpty() && lonStr.length() > 1) { // Ensure there's a char and a value part\n                        position.setLongitude(Double.parseDouble(lonStr.substring(1)));\n                        if (lonStr.charAt(0) == 'W') {\n                            position.setLongitude(-position.getLongitude());\n                        }\n                    }\n                } else { index++; }\n\n                // Speed (original logic was already robust for empty strings)\n                if (index < values.length) {\n                    String speedStr = values[index++];\n                    if (!speedStr.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                    }\n                } else { index++; }\n\n\n                // Course\n                if (index < values.length) {\n                    String courseStr = values[index++];\n                    if (!courseStr.isEmpty()) {\n                        position.setCourse(Integer.parseInt(courseStr));\n                    }\n                } else { index++; }\n\n\n                // Altitude (this was the specific field causing the test failure)\n                if (index < values.length) {\n                    String altStr = values[index++];\n                    if (!altStr.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altStr));\n                    }\n                }\n                // HDOP\n                if (index < values.length) {\n                    String hdopStr = values[index++];\n                    if (!hdopStr.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                    }\n                }\n                // VDOP\n                if (index < values.length) {\n                    String vdopStr = values[index++];\n                    if (!vdopStr.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status (string, not parsed as number here)\n                index += 1; // signal strength (string, not parsed as number here)\n                // Assuming the following parseInt calls are for non-empty mandatory parts of CellTower info\n                if (index + 4 < values.length) { // Check if enough elements exist for a full CellTower\n                    String mccStr = values[index++];\n                    String mncStr = values[index++];\n                    String lacStr = values[index++];\n                    String cidStr = values[index++];\n                    String rssiStr = values[index++];\n\n                    if (!mccStr.isEmpty() && !mncStr.isEmpty() && !lacStr.isEmpty() && !cidStr.isEmpty()) {\n                        // RSSI can be optional or come later, check its specific parsing if it can be empty\n                        // For now, assume it must be non-empty if present\n                        Network network = new Network(CellTower.from(\n                                Integer.parseInt(mccStr), Integer.parseInt(mncStr),\n                                Integer.parseInt(lacStr, 16), Integer.parseInt(cidStr, 16)));\n                        // If RSSI is part of this structure and can be empty, it needs its own check:\n                        if (!rssiStr.isEmpty()) {\n                            // Example: network.setRssi(Integer.parseInt(rssiStr));\n                            // The original code used Integer.parseInt(values[index++]) for the 5th param of from()\n                            // which is not RSSI. Correcting CellTower.from based on typical usage:\n                            // CellTower.from(mcc, mnc, lac, cid, rssi)\n                            // The original code was CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(values[index++]))\n                            // This suggests values[index++] (the 5th one) was an int. Let's keep it that way.\n                            // If this 5th value (e.g. signal strength) can be empty, needs protection.\n                            // The structure `CellTower.from(..., Integer.parseInt(values[index++]))` suggests a fifth integer.\n                            // For safety, let's assume rssiStr refers to that fifth parameter.\n                            if (!rssiStr.isEmpty()) {\n                                // The original was: Integer.parseInt(values[index++]) for the 5th parameter to CellTower.from\n                                // It looks like the 5th parameter in CellTower.from might be signalStrength if available.\n                                // The original code was:\n                                // position.setNetwork(new Network(CellTower.from(\n                                //        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                                //        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                                //        Integer.parseInt(values[index++]))));\n                                // Each of these parseInt could fail if string is empty.\n                                // Reapplying the pattern:\n                                int mcc = 0, mnc = 0, lac = 0, cid = 0, fifthParam = 0; // Default values\n                                boolean hasMcc = false, hasMnc = false, hasLac = false, hasCid = false, hasFifth = false;\n\n                                if (!mccStr.isEmpty()) { mcc = Integer.parseInt(mccStr); hasMcc = true; }\n                                if (!mncStr.isEmpty()) { mnc = Integer.parseInt(mncStr); hasMnc = true; }\n                                if (!lacStr.isEmpty()) { lac = Integer.parseInt(lacStr, 16); hasLac = true; }\n                                if (!cidStr.isEmpty()) { cid = Integer.parseInt(cidStr, 16); hasCid = true; }\n                                if (!rssiStr.isEmpty()) { fifthParam = Integer.parseInt(rssiStr); hasFifth = true; } // Assuming rssiStr is the 5th value\n\n                                if (hasMcc && hasMnc && hasLac && hasCid && hasFifth) { // Or some subset\n                                     position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, fifthParam)));\n                                } else if (hasMcc && hasMnc && hasLac && hasCid) { // Common case without 5th param\n                                     position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    index += 5; // Advance index past expected fields even if not all present/parsed\n                }\n                break;\n            case \"COT\":\n                if (index < values.length) {\n                    String odometerStr = values[index++];\n                    if (!odometerStr.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerStr));\n                    }\n                }\n                if (index < values.length) {\n                    String hoursField = values[index++];\n                    if (!hoursField.isEmpty()) {\n                        String[] hours = hoursField.split(\"-\");\n                        long totalSeconds = 0;\n                        boolean parsedAnyHourPart = false;\n                        if (hours.length > 0 && !hours[0].isEmpty()) {\n                            totalSeconds += (long) Integer.parseInt(hours[0]) * 3600;\n                            parsedAnyHourPart = true;\n                        }\n                        if (hours.length > 1 && !hours[1].isEmpty()) {\n                            totalSeconds += (long) Integer.parseInt(hours[1]) * 60;\n                            parsedAnyHourPart = true;\n                        }\n                        if (hours.length > 2 && !hours[2].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hours[2]);\n                            parsedAnyHourPart = true;\n                        }\n                        if (parsedAnyHourPart) {\n                           position.set(Position.KEY_HOURS, totalSeconds * 1000L);\n                        }\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) {\n                    String powerStr = values[index++];\n                    if (!powerStr.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n                    }\n                }\n                if (index < values.length) {\n                    String batteryStr = values[index++];\n                    if (!batteryStr.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n                    }\n                }\n                if (index < values.length) {\n                    String adc1Str = values[index++];\n                    if (!adc1Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));\n                    }\n                }\n                if (index < values.length) {\n                    String adc2Str = values[index++];\n                    if (!adc2Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));\n                    }\n                }\n                break;\n            case \"DTT\": // Digital PTT a.k.a. status and I/O\n                // Status\n                if (index < values.length) {\n                    String statusStr = values[index++];\n                    if (!statusStr.isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));\n                    }\n                } else { index++; } // Assume fixed field position\n\n                // IO - original logic was already robust for empty string\n                if (index < values.length) {\n                    String ioStr = values[index++];\n                    if (!ioStr.isEmpty()) {\n                        int io = Integer.parseInt(ioStr, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                } else { index++; }\n\n                // Geofence (concatenation of two string fields)\n                String geofencePart1 = \"\";\n                if (index < values.length) {\n                    geofencePart1 = values[index++];\n                } else { index++; }\n                String geofencePart2 = \"\";\n                if (index < values.length) {\n                    geofencePart2 = values[index++];\n                } else { index++; }\n                position.set(Position.KEY_GEOFENCE, geofencePart1 + geofencePart2);\n\n                // Event Status (String, no parse)\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                } else { index++; }\n\n                // Packet Type (optional at the end)\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\": // Event Data\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\": // Wireless ID / iButton and Temperature sensors\n                while (index < values.length) {\n                    // Sensor Index\n                    String sensorIndexStr = \"\";\n                    if (index < values.length) { // Check before trying to read sensorIndex\n                        sensorIndexStr = values[index++];\n                    } else { break; } // Not enough data for sensorIndex\n                    \n                    int sensorIndexVal = 0;\n                    if (!sensorIndexStr.isEmpty()) {\n                        sensorIndexVal = Integer.parseInt(sensorIndexStr);\n                    } else { continue; } // Skip this IWD entry if sensorIndex is empty\n\n                    // Data Type\n                    String dataTypeStr = \"\";\n                    if (index < values.length) { // Check before trying to read dataType\n                        dataTypeStr = values[index++];\n                    } else { break; } // Not enough data for dataType\n\n                    int dataTypeVal = 0;\n                    if (!dataTypeStr.isEmpty()) {\n                        dataTypeVal = Integer.parseInt(dataTypeStr);\n                    } else { continue; } // Skip this IWD entry if dataType is empty\n\n\n                    if (dataTypeVal == 0) { // Driver ID\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        } else { break; } // Not enough data for driver ID\n                    } else if (dataTypeVal == 1) { // Temperature\n                        index += 1; // Skip temperature sensor serial number\n                        if (index < values.length) {\n                            String tempStr = values[index++];\n                            if (!tempStr.isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndexVal, Double.parseDouble(tempStr));\n                            }\n                        } else { break; } // Not enough data for temperature\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}