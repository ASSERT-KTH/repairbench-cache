{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (dataIndex == -1 || fragment.length() == dataIndex + 1) { // handle cases like \"GPS\" or \"GPS:\"\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\", -1); // Use -1 to preserve trailing empty strings\n        }\n\n        switch (fragment.substring(0, dataIndex > -1 ? dataIndex : fragment.length())) {\n            case \"GPS\":\n                if (index < values.length) { // Valid\n                    position.setValid(values[index].equals(\"A\"));\n                    index++;\n                }\n                if (index < values.length) { // Satellites\n                    String satellites = values[index];\n                    index++;\n                    if (!satellites.isEmpty()) {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(satellites));\n                    }\n                }\n                if (index < values.length) { // Latitude\n                    String latitude = values[index];\n                    index++;\n                    if (!latitude.isEmpty() && latitude.length() > 1) {\n                        position.setLatitude(Double.parseDouble(latitude.substring(1)));\n                        if (latitude.charAt(0) == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                    }\n                }\n                if (index < values.length) { // Longitude\n                    String longitude = values[index];\n                    index++;\n                    if (!longitude.isEmpty() && longitude.length() > 1) {\n                        position.setLongitude(Double.parseDouble(longitude.substring(1)));\n                        if (longitude.charAt(0) == 'W') {\n                            position.setLongitude(-position.getLongitude());\n                        }\n                    }\n                }\n                if (index < values.length) { // Speed\n                    String speed = values[index];\n                    index++;\n                    if (!speed.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n                    }\n                }\n                if (index < values.length) { // Course\n                    String course = values[index];\n                    index++;\n                    if (!course.isEmpty()) {\n                        position.setCourse(Integer.parseInt(course));\n                    }\n                }\n                if (index < values.length) { // Altitude\n                    String altitude = values[index];\n                    index++;\n                    if (!altitude.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altitude));\n                    }\n                }\n                if (index < values.length) { // HDOP\n                    String hdop = values[index];\n                    index++;\n                    if (!hdop.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                    }\n                }\n                if (index < values.length) { // VDOP\n                    String vdop = values[index];\n                    index++;\n                    if (!vdop.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n\n                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;\n\n                if (index < values.length) {\n                    String mccStr = values[index];\n                    index++;\n                    if (!mccStr.isEmpty()) {\n                        mcc = Integer.parseInt(mccStr);\n                    }\n                }\n                if (index < values.length) {\n                    String mncStr = values[index];\n                    index++;\n                    if (!mncStr.isEmpty()) {\n                        mnc = Integer.parseInt(mncStr);\n                    }\n                }\n                if (index < values.length) {\n                    String lacStr = values[index];\n                    index++;\n                    if (!lacStr.isEmpty()) {\n                        lac = Integer.parseInt(lacStr, 16);\n                    }\n                }\n                if (index < values.length) {\n                    String cidStr = values[index];\n                    index++;\n                    if (!cidStr.isEmpty()) {\n                        cid = Integer.parseInt(cidStr, 16);\n                    }\n                }\n                if (index < values.length) { // Optional RSSI or other value\n                    String rssiStr = values[index];\n                    index++;\n                    if (!rssiStr.isEmpty()) {\n                        rssi = Integer.parseInt(rssiStr);\n                    }\n                }\n\n                if (mcc != null && mnc != null && lac != null && cid != null) {\n                    if (rssi != null) {\n                        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                    } else {\n                        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n                    }\n                }\n                break;\n            case \"COT\":\n                if (index < values.length) { // Odometer\n                    String odometer = values[index];\n                    index++;\n                    if (!odometer.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));\n                    }\n                }\n                if (index < values.length) { // Hours\n                    String hoursString = values[index];\n                    index++;\n                    if (!hoursString.isEmpty()) {\n                        String[] hoursParts = hoursString.split(\"-\");\n                        long totalSeconds = 0;\n                        boolean hasData = false;\n                        if (hoursParts.length > 0 && !hoursParts[0].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hoursParts[0]) * 3600L;\n                            hasData = true;\n                        }\n                        if (hoursParts.length > 1 && !hoursParts[1].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hoursParts[1]) * 60L;\n                            hasData = true;\n                        }\n                        if (hoursParts.length > 2 && !hoursParts[2].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hoursParts[2]);\n                            hasData = true;\n                        }\n                        if (hasData) {\n                            position.set(Position.KEY_HOURS, totalSeconds * 1000L);\n                        }\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) { // Power\n                    String power = values[index];\n                    index++;\n                    if (!power.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(power));\n                    }\n                }\n                if (index < values.length) { // Battery\n                    String battery = values[index];\n                    index++;\n                    if (!battery.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(battery));\n                    }\n                }\n                if (index < values.length) { // ADC1\n                    String adc1 = values[index];\n                    index++;\n                    if (!adc1.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                    }\n                }\n                if (index < values.length) { // ADC2\n                    String adc2 = values[index];\n                    index++;\n                    if (!adc2.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                    }\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) { // Status\n                    String status = values[index];\n                    index++;\n                    if (!status.isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));\n                    }\n                }\n                if (index < values.length) { // IO\n                    String ioString = values[index];\n                    index++;\n                    if (!ioString.isEmpty()) {\n                        int io = Integer.parseInt(ioString, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                String geofencePart1 = \"\"; // Geofence part 1\n                if (index < values.length) {\n                    geofencePart1 = values[index];\n                    index++;\n                }\n                String geofencePart2 = \"\"; // Geofence part 2\n                if (index < values.length) {\n                    geofencePart2 = values[index];\n                    index++;\n                }\n                position.set(Position.KEY_GEOFENCE, geofencePart1 + geofencePart2);\n\n                if (index < values.length) { // eventStatus\n                    position.set(\"eventStatus\", values[index]);\n                    index++;\n                }\n                if (index < values.length) { // packetType\n                    position.set(\"packetType\", values[index]);\n                    index++;\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    if (index + 1 >= values.length) { break; } // Need at least sensorIndex and dataType\n\n                    String sensorIndexStr = values[index];\n                    String dataTypeStr = values[index + 1];\n\n                    if (sensorIndexStr.isEmpty() || dataTypeStr.isEmpty()) {\n                        index += 2; // Skip malformed pair\n                        continue;\n                    }\n\n                    int sensorIndexVal = Integer.parseInt(sensorIndexStr);\n                    int dataTypeVal = Integer.parseInt(dataTypeStr);\n                    index += 2; // Consumed sensorIndex and dataType\n\n                    if (dataTypeVal == 0) { // Driver Unique ID\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                            index++;\n                        } else {\n                            break; // Not enough data\n                        }\n                    } else if (dataTypeVal == 1) { // Temperature sensor\n                        if (index < values.length) { // Skip temperature sensor serial number\n                            index++;\n                        } else {\n                            break; // Not enough data for serial\n                        }\n                        if (index < values.length) { // Temperature value\n                            String tempStr = values[index];\n                            index++;\n                            if (!tempStr.isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndexVal, Double.parseDouble(tempStr));\n                            }\n                        } else {\n                            break; // Not enough data for temperature\n                        }\n                    }\n                    // If dataType is neither 0 nor 1, fields are skipped implicitly by loop structure\n                }\n                break;\n            default:\n                // Log unknown fragment type or ignore\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}