{
    "generation": "private void decodeFragment(Position position, String fragment) {\n    int dataIndex = fragment.indexOf(':');\n    if (dataIndex < 0) {\n        // nothing to decode\n        return;\n    }\n    String key = fragment.substring(0, dataIndex);\n    String[] values;\n    if (fragment.length() > dataIndex + 1) {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    } else {\n        values = new String[0];\n    }\n    int index = 0;\n    switch (key) {\n\n        case \"GPS\":\n            // valid\n            if (index < values.length) {\n                position.setValid(\"A\".equals(values[index]));\n            }\n            index++;\n            // satellites\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n            }\n            index++;\n            // latitude\n            if (index < values.length && values[index].length() > 1) {\n                String s = values[index];\n                char hemi = s.charAt(0);\n                double lat = Double.parseDouble(s.substring(1));\n                if (hemi == 'S') {\n                    lat = -lat;\n                }\n                position.setLatitude(lat);\n            }\n            index++;\n            // longitude\n            if (index < values.length && values[index].length() > 1) {\n                String s = values[index];\n                char hemi = s.charAt(0);\n                double lon = Double.parseDouble(s.substring(1));\n                if (hemi == 'W') {\n                    lon = -lon;\n                }\n                position.setLongitude(lon);\n            }\n            index++;\n            // speed (kph to knots)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n            }\n            index++;\n            // course\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index]));\n            }\n            index++;\n            // altitude\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index]));\n            }\n            index++;\n            // HDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n            }\n            index++;\n            // VDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n            }\n            break;\n\n        case \"GSM\":\n            // skip registration status and signal strength\n            index += 2;\n            if (values.length - index >= 5) {\n                String mcc = values[index++];\n                String mnc = values[index++];\n                String lac = values[index++];\n                String cid = values[index++];\n                String rssi = values[index++];\n                if (!mcc.isEmpty() && !mnc.isEmpty() && !lac.isEmpty() && !cid.isEmpty() && !rssi.isEmpty()) {\n                    try {\n                        CellTower ct = CellTower.from(\n                                Integer.parseInt(mcc),\n                                Integer.parseInt(mnc),\n                                Integer.parseInt(lac, 16),\n                                Integer.parseInt(cid, 16),\n                                Integer.parseInt(rssi)\n                        );\n                        position.setNetwork(new Network(ct));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid GSM fields\n                    }\n                }\n            }\n            break;\n\n        case \"COT\":\n            // odometer\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n            }\n            index++;\n            // engine hours\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] h = values[index].split(\"-\");\n                int hours = Integer.parseInt(h[0]);\n                int mins = h.length > 1 ? Integer.parseInt(h[1]) : 0;\n                int secs = h.length > 2 ? Integer.parseInt(h[2]) : 0;\n                position.set(Position.KEY_HOURS, (hours * 3600 + mins * 60 + secs) * 1000);\n            }\n            break;\n\n        case \"ADC\":\n            // main power\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n            }\n            index++;\n            // battery\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n            }\n            index++;\n            // ADC1\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n            }\n            index++;\n            // ADC2\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n            }\n            break;\n\n        case \"DTT\":\n            // status\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n            }\n            index++;\n            // IO port\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            // geofence (two parts)\n            if (index + 1 < values.length) {\n                position.set(Position.KEY_GEOFENCE,\n                        values[index] + values[index + 1]);\n            }\n            index += 2;\n            // eventStatus\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index]);\n            }\n            index++;\n            // packetType\n            if (index < values.length) {\n                position.set(\"packetType\", values[index]);\n            }\n            break;\n\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index]);\n            }\n            break;\n\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index]);\n            }\n            break;\n\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index]);\n            }\n            break;\n\n        case \"IWD\":\n            // in\u2010wheel device sensors\n            while (index + 1 < values.length) {\n                // parse sensor index and type\n                if (values[index].isEmpty() || values[index + 1].isEmpty()) {\n                    index += 2;\n                    continue;\n                }\n                int sensorIndex;\n                int dataType;\n                try {\n                    sensorIndex = Integer.parseInt(values[index]);\n                    dataType = Integer.parseInt(values[index + 1]);\n                } catch (NumberFormatException e) {\n                    break;\n                }\n                index += 2;\n                if (dataType == 0) {\n                    // driver unique ID\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                    }\n                    index++;\n                } else if (dataType == 1) {\n                    // temperature sensor\n                    index++; // skip serial\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex,\n                                Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n            }\n            break;\n\n        default:\n            // unsupported fragment\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}