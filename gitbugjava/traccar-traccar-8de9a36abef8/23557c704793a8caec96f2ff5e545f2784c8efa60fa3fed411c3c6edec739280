{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values.length > index ? values[index++].equals(\"A\") : false);\n            position.set(Position.KEY_SATELLITES,\n                values.length > index && !values[index].isEmpty() ? Integer.parseInt(values[index++]) : null);\n\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index]));\n            }\n            index++;\n\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            // index++; // no further parsing needed\n            break;\n\n        case \"GSM\": {\n            index += 2;\n\n            if (values.length - index >= 5) {\n                position.setNetwork(new Network(CellTower.from(\n                    Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++]))));\n            }\n            break;\n        }\n\n        case \"COT\":\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int h = 0, m = 0, s = 0;\n                try {\n                    if (hours.length > 0 && !hours[0].isEmpty()) h = Integer.parseInt(hours[0]);\n                } catch (NumberFormatException e) {}\n                try {\n                    if (hours.length > 1 && !hours[1].isEmpty()) m = Integer.parseInt(hours[1]);\n                } catch (NumberFormatException e) {}\n                try {\n                    if (hours.length > 2 && !hours[2].isEmpty()) s = Integer.parseInt(hours[2]);\n                } catch (NumberFormatException e) {}\n                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n            }\n            break;\n\n        case \"ADC\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n            }\n            break;\n\n        case \"DTT\":\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    int io = Integer.parseInt(values[index], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (values.length > index + 1) {\n                String geofence = (values[index] != null ? values[index] : \"\") + (values[index + 1] != null ? values[index + 1] : \"\");\n                position.set(Position.KEY_GEOFENCE, geofence);\n            }\n            index += 2;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index]);\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index]);\n            }\n            break;\n\n        case \"ETD\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index]);\n            }\n            break;\n\n        case \"OBD\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index]);\n            }\n            break;\n\n        case \"TAG\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index]);\n            }\n            break;\n\n        case \"IWD\":\n            while (values.length > index + 1) {\n                int sensorIndex = 0;\n                int dataType = 0;\n                try {\n                    sensorIndex = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    index++;\n                    continue;\n                }\n                try {\n                    dataType = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    continue;\n                }\n                if (dataType == 0) {\n                    // driver unique id\n                    if (values.length > index && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                    }\n                    index++;\n                } else if (dataType == 1) {\n                    // temp sensor\n                    if (values.length > index) index++; // skip serial number\n                    if (values.length > index && !values[index].isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                        } catch (NumberFormatException e) {\n                            // ignore\n                        }\n                    }\n                    index++;\n                }\n            }\n            break;\n\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}