{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (index < values.length) {\n                position.setValid(\"A\".equals(values[index++]));\n                if (index < values.length) {\n                    int satellites = 0;\n                    if (!values[index].isEmpty()) {\n                        satellites = Integer.parseInt(values[index++]);\n                    }\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                        char latDir = values[index++].charAt(0);\n                        if (latDir == 'S') {\n                            position.setLatitude(-position.getLatitude());\n                        }\n                        if (index < values.length && !values[index].isEmpty()) {\n                            position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                            char lonDir = values[index++].charAt(0);\n                            if (lonDir == 'W') {\n                                position.setLongitude(-position.getLongitude());\n                            }\n                            if (index < values.length && !values[index].isEmpty()) {\n                                String speedStr = values[index];\n                                if (!speedStr.isEmpty()) {\n                                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                                    index++;\n                                }\n                            }\n                            if (index < values.length && !values[index].isEmpty()) {\n                                position.setCourse(Integer.parseInt(values[index++]));\n                            }\n                            if (index < values.length && !values[index].isEmpty()) {\n                                position.setAltitude(Integer.parseInt(values[index++]));\n                            }\n                            if (index < values.length && !values[index].isEmpty()) {\n                                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                            }\n                            if (index < values.length && !values[index].isEmpty()) {\n                                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                            }\n                        }\n                    }\n                }\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index < values.length - 3) {\n                int lac = Integer.parseInt(values[index++], 16);\n                int cellId = Integer.parseInt(values[index++], 16);\n                int signal = Integer.parseInt(values[index++]);\n                position.setNetwork(new Network(CellTower.from(\n                        position.getDeviceId(), position.getDeviceId(), lac, cellId, signal)));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                if (index < values.length && !values[index].isEmpty()) {\n                    String[] hours = values[index].split(\"-\");\n                    int h = 0, m = 0, s = 0;\n                    if (hours.length > 0 && !hours[0].isEmpty()) h = Integer.parseInt(hours[0]);\n                    if (hours.length > 1 && !hours[1].isEmpty()) m = Integer.parseInt(hours[1]);\n                    if (hours.length > 2 && !hours[2].isEmpty()) s = Integer.parseInt(hours[2]);\n                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n                    index++;\n                }\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index++], 16);\n                position.set(Position.KEY_STATUS, io);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_GEOFENCE, values[index++]);\n                String eventStatus = values[index++];\n                if (!eventStatus.isEmpty()) {\n                    position.set(\"eventStatus\", eventStatus);\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(\"packetType\", values[index++]);\n                }\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index++; // Skip temperature sensor serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}