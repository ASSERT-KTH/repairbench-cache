{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                position.setValid(values[index++].equals(\"A\"));\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                    index++;\n                } else {\n                    index++; // Skip speed field if empty\n                }\n                if (index < values.length) {\n                    position.setCourse(Integer.parseInt(values[index++]));\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setAltitude(Integer.parseInt(values[index++]));\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n                if (index < values.length) {\n                    position.setNetwork(new Network(CellTower.from(\n                            Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                            Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                            Integer.parseInt(values[index++]))));\n                }\n                break;\n            case \"COT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                }\n                if (index < values.length) {\n                    String[] hours = values[index].split(\"-\");\n                    if (hours.length > 0) {\n                        long totalMillis = 0;\n                        if (hours[0].matches(\"\\\\d+\")) {\n                            totalMillis += Integer.parseInt(hours[0]) * 3600L * 1000;\n                        }\n                        if (hours.length > 1 && hours[1].matches(\"\\\\d+\")) {\n                            totalMillis += Integer.parseInt(hours[1]) * 60L * 1000;\n                        }\n                        if (hours.length > 2 && hours[2].matches(\"\\\\d+\")) {\n                            totalMillis += Integer.parseInt(hours[2]) * 1000;\n                        }\n                        position.set(Position.KEY_HOURS, totalMillis);\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    int io = Integer.parseInt(values[index++], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                if (index < values.length) {\n                    position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                    index++;\n                } else if (index + 1 < values.length) {\n                    position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index + 1 < values.length) {\n                    int sensorIndex;\n                    try {\n                        sensorIndex = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        break;\n                    }\n                    int dataType;\n                    try {\n                        dataType = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        break;\n                    }\n                    if (dataType == 0 && index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1 && index + 1 < values.length) {\n                        index += 1; // temperature sensor serial number\n                        if (index < values.length) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}