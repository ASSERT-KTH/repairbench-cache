{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                // Valid field\n                if (index < values.length) {\n                    position.setValid(values[index++].equals(\"A\"));\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n\n                // Satellites\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n\n                // Latitude\n                String latValue = \"\";\n                if (index < values.length) {\n                    latValue = values[index++];\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n                if (!latValue.isEmpty() && latValue.length() > 1) {\n                    position.setLatitude(Double.parseDouble(latValue.substring(1)));\n                    if (latValue.charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                }\n\n                // Longitude\n                String lonValue = \"\";\n                if (index < values.length) {\n                    lonValue = values[index++];\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n                if (!lonValue.isEmpty() && lonValue.length() > 1) {\n                    position.setLongitude(Double.parseDouble(lonValue.substring(1)));\n                    if (lonValue.charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                }\n\n                // Speed\n                String speedValue = \"\";\n                if (index < values.length) {\n                    speedValue = values[index++];\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n                if (!speedValue.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));\n                }\n\n                // Course\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setCourse(Integer.parseInt(values[index++]));\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n\n                // Altitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setAltitude(Integer.parseInt(values[index++]));\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n\n                // HDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n\n                // VDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n                break;\n\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n\n                int mcc = 0;\n                if (index < values.length && !values[index].isEmpty()) {\n                    mcc = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                }\n\n                int mnc = 0;\n                if (index < values.length && !values[index].isEmpty()) {\n                    mnc = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                }\n\n                int lac = 0;\n                if (index < values.length && !values[index].isEmpty()) {\n                    lac = Integer.parseInt(values[index++], 16);\n                } else {\n                    index++;\n                }\n\n                int cid = 0;\n                if (index < values.length && !values[index].isEmpty()) {\n                    cid = Integer.parseInt(values[index++], 16);\n                } else {\n                    index++;\n                }\n\n                int rssi = 0;\n                if (index < values.length && !values[index].isEmpty()) {\n                    rssi = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                }\n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                break;\n\n            case \"COT\":\n                if (index < values.length) {\n                    String odometerValue = values[index++];\n                    if (!odometerValue.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));\n                    }\n                }\n                if (index < values.length) {\n                    String hoursValue = values[index++];\n                    if (!hoursValue.isEmpty()) {\n                        String[] hours = hoursValue.split(\"-\");\n                        int h = 0;\n                        if (hours.length > 0 && !hours[0].isEmpty()) { // Check hours[0] specifically\n                            h = Integer.parseInt(hours[0]);\n                        }\n                        int m = 0;\n                        if (hours.length > 1 && !hours[1].isEmpty()) {\n                            m = Integer.parseInt(hours[1]);\n                        }\n                        int s = 0;\n                        if (hours.length > 2 && !hours[2].isEmpty()) {\n                            s = Integer.parseInt(hours[2]);\n                        }\n                        position.set(Position.KEY_HOURS, (h * 3600L + m * 60 + s) * 1000); // Changed to 3600L to prevent overflow\n                    }\n                }\n                break;\n\n            case \"ADC\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                break;\n\n            case \"DTT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                } else {\n                    index++;\n                }\n\n                String ioValue = \"\";\n                if (index < values.length) {\n                    ioValue = values[index++];\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n                if (!ioValue.isEmpty()) {\n                    int io = Integer.parseInt(ioValue, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                if (index < values.length) { // Geofence value can be empty, but needs to be consumed\n                    String geofence1 = values[index++];\n                    String geofence2 = \"\";\n                    if (index < values.length) {\n                        geofence2 = values[index++];\n                    } else {\n                        index++; // Consume empty/missing slot\n                    }\n                    position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);\n                } else {\n                    // Consume two slots even if missing\n                    index += 2;\n                }\n\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                } else {\n                    index++; // Consume empty/missing slot\n                }\n                break;\n\n            case \"ETD\":\n                if (index < values.length) { // Added check for ArrayIndexOutOfBoundsException\n                    position.set(\"eventData\", values[index++]);\n                } else {\n                    index++;\n                }\n                break;\n\n            case \"OBD\":\n                if (index < values.length) { // Added check for ArrayIndexOutOfBoundsException\n                    position.set(\"obd\", values[index++]);\n                } else {\n                    index++;\n                }\n                break;\n\n            case \"TAG\":\n                if (index < values.length) { // Added check for ArrayIndexOutOfBoundsException\n                    position.set(\"tagData\", values[index++]);\n                } else {\n                    index++;\n                }\n                break;\n\n            case \"IWD\":\n                while (index + 1 < values.length) { // Ensure at least sensorIndex and dataType are available\n                    String sensorIndexValue = values[index];\n                    int sensorIndex = -1;\n                    if (!sensorIndexValue.isEmpty()) {\n                        sensorIndex = Integer.parseInt(sensorIndexValue);\n                    }\n                    index++; // Always consume sensorIndex whether parsed or not\n\n                    String dataTypeValue = values[index];\n                    int dataType = -1;\n                    if (!dataTypeValue.isEmpty()) {\n                        dataType = Integer.parseInt(dataTypeValue);\n                    }\n                    index++; // Always consume dataType whether parsed or not\n\n                    if (sensorIndex != -1 && dataType != -1) { // Only proceed if both parsed successfully\n                        if (dataType == 0) {\n                            if (index < values.length) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                            } else {\n                                // Missing driver ID, break the loop as pair is incomplete\n                                break;\n                            }\n                        } else if (dataType == 1) {\n                            if (index < values.length) { // serial number field. Consume it.\n                                index += 1;\n                            } else {\n                                break; // Missing serial number\n                            }\n\n                            if (index < values.length && !values[index].isEmpty()) { // temperature value\n                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                            } else {\n                                if (index < values.length) { // If value is empty, consume it\n                                    index++;\n                                }\n                                // If missing, index is already at end, so it's fine.\n                            }\n                        }\n                    } else {\n                        // If sensorIndex or dataType was unparseable/empty, they've been consumed.\n                        // Continue loop to check for next pair.\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}