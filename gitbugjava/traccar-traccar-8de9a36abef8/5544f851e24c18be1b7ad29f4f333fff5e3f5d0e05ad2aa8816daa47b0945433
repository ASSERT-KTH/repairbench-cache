{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    String type = fragment.substring(0, dataIndex);\n    switch (type) {\n        case \"GPS\": {\n            // valid flag\n            if (index < values.length) {\n                String validToken = values[index++];\n                position.setValid(\"A\".equals(validToken));\n            }\n\n            // satellites\n            if (index < values.length) {\n                String satToken = values[index++];\n                if (!satToken.isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satToken));\n                }\n            }\n\n            // latitude (expecting something like \"N31.551856\" or \"S31.551856\")\n            if (index < values.length) {\n                String latToken = values[index++];\n                if (!latToken.isEmpty() && latToken.length() > 1) {\n                    char hemi = latToken.charAt(0);\n                    double lat = Double.parseDouble(latToken.substring(1));\n                    if (hemi == 'S') {\n                        lat = -lat;\n                    }\n                    position.setLatitude(lat);\n                }\n            }\n\n            // longitude (expecting \"E74.366920\" or \"W74.366920\")\n            if (index < values.length) {\n                String lonToken = values[index++];\n                if (!lonToken.isEmpty() && lonToken.length() > 1) {\n                    char hemi = lonToken.charAt(0);\n                    double lon = Double.parseDouble(lonToken.substring(1));\n                    if (hemi == 'W') {\n                        lon = -lon;\n                    }\n                    position.setLongitude(lon);\n                }\n            }\n\n            // speed (optional)\n            if (index < values.length) {\n                String speedToken = values[index++];\n                if (!speedToken.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedToken)));\n                }\n            }\n\n            // course (optional)\n            if (index < values.length) {\n                String courseToken = values[index++];\n                if (!courseToken.isEmpty()) {\n                    position.setCourse(Integer.parseInt(courseToken));\n                }\n            }\n\n            // altitude (optional)\n            if (index < values.length) {\n                String altToken = values[index++];\n                if (!altToken.isEmpty()) {\n                    position.setAltitude(Integer.parseInt(altToken));\n                }\n            }\n\n            // HDOP (optional)\n            if (index < values.length) {\n                String hdopToken = values[index++];\n                if (!hdopToken.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopToken));\n                }\n            }\n\n            // VDOP (optional)\n            if (index < values.length) {\n                String vdopToken = values[index++];\n                if (!vdopToken.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopToken));\n                }\n            }\n            break;\n        }\n        case \"GSM\": {\n            // Skip registration status and signal strength\n            if (index < values.length) index++;\n            if (index < values.length) index++;\n\n            int lac = 0, cid = 0, mcc = 0, mnc = 0, dbm = 0;\n            if (index < values.length) {\n                String token = values[index++];\n                if (!token.isEmpty()) {\n                    lac = Integer.parseInt(token);\n                }\n            }\n            if (index < values.length) {\n                String token = values[index++];\n                if (!token.isEmpty()) {\n                    cid = Integer.parseInt(token);\n                }\n            }\n            if (index < values.length) {\n                String token = values[index++];\n                if (!token.isEmpty()) {\n                    mcc = Integer.parseInt(token, 16);\n                }\n            }\n            if (index < values.length) {\n                String token = values[index++];\n                if (!token.isEmpty()) {\n                    mnc = Integer.parseInt(token, 16);\n                }\n            }\n            if (index < values.length) {\n                String token = values[index++];\n                if (!token.isEmpty()) {\n                    dbm = Integer.parseInt(token);\n                }\n            }\n            position.setNetwork(new Network(CellTower.from(lac, cid, mcc, mnc, dbm)));\n            break;\n        }\n        case \"COT\": {\n            // Odometer (optional)\n            if (index < values.length) {\n                String odoToken = values[index++];\n                if (!odoToken.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odoToken));\n                }\n            }\n            // Hours (optional)\n            if (index < values.length) {\n                String hoursToken = values[index++];\n                if (!hoursToken.isEmpty()) {\n                    String[] parts = hoursToken.split(\"-\");\n                    int h = (parts.length > 0 && !parts[0].isEmpty()) ? Integer.parseInt(parts[0]) : 0;\n                    int m = (parts.length > 1 && !parts[1].isEmpty()) ? Integer.parseInt(parts[1]) : 0;\n                    int s = (parts.length > 2 && !parts[2].isEmpty()) ? Integer.parseInt(parts[2]) : 0;\n                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n                }\n            }\n            break;\n        }\n        case \"ADC\": {\n            if (index < values.length) {\n                String powerToken = values[index++];\n                if (!powerToken.isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(powerToken));\n                }\n            }\n            if (index < values.length) {\n                String batToken = values[index++];\n                if (!batToken.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(batToken));\n                }\n            }\n            if (index < values.length) {\n                String adc1 = values[index++];\n                if (!adc1.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                }\n            }\n            if (index < values.length) {\n                String adc2 = values[index++];\n                if (!adc2.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                }\n            }\n            break;\n        }\n        case \"DTT\": {\n            if (index < values.length) {\n                String statusToken = values[index++];\n                if (!statusToken.isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(statusToken, 16));\n                }\n            }\n\n            if (index < values.length) {\n                String ioToken = values[index++];\n                if (!ioToken.isEmpty()) {\n                    int io = Integer.parseInt(ioToken, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n\n            String geoPart1 = (index < values.length) ? values[index++] : \"\";\n            String geoPart2 = (index < values.length) ? values[index++] : \"\";\n            position.set(Position.KEY_GEOFENCE, geoPart1 + geoPart2);\n\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        }\n        case \"ETD\": {\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        }\n        case \"OBD\": {\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        }\n        case \"TAG\": {\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        }\n        case \"IWD\": {\n            while (index < values.length) {\n                String sensorIndexToken = values[index++];\n                if (sensorIndexToken.isEmpty()) {\n                    continue;\n                }\n                int sensorIndex = Integer.parseInt(sensorIndexToken);\n                if (index >= values.length) break;\n                String dataTypeToken = values[index++];\n                if (dataTypeToken.isEmpty()) {\n                    continue;\n                }\n                int dataType = Integer.parseInt(dataTypeToken);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    if (index < values.length) { \n                        index++; // skip temperature sensor serial number\n                    }\n                    if (index < values.length) {\n                        String tempToken = values[index++];\n                        if (!tempToken.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempToken));\n                        }\n                    }\n                }\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}