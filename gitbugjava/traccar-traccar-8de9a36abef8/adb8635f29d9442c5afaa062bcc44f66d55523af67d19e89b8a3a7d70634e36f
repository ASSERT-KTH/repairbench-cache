{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (dataIndex == -1 || fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex != -1 ? dataIndex : fragment.length())) {\n        case \"GPS\":\n            if (values.length > index) {\n                position.setValid(values[index++].equals(\"A\") || values[index - 1].equals(\"L\"));\n            } else {\n                break;\n            }\n            if (values.length > index) {\n                position.set(Position.KEY_SATELLITES, parseSafeInt(values[index++]));\n            }\n            if (values.length > index) {\n                String lat = values[index];\n                if (lat.length() > 1) {\n                    position.setLatitude(parseSafeDouble(lat.substring(1)));\n                    if (lat.charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                }\n                index++;\n            }\n            if (values.length > index) {\n                String lon = values[index];\n                if (lon.length() > 1) {\n                    position.setLongitude(parseSafeDouble(lon.substring(1)));\n                    if (lon.charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                }\n                index++;\n            }\n            if (values.length > index) {\n                String speed = values[index];\n                if (!speed.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(parseSafeDouble(speed)));\n                }\n                index++;\n            }\n            if (values.length > index) {\n                String course = values[index];\n                if (!course.isEmpty()) {\n                    position.setCourse(parseSafeDouble(course));\n                }\n                index++;\n            }\n            if (values.length > index) {\n                String alt = values[index];\n                if (!alt.isEmpty()) {\n                    position.setAltitude(parseSafeDouble(alt));\n                }\n                index++;\n            }\n            if (values.length > index) {\n                String hdop = values[index];\n                if (!hdop.isEmpty()) {\n                    position.set(Position.KEY_HDOP, parseSafeDouble(hdop));\n                }\n                index++;\n            }\n            if (values.length > index) {\n                String vdop = values[index];\n                if (!vdop.isEmpty()) {\n                    position.set(Position.KEY_VDOP, parseSafeDouble(vdop));\n                }\n                index++;\n            }\n            break;\n        case \"GSM\":\n            index += 2; // registration status and signal strength (may be empty)\n            if (values.length > index + 4) {\n                position.setNetwork(new Network(CellTower.from(\n                        parseSafeInt(values[index++]), // MCC\n                        parseSafeInt(values[index++]), // MNC\n                        parseSafeInt(values[index++], 16), // LAC\n                        parseSafeInt(values[index++], 16), // CID\n                        parseSafeInt(values[index++]) // RSSI or similar\n                )));\n            }\n            break;\n        case \"COT\":\n            if (values.length > index) {\n                String odo = values[index++];\n                if (!odo.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, parseSafeLong(odo));\n                }\n            }\n            if (values.length > index) {\n                String[] hours = values[index].split(\"-\");\n                int hour = 0, minute = 0, second = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) hour = parseSafeInt(hours[0]);\n                if (hours.length > 1 && !hours[1].isEmpty()) minute = parseSafeInt(hours[1]);\n                if (hours.length > 2 && !hours[2].isEmpty()) second = parseSafeInt(hours[2]);\n                position.set(Position.KEY_HOURS, (hour * 3600 + minute * 60 + second) * 1000);\n            }\n            break;\n        case \"ADC\":\n            if (values.length > index) {\n                String power = values[index++];\n                if (!power.isEmpty()) position.set(Position.KEY_POWER, parseSafeDouble(power));\n            }\n            if (values.length > index) {\n                String battery = values[index++];\n                if (!battery.isEmpty()) position.set(Position.KEY_BATTERY, parseSafeDouble(battery));\n            }\n            if (values.length > index) {\n                String adc1 = values[index++];\n                if (!adc1.isEmpty()) position.set(Position.PREFIX_ADC + 1, parseSafeDouble(adc1));\n            }\n            if (values.length > index) {\n                String adc2 = values[index++];\n                if (!adc2.isEmpty()) position.set(Position.PREFIX_ADC + 2, parseSafeDouble(adc2));\n            }\n            break;\n        case \"DTT\":\n            if (values.length > index) {\n                String status = values[index++];\n                if (!status.isEmpty()) {\n                    position.set(Position.KEY_STATUS, parseSafeInt(status, 16));\n                }\n            }\n            if (values.length > index) {\n                String ioStr = values[index++];\n                if (!ioStr.isEmpty()) {\n                    int io = parseSafeInt(ioStr, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n            if (values.length > index + 1) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            } else if (values.length > index) {\n                position.set(Position.KEY_GEOFENCE, values[index++]);\n            }\n            if (values.length > index) {\n                String eventStatus = values[index++];\n                position.set(\"eventStatus\", eventStatus);\n            }\n            if (values.length > index) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (values.length > index) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (values.length > index) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (values.length > index) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (values.length > index + 1) {\n                int sensorIndex = parseSafeInt(values[index++]);\n                int dataType = parseSafeInt(values[index++]);\n                if (dataType == 0 && values.length > index) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1 && values.length > index + 1) {\n                    index++; // skip serial number\n                    String temp = values[index++];\n                    if (!temp.isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, parseSafeDouble(temp));\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n// Helper parsing functions to handle empty strings gracefully\n\nprivate static int parseSafeInt(String str) {\n    return parseSafeInt(str, 10);\n}\n\nprivate static int parseSafeInt(String str, int radix) {\n    if (str == null || str.isEmpty()) return 0;\n    try {\n        return Integer.parseInt(str, radix);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n}\n\nprivate static long parseSafeLong(String str) {\n    if (str == null || str.isEmpty()) return 0L;\n    try {\n        return Long.parseLong(str);\n    } catch (NumberFormatException e) {\n        return 0L;\n    }\n}\n\nprivate static double parseSafeDouble(String str) {\n    if (str == null || str.isEmpty()) return 0.0;\n    try {\n        return Double.parseDouble(str);\n    } catch (NumberFormatException e) {\n        return 0.0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}