{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values.length > index && values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, values.length > index ? Integer.parseInt(values[index++]) : null);\n\n            if (values.length > index) {\n                if (!values[index].isEmpty()) {\n                    position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                    if (values[index++].charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                } else {\n                    index++;\n                }\n            }\n\n            if (values.length > index) {\n                if (!values[index].isEmpty()) {\n                    position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                    if (values[index++].charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                } else {\n                    index++;\n                }\n            }\n\n            if (values.length > index) {\n                String speedStr = values[index++];\n                if (!speedStr.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                }\n            }\n\n            if (values.length > index) {\n                String courseStr = values[index++];\n                if (!courseStr.isEmpty()) {\n                    position.setCourse(Integer.parseInt(courseStr));\n                }\n            }\n\n            if (values.length > index) {\n                String altitudeStr = values[index++];\n                if (!altitudeStr.isEmpty()) {\n                    position.setAltitude(Integer.parseInt(altitudeStr));\n                }\n            }\n\n            if (values.length > index) {\n                String hdopStr = values[index++];\n                if (!hdopStr.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                }\n            }\n\n            if (values.length > index) {\n                String vdopStr = values[index++];\n                if (!vdopStr.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                }\n            }\n\n            break;\n        case \"GSM\":\n            index += 2; // skip registration status and signal strength\n            if (values.length - index >= 5) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++])\n                )));\n            }\n            break;\n        case \"COT\":\n            if (values.length > index) {\n                String odoStr = values[index++];\n                if (!odoStr.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odoStr));\n                }\n            }\n            if (values.length > index) {\n                String hoursStr = values[index++];\n                if (!hoursStr.isEmpty()) {\n                    String[] hours = hoursStr.split(\"-\");\n                    int totalSeconds = Integer.parseInt(hours[0]) * 3600\n                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0);\n                    position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                }\n            }\n            break;\n        case \"ADC\":\n            if (values.length > index) {\n                String powerStr = values[index++];\n                if (!powerStr.isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n                }\n            }\n            if (values.length > index) {\n                String battStr = values[index++];\n                if (!battStr.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(battStr));\n                }\n            }\n            if (values.length > index) {\n                String adc1 = values[index++];\n                if (!adc1.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                }\n            }\n            if (values.length > index) {\n                String adc2 = values[index++];\n                if (!adc2.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                }\n            }\n            break;\n        case \"DTT\":\n            if (values.length > index) {\n                String statusStr = values[index++];\n                if (!statusStr.isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));\n                }\n            }\n            if (values.length > index) {\n                String ioStr = values[index++];\n                if (!ioStr.isEmpty()) {\n                    int io = Integer.parseInt(ioStr, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n\n            StringBuilder geofence = new StringBuilder();\n            int gfCount = 2;\n            for (int i = 0; i < gfCount && values.length > index; i++) {\n                geofence.append(values[index++]);\n            }\n            position.set(Position.KEY_GEOFENCE, geofence.toString());\n\n            if (values.length > index) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n\n            if (values.length > index) {\n                position.set(\"packetType\", values[index++]);\n            }\n\n            break;\n        case \"ETD\":\n            if (values.length > index) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (values.length > index) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (values.length > index) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (values.length > index + 1) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (values.length > index) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index++; // skip sensor serial number\n                    if (values.length > index) {\n                        String tempStr = values[index++];\n                        if (!tempStr.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}