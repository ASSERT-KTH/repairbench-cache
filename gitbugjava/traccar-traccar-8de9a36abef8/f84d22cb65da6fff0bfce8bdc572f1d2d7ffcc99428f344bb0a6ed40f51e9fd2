{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        if (dataIndex == -1) { // Should ideally not happen if fragment format is `TYPE:data`\n            return;\n        }\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) { // Data part is empty, e.g., \"GPS:\"\n            values = new String[0];\n        } else {\n            // Use -1 limit to preserve trailing empty strings\n            values = fragment.substring(dataIndex + 1).split(\";\", -1);\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                if (index < values.length) { // Validity\n                    position.setValid(values[index++].equals(\"A\"));\n                }\n                if (index < values.length) { // Satellites\n                    String satellitesStr = values[index++];\n                    if (!satellitesStr.isEmpty()) {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesStr));\n                    }\n                }\n                if (index < values.length) { // Latitude\n                    String latStrFull = values[index++];\n                    if (latStrFull.length() > 1) { // Need at least one char for direction and one for value\n                        try {\n                            position.setLatitude(Double.parseDouble(latStrFull.substring(1)));\n                            if (latStrFull.charAt(0) == 'S') {\n                                position.setLatitude(-position.getLatitude());\n                            }\n                        } catch (NumberFormatException e) {\n                            // Ignore malformed latitude\n                        }\n                    }\n                }\n                if (index < values.length) { // Longitude\n                    String lonStrFull = values[index++];\n                    if (lonStrFull.length() > 1) { // Need at least one char for direction and one for value\n                        try {\n                            position.setLongitude(Double.parseDouble(lonStrFull.substring(1)));\n                            if (lonStrFull.charAt(0) == 'W') {\n                                position.setLongitude(-position.getLongitude());\n                            }\n                        } catch (NumberFormatException e) {\n                            // Ignore malformed longitude\n                        }\n                    }\n                }\n                if (index < values.length) { // Speed\n                    String speedStr = values[index++];\n                    if (!speedStr.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                    }\n                }\n                if (index < values.length) { // Course\n                    String courseStr = values[index++];\n                    if (!courseStr.isEmpty()) {\n                        position.setCourse(Integer.parseInt(courseStr));\n                    }\n                }\n                if (index < values.length) { // Altitude\n                    String altitudeStr = values[index++];\n                    if (!altitudeStr.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altitudeStr));\n                    }\n                }\n                if (index < values.length) { // HDOP\n                    String hdopStr = values[index++];\n                    if (!hdopStr.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                    }\n                }\n                if (index < values.length) { // VDOP\n                    String vdopStr = values[index++];\n                    if (!vdopStr.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                    }\n                }\n                break;\n            case \"GSM\":\n                if (index < values.length) { index++; } // registration status (skip)\n                if (index < values.length) { index++; } // signal strength (skip)\n                if (index + 4 < values.length) { // Need 5 fields for CellTower\n                    try {\n                        position.setNetwork(new Network(CellTower.from(\n                                Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                                Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                                Integer.parseInt(values[index++]))));\n                    } catch (NumberFormatException e) {\n                        // Skip if any part is malformed\n                    }\n                } else {\n                    // Skip remaining fields if not enough for a full CellTower\n                    index = values.length;\n                }\n                break;\n            case \"COT\":\n                if (index < values.length) { // Odometer\n                    String odometerStr = values[index++];\n                    if (!odometerStr.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerStr));\n                    }\n                }\n                if (index < values.length) { // Hours\n                    String hoursField = values[index++];\n                    if (!hoursField.isEmpty()) {\n                        String[] parts = hoursField.split(\"-\");\n                        long totalSeconds = 0;\n                        if (parts.length > 0 && !parts[0].isEmpty()) {\n                            totalSeconds += Integer.parseInt(parts[0]) * 3600L;\n                        }\n                        if (parts.length > 1 && !parts[1].isEmpty()) {\n                            totalSeconds += Integer.parseInt(parts[1]) * 60L;\n                        }\n                        if (parts.length > 2 && !parts[2].isEmpty()) {\n                            totalSeconds += Integer.parseInt(parts[2]);\n                        }\n                        position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) { // Power\n                    String powerStr = values[index++];\n                    if (!powerStr.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n                    }\n                }\n                if (index < values.length) { // Battery\n                    String batteryStr = values[index++];\n                    if (!batteryStr.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n                    }\n                }\n                if (index < values.length) { // ADC 1\n                    String adc1Str = values[index++];\n                    if (!adc1Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));\n                    }\n                }\n                if (index < values.length) { // ADC 2\n                    String adc2Str = values[index++];\n                    if (!adc2Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));\n                    }\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) { // Status\n                    String statusStr = values[index++];\n                    if (!statusStr.isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));\n                    }\n                }\n                if (index < values.length) { // IO\n                    String ioStr = values[index++];\n                    if (!ioStr.isEmpty()) {\n                        int io = Integer.parseInt(ioStr, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                String geofencePart1 = \"\";\n                if (index < values.length) {\n                    geofencePart1 = values[index++];\n                }\n                String geofencePart2 = \"\";\n                if (index < values.length) {\n                    geofencePart2 = values[index++];\n                }\n                position.set(Position.KEY_GEOFENCE, geofencePart1 + geofencePart2); // Sets \"\" if parts are empty or missing\n\n                if (index < values.length) { // Event Status\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) { // Packet Type\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    String sensorIndexStr = null;\n                    if (index < values.length) {\n                        sensorIndexStr = values[index++];\n                    } else { break; }\n\n                    String dataTypeStr = null;\n                    if (index < values.length) {\n                        dataTypeStr = values[index++];\n                    } else { break; }\n\n                    if (sensorIndexStr.isEmpty() || dataTypeStr.isEmpty()) {\n                        continue; // Skip malformed entry\n                    }\n                    \n                    int sensorIndexVal;\n                    int dataTypeVal;\n                    try {\n                        sensorIndexVal = Integer.parseInt(sensorIndexStr);\n                        dataTypeVal = Integer.parseInt(dataTypeStr);\n                    } catch (NumberFormatException e) {\n                        continue; // Skip if sensorIndex or dataType is not a number\n                    }\n\n                    if (dataTypeVal == 0) { // Driver ID\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        } else { break; }\n                    } else if (dataTypeVal == 1) { // Temperature\n                        if (index < values.length) { // Serial number\n                            index++; // Skip temperature sensor serial number\n                        } else { break; }\n\n                        if (index < values.length) { // Temperature value\n                            String tempStr = values[index++];\n                            if (!tempStr.isEmpty()) {\n                                try {\n                                   position.set(Position.PREFIX_TEMP + sensorIndexVal, Double.parseDouble(tempStr));\n                                } catch (NumberFormatException e) { /* ignore */ }\n                            }\n                        } else { break; }\n                    } else {\n                        // Unknown data type, break to avoid misinterpreting subsequent fields\n                        break;\n                    }\n                }\n                break;\n            default:\n                // Unknown fragment type, do nothing\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}