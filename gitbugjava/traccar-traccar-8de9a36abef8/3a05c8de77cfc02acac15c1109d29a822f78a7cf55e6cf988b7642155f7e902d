{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    if (dataIndex < 0) {\n        return;\n    }\n\n    // If nothing follows the colon, we use an empty array.\n    String[] values = (fragment.length() == dataIndex + 1) ? new String[0]\n            : fragment.substring(dataIndex + 1).split(\";\");\n    String type = fragment.substring(0, dataIndex);\n\n    switch (type) {\n        case \"GPS\": {\n            // Some messages (e.g. GS02) include a fix time as the first field.\n            if (values.length > 0 && values[0].matches(\"\\\\d{6}\")) {\n                // GS02 format: fix time;validity;lat;lon;speed;course;date;[optional altitude,hdop,vdop]\n                int idx = 0;\n                // Skip fix time (HHMMSS)\n                idx++;\n                if (idx < values.length) {\n                    position.setValid(values[idx].equals(\"A\"));\n                }\n                idx++;\n                if (idx < values.length) {\n                    String latStr = values[idx++];\n                    if (latStr.length() > 1) {\n                        double lat = Double.parseDouble(latStr.substring(1));\n                        if (latStr.charAt(0) == 'S') {\n                            lat = -lat;\n                        }\n                        position.setLatitude(lat);\n                    }\n                }\n                if (idx < values.length) {\n                    String lonStr = values[idx++];\n                    if (lonStr.length() > 1) {\n                        double lon = Double.parseDouble(lonStr.substring(1));\n                        if (lonStr.charAt(0) == 'W') {\n                            lon = -lon;\n                        }\n                        position.setLongitude(lon);\n                    }\n                }\n                if (idx < values.length) {\n                    String speed = values[idx++];\n                    if (!speed.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n                    }\n                }\n                if (idx < values.length) {\n                    String course = values[idx++];\n                    if (!course.isEmpty()) {\n                        position.setCourse(Integer.parseInt(course));\n                    }\n                }\n                // Optionally, process altitude, hdop, vdop if available.\n                if (idx < values.length && !values[idx].isEmpty()) {\n                    position.setAltitude(Integer.parseInt(values[idx]));\n                    idx++;\n                } else if (idx < values.length) {\n                    idx++;\n                }\n                if (idx < values.length && !values[idx].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[idx]));\n                    idx++;\n                } else if (idx < values.length) {\n                    idx++;\n                }\n                if (idx < values.length && !values[idx].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[idx]));\n                }\n            } else {\n                // Otherwise, assume the standard (GS06/GS16) format:\n                // valid;satellites;lat;lon;speed;course;[altitude;hdop;vdop]\n                int idx = 0;\n                if (idx < values.length) {\n                    position.setValid(values[idx].equals(\"A\"));\n                }\n                idx++;\n                if (idx < values.length && !values[idx].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[idx]));\n                }\n                idx++;\n                if (idx < values.length) {\n                    String latStr = values[idx++];\n                    if (latStr.length() > 1) {\n                        double lat = Double.parseDouble(latStr.substring(1));\n                        if (latStr.charAt(0) == 'S') {\n                            lat = -lat;\n                        }\n                        position.setLatitude(lat);\n                    }\n                }\n                if (idx < values.length) {\n                    String lonStr = values[idx++];\n                    if (lonStr.length() > 1) {\n                        double lon = Double.parseDouble(lonStr.substring(1));\n                        if (lonStr.charAt(0) == 'W') {\n                            lon = -lon;\n                        }\n                        position.setLongitude(lon);\n                    }\n                }\n                if (idx < values.length) {\n                    String speed = values[idx++];\n                    if (!speed.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n                    }\n                }\n                if (idx < values.length) {\n                    String course = values[idx++];\n                    if (!course.isEmpty()) {\n                        position.setCourse(Integer.parseInt(course));\n                    }\n                }\n                if (idx < values.length) {\n                    String alt = values[idx++];\n                    if (!alt.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(alt));\n                    }\n                }\n                if (idx < values.length) {\n                    String hdop = values[idx++];\n                    if (!hdop.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                    }\n                }\n                if (idx < values.length) {\n                    String vdop = values[idx++];\n                    if (!vdop.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                    }\n                }\n            }\n            break;\n        }\n        case \"GSM\": {\n            int idx = 0;\n            // Skip two fields: registration status and signal strength.\n            idx++; \n            idx++;\n            int mcc = Integer.parseInt(values[idx++]);\n            int mnc = Integer.parseInt(values[idx++]);\n            int lac = Integer.parseInt(values[idx++], 16);\n            int cid = Integer.parseInt(values[idx++], 16);\n            int signal = Integer.parseInt(values[idx++]);\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, signal)));\n            break;\n        }\n        case \"COT\": {\n            int idx = 0;\n            if (idx < values.length) {\n                String odo = values[idx++];\n                if (!odo.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));\n                }\n            }\n            if (idx < values.length) {\n                String hrs = values[idx++];\n                if (!hrs.isEmpty()) {\n                    String[] parts = hrs.split(\"-\");\n                    int h = parts.length > 0 && !parts[0].isEmpty() ? Integer.parseInt(parts[0]) : 0;\n                    int m = parts.length > 1 && !parts[1].isEmpty() ? Integer.parseInt(parts[1]) : 0;\n                    int s = parts.length > 2 && !parts[2].isEmpty() ? Integer.parseInt(parts[2]) : 0;\n                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n                }\n            }\n            break;\n        }\n        case \"ADC\": {\n            int idx = 0;\n            if (idx < values.length && !values[idx].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[idx]));\n            }\n            idx++;\n            if (idx < values.length && !values[idx].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[idx]));\n            }\n            idx++;\n            if (idx < values.length && !values[idx].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[idx]));\n            }\n            idx++;\n            if (idx < values.length && !values[idx].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[idx]));\n            }\n            break;\n        }\n        case \"DTT\": {\n            int idx = 0;\n            if (idx < values.length && !values[idx].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[idx], 16));\n            }\n            idx++;\n            if (idx < values.length && !values[idx].isEmpty()) {\n                int io = Integer.parseInt(values[idx], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            idx++;\n            if (idx + 1 < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[idx] + values[idx + 1]);\n            }\n            idx += 2;\n            if (idx < values.length) {\n                position.set(\"eventStatus\", values[idx]);\n                idx++;\n            }\n            if (idx < values.length) {\n                position.set(\"packetType\", values[idx]);\n                idx++;\n            }\n            break;\n        }\n        case \"ETD\":\n            if (values.length > 0) {\n                position.set(\"eventData\", values[0]);\n            }\n            break;\n        case \"OBD\":\n            if (values.length > 0) {\n                position.set(\"obd\", values[0]);\n            }\n            break;\n        case \"TAG\":\n            if (values.length > 0) {\n                position.set(\"tagData\", values[0]);\n            }\n            break;\n        case \"IWD\": {\n            int idx = 0;\n            while (idx < values.length) {\n                if (!values[idx].isEmpty()) {\n                    int sensorIndex = Integer.parseInt(values[idx]);\n                    idx++;\n                    if (idx < values.length && !values[idx].isEmpty()) {\n                        int dataType = Integer.parseInt(values[idx]);\n                        idx++;\n                        if (dataType == 0) {\n                            if (idx < values.length) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, values[idx]);\n                                idx++;\n                            }\n                        } else if (dataType == 1) {\n                            idx++; // skip temperature sensor serial number\n                            if (idx < values.length && !values[idx].isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[idx]));\n                            }\n                            idx++;\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n            break;\n        }\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}