{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n        int dataIndex = fragment.indexOf(':');\n        if (dataIndex < 0) {\n            return; // No data part, skip processing\n        }\n\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            String substring = fragment.substring(dataIndex + 1);\n            if (substring.isEmpty()) {\n                values = new String[0];\n            } else {\n                values = substring.split(\";\");\n            }\n        }\n\n        String type = \"\";\n        if (dataIndex >= 0) {\n            type = fragment.substring(0, dataIndex);\n        }\n\n        switch (type) {\n            case \"GPS\":\n                if (values.length == 0 || index >= values.length) break;\n                position.setValid(values[index].equals(\"A\"));\n                index++;\n\n                if (index >= values.length) break;\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n                index++;\n\n                if (index >= values.length) break;\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                index++;\n\n                if (index >= values.length) break;\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                index++;\n\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                }\n                index++;\n\n                if (index < values.length) {\n                    position.setCourse(Integer.parseInt(values[index]));\n                    index++;\n                }\n\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setAltitude(Integer.parseInt(values[index]));\n                    index++;\n                }\n\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                    index++;\n                }\n\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                    index++;\n                }\n                break;\n            case \"GSM\":\n                if (values.length >= 2) {\n                    index += 2; // registration status and signal strength\n                }\n                if (index + 5 <= values.length) {\n                    position.setNetwork(new Network(CellTower.from(\n                            Integer.parseInt(values[index]), Integer.parseInt(values[index + 1]),\n                            Integer.parseInt(values[index + 2], 16), Integer.parseInt(values[index + 3], 16),\n                            Integer.parseInt(values[index + 4]))));\n                    index += 5;\n                }\n                break;\n            case \"COT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    String[] hours = values[index].split(\"-\");\n                    long total = 0;\n                    if (hours.length > 0 && !hours[0].isEmpty()) {\n                        total += Integer.parseInt(hours[0]) * 3600;\n                    }\n                    if (hours.length > 1 && !hours[1].isEmpty()) {\n                        total += Integer.parseInt(hours[1]) * 60;\n                    }\n                    if (hours.length > 2 && !hours[2].isEmpty()) {\n                        total += Integer.parseInt(hours[2]);\n                    }\n                    position.set(Position.KEY_HOURS, total * 1000);\n                    index++;\n                }\n                break;\n            case \"ADC\":\n                while (index < values.length) {\n                    if (values[index].isEmpty()) {\n                        index++;\n                        continue;\n                    }\n                    if (index == 0) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n                    } else if (index == 1) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n                    } else {\n                        position.set(Position.PREFIX_ADC + (index - 1), Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n                break;\n            case \"DTT\":\n                if (values.length > index && !values[index].isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n                    index++;\n                }\n                if (values.length > index && !values[index].isEmpty()) {\n                    int io = Integer.parseInt(values[index], 16);\n                    index++;\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                if (index < values.length && values[index] != null) {\n                    position.set(Position.KEY_GEOFENCE, values[index++] + (index < values.length ? values[index++] : \"\"));\n                }\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    if (values[index].isEmpty()) {\n                        index++;\n                        continue;\n                    }\n                    int sensorIndex;\n                    try {\n                        sensorIndex = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        break;\n                    }\n                    if (index >= values.length) break;\n\n                    int dataType;\n                    try {\n                        dataType = Integer.parseInt(values[index++]);\n                    } catch (NumberFormatException e) {\n                        break;\n                    }\n                    if (dataType == 0) {\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        }\n                    } else if (dataType == 1) {\n                        if (index < values.length) {\n                            index++; // skip temperature sensor serial number\n                        }\n                        if (index < values.length) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}