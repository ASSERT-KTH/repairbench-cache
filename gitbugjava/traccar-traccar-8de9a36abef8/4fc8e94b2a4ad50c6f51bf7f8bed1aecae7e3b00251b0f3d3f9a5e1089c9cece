{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        if (dataIndex < 0 || dataIndex == fragment.length() - 1) {\n             // Handle cases like \"COT:\" or fragments without ':' or only ':'\n            return; // Or log error, depending on desired behavior\n        }\n\n        int index = 0;\n        String[] values = fragment.substring(dataIndex + 1).split(\";\", -1); // Use -1 limit to keep trailing empty strings\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                if (index < values.length) {\n                    position.setValid(values[index].equals(\"A\"));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n                }\n                index++;\n                if (index < values.length && values[index].length() > 1) {\n                    position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                    if (values[index].charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                }\n                index++;\n                if (index < values.length && values[index].length() > 1) {\n                    position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                    if (values[index].charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                }\n                index++;\n                String speedValue = index < values.length ? values[index] : null;\n                index++;\n                if (speedValue != null && !speedValue.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedValue)));\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setCourse(Double.parseDouble(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                     // Allow double for altitude as some devices might report fractional altitude\n                    position.setAltitude(Double.parseDouble(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                }\n                index++;\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;\n                if (index < values.length && !values[index].isEmpty()) {\n                    try { mcc = Integer.parseInt(values[index]); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                     try { mnc = Integer.parseInt(values[index]); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    try { lac = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    try { cid = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    try { rssi = Integer.parseInt(values[index]); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (mcc != null && mnc != null) { // Require at least MCC and MNC\n                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                }\n                break;\n            case \"COT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    try { position.set(Position.KEY_ODOMETER, Long.parseLong(values[index])); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    String[] hours = values[index].split(\"-\");\n                    if (hours.length > 0 && !hours[0].isEmpty()) { // Check if first part exists and is not empty\n                        try {\n                            position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600L // Use long literal\n                                    + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) * 60 : 0)\n                                    + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                        } catch (NumberFormatException e) {\n                            // Ignore invalid hours format\n                        }\n                    }\n                }\n                index++;\n                break;\n            case \"ADC\":\n                if (index < values.length && !values[index].isEmpty()) {\n                     try { position.set(Position.KEY_POWER, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                     try { position.set(Position.KEY_BATTERY, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                     try { position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                     try { position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}\n                }\n                index++;\n                break;\n            case \"DTT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                     try { position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16)); } catch (NumberFormatException e) {}\n                }\n                index++;\n                String ioValue = index < values.length ? values[index] : null;\n                index++;\n                if (ioValue != null && !ioValue.isEmpty()) {\n                    try {\n                        int io = Integer.parseInt(ioValue, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    } catch (NumberFormatException e) {}\n                }\n                String geofence1 = index < values.length ? values[index] : \"\";\n                index++;\n                String geofence2 = index < values.length ? values[index] : \"\";\n                index++;\n                position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);\n\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index]);\n                }\n                index++;\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index]);\n                }\n                index++;\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index]);\n                }\n                index++;\n                break;\n            case \"OBD\":\n                 if (index < values.length) {\n                    position.set(\"obd\", values[index]);\n                }\n                index++;\n                break;\n            case \"TAG\":\n                 if (index < values.length) {\n                    position.set(\"tagData\", values[index]);\n                }\n                index++;\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    Integer sensorIndex = null;\n                    Integer dataType = null;\n\n                    if (!values[index].isEmpty()) {\n                        try { sensorIndex = Integer.parseInt(values[index]); } catch (NumberFormatException e) { break; }\n                    }\n                    index++;\n\n                    if (index < values.length && !values[index].isEmpty()) {\n                        try { dataType = Integer.parseInt(values[index]); } catch (NumberFormatException e) { break; }\n                    } else if (index >= values.length) {\n                         break; // Not enough fields left for data type\n                    }\n                    index++;\n\n                    if (sensorIndex == null || dataType == null) {\n                       // If index or type is missing/invalid, skip potential value field and try next entry? Or break?\n                       // Let's break, as the structure seems compromised.\n                       break;\n                    }\n\n                    if (dataType == 0) { // Driver ID\n                        if (index < values.length) { // Value field exists\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                            index++; // Consume value field\n                        } else {\n                            break; // Not enough fields left\n                        }\n                    } else if (dataType == 1) { // Temperature\n                        index += 1; // Skip temperature sensor serial number field\n                        if (index < values.length && !values[index].isEmpty()) { // Temperature value field exists and is not empty\n                            try {\n                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                            } catch (NumberFormatException e) { /* ignore invalid temperature */ }\n                            index++; // Consume temperature value field\n                        } else if (index < values.length) {\n                             index++; // Consume empty temperature value field\n                        } else {\n                            break; // Not enough fields left\n                        }\n                    } else {\n                        // Unknown data type, assume it consumes one value field\n                        if (index < values.length) {\n                            index++;\n                        } else {\n                            break; // Not enough fields left\n                        }\n                    }\n                }\n                break;\n            default:\n                // Unknown fragment type, ignore\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}