{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1 || dataIndex == -1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex != -1 ? dataIndex : fragment.length())) {\n        case \"GPS\":\n            // Defensive: check we have enough elements before each access\n            if (index < values.length) {\n                position.setValid(values[index++].equals(\"A\"));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else if (index < values.length) {\n                index++; // skip\n            }\n            // Latitude\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                index++;\n            } else if (index < values.length) {\n                index++;\n            }\n            // Longitude\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                index++;\n            } else if (index < values.length) {\n                index++;\n            }\n            // Speed\n            if (index < values.length && !values[index].isEmpty()) {\n                double speed = 0.0;\n                try {\n                    speed = Double.parseDouble(values[index]);\n                } catch (NumberFormatException e) {\n                    try {\n                        speed = Integer.parseInt(values[index]);\n                    } catch (NumberFormatException ignored) {}\n                }\n                position.setSpeed(UnitsConverter.knotsFromKph(speed));\n                index++;\n            } else if (index < values.length) {\n                index++;\n            }\n            // Course\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setCourse(Double.parseDouble(values[index]));\n                } catch (NumberFormatException e) {\n                    try {\n                        position.setCourse(Integer.parseInt(values[index]));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n            index++;\n            // Altitude (optional)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    try {\n                        position.setAltitude(Integer.parseInt(values[index++]));\n                    } catch (NumberFormatException ignored) {\n                        index++;\n                    }\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            // HDOP (optional)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            // VDOP (optional)\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            break;\n        case \"GSM\":\n            // skip registration status and signal strength\n            index += 2;\n            // Defensive: check there are at least 5 values left (for a full cell tower)\n            if (values.length - index >= 5) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int t = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) {\n                    t += Integer.parseInt(hours[0]) * 3600;\n                }\n                if (hours.length > 1 && !hours[1].isEmpty()) {\n                    t += Integer.parseInt(hours[1]) * 60;\n                }\n                if (hours.length > 2 && !hours[2].isEmpty()) {\n                    t += Integer.parseInt(hours[2]);\n                }\n                position.set(Position.KEY_HOURS, t * 1000);\n                index++;\n            } else if (index < values.length) {\n                index++;\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = 0;\n                try {\n                    io = Integer.parseInt(values[index], 16);\n                } catch (NumberFormatException ignored) {}\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            if (index + 1 < values.length) { // Geofence can be two elements\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            } else if (index < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                // Defensive: each sensor block should at least have 2 elements (index + dataType)\n                if (index + 1 >= values.length) {\n                    break;\n                }\n                int sensorIndex = 0;\n                int dataType = 0;\n                try {\n                    sensorIndex = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    index++; // skip unusable data\n                    continue;\n                }\n                try {\n                    dataType = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    // skip unusable data\n                    continue;\n                }\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    // skip temperature sensor serial number, but only if present\n                    if (index < values.length) {\n                        index++;\n                    }\n                    if (index < values.length && !values[index].isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        } catch (NumberFormatException e) {\n                            index++;\n                        }\n                    } else if (index < values.length) {\n                        index++;\n                    }\n                } else {\n                    // in case there are more types in the future, skip their params (could attempt to infer count based on further spec, for now skip one)\n                    if (index < values.length) {\n                        index++;\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}