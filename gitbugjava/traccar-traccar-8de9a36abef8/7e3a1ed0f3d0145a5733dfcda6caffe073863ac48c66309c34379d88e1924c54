{
    "generation": "import org.traccar.helper.BitUtil;\nimport org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\nimport org.traccar.helper.UnitsConverter;\n\n    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) { // If fragment is \"TYPE:\"\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                // Valid flag (e.g., A or V). Assuming it's always present if GPS fragment exists.\n                if (index < values.length) {\n                    position.setValid(values[index++].equals(\"A\"));\n                } else {\n                    index++; // Consume expected field, even if missing\n                }\n\n                // Satellites\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++; // Consume malformed field\n                    }\n                } else {\n                    index++; // Consume missing/empty field\n                }\n\n                // Latitude\n                if (index < values.length) {\n                    String latitudeValue = values[index++]; // Get value and increment index once\n                    if (!latitudeValue.isEmpty()) {\n                        try {\n                            position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));\n                            if (latitudeValue.charAt(0) == 'S') {\n                                position.setLatitude(-position.getLatitude());\n                            }\n                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {\n                            // Malformed latitude value (e.g., \"\", \"N\", \"Nabc\"), consume and move on\n                        }\n                    }\n                } else {\n                    index++; // Consume missing field\n                }\n\n                // Longitude\n                if (index < values.length) {\n                    String longitudeValue = values[index++]; // Get value and increment index once\n                    if (!longitudeValue.isEmpty()) {\n                        try {\n                            position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));\n                            if (longitudeValue.charAt(0) == 'W') {\n                                position.setLongitude(-position.getLongitude());\n                            }\n                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {\n                            // Malformed longitude value, consume and move on\n                        }\n                    }\n                } else {\n                    index++; // Consume missing field\n                }\n\n                // Speed\n                if (index < values.length) {\n                    String speedString = values[index++]; // Get value and increment index\n                    if (!speedString.isEmpty()) {\n                        try {\n                            position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedString)));\n                        } catch (NumberFormatException e) {\n                            // Malformed speed value, consume and move on\n                        }\n                    }\n                } else {\n                    index++; // Consume missing field\n                }\n\n                // Course\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.setCourse(Integer.parseInt(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++; // Consume malformed field\n                    }\n                } else {\n                    index++; // Consume missing/empty field\n                }\n\n                // Altitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.setAltitude(Integer.parseInt(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++; // Consume malformed field\n                    }\n                } else {\n                    index++; // Consume missing/empty field\n                }\n\n                // HDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++; // Consume malformed field\n                    }\n                } else {\n                    index++; // Consume missing/empty field\n                }\n\n                // VDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++; // Consume malformed field\n                    }\n                } else {\n                    index++; // Consume missing/empty field\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status (skip)\n                index += 1; // signal strength (skip)\n                int gsmStartIndex = index; // Store index before parsing GSM details\n                // Ensure there are at least 5 values needed for CellTower.from\n                if (index + 4 < values.length) {\n                    try {\n                        position.setNetwork(new Network(CellTower.from(\n                                Integer.parseInt(values[index++]), // MCC\n                                Integer.parseInt(values[index++]), // MNC\n                                Integer.parseInt(values[index++], 16), // LAC (hex)\n                                Integer.parseInt(values[index++], 16), // CID (hex)\n                                Integer.parseInt(values[index++])))); // PSC\n                    } catch (NumberFormatException e) {\n                        // If any parsing fails, ensure index advances past all 5 expected fields for GSM\n                        index = gsmStartIndex + 5;\n                    }\n                } else {\n                    // If not enough values, ensure index advances past all 5 expected fields\n                    index = gsmStartIndex + 5;\n                }\n                break;\n            case \"COT\":\n                // Odometer\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++; // Consume malformed field\n                    }\n                } else {\n                    index++; // Consume missing/empty field\n                }\n                // Hours (e.g., \"1-2-3\" for 1 hour, 2 minutes, 3 seconds)\n                if (index < values.length) {\n                    String hoursValue = values[index++]; // Get value and increment index\n                    if (!hoursValue.isEmpty()) {\n                        String[] hours = hoursValue.split(\"-\");\n                        long totalSeconds = 0;\n                        try {\n                            if (hours.length > 0 && !hours[0].isEmpty()) {\n                                totalSeconds += Long.parseLong(hours[0]) * 3600L; // Use Long.parseLong to avoid overflow\n                            }\n                            if (hours.length > 1 && !hours[1].isEmpty()) {\n                                totalSeconds += Long.parseLong(hours[1]) * 60L;\n                            }\n                            if (hours.length > 2 && !hours[2].isEmpty()) {\n                                totalSeconds += Long.parseLong(hours[2]);\n                            }\n                            position.set(Position.KEY_HOURS, totalSeconds * 1000L);\n                        } catch (NumberFormatException e) {\n                            // Malformed hours string (e.g., \"abc-d-e\"), consume and move on\n                        }\n                    }\n                } else {\n                    index++; // Consume missing field\n                }\n                break;\n            case \"ADC\":\n                // Power\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++;\n                    }\n                } else {\n                    index++;\n                }\n                // Battery\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++;\n                    }\n                } else {\n                    index++;\n                }\n                // ADC1\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++;\n                    }\n                } else {\n                    index++;\n                }\n                // ADC2\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                    } catch (NumberFormatException e) {\n                        index++;\n                    }\n                } else {\n                    index++;\n                }\n                break;\n            case \"DTT\":\n                // KEY_STATUS\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                    } catch (NumberFormatException e) {\n                        index++;\n                    }\n                } else {\n                    index++;\n                }\n\n                // io (ignition and other inputs/outputs)\n                if (index < values.length) {\n                    String ioString = values[index++];\n                    if (!ioString.isEmpty()) {\n                        try {\n                            int io = Integer.parseInt(ioString, 16);\n                            position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                            position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                            position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                            position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                            position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                            position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                            position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                            position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                        } catch (NumberFormatException e) {\n                            // Malformed io string, consume and move on\n                        }\n                    }\n                } else {\n                    index++;\n                }\n\n                // geofence (two values concatenated)\n                if (index + 1 < values.length) {\n                    position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                } else if (index < values.length) { // Only one value present\n                    position.set(Position.KEY_GEOFENCE, values[index++]);\n                    index++; // Consume the second (missing) slot\n                } else { // Both missing\n                    index += 2; // Consume both missing slots\n                }\n\n                // eventStatus\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                } else {\n                    index++;\n                }\n\n                // packetType\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                } else {\n                    index++;\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                } else {\n                    index++;\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                } else {\n                    index++;\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                } else {\n                    index++;\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    // sensorIndex\n                    if (index < values.length && !values[index].isEmpty()) {\n                        int sensorIndex;\n                        try {\n                            sensorIndex = Integer.parseInt(values[index++]);\n                        } catch (NumberFormatException e) {\n                            // Malformed sensorIndex, try to skip this full block (e.g., sensorIndex, dataType, value(s))\n                            // A block is typically sensorIndex, dataType, then 1 or 2 more values.\n                            // Heuristically advance index past remaining fields of this block to attempt next.\n                            index++; // Advance past the current malformed field\n                            if (index < values.length) index++; // Advance past next expected field (dataType)\n                            if (index < values.length) index++; // Advance past next expected field (value)\n                            continue; // Try next IWD block\n                        }\n\n                        // dataType\n                        if (index < values.length && !values[index].isEmpty()) {\n                            int dataType;\n                            try {\n                                dataType = Integer.parseInt(values[index++]);\n                            } catch (NumberFormatException e) {\n                                // Malformed dataType, try to skip this block\n                                index++; // Advance past the current malformed field\n                                if (index < values.length) index++; // Advance past next expected field (value)\n                                continue;\n                            }\n\n                            if (dataType == 0) { // KEY_DRIVER_UNIQUE_ID\n                                // Driver ID\n                                if (index < values.length) {\n                                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                                } else {\n                                    index++; // Consume missing field\n                                }\n                            } else if (dataType == 1) { // Temperature sensor\n                                // Temperature sensor serial number\n                                if (index < values.length) {\n                                    index++; // Consume serial number string\n                                } else {\n                                    index++; // Consume missing field\n                                }\n                                // Temperature value\n                                if (index < values.length && !values[index].isEmpty()) {\n                                    try {\n                                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                                    } catch (NumberFormatException e) {\n                                        index++; // Consume malformed field\n                                    }\n                                } else {\n                                    index++; // Consume missing/empty field\n                                }\n                            } else {\n                                // Unknown data type, assume it consumes one more field.\n                                if (index < values.length) {\n                                    index++;\n                                } else {\n                                    index++;\n                                }\n                            }\n                        } else { // dataType is missing or empty\n                            index++; // Consume missing/empty dataType\n                            // If dataType is missing, we don't know the structure, so skip a \"value\" field as heuristic\n                            if (index < values.length) {\n                                index++; // Consume potential value field\n                            } else {\n                                index++; // Consume missing value field\n                            }\n                        }\n                    } else { // sensorIndex is missing or empty. This implies end of IWD data or malformed block start.\n                        index++; // consume missing/empty sensor index\n                        break; // Stop processing IWD fragment\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}