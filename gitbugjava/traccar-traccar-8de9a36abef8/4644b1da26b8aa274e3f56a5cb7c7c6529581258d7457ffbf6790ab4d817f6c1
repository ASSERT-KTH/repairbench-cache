{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                position.setValid(values[index++].equals(\"A\"));\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 0) {\n                    String latStr = values[index];\n                    double latitude = Double.parseDouble(latStr.substring(1));\n                    position.setLatitude(latitude);\n                    if (latStr.charAt(0) == 'S') {\n                        position.setLatitude(-latitude);\n                    }\n                    index++;\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 0) {\n                    String lonStr = values[index];\n                    double longitude = Double.parseDouble(lonStr.substring(1));\n                    position.setLongitude(longitude);\n                    if (lonStr.charAt(0) == 'W') {\n                        position.setLongitude(-longitude);\n                    }\n                    index++;\n                } else {\n                    index++;\n                }\n                if (index < values.length) {\n                    String speedValue = values[index++];\n                    if (!speedValue.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));\n                    }\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setCourse(Integer.parseInt(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setAltitude(Integer.parseInt(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;\n                if (index < values.length && !values[index].isEmpty()) {\n                    mcc = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    mnc = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    lac = Integer.parseInt(values[index++], 16);\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    cid = Integer.parseInt(values[index++], 16);\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    rssi = Integer.parseInt(values[index++]);\n                } else {\n                    index++;\n                }\n                if (mcc != null && mnc != null && lac != null && cid != null && rssi != null) {\n                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                }\n                break;\n            case \"COT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    String[] hours = values[index].split(\"-\");\n                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                    index++;\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                } else {\n                    index++;\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    String ioValue = values[index++];\n                    if (!ioValue.isEmpty()) {\n                        int io = Integer.parseInt(ioValue, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                if (index < values.length) {\n                    String geofence = values[index++];\n                    if (index < values.length) {\n                        geofence += values[index++];\n                    }\n                    position.set(Position.KEY_GEOFENCE, geofence);\n                } else {\n                    index += 2;\n                }\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    if (index >= values.length) break;\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    if (index >= values.length) break;\n                    int dataType = Integer.parseInt(values[index++]);\n                    if (dataType == 0) {\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        }\n                    } else if (dataType == 1) {\n                        index += 1; // temperature sensor serial number\n                        if (index < values.length && !values[index].isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        } else {\n                            index++;\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}