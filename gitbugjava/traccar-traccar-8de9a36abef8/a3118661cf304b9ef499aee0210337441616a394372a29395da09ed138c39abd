{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (dataIndex == -1 || fragment.length() == dataIndex + 1) { // handle missing colon or empty data part\n            values = new String[0];\n        } else {\n            // Use limit -1 to preserve trailing empty strings\n            values = fragment.substring(dataIndex + 1).split(\";\", -1);\n        }\n\n        switch (fragment.substring(0, dataIndex > -1 ? dataIndex : fragment.length())) {\n            case \"GPS\":\n                if (index < values.length) { // Validity\n                    position.setValid(values[index++].equals(\"A\"));\n                }\n                if (index < values.length) { // Satellites\n                    String satellitesStr = values[index++];\n                    if (!satellitesStr.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesStr));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error if necessary\n                        }\n                    }\n                }\n\n                if (index < values.length) { // Latitude\n                    String latValue = values[index++];\n                    if (!latValue.isEmpty() && latValue.length() > 1) { // Ensure charAt(0) and substring(1) are safe\n                        try {\n                            position.setLatitude(Double.parseDouble(latValue.substring(1)));\n                            if (latValue.charAt(0) == 'S') {\n                                position.setLatitude(-position.getLatitude());\n                            }\n                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                if (index < values.length) { // Longitude\n                    String lonValue = values[index++];\n                    if (!lonValue.isEmpty() && lonValue.length() > 1) { // Ensure charAt(0) and substring(1) are safe\n                        try {\n                            position.setLongitude(Double.parseDouble(lonValue.substring(1)));\n                            if (lonValue.charAt(0) == 'W') {\n                                position.setLongitude(-position.getLongitude());\n                            }\n                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n\n                if (index < values.length) { // Speed\n                    String speedStr = values[index++];\n                    if (!speedStr.isEmpty()) {\n                        try {\n                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedStr)));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                if (index < values.length) { // Course\n                    String courseStr = values[index++];\n                    if (!courseStr.isEmpty()) {\n                        try {\n                            position.setCourse(Double.parseDouble(courseStr));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                if (index < values.length) { // Altitude\n                    String altitudeStr = values[index++];\n                    if (!altitudeStr.isEmpty()) {\n                        try {\n                            position.setAltitude(Double.parseDouble(altitudeStr));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                if (index < values.length) { // HDOP\n                    String hdopStr = values[index++];\n                    if (!hdopStr.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                if (index < values.length) { // VDOP\n                    String vdopStr = values[index++];\n                    if (!vdopStr.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                        } catch (NumberFormatException e) {\n                            // Log or handle error\n                        }\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength (first one, often skipped)\n\n                // Check if all required cell tower fields are present\n                if (index + 4 < values.length) {\n                    String mcc = values[index];\n                    String mnc = values[index + 1];\n                    String lac = values[index + 2];\n                    String cid = values[index + 3];\n                    String sig = values[index + 4];\n\n                    // Check if all parts are non-empty before parsing\n                    if (!mcc.isEmpty() && !mnc.isEmpty() && !lac.isEmpty() && !cid.isEmpty() && !sig.isEmpty()) {\n                        try {\n                            position.setNetwork(new Network(CellTower.from(\n                                    Integer.parseInt(mcc), Integer.parseInt(mnc),\n                                    Integer.parseInt(lac, 16), Integer.parseInt(cid, 16),\n                                    Integer.parseInt(sig))));\n                        } catch (NumberFormatException e) {\n                             // Log or handle error\n                        }\n                    }\n                    index += 5; // Advance index past these 5 fields\n                } else {\n                    // Not enough fields for a full cell tower, advance index past what's there\n                    index = values.length;\n                }\n                break;\n            case \"COT\":\n                if (index < values.length) { // Odometer\n                    String odometerStr = values[index++];\n                    if (!odometerStr.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_ODOMETER, Long.parseLong(odometerStr));\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                if (index < values.length) { // Hours\n                    String hoursValueStr = values[index++];\n                    if (!hoursValueStr.isEmpty()) {\n                        String[] hoursParts = hoursValueStr.split(\"-\");\n                        long totalMillis = 0;\n                        boolean hasData = false;\n                        try {\n                            if (hoursParts.length > 0 && !hoursParts[0].isEmpty()) {\n                                totalMillis += Long.parseLong(hoursParts[0]) * 3600 * 1000L;\n                                hasData = true;\n                            }\n                            if (hoursParts.length > 1 && !hoursParts[1].isEmpty()) {\n                                totalMillis += Long.parseLong(hoursParts[1]) * 60 * 1000L;\n                                hasData = true;\n                            }\n                            if (hoursParts.length > 2 && !hoursParts[2].isEmpty()) {\n                                totalMillis += Long.parseLong(hoursParts[2]) * 1000L;\n                                hasData = true;\n                            }\n                            if (hasData) {\n                                position.set(Position.KEY_HOURS, totalMillis);\n                            }\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) { // Power\n                    String powerStr = values[index++];\n                    if (!powerStr.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                if (index < values.length) { // Battery\n                    String batteryStr = values[index++];\n                    if (!batteryStr.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                if (index < values.length) { // ADC1\n                    String adc1Str = values[index++];\n                    if (!adc1Str.isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                if (index < values.length) { // ADC2\n                    String adc2Str = values[index++];\n                    if (!adc2Str.isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) { // Status\n                    String statusStr = values[index++];\n                    if (!statusStr.isEmpty()) {\n                        try {\n                            position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                if (index < values.length) { // IO\n                    String ioStr = values[index++];\n                    if (!ioStr.isEmpty()) {\n                        try {\n                            int io = Integer.parseInt(ioStr, 16);\n                            position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                            position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                            position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                            position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                            position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                            position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                            position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                            position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                        } catch (NumberFormatException e) { /*Log or handle*/ }\n                    }\n                }\n                if (index + 1 < values.length) { // Geofence needs two parts\n                     position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                } else {\n                    // Consume remaining fields if any, to prevent incorrect parsing by subsequent parts\n                    if (index < values.length) { index++; }\n                    if (index < values.length) { index++; }\n                }\n\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    if (index + 1 >= values.length) { // Need sensorIndex and dataType strings\n                        break;\n                    }\n                    String sensorIndexStr = values[index++];\n                    String dataTypeStr = values[index++];\n\n                    if (sensorIndexStr.isEmpty() || dataTypeStr.isEmpty()) {\n                        break; // Essential info missing for this IWD entry\n                    }\n                    \n                    try {\n                        int sensorIndexVal = Integer.parseInt(sensorIndexStr);\n                        int dataTypeVal = Integer.parseInt(dataTypeStr);\n\n                        if (dataTypeVal == 0) { // Driver ID\n                            if (index < values.length) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                            } else { break; } // Data ended prematurely\n                        } else if (dataTypeVal == 1) { // Temperature\n                            if (index < values.length) { // Skip temperature sensor serial number\n                                index++;\n                            } else { break; } // Data ended prematurely\n\n                            if (index < values.length) { // Temperature value\n                                String tempStr = values[index++];\n                                if (!tempStr.isEmpty()) {\n                                    position.set(Position.PREFIX_TEMP + sensorIndexVal, Double.parseDouble(tempStr));\n                                }\n                            } else { break; } // Data ended prematurely\n                        }\n                        // else: unknown dataType, loop continues to parse next IWD entry if any.\n                    } catch (NumberFormatException e) {\n                        // Malformed number for sensorIndex or dataType or temperature, stop IWD processing.\n                        break;\n                    }\n                }\n                break;\n            default:\n                // Log or handle unknown fragment type if necessary\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}