{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1 || dataIndex == -1) {\n        values = new String[]{};\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(index < values.length && values[index].equals(\"A\"));\n            if (index + 1 < values.length && values[index + 1] != null && !values[index + 1].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index + 1]));\n            }\n            if (index + 2 < values.length && values[index + 2] != null && !values[index + 2].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index + 2].substring(1)));\n                if (index + 3 < values.length && values[index + 3] != null && values[index + 3].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            if (index + 4 < values.length && values[index + 4] != null && !values[index + 4].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index + 4].substring(1)));\n                if (index + 5 < values.length && values[index + 5] != null && values[index + 5].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            if (index + 6 < values.length && values[index + 6] != null && !values[index + 6].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index + 6])));\n            }\n            if (index + 7 < values.length && values[index + 7] != null && !values[index + 7].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index + 7]));\n            }\n            if (index + 8 < values.length && values[index + 8] != null && !values[index + 8].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index + 8]));\n            }\n            if (index + 9 < values.length && values[index + 9] != null && !values[index + 9].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index + 9]));\n            }\n            if (index + 10 < values.length && values[index + 10] != null && !values[index + 10].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index + 10]));\n            }\n            break;\n        case \"GSM\":\n            index += 2; // registration status and signal strength\n            if (index < values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++])));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            }\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600 + (hours.length > 1\n                        ? Integer.parseInt(hours[1]) * 60 : 0) + (hours.length > 2\n                        ? Integer.parseInt(hours[2]) : 0)) * 1000);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            }\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index++], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            if (index + 2 < values.length && values[index + 2] != null && values[index + 2].length() > 0) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            }\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length && values[index] != null && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (index + 2 < values.length\n                        && values[index + 1] != null\n                        && values[index + 1].length() > 0\n                        && values[index + 2] != null\n                        && values[index + 2].length() > 0) {\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n                    if (dataType == 0) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1) {\n                        index++;\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    }\n                } else {\n                    break;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}