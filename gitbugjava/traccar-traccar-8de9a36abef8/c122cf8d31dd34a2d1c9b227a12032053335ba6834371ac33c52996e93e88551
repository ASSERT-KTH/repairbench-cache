{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (dataIndex == -1 || fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Parse A/V (valid) flag\n            if (index < values.length) {\n                position.setValid(\"A\".equals(values[index++]));\n            } else {\n                position.setValid(false);\n                index++;\n            }\n\n            // Parse satellites\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n                } catch (NumberFormatException ignored) {}\n            }\n            index++;\n\n            // Parse Latitude\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    String latStr = values[index];\n                    if (latStr.length() > 1) {\n                        double latitude = Double.parseDouble(latStr.substring(1));\n                        position.setLatitude(latitude);\n                    }\n                    if (latStr.charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                } catch (Exception ignored) {}\n            }\n            index++;\n\n            // Parse Longitude\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    String lonStr = values[index];\n                    if (lonStr.length() > 1) {\n                        double longitude = Double.parseDouble(lonStr.substring(1));\n                        position.setLongitude(longitude);\n                    } else {\n                        position.setLongitude(0.0); // default or invalid if empty\n                    }\n                    if (lonStr.charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                } catch (Exception ignored) {}\n            }\n            index++;\n\n            // Parse Speed\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                } catch (NumberFormatException ignored) {}\n            }\n            index++;\n\n            // Parse Course\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setCourse(Integer.parseInt(values[index]));\n                } catch (NumberFormatException ignored) {}\n            }\n            index++;\n\n            // Parse Altitude\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.setAltitude(Integer.parseInt(values[index]));\n                } catch (NumberFormatException ignored) {}\n            }\n            index++;\n\n            // Parse HDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException ignored) {}\n            }\n            index++;\n\n            // Parse VDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                } catch (NumberFormatException ignored) {}\n            }\n            index++;\n            break;\n\n        // ... (other case statements remain unchanged)\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}