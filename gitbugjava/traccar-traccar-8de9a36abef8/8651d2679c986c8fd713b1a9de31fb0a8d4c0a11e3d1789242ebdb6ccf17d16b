{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (dataIndex == -1) {\n        values = new String[0];\n    } else if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    String fragmentType = dataIndex == -1 ? fragment : fragment.substring(0, dataIndex);\n\n    switch (fragmentType) {\n        case \"GPS\":\n            if (values.length >= 5) {\n                position.setValid(values[index++].equals(\"A\"));\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                } else {\n                    index++;\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    String latStr = values[index];\n                    double latitude = Double.parseDouble(latStr.substring(1));\n                    if (latStr.charAt(0) == 'S') {\n                        latitude = -latitude;\n                    }\n                    position.setLatitude(latitude);\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    String lonStr = values[index];\n                    double longitude = Double.parseDouble(lonStr.substring(1));\n                    if (lonStr.charAt(0) == 'W') {\n                        longitude = -longitude;\n                    }\n                    position.setLongitude(longitude);\n                }\n                index++;\n                // speed\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid speed\n                    }\n                }\n                index++;\n                // course\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.setCourse(Double.parseDouble(values[index]));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid course\n                    }\n                }\n                index++;\n                // altitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.setAltitude(Double.parseDouble(values[index]));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid altitude\n                    }\n                }\n                index++;\n                // HDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid HDOP\n                    }\n                }\n                index++;\n                // VDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    try {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                    } catch (NumberFormatException e) {\n                        // ignore invalid VDOP\n                    }\n                }\n            }\n            break;\n        case \"GSM\":\n            // This handles multiple cell towers, gracefully skip on empty fields\n            int gsmIndex = 0;\n            while (gsmIndex + 6 < values.length) {\n                // It's possible that some records are empty, skip those\n                if (!values[gsmIndex + 2].isEmpty() && !values[gsmIndex + 3].isEmpty()\n                        && !values[gsmIndex + 4].isEmpty() && !values[gsmIndex + 5].isEmpty()\n                        && !values[gsmIndex + 6].isEmpty()) {\n                    try {\n                        position.setNetwork(new Network(CellTower.from(\n                                Integer.parseInt(values[gsmIndex + 2]), Integer.parseInt(values[gsmIndex + 3]),\n                                Integer.parseInt(values[gsmIndex + 4], 16), Integer.parseInt(values[gsmIndex + 5], 16),\n                                Integer.parseInt(values[gsmIndex + 6]))));\n                    } catch (NumberFormatException e) {\n                        // Just skip this tower\n                    }\n                }\n                gsmIndex += 7;\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                try {\n                    int h = Integer.parseInt(hours[0]);\n                    int m = hours.length > 1 ? Integer.parseInt(hours[1]) : 0;\n                    int s = hours.length > 2 ? Integer.parseInt(hours[2]) : 0;\n                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000L);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            // ADC channels\n            int adcChannel = 1;\n            while (index < values.length) {\n                if (!values[index].isEmpty()) {\n                    try {\n                        position.set(Position.PREFIX_ADC + adcChannel, Double.parseDouble(values[index]));\n                    } catch (NumberFormatException e) {\n                        // ignore\n                    }\n                }\n                adcChannel++;\n                index++;\n            }\n            break;\n        case \"DTT\":\n            // status\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            // event\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_EVENT, Integer.parseInt(values[index], 16));\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            // digital io\n            int io = -1;\n            if (index < values.length && !values[index].isEmpty()) {\n                try {\n                    io = Integer.parseInt(values[index], 16);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            }\n            index++;\n            if (io != -1) {\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            // geofence\n            StringBuilder geofence = new StringBuilder();\n            for (int i = 0; i < 2 && index < values.length; i++, index++) {\n                if (!values[index].isEmpty()) {\n                    geofence.append(values[index]);\n                }\n            }\n            if (geofence.length() > 0) {\n                position.set(Position.KEY_GEOFENCE, geofence.toString());\n            }\n            // eventStatus\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index]);\n            }\n            index++;\n            // packetType\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                // Protect against incomplete triple/quadruple sets\n                if (index + 1 >= values.length) break;\n                int sensorIndex;\n                int dataType;\n                try {\n                    sensorIndex = Integer.parseInt(values[index++]);\n                    dataType = Integer.parseInt(values[index++]);\n                } catch (NumberFormatException e) {\n                    // Skip past these\n                    continue;\n                }\n                if (dataType == 0) {\n                    // driver id\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else {\n                        index++;\n                    }\n                } else if (dataType == 1) {\n                    // temperature probe\n                    if (index < values.length) index++; // skip serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        try {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        } catch (NumberFormatException e) {\n                            index++;\n                        }\n                    } else {\n                        index++;\n                    }\n                } else {\n                    // unknown type, skip\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}