{
    "generation": "import org.traccar.helper.BitUtil;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.CellTower;\nimport org.traccar.model.Network;\nimport org.traccar.model.Position;\n\npublic class GoSafeProtocolDecoder { // Added class wrapper for context\n\n    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        if (dataIndex == -1 || dataIndex + 1 > fragment.length()) {\n             // Handle invalid fragment format if necessary, or just return\n             return;\n        }\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            // If the part after ':' is empty, values should be empty array\n            values = new String[0];\n        } else {\n            // Use -1 limit for split to keep trailing empty strings\n            values = fragment.substring(dataIndex + 1).split(\";\", -1);\n        }\n\n        // Helper function to safely parse Double\n        Double parseDouble(String s) {\n            try {\n                return Double.parseDouble(s);\n            } catch (NumberFormatException e) {\n                return null;\n            }\n        }\n\n        // Helper function to safely parse Integer\n        Integer parseInt(String s, int radix) {\n             try {\n                 return Integer.parseInt(s, radix);\n             } catch (NumberFormatException e) {\n                 return null;\n             }\n        }\n         Integer parseInt(String s) {\n             return parseInt(s, 10);\n         }\n\n        // Helper function to safely parse Long\n        Long parseLong(String s) {\n             try {\n                 return Long.parseLong(s);\n             } catch (NumberFormatException e) {\n                 return null;\n             }\n        }\n\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                // index = 0: Validity\n                if (index < values.length) {\n                    position.setValid(values[index].equals(\"A\"));\n                }\n                index++;\n\n                // index = 1: Satellites\n                if (index < values.length && !values[index].isEmpty()) {\n                    Integer satellites = parseInt(values[index]);\n                    if (satellites != null) {\n                        position.set(Position.KEY_SATELLITES, satellites);\n                    }\n                }\n                index++;\n\n                // index = 2: Latitude\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                     Double latitude = parseDouble(values[index].substring(1));\n                     if (latitude != null) {\n                         if (values[index].charAt(0) == 'S') {\n                             latitude = -latitude;\n                         }\n                         position.setLatitude(latitude);\n                     }\n                }\n                index++;\n\n                // index = 3: Longitude\n                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {\n                    Double longitude = parseDouble(values[index].substring(1));\n                    if (longitude != null) {\n                        if (values[index].charAt(0) == 'W') {\n                            longitude = -longitude;\n                        }\n                        position.setLongitude(longitude);\n                    }\n                }\n                index++;\n\n                // index = 4: Speed (KPH based on original code's converter)\n                if (index < values.length && !values[index].isEmpty()) {\n                    Double speedKph = parseDouble(values[index]);\n                    if (speedKph != null) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(speedKph));\n                    }\n                }\n                index++;\n\n                // index = 5: Course\n                if (index < values.length && !values[index].isEmpty()) {\n                     Double course = parseDouble(values[index]);\n                     if (course != null) {\n                         position.setCourse(course);\n                     }\n                }\n                index++;\n\n                // index = 6: Altitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    Double altitude = parseDouble(values[index]);\n                     if (altitude != null) {\n                         position.setAltitude(altitude);\n                     }\n                }\n                index++;\n\n                // index = 7: HDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                     Double hdop = parseDouble(values[index]);\n                     if (hdop != null) {\n                         position.set(Position.KEY_HDOP, hdop);\n                     }\n                }\n                index++;\n\n                // index = 8: VDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                     Double vdop = parseDouble(values[index]);\n                     if (vdop != null) {\n                         position.set(Position.KEY_VDOP, vdop);\n                     }\n                }\n                index++;\n                break;\n\n            case \"GSM\":\n                index += 1; // index = 1: registration status (not parsed)\n                index += 1; // index = 2: signal strength (not parsed)\n\n                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;\n\n                // index = 2: MCC\n                if (index < values.length && !values[index].isEmpty()) {\n                    mcc = parseInt(values[index]);\n                }\n                index++;\n                // index = 3: MNC\n                if (index < values.length && !values[index].isEmpty()) {\n                    mnc = parseInt(values[index]);\n                }\n                index++;\n                // index = 4: LAC (hex)\n                if (index < values.length && !values[index].isEmpty()) {\n                    lac = parseInt(values[index], 16);\n                }\n                index++;\n                // index = 5: CID (hex)\n                if (index < values.length && !values[index].isEmpty()) {\n                    cid = parseInt(values[index], 16);\n                }\n                index++;\n                // index = 6: RSSI\n                if (index < values.length && !values[index].isEmpty()) {\n                    rssi = parseInt(values[index]);\n                }\n                index++;\n\n                // Only create CellTower if essential info is present\n                if (mcc != null && mnc != null && lac != null && cid != null) {\n                    CellTower cellTower = CellTower.from(mcc, mnc, lac, cid, rssi); // rssi can be null\n                    position.setNetwork(new Network(cellTower));\n                }\n                break;\n\n            case \"COT\":\n                // index = 0: Odometer\n                if (index < values.length && !values[index].isEmpty()) {\n                    Long odometer = parseLong(values[index]);\n                    if (odometer != null) {\n                        position.set(Position.KEY_ODOMETER, odometer);\n                    }\n                }\n                index++;\n\n                // index = 1: Hours (H-M-S)\n                if (index < values.length && !values[index].isEmpty()) {\n                    String[] hours = values[index].split(\"-\");\n                    long totalSeconds = 0;\n                    boolean parsedSomething = false;\n                    if (hours.length > 0 && !hours[0].isEmpty()) {\n                        Integer h = parseInt(hours[0]);\n                        if (h != null) {\n                            totalSeconds += h * 3600L;\n                            parsedSomething = true;\n                        }\n                    }\n                    if (hours.length > 1 && !hours[1].isEmpty()) {\n                        Integer m = parseInt(hours[1]);\n                         if (m != null) {\n                             totalSeconds += m * 60L;\n                             parsedSomething = true;\n                         }\n                    }\n                    if (hours.length > 2 && !hours[2].isEmpty()) {\n                         Integer s = parseInt(hours[2]);\n                          if (s != null) {\n                              totalSeconds += s;\n                              parsedSomething = true;\n                          }\n                    }\n                    if (parsedSomething) {\n                       position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                    }\n                }\n                index++;\n                break;\n\n            case \"ADC\":\n                // index = 0: Power\n                if (index < values.length && !values[index].isEmpty()) {\n                     Double power = parseDouble(values[index]);\n                     if (power != null) {\n                         position.set(Position.KEY_POWER, power);\n                     }\n                }\n                index++;\n                // index = 1: Battery\n                if (index < values.length && !values[index].isEmpty()) {\n                     Double battery = parseDouble(values[index]);\n                     if (battery != null) {\n                         position.set(Position.KEY_BATTERY, battery);\n                     }\n                }\n                index++;\n                // index = 2: ADC 1\n                if (index < values.length && !values[index].isEmpty()) {\n                     Double adc1 = parseDouble(values[index]);\n                     if (adc1 != null) {\n                         position.set(Position.PREFIX_ADC + 1, adc1);\n                     }\n                }\n                index++;\n                // index = 3: ADC 2\n                if (index < values.length && !values[index].isEmpty()) {\n                    Double adc2 = parseDouble(values[index]);\n                    if (adc2 != null) {\n                        position.set(Position.PREFIX_ADC + 2, adc2);\n                    }\n                }\n                index++;\n                break;\n\n            case \"DTT\":\n                // index = 0: Status (hex)\n                if (index < values.length && !values[index].isEmpty()) {\n                    Integer status = parseInt(values[index], 16);\n                    if (status != null) {\n                        position.set(Position.KEY_STATUS, status);\n                    }\n                }\n                index++;\n\n                // index = 1: IO (hex)\n                if (index < values.length && !values[index].isEmpty()) {\n                    Integer io = parseInt(values[index], 16);\n                    if (io != null) {\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                index++;\n\n                // index = 2, 3: Geofence\n                if (index < values.length && index + 1 < values.length) {\n                    position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);\n                }\n                index += 2;\n\n                // index = 4: Event Status\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index]);\n                }\n                index++;\n\n                // index = 5: Packet Type\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index]);\n                }\n                index++;\n                break;\n\n            case \"ETD\": // String data\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\": // String data\n                if (index < values.length) {\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\": // String data\n                 if (index < values.length) {\n                    position.set(\"tagData\", values[index++]);\n                 }\n                break;\n\n            case \"IWD\":\n                while (index < values.length) {\n                    // index: Sensor Index\n                    Integer sensorIndex = null;\n                    if (!values[index].isEmpty()) {\n                        sensorIndex = parseInt(values[index]);\n                    }\n                    index++;\n\n                    // index+1: Data Type\n                    Integer dataType = null;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        dataType = parseInt(values[index]);\n                    }\n                    index++;\n\n                    if (sensorIndex == null || dataType == null) {\n                        // If index or type is missing/invalid, cannot reliably parse rest of IWD block\n                        break;\n                    }\n\n                    if (dataType == 0) { // Driver ID\n                        if (index < values.length) { // Value is a string\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                        }\n                        index++;\n                    } else if (dataType == 1) { // Temperature\n                        index += 1; // Skip temperature sensor serial number\n                        if (index < values.length && !values[index].isEmpty()) {\n                            Double temperature = parseDouble(values[index]);\n                            if (temperature != null) {\n                                position.set(Position.PREFIX_TEMP + sensorIndex, temperature);\n                            }\n                        }\n                        index++;\n                    } else {\n                        // Unknown data type: Cannot know how many fields to skip. Stop parsing IWD.\n                        break;\n                    }\n                }\n                break;\n\n            default:\n                // Unknown fragment type, ignore\n                break;\n        }\n    }\n\n} // Added class wrapper for context",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}