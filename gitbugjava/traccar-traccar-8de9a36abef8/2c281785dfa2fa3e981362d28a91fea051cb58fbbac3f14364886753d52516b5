{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    if (dataIndex < 0) {\n        return;\n    }\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Defensive: bail if not enough values for mandatory fields\n            if (values.length < 5) {\n                return;\n            }\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, !values[index].isEmpty() ? Integer.parseInt(values[index++]) : null);\n\n            // Latitude\n            double latitude = 0.0;\n            if (!values[index].isEmpty()) {\n                latitude = Double.parseDouble(values[index].substring(1));\n                if (values[index].charAt(0) == 'S') {\n                    latitude = -latitude;\n                }\n            }\n            position.setLatitude(latitude);\n            index++;\n\n            // Longitude\n            double longitude = 0.0;\n            if (!values[index].isEmpty()) {\n                longitude = Double.parseDouble(values[index].substring(1));\n                if (values[index].charAt(0) == 'W') {\n                    longitude = -longitude;\n                }\n            }\n            position.setLongitude(longitude);\n            index++;\n\n            // Speed\n            double speed = 0.0;\n            if (index < values.length && !values[index].isEmpty()) {\n                speed = UnitsConverter.knotsFromKph(Double.parseDouble(values[index]));\n            }\n            position.setSpeed(speed);\n            index++;\n\n            // Course\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Double.parseDouble(values[index]));\n            }\n            index++;\n\n            // Altitude\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Double.parseDouble(values[index]));\n                index++;\n            }\n\n            // HDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                index++;\n            }\n\n            // VDOP\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                index++;\n            }\n            break;\n        case \"GSM\":\n            // original: registration status, signal strength\n            index += 2;\n            // Multi-cell support\n            while (index + 4 < values.length) {\n                if (!values[index].isEmpty() && !values[index + 1].isEmpty() && !values[index + 2].isEmpty() && !values[index + 3].isEmpty() && !values[index + 4].isEmpty()) {\n                    position.setNetwork(new Network(CellTower.from(\n                            Integer.parseInt(values[index++]),\n                            Integer.parseInt(values[index++]),\n                            Integer.parseInt(values[index++], 16),\n                            Integer.parseInt(values[index++], 16),\n                            Integer.parseInt(values[index++])\n                    )));\n                } else {\n                    index += 5;\n                }\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int hoursVal = (hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) : 0) * 3600\n                        + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) : 0) * 60\n                        + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0);\n                position.set(Position.KEY_HOURS, hoursVal * 1000);\n                index++;\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else {\n                index++;\n            }\n            // IO\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                index++;\n            } else {\n                index++;\n            }\n            String geofence = \"\";\n            if (index < values.length && !values[index].isEmpty()) {\n                geofence += values[index++];\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                geofence += values[index++];\n            } else {\n                index++;\n            }\n            position.set(Position.KEY_GEOFENCE, geofence);\n\n            if (index < values.length) {\n                // this might be \"eventStatus\" or, if empty, skip forward\n                if (!values[index].isEmpty()) {\n                    position.set(\"eventStatus\", values[index++]);\n                } else {\n                    index++;\n                }\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                // Defensive: there must be at least two more elements for sensorIndex and dataType\n                if (index + 1 >= values.length) break;\n                int sensorIndex = 0, dataType = 0;\n                if (!values[index].isEmpty()) {\n                    sensorIndex = Integer.parseInt(values[index]);\n                }\n                index++;\n                if (!values[index].isEmpty()) {\n                    dataType = Integer.parseInt(values[index]);\n                }\n                index++;\n\n                if (dataType == 0) {\n                    // driver unique id\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                    }\n                    index++;\n                } else if (dataType == 1) {\n                    // temperature sensor serial number\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}