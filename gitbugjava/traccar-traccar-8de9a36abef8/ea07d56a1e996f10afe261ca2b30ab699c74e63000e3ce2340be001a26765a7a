{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\", -1); // Use -1 limit to preserve trailing empty strings\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                if (index < values.length) { // Validity\n                    position.setValid(values[index++].equals(\"A\"));\n                } else { break; }\n\n                if (index < values.length) { // Satellites\n                    String satStr = values[index++];\n                    if (!satStr.isEmpty()) {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(satStr));\n                    }\n                } else { break; }\n\n                if (index < values.length) { // Latitude\n                    String latStrFull = values[index++];\n                    if (latStrFull.length() > 1) { // e.g. N12.34\n                        String latValuePart = latStrFull.substring(1);\n                        if (!latValuePart.isEmpty()) { // ensure not \"N\" then empty value\n                            position.setLatitude(Double.parseDouble(latValuePart));\n                            if (latStrFull.charAt(0) == 'S') {\n                                position.setLatitude(-position.getLatitude());\n                            }\n                        }\n                    }\n                } else { break; }\n\n                if (index < values.length) { // Longitude\n                    String lonStrFull = values[index++];\n                    if (lonStrFull.length() > 1) { // e.g. E12.34\n                        String lonValuePart = lonStrFull.substring(1);\n                        if (!lonValuePart.isEmpty()) { // ensure not \"E\" then empty value\n                           position.setLongitude(Double.parseDouble(lonValuePart));\n                            if (lonStrFull.charAt(0) == 'W') {\n                                position.setLongitude(-position.getLongitude());\n                            }\n                        }\n                    }\n                } else { break; }\n\n                // Speed - original logic pattern is fine\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                }\n                if (index < values.length) { // Always advance index for speed field\n                    index++;\n                }\n\n                if (index < values.length) { // Course\n                    String courseStr = values[index++];\n                    if (!courseStr.isEmpty()) {\n                        position.setCourse(Integer.parseInt(courseStr));\n                    }\n                } else { break; }\n\n\n                if (index < values.length) { // Altitude\n                    String altStr = values[index++];\n                    if (!altStr.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altStr));\n                    }\n                }\n\n                if (index < values.length) { // HDOP\n                    String hdopStr = values[index++];\n                    if (!hdopStr.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));\n                    }\n                }\n\n                if (index < values.length) { // VDOP\n                    String vdopStr = values[index++];\n                    if (!vdopStr.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status (string, not parsed here)\n                index += 1; // signal strength (string, not parsed here)\n                // Ensure enough values for a cell tower: mcc, mnc, lac, cid, rssi (5 values)\n                if (index + 4 < values.length) {\n                    String mccStr = values[index++];\n                    String mncStr = values[index++];\n                    String lacStr = values[index++];\n                    String cidStr = values[index++];\n                    String rssiStr = values[index++];\n\n                    // Check if all necessary components are non-empty before parsing\n                    if (!mccStr.isEmpty() && !mncStr.isEmpty() && !lacStr.isEmpty() && !cidStr.isEmpty()) {\n                        int mcc = Integer.parseInt(mccStr);\n                        int mnc = Integer.parseInt(mncStr);\n                        int lac = Integer.parseInt(lacStr, 16);\n                        int cid = Integer.parseInt(cidStr, 16);\n                        if (!rssiStr.isEmpty()) { // RSSI can be optional or also mandatory\n                             position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr))));\n                        } else {\n                             position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid))); // Use overloaded from if RSSI is missing\n                        }\n                    }\n                } else {\n                    index = values.length; // Consume remaining fields if not enough for a full tower\n                }\n                break;\n            case \"COT\":\n                if (index < values.length) { // Odometer\n                    String odoStr = values[index++];\n                    if (!odoStr.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odoStr));\n                    }\n                }\n                if (index < values.length) { // Hours\n                    String hoursFieldStr = values[index++];\n                    if (!hoursFieldStr.isEmpty()) {\n                        String[] hoursParts = hoursFieldStr.split(\"-\");\n                        long totalMillis = 0;\n                        boolean anyPartValid = false;\n                        if (hoursParts.length > 0 && !hoursParts[0].isEmpty()) {\n                            totalMillis += (long) Integer.parseInt(hoursParts[0]) * 3600 * 1000;\n                            anyPartValid = true;\n                        }\n                        if (hoursParts.length > 1 && !hoursParts[1].isEmpty()) {\n                            totalMillis += (long) Integer.parseInt(hoursParts[1]) * 60 * 1000;\n                            anyPartValid = true;\n                        }\n                        if (hoursParts.length > 2 && !hoursParts[2].isEmpty()) {\n                            totalMillis += (long) Integer.parseInt(hoursParts[2]) * 1000;\n                            anyPartValid = true;\n                        }\n                        if (anyPartValid) {\n                            position.set(Position.KEY_HOURS, totalMillis);\n                        }\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) { // Power\n                    String powerStr = values[index++];\n                    if (!powerStr.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(powerStr));\n                    }\n                }\n                if (index < values.length) { // Battery\n                    String batteryStr = values[index++];\n                    if (!batteryStr.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n                    }\n                }\n                if (index < values.length) { // ADC1\n                    String adc1Str = values[index++];\n                    if (!adc1Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));\n                    }\n                }\n                if (index < values.length) { // ADC2\n                    String adc2Str = values[index++];\n                    if (!adc2Str.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));\n                    }\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) { // Status\n                    String statusStr = values[index++];\n                    if (!statusStr.isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));\n                    }\n                }\n\n                // IO - original logic pattern is fine\n                if (index < values.length && !values[index].isEmpty()) {\n                    int io = Integer.parseInt(values[index], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                if (index < values.length) { // Always advance index for IO field\n                     index++;\n                }\n\n                String geofencePart1 = \"\";\n                if (index < values.length) {\n                    geofencePart1 = values[index++];\n                }\n                String geofencePart2 = \"\";\n                if (index < values.length) {\n                    geofencePart2 = values[index++];\n                }\n                if (!geofencePart1.isEmpty() || !geofencePart2.isEmpty()) {\n                    position.set(Position.KEY_GEOFENCE, geofencePart1 + geofencePart2);\n                }\n\n\n                if (index < values.length) {\n                    String eventStatusValue = values[index++];\n                    if (!eventStatusValue.isEmpty()) {\n                         position.set(\"eventStatus\", eventStatusValue);\n                    }\n                }\n                if (index < values.length) {\n                    String packetTypeValue = values[index++];\n                    if (!packetTypeValue.isEmpty()) {\n                        position.set(\"packetType\", packetTypeValue);\n                    }\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    String eventDataValue = values[index++];\n                    if (!eventDataValue.isEmpty()) {\n                        position.set(\"eventData\", eventDataValue);\n                    }\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    String obdValue = values[index++];\n                    if (!obdValue.isEmpty()) {\n                        position.set(\"obd\", obdValue);\n                    }\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    String tagDataValue = values[index++];\n                    if (!tagDataValue.isEmpty()) {\n                        position.set(\"tagData\", tagDataValue);\n                    }\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    String sensorIndexStr;\n                    int sensorIndexVal;\n                    if (index < values.length) {\n                        sensorIndexStr = values[index++];\n                        if (sensorIndexStr.isEmpty()) { continue; }\n                        sensorIndexVal = Integer.parseInt(sensorIndexStr);\n                    } else { break; }\n\n                    String dataTypeStr;\n                    int dataTypeVal;\n                    if (index < values.length) {\n                        dataTypeStr = values[index++];\n                        if (dataTypeStr.isEmpty()) { continue; }\n                        dataTypeVal = Integer.parseInt(dataTypeStr);\n                    } else { break; }\n\n                    if (dataTypeVal == 0) { // Driver ID\n                        if (index < values.length) {\n                            String driverId = values[index++];\n                            if (!driverId.isEmpty()) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);\n                            }\n                        } else { break; }\n                    } else if (dataTypeVal == 1) { // Temperature\n                        if (index < values.length) { // Skip serial number\n                            index++;\n                        } else { break; }\n\n                        if (index < values.length) { // Temperature value\n                            String tempValueStr = values[index++];\n                            if (!tempValueStr.isEmpty()) {\n                                position.set(Position.PREFIX_TEMP + sensorIndexVal, Double.parseDouble(tempValueStr));\n                            }\n                        } else { break; }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}