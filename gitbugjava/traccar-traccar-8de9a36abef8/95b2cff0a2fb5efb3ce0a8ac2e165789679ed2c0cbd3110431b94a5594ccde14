{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values.length > index && values[index++].equals(\"A\"));\n            if (values.length > index) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                break;\n            }\n            if (values.length > index) {\n                String latString = values[index++];\n                if (!latString.isEmpty() && latString.length() > 1) {\n                    position.setLatitude(Double.parseDouble(latString.substring(1)));\n                    if (latString.charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                }\n            }\n            if (values.length > index) {\n                String lonString = values[index++];\n                if (!lonString.isEmpty() && lonString.length() > 1) {\n                    position.setLongitude(Double.parseDouble(lonString.substring(1)));\n                    if (lonString.charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                }\n            }\n            if (values.length > index) {\n                String speedString = values[index++];\n                if (!speedString.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedString)));\n                }\n            }\n            if (values.length > index) {\n                String courseString = values[index++];\n                if (!courseString.isEmpty()) {\n                    position.setCourse(Double.parseDouble(courseString));\n                }\n            }\n            if (values.length > index) {\n                String altitudeString = values[index++];\n                if (!altitudeString.isEmpty()) {\n                    position.setAltitude(Double.parseDouble(altitudeString));\n                }\n            }\n            if (values.length > index) {\n                String hdopString = values[index++];\n                if (!hdopString.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopString));\n                }\n            }\n            if (values.length > index) {\n                String vdopString = values[index++];\n                if (!vdopString.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopString));\n                }\n            }\n            break;\n        case \"GSM\":\n            index += 2; // registration status and signal strength (may be empty)\n            if ((values.length - index) % 6 == 0 && values.length > index) {\n                // Multiple towers possible (each group of 6 fields: mcc;mnc;lac;cid;...;rssi)\n                List<CellTower> cellTowers = new ArrayList<>();\n                while (values.length - index >= 6) {\n                    try {\n                        int mcc = Integer.parseInt(values[index++]);\n                        int mnc = Integer.parseInt(values[index++]);\n                        int lac = Integer.parseInt(values[index++], 16);\n                        int cid = Integer.parseInt(values[index++], 16);\n                        // skip one (possibly rssi as int or extra?)\n                        index++; // unknown field, skip\n                        int rssi = Integer.parseInt(values[index++]);\n                        cellTowers.add(CellTower.from(mcc, mnc, lac, cid, rssi));\n                    } catch (Exception e) {\n                        break;\n                    }\n                }\n                if (!cellTowers.isEmpty()) {\n                    position.setNetwork(new Network(cellTowers));\n                }\n            } else if (values.length - index >= 5) {\n                try {\n                    int mcc = Integer.parseInt(values[index++]);\n                    int mnc = Integer.parseInt(values[index++]);\n                    int lac = Integer.parseInt(values[index++], 16);\n                    int cid = Integer.parseInt(values[index++], 16);\n                    int rssi = Integer.parseInt(values[index++]);\n                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                } catch (Exception e) {\n                    // ignore parsing error\n                }\n            }\n            break;\n        case \"COT\":\n            if (values.length > index) {\n                String odometer = values[index++];\n                if (!odometer.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));\n                }\n            }\n            if (values.length > index) {\n                String hoursString = values[index++];\n                if (!hoursString.isEmpty()) {\n                    String[] hours = hoursString.split(\"-\");\n                    int totalSeconds = 0;\n                    if (hours.length > 0) {\n                        totalSeconds += Integer.parseInt(hours[0]) * 3600;\n                    }\n                    if (hours.length > 1) {\n                        totalSeconds += Integer.parseInt(hours[1]) * 60;\n                    }\n                    if (hours.length > 2) {\n                        totalSeconds += Integer.parseInt(hours[2]);\n                    }\n                    position.set(Position.KEY_HOURS, totalSeconds * 1000L);\n                }\n            }\n            break;\n        case \"ADC\":\n            if (values.length > index) {\n                String powerString = values[index++];\n                if (!powerString.isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(powerString));\n                }\n            }\n            if (values.length > index) {\n                String batteryString = values[index++];\n                if (!batteryString.isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(batteryString));\n                }\n            }\n            if (values.length > index) {\n                String adc1 = values[index++];\n                if (!adc1.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                }\n            }\n            if (values.length > index) {\n                String adc2 = values[index++];\n                if (!adc2.isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                }\n            }\n            break;\n        case \"DTT\":\n            if (values.length > index) {\n                String statusString = values[index++];\n                if (!statusString.isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(statusString, 16));\n                }\n            }\n            if (values.length > index) {\n                String ioString = values[index++];\n                if (!ioString.isEmpty()) {\n                    int io = Integer.parseInt(ioString, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n            // Two geofence or event values expected\n            StringBuilder geofenceValue = new StringBuilder();\n            for (int i = 0; i < 2 && values.length > index; i++) {\n                String part = values[index++];\n                if (part != null) {\n                    geofenceValue.append(part);\n                }\n            }\n            if (geofenceValue.length() > 0) {\n                position.set(Position.KEY_GEOFENCE, geofenceValue.toString());\n            }\n            if (values.length > index) {\n                String eventStatus = values[index++];\n                if (!eventStatus.isEmpty()) {\n                    position.set(\"eventStatus\", eventStatus);\n                }\n            }\n            if (values.length > index) {\n                String packetType = values[index++];\n                if (!packetType.isEmpty()) {\n                    position.set(\"packetType\", packetType);\n                }\n            }\n            break;\n        case \"ETD\":\n            if (values.length > index) {\n                String eventData = values[index++];\n                if (!eventData.isEmpty()) {\n                    position.set(\"eventData\", eventData);\n                }\n            }\n            break;\n        case \"OBD\":\n            if (values.length > index) {\n                String obdData = values[index++];\n                if (!obdData.isEmpty()) {\n                    position.set(\"obd\", obdData);\n                }\n            }\n            break;\n        case \"TAG\":\n            if (values.length > index) {\n                String tagData = values[index++];\n                if (!tagData.isEmpty()) {\n                    position.set(\"tagData\", tagData);\n                }\n            }\n            break;\n        case \"IWD\":\n            while (values.length > index + 1) {\n                String sensorIndexS = values[index++];\n                String dataTypeS = values[index++];\n                if (sensorIndexS.isEmpty() || dataTypeS.isEmpty()) {\n                    break;\n                }\n                int sensorIndex = Integer.parseInt(sensorIndexS);\n                int dataType = Integer.parseInt(dataTypeS);\n                if (dataType == 0) {\n                    if (values.length > index) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    if (values.length > index) index++; // skip serial number\n                    if (values.length > index) {\n                        String tempString = values[index++];\n                        if (!tempString.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempString));\n                        }\n                    }\n                } else {\n                    // unknown dataType, just skip\n                    if (values.length > index) index++;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}