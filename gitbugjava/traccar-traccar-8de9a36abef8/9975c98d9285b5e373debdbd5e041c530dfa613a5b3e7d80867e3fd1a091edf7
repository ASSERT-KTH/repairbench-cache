{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    // ignore fragments without data\n    if (dataIndex < 0) {\n        return;\n    }\n\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    String key = fragment.substring(0, dataIndex);\n    switch (key) {\n        case \"GPS\":\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            // latitude\n            if (index < values.length && values[index].length() > 1) {\n                double lat = Double.parseDouble(values[index].substring(1));\n                if (values[index].charAt(0) == 'S') {\n                    lat = -lat;\n                }\n                position.setLatitude(lat);\n            }\n            index++;\n            // longitude\n            if (index < values.length && values[index].length() > 1) {\n                double lon = Double.parseDouble(values[index].substring(1));\n                if (values[index].charAt(0) == 'W') {\n                    lon = -lon;\n                }\n                position.setLongitude(lon);\n            }\n            index++;\n            // speed (kph to knots)\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(\n                    Integer.parseInt(values[index]))\n                );\n            }\n            index++;\n            // course\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index]));\n            }\n            index++;\n            // altitude\n            if (index < values.length) {\n                String alt = values[index];\n                if (!alt.isEmpty()) {\n                    position.setAltitude(Integer.parseInt(alt));\n                }\n            }\n            index++;\n            // HDOP\n            if (index < values.length) {\n                String hdop = values[index];\n                if (!hdop.isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                }\n            }\n            index++;\n            // VDOP\n            if (index < values.length) {\n                String vdop = values[index];\n                if (!vdop.isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                }\n            }\n            break;\n\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index + 4 < values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++])\n                )));\n            }\n            break;\n\n        case \"COT\":\n            // odometer\n            if (index < values.length) {\n                String odo = values[index++];\n                if (!odo.isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));\n                }\n            }\n            // hours\n            if (index < values.length) {\n                String hoursVal = values[index++];\n                if (!hoursVal.isEmpty()) {\n                    String[] h = hoursVal.split(\"-\");\n                    int total = Integer.parseInt(h[0]) * 3600\n                              + (h.length > 1 ? Integer.parseInt(h[1]) * 60 : 0)\n                              + (h.length > 2 ? Integer.parseInt(h[2]) : 0);\n                    position.set(Position.KEY_HOURS, total * 1000);\n                }\n            }\n            break;\n\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n            }\n            break;\n\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n            }\n            index++;\n            // IO bits\n            if (index < values.length) {\n                String ioVal = values[index++];\n                if (!ioVal.isEmpty()) {\n                    int io = Integer.parseInt(ioVal, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n            }\n            // geofence\n            if (index + 1 < values.length) {\n                String gf1 = values[index++];\n                String gf2 = values[index++];\n                if (!gf1.isEmpty() || !gf2.isEmpty()) {\n                    position.set(Position.KEY_GEOFENCE, gf1 + gf2);\n                }\n            }\n            // event status\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index]);\n            }\n            index++;\n            // packet type\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index]);\n            }\n            break;\n\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index]);\n            }\n            break;\n\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index]);\n            }\n            break;\n\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index]);\n            }\n            break;\n\n        case \"IWD\":\n            while (index + 1 < values.length) {\n                String idxVal = values[index++];\n                String typeVal = values[index++];\n                if (idxVal.isEmpty() || typeVal.isEmpty()) {\n                    continue;\n                }\n                int sensorIndex = Integer.parseInt(idxVal);\n                int dataType = Integer.parseInt(typeVal);\n                if (dataType == 0 && index < values.length) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1) {\n                    // skip serial number\n                    if (index < values.length) {\n                        index++;\n                    }\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex,\n                            Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n            }\n            break;\n\n        default:\n            // unknown fragment type\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}