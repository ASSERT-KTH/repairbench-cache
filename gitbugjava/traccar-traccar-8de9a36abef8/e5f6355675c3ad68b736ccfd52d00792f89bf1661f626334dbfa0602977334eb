{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values.length > index && values[index++].equals(\"A\"));\n            if (values.length > index) {\n                position.set(Position.KEY_SATELLITES, tryParseInt(values[index++]));\n            } else {\n                index++;\n            }\n            if (values.length > index) {\n                position.setLatitude(tryParseDouble(values[index].substring(1)));\n                if (values[index].length() > 0 && values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                index++;\n            } else {\n                index++;\n            }\n            if (values.length > index) {\n                position.setLongitude(tryParseDouble(values[index].substring(1)));\n                if (values[index].length() > 0 && values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                index++;\n            } else {\n                index++;\n            }\n            if (values.length > index) {\n                String speedStr = values[index++];\n                if (!speedStr.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(tryParseDouble(speedStr)));\n                }\n            } else {\n                index++;\n            }\n            if (values.length > index) {\n                position.setCourse(tryParseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (values.length > index) {\n                position.setAltitude(tryParseDouble(values[index++]));\n            }\n            if (values.length > index) {\n                position.set(Position.KEY_HDOP, tryParseDouble(values[index++]));\n            }\n            if (values.length > index) {\n                position.set(Position.KEY_VDOP, tryParseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (values.length > index + 4) {\n                position.setNetwork(new Network(CellTower.from(\n                        tryParseInt(values[index++]), tryParseInt(values[index++]),\n                        tryParseInt(values[index++], 16), tryParseInt(values[index++], 16),\n                        tryParseInt(values[index++])\n                )));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, tryParseLong(values[index++]));\n            } else if (index < values.length) {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int h = 0, m = 0, s = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) h = tryParseInt(hours[0]);\n                if (hours.length > 1 && !hours[1].isEmpty()) m = tryParseInt(hours[1]);\n                if (hours.length > 2 && !hours[2].isEmpty()) s = tryParseInt(hours[2]);\n                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n            }\n            break;\n        case \"ADC\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, tryParseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, tryParseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, tryParseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, tryParseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            break;\n        case \"DTT\":\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                } catch (NumberFormatException e) {\n                    index++;\n                }\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                try {\n                    int io = Integer.parseInt(values[index++], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                } catch (NumberFormatException e) {\n                    // skip io decode\n                }\n            } else {\n                index++;\n            }\n            if (values.length > index) {\n                String geo1 = values[index++] != null ? values[index - 1] : \"\";\n                String geo2 = index < values.length && values[index] != null ? values[index++] : \"\";\n                position.set(Position.KEY_GEOFENCE, geo1 + geo2);\n            }\n            if (values.length > index) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (values.length > index) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (values.length > index) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (values.length > index) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (values.length > index) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                // Defensive to avoid out of bounds\n                if (index + 1 >= values.length) break;\n                int sensorIndex = tryParseInt(values[index++]);\n                int dataType = tryParseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index++; // skip temperature sensor serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, tryParseDouble(values[index++]));\n                    } else {\n                        index++;\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nprivate static Integer tryParseInt(String s) {\n    if (s == null || s.isEmpty()) return null;\n    try {\n        return Integer.parseInt(s);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n}\n\nprivate static Integer tryParseInt(String s, int radix) {\n    if (s == null || s.isEmpty()) return null;\n    try {\n        return Integer.parseInt(s, radix);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n}\n\nprivate static Double tryParseDouble(String s) {\n    if (s == null || s.isEmpty()) return null;\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n}\n\nprivate static Long tryParseLong(String s) {\n    if (s == null || s.isEmpty()) return null;\n    try {\n        return Long.parseLong(s);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}