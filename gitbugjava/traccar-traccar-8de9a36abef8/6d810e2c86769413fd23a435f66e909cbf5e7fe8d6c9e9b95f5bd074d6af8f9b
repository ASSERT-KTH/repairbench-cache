{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        if (dataIndex == -1) {\n            return; // skip malformed fragments\n        }\n\n        int index = 0;\n        String[] values;\n        if (dataIndex == fragment.length() - 1) {\n            values = new String[0];\n        } else {\n            String dataPart = fragment.length() > dataIndex + 1 ?\n                fragment.substring(dataIndex + 1) : \"\";\n            values = dataPart.split(\";\");\n        }\n\n        String type = dataIndex < fragment.length() ?\n            fragment.substring(0, dataIndex) : \"\";\n\n        switch (type) {\n            case \"GPS\":\n                if (values.length == 0) break;\n                position.setValid(values[index].equals(\"A\"));\n                if (values.length <= index) break;\n                index++;\n                if (values.length <= index) break;\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n\n                if (values.length <= index) break;\n                String latitudeStr = values[index].length() > 1 ?\n                    values[index].substring(1) : \"\";\n                double latitude = latitudeStr.isEmpty() ? 0 :\n                    Double.parseDouble(latitudeStr);\n                position.setLatitude(latitude);\n                if (values[index].length() > 0 && values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                index++;\n\n                if (values.length <= index) break;\n                String longitudeStr = values[index].length() > 1 ?\n                    values[index].substring(1) : \"\";\n                double longitude = longitudeStr.isEmpty() ? 0 :\n                    Double.parseDouble(longitudeStr);\n                position.setLongitude(longitude);\n                if (values[index].length() > 0 && values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                index++;\n\n                if (values.length > index) {\n                    String speedStr = values[index];\n                    if (!speedStr.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));\n                    }\n                    index++;\n                }\n\n                if (values.length > index) {\n                    position.setCourse(Integer.parseInt(values[index++]));\n                }\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.setAltitude(Integer.parseInt(values[index]));\n                    }\n                    index++;\n                }\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n                if (index < values.length) {\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                    }\n                    index++;\n                }\n                break;\n            case \"GSM\":\n                index += 2; // skip registration status and signal strength if not enough values\n                if (values.length >= index + 5) {\n                    position.setNetwork(new Network(CellTower.from(\n                            Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                            Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                            Integer.parseInt(values[index++]))));\n                }\n                break;\n            case \"COT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    String[] hours = values[index].split(\"-\");\n                    long hourValue = 0;\n                    if (hours.length > 0) {\n                        hourValue += Integer.parseInt(hours[0]) * 3600L;\n                    }\n                    if (hours.length > 1) {\n                        hourValue += Integer.parseInt(hours[1]) * 60L;\n                    }\n                    if (hours.length > 2) {\n                        hourValue += Integer.parseInt(hours[2]);\n                    }\n                    position.set(Position.KEY_HOURS, hourValue * 1000);\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    int io = Integer.parseInt(values[index], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    String geofence = values[index++];\n                    if (index < values.length) {\n                        geofence += values[index++];\n                    }\n                    position.set(Position.KEY_GEOFENCE, geofence);\n                }\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(\"eventData\", values[index]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(\"obd\", values[index]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(\"tagData\", values[index]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length && values.length >= index + 2) {\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n                    if (dataType == 0 && index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1 && index < values.length) {\n                        index += 1; // skip temperature sensor serial number\n                        if (index < values.length) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}