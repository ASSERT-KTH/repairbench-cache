{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (values.length > index) {\n                position.setValid(values[index++].equals(\"A\"));\n            } else {\n                break;\n            }\n            if (values.length > index) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setCourse(Double.parseDouble(values[index]));\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setAltitude(Double.parseDouble(values[index]));\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n            }\n            break;\n        case \"GSM\":\n            index += 2; // registration status and signal strength\n            // Each CellTower has 5 values, parse as many cell towers as possible\n            while (values.length - index >= 5) {\n                int mcc = Integer.parseInt(values[index++]);\n                int mnc = Integer.parseInt(values[index++]);\n                int lac = Integer.parseInt(values[index++], 16);\n                int cid = Integer.parseInt(values[index++], 16);\n                int rssi = Integer.parseInt(values[index++]);\n                Network network = position.getNetwork();\n                if (network == null) {\n                    network = new Network();\n                    position.setNetwork(network);\n                }\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int h = hours.length > 0 && !hours[0].isEmpty() ? Integer.parseInt(hours[0]) : 0;\n                int m = hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) : 0;\n                int s = hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0;\n                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                index++;\n            } else {\n                index++;\n            }\n            StringBuilder geofence = new StringBuilder();\n            for (int i = 0; i < 2 && index < values.length; i++) {\n                geofence.append(values[index++]);\n            }\n            if (geofence.length() > 0) {\n                position.set(Position.KEY_GEOFENCE, geofence.toString());\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index + 1 < values.length) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else {\n                        index++;\n                    }\n                } else if (dataType == 1) {\n                    index++; // skip temperature sensor serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    } else {\n                        index++;\n                    }\n                } else {\n                    // Unsupported data type; skip value(s) accordingly if necessary\n                    index++;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}