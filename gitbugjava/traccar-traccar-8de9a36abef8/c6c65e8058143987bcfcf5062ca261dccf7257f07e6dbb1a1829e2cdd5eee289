{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (index < values.length) position.setValid(values[index++].equals(\"A\"));\n            else index++;\n\n            if (index < values.length) {\n                String sats = values[index++];\n                if (!sats.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(sats));\n                    } catch (NumberFormatException ignored) {}\n                }\n            } else index++;\n\n            if (index < values.length) {\n                String latStr = values[index++];\n                if (!latStr.isEmpty() && latStr.length() > 1) {\n                    try {\n                        position.setLatitude(Double.parseDouble(latStr.substring(1)));\n                    } catch (NumberFormatException ignored) {}\n                }\n                if (latStr != null && latStr.length() > 0 && latStr.charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            } else index++;\n\n            if (index < values.length) {\n                String lonStr = values[index++];\n                if (!lonStr.isEmpty() && lonStr.length() > 1) {\n                    try {\n                        position.setLongitude(Double.parseDouble(lonStr.substring(1)));\n                    } catch (NumberFormatException ignored) {}\n                }\n                if (lonStr != null && lonStr.length() > 0 && lonStr.charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            } else index++;\n\n            if (index < values.length) {\n                String speed = values[index++];\n                if (!speed.isEmpty()) {\n                    try {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n                    } catch (NumberFormatException ignored) {}\n                }\n            } else index++;\n\n            if (index < values.length) {\n                String course = values[index++];\n                if (!course.isEmpty()) {\n                    try {\n                        position.setCourse(Integer.parseInt(course));\n                    } catch (NumberFormatException ignored) {}\n                }\n            } else index++;\n\n            if (index < values.length) {\n                String altitude = values[index++];\n                if (!altitude.isEmpty()) {\n                    try {\n                        position.setAltitude(Integer.parseInt(altitude));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) {\n                String hdop = values[index++];\n                if (!hdop.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) {\n                String vdop = values[index++];\n                if (!vdop.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            break;\n\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index + 4 < values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n            } else index += 5;\n            break;\n\n        case \"COT\":\n            if (index < values.length) {\n                String odometer = values[index++];\n                if (!odometer.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) {\n                String[] hours = values[index++].split(\"-\");\n                if (hours.length >= 1) {\n                    try {\n                        position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                                + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                                + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            break;\n\n        case \"ADC\":\n            if (index < values.length) {\n                String power = values[index++];\n                if (!power.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_POWER, Double.parseDouble(power));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) {\n                String battery = values[index++];\n                if (!battery.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(battery));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) {\n                String adc1 = values[index++];\n                if (!adc1.isEmpty()) {\n                    try {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) {\n                String adc2 = values[index++];\n                if (!adc2.isEmpty()) {\n                    try {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            break;\n\n        case \"DTT\":\n            if (index < values.length) {\n                String status = values[index++];\n                if (!status.isEmpty()) {\n                    try {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) {\n                String io = values[index++];\n                if (!io.isEmpty()) {\n                    try {\n                        int integerValue = Integer.parseInt(io, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(integerValue, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(integerValue, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(integerValue, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(integerValue, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(integerValue, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(integerValue, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(integerValue, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(integerValue, 7));\n                    } catch (NumberFormatException ignored) {}\n                }\n            }\n\n            if (index < values.length) index++;\n            if (index < values.length) index++;\n\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n\n            break;\n\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n\n            break;\n\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n\n            break;\n\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n\n            break;\n\n        case \"IWD\":\n            while (index + 2 < values.length) {\n                try {\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n\n                    if (dataType == 0) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1) {\n                        index++; // temperature sensor serial number (ignored)\n                        String tempStr = values[index++];\n                        if (!tempStr.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));\n                        }\n                    }\n                } catch (NumberFormatException ignored) {\n                    index += 2;\n                }\n            }\n\n            break;\n\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}