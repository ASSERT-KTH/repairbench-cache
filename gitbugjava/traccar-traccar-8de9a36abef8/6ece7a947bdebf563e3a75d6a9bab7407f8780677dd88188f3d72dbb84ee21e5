{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    String[] values = (fragment.length() == dataIndex + 1) ? new String[0] : fragment.substring(dataIndex + 1).split(\";\");\n    int index = 0;\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Two distinct GPS formats:\n            // Format 1 (standard): first token is fix status (\"A\"/\"L\"), then satellites, latitude, longitude, speed, course, altitude, hdop, vdop.\n            // Format 2 (alternate): first token is a 6-digit time, then fix status, latitude, longitude, speed, course.\n            if (values.length > 0 && values[0].matches(\"\\\\d{6}\")) {\n                // Alternate format (with time)\n                int i = 1;\n                if (i < values.length) {\n                    position.setValid(\"A\".equals(values[i]));\n                    i++;\n                }\n                if (i < values.length && !values[i].isEmpty()) {\n                    String lat = values[i];\n                    double latitude = Double.parseDouble(lat.substring(1));\n                    if (lat.charAt(0) == 'S') {\n                        latitude = -latitude;\n                    }\n                    position.setLatitude(latitude);\n                }\n                i++;\n                if (i < values.length && !values[i].isEmpty()) {\n                    String lon = values[i];\n                    double longitude = Double.parseDouble(lon.substring(1));\n                    if (lon.charAt(0) == 'W') {\n                        longitude = -longitude;\n                    }\n                    position.setLongitude(longitude);\n                }\n                i++;\n                if (i < values.length && !values[i].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[i])));\n                }\n                i++;\n                if (i < values.length && !values[i].isEmpty()) {\n                    position.setCourse(Integer.parseInt(values[i]));\n                }\n                // Extra tokens (if any) are ignored.\n            } else {\n                // Standard format\n                int i = 0;\n                if (i < values.length) {\n                    position.setValid(\"A\".equals(values[i]));\n                }\n                i++;\n                if (i < values.length && !values[i].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[i]));\n                }\n                i++;\n                if (i < values.length && !values[i].isEmpty()) {\n                    String lat = values[i];\n                    double latitude = Double.parseDouble(lat.substring(1));\n                    if (lat.charAt(0) == 'S') {\n                        latitude = -latitude;\n                    }\n                    position.setLatitude(latitude);\n                }\n                i++;\n                if (i < values.length && !values[i].isEmpty()) {\n                    String lon = values[i];\n                    double longitude = Double.parseDouble(lon.substring(1));\n                    if (lon.charAt(0) == 'W') {\n                        longitude = -longitude;\n                    }\n                    position.setLongitude(longitude);\n                }\n                i++;\n                if (i < values.length) {\n                    String speed = values[i];\n                    if (!speed.isEmpty()) {\n                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n                    }\n                }\n                i++;\n                if (i < values.length) {\n                    String course = values[i];\n                    if (!course.isEmpty()) {\n                        position.setCourse(Integer.parseInt(course));\n                    }\n                }\n                i++;\n                if (i < values.length) {\n                    String alt = values[i];\n                    if (!alt.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(alt));\n                    }\n                }\n                i++;\n                if (i < values.length) {\n                    String hdop = values[i];\n                    if (!hdop.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));\n                    }\n                }\n                i++;\n                if (i < values.length) {\n                    String vdop = values[i];\n                    if (!vdop.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));\n                    }\n                }\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            position.setNetwork(new Network(CellTower.from(\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++])\n            )));\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int h = 0, m = 0, s = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) {\n                    h = Integer.parseInt(hours[0]);\n                }\n                if (hours.length > 1 && !hours[1].isEmpty()) {\n                    m = Integer.parseInt(hours[1]);\n                }\n                if (hours.length > 2 && !hours[2].isEmpty()) {\n                    s = Integer.parseInt(hours[2]);\n                }\n                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n            }\n            index++;\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n            }\n            index++;\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            index++;\n            if (index + 1 < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);\n            }\n            index += 2;\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index]);\n            }\n            index++;\n            if (index < values.length) {\n                position.set(\"packetType\", values[index]);\n            }\n            index++;\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index]);\n            }\n            index++;\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index]);\n            }\n            index++;\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index]);\n            }\n            index++;\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (values[index].isEmpty()) {\n                    break;\n                }\n                int sensorIndex = Integer.parseInt(values[index++]);\n                if (index >= values.length) {\n                    break;\n                }\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index++; // skip temperature sensor serial number\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    } else {\n                        index++;\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}