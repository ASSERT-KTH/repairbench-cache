{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            // Use -1 as limit to ensure trailing empty strings are not discarded\n            values = fragment.substring(dataIndex + 1).split(\";\", -1);\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                position.setValid(values[index++].equals(\"A\"));\n\n                String satellitesString = values[index++];\n                if (!satellitesString.isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesString));\n                }\n\n                String latitudeValue = values[index++];\n                if (!latitudeValue.isEmpty()) {\n                    position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));\n                    if (latitudeValue.charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                }\n\n                String longitudeValue = values[index++];\n                if (!longitudeValue.isEmpty()) {\n                    position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));\n                    if (longitudeValue.charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                }\n\n                String speedString = values[index++];\n                if (!speedString.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedString)));\n                }\n\n                String courseString = values[index++];\n                if (!courseString.isEmpty()) {\n                    position.setCourse(Integer.parseInt(courseString));\n                }\n\n                if (index < values.length) {\n                    String altitudeString = values[index++];\n                    if (!altitudeString.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altitudeString));\n                    }\n                }\n                if (index < values.length) {\n                    String hdopString = values[index++];\n                    if (!hdopString.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopString));\n                    }\n                }\n                if (index < values.length) {\n                    String vdopString = values[index++];\n                    if (!vdopString.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopString));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n                break;\n            case \"COT\":\n                if (index < values.length) {\n                    String odometerString = values[index++];\n                    if (!odometerString.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerString));\n                    }\n                }\n                if (index < values.length) {\n                    String hoursString = values[index++];\n                    if (!hoursString.isEmpty()) {\n                        String[] hours = hoursString.split(\"-\");\n                        int totalSeconds = 0;\n                        if (hours.length > 0 && !hours[0].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hours[0]) * 3600;\n                        }\n                        if (hours.length > 1 && !hours[1].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hours[1]) * 60;\n                        }\n                        if (hours.length > 2 && !hours[2].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hours[2]);\n                        }\n                        position.set(Position.KEY_HOURS, (long) totalSeconds * 1000);\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) { // Added check, as this was implicitly mandatory\n                    String powerString = values[index++];\n                    if (!powerString.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(powerString));\n                    }\n                }\n                if (index < values.length) {\n                    String batteryString = values[index++];\n                    if (!batteryString.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryString));\n                    }\n                }\n                if (index < values.length) {\n                    String adc1String = values[index++];\n                    if (!adc1String.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1String));\n                    }\n                }\n                if (index < values.length) {\n                    String adc2String = values[index++];\n                    if (!adc2String.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2String));\n                    }\n                }\n                break;\n            case \"DTT\":\n                if (index < values.length) { // Added check\n                    String statusString = values[index++];\n                    if (!statusString.isEmpty()) {\n                        position.set(Position.KEY_STATUS, Integer.parseInt(statusString, 16));\n                    }\n                }\n                if (index < values.length) {\n                    String ioString = values[index++];\n                    if (!ioString.isEmpty()) {\n                        int io = Integer.parseInt(ioString, 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                String geoValue = \"\";\n                if (index < values.length) {\n                    geoValue += values[index++];\n                }\n                if (index < values.length) {\n                    geoValue += values[index++];\n                }\n                if (!geoValue.isEmpty()) {\n                    position.set(Position.KEY_GEOFENCE, geoValue);\n                }\n                if (index < values.length) { // Added check\n                    position.set(\"eventStatus\", values[index++]);\n                }\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                if (index < values.length) { // Added check\n                    position.set(\"eventData\", values[index++]);\n                }\n                break;\n            case \"OBD\":\n                if (index < values.length) { // Added check\n                    position.set(\"obd\", values[index++]);\n                }\n                break;\n            case \"TAG\":\n                if (index < values.length) { // Added check\n                    position.set(\"tagData\", values[index++]);\n                }\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    if (index + 1 >= values.length) { // Need at least sensorIndex and dataType\n                        break;\n                    }\n                    String sensorIndexString = values[index++];\n                    if (sensorIndexString.isEmpty()) {\n                        index++; // Skip dataType if sensorIndex is empty/invalid\n                        continue;\n                    }\n                    int sensorIndex = Integer.parseInt(sensorIndexString);\n\n                    String dataTypeString = values[index++];\n                    if (dataTypeString.isEmpty()) {\n                        continue;\n                    }\n                    int dataType = Integer.parseInt(dataTypeString);\n\n                    if (dataType == 0) {\n                        if (index < values.length) {\n                            String driverId = values[index++];\n                            if (!driverId.isEmpty()) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);\n                            }\n                        }\n                    } else if (dataType == 1) {\n                        if (index + 1 >= values.length) { // Need serial number and temperature value\n                            break;\n                        }\n                        index += 1; // skip temperature sensor serial number\n                        String temperatureString = values[index++];\n                        if (!temperatureString.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temperatureString));\n                        }\n                    } else {\n                        // Skip any unknown data type values to prevent infinite loop\n                        // Assuming each unknown type consumes one value after dataType\n                        if (index < values.length) {\n                            index++;\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}