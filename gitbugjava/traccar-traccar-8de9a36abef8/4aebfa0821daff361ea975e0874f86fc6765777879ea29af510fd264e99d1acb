{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                // Valid (A/V)\n                // Assuming this field is always present and non-empty.\n                if (index < values.length) {\n                    position.setValid(values[index].equals(\"A\"));\n                }\n                index++;\n\n                // Satellites\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n                }\n                index++;\n\n                // Latitude\n                String latitudeValue = null;\n                if (index < values.length) {\n                    latitudeValue = values[index];\n                }\n                index++; // Advance index after consuming latitude string\n                if (latitudeValue != null && !latitudeValue.isEmpty()) { // Check if string is not null or empty\n                    position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));\n                    if (latitudeValue.charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                }\n\n                // Longitude\n                String longitudeValue = null;\n                if (index < values.length) {\n                    longitudeValue = values[index];\n                }\n                index++; // Advance index after consuming longitude string\n                if (longitudeValue != null && !longitudeValue.isEmpty()) { // Check if string is not null or empty\n                    position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));\n                    if (longitudeValue.charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                }\n\n                // Speed\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                }\n                index++;\n\n                // Course\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setCourse(Integer.parseInt(values[index]));\n                }\n                index++;\n\n                // Altitude\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setAltitude(Integer.parseInt(values[index]));\n                }\n                index++;\n\n                // HDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));\n                }\n                index++;\n\n                // VDOP\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));\n                }\n                index++;\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n\n                int mcc = 0, mnc = 0, lac = 0, cid = 0, rssi = 0;\n                \n                if (index < values.length && !values[index].isEmpty()) {\n                    mcc = Integer.parseInt(values[index]);\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    mnc = Integer.parseInt(values[index]);\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    lac = Integer.parseInt(values[index], 16);\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    cid = Integer.parseInt(values[index], 16);\n                }\n                index++;\n                if (index < values.length && !values[index].isEmpty()) {\n                    rssi = Integer.parseInt(values[index]);\n                }\n                index++;\n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                break;\n            case \"COT\":\n                // Odometer\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));\n                }\n                index++;\n\n                // Hours\n                if (index < values.length && !values[index].isEmpty()) {\n                    String[] hours = values[index].split(\"-\");\n                    long totalSeconds = 0;\n                    if (hours.length > 0 && !hours[0].isEmpty()) {\n                        totalSeconds += Long.parseLong(hours[0]) * 3600L;\n                    }\n                    if (hours.length > 1 && !hours[1].isEmpty()) {\n                        totalSeconds += Long.parseLong(hours[1]) * 60L;\n                    }\n                    if (hours.length > 2 && !hours[2].isEmpty()) {\n                        totalSeconds += Long.parseLong(hours[2]);\n                    }\n                    position.set(Position.KEY_HOURS, totalSeconds * 1000L);\n                }\n                index++;\n                break;\n            case \"ADC\":\n                // Power\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));\n                }\n                index++;\n\n                // Battery\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n                }\n                index++;\n\n                // ADC1\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));\n                }\n                index++;\n\n                // ADC2\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));\n                }\n                index++;\n                break;\n            case \"DTT\":\n                // Status\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));\n                }\n                index++;\n\n                // IO status\n                if (index < values.length) { // Check array bounds\n                    if (!values[index].isEmpty()) { // Then check if string is empty\n                        int io = Integer.parseInt(values[index], 16);\n                        position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                        position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                        position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                        position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                        position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                    }\n                }\n                index++;\n\n                // Geofence (concatenation of two fields)\n                String geofenceValue = \"\";\n                if (index < values.length) {\n                    geofenceValue += values[index];\n                }\n                index++;\n                if (index < values.length) {\n                    geofenceValue += values[index];\n                }\n                index++;\n                if (!geofenceValue.isEmpty()) { // Only set if the concatenated string is not empty\n                    position.set(Position.KEY_GEOFENCE, geofenceValue);\n                }\n\n                // Event Status\n                if (index < values.length) {\n                    position.set(\"eventStatus\", values[index]);\n                }\n                index++;\n\n                // Packet Type\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index]);\n                }\n                index++;\n                break;\n            case \"ETD\":\n                if (index < values.length) {\n                    position.set(\"eventData\", values[index]);\n                }\n                index++;\n                break;\n            case \"OBD\":\n                if (index < values.length) {\n                    position.set(\"obd\", values[index]);\n                }\n                index++;\n                break;\n            case \"TAG\":\n                if (index < values.length) {\n                    position.set(\"tagData\", values[index]);\n                }\n                index++;\n                break;\n            case \"IWD\":\n                while (index + 1 < values.length) { // Ensure at least sensorIndex and dataType are available\n                    int sensorIndex = 0;\n                    if (!values[index].isEmpty()) {\n                        sensorIndex = Integer.parseInt(values[index]);\n                    }\n                    index++;\n\n                    int dataType = -1; // Default to invalid type\n                    if (index < values.length && !values[index].isEmpty()) {\n                        dataType = Integer.parseInt(values[index]);\n                    }\n                    index++;\n\n                    if (dataType == 0) {\n                        if (index < values.length) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);\n                        }\n                        index++;\n                    } else if (dataType == 1) {\n                        index += 1; // Skip temperature sensor serial number field\n                        if (index < values.length && !values[index].isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));\n                        }\n                        index++;\n                    } else {\n                        // Unknown data type, consume the associated field to maintain index alignment for next iteration\n                        // Assuming unknown data type consumes one field after dataType\n                        if (index < values.length) {\n                            index++;\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}