{
    "generation": "    private void decodeFragment(Position position, String fragment) {\n\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                position.setValid(values[index++].equals(\"A\"));\n                \n                String satellitesString = values[index++];\n                if (!satellitesString.isEmpty()) {\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesString));\n                }\n\n                String latitudeValue = values[index]; // Don't increment yet\n                if (!latitudeValue.isEmpty()) {\n                    position.setLatitude(Double.parseDouble(latitudeValue.substring(1)));\n                }\n                if (values[index++].charAt(0) == 'S') { // Increment here\n                    position.setLatitude(-position.getLatitude());\n                }\n\n                String longitudeValue = values[index]; // Don't increment yet\n                if (!longitudeValue.isEmpty()) {\n                    position.setLongitude(Double.parseDouble(longitudeValue.substring(1)));\n                }\n                if (values[index++].charAt(0) == 'W') { // Increment here\n                    position.setLongitude(-position.getLongitude());\n                }\n\n                // Speed parsing already has an empty check and is fine\n                if (!values[index++].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n                }\n                \n                String courseString = values[index++];\n                if (!courseString.isEmpty()) {\n                    position.setCourse(Integer.parseInt(courseString));\n                }\n\n                if (index < values.length) {\n                    String altitudeValue = values[index++];\n                    if (!altitudeValue.isEmpty()) {\n                        position.setAltitude(Integer.parseInt(altitudeValue));\n                    }\n                }\n                if (index < values.length) {\n                    String hdopValue = values[index++];\n                    if (!hdopValue.isEmpty()) {\n                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopValue));\n                    }\n                }\n                if (index < values.length) {\n                    String vdopValue = values[index++];\n                    if (!vdopValue.isEmpty()) {\n                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopValue));\n                    }\n                }\n                break;\n            case \"GSM\":\n                index += 1; // registration status\n                index += 1; // signal strength\n                \n                int mcc = 0;\n                if (index < values.length) {\n                    String valMcc = values[index++];\n                    if (!valMcc.isEmpty()) mcc = Integer.parseInt(valMcc);\n                }\n\n                int mnc = 0;\n                if (index < values.length) {\n                    String valMnc = values[index++];\n                    if (!valMnc.isEmpty()) mnc = Integer.parseInt(valMnc);\n                }\n\n                int lac = 0;\n                if (index < values.length) {\n                    String valLac = values[index++];\n                    if (!valLac.isEmpty()) lac = Integer.parseInt(valLac, 16);\n                }\n\n                int cid = 0;\n                if (index < values.length) {\n                    String valCid = values[index++];\n                    if (!valCid.isEmpty()) cid = Integer.parseInt(valCid, 16);\n                }\n\n                int rssi = 0;\n                if (index < values.length) {\n                    String valRssi = values[index++];\n                    if (!valRssi.isEmpty()) {\n                        rssi = Integer.parseInt(valRssi);\n                    }\n                }\n                \n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));\n                break;\n            case \"COT\":\n                if (index < values.length) {\n                    String odometerValue = values[index++];\n                    if (!odometerValue.isEmpty()) {\n                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometerValue));\n                    }\n                }\n                if (index < values.length) {\n                    String hoursString = values[index++];\n                    if (!hoursString.isEmpty()) {\n                        String[] hours = hoursString.split(\"-\");\n                        int totalSeconds = 0;\n                        if (hours.length > 0 && !hours[0].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hours[0]) * 3600;\n                        }\n                        if (hours.length > 1 && !hours[1].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hours[1]) * 60;\n                        }\n                        if (hours.length > 2 && !hours[2].isEmpty()) {\n                            totalSeconds += Integer.parseInt(hours[2]);\n                        }\n                        position.set(Position.KEY_HOURS, (long) totalSeconds * 1000);\n                    }\n                }\n                break;\n            case \"ADC\":\n                if (index < values.length) { \n                    String powerValue = values[index++];\n                    if (!powerValue.isEmpty()) {\n                        position.set(Position.KEY_POWER, Double.parseDouble(powerValue));\n                    }\n                }\n\n                if (index < values.length) {\n                    String batteryValue = values[index++];\n                    if (!batteryValue.isEmpty()) {\n                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryValue));\n                    }\n                }\n                if (index < values.length) {\n                    String adc1Value = values[index++];\n                    if (!adc1Value.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Value));\n                    }\n                }\n                if (index < values.length) {\n                    String adc2Value = values[index++];\n                    if (!adc2Value.isEmpty()) {\n                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Value));\n                    }\n                }\n                break;\n            case \"DTT\":\n                String statusString = values[index++];\n                if (!statusString.isEmpty()) {\n                    position.set(Position.KEY_STATUS, Integer.parseInt(statusString, 16));\n                }\n\n                if (index < values.length && !values[index].isEmpty()) {\n                    String ioValue = values[index++];\n                    int io = Integer.parseInt(ioValue, 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                } else if (index < values.length) { // consume the empty string if it exists\n                    index++;\n                }\n\n                String geofencePart1 = values[index++];\n                String geofencePart2 = values[index++];\n                position.set(Position.KEY_GEOFENCE, geofencePart1 + geofencePart2);\n\n                position.set(\"eventStatus\", values[index++]);\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                position.set(\"eventData\", values[index++]);\n                break;\n            case \"OBD\":\n                position.set(\"obd\", values[index++]);\n                break;\n            case \"TAG\":\n                position.set(\"tagData\", values[index++]);\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    String sensorIndexString = values[index++];\n                    if (sensorIndexString.isEmpty()) {\n                        break;\n                    }\n                    int sensorIndex = Integer.parseInt(sensorIndexString);\n\n                    if (index >= values.length) {\n                        break;\n                    }\n                    String dataTypeString = values[index++];\n                    if (dataTypeString.isEmpty()) {\n                        break;\n                    }\n                    int dataType = Integer.parseInt(dataTypeString);\n\n                    if (dataType == 0) {\n                        if (index >= values.length) {\n                            break;\n                        }\n                        index++;\n                    } else if (dataType == 1) {\n                        if (index >= values.length) {\n                            break;\n                        }\n                        index += 1; // temperature sensor serial number\n                        \n                        if (index >= values.length) {\n                            break;\n                        }\n                        String tempValue = values[index++];\n                        if (!tempValue.isEmpty()) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));\n                        }\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}