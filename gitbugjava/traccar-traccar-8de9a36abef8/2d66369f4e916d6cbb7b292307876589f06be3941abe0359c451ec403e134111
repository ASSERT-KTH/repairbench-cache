{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    if (dataIndex < 0) {\n        return; // invalid fragment, do nothing\n    }\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            // Defensive check for sufficient values length\n            if (values.length < 4) {\n                break;\n            }\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, values.length > index ? parseIntSafe(values[index++], 0) : 0);\n\n            // Latitude\n            if (values.length > index && !values[index].isEmpty()) {\n                String latValue = values[index];\n                position.setLatitude(parseDoubleSafe(latValue.substring(1), 0));\n                if (latValue.charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n\n            // Longitude\n            if (values.length > index && !values[index].isEmpty()) {\n                String lonValue = values[index];\n                position.setLongitude(parseDoubleSafe(lonValue.substring(1), 0));\n                if (lonValue.charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n\n            // Speed\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(parseIntSafe(values[index], 0)));\n            }\n            index++;\n\n            // Course\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setCourse(parseIntSafe(values[index], 0));\n            }\n            index++;\n\n            // Altitude\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setAltitude(parseIntSafe(values[index], 0));\n                index++;\n            }\n\n            // HDOP\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, parseDoubleSafe(values[index++], 0));\n            }\n\n            // VDOP\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, parseDoubleSafe(values[index++], 0));\n            }\n            break;\n\n        case \"GSM\":\n            index += 2; // registration status and signal strength\n            if (values.length >= index + 5) {\n                position.setNetwork(new Network(CellTower.from(\n                    parseIntSafe(values[index++], 0), parseIntSafe(values[index++], 0),\n                    parseIntSafeHex(values[index++], 0), parseIntSafeHex(values[index++], 0),\n                    parseIntSafe(values[index++], 0)\n                )));\n            }\n            break;\n        case \"COT\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, parseLongSafe(values[index++], 0));\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int ms = 0;\n                try {\n                    if (hours.length >= 1) ms += Integer.parseInt(hours[0]) * 3600 * 1000;\n                    if (hours.length >= 2) ms += Integer.parseInt(hours[1]) * 60 * 1000;\n                    if (hours.length >= 3) ms += Integer.parseInt(hours[2]) * 1000;\n                    position.set(Position.KEY_HOURS, ms);\n                } catch (NumberFormatException ex) {\n                    // Ignore parsing errors, do not set hours\n                }\n            }\n            break;\n        case \"ADC\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, parseDoubleSafe(values[index++], 0));\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, parseDoubleSafe(values[index++], 0));\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, parseDoubleSafe(values[index++], 0));\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, parseDoubleSafe(values[index++], 0));\n            }\n            break;\n        case \"DTT\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, parseIntSafe(values[index++], 16));\n            } else {\n                index++;\n            }\n            int io = 0;\n            if (values.length > index && !values[index].isEmpty()) {\n                io = parseIntSafe(values[index++], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            } else {\n                index++;\n            }\n            String geofence = \"\";\n            if (values.length > index && !values[index].isEmpty()) {\n                geofence += values[index++];\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                geofence += values[index++];\n            } else {\n                index++;\n            }\n            position.set(Position.KEY_GEOFENCE, geofence);\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            } else {\n                index++;\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (values.length > index && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index + 1 < values.length) {\n                int sensorIndex = parseIntSafe(values[index++], 0);\n                int dataType = parseIntSafe(values[index++], 0);\n                if (dataType == 0) {\n                    if (values.length > index) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else {\n                        index++;\n                    }\n                } else if (dataType == 1) {\n                    // Defensive: Serial number can be empty or missing\n                    if (values.length > index) {\n                        index++; // temperature sensor serial number\n                    }\n                    if (values.length > index && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, parseDoubleSafe(values[index++], 0));\n                    } else {\n                        index++;\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n// Helper methods for safe parsing\nprivate static int parseIntSafe(String value, int def) {\n    try {\n        return Integer.parseInt(value);\n    } catch (Exception ex) {\n        return def;\n    }\n}\nprivate static int parseIntSafe(String value, int radix, int def) {\n    try {\n        return Integer.parseInt(value, radix);\n    } catch (Exception ex) {\n        return def;\n    }\n}\nprivate static int parseIntSafeHex(String value, int def) {\n    try {\n        return Integer.parseInt(value, 16);\n    } catch (Exception ex) {\n        return def;\n    }\n}\nprivate static double parseDoubleSafe(String value, double def) {\n    try {\n        return Double.parseDouble(value);\n    } catch (Exception ex) {\n        return def;\n    }\n}\nprivate static long parseLongSafe(String value, long def) {\n    try {\n        return Long.parseLong(value);\n    } catch (Exception ex) {\n        return def;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}