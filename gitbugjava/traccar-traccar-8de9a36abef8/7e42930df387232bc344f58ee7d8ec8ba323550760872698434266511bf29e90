{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (index < values.length) {\n                position.setValid(values[index++].equals(\"A\"));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                String speedValue = values[index];\n                if (!speedValue.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)));\n                }\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            // check if there are enough values for CellTower.from\n            if (index + 4 < values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int hourVal = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) {\n                    hourVal += Integer.parseInt(hours[0]) * 3600;\n                }\n                if (hours.length > 1 && !hours[1].isEmpty()) {\n                    hourVal += Integer.parseInt(hours[1]) * 60;\n                }\n                if (hours.length > 2 && !hours[2].isEmpty()) {\n                    hourVal += Integer.parseInt(hours[2]);\n                }\n                position.set(Position.KEY_HOURS, hourVal * 1000);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            } else {\n                index++;\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                index++;\n            } else {\n                index++;\n            }\n            // Geofence and eventStatus\n            if (index + 1 < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            } else if (index < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index++]);\n                index++; // skip possible missing value\n            } else {\n                index += 2;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            } else {\n                index++;\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            } else {\n                index++;\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            } else {\n                index++;\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            } else {\n                index++;\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (index + 1 >= values.length) break;\n                int sensorIndex = 0, dataType = 0;\n                try {\n                    if (!values[index].isEmpty()) {\n                        sensorIndex = Integer.parseInt(values[index]);\n                    }\n                } catch (NumberFormatException e) {\n                    // skip to next\n                }\n                index++;\n                try {\n                    if (!values[index].isEmpty()) {\n                        dataType = Integer.parseInt(values[index]);\n                    }\n                } catch (NumberFormatException e) {\n                    // skip to next\n                }\n                index++;\n                if (dataType == 0) {\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else {\n                        index++;\n                    }\n                } else if (dataType == 1) {\n                    // skip temperature sensor serial number\n                    index++;\n                    if (index < values.length && !values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    } else {\n                        index++;\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}