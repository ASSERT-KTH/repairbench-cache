{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // char index in input\n        int len = input.length(); // char length\n        while (pos < len) {\n            // Call the abstract method which expects a char index\n            // It returns the number of chars consumed\n            int consumed = translate(input, pos, out);\n\n            // If no characters were consumed, this means translation did not occur\n            if (consumed == 0) {\n                // Grab the code point at the current char index\n                int codePoint = Character.codePointAt(input, pos);\n                // Write the characters for this code point verbatim\n                out.write(Character.toChars(codePoint));\n                // Advance the position by the number of chars used by the code point\n                pos += Character.charCount(codePoint);\n            }\n            // If characters were consumed (i.e., translation occurred)\n            else {\n                // Advance the position by the number of chars consumed by the translator\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}