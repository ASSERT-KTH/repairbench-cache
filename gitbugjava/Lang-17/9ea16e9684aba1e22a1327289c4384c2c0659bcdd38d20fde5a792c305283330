{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // char index\n        int len = input.length(); // char length\n        while (pos < len) {\n            // Call the abstract translate method.\n            // It should return the number of char units consumed.\n            int consumed = translate(input, pos, out);\n            // If no chars were consumed, this means translation did not occur\n            if (consumed == 0) {\n                // Grab the code point at the current position\n                int codepoint = Character.codePointAt(input, pos);\n                // Convert the code point to its char representation\n                // This handles supplementary characters correctly (returning 2 chars)\n                char[] c = Character.toChars(codepoint);\n                // Write the chars to the output writer\n                out.write(c);\n                // Advance the position by the number of chars consumed by this code point\n                pos += Character.charCount(codepoint);\n            }\n            else {\n                // If chars were consumed, advance the position by the number reported.\n                // The contract with the abstract translate method is that it must\n                // consume characters corresponding to whole code points.\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}