{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int idx = 0; // Use character index, not code point index\n        int len = input.length(); // Use character length\n        while (idx < len) {\n            // Pass the character index to the abstract translate method.\n            // Abstract method's contract is:\n            // - Check input starting at index 'idx'.\n            // - If translation occurs: write result to 'out', return # of chars consumed from input.\n            // - If no translation: return 0.\n            int consumed = translate(input, idx, out);\n            if (consumed == 0) {\n                // No translation occurred by the abstract method.\n                // We need to write the original character(s) corresponding to the\n                // code point starting at the current index 'idx'.\n                // This handles supplementary characters (surrogate pairs) correctly.\n                int codepoint = Character.codePointAt(input, idx);\n                out.write(Character.toChars(codepoint));\n                // Advance the index by the number of characters (UTF-16 code units)\n                // occupied by this code point (1 for BMP, 2 for supplementary).\n                idx += Character.charCount(codepoint);\n            }\n            else {\n                // Translation occurred. The abstract translate(input, idx, out)\n                // method wrote the translated output to 'out' and returned the\n                // number of input characters consumed.\n                // Advance our character index by the number of characters consumed.\n                idx += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}