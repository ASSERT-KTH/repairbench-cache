{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // char index\n        int len = input.length(); // char length\n        while (pos < len) {\n            // Call the abstract translate method with the current char index\n            int consumed = translate(input, pos, out);\n\n            // If consumed is 0, the code point at pos was not translated\n            if (consumed == 0) {\n                // Find the code point starting at the current character index 'pos'\n                // This handles supplementary characters (surrogate pairs) correctly\n                int codePoint = Character.codePointAt(input, pos);\n\n                // Write the character(s) corresponding to the code point to the output\n                out.write(Character.toChars(codePoint));\n\n                // Advance the position by the number of chars used by this code point (1 for BMP, 2 for supplementary)\n                pos += Character.charCount(codePoint);\n            }\n            // If consumed > 0, the translator handled 'consumed' code points starting at char index 'pos'\n            else {\n                // The translator is responsible for writing the translated output to 'out'.\n                // We need to advance the position ('pos') by the total number of characters\n                // covered by the 'consumed' code points.\n                for (int i = 0; i < consumed; i++) {\n                    // Advance 'pos' over the i-th consumed code point.\n                    // We find the code point starting at the current 'pos' and advance 'pos'\n                    // by the number of characters it occupies.\n                    int codePoint = Character.codePointAt(input, pos);\n                    pos += Character.charCount(codePoint);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}