{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // Current position (char index) in the input sequence\n        int sz = input.length();\n        while (pos < sz) {\n            // Call the abstract translate method, passing the current char index.\n            // Assume it returns the number of chars consumed.\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If the translate method consumed zero chars, it means the code point\n                // starting at 'pos' should be handled literally.\n                // We need to read the code point, which might be a surrogate pair.\n                int codePoint = Character.codePointAt(input, pos);\n                // Write the character(s) representing this code point to the output.\n                out.write(Character.toChars(codePoint));\n                // Advance the position by the number of chars constituting this code point.\n                pos += Character.charCount(codePoint);\n            }\n            else {\n                // If the translate method consumed one or more characters,\n                // simply advance the position by the number of chars consumed.\n                // The translate method itself is responsible for writing to 'out'.\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}