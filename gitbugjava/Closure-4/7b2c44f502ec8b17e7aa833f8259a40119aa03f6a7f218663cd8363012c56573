{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    // Check for cycle after registry resolution.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolved) {\n      // If registry resolution worked, finish up.\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // Check for cycle *before* property resolution. This is the key fix\n    // to detect cycles like T implements T before potentially recursing infinitely.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      // If a cycle was detected, don't try to resolve properties further,\n      // as it could lead to stack overflows. Proceed to final resolution steps.\n      // We might already be resolved to an error type, or partially resolved.\n    } else {\n      // Only resolve via properties if no cycle was detected beforehand.\n      resolveViaProperties(t, enclosing);\n      // Check for cycle again *after* property resolution, in case properties\n      // resolution itself introduced a cycle.\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n    }\n\n    // Final resolution steps.\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}