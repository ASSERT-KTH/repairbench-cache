{
    "generation": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        // Preserve the original mock settings\n        org.mockito.mock.MockCreationSettings<T> mockSettings = oldMockHandler.getMockSettings();\n        // Create a new handler with the original settings, effectively resetting invocations and stubbings\n        // Assuming the MockHandler constructor correctly uses the settings for configuration\n        // and initializes a clean state (no invocations, default stubbings per settings).\n        // NOTE: The original buggy code used `new MockHandler<T>(oldMockHandler)`.\n        // If that constructor is specifically designed for reset (copies settings, clears state),\n        // then `new MockHandler<T>(oldMockHandler)` could be correct.\n        // However, creating a handler directly from settings is the standard Mockito approach.\n        // We'll stick closer to the standard approach assuming MockHandler has a constructor accepting settings.\n        // If not, the original `new MockHandler<T>(oldMockHandler)` might be intended,\n        // but the crucial part is using original settings for the filter below.\n        MockHandler<T> newMockHandler = new MockHandler<T>(mockSettings); // Standard way to create a handler\n        // Create a new filter using the new handler and the ORIGINAL mock settings\n        // This ensures listeners and other settings are not lost.\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) mockSettings);\n        ((Factory) mock).setCallback(0, newFilter);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}