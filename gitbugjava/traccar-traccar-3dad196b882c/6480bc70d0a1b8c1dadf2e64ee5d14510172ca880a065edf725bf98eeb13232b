{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)) + 2000)\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() >= 4) {\n            int subtypeIndex = buf.readerIndex();\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort();\n\n            // Prevent negative/invalid lengths and incomplete data reads\n            if (length < 4 || buf.readableBytes() < length - 4) {\n                // Not enough data, roll back and break out\n                buf.readerIndex(subtypeIndex);\n                break;\n            }\n\n            int dataLen = length - 4;\n\n            switch (subtype) {\n                case 0x0001:\n                    if (dataLen >= 13) {  // minimum expected data bytes for this subtype\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = buf.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        if (buf.readableBytes() >= 4) {\n                            buf.readUnsignedInt(); // trip id\n                        }\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                case 0x0005:\n                    if (dataLen >= 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                        buf.readUnsignedInt(); // run time\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                case 0x0009:\n                    if (buf.readableBytes() >= dataLen) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(dataLen, StandardCharsets.US_ASCII).toString());\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                case 0x000F:\n                    // DTC codes (trouble codes)\n                    if (dataLen % 2 == 0 && dataLen > 0 && buf.readableBytes() >= dataLen) {\n                        StringBuilder dtcs = new StringBuilder();\n                        for (int i = 0; i < dataLen / 2; i++) {\n                            int code = buf.readUnsignedShort();\n                            char type;\n                            switch (code >> 14) {\n                                case 0: type = 'P'; break;\n                                case 1: type = 'C'; break;\n                                case 2: type = 'B'; break;\n                                case 3: type = 'U'; break;\n                                default: type = ' '; break;\n                            }\n                            int value = code & 0x3FFF;\n                            if (dtcs.length() > 0) {\n                                dtcs.append(' ');\n                            }\n                            dtcs.append(type)\n                                    .append(String.format(\"%04d\", value));\n                        }\n                        position.set(Position.KEY_DTCS, dtcs.toString());\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                case 0x0011:\n                    if (dataLen >= 4) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                case 0x0014:\n                    if (dataLen >= 6) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                case 0x0020:\n                    if (buf.readableBytes() >= dataLen) {\n                        String[] cells = buf.readCharSequence(\n                                dataLen, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                        for (String cell : cells) {\n                            if (cell.isEmpty()) continue;\n                            String[] values = cell.split(\"@\");\n                            if (values.length == 4) {\n                                try {\n                                    network.addCellTower(CellTower.from(\n                                            Integer.parseInt(values[0]),\n                                            Integer.parseInt(values[1]),\n                                            Integer.parseInt(values[2], 16),\n                                            Integer.parseInt(values[3], 16)));\n                                } catch (NumberFormatException ignored) {\n                                }\n                            }\n                        }\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                case 0x0021:\n                    if (buf.readableBytes() >= dataLen) {\n                        String[] points = buf.readCharSequence(\n                                dataLen, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                        for (String point : points) {\n                            if (point.isEmpty()) continue;\n                            String[] values = point.split(\"@\");\n                            if (values.length == 2) {\n                                try {\n                                    network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                                } catch (NumberFormatException ignored) {\n                                }\n                            }\n                        }\n                    } else {\n                        buf.skipBytes(dataLen);\n                    }\n                    break;\n                default:\n                    buf.skipBytes(dataLen);\n                    break;\n            }\n        }\n\n        if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())\n                || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}