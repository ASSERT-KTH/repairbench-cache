{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() >= 4) { // Must have at least 4 bytes for subtype and length fields\n            int subtype = buf.readUnsignedShort();\n            int itemDeclaredTotalLength = buf.readUnsignedShort(); // The \"length\" field in the spec, seems to be total TLV item length\n\n            int payloadLength = itemDeclaredTotalLength - 4; // Actual length of the value part\n\n            if (payloadLength < 0) {\n                // This means itemDeclaredTotalLength < 4, which is invalid for a T(2)+L(2)+V(>=0) structure.\n                // Malformed packet. Stop processing TLVs for this position.\n                break;\n            }\n\n            if (buf.readableBytes() < payloadLength) {\n                // Not enough bytes in the buffer for the declared payload length.\n                // Packet is truncated or malformed. Stop processing TLVs.\n                break;\n            }\n\n            ByteBuf valuePayload = buf.readSlice(payloadLength); // Create a slice for the payload\n\n            switch (subtype) {\n                case 0x0001:\n                    // Expected structure consumes 17 bytes.\n                    if (valuePayload.readableBytes() >= 17) {\n                        int coolantTemperature = valuePayload.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = valuePayload.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", valuePayload.readUnsignedByte());\n                        valuePayload.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, valuePayload.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, valuePayload.readUnsignedShort());\n                        position.set(Position.KEY_POWER, valuePayload.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, valuePayload.readUnsignedByte() * 0.4);\n                        valuePayload.readUnsignedInt(); // trip id\n                    }\n                    break;\n                case 0x0005:\n                    // Expected structure: 1 (RSSI) + 1 (HDOP) + 4 (run time) = 6 bytes\n                    if (valuePayload.readableBytes() >= 6) {\n                        position.set(Position.KEY_RSSI, valuePayload.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, valuePayload.readUnsignedByte());\n                        valuePayload.readUnsignedInt(); // run time\n                    }\n                    break;\n                case 0x0009: // VIN\n                    // payloadLength is the length of the VIN string. valuePayload contains exactly this.\n                    position.set(\n                            Position.KEY_VIN, valuePayload.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011: // Hours\n                    // Expected structure: 4 bytes (unsigned int)\n                    if (valuePayload.readableBytes() >= 4) {\n                        position.set(Position.KEY_HOURS, valuePayload.readUnsignedInt() * 0.05);\n                    }\n                    break;\n                case 0x0014:\n                    // Expected structure: 1+1+1+2+1 = 6 bytes\n                    if (valuePayload.readableBytes() >= 6) {\n                        position.set(Position.KEY_ENGINE_LOAD, valuePayload.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", valuePayload.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", valuePayload.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", valuePayload.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, valuePayload.readUnsignedByte() / 255.0);\n                    }\n                    break;\n                case 0x0020: // Cell towers\n                    String cellDataString = valuePayload.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString();\n                    String[] cells = cellDataString.split(\"\\\\+\");\n                    for (String cell : cells) {\n                        if (cell.isEmpty()) {\n                            continue;\n                        }\n                        String[] values = cell.split(\"@\");\n                        if (values.length == 4) {\n                            try {\n                                network.addCellTower(CellTower.from(\n                                        Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                        Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                            } catch (NumberFormatException e) {\n                                // Ignore malformed cell entry\n                            }\n                        }\n                    }\n                    break;\n                case 0x0021: // WiFi points\n                    String wifiDataString = valuePayload.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString();\n                    String[] points = wifiDataString.split(\"\\\\+\");\n                    for (String point : points) {\n                        if (point.isEmpty()) {\n                            continue;\n                        }\n                        String[] values = point.split(\"@\");\n                        if (values.length == 2) {\n                            try {\n                                network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                            } catch (NumberFormatException e) {\n                                // Ignore malformed wifi entry\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype. Its payload has been consumed from 'buf' by readSlice into 'valuePayload'.\n                    // No explicit skip needed here.\n                    break;\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}