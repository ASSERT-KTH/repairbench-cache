{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) { // Ensure subtype (2 bytes) and block total length (2 bytes) can be read\n            int subtype = buf.readUnsignedShort();\n            int blockTotalLength = buf.readUnsignedShort(); // This is the length including subtype and this length field\n            int valueDataLength = blockTotalLength - 4;    // Actual length of the value data\n\n            if (valueDataLength < 0) {\n                // Declared total block length is less than 4, which is impossible for a block with 2-byte subtype and 2-byte length field.\n                // This indicates a malformed packet or data corruption.\n                // Example: Log.warn(\"HuaSheng: Malformed block. Subtype: \" + subtype + \", Declared total length: \" + blockTotalLength + \". Stopping TLV parsing.\");\n                break; // Stop processing further TLV blocks\n            }\n\n            if (valueDataLength > buf.readableBytes()) {\n                // The declared length for the value data of this block exceeds what's actually available in the buffer.\n                // This indicates a truncated packet or an incorrect length field.\n                // Example: Log.warn(\"HuaSheng: Block data length (\" + valueDataLength + \") exceeds readable bytes (\" + buf.readableBytes() + \") for subtype: \" + subtype + \". Stopping TLV parsing.\");\n                break; // Stop processing further TLV blocks\n            }\n            \n            // At this point, valueDataLength is non-negative and does not exceed buf.readableBytes().\n\n            switch (subtype) {\n                case 0x0001:\n                    int expectedLength0001 = 1 + 2 + 1 + 2 + 2 + 2 + 2 + 1 + 4; // 17 bytes\n                    if (valueDataLength >= expectedLength0001) {\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = buf.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        buf.readUnsignedInt(); // trip id\n                        if (valueDataLength > expectedLength0001) {\n                            buf.skipBytes(valueDataLength - expectedLength0001); // Skip any extra data in this block\n                        }\n                    } else {\n                        // Example: Log.warn(\"HuaSheng: Subtype 0x0001 data length \" + valueDataLength + \" is less than expected \" + expectedLength0001 + \". Skipping block.\");\n                        buf.skipBytes(valueDataLength); // Skip the incomplete/malformed block's data\n                    }\n                    break;\n                case 0x0005:\n                    int expectedLength0005 = 1 + 1 + 4; // 6 bytes\n                    if (valueDataLength >= expectedLength0005) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                        buf.readUnsignedInt(); // run time\n                        if (valueDataLength > expectedLength0005) {\n                            buf.skipBytes(valueDataLength - expectedLength0005);\n                        }\n                    } else {\n                        // Example: Log.warn(\"HuaSheng: Subtype 0x0005 data length \" + valueDataLength + \" is less than expected \" + expectedLength0005 + \". Skipping block.\");\n                        buf.skipBytes(valueDataLength);\n                    }\n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(valueDataLength, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    int expectedLength0011 = 4; // 4 bytes\n                    if (valueDataLength >= expectedLength0011) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                        if (valueDataLength > expectedLength0011) {\n                            buf.skipBytes(valueDataLength - expectedLength0011);\n                        }\n                    } else {\n                        // Example: Log.warn(\"HuaSheng: Subtype 0x0011 data length \" + valueDataLength + \" is less than expected \" + expectedLength0011 + \". Skipping block.\");\n                        buf.skipBytes(valueDataLength);\n                    }\n                    break;\n                case 0x0014:\n                    int expectedLength0014 = 1 + 1 + 1 + 2 + 1; // 6 bytes\n                    if (valueDataLength >= expectedLength0014) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                        if (valueDataLength > expectedLength0014) {\n                            buf.skipBytes(valueDataLength - expectedLength0014);\n                        }\n                    } else {\n                        // Example: Log.warn(\"HuaSheng: Subtype 0x0014 data length \" + valueDataLength + \" is less than expected \" + expectedLength0014 + \". Skipping block.\");\n                        buf.skipBytes(valueDataLength);\n                    }\n                    break;\n                case 0x0020:\n                    String cellsText = buf.readCharSequence(valueDataLength, StandardCharsets.US_ASCII).toString();\n                    String[] cells = cellsText.split(\"\\\\+\");\n                    for (String cell : cells) {\n                        if (cell.isEmpty()) { // Skips empty strings if delimiter is at start/end or consecutive\n                            continue;\n                        }\n                        String[] values = cell.split(\"@\");\n                        if (values.length >= 4) {\n                            try {\n                                network.addCellTower(CellTower.from(\n                                        Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                        Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                            } catch (NumberFormatException e) {\n                                // Example: Log.warn(\"HuaSheng: Malformed cell data: \\\"\" + cell + \"\\\"\", e);\n                            }\n                        } else {\n                            // Example: Log.warn(\"HuaSheng: Malformed cell data string (not enough parts): \\\"\" + cell + \"\\\"\");\n                        }\n                    }\n                    break;\n                case 0x0021:\n                    String pointsText = buf.readCharSequence(valueDataLength, StandardCharsets.US_ASCII).toString();\n                    String[] points = pointsText.split(\"\\\\+\");\n                    for (String point : points) {\n                        if (point.isEmpty()) { // Skips empty strings\n                            continue;\n                        }\n                        String[] values = point.split(\"@\");\n                        if (values.length >= 2) {\n                            try {\n                                network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                            } catch (NumberFormatException e) {\n                                // Example: Log.warn(\"HuaSheng: Malformed WiFi access point data: \\\"\" + point + \"\\\"\", e);\n                            }\n                        } else {\n                            // Example: Log.warn(\"HuaSheng: Malformed WiFi access point data string (not enough parts): \\\"\" + point + \"\\\"\");\n                        }\n                    }\n                    break;\n                default:\n                    buf.skipBytes(valueDataLength);\n                    break;\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}