{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) { // Ensure enough bytes for subtype (2) and rawLength (2)\n            int subtype = buf.readUnsignedShort();\n            int rawLength = buf.readUnsignedShort(); // This is the total length of the block\n\n            // Calculate payload length: rawLength minus the 4 bytes for subtype and rawLength itself.\n            int payloadLength = rawLength - 4;\n\n            // Critical validation check for malformed or truncated blocks:\n            // 1. If payloadLength is negative (meaning rawLength < 4), the header is contradictory.\n            // 2. If payloadLength is greater than the remaining readable bytes, the packet is truncated.\n            // In either case, the packet is malformed, and we cannot reliably parse further blocks.\n            // It's safer to break out of the loop.\n            if (payloadLength < 0 || payloadLength > buf.readableBytes()) {\n                break;\n            }\n\n            // Create a slice representing only the payload data for the current block.\n            // This automatically advances the main buffer's reader index by payloadLength.\n            // All subsequent reads for this specific block should happen from `blockData`.\n            ByteBuf blockData = buf.readSlice(payloadLength);\n\n            switch (subtype) {\n                case 0x0001: // Expected payload length: 1 (coolant) + 2 (rpm) + 1 (avgSpeed) + 2 (intervalFuel) + 2 (fuelCons) + 2 (odomTrip) + 2 (power) + 1 (fuelLevel) + 4 (tripId) = 17 bytes\n                    if (blockData.readableBytes() < 17) {\n                        break; // Not enough data for all expected fields in this block type\n                    }\n                    int coolantTemperature = blockData.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = blockData.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", blockData.readUnsignedByte());\n                    blockData.readUnsignedShort(); // interval fuel consumption\n                    position.set(Position.KEY_FUEL_CONSUMPTION, blockData.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, blockData.readUnsignedShort());\n                    position.set(Position.KEY_POWER, blockData.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, blockData.readUnsignedByte() * 0.4);\n                    blockData.readUnsignedInt(); // trip id\n                    break;\n                case 0x0005: // Expected payload length: 1 (RSSI) + 1 (HDOP) + 4 (runTime) = 6 bytes\n                    if (blockData.readableBytes() < 6) {\n                        break;\n                    }\n                    position.set(Position.KEY_RSSI, blockData.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, blockData.readUnsignedByte());\n                    blockData.readUnsignedInt(); // run time\n                    break;\n                case 0x0009:\n                    // Length is dynamic, taken from blockData's current readable bytes\n                    position.set(\n                            Position.KEY_VIN, blockData.readCharSequence(\n                                    blockData.readableBytes(), StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011: // Expected payload length: 4 bytes\n                    if (blockData.readableBytes() < 4) {\n                        break;\n                    }\n                    position.set(Position.KEY_HOURS, blockData.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014: // Expected payload length: 1 (engineLoad) + 1 (timingAdvance) + 1 (airTemp) + 2 (airFlow) + 1 (throttle) = 6 bytes\n                    if (blockData.readableBytes() < 6) {\n                        break;\n                    }\n                    position.set(Position.KEY_ENGINE_LOAD, blockData.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", blockData.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", blockData.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", blockData.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, blockData.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                case 0x0021:\n                    // Length is dynamic, taken from blockData's current readable bytes\n                    String data = blockData.readCharSequence(\n                            blockData.readableBytes(), StandardCharsets.US_ASCII).toString();\n                    if (subtype == 0x0020) {\n                        String[] cells = data.split(\"\\\\+\");\n                        for (String cell : cells) {\n                            String[] values = cell.split(\"@\");\n                            if (values.length >= 4) { // Ensure enough parts for parsing\n                                try {\n                                    network.addCellTower(CellTower.from(\n                                            Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                            Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n                                    // Log or handle parsing errors for malformed cell tower data\n                                }\n                            }\n                        }\n                    } else { // 0x0021\n                        String[] points = data.split(\"\\\\+\");\n                        for (String point : points) {\n                            String[] values = point.split(\"@\");\n                            if (values.length >= 2) { // Ensure enough parts for parsing\n                                try {\n                                    network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n                                    // Log or handle parsing errors for malformed wifi data\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    // If readSlice was used, the bytes for this block are already consumed from the main buffer.\n                    // Any unconsumed bytes within `blockData` (e.g., if a fixed-length case was skipped due to\n                    // insufficient data) are automatically discarded when `blockData` goes out of scope.\n                    // No explicit `buf.skipBytes(length)` is needed here.\n                    break;\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}