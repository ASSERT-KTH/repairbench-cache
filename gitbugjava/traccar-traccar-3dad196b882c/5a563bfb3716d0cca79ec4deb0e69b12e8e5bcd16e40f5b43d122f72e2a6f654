{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() > 4) { // Ensure enough bytes for subtype (2) and totalLengthFieldValue (2)\n            int subtype = buf.readUnsignedShort();\n            int totalLengthFieldValue = buf.readUnsignedShort();\n\n            // If the total declared length of the block is less than its own header (4 bytes),\n            // it's a malformed packet. Consume remaining buffer and stop processing this message.\n            if (totalLengthFieldValue < 4) {\n                buf.skipBytes(buf.readableBytes());\n                break; // Exit the loop\n            }\n\n            int length = totalLengthFieldValue - 4; // This is the actual payload length\n\n            // If there are not enough bytes for the declared payload, the packet is truncated or malformed.\n            // Consume remaining buffer and stop processing this message.\n            if (buf.readableBytes() < length) {\n                buf.skipBytes(buf.readableBytes());\n                break; // Exit the loop\n            }\n\n            // Store the reader index to ensure exactly 'length' bytes are consumed for this block\n            int startIndex = buf.readerIndex();\n\n            switch (subtype) {\n                case 0x0001:\n                    // Expected payload length for 0x0001 is 17 bytes (1+2+1+2+2+2+2+1+4)\n                    if (length >= 17) {\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = buf.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        buf.readUnsignedInt(); // trip id\n                    }\n                    break;\n                case 0x0005:\n                    // Expected payload length for 0x0005 is 6 bytes (1+1+4)\n                    if (length >= 6) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                        buf.readUnsignedInt(); // run time\n                    }\n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    // Expected payload length for 0x0011 is 4 bytes (for UnsignedInt)\n                    if (length >= 4) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    }\n                    break;\n                case 0x0014:\n                    // Expected payload length for 0x0014 is 6 bytes (1+1+1+2+1)\n                    if (length >= 6) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    }\n                    break;\n                case 0x0020:\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        String[] values = point.split(\"@\");\n                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                    break;\n                default:\n                    // Unknown subtype or subtype handled by an `if` condition that wasn't met.\n                    // The remaining bytes for this block will be skipped below.\n                    break;\n            }\n\n            // After processing a case, ensure the reader index has advanced by exactly 'length' bytes.\n            // If the case logic consumed fewer bytes (e.g., due to its own internal checks or unknown subtype),\n            // skip the remaining bytes for this block to maintain correct buffer alignment.\n            int bytesConsumedInCase = buf.readerIndex() - startIndex;\n            if (bytesConsumedInCase < length) {\n                buf.skipBytes(length - bytesConsumedInCase);\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}