{
    "generation": "private Position decodePosition(\n        Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int status = buf.readUnsignedShort();\n    position.setValid(BitUtil.check(status, 15));\n    position.set(Position.KEY_STATUS, status);\n    position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n    int event = buf.readUnsignedShort();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, event);\n\n    String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n    DateBuilder dateBuilder = new DateBuilder()\n            .setYear(Integer.parseInt(time.substring(0, 2)))\n            .setMonth(Integer.parseInt(time.substring(2, 4)))\n            .setDay(Integer.parseInt(time.substring(4, 6)))\n            .setHour(Integer.parseInt(time.substring(6, 8)))\n            .setMinute(Integer.parseInt(time.substring(8, 10)))\n            .setSecond(Integer.parseInt(time.substring(10, 12)));\n    position.setTime(dateBuilder.getDate());\n\n    position.setLongitude(buf.readInt() * 0.00001);\n    position.setLatitude(buf.readInt() * 0.00001);\n\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n    position.setCourse(buf.readUnsignedShort());\n    position.setAltitude(buf.readUnsignedShort());\n\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n    Network network = new Network();\n\n    // Parse TLV blocks\n    while (buf.readableBytes() >= 4) {\n        int subtype = buf.readUnsignedShort();\n        int lengthRaw = buf.readUnsignedShort();\n        int payloadLength = lengthRaw > 4 ? lengthRaw - 4 : 0;\n        // guard against bad length\n        if (payloadLength > buf.readableBytes()) {\n            payloadLength = buf.readableBytes();\n        }\n        int startIndex = buf.readerIndex();\n        switch (subtype) {\n            case 0x0001:\n                // Engine data\n                int coolantTemp = buf.readUnsignedByte() - 40;\n                if (coolantTemp <= 215) {\n                    position.set(Position.KEY_COOLANT_TEMP, coolantTemp);\n                }\n                int rpm = buf.readUnsignedShort();\n                if (rpm <= 65535) {\n                    position.set(Position.KEY_RPM, rpm);\n                }\n                position.set(\"averageSpeed\", buf.readUnsignedByte());\n                buf.readUnsignedShort(); // interval fuel consumption\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                buf.readUnsignedInt(); // trip id\n                break;\n            case 0x0005:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                buf.readUnsignedInt(); // run time\n                break;\n            case 0x0009:\n                position.set(Position.KEY_VIN,\n                        buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII).toString());\n                break;\n            case 0x0010:\n                // Diagnostic Trouble Codes\n                int codesCount = payloadLength / 2;\n                List<String> dtcs = new ArrayList<>(codesCount);\n                for (int i = 0; i < codesCount; i++) {\n                    int codeRaw = buf.readUnsignedShort();\n                    int kind = (codeRaw >> 12) & 0xF;\n                    char letter;\n                    switch (kind) {\n                        case 0: letter = 'P'; break;\n                        case 1: letter = 'C'; break;\n                        case 2: letter = 'B'; break;\n                        case 3: letter = 'U'; break;\n                        default: letter = '?'; break;\n                    }\n                    dtcs.add(letter + String.format(\"%04X\", codeRaw & 0x0FFF));\n                }\n                position.set(Position.KEY_DTCS, String.join(\" \", dtcs));\n                break;\n            case 0x0011:\n                position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                break;\n            case 0x0014:\n                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                break;\n            case 0x0020:\n                String[] cells = buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII)\n                        .toString().split(\"\\\\+\");\n                for (String cell : cells) {\n                    String[] vals = cell.split(\"@\");\n                    network.addCellTower(CellTower.from(\n                            Integer.parseInt(vals[0]),\n                            Integer.parseInt(vals[1]),\n                            Integer.parseInt(vals[2], 16),\n                            Integer.parseInt(vals[3], 16)));\n                }\n                break;\n            case 0x0021:\n                String[] wifis = buf.readCharSequence(payloadLength, StandardCharsets.US_ASCII)\n                        .toString().split(\"\\\\+\");\n                for (String wifi : wifis) {\n                    String[] vals = wifi.split(\"@\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            vals[0],\n                            Integer.parseInt(vals[1])));\n                }\n                break;\n            default:\n                buf.skipBytes(payloadLength);\n                break;\n        }\n        // Skip any unread bytes in this TLV\n        int readBytes = buf.readerIndex() - startIndex;\n        if (readBytes < payloadLength) {\n            buf.skipBytes(payloadLength - readBytes);\n        }\n    }\n\n    if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {\n        position.setNetwork(network);\n    }\n\n    sendResponse(channel, MSG_POSITION_RSP, index, null);\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}