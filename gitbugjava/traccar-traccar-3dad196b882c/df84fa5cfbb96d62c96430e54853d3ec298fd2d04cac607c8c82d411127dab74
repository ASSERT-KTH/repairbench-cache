{
    "generation": "private Position decodePosition(\n        Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int status = buf.readUnsignedShort();\n\n    position.setValid(BitUtil.check(status, 15));\n\n    position.set(Position.KEY_STATUS, status);\n    position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n    int event = buf.readUnsignedShort();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, event);\n\n    String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n    DateBuilder dateBuilder = new DateBuilder()\n            .setYear(Integer.parseInt(time.substring(0, 2)), false) // last 2 digits, don't force 2000 base\n            .setMonth(Integer.parseInt(time.substring(2, 4)))\n            .setDay(Integer.parseInt(time.substring(4, 6)))\n            .setHour(Integer.parseInt(time.substring(6, 8)))\n            .setMinute(Integer.parseInt(time.substring(8, 10)))\n            .setSecond(Integer.parseInt(time.substring(10, 12)));\n    position.setTime(dateBuilder.getDate());\n\n    position.setLongitude(buf.readInt() * 0.00001);\n    position.setLatitude(buf.readInt() * 0.00001);\n\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n    position.setCourse(buf.readUnsignedShort());\n    position.setAltitude(buf.readUnsignedShort());\n\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n    Network network = new Network();\n\n    while (buf.readableBytes() >= 4) {\n        buf.markReaderIndex();\n        if (buf.readableBytes() < 4) {\n            break;\n        }\n        int subtype = buf.readUnsignedShort();\n        int length = buf.readUnsignedShort() - 4;\n\n        if (length < 0 || buf.readableBytes() < length) {\n            // Not enough bytes, break to avoid exception\n            buf.resetReaderIndex();\n            break;\n        }\n\n        switch (subtype) {\n            case 0x0001:\n                if (length >= 13) { // expected minimum length for fields below\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); // interval fuel consumption\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    if (length >= 17) buf.readUnsignedInt(); // trip id, if present\n                    if (length > 17) buf.skipBytes(length - 17);\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            case 0x0005:\n                if (length >= 6) {\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); // run time\n                    if (length > 6) buf.skipBytes(length - 6);\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            case 0x0009:\n                position.set(\n                        Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                break;\n            case 0x000f:\n                // DTC codes\n                StringBuilder dtcs = new StringBuilder();\n                int n = length / 2;\n                for (int i = 0; i < n; i++) {\n                    int value = buf.readUnsignedShort();\n                    char system;\n                    switch ((value & 0xC000) >> 14) {\n                        case 0x00:\n                            system = 'P'; break;\n                        case 0x01:\n                            system = 'C'; break;\n                        case 0x02:\n                            system = 'B'; break;\n                        case 0x03:\n                            system = 'U'; break;\n                        default:\n                            system = '?';\n                    }\n                    int code = (value & 0x3FFF);\n                    if (dtcs.length() > 0) {\n                        dtcs.append(\" \");\n                    }\n                    dtcs.append(system).append(String.format(\"%04d\", code));\n                }\n                position.set(Position.KEY_DTCS, dtcs.toString());\n                break;\n            case 0x0011:\n                if (length >= 4) {\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    if (length > 4) buf.skipBytes(length - 4);\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            case 0x0014:\n                if (length >= 6) {\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    if (length > 6) buf.skipBytes(length - 6);\n                } else {\n                    buf.skipBytes(length);\n                }\n                break;\n            case 0x0020:\n                {\n                    // Cell towers block\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        if (cell.isEmpty()) continue;\n                        String[] values = cell.split(\"@\");\n                        if (values.length == 4) {\n                            try {\n                                network.addCellTower(CellTower.from(\n                                        Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                        Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                            } catch (NumberFormatException ignore) {\n                            }\n                        }\n                    }\n                }\n                break;\n            case 0x0021:\n                {\n                    // Wifi access points block\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        if (point.isEmpty()) continue;\n                        String[] values = point.split(\"@\");\n                        if (values.length == 2) {\n                            try {\n                                network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                            } catch (NumberFormatException ignore) {\n                            }\n                        }\n                    }\n                }\n                break;\n            default:\n                buf.skipBytes(length);\n                break;\n        }\n    }\n\n    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())\n            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {\n        position.setNetwork(network);\n    }\n\n    sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}