{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        try {\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(Integer.parseInt(time.substring(0, 2)))\n                    .setMonth(Integer.parseInt(time.substring(2, 4)))\n                    .setDay(Integer.parseInt(time.substring(4, 6)))\n                    .setHour(Integer.parseInt(time.substring(6, 8)))\n                    .setMinute(Integer.parseInt(time.substring(8, 10)))\n                    .setSecond(Integer.parseInt(time.substring(10, 12)));\n            position.setTime(dateBuilder.getDate());\n        } catch (NumberFormatException e) {\n            // Log warning for invalid date format if necessary\n            // Log.warning(\"Invalid date format: \" + time, e);\n            return null; // Or handle error appropriately\n        }\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        // Loop while there are enough bytes for subtype (2) and length (2)\n        while (buf.readableBytes() >= 4) {\n            int subtype = buf.readUnsignedShort();\n            int totalBlockLength = buf.readUnsignedShort();\n\n            // Validate the block length read from the buffer\n            // It must be at least 4 (subtype + length fields)\n            if (totalBlockLength < 4) {\n                // Invalid block length field. Stop processing further blocks.\n                // Log.warning(\"Invalid block length: \" + totalBlockLength + \" for subtype: \" + subtype);\n                break;\n            }\n\n            int dataLength = totalBlockLength - 4;\n\n            // Check if the buffer actually contains the declared data length\n            if (buf.readableBytes() < dataLength) {\n                // Declared data length exceeds available bytes. Stop processing.\n                // Log.warning(\"Buffer underflow for subtype \" + subtype + \". Declared data length: \" + dataLength\n                //         + \", Available bytes: \" + buf.readableBytes());\n                break;\n            }\n\n            // Create a sliced buffer for the data part of the current block\n            // This prevents over-reading in switch cases and handles skipping implicitly\n            ByteBuf dataBuf = buf.readSlice(dataLength);\n\n            try {\n                switch (subtype) {\n                    case 0x0001:\n                        // Expected data length: 1+2+1+2+2+2+1+4 = 15\n                        if (dataBuf.readableBytes() >= 15) {\n                            int coolantTemperature = dataBuf.readUnsignedByte() - 40;\n                            if (coolantTemperature <= 215) {\n                                position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                            }\n                            int rpm = dataBuf.readUnsignedShort();\n                            if (rpm <= 65535) {\n                                position.set(Position.KEY_RPM, rpm);\n                            }\n                            position.set(\"averageSpeed\", dataBuf.readUnsignedByte());\n                            dataBuf.readUnsignedShort(); // interval fuel consumption\n                            position.set(Position.KEY_FUEL_CONSUMPTION, dataBuf.readUnsignedShort() * 0.01);\n                            position.set(Position.KEY_ODOMETER_TRIP, dataBuf.readUnsignedShort());\n                            position.set(Position.KEY_POWER, dataBuf.readUnsignedShort() * 0.01);\n                            position.set(Position.KEY_FUEL_LEVEL, dataBuf.readUnsignedByte() * 0.4);\n                            dataBuf.readUnsignedInt(); // trip id\n                        }\n                        break;\n                    case 0x0005:\n                        // Expected data length: 1+1+4 = 6\n                        if (dataBuf.readableBytes() >= 6) {\n                            position.set(Position.KEY_RSSI, dataBuf.readUnsignedByte());\n                            position.set(Position.KEY_HDOP, dataBuf.readUnsignedByte());\n                            dataBuf.readUnsignedInt(); // run time\n                        }\n                        break;\n                    case 0x0009:\n                        // Variable length, use dataLength (which is dataBuf.readableBytes())\n                        if (dataBuf.readableBytes() > 0) {\n                            position.set(\n                                    Position.KEY_VIN, dataBuf.readCharSequence(dataBuf.readableBytes(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x0011:\n                        // Expected data length: 4\n                        if (dataBuf.readableBytes() >= 4) {\n                            position.set(Position.KEY_HOURS, dataBuf.readUnsignedInt() * 0.05);\n                        }\n                        break;\n                    case 0x0014:\n                        // Expected data length: 1+1+1+2+1 = 6\n                        if (dataBuf.readableBytes() >= 6) {\n                            position.set(Position.KEY_ENGINE_LOAD, dataBuf.readUnsignedByte() / 255.0);\n                            position.set(\"timingAdvance\", dataBuf.readUnsignedByte() * 0.5);\n                            position.set(\"airTemp\", dataBuf.readUnsignedByte() - 40);\n                            position.set(\"airFlow\", dataBuf.readUnsignedShort() * 0.01);\n                            position.set(Position.KEY_THROTTLE, dataBuf.readUnsignedByte() / 255.0);\n                        }\n                        break;\n                    case 0x0020:\n                        // Variable length\n                        if (dataBuf.readableBytes() > 0) {\n                            String cellData = dataBuf.readCharSequence(dataBuf.readableBytes(), StandardCharsets.US_ASCII).toString();\n                            String[] cells = cellData.split(\"\\\\+\");\n                            for (String cell : cells) {\n                                String[] values = cell.split(\"@\");\n                                if (values.length >= 4) { // Ensure enough parts after split\n                                    try {\n                                        network.addCellTower(CellTower.from(\n                                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                                    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) { // Catch potential errors\n                                        // Log.warning(\"Failed to parse cell tower data: \" + cell, e);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    case 0x0021:\n                        // Variable length\n                        if (dataBuf.readableBytes() > 0) {\n                            String pointData = dataBuf.readCharSequence(dataBuf.readableBytes(), StandardCharsets.US_ASCII).toString();\n                            String[] points = pointData.split(\"\\\\+\");\n                            for (String point : points) {\n                                String[] values = point.split(\"@\");\n                                if (values.length >= 2) { // Ensure enough parts after split\n                                    try {\n                                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                                    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) { // Catch potential errors\n                                        // Log.warning(\"Failed to parse WiFi access point data: \" + point, e);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    default:\n                        // Unknown subtype, dataBuf is already sliced and will be skipped implicitly\n                        // by readSlice consuming dataLength bytes from the main buffer.\n                        break;\n                }\n            } catch (Exception e) {\n                // Log exception during subtype processing if necessary\n                // Log.warning(\"Error processing subtype \" + subtype, e);\n            }\n            // Ensure the slice is fully consumed even if an error occurred or not enough bytes were read\n            // (already handled by readSlice advancing the main buffer's reader index)\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}