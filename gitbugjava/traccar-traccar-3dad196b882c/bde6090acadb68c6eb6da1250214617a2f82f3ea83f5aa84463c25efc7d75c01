{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        while (buf.readableBytes() >= 4) { // Changed from > 4 to >= 4\n            int subtype = buf.readUnsignedShort();\n            int lengthField = buf.readUnsignedShort(); // Total length of the T+L+V block\n\n            int length = lengthField - 4; // Length of the Value part (V)\n\n            if (length < 0) {\n                // Invalid block: total lengthField implies negative data length.\n                // This prevents IllegalArgumentException for skipBytes or readCharSequence.\n                break;\n            }\n\n            if (buf.readableBytes() < length) {\n                // Not enough bytes in buffer for the declared data length.\n                break;\n            }\n\n            int readerIndexAtStartOfValue = buf.readerIndex();\n            int bytesReadInCase = 0;\n\n            switch (subtype) {\n                case 0x0001: // Expected data length: 17 bytes\n                    final int expectedLength0001 = 17;\n                    if (length >= expectedLength0001) {\n                        int coolantTemperature = buf.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = buf.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", buf.readUnsignedByte());\n                        buf.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                        buf.readUnsignedInt(); // trip id\n                    }\n                    bytesReadInCase = buf.readerIndex() - readerIndexAtStartOfValue;\n                    if (length > bytesReadInCase) {\n                        buf.skipBytes(length - bytesReadInCase);\n                    }\n                    break;\n                case 0x0005: // Expected data length: 6 bytes\n                    final int expectedLength0005 = 6;\n                    if (length >= expectedLength0005) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                        buf.readUnsignedInt(); // run time\n                    }\n                    bytesReadInCase = buf.readerIndex() - readerIndexAtStartOfValue;\n                    if (length > bytesReadInCase) {\n                        buf.skipBytes(length - bytesReadInCase);\n                    }\n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011: // Expected data length: 4 bytes\n                    final int expectedLength0011 = 4;\n                    if (length >= expectedLength0011) {\n                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    }\n                    bytesReadInCase = buf.readerIndex() - readerIndexAtStartOfValue;\n                    if (length > bytesReadInCase) {\n                        buf.skipBytes(length - bytesReadInCase);\n                    }\n                    break;\n                case 0x0014: // Expected data length: 6 bytes\n                    final int expectedLength0014 = 6;\n                    if (length >= expectedLength0014) {\n                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    }\n                    bytesReadInCase = buf.readerIndex() - readerIndexAtStartOfValue;\n                    if (length > bytesReadInCase) {\n                        buf.skipBytes(length - bytesReadInCase);\n                    }\n                    break;\n                case 0x0020:\n                    String cellData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (!cellData.isEmpty()) {\n                        String[] cells = cellData.split(\"\\\\+\");\n                        for (String cell : cells) {\n                            if (cell == null || cell.isEmpty()) {\n                                continue;\n                            }\n                            String[] values = cell.split(\"@\");\n                            if (values.length == 4) {\n                                try {\n                                    network.addCellTower(CellTower.from(\n                                            Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                            Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                                } catch (NumberFormatException e) {\n                                    // Ignore malformed cell data\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 0x0021:\n                    String wifiData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (!wifiData.isEmpty()) {\n                        String[] points = wifiData.split(\"\\\\+\");\n                        for (String point : points) {\n                            if (point == null || point.isEmpty()) {\n                                continue;\n                            }\n                            String[] values = point.split(\"@\");\n                            if (values.length == 2) {\n                                try {\n                                    network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                                } catch (NumberFormatException e) {\n                                    // Ignore malformed wifi data\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}