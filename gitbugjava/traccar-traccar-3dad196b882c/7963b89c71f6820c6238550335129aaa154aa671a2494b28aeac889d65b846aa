{
    "generation": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int status = buf.readUnsignedShort();\n\n        position.setValid(BitUtil.check(status, 15));\n\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\n        Network network = new Network();\n\n        // Loop while there are enough bytes for subtype (2 bytes) and total block length (2 bytes)\n        while (buf.readableBytes() >= 4) {\n            int subtype = buf.readUnsignedShort();\n            int totalBlockLength = buf.readUnsignedShort(); // Total length of the TLV block (T+L+V)\n\n            // Calculate the length of the data payload (V part)\n            int dataPayloadLength = totalBlockLength - 4;\n\n            if (dataPayloadLength < 0) {\n                // If dataPayloadLength is negative, totalBlockLength was < 4.\n                // This indicates a malformed TLV structure, as T and L fields alone are 4 bytes.\n                // Stop processing further TLVs for this message.\n                break;\n            }\n\n            if (buf.readableBytes() < dataPayloadLength) {\n                // Not enough bytes remaining in the buffer for the declared dataPayloadLength.\n                // This indicates a truncated message or malformed TLV.\n                // Stop processing further TLVs.\n                break;\n            }\n\n            // Create a slice of the buffer for this TLV's data part.\n            // This ensures that operations within the switch cases cannot read beyond\n            // the current TLV's data segment and simplifies consuming exactly dataPayloadLength bytes.\n            ByteBuf dataSlice = buf.readSlice(dataPayloadLength);\n\n            switch (subtype) {\n                case 0x0001:\n                    // Expected structure: 1 (byte) + 2 (short) + 1 (byte) + 2 (short) + 2 (short) + 2 (short) + 2 (short) + 1 (byte) + 4 (int) = 17 bytes\n                    if (dataSlice.readableBytes() >= 17) {\n                        int coolantTemperature = dataSlice.readUnsignedByte() - 40;\n                        if (coolantTemperature <= 215) {\n                            position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                        }\n                        int rpm = dataSlice.readUnsignedShort();\n                        if (rpm <= 65535) {\n                            position.set(Position.KEY_RPM, rpm);\n                        }\n                        position.set(\"averageSpeed\", dataSlice.readUnsignedByte());\n                        dataSlice.readUnsignedShort(); // interval fuel consumption\n                        position.set(Position.KEY_FUEL_CONSUMPTION, dataSlice.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_ODOMETER_TRIP, dataSlice.readUnsignedShort());\n                        position.set(Position.KEY_POWER, dataSlice.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_FUEL_LEVEL, dataSlice.readUnsignedByte() * 0.4);\n                        dataSlice.readUnsignedInt(); // trip id\n                    }\n                    break;\n                case 0x0005:\n                    // Expected structure: 1 (byte RSSI) + 1 (byte HDOP) + 4 (int run time) = 6 bytes\n                    if (dataSlice.readableBytes() >= 6) {\n                        position.set(Position.KEY_RSSI, dataSlice.readUnsignedByte());\n                        position.set(Position.KEY_HDOP, dataSlice.readUnsignedByte());\n                        dataSlice.readUnsignedInt(); // run time\n                    }\n                    break;\n                case 0x0009: // VIN (variable length, uses all bytes in dataSlice)\n                    position.set(\n                            Position.KEY_VIN, dataSlice.readCharSequence(dataSlice.readableBytes(), StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011: // Hours\n                    // Expected structure: 4 (int hours)\n                    if (dataSlice.readableBytes() >= 4) {\n                        position.set(Position.KEY_HOURS, dataSlice.readUnsignedInt() * 0.05);\n                    }\n                    break;\n                case 0x0014: // Engine data\n                    // Expected structure: 1 (byte load) + 1 (byte timing) + 1 (byte airTemp) + 2 (short airFlow) + 1 (byte throttle) = 6 bytes\n                    if (dataSlice.readableBytes() >= 6) {\n                        position.set(Position.KEY_ENGINE_LOAD, dataSlice.readUnsignedByte() / 255.0);\n                        position.set(\"timingAdvance\", dataSlice.readUnsignedByte() * 0.5);\n                        position.set(\"airTemp\", dataSlice.readUnsignedByte() - 40);\n                        position.set(\"airFlow\", dataSlice.readUnsignedShort() * 0.01);\n                        position.set(Position.KEY_THROTTLE, dataSlice.readUnsignedByte() / 255.0);\n                    }\n                    break;\n                case 0x0020: // Cell towers (variable length)\n                    String cellDataString = dataSlice.readCharSequence(dataSlice.readableBytes(), StandardCharsets.US_ASCII).toString();\n                    String[] cells = cellDataString.split(\"\\\\+\");\n                    for (String cell : cells) {\n                        if (cell.isEmpty()) {\n                            continue;\n                        }\n                        String[] values = cell.split(\"@\");\n                        if (values.length == 4) {\n                            try {\n                                network.addCellTower(CellTower.from(\n                                        Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                        Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                            } catch (NumberFormatException e) {\n                                // Ignore malformed cell data\n                            }\n                        }\n                    }\n                    break;\n                case 0x0021: // WiFi access points (variable length)\n                    String wifiDataString = dataSlice.readCharSequence(dataSlice.readableBytes(), StandardCharsets.US_ASCII).toString();\n                    String[] points = wifiDataString.split(\"\\\\+\");\n                    for (String point : points) {\n                        if (point.isEmpty()) {\n                            continue;\n                        }\n                        String[] values = point.split(\"@\");\n                        if (values.length == 2) {\n                            try {\n                                network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                            } catch (NumberFormatException e) {\n                                // Ignore malformed WiFi data\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    // Unknown subtype. The dataSlice has already advanced the main buffer's reader index,\n                    // so the data for this unknown TLV is effectively skipped.\n                    break;\n            }\n        }\n\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}