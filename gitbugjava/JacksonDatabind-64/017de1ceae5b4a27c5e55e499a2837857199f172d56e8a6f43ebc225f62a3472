{
    "generation": "    /**\n     * @param contentTypeSer Optional explicit type information serializer\n     *    to use for contained values (only used for properties that are\n     *    of container type)\n     */\n    @SuppressWarnings(\"deprecation\")\n    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // do we have annotation that forces type to use (to declared type or its super type)?\n        JavaType serializationType;\n        try {\n            serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n        } catch (JsonMappingException e) {\n            // TODO: return SimpleBeanPropertyDefinition referring to the Annotated Darn Thing?\n//            prov.reportMappingException(e, \"Problem determining serialization type for %s: %s\", propDef.getName(), e.getMessage());\n//            return null;\n            // 26-Oct-2016, tatu: Need to be able to indicate problem via `BeanPropertyWriter`...\n            return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n        }\n\n        // Container types can have separate type serializers for content (value / element) type\n        if (contentTypeSer != null) {\n            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is\n             *    type information for contents. Should work well (for JAXB case); can be\n             *    revisited if this causes problems.\n             */\n            if (serializationType == null) {\n//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            // Not exactly sure why, but this used to occur; better check explicitly:\n            if (ct == null) {\n                prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                        \"serialization type \"+serializationType+\" has no content\");\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n            ct = serializationType.getContentType();\n        }\n\n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n        \n        // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well\n        //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)\n        //   for declared property type... and finally property annotation overrides\n        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n                _defaultInclusion);\n\n        // property annotation override\n        \n        inclV = inclV.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n        \n        switch (inclusion) {\n        case NON_DEFAULT:\n            // 16-Oct-2016, tatu: Note: if we can not for some reason create \"default instance\",\n            //    revert logic to the case of general/per-property handling, so both\n            //    type-default AND null are to be excluded. (as per [databind#1417])\n            // 28-Mar-2017, tatu: WHICH IS TO SAY: behavior is same as NON_EMPTY, without\n            //    special handling for Optionals/References.\n            //    ... so, maybe this becomes wrong. But for now...\n\n            // Related to [databind#1351], [databind#1417]. Trying to fetch the\n            // default value might fail if the bean lacks a default constructor.\n            try {\n                 valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } catch (Exception e) {\n                 // 08-Sep-2017, tatu: Need to log this for debugging, see [databind#1755]\n                 //   but do not propagate, just fallback\n                 _reportProblem(propDef, \"Failed to call default value getter: %s\", e);\n                 valueToSuppress = JsonInclude.Include.NON_EMPTY; // or null? marker better\n            }\n\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n                // And if we could not determine POJO default value, should revert to\n                // static approach; can't really use annotation defaults as there are none.\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; // Use marker then\n            } else {\n                // But if we did get a value, require specific equality; except for arrays,\n                // use deep comparison logic\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            // (or Strings, Maps)\n            if (actualType.isContainerType() || actualType.isReferenceType()) {\n                 // 21-Jun-2016, tatu: Let's also consider configuration option for empty Arrays\n                 //    as separate; requires enabling feature\n                 if (!_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                      valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n            }\n            break;\n        }\n        BeanPropertyWriter bpw = _constructWriter(prov, propDef, am, declaredType,\n                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n        // How about custom null serializer?\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n        // And then, handling of unwrapping\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n        return bpw;\n    }\n\n    // @since 2.9 -- helper method introduced to avoid complexity warnings\n    private BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef,\n            AnnotatedMember am, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, JavaType serializationType, boolean suppressNulls,\n            Object valueToSuppress)\n        throws JsonMappingException\n    {\n         return new BeanPropertyWriter(propDef,\n                 am, _beanDesc.getClassAnnotations(), declaredType,\n                 ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    }\n\n    // @since 2.9.1 Helper method to contain logic for reporting recoverable problems\n    // (specifically, problems with getting default value)\n    private void _reportProblem(BeanPropertyDefinition propDef, String msg, Object... args)\n    {\n        if (args.length > 0) {\n            msg = String.format(msg, args);\n        }\n        String propName = propDef.getName();\n        throw new IllegalStateException(String.format(\n\"Problem constructing prop '%s' (%s): %s\",\npropName, propDef.getClass().getName(), msg));\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}