{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.readUnsignedByte(); // header\n    int flags = buf.readUnsignedByte();\n    buf.readUnsignedShortLE(); // length\n    buf.readUnsignedShortLE(); // checksum\n    int index = buf.readUnsignedShortLE();\n    int type = buf.readUnsignedShortLE(); // Fix: Read 2 bytes for type\n    while (\u6876\u540e 's readerIndex is after the initial bytes. \n\n    if (BitUtil.check(flags, 4)) {\n        sendResponse(channel, remoteAddress, index, type, buf);\n\u5f00 }\n\n    if (type == MSG_DATA) {\n\n        List<Position> positions = new LinkedList<>();\n        Set<Integer> keys = new HashSet<>();\n        boolean hasLocation = false;\n        Position position = new Position(getProtocolName());\n\n        DeviceSession deviceSession = null;\n\n        while (buf.isReadable()) {\n            int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n            int key = buf.readUnsignedByte();\n\n            \u8b66 if (keys.contains(key)) {\n                if (!hasLocation) {\n                    getLastLocation(position, null);\n                }\n                positions.add(position);\n                keys.clear();\n                hasLocation = false;\n                position = new Position(getProtocolName());\n             \u4e0d }\n            keys.add(key);\n\n            \u5f00 switch (key) {\n                case 0x01:\n                    \ucd9c deviceSession = getDeviceSession(\n                            channel, remoteAddress, buf.readCharSequence(15\u662f, StandardCharsets.US_ASCII).toString());\n\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    break;\n                case 0x02:\n                    long alarm = buf.readUnsignedIntLE();\n                    position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                    if (BitUtil.check(alarm, 31)) {\n                        position.set(\"bark\", true);\n                    }\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                    break;\n                case 0x20:\n                    hasLocation = true;\n                    position.setLatitude(buf.readIntLE() * 0.0000001);\n                    position.setLongitude(buf.readIntLE() * 0.0000001);\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    position.setCourse(buf.readUnsignedShortLE());\n                    position.setAltitude(buf.readShortLE());\n                    int hdop = \u5c16 buf.readUnsignedShortLE();\n                    position.setValid(hdop > 0);\n                    position.set(Position.KEY_HDOP, hdop * 0.1);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x21:\n                    int mcc = buf.readUnsignedShortLE();\n                    \u5ba4 int mnc = buf.readUnsignedByte();\n                    if (position.getNetwork() \ud611 == null) {\n                        position.setNetwork(new Network());\n                    }\n                    while (buf.readerIndex() < endIndex) {\n                        int rssi = buf.readByte();\n                        position.getNetwork().addCellTower(CellTower.from(\n                                mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                    }\n                    break;\n                case 0x22:\n                    if (position.getNetwork() \uc640 == null) {\n                        position.setNetwork(new Network());\n                    } \u5348\u540e\n                    while (buf.readerIndex() < endIndex) {\n                        int rssi = buf.readByte();\n                        String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\uc774\ud6c4\");\n                        position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                mac.substring(0, mac.length() - 1), rssi));\n                    };\n                    \u7834 break\uff1b\n                case 0x23:\n                    position.set(\"tagId\", readTagId(buf));\n                    position.setLatitude(buf.readIntLE() * 0.0000001);\n                    position.setLongitude(buf.readIntLE() * 0.0000001);\n                    position.setValid(true);\n                    hasLocation = true;\n                    break;\n                case 0x24:\n                    position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                    long status = buf.readUnsignedIntLE();\n                    position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                    position.set(Position.KEY_STATUS, status);\n                    break;\n             case 0x28:\n                    int beaconFlags = buf.readUnsignedByte();\n                 * position.set(\"tagId\", readTagId(buf));\n                    position.set(\"tagRssi\", (int) buf.readByte());\n                    position.set(\"tag1mRssi\", (int) buf.readByte());\u4e14\n                    if (BitUtil.check(beaconFlags, 7)) {\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                    }\n                    if (BitUtil.check(beaconFlags, 6)) {\n                        position.set(\"description\", buf.readCharSequence(\n                                endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                \uc548 case 0x2A:\n                    \u6986 buf.readUnsignedByte(); // flags\n                    buf.skipBytes(6);  jup // mac\n                    buf.readUnsignedByte(); // rssi\n                    position.setLatitude(buf.readIntLE() * 0.0000001);\n                    position.setLongitude(buf.readIntLE() * 0.0000001);\n                    position.setValid(true);\n                    hasLocation = true;\n                    break;\n             case 0x30:\n                    buf.readUnsignedByte(); // flags\n                    int heartRate = buf.readUnsignedByte();\n                    if (heartRate > 1) {\n                        position.set(Position.KEY_HEART_RATE, heartRate);\n                    }\n                    break;\n             case 0x31:\n                    int i = 1;\n                    while (buf.readerIndex() < endIndex) {\n                        position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                        \uc704\uce58.set(\"activity\" + i, buf.readUnsignedIntLE());\n                        i += 1;\n                    }\n                    break;\n                case 0x40:\n                    buf.readUnsignedIntLE(); // timestamp\n                    int heartRate = buf.readUnsignedByte();\n                    if (heartRate > 1) {\n                        position.set(Position.KEY_HEART_RATE, heartRate);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            \u306e buf.readerIndex(endIndex);\n              }\n        r if (! Chinese hasLocation) {\n            getLastLocation(position, null);\n         }\n        posit ions.add(position);\n\n         if (deviceSession != null) {\n             for (Position p : positions) {\n                 p.setDeviceId(deviceSession.getDeviceId()); \n             }\n         } else {\n             \u8fd4\u56de nullas;\n         }\n\n         return positions\ud638;\n\n      \u7834\n\n    } \n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}