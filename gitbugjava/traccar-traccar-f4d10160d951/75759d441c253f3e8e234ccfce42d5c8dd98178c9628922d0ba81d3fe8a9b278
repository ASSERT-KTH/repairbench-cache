{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // header (0xAB)\n        int flags = buf.readUnsignedByte();\n        int packetLength = buf.readUnsignedShortLE(); // total length of the message from checksum field\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n\n        // Based on test cases, MSG_RESPONSE (0x01) messages also contain position data.\n        // The Minifinder2Protocol.MSG_DATA constant is 0x00.\n        // To fix failing tests where type is 0x01 but position data is expected,\n        // we include MSG_RESPONSE type in the decoding logic.\n        if (type == MSG_DATA || type == MSG_RESPONSE) {\n\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n\n            DeviceSession deviceSession = null;\n\n            // Calculate the end index of the actual data payload (key-value pairs)\n            // packetLength includes checksum (2 bytes), index (2 bytes), and type (1 byte)\n            // So, actual data payload length = packetLength - (2 + 2 + 1) = packetLength - 5\n            int dataPayloadEndIndex = buf.readerIndex() + (packetLength - 5);\n\n            // Iterate while there are still bytes to read in the data payload section\n            while (buf.readerIndex() < dataPayloadEndIndex) {\n                int key = buf.readUnsignedByte(); // Read the key of the current data block\n                int length = buf.readUnsignedByte(); // Read the length of the value for the current key\n                int endIndex = buf.readerIndex() + length; // Calculate the end index of the current key-value block\n\n                // Check if a new position object should be started\n                // This logic is based on seeing a key that has already been processed in the current position,\n                // implying a new set of data points for a new position.\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                }\n                keys.add(key);\n\n                // Process the value based on the key\n                switch (key) {\n                    case 0x01: // Device ID\n                        // The protocol specifies 0x01 (device ID) as a 1-byte prefix + 15-byte IMEI.\n                        // So, the total length (variable 'length') should be 16.\n                        // We consume the 1-byte prefix before reading the IMEI.\n                        buf.readUnsignedByte();\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());\n\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        break;\n                    case 0x02: // Alarm\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14: // Battery\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20: // Location data\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21: // Cell towers\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) { // Iterate until the end of this specific key-value block\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22: // WiFi access points\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) { // Iterate until the end of this specific key-value block\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23: // Tag ID and location\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24: // Time and status\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28: // Beacon data\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A: // Other location data\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6); // mac\n                        buf.readUnsignedByte(); // rssi\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30: // Steps data\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31: // Activity data\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) { // Iterate until the end of this specific key-value block\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x40: // Heart rate\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        // For unknown keys, ensure the readerIndex is moved to the end of the current block\n                        // so that parsing can continue for subsequent blocks.\n                        break;\n                }\n                // Ensure the readerIndex is positioned at the end of the current key-value block,\n                // regardless of whether the key was handled or how many bytes were consumed by the case.\n                buf.readerIndex(endIndex);\n            }\n\n            // After processing all key-value pairs, finalize the last position\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n\n            // Ensure all positions have the device ID. If deviceSession was found (key 0x01),\n            // apply its device ID to all positions. Otherwise, return null if no device session\n            // could be established for a data message.\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                // If a data message doesn't contain a device identifier (0x01) and no session\n                // could be established implicitly, this message is considered incomplete.\n                return null;\n            }\n\n            return positions;\n        }\n\n        return null; // Return null for message types that are not MSG_DATA or MSG_RESPONSE\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}