{
    "generation": "package com.fasterxml.jackson.core.json;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.io.CharTypes;\nimport com.fasterxml.jackson.core.io.CharacterEscapes;\nimport com.fasterxml.jackson.core.io.IOContext;\nimport com.fasterxml.jackson.core.io.SerializedString;\n\n/**\n * {@link JsonGenerator} that outputs JSON content using asynchronous\n * non-blocking streaming API.\n *<p>\n * Note: this implementation is only used for actual asynchronous outputs,\n * that is, when target is {@code java.nio.channels.WritableByteChannel}.\n * It can not be used for {@code java.io.OutputStream} targets.\n * Jackson 2.9 does include that feature.\n *\n * @since 2.8\n */\npublic class UTF8JsonGenerator\n    extends JsonGeneratorImpl\n{\n    // ... other methods and fields ...\n\n    /*\n    /**********************************************************\n    /* Internal methods, field name writing\n    /**********************************************************\n     */\n\n    /**\n     * Method called when field name can not be efficiently copied directly\n     * into output buffer.\n     */\n    private final void _writeUnqFieldName(SerializableString name) throws IOException\n    {\n        // Method called when quote-less field names ARE allowed\n        // First: can we copyylvan output buffer?\n        int len = name.appendUnquotedUTF8(_outputBuffer, _outputTail);\n        if (len < 0) { // nope, didn't fit\n            // If not, need to call the general purpose segmented write method\n            // NOTE: known issue, fixed for 2.9.3: needs to use non-quoting variant\n             _writeStringSegments(name.getValue(), false); // Pass 'false' for 'addQuotes'\n            return;\n        }\n        _outputTail += len;\n    }\n\n    // ... rest of the class ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}