{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // Store function values for modifications\n            final double f0_old = f0;\n            final double f1_old = f1;\n\n            if (f1 * fx < 0) {\n                // Root is in [x, x1]. Update x0 to x.\n                // However, the variables are swapped: x0 becomes the previous x1.\n                x0 = x1;\n                f0 = f1; // f0 now holds the function value of the retained endpoint x1_old.\n                inverted = !inverted;\n\n                // Apply modification to the retained endpoint's function value (now in f0).\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    // f_retained *= f_discarded / (f_discarded + f_new)\n                    // f_retained is f1_old (now in f0), f_discarded is f0_old, f_new is fx (becomes f1 later)\n                    f0 *= f0_old / (f0_old + fx);\n                    break;\n                case REGULA_FALSI:\n                    // No modification for standard Regula Falsi.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            } else {\n                // Root is in [x0, x]. Update x1 to x.\n                // Endpoint x0 is retained.\n                // Modify the retained endpoint's function value (f0).\n                 switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    // f_retained *= f_discarded / (f_discarded + f_new)\n                    // f_retained is f0_old (still in f0), f_discarded is f1_old, f_new is fx (becomes f1 later)\n                    f0 *= f1_old / (f1_old + fx);\n                    break;\n                case REGULA_FALSI:\n                    // No modification for standard Regula Falsi.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n            // Update the endpoint which always gets replaced.\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Prevent potential division by zero errors from complex return type logic\n                    final double f_x0 = computeObjectiveValue(x0);\n                    final double f_x1 = computeObjectiveValue(x1);\n                    return (f_x1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    // Prevent potential division by zero errors from complex return type logic\n                    final double f_x0_ = computeObjectiveValue(x0);\n                    final double f_x1_ = computeObjectiveValue(x1);\n                    return (f_x1_ >= 0) ? x1 : x0;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}