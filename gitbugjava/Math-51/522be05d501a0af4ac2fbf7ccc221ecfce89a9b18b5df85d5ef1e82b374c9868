{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The value of x1 has switched to the other bound, thus inverting\n                // the interval. The new interval is [old_x1, x]\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                // The sign of fx is the same as f1. The new interval is [x0, x].\n                // Reduce the function value at the stationary endpoint x0 to avoid\n                // slow convergence.\n                switch (method) {\n                // N.B. REGULA_FALSI case implicitly handled by falling through to ILLINOIS\n                //      to prevent the poor convergence speed of the classic regula falsi method.\n                case REGULA_FALSI:\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError(\"Unexpected solve method\"); // Use specific error\n                }\n            }\n            // Update the endpoint which is always the latest approximation x.\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    } // else return x0 is handled below the interval check\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    } // else return x0 is handled below the interval check\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    } // else return x0 is handled below the interval check\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    } // else return x0 is handled below the interval check\n                    break;\n                default:\n                    throw new MathInternalError();\n                }\n                // If we reach here, the current x1 doesn't satisfy the 'allowed' side condition,\n                // but the function value is small enough. The interval width check below\n                // will handle returning the appropriate endpoint (x0 or x1).\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Check sign of function value at the endpoints.\n                    // If inverted=true, x0 > x1, f0 > 0, f1 < 0. Return lower value with f <= 0, which is x1.\n                    // If inverted=false, x0 < x1, f0 < 0, f1 > 0. Return lower value with f <= 0, which is x0.\n                    // Generalizing: if f1 <= 0, x1 is the candidate; otherwise x0 is.\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    // Check sign of function value at the endpoints.\n                    // If inverted=true, x0 > x1, f0 > 0, f1 < 0. Return upper value with f >= 0, which is x0.\n                    // If inverted=false, x0 < x1, f0 < 0, f1 > 0. Return upper value with f >= 0, which is x1.\n                    // Generalizing: if f1 >= 0, x1 is the candidate; otherwise x0 is.\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}