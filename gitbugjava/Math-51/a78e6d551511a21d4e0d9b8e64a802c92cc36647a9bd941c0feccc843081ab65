{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            // Avoid division by zero known comparison error -> F S Mal P113+\n            if (f1 == f0) {\n                // Indicates unlikely situation or proximity to multiple roots.\n                // Fallback or specific handling might be needed depending on context,\n                // but returning the current best estimate seems reasonable.\n                 if (FastMath.abs(f1) <= ftol) {\n                     return x1; // Or handle based on 'allowed' sides if needed\n                 }\n                 // If values are identical but not close to zero, this implies a flat function or error.\n                 // Throwing an exception might be more appropriate in a robust implementation.\n                 // For now, return the midpoint or latest estimate. Let's return x1.\n                 return x1;\n            }\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // This is the core difference between Regula Falsi and Illinois/Pegasus variants.\n            // The following modification logic is designed to prevent stagnation.\n            if (f1 * fx < 0) {\n                // Root is in (x, x1). Update x0 to x1; retain x1 (the new x0). Apply modification to f0.\n                x0 = x1;\n                f0 = f1; // f0 now holds the value of the retained endpoint x1\n                inverted = !inverted;\n                // Apply modification to the retained endpoint's value (f0).\n                // This is the fix for MATH-631: apply modification symmetrically.\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    // As per Commons Math patch 5a330b4 for MATH-631.\n                    // Uses f0 (retained value = old f1) and fx (new value).\n                    // f_retained *= f_retained / (f_retained + f_new)\n                    f0 *= f0 / (f0 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // No modification for standard Regula Falsi.\n                    break;\n                default:\n                    // Should never happen (implies unknown Method enum value)\n                    throw new MathInternalError();\n                }\n            } else {\n                // Root is in (x0, x). Retain x0. Update x1 to x.\n                // Apply modification to the retained endpoint's value (f0).\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    // Formula uses f1 (discarded value) and fx (new value).\n                    // f_retained *= f_discarded / (f_discarded + f_new)\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // No modification for standard Regula Falsi.\n                    break;\n                default:\n                    // Should never happen (implies unknown Method enum value)\n                    throw new MathInternalError();\n                }\n            }\n            // Update the endpoint that is always updated (x1) to the new point x.\n            x1 = x;\n            f1 = fx;\n\n            // Check for convergence: function value accuracy.\n            // If the function value of the last approximation is too small,\n            // we are satisfied according to the function value accuracy.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) { // Current interval is [x1, x0], x1 is closer to original min\n                        return x1;\n                    }\n                    // If not inverted, interval is [x0, x1], but f1 is close to 0.\n                    // Need to return the endpoint matching the side constraint.\n                    // The original code didn't return x0 here, let's stick to it.\n                    // Check if x1 satisfies the side constraint.\n                    break; // Fall through to interval check if side not met\n                case RIGHT_SIDE:\n                     if (!inverted) { // Current interval is [x0, x1], x1 is closer to original max\n                        return x1;\n                    }\n                    // If inverted, interval is [x1, x0], but f1 is close to 0.\n                    // Need to return the endpoint matching the side constraint.\n                    break; // Fall through to interval check if side not met\n                case BELOW_SIDE:\n                    if (f1 <= 0) { // If f1 meets the condition, return x1\n                        return x1;\n                    }\n                    // If f1 > 0, the other endpoint x0 must have f0 <= 0 (due to bracketing).\n                    // However, interval check below handles returning x0 if needed.\n                    break; // Fall through to interval check\n                case ABOVE_SIDE:\n                    if (f1 >= 0) { // If f1 meets the condition, return x1\n                        return x1;\n                    }\n                    // If f1 < 0, the other endpoint x0 must have f0 >= 0.\n                    break; // Fall through to interval check\n                default:\n                    throw new MathInternalError();\n                }\n                // If we reached here in LEFT/RIGHT/BELOW/ABOVE cases,\n                // it means f1 is close to zero, but x1 might be on the wrong 'side'\n                // according to the 'allowed' solutions. The interval check below\n                // will handle selecting the correct endpoint (x0 or x1) based on 'allowed'.\n            }\n\n            // Check for convergence: interval accuracy.\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    // Return the latest approximation.\n                    return x1;\n                case LEFT_SIDE:\n                    // Return the endpoint closer to the original minimum.\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    // Return the endpoint closer to the original maximum.\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Return the endpoint with function value <= 0.\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    // Return the endpoint with function value >= 0.\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}