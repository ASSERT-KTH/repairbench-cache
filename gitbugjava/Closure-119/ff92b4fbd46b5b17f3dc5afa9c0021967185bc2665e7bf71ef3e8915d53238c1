{
    "generation": "    public void collect(JSModule module, Scope scope, Node n) {\n      Node parent = n.getParent();\n\n      String name = null; // Initialize name to null\n      boolean isSet = false;\n      Name.Type type = Name.Type.OTHER;\n      boolean isPropAssign = false;\n\n      switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                // If this NAME is the obj in obj.prop, return. Handled by GETPROP case below.\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                   // Function expression name is local.\n                  return;\n                }\n                // Function declaration name.\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n                // Note: Parent could be CATCH here for the declaration `catch(e)`.\n                // This path doesn't set `isSet`, so it might be treated as a GET later.\n                // The fix below handles this.\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              // case Token.GETPROP: // Already handled by recursion?\n              //  return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          break;\n        default:\n          return;\n      }\n\n      // If name is null at this point, we should return.\n      // This check handles cases like complex object literal keys or GETPROPs\n      // that didn't resolve to a simple qualified name.\n      if (name == null) {\n          return;\n      }\n\n      // Fix: Check if the name (or the base of a qualified name) resolves to a catch variable.\n      // This should happen BEFORE the isGlobalNameReference check.\n      String baseName = null;\n      Node nodeToCheck = n; // Start with the current node being visited\n\n      if (nodeToCheck.isName()) {\n          // If the node itself is a NAME, the base name is simply its string.\n          baseName = nodeToCheck.getString();\n      } else if (nodeToCheck.isGetProp()) {\n          // For qualified names like \"a.b.c\", find the ultimate base node (\"a\").\n          // This loop traverses down the left side of the GETPROP chain.\n          while (nodeToCheck.isGetProp()) {\n              nodeToCheck = nodeToCheck.getFirstChild();\n          }\n          // If the ultimate base is a simple name (e.g., \"a\"), get its name string.\n          if (nodeToCheck.isName()) {\n              baseName = nodeToCheck.getString();\n          }\n          // If the base isn't a NAME (e.g., obj[0].prop), baseName remains null.\n      }\n\n      // If we identified a simple base name (like 'e' in 'e' or 'e.name'),\n      // look up its declaration using the current scope.\n      if (baseName != null) {\n          Var v = scope.getVar(baseName);\n          // Check if the variable exists, has a declaration node, and that node's parent is a CATCH node.\n          if (v != null && v.getNameNode() != null && v.getNameNode().getParent() != null &&\n              v.getNameNode().getParent().isCatch()) {\n              // If the base name was declared in a catch block (e.g., catch(e)),\n              // then this reference (n) should be treated as local, regardless of\n              // what isGlobalNameReference might say.\n              return; // Exit collect, do not process as a potential global name.\n          }\n      }\n      // End of Fix\n\n      // We are only interested in global names.\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      // If we reach here, 'name' is considered a potential global reference.\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(module, scope, n, parent, name);\n        }\n      } else {\n        // If not a set, it's a get.\n        handleGet(module, scope, n, parent, name);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}