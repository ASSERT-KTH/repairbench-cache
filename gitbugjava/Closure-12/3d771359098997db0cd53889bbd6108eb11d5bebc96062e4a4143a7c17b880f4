{
    "generation": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.jscomp.NodeUtil;\n\n/**\n * Checks if the given node is inside a TRY block that has a CATCH handler.\n * Traversal stops at the function boundary, as handlers outside the function\n * are not relevant for local flow analysis.\n *\n * @param cfgNode The CFG node (representing an AST Node) to check.\n * @return True if the node is potentially protected by an exception handler.\n */\nprivate boolean hasExceptionHandler(Node cfgNode) {\n  // Search ancestors for a TRY block with a CATCH block that covers cfgNode.\n  Node ancestor = cfgNode.getParent();\n  while (ancestor != null) {\n    if (ancestor.isFunction()) {\n      // Exception handlers outside the current function do not affect\n      // the flow within the function in the way this analysis cares about.\n      return false;\n    }\n\n    if (ancestor.isTry()) {\n      Node tryBlock = ancestor.getFirstChild();\n      // Check if cfgNode is actually within the 'try' block (the first child).\n      // It shouldn't be in the CATCH or FINALLY blocks for this handler to \"protect\" it.\n      // NodeUtil.isAncestor(A, B) is true if A is an ancestor of B OR if A == B.\n      boolean cfgNodeIsInTryBlock = (tryBlock != null) && NodeUtil.isAncestor(tryBlock, cfgNode);\n\n      if (cfgNodeIsInTryBlock) {\n        // Now check if this TRY has a CATCH block.\n        Node catchBlock = NodeUtil.getCatchBlock(ancestor);\n        if (catchBlock != null) {\n          // Found an enclosing TRY block with a CATCH that protects cfgNode.\n          return true;\n        }\n        // If it's a try/finally without catch, it doesn't \"handle\" the exception\n        // in the sense of diverting control flow locally, so we continue search upwards.\n      }\n      // If cfgNode is not in the try block (e.g., it's in CATCH or FINALLY),\n      // this TRY structure doesn't protect cfgNode. Continue search upwards.\n    }\n    ancestor = ancestor.getParent();\n  }\n\n  // No enclosing TRY with a CATCH found up to the function boundary.\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}