{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      // NOTE: Unlike CheckProvides, we don't need to worry about Function.prototype.call\n      // or Function.prototype.apply. Calling a function with a null 'this' value\n      // results in the global 'this', so we should still check it.\n      JSDocInfo jsDoc = NodeUtil.getFunctionJsDocInfo(n); // Prefer NodeUtil helper\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are values in an object literal expression\n      // that has a @lends annotation associated with it. The JSDoc might be on\n      // the object literal itself, or on a related node (e.g., assignment LHS).\n      // NodeUtil.getBestJSDocInfo handles finding the relevant JSDoc.\n      if (parent != null && parent.isObjectLitKey()) {\n        Node objectLit = parent.getParent();\n        JSDocInfo objectLitJsDoc = NodeUtil.getBestJSDocInfo(objectLit);\n        if (objectLitJsDoc != null && objectLitJsDoc.getLendsName() != null) {\n          return false; // Function is in a @lends object, assume 'this' is correct.\n        }\n      }\n\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      if (parent != null) {\n          int pType = parent.getType();\n          if (!(pType == Token.BLOCK || // function declaration statement\n                pType == Token.SCRIPT || // function declaration statement in global/block scope\n                pType == Token.NAME || // var name = function() { ... }; or function name() { ... }\n                pType == Token.ASSIGN || // obj.prop = function() { ... };\n                // Object literal keys: covers string, quoted string, getter/setter defs\n                parent.isObjectLitKey() ||\n                // Explicitly check for numeric keys as isObjectLitKey might not cover them\n                pType == Token.NUMBER\n             )) {\n            // Function is in an unusual context where 'this' is not clearly defined\n            // or a context we don't need to check.\n            return false;\n          }\n      } else {\n         // Functions must have a parent in valid JS (Script, Block, etc.).\n         // If parent is null, indicates an abnormal AST structure. Don't traverse.\n         return false;\n      }\n\n      // The original code had a comment here:\n      // \"// Don't traverse functions that are getting lent to a prototype.\"\n      // This is now handled by the @lends check above and the prototype\n      // assignment check below.\n    }\n\n    // This part handles assignments like: Class.prototype.method = function() { ... }\n    // or Class.prototype = someVar; where someVar might be the function.\n    // It prevents traversing the RHS if the LHS looks like a prototype assignment,\n    // as 'this' inside such a function should refer to the instance, not global 'this'.\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        // Assuming `assignLhsChild` is a member variable of the class for state tracking.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else { // n == rhs\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty. Use NodeUtil helper for robustness.\n        if (NodeUtil.isPrototypeProperty(lhs)) {\n           return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}