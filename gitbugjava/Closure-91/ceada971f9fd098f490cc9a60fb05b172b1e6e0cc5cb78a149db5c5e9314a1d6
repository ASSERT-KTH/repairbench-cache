{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      // Using NodeUtil.getBestJSDocInfo to find JSDoc even if attached\n      // to the parent assign or var node.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are defined inside an object literal\n      // annotated with @lends. These functions are implicitly methods\n      // of the target prototype specified by @lends.\n      Node objectLiteralNode = null;\n      if (parent != null && parent.isObjectLitKey()) {\n          // Function is a value for a property in an object literal.\n          // e.g. { key: function() {...} }\n          // Parent = STRING/NUMBER/GETPROP (key node)\n          // Grandparent = OBJECTLIT\n          objectLiteralNode = parent.getParent();\n      } else if (parent != null && parent.isObjectLit()) {\n           // Function is maybe an ES6 method definition?\n           // e.g. { method() {...} }\n           // Parent = OBJECTLIT\n           objectLiteralNode = parent;\n      }\n\n      if (objectLiteralNode != null && objectLiteralNode.isObjectLit()) {\n         // Find the JSDoc associated with the object literal itself, possibly\n         // looking at its parents (e.g., if used in an assignment or call).\n         JSDocInfo objectLitJsDoc = NodeUtil.getBestJSDocInfo(objectLiteralNode);\n         if (objectLitJsDoc != null && objectLitJsDoc.getLendsName() != null) {\n            return false; // Don't traverse functions within @lends\n         }\n      }\n\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      // Keep the original heuristic check.\n      if (parent != null) {\n          int pType = parent.getType();\n          if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.NAME || // e.g. var x = function name() {...}\n                pType == Token.ASSIGN || // e.g. x = function() {...}\n                // object literal keys\n                pType == Token.STRING || // e.g. { 'key': function() {...} }\n                pType == Token.NUMBER)) { // e.g. { 1: function() {...} }\n            return false;\n          }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype. (Handled by @lends check now)\n    }\n\n    // Original check for assignments to prototype properties.\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        // NOTE: Modifying state (assignLhsChild) in shouldTraverse is discouraged.\n        // This state should ideally be managed in the visit method.\n        // Retaining original logic assuming it's required by the class structure.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else if (n == rhs) { // Check if 'n' is the RHS (the function)\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        // Using NodeUtil.isPrototypeProperty is more robust, but retain original\n        // logic for minimal change if required.\n        if (NodeUtil.isPrototypeProperty(lhs)) {\n           return false; // Don't traverse functions assigned to prototype properties.\n        }\n        // Fallback to original logic if NodeUtil.isPrototypeProperty isn't desired:\n        /*\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            // Prevents traversing RHS when assigning directly to Foo.prototype\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            // Prevents traversing RHS when assigning to Foo.prototype.bar\n            return false;\n          }\n        }\n        */\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}