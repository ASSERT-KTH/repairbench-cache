{
    "generation": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     *\n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @throws ArithmeticException if the gcd is equal to 2^31,\n     *         as it cannot be represented as a positive int\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        // Handle cases involving zero or Integer.MIN_VALUE\n        if (u == 0 || v == 0) {\n            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n                // gcd(MIN_VALUE, 0) = 2^31\n                // gcd(MIN_VALUE, MIN_VALUE) = 2^31\n                // The result 2^31 cannot be represented as a positive int\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            // gcd(x, 0) = |x|\n            return Math.abs(u) + Math.abs(v); // |u| or |v|\n        }\n\n        // If u or v is MIN_VALUE, proceed since the algorithm uses negative numbers.\n        // The case gcd(MIN_VALUE, MIN_VALUE) is handled implicitly by the k=31 check later.\n\n        // Keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        // If k=31, it means the gcd is 2^31 (can happen only if u=MIN_VALUE, v=MIN_VALUE)\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        // t = (u is odd) ? v : -u/2\n        // The initial value of t; depends on parity of u\n        // If u is odd, t = v (t is negative). Loop will halve t if v is even.\n        // If u is even, v is odd, t = -u/2 (t is positive). Loop will halve t if -u/2 is even.\n        int t = ((u & 1) == 1) ? v : -(u / 2);\n\n        // Loop invariant: At the start of the loop, t is the value to be processed.\n        // |u| and |v| may be updated inside the loop.\n        // The gcd(|u|, |v|) * 2^k remains the same.\n        do {\n            /* assert u<0 && v<0; */ // This assertion might fail in the first iteration\n                                    // if u or v were replaced by -t where t>0.\n\n            // B4/B3: cast out twos from t.\n            // Make t odd by dividing by 2 repeatedly.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n\n            // B5 [reset max(u,v)]\n            // Replace the value with the larger absolute value with t (or -t).\n            // If t is positive, it replaces u (which was even). u = -t makes u negative odd.\n            // If t is negative, it replaces v (which was odd or even). v = t makes v negative odd.\n            if (t > 0) {\n                u = -t;\n            } else { // t < 0 (t cannot be 0 here)\n                v = t;\n            }\n\n            // B6/B3. At this point both u and v should be odd and negative.\n            // Calculate the next difference / 2.\n            // t = (v - u) / 2 = (-|v| - (-|u|)) / 2 = (|u| - |v|) / 2\n            // This difference is even because u and v are both odd.\n            t = (v - u) / 2;\n            // If |u| > |v|, t is positive. Next iteration B5 will set u = -t.\n            // If |v| > |u|, t is negative. Next iteration B5 will set v = t.\n        } while (t != 0); // Loop until difference is 0, meaning |u| = |v|\n\n        // The gcd is |u| * 2^k (or |v| * 2^k). Since u is negative, it's -u * 2^k.\n        // The result must be positive.\n        // The only overflow case (gcd = 2^31) was handled earlier.\n        return -u * (1 << k);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}