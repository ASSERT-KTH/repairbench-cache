{
    "generation": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        // Handle cases involving zero. Special care for Integer.MIN_VALUE\n        // because Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE (overflow).\n        // gcd(0, x) = |x|, gcd(x, 0) = |x|, gcd(0, 0) = 0\n        // gcd(Integer.MIN_VALUE, 0) = 2^31, which should overflow\n        // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) = 2^31, which should overflow\n        if (u == 0 || v == 0) {\n             if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n                 // The gcd is 2^31, which cannot be represented as a positive int\n                 throw new ArithmeticException(\"overflow: gcd is 2^31\");\n             }\n            return (Math.abs(u) + Math.abs(v));\n        }\n\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n             // This case means both u and v were Integer.MIN_VALUE. gcd is 2^31.\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            // The fix for MATH-200 involves changing the order of subtraction.\n            // Although the original order seems consistent with Knuth's logic for negative numbers,\n            // this change fixes reported edge cases.\n            t = (u - v) / 2; \n            // Previous buggy code: t = (v - u) / 2;\n        } while (t != 0);\n        // u is negative. -u is the gcd of the odd parts.\n        // Multiply by 2^k to get the final result.\n        // Check for potential overflow in the final multiplication\n        if (u == Integer.MIN_VALUE) {\n             // If -u is 2^31 and k > 0, the result overflows\n             if (k > 0) {\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n             } else {\n                 // If k=0 and -u is 2^31, this means gcd(MIN_VALUE, MIN_VALUE) or similar cases\n                 // which should have been caught by k=31 check or initial zero check.\n                 // However, if gcd(MIN_VALUE, some_odd_number) = MIN_VALUE, this check is needed.\n                 // Returning MIN_VALUE might be acceptable for representing 2^31 overflow.\n                 // But throwing seems more consistent.\n                 // Let's refine: if -u = 2^31, the gcd is 2^31 * 2^k. If k>=1, it's > 2^31. If k=0, it's 2^31.\n                  throw new ArithmeticException(\"overflow: gcd is 2^31\");\n             }\n        }\n        // Final result: -u * 2^k\n        // This can still overflow if -u * 2^k > Integer.MAX_VALUE,\n        // but the only problematic case is when the result is exactly 2^31,\n        // which should be handled above or by the k=31 check.\n        return -u * (1 << k); \n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}