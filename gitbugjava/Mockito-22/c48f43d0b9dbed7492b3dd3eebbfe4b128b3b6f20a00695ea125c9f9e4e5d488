{
    "generation": "    public static boolean areEqual(Object o1, Object o2) {\n        if (o1 == o2) { // Check for identity first. Handles same instance cases like (arr, arr) and (badequals, badequals).\n            return true;\n        }\n        if (o1 == null || o2 == null) {\n            // If they are not identical (checked above), and one is null, they are not equal.\n            // The original code 'return o1 == null && o2 == null;' is equivalent after the identity check,\n            // because if we reach here, o1 != o2. If one is null, the other isn't, so the && is false.\n            // If both were null, the identity check 'o1 == o2' would have caught it.\n            return false;\n        }\n        // From here, o1 and o2 are non-null and not identical (o1 != o2).\n        if (isArray(o1)) {\n            // If o1 is an array, o2 must also be an array and their contents must be equal.\n            return isArray(o2) && areArraysEqual(o1, o2);\n        } else {\n            // o1 is not an array. o2 is not null. o1 != o2.\n            // For equality, o2 must also not be an array (this check is implicit,\n            // as if o2 were an array, the flow would likely enter the 'if (isArray(o1))' block\n            // if called as areEqual(o2, o1), or o1.equals(o2) should return false).\n            // Rely on the equals method for non-array object comparison.\n            return o1.equals(o2);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}