{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                // update namespaces, also get the element's prefix\n                String prefix = updateNamespaces(sourceEl);\n                String tagName = sourceEl.tagName();\n                // look up namespace uri for this element's prefix\n                String namespace = namespacesStack.peek().get(prefix);\n\n                Element el;\n                // A null namespace indicates that the prefix is undeclared. Create element without namespace.\n                // However, createElementNS will raise NAMESPACE_ERR if the tagName has a prefix and namespace is null.\n                if (namespace == null && tagName.contains(\":\")) {\n                    // TODO: This creates the element without a namespace, but the nodename will retain the prefix.\n                    // Is this the desired behavior? It matches the test case expectation.\n                    el = doc.createElement(tagName);\n                } else {\n                    // Creates elements with namespaces - handles default namespace correctly (if prefix is \"\", namespace ! = null)\n                    // Handles elements without namespaces correctly (if prefix is \"\", namespace = null)\n                    // Handles elements with declared namespaces correctly (if prefix !=\"\", namespace != null)\n                    el = doc.createElementNS(namespace, tagName);\n                }\n\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                // Note: DataNodes are not compatible with XML/HTML DOM; created as Text\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled node types (like DocumentType)\n                // TODO: Handle other node types if required\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}