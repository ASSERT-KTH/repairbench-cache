{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                // Update namespaces defined on this element AFTER inheriting parent namespaces\n                updateNamespaces(sourceEl);\n\n                String tagName = sourceEl.tagName(); // e.g., \"fb:like\", \"div\"\n                String prefix = null;\n                final int colon = tagName.indexOf(':');\n                if (colon > 0) {\n                    prefix = tagName.substring(0, colon);\n                }\n\n                // Determine the namespace URI for this element's prefix (or default namespace if no prefix)\n                // Use \"\" key for the default namespace\n                String namespace = namespacesStack.peek().get(prefix != null ? prefix : \"\");\n\n                Element el;\n                if (namespace != null) {\n                     // Namespace is declared (or default namespace exists)\n                     // Use createElementNS. tagName includes the prefix, which is correct per spec.\n                     el = doc.createElementNS(namespace, tagName);\n                } else {\n                    // No namespace found for this prefix (or no default namespace is active).\n                    // This occurs for undeclared prefixes (like <fb:like> without xmlns:fb)\n                    // or for tags in no namespace (like <html> or <p> when no default ns is declared).\n                    // The DOM spec disallows createElementNS(null, \"prefix:name\").\n                    // Use createElement, which creates elements in the null namespace.\n                    el = doc.createElement(tagName);\n                }\n\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                // Skip empty text nodes\n                if (!sourceText.isBlank()) {\n                    Text text = doc.createTextNode(sourceText.getWholeText());\n                    append(text); // Use helper to avoid NPE if dest is null\n                }\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                append(comment); // Use helper\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                // DataNodes (like <script> data) are not typically represented in standard XML DOM\n                // Jsoup's parser uses them for convenience. We can convert them to Text nodes.\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                append(node); // Use helper\n            } else {\n                // Handle other node types like DocumentType, CDataSection if needed\n                // For now, unhandled types are ignored.\n            }\n        }\n\n        // Helper method to safely append a node to the current destination or the document root\n        private void append(Node node) {\n            if (dest != null) {\n                dest.appendChild(node);\n            } else {\n                doc.appendChild(node); // Append to document if dest is null (e.g., comment before root)\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}