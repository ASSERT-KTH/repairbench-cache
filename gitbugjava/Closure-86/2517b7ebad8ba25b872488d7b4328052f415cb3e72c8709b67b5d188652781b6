{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable. Conservatively, assume mutable values assigned\n        // are non-local unless the RHS is proven local by other means.\n        // The result of assignment is the RHS value. Check if it's immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild());\n      case Token.COMMA:\n        // Result of comma is the result of the last operand.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // Result is local only if both operands evaluate to local values.\n        // (If the first operand determines the result, it's returned, otherwise the second is).\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n         // Result is local only if both possible results evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          // Postfix operators evaluate to the value prior to the change.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          // Prefix operators evaluate to a numeric value (primitive), which is local.\n          return true;\n        }\n      case Token.THIS:\n        // \"this\" is conceptually local to the function, but complex cases exist.\n        // Treat as non-local unless the predicate explicitly marks it local.\n        // Note: locals.apply(value) might not be suitable for THIS node directly.\n        return locals.apply(value);\n      case Token.NAME:\n        // A name is local if it refers to an immutable value or the\n        // name is known to be local by the predicate.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property accesses are assumed non-local, as we don't know what they return.\n        // Even if the object is local, the property value might be a non-local reference.\n        return false;\n      case Token.CALL:\n        // Result of a call is local if the function is known to return\n        // a local value (e.g., primitives via @return annotation),\n        // or it's toString(), or the predicate knows something about the call node.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value); // locals.apply(call) is less common\n      case Token.NEW:\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        // For now, be conservative: a new object might have its reference\n        // leaked by the constructor. Assume non-local. This aligns with\n        // testLocalValue1 expectations. Callers like PureFunctionIdentifier might\n        // need specific logic for calls on NEW nodes (e.g., (new Foo).bar()).\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects/functions/regexps are created locally.\n        // Even if mutable, they start local. This is consistent with\n        // tests expecting assertTrue(testLocalValue(\"[]\")).\n        return true;\n      case Token.IN:\n        // Result of 'in' is boolean (primitive), which is local.\n        return true;\n      default:\n        // Assignment ops (like +=) and simple operators (like +, ==, !)\n        // typically produce primitives (number, string, boolean), which are local.\n        // Check for immutable values as well (e.g. literal numbers, strings).\n        if (isAssignmentOp(value) && !value.isAssign()) { // e.g., +=, -=, *=. Excludes ASSIGN (=) handled above.\n             return true;\n        }\n        if (isSimpleOperator(value) // e.g., +, -, !, ==, typeof, void, etc.\n            || isImmutableValue(value)) { // e.g., 1, \"a\", true, null, undefined\n          return true;\n        }\n\n        // If we reach here, it's an expression type we don't recognize or handle.\n        throw new IllegalStateException(\n            \"Unexpected expression node type\" + value.getToken() +\n            \" \" + value.toStringTree() +\n            \"\\n parent:\" + (value.getParent() != null ? value.getParent().toStringTree() : \"null\"));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}