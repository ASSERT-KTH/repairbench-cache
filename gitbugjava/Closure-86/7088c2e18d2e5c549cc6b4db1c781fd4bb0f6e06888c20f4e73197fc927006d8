{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        // An assignment evaluates to a local value if the right hand side is\n        // an immutable value or the right hand side evaluates to a local value\n        // and the assigned node is considered local by the predicate.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value) // Check if ASSIGN node itself is considered local\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        // A comma expression evaluates to the result of the last expression.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // Logical operators return one of their operands, so the result is\n        // local iff both operands evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // Hook operator returns one of the two branches, so the result is\n        // local iff both branches evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // Check for post-increment/decrement (e.g., x++, x--).\n        // The INCRDECR_PROP property is true for postfix.\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // Postfix\n          // Postfix operators return the original value of the operand.\n          // The result's locality depends on the operand's locality.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else { // Prefix (e.g., ++x, --x)\n          // Prefix operators return the new numeric value.\n          // Numbers are immutable primitives, hence always local.\n          return true;\n        }\n      case Token.THIS:\n        // 'this' refers to the current object context. It's considered local only\n        // if the locals predicate explicitly identifies it as such (e.g., within\n        // a constructor called via 'new' on a local variable).\n        return locals.apply(value);\n      case Token.NAME:\n        // A variable name evaluates to a local value if it refers to an\n        // immutable primitive (undefined, NaN, Infinity) or if the locals\n        // predicate identifies it as a local variable.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Accessing a property (obj[prop] or obj.prop). The result is the\n        // value of the property. We don't have information about the locality\n        // of arbitrary property values. Considered local only if the locals\n        // predicate explicitly marks the GETELEM/GETPROP node.\n        return locals.apply(value);\n      case Token.CALL:\n        // A function call's result is generally non-local unless we know otherwise:\n        // 1. Specific annotations indicate a local result (callHasLocalResult).\n        // 2. It's a call to .toString(), which often returns a local primitive string.\n        // 3. The locals predicate explicitly marks the CALL node as local.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // Creating a new object (new Constructor(...)).\n        // While the object is newly created, the constructor could potentially\n        // alias 'this' to a non-local variable or have other side effects.\n        // Without analyzing the constructor, we conservatively assume the result\n        // is not guaranteed to be local.\n        // TODO(nicksantos): Refine this by analyzing the constructor.\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals (functions, regexps, arrays, objects) created directly in the\n        // expression are considered local values. Their contents might refer to\n        // non-local values, but the container itself is local.\n        return true;\n      case Token.IN:\n        // The 'in' operator returns a boolean (primitive), which is always local.\n        return true;\n      default:\n        // Other expression types:\n        // - Assignment operators (+=, -=, etc.) result in primitive values (number, string)\n        //   or modify the LHS in-place. The result value is local.\n        // - Simple binary operators (+, -, *, etc.) and unary operators (!)\n        //   result in primitive values (boolean, number, string), which are local.\n        // - If the node itself represents an immutable value (null, true, 1, \"a\").\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        // If none of the above cases match, this node type is unexpected within\n        // an expression context where locality matters.\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}