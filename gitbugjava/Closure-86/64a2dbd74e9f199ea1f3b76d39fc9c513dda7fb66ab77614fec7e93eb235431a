{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        Node rhs = value.getLastChild();\n        Node lhs = value.getFirstChild();\n        // If the RHS is immutable, the result is local.\n        // If the RHS is mutable, the result is local only if the LHS is local\n        // (to prevent aliasing) and the RHS itself is classified as local.\n        // Note: This assumes `locals.apply(lhs)` checks if the L-value target\n        // is definitely local.\n        return NodeUtil.isImmutableValue(rhs)\n            || (locals.apply(lhs) && evaluatesToLocalValue(rhs, locals));\n      case Token.COMMA:\n        // The result of a comma expression is the result of the last operand.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // The result is local iff both operands evaluate to local values,\n        // as either could be the result.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // The result is local iff both potential result branches evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // Prefix operation, e.g., ++x\n          // Prefix increment/decrement evaluates to a Number primitive, which is local.\n          return true;\n        } else { // Postfix operation, e.g., x++\n          // Postfix increment/decrement evaluates to the value *before* the operation.\n          // Its locality depends on the locality of the operand's original value.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        }\n      case Token.THIS:\n        // 'this' is considered local only if the predicate explicitly says so\n        // (e.g., inside a constructor for a known local allocation).\n        return locals.apply(value);\n      case Token.NAME:\n        // A variable is local if it refers to an immutable value (like 'undefined'),\n        // or if the predicate identifies it as a known local variable.\n        return NodeUtil.isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property accesses might return non-local values, even if the base object\n        // is local (e.g., accessing a prototype property). Conservatively assume non-local.\n        return false;\n      case Token.CALL:\n        // A call result is local if we have specific knowledge from analysis\n        // (callHasLocalResult), or it's a known safe method like toString(),\n        // or the predicate says the call node itself represents a local result.\n        return NodeUtil.callHasLocalResult(value)\n            || NodeUtil.isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // Constructor calls create new objects. While initially local, the constructor\n        // might alias 'this' or return/store a non-local value. Without deeper analysis\n        // (like callHasLocalResult provides for CALL), conservatively assume the\n        // result is non-local.\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return false; // Changed from 'return true'\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals always create new, unique values that are initially local.\n        return true;\n      case Token.IN:\n        // The 'in' operator returns a boolean primitive, which is local.\n        return true;\n      default:\n        // Other operators:\n        // - Assignment operators (+=, -=, etc., excluding regular ASSIGN) result\n        //   in primitives (Number, String).\n        // - Simple operators (!, ~, +, -, typeof, instanceof, comparisons, etc.)\n        //   result in primitives or booleans.\n        // - Nodes representing immutable values directly (Number, String, Boolean,\n        //   Null, Void).\n        // All these evaluate to local values.\n        if (NodeUtil.isAssignmentOp(value) // excludes ASSIGN, handled above\n            || NodeUtil.isSimpleOperator(value)\n            || NodeUtil.isImmutableValue(value)) {\n          return true;\n        }\n\n        // If we reach here, the node type is unexpected in an expression context\n        // where locality matters, or it's an unhandled case.\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}