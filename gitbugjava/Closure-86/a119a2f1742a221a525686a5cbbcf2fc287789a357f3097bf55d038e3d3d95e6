{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // An assignment evaluates to the value assigned (the RHS).\n        // It's local if the RHS evaluates to local OR if the RHS is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.COMMA:\n        // A comma expression evaluates to the last operand.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // Logical AND/OR evaluate to one of the operands.\n        // The result is local iff both operands evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // Conditional operator evaluates to the second or third operand.\n        // The result is local iff both potential results evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // Prefix ++x or --x\n          // Result is the new numeric value, which is primitive and local.\n          return true;\n        } else { // Postfix x++ or x--\n          // Result is the original value of x. Local iff x was local.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        }\n      case Token.THIS:\n        // 'this' is local only if the predicate says so.\n        return locals.apply(value);\n      case Token.NAME:\n        // A name is local if it refers to an immutable value or if the predicate says so.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property access. Generally non-local unless predicate knows otherwise.\n        // Need to be conservative. Might be an immutable property (e.g. string length)\n        // but we don't have generally know that. Rely on the predicate.\n        // NOTE: This might be too conservative in some cases (e.g., {}.foo),\n        // but is safe.\n        return locals.apply(value);\n      case Token.CALL:\n        // A call is local if analysis determines its result is local (callHasLocalResult),\n        // or if it's specifically .toString(), or if the predicate overrides.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A 'new' expression creates an object. This object is initially local but\n        // the constructor could alias it or return a non-local object. Without\n        // knowing constructor behavior, assume it's non-local (conservative).\n        // The predicate might override this if context allows.\n        // Returning false aligns with testLocalValue1 expectations and the\n        // original TODO comment suggesting this needs more sophisticated analysis.\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals create new, local values.\n        return true;\n      case Token.IN:\n        // 'prop' in obj -> boolean (local)\n        return true;\n      default:\n        // Assignment Ops (+=, *=, etc.) result in primitives (local).\n        // Simple Operators (!, ~, +, -, *, /, %, <<, >>, >>>, <, <=, >, >=,\n        // ==, !=, ===, !==, &, |, ^, instanceof, typeof, void) result in primitives (local).\n        // Immutable values (constants, primitives) are local.\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        // If we encounter an unexpected node type, throw error.\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value.toStringTree() +\n            \"\\n parent:\" + (value.getParent() != null ? value.getParent().toStringTree() : \"null\"));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}