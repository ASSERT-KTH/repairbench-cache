{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        // If the RHS is immutable, the result is local.\n        // If the RHS is mutable, the result is local only if the RHS evaluates\n        // to local AND the LHS is\u7bc7 known local target.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value.getFirstChild()) // Check if target is local\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        // Result is the RHS.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // Result is local only if both operands result in local values.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // Result is local only if both possible results are local.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          // Prefix operators return a number, which is local.\n          return true;\n        } else {\n          // Postfix operators return the original value. Check its locality.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        }\n      case Token.THIS:\n        // 'this' is non-local unless specified otherwise.\n        return locals.apply(value);\n      case Token.NAME:\n        // A name is local if it refers to an immutable value or the predicate\n        // identifies it as local.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property accesses are assumed non-local unless the predicate specifies.\n        // TODO(johnlenz): A property of a local object is local if its value\n        // is local.\n        return locals.apply(value);\n      case Token.CALL:\n        // Call results are local if the function is known to return local values,\n        // it's toString (returns primitive string), or the predicate says so.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A new object is generally non-local because it creates a reference that\n        // might be aliased. Return false unless the predicate specifically marks\n        // this 'new' expression instance as producing a local result.\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals create new objects/functions locally.\n        return true;\n      case Token.IN:\n        // The 'in' operator returns a boolean, which is local.\n        return true;\n      default:\n        // Other operators that produce primitives (numbers, strings, booleans)\n        // or operate on primitives result in local values.\n        // This includes assignment ops (+=, *=, etc.), simple operators\n        // (arithmetic, bitwise, comparison, logical NOT, typeof, void, etc.),\n        // and nodes representing immutable values themselves.\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        // Report unexpected node types to catch unhandled cases.\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}