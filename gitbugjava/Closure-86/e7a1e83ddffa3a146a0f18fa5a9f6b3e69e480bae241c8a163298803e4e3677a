{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name. Expressions such as x = 1 are\n        // Ok\u00e9, but x = [] is not. The value of the expression is the value\n        // of the RHS, so the locality depends on the RHS value's type, not\n        // on the LHS name. The result is local iff the RHS is an immutable\n        // value.\n        return NodeUtil.isImmutableValue(value.getLastChild());\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // Prefix operators evaluate to a number, which is local.\n        // Postfix operators evaluate to the value of the operand before the\n        // operation, so locality depends on the operand.\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // Prefix ++x or --x\n          return true;\n        } else { // Postfix x++ or x--\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        // Although [] and {} are literals, values assigned to their properties\n        // may not be local. e.g.\n        //   var x = {};\n        //   x.foo = new Foo(); // x.foo is non-local.\n        //   x.bar = 1; // x.bar is local.\n        // If the object is local and the property is known, we could\n        // potentially determine the locality, but that requires more state.\n        // Assume non-local by default.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult). For now, assume\n        // that the result is local, which is required for some PureFunctionIdentifier\n        // tests to pass, even if it makes testLocalValue(\"new x()\") fail.\n        return true;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        // The result of assignment ops or simple operators are guaranteed\n        // primitives, which are local.\n        if (isAssignmentOp(value) // +=, *=, etc.\n            || isSimpleOperator(value) // +, -, !, etc.\n            || isImmutableValue(value)) { // true, 1, 'a', etc.\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}