{
    "generation": "    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException\n    {\n        // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly\n        //    configured root name... And that may override the default/implicit 'null' name\n        if (jgen instanceof ToXmlGenerator) {\n            ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;\n            PropertyName rootNameProp = null;\n            // Check if root wrapping enabled and root name configured\n            // Note: _rootName is the configured root name from SerializationConfig\n            // (see XmlSerializerProvider constructor), and needs to be respected\n            // Also note: if root name is explicitly set to \"null\", should use that\n            if (_config.isRootWrappingEnabled() && _rootName != null) {\n                // Let's not block \"null\" itself\n                String simple = _rootName.getSimpleName();\n                if (!simple.isEmpty()) {\n                     // but empty name is problematic, use default\n                    rootNameProp = _rootName;\n                }\n            }\n\n            if (rootNameProp == null) {\n                // No root name configured or it was empty, use default <null/>\n                // _initWithRootName will call setNextNameIfMissing(ROOT_NAME_FOR_NULL) and initGenerator()\n                _initWithRootName(xmlGen, ROOT_NAME_FOR_NULL);\n            } else {\n                // Configured root name exists. Set it and initialize the generator.\n                // `setNextName` handles PropertyName -> QName conversion.\n                xmlGen.setNextName(rootNameProp);\n                xmlGen.initGenerator();\n            }\n        }\n        // This will call NullSerializer.serialize, which calls jgen.writeNull().\n        // ToXmlGenerator.writeNull() will use the _nextName set above.\n        super.serializeValue(jgen, null);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}