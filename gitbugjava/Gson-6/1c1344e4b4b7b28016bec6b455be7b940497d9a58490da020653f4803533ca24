{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n          .construct() // Construct the factory\n          .create(gson, fieldType); // Call create() to get the adapter, which might be null\n    } else {\n        // Logic for JsonSerializer and JsonDeserializer might be needed here for full correctness,\n        // but based on the original code structure, only TypeAdapter and TypeAdapterFactory were handled.\n        // Throwing exception as in the original code.\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference. \"\n          + value + \" is not supported.\"); // Added value type to error message\n    }\n\n    // Apply nullSafe wrapper only if the adapter is not null AND the annotation requests it\n    if (typeAdapter != null && annotation.nullSafe()) {\n      typeAdapter = typeAdapter.nullSafe();\n    }\n    // Return the adapter (potentially null if the factory returned null)\n    return typeAdapter;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}