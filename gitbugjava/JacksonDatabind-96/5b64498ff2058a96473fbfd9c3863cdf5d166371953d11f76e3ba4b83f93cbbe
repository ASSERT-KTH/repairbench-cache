{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            // NOTE: as per [databind#2410], naming strategy DOES apply to delegating creators,\n            // so we DO need to check for explicit name\n            if ((oneNotInjected >= 0) && (candidate.paramName(oneNotInjected) == null)) {\n                 // getting close; but most not have explicit name (may have implicit)\n                 if (candidate.explicitParamName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                 }\n            }\n            // Otherwise, property-based:\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // Handle the single-argument case\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n        PropertyName explicitName = candidate.explicitParamName(0);\n\n        // If there's injection or explicit name, should be properties-based\n        boolean useProps = (explicitName != null) || (injectId != null);\n        PropertyName nameForProperty = explicitName; // Start with explicit name if available\n\n        if (!useProps && (paramDef != null)) {\n            // One more thing: if implicit name matches property with a getter\n            // or field, we'll consider it property-based as well\n\n            // 01-Jun-2018, tatu: Per [databind#2051], need parameter name for props-based,\n            //   implicit name is fine.\n            PropertyName implicitName = candidate.findImplicitParamName(0);\n            if (implicitName != null && paramDef.couldSerialize()) {\n                 useProps = true;\n                 nameForProperty = implicitName; // Use implicit name if it triggers property-based mode\n            }\n        }\n\n        if (useProps) {\n            // If we decided to use properties, nameForProperty should be set\n            // (either from explicit name, or implicit name).\n            // Exception: if useProps is true ONLY due to injectId, nameForProperty might be null.\n            // constructCreatorProperty handles null name + non-null injectId case.\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, nameForProperty, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // Otherwise, must be delegating or value creator\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        // 28-Mar-2017, tatu: Important -> only remove if NOT used for properties-based Creator\n        if (paramDef != null) {\n            ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}