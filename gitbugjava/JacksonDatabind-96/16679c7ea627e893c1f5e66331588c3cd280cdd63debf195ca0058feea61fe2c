{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            // Otherwise, property-based is the only other possibility:\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // Handle the single-argument case:\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName explicitParamName = candidate.explicitParamName(0);\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // First: if injectable or explicitly named, use property-based\n        boolean useProps = (explicitParamName != null) || (injectId != null);\n        PropertyName nameForProperty = explicitParamName;\n\n        if (!useProps && (paramDef != null)) {\n            // Second: if not, but there is a matching property definition\n            // that could be serialized (meaning there is a field or getter),\n            // let's also consider it property-based.\n            // [databind#2051]: Make sure to use name potentially modified by naming strategy\n            if (paramDef.couldSerialize()) {\n                 useProps = true;\n                 nameForProperty = paramDef.getFullName();\n            }\n            // If neither explicit name/injection NOR matching property,\n            // keep 'useProps' false == use Delegating Creator\n        }\n\n        if (useProps) {\n            // If property-based:\n            // We may still need name; specifically, if solely based on `@JacksonInject`\n            // (that is, explicit name is null)\n             if (nameForProperty == null) {\n                 // 13-Jun-2018, tatu: As per [databind#2051], need name to use here.\n                 //   Let's use name from property definition, if we have one...\n                 if (paramDef != null) {\n                     nameForProperty = paramDef.getFullName();\n                 }\n                 // and if not, basic implicit name from parameter\n                 if (nameForProperty == null) {\n                    nameForProperty = candidate.findImplicitParamName(0);\n                 }\n             }\n\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, nameForProperty, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // Otherwise, must be a delegating creator\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        if (paramDef != null) {\n            // 18-Sep-2017, tatu: This is unfortunate hack; ideally parameter should\n            //    perhaps not be included in list of properties but...\n             ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}