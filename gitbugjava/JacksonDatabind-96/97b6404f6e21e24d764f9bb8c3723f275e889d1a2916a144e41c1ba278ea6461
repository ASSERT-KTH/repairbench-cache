{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but must not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // Handle the single-argument case:\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName explicitParamName = candidate.explicitParamName(0);\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // If there's injection or explicit name, should be properties-based\n        boolean useProps = (explicitParamName != null) || (injectId != null);\n        PropertyName nameForCreator = explicitParamName; // Start with explicit name if available\n\n        if (!useProps && (paramDef != null)) {\n            // No explicit name or injection; but parameter definition exists.\n            // If definition implies a property that can be serialized (like has getter/field),\n            // we will consider it property-based.\n            // Crucially, use name from definition, as it may be affected by naming strategy.\n\n            // Original code used implicit name here - INCORRECT for naming strategy\n            // PropertyName implicitParamName = candidate.findImplicitParamName(0);\n            // useProps = (implicitParamName != null) && paramDef.couldSerialize();\n\n            // CORRECTED LOGIC: Use name from paramDef if it corresponds to a serializable property\n            PropertyName potentialName = paramDef.getName();\n            if (potentialName != null && !potentialName.isEmpty()) {\n                 if (paramDef.couldSerialize()) {\n                     useProps = true;\n                     nameForCreator = potentialName; // Use the strategy-aware name\n                 }\n            }\n        }\n\n        if (useProps) {\n            // Construct property using the determined name (explicit or from paramDef).\n            // constructCreatorProperty can handle injection details and potential naming conflicts.\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, nameForCreator, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // If not deemed property-based, handle as delegating (String->type, long->type etc)\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        if (paramDef != null) {\n            ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}