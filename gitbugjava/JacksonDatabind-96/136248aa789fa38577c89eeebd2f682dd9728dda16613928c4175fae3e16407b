{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // Handle 1-argument case\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName explicitName = candidate.explicitParamName(0); // Use a separate variable\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // Property-based if explicit name or injection present\n        boolean useProps = (explicitName != null) || (injectId != null);\n        PropertyName nameToUse = explicitName; // Name to use for the creator property defaults to explicit\n\n        // Flag to indicate if implicit name check triggered property-based mode\n        boolean usePropsBasedOnImplicit = false;\n\n        if (!useProps && (paramDef != null)) {\n            // If not property-based yet, check if implicit name matches a serializable property\n            // Note: findImplicitParamName() applies naming strategy\n            PropertyName implicitName = candidate.findImplicitParamName(0);\n            if (implicitName != null && paramDef.couldSerialize()) {\n                 // Yes, treat as property-based\n                 useProps = true;\n                 // Use the implicit (renamed) name for the property, as this is what JSON likely uses\n                 nameToUse = implicitName;\n                 usePropsBasedOnImplicit = true; // Mark that this decision was based on implicit name\n            }\n            // If implicitName is null or property couldn't serialize, useProps remains false.\n        }\n\n        // Now, proceed based on useProps\n        if (useProps) {\n            /* 13-Mar-2021, tatu: Problem is that of [#2051]; should use implicit name.\n             *   But looks like we must NOT use implicit name for actual construction,\n             *   as per [databind#3058], because it refers to discovery part, not binding.\n             *   Need to reconsider this part if/when #2051 is reworked.\n             *\n             *   Note: The following logic attempts to address a potential downstream validation issue\n             *   (like the one causing the test failure) where the property definition map might be keyed\n             *   by the logical name (\"paramName0\") while the property itself needs the renamed name\n             *   (\"param_name0\") for JSON matching. If the decision to use properties was based on the\n             *   implicit name, we might need to use the logical name when constructing the property\n             *   for registration/validation purposes, even though 'nameToUse' holds the correct JSON name.\n             *   This is a workaround for potential inconsistencies elsewhere.\n             */\n            PropertyName nameForCreator = nameToUse;\n\n            // If 'useProps' ONLY determined via implicit name + couldSerialize(),\n            // AND there's a known paramDef, use paramDef's name for construction\n            // to align with property definition maps used in validation/setup.\n            if (usePropsBasedOnImplicit && (explicitName == null) && (injectId == null)) {\n                if (paramDef != null) {\n                   // Use the logical name from definition, not the implicit/renamed one\n                   nameForCreator = paramDef.getFullName();\n                } else {\n                   // Fallback: should not occur if paramDef was needed for couldSerialize() check\n                   nameForCreator = PropertyName.construct(param.getName());\n                }\n            } else if (nameToUse == null && injectId != null) {\n                // Special case: only injection, no explicit or implicit name decided it.\n                // Property name needed; use logical name from definition or parameter.\n                if (paramDef != null) {\n                   nameForCreator = paramDef.getFullName();\n                } else {\n                   nameForCreator = PropertyName.construct(param.getName());\n                }\n            }\n            // If nameForCreator is still null (edge case?), let constructCreatorProperty handle it.\n\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, nameForCreator, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // If not property-based: Treat as delegating or scalar\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        if (paramDef != null) {\n            ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}