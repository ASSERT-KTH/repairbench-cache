{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // Handle the 1-parameter case\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        // Name derived from `@JsonProperty`, null if not specified\n        PropertyName explicitParamName = candidate.explicitParamName(0);\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // If there's injection or explicit name, should be properties-based\n        boolean useProps = (explicitParamName != null) || (injectId != null);\n        // Name to use if decided to be property-based\n        PropertyName nameForParam = explicitParamName;\n\n        if (!useProps && (paramDef != null)) {\n            // One more thing: if implicit name matches property with a getter\n            // or field, we'll consider it property-based as well\n\n            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get\n            //    not implicit name, but name with possible strategy-based-rename.\n            //    Need to use name from property definition (`paramDef`) itself.\n//            paramName = candidate.findImplicitParamName(0); // OLD, incorrect approach before 2.9.6\n            PropertyName nameFromDef = paramDef.getFullName();\n\n            // Does parameter match a known property with getter/field?\n            // (and has name)\n            if (paramDef.couldSerialize()) {\n                 useProps = true;\n                 // Use the name derived from the property definition, which is naming-strategy aware\n                 nameForParam = nameFromDef;\n            }\n        }\n\n        if (useProps) {\n             // Sanity check: if we use properties-based creator, must have a name OR explicit injection\n             // (otherwise wouldn't be here)\n             /*\n            if (nameForParam == null) {\n                 // should not occur but...\n                 ctxt.reportBadPropertyDefinition(beanDesc, paramDef,\n \"Argument #%d of constructor %s has no property name annotation; must have name when multiple-param constructor annotated as Creator\",\n                         0, candidate.creator());\n            }\n            */\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, nameForParam, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // Otherwise, fall back to single-argument creator handling\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        if (paramDef != null) {\n            ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}