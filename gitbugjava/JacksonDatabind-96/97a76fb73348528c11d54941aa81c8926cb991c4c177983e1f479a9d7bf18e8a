{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n        // If single argument, check if explicit name is given OR @JacksonInject used...\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName paramName = candidate.explicitParamName(0);\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // If there's injection or explicit name, should be properties-based\n        boolean useProps = (paramName != null) || (injectId != null);\n        if (!useProps && (paramDef != null)) {\n            // One more thing: if implicit name matches property with a getter\n            // or field, we'll consider it property-based as well\n\n            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get\n            //    not implicit name, but name with possible strategy-based-rename\n            //    ... so, use name from property definition, not implicit name:\n//            paramName = candidate.findImplicitParamName(0); // OLD code\n            PropertyName nameFromDef = paramDef.getFullName(); // NEW, fixed code [databind#2051]\n            if (paramDef.couldSerialize()) {\n                 paramName = nameFromDef;\n                 useProps = true;\n            }\n        }\n\n        if (useProps) {\n            // Sanity check: name should not be null after all this. For [databind#2051]\n            // we need to ensure Inject does not lead to null name.\n            if (paramName == null) {\n                 // 13-Jun-2019, tatu: Should try harder to find the name; maybe implicit?\n                 //   Specifically, injection only case...\n                 if (paramDef != null) {\n                     paramName = paramDef.getFullName();\n                 }\n                 if (paramName == null) {\n                     // TODO: report error? Or what?\n                     // Not sure if this can really happen, but let's add diagnostics\n                     ctxt.reportBadPropertyDefinition(beanDesc, paramDef,\n\"Could not find parameter name for parameter #%d/%d of constructor of %s: can not determine name, does not seem to be present in class definition\",\n                             0, 1, beanDesc.getBeanClass().getName());\n                     return; // or throw?\n                 }\n            }\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // Otherwise, assumed to be a delegating creator\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        // (note: sever ONLY if not property-based; otherwise links are needed)\n        if (paramDef != null) {\n            ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}