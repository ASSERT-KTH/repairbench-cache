{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // [databind#810]: Properties are special, force to <String,String>\n        if (rawClass == Properties.class) {\n            return MapType.construct(rawClass, CORE_TYPE_STRING, CORE_TYPE_STRING);\n        }\n        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            // nominally should never happen -- but perhaps some raw types slipped through?\n            // 18-Oct-2015, tatu: As per [databind#933], should be ok; require specialization\n             //    The case is Properties extending Hashtable<Object,Object>\n            // Or... let's rather assume it's <Object,Object> for now? Seems more practical\n            // than throwing exception\n            // 28-May-2018, tatu: No. This is not acceptable, see [databind#2040];\n            //    need to fail with more information\n            throw new IllegalArgumentException(String.format(\n                    \"Cannot find Key/Value type parameterization for Map class %s (via %s)\",\n                    rawClass.getName(), _referenceDesc(rawClass)));\n\n//            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}