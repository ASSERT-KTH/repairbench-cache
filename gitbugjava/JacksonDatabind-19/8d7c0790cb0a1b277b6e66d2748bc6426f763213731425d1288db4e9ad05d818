{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // 28-May-2015, tatu: Properties are special, as per [databind#810]\n        // Let's assume Properties are always <String,String>... may need to revise?\n        if (rawClass == java.util.Properties.class) {\n            // Use TypeFactory._stringType() to get JavaType for String\n            return MapType.construct(rawClass, _stringType(), _stringType());\n        }\n        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            // Use TypeFactory._unknownType() to get JavaType for Object\n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}