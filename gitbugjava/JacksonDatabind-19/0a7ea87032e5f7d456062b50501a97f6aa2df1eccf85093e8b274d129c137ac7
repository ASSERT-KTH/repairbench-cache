{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // 28-May-2015, tatu: Properties are special, as per [databind#810]\n        // Handle Properties explicitly as Map<String,String>\n        if (rawClass == Properties.class) {\n            return MapType.construct(rawClass, _stringType, _stringType);\n        }\n        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            // 18-Mar-2017, tatu: Sometimes this happens perhaps due to Reflection weirdness...\n            //   try to determine from super-class?\n            // TODO: try fallback for type determination? For now, punt\n            /* Alternatively, could consider check via `TypeBindings`:\n            JavaType mapType = findSuperType(rawClass, Map.class, TypeBindings.emptyBindings());\n            if (mapType != null) {\n                ...\n            }\n            */\n\n            // Otherwise, let's just consider it raw type\n            // 16-Jan-2018, tatu: As per [databind#1898], should not do this; causes issues\n            //    like thinking `Object` means `String` for properties\n//            return MapType.construct(rawClass, _unknownType(), _unknownType());\n            // 16-Jan-2018, tatu: Let's instead throw an exception, demand type resolution\n            throw new IllegalArgumentException(String.format(\n                    \"Cannot find Key/Value type parameterization for Map class %s (expected 2, found %d)\",\n                    rawClass.getName(), typeParams.length));\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}