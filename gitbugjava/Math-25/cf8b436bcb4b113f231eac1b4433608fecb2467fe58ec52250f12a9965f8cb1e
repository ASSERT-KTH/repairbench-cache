{
    "generation": "        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        private void guessAOmega() {\n            // Check abscissa range first.\n            final int last = observations.length - 1;\n            // Range of the observations, assuming that the observations are sorted.\n            final double xRange = observations[last].getX() - observations[0].getX();\n            if (xRange == 0) {\n                throw new ZeroException();\n            }\n\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n\n                // If dx == 0, this will lead to division by zero below.\n                // This case is implicitly handled by the xRange == 0 check\n                // if all points have the same x, or should be prevented by\n                // requiring distinct x values in the input observations.\n                // The original code did not explicitly check dx == 0 here.\n\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n\n            // Check for conditions that preclude sensible results.\n            // This includes potential division by zero if c2 or c3 is zero,\n            // and cases where the ratios required for sqrt are negative (MATH-844).\n            if (c2 == 0.0 || c3 == 0.0) {\n                 // Division by zero would occur when computing ratios c1/c2 or c2/c3.\n                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);\n            }\n\n            // Compute the ratios. Caching them is slightly more efficient\n            // and makes the condition check clearer.\n            final double c1OverC2 = c1 / c2;\n            final double c2OverC3 = c2 / c3;\n\n            if (c1OverC2 < 0.0 || c2OverC3 < 0.0) {\n                 // Negative value under square root required for amplitude or omega.\n                 // This indicates the guess based on the integration formulas failed,\n                 // often because the data is not well approximated by a harmonic function.\n                 // This is the case triggered by MATH-844.\n                 throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);\n            }\n\n            // If we passed the checks, compute the guess using the derived ratios.\n            // Note: A = sqrt(c1 / c2), omega = sqrt(c2 / c3)\n            a = FastMath.sqrt(c1OverC2);\n            omega = FastMath.sqrt(c2OverC3);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}