{
    "generation": "        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        private void guessAOmega() {\n            // Check abscissa range to avoid division by zero later\n            final int last = observations.length - 1;\n            final double xRange = observations[last].getX() - observations[0].getX();\n            if (xRange == 0) {\n                throw new ZeroException();\n            }\n\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                // Avoid division by zero if dx == 0 (e.g., duplicate points)\n                final double fPrime2StepIntegral = (dx == 0) ? 0.0 : (dy * dy / dx);\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n\n            // Check for conditions that indicate failure or fallback\n            if (c2 == 0.0 || c3 == 0.0) {\n                // If c2 or c3 is zero, the main calculation method fails (division by zero).\n                // This is considered an ill-conditioned case where the guesser cannot produce\n                // sensible results based on this method (cf. MATH-844).\n                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);\n            }\n\n            // Now that c2 and c3 are non-zero, check the ratios for negativity\n            double ratio1 = c1 / c2;\n            double ratio2 = c2 / c3;\n\n            if (ratio1 < 0 || ratio2 < 0) {\n                // Ratios are negative, indicating imaginary amplitude or frequency.\n                // Fallback to range-based estimation.\n                // xRange was already checked to be non-zero at the start.\n                omega = 2 * Math.PI / xRange;\n\n                // Correctly initialize yMin/yMax using the first observation's Y value\n                double yMin = observations[0].getY();\n                double yMax = yMin;\n                for (int i = 1; i < observations.length; ++i) {\n                    final double y = observations[i].getY();\n                    if (y < yMin) {\n                        yMin = y;\n                    }\n                    if (y > yMax) {\n                        yMax = y;\n                    }\n                }\n                a = 0.5 * (yMax - yMin);\n            } else {\n                // All checks passed: c2 != 0, c3 != 0, ratio1 >= 0, ratio2 >= 0.\n                // Proceed with the main calculation based on integrals.\n                a = FastMath.sqrt(ratio1);\n                omega = FastMath.sqrt(ratio2);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}