{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        // Hendle MonthDay logic by using a fixed leap year for calculation\n        // Fixes bugs relating to partial dates, leap years and day of month variations\n        \n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        if (DateTimeUtils.isContiguous(partial)) {\n            // Use a reference point basis for calculation based on a leap year.\n            // Using the partial date values, calculate the millis of the partial\n            // from 1970-01-01. Then add the months/days field from that.\n            // Finally, extract the partial fields from the result millis.\n            // Need to use a leap year base for calculation, cannot use 1970.\n            // Use 2004-01-01 as it is a leap year.\n            long instant = 0L;\n            // Find a suitable base instant avoiding issues with non-leap years\n            // Set the date component fields first from the partial\n            // Use a known leap year (2004) for safety\n            instant = iChronology.getDateTimeMillis(2004, 1, 1, 0); // Set to jan 1st\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // Perform the addition using the field's logic on the reference instant\n            instant = add(instant, valueToAdd);\n            // Extract the partial fields from the resulting instant\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}