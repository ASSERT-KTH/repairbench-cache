{
    "generation": "    Element insert(Token.StartTag startTag) {\n        Tag tag = Tag.valueOf(startTag.name());\n        // todo: wonder if for xml parsing, should treat all tags as unknown? because Elements are not restricted.\n\n        if (tag.isEmpty()) {\n            // Case 1: Void tag (e.g., <img>, <hr>). Always insert as empty, regardless of self-closing flag.\n            Element el = insertEmpty(startTag);\n            // The flag acknowledgement (if startTag was self-closing) is typically handled by the caller (process loop in TreeBuilder).\n            return el;\n        }\n\n        if (startTag.isSelfClosing()) {\n             // Case 2: Non-void tag explicitly self-closed (e.g., <div />, <foo />)\n            if (!tag.isKnownTag()) {\n                // Case 2a: Unknown tag self-closed (e.g., <foo />). Treat as empty.\n                Element el = insertEmpty(startTag);\n                // Flag acknowledgement handled by caller.\n                return el;\n            } else {\n                // Case 2b: Known non-void tag self-closed (e.g., <div />, <a />). HTML5 treats as start tag, ignore '/'.\n                // Fall through to normal insertion below. The flag is acknowledged by the caller as a parse error.\n            }\n        }\n\n        // Case 3: Normal start tag (e.g., <div>, <p>), or unknown non-self-closed tag (<foo>),\n        // or known non-void tag parsed as self-closing (<div />, <a />).\n        Element el = new Element(tag, baseUri, startTag.attributes);\n        insert(el); // Normal insertion (adds to parent, pushes to stack).\n        return el;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}