{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break; // Found the insertion point\n                        } else if (compare == 0) {\n                            // Durations are equal, compare range durations\n                            DurationField rangeField = null;\n                            if (fieldType.getRangeDurationType() != null) {\n                                rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            }\n                            DurationField loopRangeField = null;\n                            if (loopType.getRangeDurationType() != null) {\n                                loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            }\n                            \n                            if (rangeField == null) {\n                                if (loopRangeField == null) {\n                                    // Both null range fields, same duration field. Consider duplicate.\n                                     throw new IllegalArgumentException(\"Field '\" + fieldType.getName() + \"' is already supported\");\n                                } else {\n                                    // rangeField is null (infinite), loopRangeField is not. rangeField > loopRangeField. break.\n                                    break;\n                                }\n                            } else if (loopRangeField == null) {\n                                // rangeField is not null, loopRangeField is null (infinite). rangeField < loopRangeField. continue loop.\n                            } else {\n                                // Both range fields are not null, compare them.\n                                int compareRange = rangeField.compareTo(loopRangeField);\n                                if (compareRange > 0) {\n                                    break; // Found the insertion point\n                                } else if (compareRange == 0) {\n                                    // Durations and RangeDurations are equal -> Overlapping fields based on sorting criteria\n                                    throw new IllegalArgumentException(\"Field '\" + fieldType.getName() + \"' is already supported\");\n                                }\n                                // else compareRange < 0, insertion point is further down. Continue loop.\n                            }\n                        }\n                        // else compare < 0, insertion point is further down. Continue loop.\n                    }\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // constructor invocation above should validate fields, throwing exception if necessary\n            // additional validation by chronology is applied below\n            iChronology.validate(newPartial, newValues); \n            return newPartial;\n        }\n        \n        // This part handles replacing an existing value\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues); // Uses constructor that does less validation\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}