{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // Check if field is supported first\n            if (!fieldType.isSupported(iChronology)) {\n                 throw new IllegalArgumentException(\"Field '\" + fieldType.getName() + \"' is not supported by the chronology\");\n            }\n\n            // Check for conflicts before adding\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            DurationFieldType rangeFieldType = fieldType.getRangeDurationType();\n            DurationField rangeField = (rangeFieldType == null) ? null : rangeFieldType.getField(iChronology);\n\n            for (DateTimeFieldType existingType : iTypes) {\n                DurationField existingUnitField = existingType.getDurationType().getField(iChronology);\n                // Compare duration fields to check for clash\n                if (unitField.compareTo(existingUnitField) == 0) { // Same unit duration\n                    DurationFieldType existingRangeFieldType = existingType.getRangeDurationType();\n                    DurationField existingRangeField = (existingRangeFieldType == null) ? null : existingRangeFieldType.getField(iChronology);\n\n                    boolean conflict = false;\n                    if (rangeField == null) {\n                        if (existingRangeField == null) {\n                            conflict = true; // Same unit, both null range -> conflict\n                        }\n                    } else {\n                        if (existingRangeField != null && rangeField.compareTo(existingRangeField) == 0) {\n                            conflict = true; // Same unit, same range -> conflict\n                        }\n                    }\n\n                    if (conflict) {\n                        // Found a conflict based on duration fields\n                        throw new IllegalArgumentException(\"Field '\" + fieldType.getName() + \"' conflicts with existing field '\" + existingType.getName() + \"'\");\n                    }\n                }\n            }\n\n            // ----- Original insertion logic -----\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n\n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            // unitField is already calculated above\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break; // New field is smaller duration\n                        } else if (compare == 0) { // Same duration, compare range duration\n                            // Note: original code below could throw NPE if getRangeDurationType() is null\n                            DurationField rangeFieldCompare = null;\n                            if (fieldType.getRangeDurationType() != null) {\n                                rangeFieldCompare = fieldType.getRangeDurationType().getField(iChronology);\n                            }\n                            DurationField loopRangeFieldCompare = null;\n                            if (loopType.getRangeDurationType() != null) {\n                                loopRangeFieldCompare = loopType.getRangeDurationType().getField(iChronology);\n                            }\n\n                            if (rangeFieldCompare == null) {\n                                if (loopRangeFieldCompare != null) {\n                                    break; // New field has null range, loop field does not. New is \"larger\". Break.\n                                }\n                                // Both null range. Continue loop.\n                            } else {\n                                if (loopRangeFieldCompare == null) {\n                                     // New field has range, loop field does not. New is \"smaller\". Continue.\n                                     continue;\n                                } else {\n                                     // Both have range fields. Compare them.\n                                     if (rangeFieldCompare.compareTo(loopRangeFieldCompare) > 0) {\n                                         break; // New field has larger range duration. Break.\n                                     }\n                                     // If range duration is same or smaller, continue loop.\n                                }\n                            }\n                        }\n                        // If compare < 0 (new field has larger duration), continue loop\n                    }\n                }\n            } else {\n                // Field's duration is not supported. Insert at the end.\n                i = iTypes.length;\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            // The constructor performs necessary validation including ordering checks\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // Redundant validation call removed as constructor handles it\n            // iChronology.validate(newPartial, newValues);\n            return newPartial;\n\n        } else { // Field type exists, update value\n            if (value == getValue(index)) {\n                return this;\n            }\n            int[] newValues = getValues();\n            // The set method performs validation for the updated value\n            newValues = getField(index).set(this, index, newValues, value);\n            // This constructor reuses types and chrono, performs less validation\n            return new Partial(this, newValues);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}