{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) { // new field is smaller unit\n                            break; // insert before i\n                        } else if (compare == 0) { // same unit\n                            // Compare range duration fields\n                            DurationField rangeField = null;\n                            if (fieldType.getRangeDurationType() != null) {\n                                rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            }\n                            DurationField loopRangeField = null;\n                            if (loopType.getRangeDurationType() != null) {\n                                loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            }\n                            \n                            int rangeCompare;\n                            if (rangeField == null) {\n                                rangeCompare = (loopRangeField == null) ? 0 : -1; // null is smaller (larger range)\n                            } else {\n                                rangeCompare = (loopRangeField == null) ? 1 : rangeField.compareTo(loopRangeField);\n                            }\n\n                            if (rangeCompare > 0) { // new field has smaller range unit\n                                break; // insert before i\n                            } else if (rangeCompare == 0) { // same duration, same range duration\n                                // As index == -1, the types are different. This is a conflict.\n                                throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + loopType + \" and \" + fieldType);\n                            }\n                            // else rangeCompare < 0, new field has larger range unit, continue search\n                        }\n                        // else compare < 0, new field is larger unit, continue search\n                    }\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // validation is done in constructor\n            // iChronology.validate(newPartial, newValues); // Removed as validation happens in constructor\n            return newPartial;\n        }\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}