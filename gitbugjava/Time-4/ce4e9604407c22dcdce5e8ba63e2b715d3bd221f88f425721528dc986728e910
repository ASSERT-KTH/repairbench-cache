{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // Field doesn't exist - add it\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length]; // size = iTypes.length + 1\n\n            // Add the new field type and value - let constructor handle sorting and validation\n            // The constructor performs necessary checks for chronology, nulls, duplicates,\n            // sorting and values. It also calls chronology.validate.\n            System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);\n            System.arraycopy(iValues, 0, newValues, 0, iValues.length);\n            newTypes[iTypes.length] = fieldType;\n            newValues[iTypes.length] = value;\n\n            // Use the constructor that validates and sorts the arrays.\n            // This ensures that duplicate field types which were not previously\n            // caught (like hourOfDay and clockhourOfDay) are now detected correctly.\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // No need to call iChronology.validate again here, constructor does it.\n            return newPartial;\n\n        }\n        // Field exists - update value\n        if (value == getValue(index)) {\n            return this; // No change needed\n        }\n        int[] newValues = getValues(); // Get a copy of the internal values array\n        // Use the field's set method to validate the value and update the array\n        // Note: field.set may throw an exception if the value is invalid.\n        newValues = getField(index).set(this, index, newValues, value);\n        // Create a new Partial instance using the private constructor\n        // which assumes the types array is already correct and validated.\n        return new Partial(this, newValues);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}