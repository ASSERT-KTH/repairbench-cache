{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            boolean validated = false; // Track validation\n\n            // if the option is present, validate it and count it\n            if (commandLine.hasOption(option)) {\n                if (++present > maximum) {\n                    unexpected = option;\n                    break; // Too many options\n                }\n\n                // Validate the present option (handles value processing)\n                option.validate(commandLine);\n                validated = true; // Mark as validated\n            }\n\n            // Needs structural validation (required or group)?\n            // Only perform this validation if it wasn't already validated\n            // by being present. This prevents validating twice (once for structure,\n            // once for value) which can cause issues if validation modifies state\n            // (e.g., converting a String argument to a File object).\n            boolean needsStructuralValidation = option.isRequired() || option instanceof Group;\n            if (needsStructuralValidation && !validated) {\n                // This validation might check for missing required options\n                // or validate group constraints even if the option isn't present.\n                option.validate(commandLine);\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few options (based on count of PRESENT options)\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}