{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        // Keep track of options validated in the first block\n        // to avoid redundant validation later.\n        final java.util.Set validated = new java.util.HashSet();\n\n        for (final java.util.Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // needs validation? (required options or groups must be validated)\n            boolean validate = option.isRequired() || option instanceof Group;\n            if (validate) {\n                // Perform validation (checks requirements, handles groups recursively,\n                // and potentially validates values if option is present).\n                option.validate(commandLine);\n                validated.add(option); // Mark as validated\n            }\n\n            // if the child option is present then count it\n            if (commandLine.hasOption(option)) {\n                // Increment count and check against maximum allowed\n                if (++present > maximum) {\n                    unexpected = option;\n                    break; // Too many options found\n                }\n\n                // If the option was present but wasn't validated in the block above\n                // (e.g., an optional option that is present), validate it now.\n                if (!validated.contains(option)) {\n                    option.validate(commandLine);\n                }\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few options\n        // Note: This count ('present') might not be perfectly accurate for complex nested groups,\n        // but it matches the original logic's scope.\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final java.util.Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}