{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of\n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option}\n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop\n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        // Use generics for the list\n        List<String> tokens = new ArrayList<>();\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            // if stopAtNonOption enabled, and we already hit a non-option,\n            // or encountered \"--\", just add remaining args\n            if (eatTheRest)\n            {\n                tokens.add(arg);\n                continue; // continue to next arg\n            }\n\n            if (\"--\".equals(arg))\n            {\n                tokens.add(\"--\");\n                eatTheRest = true; // Subsequent arguments are not options\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"--\")) // Handle long options (--opt, --opt=value)\n            {\n                int eq = arg.indexOf('=');\n                // Get the option name (the part before '=')\n                String optToken = (eq == -1) ? arg : arg.substring(0, eq); // e.g., \"--foo\"\n\n                if (options.hasOption(optToken)) // Check if the potential option is known\n                {\n                    tokens.add(optToken); // Add the option token, e.g. \"--foo\"\n                    if (eq != -1) // If there was an '=', add the value\n                    {\n                        tokens.add(arg.substring(eq + 1)); // e.g., \"bar\"\n                    }\n                }\n                else // The token is not a recognized long option\n                {\n                    // If stopAtNonOption is enabled, we should stop processing options\n                    if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                    }\n                    // Add the uninterpreted argument as-is. The parser can decide if it's an error.\n                    tokens.add(arg);\n                }\n            }\n            else if (arg.startsWith(\"-\")) // Handle short options (-o, -o=val, -oval, -oabc, -abc)\n            {\n                int eq = arg.indexOf('=');\n\n                // Case 1: Argument contains '=', e.g., -f=bar, -Lkey=value, -foo=bar\n                if (eq != -1)\n                {\n                    String optToken = arg.substring(0, eq); // e.g., -f, -L, -foo\n                    String valueToken = arg.substring(eq + 1); // e.g., bar, key=value, bar\n\n                    if (options.hasOption(optToken)) // Check if the part before '=' is a known short option\n                    {\n                        // Standard short option with =, e.g. -f=bar\n                        tokens.add(optToken);\n                        tokens.add(valueToken);\n                    }\n                    // Gnu specific check: -foo=bar where -foo is not known, but -f is.\n                    else if (optToken.length() >= 2 && options.hasOption(optToken.substring(0, 2)))\n                    {\n                        // Treat as -f followed by oo=bar\n                        tokens.add(optToken.substring(0, 2)); // Add \"-f\"\n                        tokens.add(optToken.substring(2) + \"=\" + valueToken); // Add \"oo=bar\"\n                    }\n                    else // Unrecognized option before '=', e.g., -X=bar\n                    {\n                        if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                        }\n                        tokens.add(arg); // Add the full argument\n                    }\n                }\n                // Case 2: Argument does not contain '=', e.g., -f, -fbar, -abc, -foo\n                else\n                {\n                    // Check if the whole arg is a single known option, or Gnu style combines short options/options+values\n                    // Gnu specific check: -fbar -> -f, bar or -foo -> -f, oo\n                    if (arg.length() >= 2 && options.hasOption(arg.substring(0, 2)))\n                    {\n                        // Check if the first character forms a known option\n                        tokens.add(arg.substring(0, 2)); // Add \"-f\"\n                        tokens.add(arg.substring(2));    // Add \"bar\" or \"oo\"\n                    }\n                    // Is the whole argument a single known option? e.g., \"-f\", \"-v\"\n                    else if (options.hasOption(arg))\n                    {\n                        tokens.add(arg);\n                    }\n                    else // Not a known single option, and first char not a known option (or len < 2)\n                    {\n                        // e.g., \"-unrecognized\", \"-?\", \"-abc\" (where -a not known and clustering handled later)\n                        if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                        }\n                        tokens.add(arg); // Add the full argument\n                    }\n                }\n            }\n            else // Argument does not start with '-' or '--'\n            {\n                // Treat as a non-option argument\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true; // Stop processing options from here\n                }\n                tokens.add(arg);\n            }\n        }\n\n        return tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}