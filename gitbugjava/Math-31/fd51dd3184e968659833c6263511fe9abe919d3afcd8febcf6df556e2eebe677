{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * This implies the form b<sub>0</sub> + a<sub>1</sub> / (b<sub>1</sub> + a<sub>2</sub> / ...).\n     * </p>\n     *\n     * <p>\n     * This implementation uses Steed's method for evaluating the convergents, which applies the\n     * recurrence relations directly. It includes rescaling logic to handle potential overflow/underflow\n     * issues with the numerator (C_n) and denominator (D_n).\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum relative error allowed for convergence. The algorithm stops when\n     *        |f_n / f_{n-1} - 1| &lt; epsilon.\n     * @param maxIterations maximum number of iterations.\n     * @return the value of the continued fraction evaluated at x.\n     * @throws org.apache.commons.math3.exception.ConvergenceException if the algorithm fails to converge due to numerical issues (e.g., NaN, infinity).\n     * @throws org.apache.commons.math3.exception.MaxCountExceededException if the maximum number of iterations is reached before convergence.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50; // A small number to avoid division by zero and handle b0=0\n\n        // Initialization based on the standard form b_0 + a_1 / (b_1 + a_2 / ...)\n        // Recurrence relations: C_n = b_n*C_{n-1} + a_n*C_{n-2}, D_n = b_n*D_{n-1} + a_n*D_{n-2}\n        // Initial conditions: C_{-1}=1, C_0=b_0; D_{-1}=0, D_0=1.\n        // f_n = C_n / D_n is the n-th convergent.\n\n        double b0 = getB(0, x);\n        // Handle b0 = 0 case: Lentz algorithm suggests starting with a small value instead.\n        if (Precision.equals(b0, 0.0, small)) {\n            b0 = small;\n        }\n\n        // State variables for the iteration:\n        int n = 1;\n        // hN: Stores the current convergent value f_n. Initialized to f_0 = b_0.\n        double hN = b0;\n        // cPrev: Stores the previous convergent value f_{n-1}. Needed for deltaN = f_n / f_{n-1}. Initialized to f_0.\n        double cPrev = b0;\n\n        // Variables storing values needed for the recurrence calculation at step n:\n        // hPrev: Stores C_{n-1}. Initialized to C_0 = b_0.\n        // p0: Stores C_{n-2}. Initialized to C_{-1} = 1.\n        // q1: Stores D_{n-1}. Initialized to D_0 = 1.\n        // dPrev: Stores D_{n-2}. Initialized to D_{-1} = 0.\n        double hPrev = b0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double dPrev = 0.0;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x); // Coefficient a_n\n            final double b = getB(n, x); // Coefficient b_n\n\n            // Calculate C_n and D_n using the recurrence relations.\n            // C_n = b_n * C_{n-1} + a_n * C_{n-2}\n            // D_n = b_n * D_{n-1} + a_n * D_{n-2}\n            double cN = b * hPrev + a * p0; // Numerator C_n\n            double q2 = b * q1 + a * dPrev; // Denominator D_n\n\n            // Rescaling logic to prevent overflow/underflow if C_n or D_n become too large.\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                double scaleFactor = 1d;\n                double lastScaleFactor = 1d;\n                final int maxPower = 5; // Limit scaling attempts to avoid infinite loops\n                // Use the maximum absolute value of a or b as the scaling base.\n                final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n\n                // If scale is zero (e.g., a=0, b=0), we cannot scale. Throw exception.\n                if (scale <= 0) {\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n\n                // Determine which term (a or b) dominates to apply the correct scaling formula.\n                boolean scaleByB = (FastMath.abs(b) >= FastMath.abs(a));\n\n                for (int i = 0; i < maxPower; i++) {\n                    lastScaleFactor = scaleFactor;\n                    scaleFactor *= scale;\n\n                    // Apply the corresponding scaling formula derived from the recurrence relation.\n                    // This calculates approximations of C_n / scale^k and D_n / scale^k\n                    // by scaling the previous terms C_{n-1}, C_{n-2}, D_{n-1}, D_{n-2}\n                    // appropriately within the recurrence.\n                    if (scaleByB) { // Scaling is dominated by b\n                        cN = hPrev / lastScaleFactor + (a / scaleFactor * p0);\n                        q2 = q1 / lastScaleFactor + (a / scaleFactor * dPrev);\n                    } else { // Scaling is dominated by a\n                        cN = (b / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                        q2 = (b / scaleFactor * q1) + dPrev / lastScaleFactor;\n                    }\n\n                    // If scaling results in finite numbers, exit the scaling loop.\n                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                        break;\n                    }\n                }\n\n                // If scaling still results in infinity, then the fraction diverges in an unmanageable way.\n                if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                 }\n            }\n\n            // Ensure the denominator D_n (q2) is not zero; replace with 'small' if it is.\n            if (Precision.equals(q2, 0.0, small)) {\n                 q2 = small;\n            }\n\n            // Calculate the ratio of the current convergent to the previous one.\n            // deltaN = f_n / f_{n-1} = (C_n / D_n) / cPrev\n            final double deltaN = cN / q2 / cPrev;\n            // Calculate the new convergent value f_n.\n            // hN = f_n = cPrev * deltaN = f_{n-1} * (f_n / f_{n-1})\n            hN = cPrev * deltaN;\n\n            // Check for non-finite results after calculating the new convergent value.\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            // Check for convergence: If the relative change (deltaN) is close to 1,\n            // the value has stabilized.\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break; // Convergence achieved.\n            }\n\n            // Update the state variables for the next iteration (n+1).\n            // The current C_n, D_n, f_n become the previous values for the next step.\n            // Note: cN and q2 might be scaled values if rescaling occurred. This is intended;\n            // the recurrence works correctly with consistently scaled numerators/denominators.\n            dPrev = q1;     // D_{n-1} <- D_n from previous step (becomes D_{n-2} for next)\n            p0 = hPrev;     // C_{n-1} <- C_n from previous step (becomes C_{n-2} for next)\n            q1 = q2;        // D_n     <- D_n from current step (becomes D_{n-1} for next)\n            hPrev = cN;     // C_n     <- C_n from current step (becomes C_{n-1} for next)\n            cPrev = hN;     // f_{n-1} <- f_n from current step\n\n            n++; // Move to the next iteration.\n        }\n\n        // If the loop finishes without converging within maxIterations.\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        // Return the final calculated value.\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}