{
    "generation": "import org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.Precision;\n\n// Assumes the context of the ContinuedFraction abstract class\n// with abstract methods getA(int n, double x) and getB(int n, double x) defined.\n\n    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 5-13 in:\n     * <ul>\n     * <li>\n     *   William H. Press, Saul A. Teukolsky, William T. Vetterling, Brian P. Flannery.\n     *   <em>Numerical Recipes in C: The Art of Scientific Computing</em> (2nd ed.).\n     *   Cambridge University Press, New York. ISBN 0-521-43108-5.\n     * </li>\n     * </ul>\n     * This implementation is numerically more stable than the direct evaluation of the recurrences\n     * \\( C_n = a_n C_{n-1} + b_n C_{n-2} \\) and \\( D_n = a_n D_{n-1} + b_n D_{n-2} \\).\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum relative error allowed.\n     * @param maxIterations maximum number of iterations.\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge due to NaN or Infinite values.\n     * @throws MaxCountExceededException if the maximum number of iterations is reached before convergence.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        // Use the definitions from Numerical Recipes Chap. 5.2 / Lentz algorithm\n        // adapted for the MathWorld notation:\n        // f = a0 + b1 / (a1 + b2 / (a2 + ... ))\n        // NR notation: f = b0 + a1 / (b1 + a2 / (b2 + ... ))\n        // Mapping: NR b0 = MW a0, NR aj = MW bj, NR bj = MW aj for j>=1\n\n        double h = getA(0, x); // h is the estimate of the continued fraction (NR f)\n                               // Initialized to MW a0 (NR b0)\n\n        // Handle potential division by zero in first step C=h=0\n        if (Precision.equals(h, 0.0, small)) {\n            h = small;\n        }\n\n        double c = h;     // NR C variable (stores C_{n-1} at the start of iteration n)\n        double d = 0.0;   // NR D variable (stores D_{n-1} at the start of iteration n)\n        double delta;   // Stores delta_n = C_n * D_n factor (where D_n is the inverse form 1/(b_n + a_n D_{n-1}))\n\n        int n = 1; // Iteration counter starts from 1\n\n        while (n <= maxIterations) {\n            double a = getB(n, x); // NR a_n = MW b_n\n            double b = getA(n, x); // NR b_n = MW a_n\n\n            // Calculate D_n = b_n + a_n * D_{n-1} (NR recurrence)\n            // Here d corresponds to D_{n-1} before the update\n            d = b + a * d;\n            // Handle potential zero D_n = 0 by replacing with small value\n            if (Precision.equals(d, 0.0, small)) {\n                d = small;\n            }\n\n            // Calculate C_n = b_n + a_n / C_{n-1} (NR recurrence)\n            // Here c corresponds to C_{n-1} before the update\n            c = b + a / c;\n             // Handle potential zero C_n = 0 by replacing with small value\n            if (Precision.equals(c, 0.0, small)) {\n                c = small;\n            }\n\n            // Calculate D_n = 1 / D_n (NR step, store inverse)\n            // After this, d holds 1/D_n\n            d = 1.0 / d;\n\n            // Calculate delta_n = C_n * (1/D_n) (NR step)\n            // C_n is stored in c, 1/D_n is stored in d\n            delta = c * d;\n\n            // Update h_n = h_{n-1} * delta_n (NR step)\n            // h corresponds to h_{n-1} before the update\n            h = h * delta;\n\n            // Check for convergence: |delta_n - 1| < epsilon\n            if (FastMath.abs(delta - 1.0) < epsilon) {\n                break; // Converged\n            }\n\n            // Check for divergence signaled by Infinite or NaN h_n\n            // These checks are performed after the update of h.\n            if (Double.isInfinite(h)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n             if (Double.isNaN(h)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            n++;\n        }\n\n        // Check for non-convergence after the loop exits\n        if (n > maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return h;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}