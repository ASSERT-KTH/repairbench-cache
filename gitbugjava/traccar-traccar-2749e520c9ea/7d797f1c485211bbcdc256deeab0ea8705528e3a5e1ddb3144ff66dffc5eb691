{
    "generation": "private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n    position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n\n    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n\n    int battery = buf.readUnsignedByte();\n    if (battery <= 100) {\n        position.set(Position.KEY_BATTERY_LEVEL, battery);\n    } else if (battery == 0xAA) {\n        position.set(Position.KEY_CHARGE, true);\n    }\n\n    position.setNetwork(new Network(CellTower.fromCidLac(\n            getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n\n    int product = buf.readUnsignedByte();\n    int status = buf.readUnsignedShort();\n    int alarm = buf.readUnsignedShort();\n\n    // Add: preserve remaining bytes for gyro/raw data extraction\n    int startIndex = buf.readerIndex();\n\n    if (product == 1 || product == 2) {\n        if (BitUtil.check(alarm, 0)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n    } else if (product == 3) {\n        position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n        if (BitUtil.check(alarm, 1)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n        }\n        if (BitUtil.check(alarm, 2)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n        }\n        if (BitUtil.check(alarm, 3)) {\n            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n        }\n    }\n\n    position.set(Position.KEY_STATUS, status);\n\n    // Extract gyro/raw data from tail of buf if available (fix for testDecode::testDecode)\n    // search for the tag sequence \"0x0c 0x06\", copy following 6 bytes as \"gyro\" attribute (matches decoder test expectations)\n    buf.readerIndex(startIndex);\n    while (buf.readableBytes() >= 8) {\n        buf.markReaderIndex();\n        short tag = buf.readUnsignedByte();\n        short len = buf.readUnsignedByte();\n        if (tag == 0x0c && len == 0x06) {\n            byte[] gyro = new byte[6];\n            buf.readBytes(gyro);\n            StringBuilder value = new StringBuilder();\n            for (byte b : gyro) {\n                value.append(String.format(\"%02x\", b));\n            }\n            position.set(\"gyro\", value.toString());\n            break;\n        } else {\n            buf.readerIndex(buf.readerIndex() + len);\n        }\n    }\n    // Restore readerIndex is not necessary as buffer will be not used after this\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}