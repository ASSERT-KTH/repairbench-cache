{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // Get original value first, needed for fallback comparison.\n        String originalValue = attr.getValue();\n        // Attempt to resolve the attribute's value (e.g., URL) to an absolute path.\n        // This is done BEFORE the check, as required for relative URLs like \"/path\" which need resolving\n        // before we can check the protocol (e.g. \"http\").\n        String resolvedValue = el.absUrl(attr.getKey());\n\n        // Determine which value to use for the protocol check.\n        // If absUrl resulted in an empty string, but the original value wasn't empty,\n        // it might be a custom protocol like 'cid' or 'data' that absUrl doesn't understand or resolve.\n        // In that case, check against the original value. Otherwise, check the resolved value.\n        String valueToCheck;\n        if (resolvedValue.isEmpty() && !originalValue.isEmpty()) {\n            // Resolution failed or resulted in empty, fallback to original value for check.\n            valueToCheck = originalValue;\n        } else {\n            // Use the resolved value (which might be the same as original if it was already absolute\n            // or if absUrl couldn't resolve but didn't return empty).\n            valueToCheck = resolvedValue;\n        }\n\n        // Check if the value starts with any of the allowed protocols.\n        boolean isValid = false;\n        for (Protocol protocol : protocols) {\n            // Construct the protocol prefix (e.g., \"http:\")\n            String prot = protocol.toString() + \":\";\n            // Perform case-insensitive comparison. Ensure protocol prefix is also lower-case.\n            if (valueToCheck.toLowerCase().startsWith(prot.toLowerCase())) {\n                isValid = true;\n                break; // Found a valid protocol, no need to check others.\n            }\n        }\n\n        // If the protocol is valid based on the check:\n        if (isValid) {\n            // Optionally update the attribute to the resolved value.\n            // This should happen only if we are not preserving relative links AND\n            // the resolution attempt (absUrl) actually produced a non-empty value.\n            // This prevents wiping out valid original values (like 'cid:') just because absUrl returned empty.\n            // If resolution produced a non-empty value (e.g. absolute URL from relative), we update.\n            if (!preserveRelativeLinks && !resolvedValue.isEmpty()) {\n                // Update the attribute in the element to the resolved value.\n                attr.setValue(resolvedValue);\n            }\n            // If preserveRelativeLinks is true, or if resolvedValue is empty (and original check passed),\n            // we don't call setValue, preserving the original attribute value.\n            return true; // Attribute is valid.\n        }\n\n        // If no valid protocol was found (either in resolved or original value).\n        return false; // Attribute is not valid.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}