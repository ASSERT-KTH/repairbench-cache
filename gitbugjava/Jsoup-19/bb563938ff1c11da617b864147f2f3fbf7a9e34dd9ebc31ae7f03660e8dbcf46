{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // Check original value first, as absUrl may strip protocols like mailto:, cid:, etc.\n        String origValue = attr.getValue();\n        String absValue = \"\"; // Initialize absValue\n\n        // Check if the original value starts with an allowed protocol.\n        boolean R = false; // Use a boolean flag instead of early returns to ensure absUrl resolution happens if needed.\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (origValue.toLowerCase().startsWith(prot)) {\n                R = true; // Original value has a valid protocol\n                break;\n            }\n        }\n\n        // If the original value doesn't have a valid protocol, try resolving the URL\n        // and check if the absolute URL starts with a valid protocol.\n        // This handles relative URLs resolving to e.g. http.\n        if (!R) {\n            // Resolve URL only if needed and not preserving relative links,\n            // or if we need to check the resolved protocol\n             absValue = el.absUrl(attr.getKey());\n             // Check the resolved value\n             if (!absValue.isEmpty()) {\n                 for (Protocol protocol : protocols) {\n                     String prot = protocol.toString() + \":\";\n                     if (absValue.toLowerCase().startsWith(prot)) {\n                         R = true; // Absolute value has a valid protocol\n                         break;\n                     }\n                 }\n             }\n        }\n\n        // If a valid protocol was found (either in original or absolute)\n        if (R) {\n            // If we are not preserving relative links, update the attribute.\n            // Update with absValue ONLY if it was successfully resolved and validated.\n            // Otherwise, the original value (which passed the check) should be kept.\n            if (!preserveRelativeLinks) {\n                // Resolve absValue if it hasn't been resolved yet\n                 if (absValue.isEmpty()) // can be empty if R was true based on origValue\n                    absValue = el.absUrl(attr.getKey());\n\n                 // Check if absValue resolution resulted in a URL starting with an allowed protocol\n                 boolean absValid = false;\n                 if (!absValue.isEmpty()) {\n                     for (Protocol protocol : protocols) {\n                         String prot = protocol.toString() + \":\";\n                         if (absValue.toLowerCase().startsWith(prot)) {\n                             absValid = true;\n                             break;\n                         }\n                     }\n                 }\n\n                 // Update only if absValue is valid; otherwise keep original\n                 if (absValid) {\n                    attr.setValue(absValue);\n                 }\n                 // If absValid is false, it means origValue was valid but absValue wasn't.\n                 // In this case, we keep the original value by not calling setValue().\n            }\n            return true; // Valid protocol found\n        }\n\n        // No valid protocol found in either original or absolute form.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}