{
    "generation": "import org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.safety.Whitelist.Protocol; // Assuming this import path is correct\n\nimport java.util.Set;\n// Ensure 'preserveRelativeLinks' field is accessible in the class containing this method.\n\n    /**\n     * Tests if the value of the attribute is allowed by the list of protocols\n     * @param el the element holding the attribute\n     * @param attr the attribute to test\n     * @param protocols the list of allowed protocols\n     * @return true if the protocol is allowed or is relative; false otherwise\n     */\n    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // Get original value, and attempt to resolve it to an absolute URL.\n        String originalValue = el.attr(attr.getKey());\n        String resolvedValue = el.absUrl(attr.getKey());\n\n        // Determine which value to check the protocol against.\n        // Prioritize the resolved value if resolution was successful (non-empty).\n        // Otherwise, fall back to the original value (e.g., for custom protocols like 'cid', 'data', or relative links without a base URI).\n        String valueToCheck;\n        boolean resolutionSucceeded = !resolvedValue.isEmpty();\n\n        if (resolutionSucceeded) {\n            valueToCheck = resolvedValue;\n        } else {\n            // Resolution failed or returned empty string. Check the original value.\n            // This allows custom protocols or relative links that absUrl might not understand\n            // to be validated if they are explicitly allowed.\n            valueToCheck = originalValue;\n        }\n\n        // Check if the value starts with an allowed protocol.\n        boolean protocolIsValid = false;\n        for (Protocol protocol : protocols) {\n            // Protocol is stored as string name e.g. \"http\", \"cid\"\n            String prefix = protocol.toString() + \":\";\n            if (valueToCheck.toLowerCase().startsWith(prefix)) {\n                protocolIsValid = true;\n                break;\n            }\n        }\n\n        // If the protocol is valid, proceed. Otherwise, the attribute is invalid.\n        if (protocolIsValid) {\n            // If the protocol check passed, the attribute is potentially valid.\n            // Now, decide whether to update the attribute's value to the resolved URL.\n            // Update only if we are NOT preserving relative links AND URL resolution succeeded.\n            if (!preserveRelativeLinks && resolutionSucceeded) {\n                // Update the attribute to the resolved absolute URL.\n                attr.setValue(resolvedValue);\n            }\n            // If preserveRelativeLinks is true, or if URL resolution failed (resolutionSucceeded is false),\n            // we keep the original value currently held by the attribute.\n            // In either case, since protocolIsValid is true, the attribute passes the test.\n            return true;\n        } else {\n            // The protocol check failed (on either the resolved or original value).\n            return false;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}