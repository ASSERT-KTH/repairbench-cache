{
    "generation": "        @Override\n        public boolean matches(Element root, Element element) {\n            // evaluate from last to first. 'element' starts as the candidate for the innermost part of the selector.\n            for (int i = evaluators.size() -1; i >= 0; --i) { // i iterates from innermost (N-1) to outermost (0) selector part\n                if (element == null) // current element in chain is null (e.g., parent of document root)\n                    return false;\n\n                Evaluator eval = evaluators.get(i); // Evaluator for the current part of the chain\n                if (!eval.matches(root, element)) // Check if the current element in the chain matches this selector part\n                    return false;\n\n                // If the element in the chain that just matched is the selection root ('root'),\n                // and we are not yet at the outermost selector part of the chain (i.e., i > 0),\n                // then a full match would require matching an ancestor of 'root'.\n                // This is restricted to ensure the match stays within the 'root' context as per the test's expectation.\n                if (element == root && i > 0) {\n                    return false;\n                }\n                element = element.parent(); // Move to the parent for the next (outer) selector part in the chain\n            }\n            return true; // All parts of the selector chain matched successfully under the given conditions\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}