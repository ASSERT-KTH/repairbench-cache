{
    "generation": "        @Override\n        public boolean matches(Element root, Element element) {\n            Element currentChainElement = element;\n            // evaluate from last to first\n            for (int i = evaluators.size() -1; i >= 0; --i) {\n                if (currentChainElement == null)\n                    return false;\n\n                // If currentChainElement is not the initial element that was passed to matches(),\n                // it must be root or a descendant of root.\n                // (The initial element is guaranteed by Collector to be root or a descendant of root).\n                if (i < evaluators.size() - 1) {\n                    // Check if currentChainElement is within root's scope (is root or descendant of root).\n                    // This is equivalent to: currentChainElement == root OR root is an ancestor of currentChainElement.\n                    if (!(currentChainElement == root || currentChainElement.parents().contains(root))) {\n                        // If not, currentChainElement is out of scope (e.g. an ancestor of root, or in a different tree branch).\n                        return false;\n                    }\n                }\n\n                Evaluator eval = evaluators.get(i);\n                if (!eval.matches(root, currentChainElement))\n                    return false;\n\n                // If the first (leftmost) part of the chain selector is matched, we're done.\n                if (i == 0)\n                    break; \n                \n                currentChainElement = currentChainElement.parent();\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}