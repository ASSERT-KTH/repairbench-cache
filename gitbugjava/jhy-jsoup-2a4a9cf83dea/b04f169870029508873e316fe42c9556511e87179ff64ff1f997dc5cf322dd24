{
    "generation": "        @Override\n        public boolean matches(Element root, Element element) {\n            Element currentChainElement = element; // currentChainElement is used to traverse up the parent chain\n            // evaluate from last to first (rightmost selector part to leftmost)\n            for (int i = evaluators.size() - 1; i >= 0; --i) {\n                if (currentChainElement == null) {\n                    return false; // Reached top of document without matching all parts\n                }\n\n                // If the current element being considered in the chain (currentChainElement)\n                // is an ancestor of the selection root (`root`), then this path is invalid.\n                // The initial element (when currentChainElement == element) is `root` or one of its descendants.\n                // This check prevents matching if we've climbed \"above\" `root`.\n                // Note: currentChainElement == root is permissible.\n                // The check `root.parents().contains(currentChainElement)` identifies if currentChainElement is an ancestor of root.\n                if (currentChainElement != root && root.parents().contains(currentChainElement)) {\n                    return false;\n                }\n                \n                Evaluator eval = evaluators.get(i);\n                if (!eval.matches(root, currentChainElement)) {\n                    return false;\n                }\n                \n                // Move to the parent for the next (leftward) part of the selector chain\n                currentChainElement = currentChainElement.parent();\n            }\n            return true; // All parts of the chain matched\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}