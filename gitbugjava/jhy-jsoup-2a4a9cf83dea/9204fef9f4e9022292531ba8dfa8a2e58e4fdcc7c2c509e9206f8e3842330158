{
    "generation": "        @Override\n        public boolean matches(Element root, Element element) {\n            // 'element' is the initial candidate. It will be reassigned in the loop to its parent, grandparent, etc.\n            for (int i = evaluators.size() - 1; i >= 0; --i) {\n                if (element == null) { // Walked off the top of the document tree\n                    return false;\n                }\n\n                // Check if the current 'element' (which is an ancestor, or the original candidate element)\n                // is within the scope of the selection 'root'.\n                // It must be either the 'root' itself, or a descendant of 'root'.\n                // It cannot be an ancestor of 'root'.\n                if (element != root) {\n                    if (root instanceof org.jsoup.nodes.Document) {\n                        // If 'root' is the Document, then any 'element' (that's not null) is effectively in scope\n                        // as long as it's an Element or Document node.\n                        // (The parent() chain from an Element should only yield Element or Document types).\n                        if (!(element instanceof org.jsoup.nodes.Element || element instanceof org.jsoup.nodes.Document)) {\n                             return false; // Should not happen with standard parent() traversal\n                        }\n                        // If 'element' is an Element, it's a descendant of the Document 'root', so it's in scope.\n                        // If 'element' is Document, it must be 'root' itself (this case is element == root, handled before this block).\n                    } else { // 'root' is an Element\n                        // If 'element' is a Document, it means 'element' is an ancestor of the Element 'root'. This is out of scope.\n                        if (element instanceof org.jsoup.nodes.Document) {\n                            return false;\n                        }\n                        // At this point, 'element' must be an Element (as it's not Document, not null, and not root).\n                        // Check if this Element 'element' is a descendant of the Element 'root'.\n                        // If it's not a descendant, it's out of scope (e.g., an ancestor or a sibling of an ancestor).\n                        if (!((org.jsoup.nodes.Element)element).isDescendantOf(root)) {\n                             return false;\n                        }\n                    }\n                }\n                // If we reach here, 'element' is confirmed to be in scope (it's 'root' or a descendant of 'root').\n\n                Evaluator eval = evaluators.get(i);\n                // Pass the original 'root' for evaluation context, and the current 'element' for matching.\n                if (!eval.matches(root, element)) {\n                    return false;\n                }\n\n                // Move to the parent for the next iteration of the loop.\n                element = element.parent();\n            }\n            // All evaluators in the chain matched their respective elements, and all were within scope.\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}