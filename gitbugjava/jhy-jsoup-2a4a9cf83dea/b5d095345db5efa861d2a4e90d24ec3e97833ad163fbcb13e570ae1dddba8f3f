{
    "generation": "        @Override\n        public boolean matches(Element root, Element element) {\n            // 'element' is the potentially matching element found by the rightmost evaluator part.\n            // 'root' is the context element where the search started.\n            // This evaluator checks if 'element' has ancestors matching the 'evaluators' chain,\n            // stopping the search upwards when 'root' is reached.\n\n            // currentSearchStart is the element from where the *next* upward search for an ancestor should begin.\n            // Initialize it to the parent of the element that matched the previous part of the selector.\n            Element currentSearchStart = element.parent();\n\n            // Iterate through the ancestor evaluators (e.g., for \"A B C\", evaluators = [A, B]) from right to left (B, then A)\n            for (int i = evaluators.size() - 1; i >= 0; i--) {\n                Evaluator requiredAncestorEval = evaluators.get(i); // The evaluator we need to match (e.g., B)\n                Element foundElement = null; // The element that matches the current evaluator\n\n                // Start searching upwards for a match for requiredAncestorEval, beginning from currentSearchStart\n                Element currentCheck = currentSearchStart;\n                while (currentCheck != null) {\n                    // Check if the current ancestor matches the required evaluator\n                    if (requiredAncestorEval.matches(root, currentCheck)) {\n                        foundElement = currentCheck; // Found the match\n                        break;\n                    }\n                    // Stop searching upwards if we have reached the root of the query context\n                    if (currentCheck == root) {\n                        break;\n                    }\n                    currentCheck = currentCheck.parent(); // Move up to the next parent\n                }\n\n                // If no match was found for this required ancestor evaluator below the root boundary\n                if (foundElement == null) {\n                    return false;\n                }\n\n                // Match found at foundElement. For the next evaluator (i-1),\n                // the search must start from the parent of foundElement.\n                currentSearchStart = foundElement.parent();\n\n                // Optimization: If the element found was root, and there are more evaluators left (i > 0),\n                // then we cannot find further ancestors within the root context, so it's not a match.\n                if (foundElement == root && i > 0) {\n                    return false;\n                }\n            }\n\n            // If all ancestor evaluators were successfully matched by ancestors of 'element' within the root scope.\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}