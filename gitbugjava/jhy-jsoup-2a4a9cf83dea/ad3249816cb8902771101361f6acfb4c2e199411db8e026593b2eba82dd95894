{
    "generation": "        @Override\n        public boolean matches(Element root, Element element) {\n            Element current = element;\n            // evaluate from last to first\n            for (int i = evaluators.size() -1; i >= 0; --i) {\n                if (current == null) { // Ran out of parents without matching all evaluators\n                    return false;\n                }\n\n                // If the current element being checked (current) is an ancestor of the root,\n                // and it's not the root itself, then the original 'element' cannot be a descendant of 'root'\n                // through this selector path relative to the root context. This means we've climbed above the desired scope.\n                if (current != root && current.isAncestorOf(root)) {\n                    return false;\n                }\n\n                Evaluator eval = evaluators.get(i);\n                if (!eval.matches(root, current))\n                    return false;\n\n                // If the current element matched is the root, AND there are more evaluators\n                // to the left (ancestors) to check (i.e., `i > 0`), it means we are trying to match\n                // something above the root. However, `root` is the boundary for the selection\n                // context, so we cannot go further up the tree.\n                if (current == root && i > 0) {\n                    return false;\n                }\n\n                current = current.parent();\n            }\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}