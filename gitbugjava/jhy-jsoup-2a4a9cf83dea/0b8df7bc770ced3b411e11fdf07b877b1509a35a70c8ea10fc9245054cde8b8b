{
    "generation": "        @Override\n        public boolean matches(Element root, Element element) {\n            // 'element' parameter is the candidate for the rightmost part of the selector chain.\n            // e.g., for \"div > p > span\", 'element' is a candidate 'span'.\n            // The 'evaluators' list is assumed to be ordered from left-to-right parts of the selector,\n            // e.g., [EvalDiv, EvalP, EvalSpan].\n            // The loop iterates from the rightmost selector part (index size-1) to the leftmost (index 0).\n            \n            // 'currentElementForMatch' is the DOM element that the current evaluator (evaluators.get(i))\n            // should be tested against. It starts as the input 'element' (candidate for EvalSpan),\n            // then becomes element.parent() (candidate for EvalP), and so on.\n            Element currentElementForMatch = element;\n\n            for (int i = evaluators.size() - 1; i >= 0; --i) {\n                if (currentElementForMatch == null) {\n                    // We've walked off the top of the DOM tree (or an element had no parent)\n                    return false;\n                }\n\n                Evaluator evaluatorComponent = evaluators.get(i);\n                if (!evaluatorComponent.matches(root, currentElementForMatch)) {\n                    return false;\n                }\n\n                // If the current component matched, and the element it matched is the selection root,\n                // but there are more ancestral components in the selector to check (i > 0),\n                // then this selector cannot be satisfied within the given root context.\n                if (currentElementForMatch == root && i > 0) {\n                    return false;\n                }\n                \n                // Move to the parent for the next iteration, which will check the next more ancestral\n                // component of the selector.\n                currentElementForMatch = currentElementForMatch.parent();\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}