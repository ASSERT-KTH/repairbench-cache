{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                final double tb = ta + h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence using the sign function at the start of the *step* and the end of the *sub-step*\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step interval\n\n                    // Define temporary variables for potentially adjusted interval endpoints and values\n                    // These are used for the solver to avoid issues with zero function values at boundaries\n                    double intervalTa = ta;\n                    double intervalGa = ga;\n                    double intervalTb = tb;\n                    double intervalGb = gb;\n                    boolean shifted = false;\n\n                    // Check for zeros at the boundaries of the current sub-interval [ta, tb].\n                    // If a zero is found, shift the corresponding boundary slightly\n                    // by half the convergence tolerance to ensure Brent's method,\n                    // which requires strictly different signs at endpoints, works.\n                    if (intervalGa == 0.0) {\n                        // Shift ta towards tb\n                        intervalTa += (forward ? convergence * 0.5 : -convergence * 0.5);\n                        // Re-evaluate the function at the shifted time\n                        interpolator.setInterpolatedTime(intervalTa);\n                        intervalGa = handler.g(intervalTa, interpolator.getInterpolatedState());\n                        shifted = true;\n                    }\n                    if (intervalGb == 0.0) {\n                        // Shift tb towards ta\n                        intervalTb -= (forward ? convergence * 0.5 : -convergence * 0.5);\n                        // Re-evaluate the function at the shifted time\n                        interpolator.setInterpolatedTime(intervalTb);\n                        intervalGb = handler.g(intervalTb, interpolator.getInterpolatedState());\n                        shifted = true;\n                    }\n\n                    // If shifting was performed, check if the new interval failed to bracket the root\n                    // (i.e., if the signs at the shifted endpoints are not different).\n                    if (shifted && (intervalGa * intervalGb >= 0)) {\n                         // This might happen if the root is exactly at a boundary and the function\n                         // is tangent, or if roots are closer than convergence/2, or due to numerical precision.\n                         // Cannot reliably use the solver. Skip root finding for this sub-interval\n                         // and proceed to the next one.\n                         ta = tb;\n                         ga = gb;\n                         continue; // Skip the rest of the loop iteration\n                    }\n\n                    // Check if the interval (potentially adjusted) brackets the root (has different signs).\n                    if (intervalGa * intervalGb < 0) {\n                        // The interval brackets a root, proceed with root finding using Brent's method.\n\n                        // Determine the variation direction (using potentially adjusted values)\n                        increasing = intervalGb >= intervalGa;\n\n                        // Define the function wrapper for the solver\n                        final UnivariateRealFunction f = new UnivariateRealFunction() {\n                            public double value(final double t) throws FunctionEvaluationException {\n                                try {\n                                    interpolator.setInterpolatedTime(t);\n                                    return handler.g(t, interpolator.getInterpolatedState());\n                                } catch (DerivativeException e) {\n                                    throw new FunctionEvaluationException(e, t);\n                                } catch (EventException e) {\n                                    throw new FunctionEvaluationException(e, t);\n                                }\n                            }\n                        };\n\n                        // Initialize the solver\n                        final BrentSolver solver = new BrentSolver();\n                        solver.setAbsoluteAccuracy(convergence);\n                        solver.setMaximalIterationCount(maxIterationCount);\n\n                        // Find the root within the adjusted interval\n                        final double root = (intervalTa <= intervalTb) ?\n                                            solver.solve(f, intervalTa, intervalTb) :\n                                            solver.solve(f, intervalTb, intervalTa);\n\n                        // Process the found root\n                        // Check if the found root is very close to the start of the original sub-interval 'ta'\n                        // AND also very close to the previous event time. If both conditions are true,\n                        // it's likely we refound the previous event, so we ignore it.\n                        if ((Math.abs(root - ta) <= convergence) &&\n                            (!Double.isNaN(previousEventTime) && (Math.abs(root - previousEventTime) <= convergence))) {\n                            // Root is too close to the interval start and the previous event time. Ignore it.\n                            // Advance to the next sub-interval.\n                            ta = tb;\n                            ga = gb;\n                        } else if (Double.isNaN(previousEventTime) ||\n                                   (Math.abs(previousEventTime - root) > convergence)) {\n                            // Found a significantly new event (or the first event).\n                            // Store the event time.\n                            pendingEventTime = root;\n                            // Check if we were already expecting an event at this time (from a previously rejected step)\n                            if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                                // The current step ends exactly at the pending event time.\n                                // Accept the step (return false), the event will be handled externally.\n                                return false;\n                            }\n                            // This is a new event detected within the step.\n                            // Mark that an event is pending and reject the step (return true).\n                            pendingEvent = true;\n                            return true;\n                        } else {\n                            // Root is close to the previous event time, but not close to the start 'ta'.\n                            // The original code ignored this case by advancing ta = tb and ga = gb.\n                            // Maintain this behavior, although it might warrant review.\n                            ta = tb;\n                            ga = gb;\n                        }\n                    } else {\n                        // If intervalGa * intervalGb >= 0 (and we didn't already continue),\n                        // it means we couldn't reliably bracket the root in this sub-interval.\n                        // Continue to the next sub-interval.\n                        ta = tb;\n                        ga = gb;\n                    }\n\n                } else {\n                    // No sign change detected relative to the start of the step g0.\n                    // Advance to the next sub-interval.\n                    ta = tb;\n                    ga = gb;\n                }\n\n            } // End of loop over sub-intervals\n\n            // If the loop completes without returning true, no event needing step rejection was found.\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            // Handle exceptions potentially wrapped by the UnivariateRealFunction f\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            // Wrap other FunctionEvaluationExceptions (e.g., from handler.g) in EventException\n            throw new EventException(e);\n        }\n        // Note: ConvergenceException thrown by solver.solve() is not caught here\n        // and will propagate up, as expected by the method signature.\n        // IllegalArgumentException from solver (if interval is invalid despite checks)\n        // will also propagate up (likely wrapped in MathRuntimeException).\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}