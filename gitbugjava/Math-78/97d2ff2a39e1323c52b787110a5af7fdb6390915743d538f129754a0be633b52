{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final double dt = t1 - t0;\n            if (Math.abs(dt) < convergence) {\n                // we cannot do anything on such a small step, don't trigger any events\n                return false;\n            }\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(dt) / maxCheckInterval));\n            final double h  = dt / n;\n\n            double ta = t0;\n            double ga = g0;\n\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the current substep\n                final double tb = t0 + (i + 1) * h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check for sign change or zero crossing\n                if (ga * gb <= 0) {\n                    // potential event in [ta, tb]\n\n                    double intervalTa = ta;\n                    double intervalTb = tb;\n                    double intervalGa = ga;\n                    double intervalGb = gb;\n                    boolean solve = true;\n\n                    // Check if an endpoint is zero and corresponds to the previous event time.\n                    // If so, the solver might immediately return this (old) event,\n                    // preventing detection of a new event in the interval.\n                    // We nudge the interval slightly away from the old event time in such cases.\n                    boolean taIsOldEvent = !Double.isNaN(previousEventTime) && Math.abs(ta - previousEventTime) < convergence;\n                    boolean tbIsOldEvent = !Double.isNaN(previousEventTime) && Math.abs(tb - previousEventTime) < convergence;\n\n                    if ((ga == 0.0 && taIsOldEvent) || (gb == 0.0 && tbIsOldEvent)) {\n                        // If both endpoints are zero and old events, skip (very unlikely for isolated roots)\n                        if ((ga == 0.0 && taIsOldEvent) && (gb == 0.0 && tbIsOldEvent)) {\n                            solve = false;\n                        } else {\n                            // Nudge the interval endpoint(s) that correspond to the old event\n                            double dtNudge = forward ? convergence : -convergence;\n                            if (ga == 0.0 && taIsOldEvent) {\n                                // Nudge start point forward/backward\n                                intervalTa = ta + dtNudge;\n                            }\n                            if (gb == 0.0 && tbIsOldEvent) {\n                                // Nudge end point backward/forward\n                                intervalTb = tb - dtNudge;\n                            }\n\n                            // Check if the nudged interval is still valid (non-zero width and correct direction)\n                            if ((intervalTb - intervalTa) * dtNudge <= 0) {\n                                solve = false; // Interval became invalid after nudging\n                            } else {\n                                // Re-evaluate function values at nudged endpoints to check bracketing\n                                interpolator.setInterpolatedTime(intervalTa);\n                                intervalGa = handler.g(intervalTa, interpolator.getInterpolatedState());\n                                interpolator.setInterpolatedTime(intervalTb);\n                                intervalGb = handler.g(intervalTb, interpolator.getInterpolatedState());\n\n                                if (intervalGa * intervalGb > 0) {\n                                    // Nudging failed to preserve bracketing, skip solving this interval\n                                    // This might happen with multiple roots or tangency\n                                    solve = false;\n                                }\n                            }\n                        }\n                    }\n\n\n                    if (solve) {\n                        // Determine event direction using original interval endpoint values (before potential nudge)\n                        increasing = gb >= ga;\n\n                        final UnivariateRealFunction f = new UnivariateRealFunction() {\n                            public double value(final double t) throws FunctionEvaluationException {\n                                try {\n                                    interpolator.setInterpolatedTime(t);\n                                    return handler.g(t, interpolator.getInterpolatedState());\n                                } catch (DerivativeException e) {\n                                    throw new FunctionEvaluationException(e, t);\n                                } catch (EventException e) {\n                                    throw new FunctionEvaluationException(e, t);\n                                }\n                            }\n                        };\n                        final BrentSolver solver = new BrentSolver();\n                        solver.setAbsoluteAccuracy(convergence);\n                        solver.setMaximalIterationCount(maxIterationCount);\n\n                        try {\n                             // Solve for a root in the (potentially nudged) interval [intervalTa, intervalTb]\n                            final double root = (intervalTa <= intervalTb) ?\n                                                solver.solve(f, intervalTa, intervalTb) :\n                                                solver.solve(f, intervalTb, intervalTa);\n\n                             // Check if the found root is a new event (distinct from the previous one)\n                            if (Double.isNaN(previousEventTime) || Math.abs(root - previousEventTime) > convergence) {\n                                pendingEventTime = root;\n                                if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                                    // We were already waiting for this event, and it occurred near the step end. Accept step.\n                                    return false;\n                                }\n                                // Found a new event before the step end. Reject step.\n                                pendingEvent = true;\n                                return true;\n                            }\n                            // else: The root found is numerically close to the previous event. Ignore it.\n                            // The loop will continue checking the remainder of the step.\n\n                        } catch (ConvergenceException e) {\n                            // Solver failed to converge. This is considered a failure.\n                            throw e;\n                        } catch (FunctionEvaluationException e){\n                             // Exception during function evaluation by the solver. Propagate.\n                             throw e;\n                        } catch (IllegalArgumentException e) {\n                             // BrentSolver throws this for bracketing issues or invalid intervals.\n                             // Our checks should mostly prevent this, but if it happens, treat as convergence failure.\n                             throw new ConvergenceException(\"Solver failed with exception\", e);\n                        }\n\n                    } // end if solve\n\n                } // end if sign change or zero crossing\n\n                // Advance to the next sub-interval\n                ta = tb;\n                ga = gb;\n            }\n\n            // No new event found during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            // Handle exceptions from interpolator or handler.g calls (outside solver's internal calls)\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            } else if (cause != null && cause instanceof ConvergenceException) {\n                 throw (ConvergenceException) cause; // Propagate convergence exceptions\n            }\n            // Wrap other/direct FunctionEvaluationExceptions as EventException\n            throw new EventException(e);\n        } catch (ConvergenceException e) {\n             // Catch ConvergenceExceptions specifically to avoid wrapping them\n             throw e;\n        } catch (DerivativeException e) {\n             // Catch DerivativeExceptions specifically to avoid wrapping them\n             throw e;\n        } catch (EventException e) {\n             // Catch EventExceptions specifically to avoid wrapping them\n             throw e;\n        } catch (RuntimeException e) {\n            // Catch unexpected runtime exceptions and wrap as EventException\n             final String message = \"Unexpected runtime exception caught during event evaluation\";\n             throw new EventException(message, e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}