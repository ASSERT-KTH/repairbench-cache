{
    "generation": "    /**\n     * <p>Reduce the fraction to the smallest values for the numerator and\n     * denominator, returning the result.</p>\n     *\n     * <p>For example, if this fraction represents 2/4, then the result\n     * will be 1/2.</p>\n     *\n     * @return a new reduced fraction instance, or this if no simplification possible\n     */\n    public Fraction reduce() {\n        // Handle zero numerator\n        if (numerator == 0) {\n            // Check if it's already the canonical 0/1 fraction (Fraction.ZERO)\n            // We assume Fraction.getFraction(0, 1) returns Fraction.ZERO\n            // or that equals properly handles comparison to Fraction.ZERO.\n            // A direct check avoids potential issues with equals or ZERO instance state.\n            return equals(Fraction.ZERO) ? this : Fraction.ZERO;\n        }\n\n        // Normalize sign: ensure denominator is positive for calculations and final result\n        int n = numerator;\n        int d = denominator;\n        if (d < 0) {\n            // Check for potential overflow if numerator or denominator is Integer.MIN_VALUE\n            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {\n                 throw new ArithmeticException(\"overflow: can't negate\");\n            }\n            n = -n;\n            d = -d;\n        }\n\n        // Calculate GCD using absolute value of numerator and (now positive) denominator\n        int gcd = greatestCommonDivisor(Math.abs(n), d);\n\n        // Check if already reduced (gcd=1) and sign was already normalized (original denominator > 0)\n        if (gcd == 1 && denominator > 0) {\n             return this; // No change needed\n        }\n\n        // Perform reduction\n        int reducedNumerator = n / gcd;\n        int reducedDenominator = d / gcd; // Denominator is now guaranteed positive\n\n        // Return the reduced fraction using the factory method\n        // This ensures cached instances (like Fraction.ZERO, ONE etc.) are used if applicable.\n        return Fraction.getFraction(reducedNumerator, reducedDenominator);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}