{
    "generation": "@Override\nvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        // First declare/compute next and prev siblings\n        Node next = nextSibling();\n        Node prev = previousSibling();\n        boolean isBlank = isBlank();\n\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && next == null;\n\n        // Do not trim trailing whitespace if previous is <br> and it's the last sibling\n        if (next == null && prev instanceof Element && \"br\".equals(((Element) prev).tagName())) {\n            trimTrailing = false;\n        }\n\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text\n            || (prev instanceof Element && ((Element) prev).isBlock());\n        if (couldSkip && isBlank) return;\n\n        // Indent if conditions met\n        if (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n            (siblingIndex > 0 && prev instanceof TextNode && isNode(prev, \"br\")) // special handling for <br>\n        ) {\n            indent(accum, depth, out);\n        }\n    }\n\n    // Escaping text with adjusted trimTrailing for <br> prior case\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}