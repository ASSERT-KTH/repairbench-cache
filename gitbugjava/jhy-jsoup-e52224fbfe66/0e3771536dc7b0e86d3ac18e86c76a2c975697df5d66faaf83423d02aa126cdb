{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting\n                || (prev instanceof Element && ((Element) prev).isBlock()) // prev must exist and be an Element.\n                ;\n            if (couldSkip && isBlank) return;\n\n            // Indentation logic. Group conditions to be clearer.\n            // Condition A: First non-blank child of a block-like parent.\n            boolean indentForFirstChild = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank);\n            // Condition B: Outline mode, not blank, and has siblings.\n            boolean indentForOutline = (out.outline() && siblingNodes().size() > 0 && !isBlank);\n            // Condition C: Follows a <br> tag.\n            boolean followsBr = (siblingIndex > 0 && Element.isNode(prev, \"br\"));\n\n            if (followsBr) {\n                if (isBlank) {\n                    // This is a blank text node following a <br>.\n                    // Only emit a newline to represent the <br>'s line break. Do not add indent spaces,\n                    // as this blank node's actual text content will be trimmed.\n                    if (depth > 0) { // Only if not top-level, mirrors indent() behavior.\n                        accum.append('\\n');\n                    }\n                } else {\n                    // This is a non-blank text node following a <br>. Indent it.\n                    indent(accum, depth, out);\n                }\n            } else if (indentForFirstChild || indentForOutline) {\n                // Standard indentation for other cases (first child, outline mode)\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}