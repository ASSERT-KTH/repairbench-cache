{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting\n                || (prev instanceof Element && ((Element) prev).isBlock())\n                ;\n            if (couldSkip && isBlank) return;\n\n            // Introduce a condition to prevent indentation for blank text nodes\n            // that will be completely trimmed (i.e., at the end of a block).\n            // Such nodes should not introduce a newline before themselves.\n            boolean skipIndentIfBlankAndTrimmed = isBlank && trimTrailing;\n\n            if (\n                !skipIndentIfBlankAndTrimmed && // If the text node is blank and will be trimmed, don't indent.\n                (\n                    (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                    (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                    (siblingIndex > 0 && isNode(prev, \"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n                )\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}