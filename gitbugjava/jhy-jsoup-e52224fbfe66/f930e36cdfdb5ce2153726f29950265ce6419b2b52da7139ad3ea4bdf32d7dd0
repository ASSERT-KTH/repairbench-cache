{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            Node prev = previousSibling(); // Defined here\n            boolean isBlank = isBlank(); // Defined here\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting\n                || (prev instanceof Element && ((Element) prev).isBlock())\n                ;\n            if (couldSkip && isBlank) return;\n\n            // Determine if indentation is needed:\n            boolean firstChildNonBlank = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank);\n            boolean outlineNonBlank = (out.outline() && parent != null && parent.childNodeSize() > 0 && !isBlank); // check parent != null for outline\n            boolean followsBr = (siblingIndex > 0 && isNode(prev, \"br\"));\n\n            boolean needsIndent = (firstChildNonBlank || outlineNonBlank || followsBr);\n\n            if (needsIndent) {\n                 // Special case: if indent is required solely because this node follows a <br>, and this node is blank,\n                 // only emit a newline. Otherwise, indent normally.\n                if (followsBr && isBlank && !firstChildNonBlank && !outlineNonBlank) {\n                    accum.append('\\n');\n                } else {\n                    indent(accum, depth, out);\n                }\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}