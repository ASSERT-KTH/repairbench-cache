{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false; // final values determined below\n\n        if (normaliseWhite) {\n            // We need prev and isBlank ahead of the skip check\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            // We need trimTrailing calculated now\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // Case: a TextNode is blank, follows a <br>, and is the last node in a block level element. Skip outputting this text node.\n            // Previously, this TextNode would be printed as \" \" (a single space), after the indent, creating undesirable \"<br> \\n\"\n            if (isBlank && NodeUtil.isNode(prev, \"br\") && trimTrailing)\n                return;\n\n            // calculate trimLeading after the <br> check above\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            // Node prev = previousSibling(); // moved up\n            // boolean isBlank = isBlank(); // moved up\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting\n                || (NodeUtil.isNode(prev, Element.class) && ((Element) prev).isBlock()) // replaced direct check with NodeUtil for consistency, assuming Element implements Node\n                ;\n            if (couldSkip && isBlank) return;\n\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && NodeUtil.isNode(prev, \"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        // Make sure we use the calculated trim settings\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}