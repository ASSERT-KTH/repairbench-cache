{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            // Skip blank text nodes between block elements or at the start/end of blocks\n            boolean couldSkip = false;\n            if (isBlank) {\n                 couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                     || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, ignore this one\n                     || (prev instanceof Element && (((Element) prev).isBlock())) // previous block element\n                     ;\n                // Removed: || isNode(prev, \"br\") from couldSkip logic as it caused issues with <p><br /> </p> preserving space\n            }\n\n            if (couldSkip && isBlank) return; // if potentially skip, and this node is blank, skip.\n\n            // Pretty print newlines + indent:\n            // (Assume isNode is a helper method checking `node instanceof Element && ((Element) node).tagName().equals(name)`)\n            if (\n                // First node in block, and not blank. Or first node in Doc.\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first in block, not blank\n                (parentNode instanceof Document && siblingIndex == 0 && !isBlank) || // first in doc, not blank\n                // Outline mode, and not blank\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                // After a <br>, and not blank:\n                (prev != null && isNode(prev, \"br\") && !isBlank) || // Fix: Added !isBlank check. Prevents indenting blank lines after <br> that are removed by trimTrailing\n                // After a block element, and this node is not blank (whatever it is)\n                (prev != null && prev instanceof Element && ((Element) prev).tag().isBlock() && !isBlank)\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n\n    // Helper method assumed to exist in the class, based on its usage in the original code.\n    private static boolean isNode(Node node, String name) {\n        return node instanceof Element && ((Element) node).tagName().equals(name);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}