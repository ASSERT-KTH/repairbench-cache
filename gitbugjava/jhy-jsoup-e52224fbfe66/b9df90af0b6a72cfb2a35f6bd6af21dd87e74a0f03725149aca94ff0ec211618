{
    "generation": "@Override\nvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null\n        && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    if (normaliseWhite) {\n        trimLeading = (trimLikeBlock && siblingIndex == 0)\n            || parentNode instanceof Document;\n        trimTrailing = trimLikeBlock && nextSibling() == null;\n\n        // if this text is just whitespace, and the next or previous node would\n        // cause an indent, skip this text entirely\n        Node next = nextSibling();\n        Node prev = previousSibling();\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n            || (next instanceof TextNode && ((TextNode) next).isBlank())\n            || (prev instanceof Element && ((Element) prev).isBlock())\n            // special case: skip whitespace after inline <br>\n            || (siblingIndex > 0 && isNode(prev, \"br\"));\n        if (couldSkip && isBlank) {\n            return;\n        }\n\n        // if we're going to print non-blank text, do the usual indent checks\n        if ((siblingIndex == 0\n                && parent != null\n                && parent.tag().formatAsBlock()\n                && !isBlank)\n            || (out.outline() && siblingNodes().size() > 0 && !isBlank)\n            || (siblingIndex > 0 && isNode(prev, \"br\"))) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(\n        accum,\n        coreValue(),\n        out,\n        false,\n        normaliseWhite,\n        trimLeading,\n        trimTrailing\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}