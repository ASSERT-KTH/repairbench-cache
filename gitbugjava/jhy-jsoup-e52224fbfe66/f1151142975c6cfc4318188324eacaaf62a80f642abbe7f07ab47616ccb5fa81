{
    "generation": "@Override\nvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normalizeWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n    final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n    boolean trimLeading = false, trimTrailing = false;\n\n    Node next = nextSibling();\n    Node prev = previousSibling();\n\n    if (normalizeWhite) {\n        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n        // Add check that previous node is not 'br' to prevent trimming trailing whitespace after 'br'\n        trimTrailing = trimLikeBlock && next == null && (!isNode(prev, \"br\"));\n        \n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n            || (next instanceof TextNode && ((TextNode) next).isBlank()) \n            || (prev instanceof Element && ((Element) prev).tag().isBlock());\n        if (couldSkip && isBlank) return;\n\n        if (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n            (siblingIndex > 0 && isNode(prev, \"br\") && !isBlank)\n        )\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normalizeWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}