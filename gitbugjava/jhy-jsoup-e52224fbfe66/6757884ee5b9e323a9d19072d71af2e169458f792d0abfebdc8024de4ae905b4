{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // Note: normaliseWhite stays false for Script, Style data nodes, regardless of pretty-print setting\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode) && !(parentNode instanceof Document);\n        // Cervator: not normalising text in Document as this will currently cause \\n to be added to top-level TextNodes\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Want to skip leading whitespace trim on first node in block, or first node in body (first node overall)\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document; // first node requires no leading space\n            trimTrailing = trimLikeBlock && nextSibling() == null; // last node requires no trailing space\n\n            // if this text is just whitespace, and the previous node is a block, or the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n\n            // Check if this whitespace node can be skipped\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next element will add a newline + indent\n                || (next instanceof TextNode && ((TextNode) next).isBlank()) // next is blank text (and so might be skipped)\n                || (prev instanceof Element && ((Element) prev).isBlock()) // previous element is block, might have finished with a newline\n                || (isNode(prev, \"br\")); // previous element was a br tag, which implies a newline\n            ;\n            if (couldSkip && isBlank) return; // don't output this blank text node, it's not needed\n\n            // Otherwise, if the previous node was a <br>, we want to indent. (Not skip, because the content may be non-blank)\n            // Or if this node is the first in a block (and not blank), or the first non-blank in outline mode.\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first node in block, but not blank\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // first non-blank node in outline mode\n                (prev != null && isNode(prev, \"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n                // ^ non-blank text after a <br> needs indent, otherwise spaces will be eaten. Blank text is skipped above.\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}