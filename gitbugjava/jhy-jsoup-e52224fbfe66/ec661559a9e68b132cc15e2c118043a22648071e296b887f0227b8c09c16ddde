{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n\n            // if this text is just whitespace, and the next node should be skipped, skip this text:\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            // Skip leading whitespace if the previous element was a block, or a <br>, or if the previous element wasn't a block but the next is, AND this node is blank\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, potentially skips\n                || (prev instanceof Element && ((Element) prev).isBlock()) // prev is block\n                || (isNode(prev, \"br\")) // prev is <br>\n                ;\n            if (couldSkip && isBlank) return; // skip prefix whitespace if we determine it's not required\n\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first node in format-as-block container, and is not blank text\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // outline mode, and not blank text\n                (siblingIndex > 0 && isNode(prev, \"br\") && !isBlank) // preceding sibling was a <br> and this is not blank text\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n\n    // Helper method assumed to exist from context (or should be added/available)\n    private static boolean isNode(Node node, String name) {\n        return node != null && node.nodeName().equals(name);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}