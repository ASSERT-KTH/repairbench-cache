{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1; // Start index of matched content (immediately after open char)\n        int end = -1; // End index of matched content (immediately after the char before the close char)\n        int depth = 0; // Current nesting depth\n        boolean inSingle = false; // Inside single quotes?\n        boolean inDouble = false; // Inside double quotes?\n        boolean wasEscaping = false; // If the *previous* character consumed was an escape character\n\n        // Assumes static final char ESC = '\\\\'; is defined in the class or inherited\n\n        do {\n            if (isEmpty()) break; // Stop if queue is empty\n\n            char c = consume(); // Get next char and advance position (pos points *after* c)\n\n            if (wasEscaping) {\n                // If the previous char was ESC, this char 'c' is escaped.\n                // We treat it literally and reset the escape flag.\n                wasEscaping = false;\n            } else {\n                // If the previous char was not ESC, check current char 'c'\n                if (c == ESC) {\n                    // Current char is ESC, the *next* char will be escaped.\n                    wasEscaping = true;\n                } else if (c == '\\'' && !inDouble) {\n                    // Toggle single quote state if not inside double quotes\n                    inSingle = !inSingle;\n                } else if (c == '\"' && !inSingle) {\n                    // Toggle double quote state if not inside single quotes\n                    inDouble = !inDouble;\n                } else if (!inSingle && !inDouble) {\n                    // Only process open/close if not inside quotes and not escaped by the previous char\n                    if (c == open) {\n                        depth++;\n                        if (start == -1) // If this is the first unbalanced open char found\n                            start = pos; // Mark starting position *after* the open char\n                    } else if (c == close) {\n                        depth--;\n                    }\n                }\n            }\n\n            // Update the end position if we are currently inside the balanced structure.\n            // 'end' should mark the position *after* the last character consumed *before* depth reached 0.\n            // This means 'end' is updated as long as depth is still positive after processing 'c'.\n            if (depth > 0 && start != -1) {\n                // Only update end if we have actually started (start != -1).\n                // 'pos' points after the character 'c' that was just consumed.\n                 end = pos;\n            }\n\n            // Loop continues as long as depth > 0 (we are inside the balanced structure).\n            // The loop terminates naturally when depth becomes 0 (or <= 0) after processing the closing character.\n            // Or when the queue becomes empty mid-structure.\n        } while (depth > 0);\n\n        // Return the substring from start to end. If end was never updated (e.g., \"()\"),\n        // or start was never found (e.g., queue doesn't contain 'open'), return empty string.\n        // Use condition `start != -1 && end > start` to ensure valid range and handle \"()\".\n        return (start != -1 && end > start) ? queue.substring(start, end) : \"\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}