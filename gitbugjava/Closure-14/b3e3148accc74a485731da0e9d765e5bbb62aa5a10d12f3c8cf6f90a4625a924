{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        // NOTE: A break is implicitly handled by the sibling logic later.\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          // For-in loops are essentially while loops. Return the FOR node.\n          return parent;\n        } else {\n          // The update expression follows the body statement.\n          // FOR(init; cond; update) BODY\n          // Follow of end of BODY is the update part.\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        // The follow() of the body is the loop condition.\n        return parent;\n      case Token.TRY:\n        Node tryBlock = parent.getFirstChild();\n        Node catchBlock = NodeUtil.getCatchBlock(parent);\n        Node finallyBlock = NodeUtil.hasFinally(parent) ? parent.getLastChild() : null;\n\n        // If we are coming out of the TRY block...\n        if (tryBlock == node) {\n          if (finallyBlock != null) { // and have FINALLY block.\n            return computeFallThrough(finallyBlock);\n          } else { // and have no FINALLY.\n            // Go to the node after the TRY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the CATCH block...\n        } else if (catchBlock == node) {\n          // The CATCH block is the second child of the TRY node.\n          // The block containing the CATCH is the first child.\n          Preconditions.checkState(catchBlock.isBlock() && catchBlock.hasChildren());\n          Preconditions.checkState(node.getParent().isCatch());\n          // The node is the block inside the catch. The parent is the CATCH node.\n          // The CATCH node's parent is the block containing the catch clauses.\n          // The grandparent is the TRY node.\n          Node tryNode = node.getParent().getParent().getParent();\n          Preconditions.checkState(tryNode.isTry());\n          finallyBlock = NodeUtil.hasFinally(tryNode) ? tryNode.getLastChild() : null;\n\n          if (finallyBlock != null) { // and have FINALLY block.\n            return computeFallThrough(finallyBlock);\n          } else { // and have no FINALLY.\n             // Go to the node after the TRY.\n            return computeFollowNode(fromNode, tryNode, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (finallyBlock == node) {\n          boolean hasExitTarget = false;\n          if (cfa != null) {\n             // finallyMap contains the destinations for control flow leaving the\n             // try block through break, continue, or return. Connect the end\n             // of the finally block (fromNode) to these destinations.\n             Collection<Node> finallyTargets = cfa.finallyMap.get(parent);\n             if (finallyTargets != null) {\n                for (Node finallyNodeTarget : finallyTargets) {\n                   cfa.createEdge(fromNode, Branch.UNCOND, finallyNodeTarget);\n                   // If the target is null, it represents the function exit\n                   // (due to a return statement).\n                   if (finallyNodeTarget == null) {\n                       hasExitTarget = true;\n                   }\n                }\n             }\n          }\n\n          // If the finally block was entered due to a return statement\n          // (hasExitTarget is true), then control flow does not continue\n          // sequentially following the TRY. Return null to indicate this path\n          // terminates here (ends with the edge to the symbolic exit created above).\n          if (hasExitTarget) {\n              return null;\n          } else {\n              // For normal completion, exceptions, break, or continue,\n              // control flow proceeds to whatever follows the TRY statement\n              // sequentially. This might be an outer finally block or the code\n              // after the outermost TRY. This call computes that sequential target.\n              return computeFollowNode(fromNode, parent, cfa);\n          }\n        } else {\n          // Coming out of the CATCH structure block.\n          // This case should be handled by the CATCH block case above.\n          // If execution reaches here, it means 'node' is the BLOCK\n          // that holds the CATCH clauses. Follow should go to finally or after TRY.\n           Preconditions.checkState(node == parent.getFirstChild().getNext()); // Block holding CATCH\n           if (finallyBlock != null) {\n               return computeFallThrough(finallyBlock);\n           } else {\n               return computeFollowNode(fromNode, parent, cfa);\n           }\n        }\n    } // End switch\n\n    // Default case: Control flows to the next sibling.\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't pass into them sequentially.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      // If there is a sibling, control flows to it.\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST\n      // according to the parent's type (handled by recursive call).\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}