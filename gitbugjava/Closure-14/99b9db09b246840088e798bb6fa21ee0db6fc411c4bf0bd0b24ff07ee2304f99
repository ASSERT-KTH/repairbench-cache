{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE or DEFAULT_CASE, control falls through\n        // to the next CASE or DEFAULT_CASE's body, or out of the SWITCH.\n        Node switchBlock = parent.getParent();\n        Node nextCase = parent.getNext();\n        // Find the next CASE or DEFAULT_CASE sibling\n        while (nextCase != null && !nextCase.isCase() && !nextCase.isDefaultCase()) {\n          // Skip comments or other nodes between cases? Should not happen in normalized AST.\n          nextCase = nextCase.getNext();\n        }\n\n        if (nextCase != null) { // Found next case/default\n            Node targetBlock;\n            if (nextCase.isCase()) {\n                // CASE -> expr, block. We need the block.\n                targetBlock = nextCase.getLastChild();\n            } else { // DEFAULT_CASE -> block. We need the block.\n                targetBlock = nextCase.getFirstChild();\n            }\n            Preconditions.checkState(targetBlock != null && targetBlock.isBlock());\n            return computeFallThrough(targetBlock);\n        } else {\n            // No more cases/defaults, control leaves the switch.\n            // The follow is the follow of the parent SWITCH node.\n            Node switchNode = switchBlock.getParent();\n            return computeFollowNode(fromNode, switchNode, cfa);\n        }\n        // break; // Unreachable due to returns.\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          // For-in loops are essentially while loops.\n          return parent;\n        } else {\n          // Regular FOR loop, control goes to the increment expression.\n          // FOR init; cond; incr BODY\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        // Control flows back to the loop condition.\n        return parent;\n      case Token.TRY:\n        Node tryBlock = parent.getFirstChild();\n        Node catchBlock = NodeUtil.getCatchBlock(parent); // BLOCK node inside CATCH\n        Node finallyBlock = NodeUtil.getFinallyBlock(parent); // BLOCK node inside FINALLY\n\n        // If we are coming out of the TRY block...\n        if (tryBlock == node) {\n          if (finallyBlock != null) { // and have FINALLY block.\n            // Normal fallthrough from TRY goes to FINALLY.\n            return computeFallThrough(finallyBlock);\n          } else { // and have no FINALLY.\n            // Normal fallthrough follows the TRY statement.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the CATCH block...\n        } else if (catchBlock == node) {\n          if (finallyBlock != null) { // and have FINALLY block.\n             // Normal fallthrough from CATCH goes to FINALLY.\n            return computeFallThrough(finallyBlock);\n          } else { // and have no FINALLY.\n            // Normal fallthrough follows the TRY statement.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (finallyBlock == node) {\n          // Normal fallthrough after FINALLY follows the TRY statement.\n          // Jumps (break/continue/return/throw) that led to the finally\n          // are handled by the CFG builder when the finally block completes,\n          // using the finallyMap. This function only computes fall-through.\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        // It is possible that node is the CATCH node itself, but typically\n        // this function is called with the last node *inside* a block.\n        // If none of the above match, control flow falls through to sibling logic below.\n        break;\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}