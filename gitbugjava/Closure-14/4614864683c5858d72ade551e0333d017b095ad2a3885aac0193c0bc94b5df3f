{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node whose successor is being computed.\n   *        Used as the source of the side-effect edges created for FINALLY jumps.\n   * @param node The node that follow() should compute.\n   * @param cfa The current ControlFlowAnalysis instance. May be null.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.getRoot())) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition. Fallthrough.\n        Node nextCase = parent.getNext();\n        if (nextCase != null) {\n          if (nextCase.isCase()) {\n            // CASE EXPR: BLOCK <-- control goes to the block\n            return computeFallThrough(nextCase.getFirstChild().getNext());\n          } else if (nextCase.isDefaultCase()) {\n            // DEFAULT_CASE: BLOCK <-- control goes to the block\n            return computeFallThrough(nextCase.getFirstChild());\n          } else {\n            // Shouldn't happen\n            throw new IllegalStateException(\"Not reachable\");\n          }\n        } else {\n          // This is the last case/default clause. Control goes to whatever\n          // follows the switch statement.\n          return computeFollowNode(fromNode, parent.getParent(), cfa); // Pass SWITCH node\n        }\n        // Note: explicit breaks within cases are handled by standard jump logic\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          // For-in loops are structured as: FOR (VAR in EXPR) BLOCK\n          // The block follows the variable initialization.\n          // The iteration check happens implicitly. Follow of the block loops back to FOR.\n          return parent;\n        } else {\n          // Regular FOR loops: FOR(INIT; COND; INC) BLOCK\n          // The follow of the block is the INC node.\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        // Follow of the block is the loop condition (WHILE) or the loop itself (DO's condition).\n        return parent;\n      case Token.TRY:\n        Node tryBlock = parent.getFirstChild();\n        Node catchBlock = NodeUtil.getCatchBlock(parent); // The CATCH node.\n        Node finallyBlock = NodeUtil.getFinallyBlock(parent); // The BLOCK node for finally.\n\n        // Coming out of the TRY block (node == tryBlock)\n        if (node == tryBlock) {\n          // If try block falls through normally...\n          if (finallyBlock != null) {\n            // Go to finally block first.\n            return computeFallThrough(finallyBlock);\n          } else {\n            // No finally block, control goes to whatever follows the TRY statement.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        }\n        // Coming out of the CATCH block's body (node == catchBlock.getLastChild())\n        else if (catchBlock != null && node == catchBlock.getLastChild()) {\n          // If catch block falls through normally...\n          if (finallyBlock != null) {\n            // Go to finally block.\n            return computeFallThrough(finallyBlock);\n          } else {\n            // No finally block, control goes to whatever follows the TRY statement.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        }\n        // Coming out of the FINALLY block (node == finallyBlock)\n        else if (finallyBlock != null && node == finallyBlock) {\n          // If finally block completes normally...\n          // Side effect: Add edges for pending jumps (break/continue/return/throw)\n          // that caused entry to this finally block. The edges connect the end\n          // of this finally block to the next finally block or the ultimate target.\n          if (cfa != null) {\n            java.util.Collection<Node> finallyTargets = cfa.finallyMap.get(parent);\n            if (finallyTargets != null) {\n              for (Node finallyNode : finallyTargets) {\n                // Connect *this* finally block (node) to the target (finallyNode).\n                // The graph builder interprets this as edge from finally end.\n                cfa.createEdge(node, ControlFlowGraph.Branch.UNCOND, finallyNode);\n              }\n            }\n          }\n          // Control normally transfers to whatever follows the TRY statement.\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        // Fallthrough if node is not try, catch body end, or finally block.\n        // This can happen for nodes within the try/catch/finally blocks.\n        break; // End of TRY case\n    }\n\n    // If not handled by special structural cases above:\n\n    // Default: follow should be the next sibling.\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't flow into them sequentially.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      // If there is a next sibling, control goes to it.\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      // The follow() of the parent node determines where to go.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}