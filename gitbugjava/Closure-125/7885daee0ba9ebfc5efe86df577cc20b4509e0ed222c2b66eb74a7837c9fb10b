{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    // Get the type of the constructor identifier.\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n    // Check if the type could potentially be a constructor.\n    // This includes actual constructors, or unknown/empty types which might resolve later.\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      // Attempt to resolve it to a FunctionType.\n      FunctionType fnType = type.toMaybeFunctionType();\n\n      // Check if we successfully resolved it to a FunctionType AND\n      // that function type is specifically marked as a constructor (not an interface).\n      // This guards against cases like union types (where fnType is null)\n      // or interfaces (where fnType is not null but isConstructor() is false).\n      // It also potentially guards against malformed types resulting from type inference\n      // issues (like in Issue 1002) where isConstructor() might be unreliable.\n      if (fnType != null && fnType.isConstructor()) {\n        // It's a valid constructor call. Check parameters and set the node's type.\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n      } else {\n        // The type looked like it could be a constructor initially, but either:\n        // 1. It resolved to null (e.g., UnionType, EmptyType).\n        // 2. It resolved to a FunctionType that is not a constructor (e.g., an Interface).\n        // Report an error because 'new' requires a constructor.\n        report(t, n, NOT_A_CONSTRUCTOR);\n        // Ensure the 'new' expression itself gets a type, typically Unknown.\n        ensureTyped(t, n);\n      }\n    } else {\n      // The initial type check failed: the type is definitely not a constructor\n      // (e.g., it's a number, string, or a known non-constructor function/object).\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}