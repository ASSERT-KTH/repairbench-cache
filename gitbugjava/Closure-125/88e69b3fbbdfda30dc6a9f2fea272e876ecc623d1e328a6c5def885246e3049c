{
    "generation": "  /**\n   * Visits a NEW node.\n   *\n   * This performs the following checks:\n   * 1) Verifies that the constructor is actually a constructor function.\n   * 2) Verifies that the number of arguments matches the declared parameters.\n   * 3) Assigns the type of the node.\n   * 4) Visits the parameters, if they exist.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    // Use the restricted type, which is relevant for type checking.\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n    FunctionType functionTypeToUse = null; // The function type used for parameter checking.\n    JSType resultInstanceType = null; // The instance type assigned to the 'new' expression.\n    boolean isPotentiallyConstructor = false;\n\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      isPotentiallyConstructor = true;\n      functionTypeToUse = type.toMaybeFunctionType(); // May be null for empty/unknown.\n      if (functionTypeToUse != null) {\n        // If it's a known constructor, use its instance type.\n        resultInstanceType = functionTypeToUse.getInstanceType();\n      }\n      // If functionTypeToUse is null (because type was empty/unknown),\n      // resultInstanceType remains null, handled later.\n    } else if (type.isUnionType()) {\n      // If the constructor type is a union, it might contain constructors.\n      // We need to check the alternatives and compute a union of instance types.\n      JSTypeRegistry registry = t.getCompiler().getTypeRegistry();\n      // Start with the bottom type for the union calculation.\n      JSType instanceUnion = registry.getNativeType(JSTypeNative.NO_TYPE);\n\n      for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n        JSType restrictedAlt = alt.restrictByNotNullOrUndefined();\n        if (restrictedAlt.isConstructor() || restrictedAlt.isEmptyType() || restrictedAlt.isUnknownType()) {\n          isPotentiallyConstructor = true; // Mark that this union is potentially constructable.\n          FunctionType altFnType = restrictedAlt.toMaybeFunctionType();\n          if (altFnType != null) {\n            // Pick the first valid FunctionType found for parameter checking.\n            // This isn't perfect, but better than crashing or no check.\n            if (functionTypeToUse == null) {\n              functionTypeToUse = altFnType;\n            }\n            // Add the instance type to the union of possible result types.\n            instanceUnion = registry.createUnionType(instanceUnion, altFnType.getInstanceType());\n          } else {\n            // If the alternative is empty or unknown, the result can be unknown.\n            instanceUnion = registry.createUnionType(instanceUnion, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n          }\n        }\n      }\n      if (isPotentiallyConstructor) {\n        // Finalize the instance type by removing the initial NO_TYPE if others were added.\n        resultInstanceType = instanceUnion.restrictByNotNullOrUndefined();\n        // If the union only contained non-constructors or resulted in NO_TYPE, handle below.\n      }\n    }\n\n    // Proceed if the type (or at least one union alternate) was potentially a constructor.\n    if (isPotentiallyConstructor) {\n      // Check parameters using the determined function type, if one was found.\n      if (functionTypeToUse != null) {\n        visitParameterList(t, n, functionTypeToUse);\n      } else {\n        // If no specific function type is available (e.g., union of unknown/empty),\n        // we cannot accurately check parameters.\n        // TODO(b/11644246): Check parameters against the union of function types?\n      }\n\n      // Set the type of the 'new' expression node.\n      // Use the calculated instance type, or default to UNKNOWN if none could be determined.\n      if (resultInstanceType != null && !resultInstanceType.isNoType()) {\n        ensureTyped(t, n, resultInstanceType);\n      } else {\n        // Default to unknown if type was empty/unknown or the union resulted in NoType.\n        ensureTyped(t, n);\n      }\n    } else {\n      // The type is neither a constructor nor a union containing constructors/empty/unknown.\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n); // Assign unknown type after reporting error.\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}