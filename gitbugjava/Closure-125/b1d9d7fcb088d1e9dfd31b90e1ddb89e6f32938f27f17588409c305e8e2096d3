{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    // Get the type of the constructor expression.\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    // Attempt to resolve it to a FunctionType to check parameters.\n    FunctionType fnType = type.toMaybeFunctionType();\n\n    // If we could resolve the type to any function type, check the parameters\n    // against that function type's signature.\n    // Let ensureTyped/checkNew handle the check of whether it's *actually*\n    // constructible and report errors if necessary.\n    if (fnType != null) {\n        visitParameterList(t, n, fnType);\n    }\n    // Otherwise (e.g., type is unknown, empty, not a function, or a complex\n    // union where toMaybeFunctionType returns null), we can't check parameters\n    // with a specific signature here.\n\n    // Let ensureTyped handle the actual type assignment. It calls checkNew,\n    // which performs the detailed analysis of whether the type is constructible\n    // (handling constructors, interfaces, unions, unknowns, etc.) and reports\n    // appropriate errors like NOT_A_CONSTRUCTOR if the check fails.\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}