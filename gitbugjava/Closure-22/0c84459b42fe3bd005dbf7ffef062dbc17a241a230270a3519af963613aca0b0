{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    // Don't check COMMA nodes directly. We'll check their children.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Exception: Special case for `(..., eval)` (function call first child)\n    // Keep this specific check from original code.\n    if (parent.isComma()) {\n      Node gramps = parent.getParent();\n      if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {\n        // NOTE(nicksantos): This is slightly stricter than the original\n        // check. Originally, it just checked that the second child was\n        // a NAME node, which is wrong. It should have checked for the NAME\n        // 'eval'. This seems like the least intrusive fix for that bug.\n        // See testIndirectEval flapping test for more context.\n        if (n == parent.getFirstChild() && parent.hasMoreThanOneChild() &&\n            n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n    }\n\n    // Exception: Initializer and incrementor of a FOR loop are not used results.\n    // Keep this specific check from original code for safety, although\n    // isResultUsed *should* handle it.\n    // Make sure that the node is the initializer or the incrementor node\n    // and not the condition node.\n    if (parent.isFor() && parent.getChildCount() == 4) {\n       // initializer or incrementor\n       if (n == parent.getFirstChild() || n == parent.getChildAtIndex(2)) {\n         return;\n       }\n    }\n\n    // Determine if the expression's result is actually used.\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n    // If the result is not used, check for side effects.\n    if (!isResultUsed) {\n      // Exception: An annotated name sticking around for clarification purposes.\n      // e.g. /** @type {Element} */ foo;\n      // If a QualifiedName has JSDoc and appears in a statement context,\n      // its result is not used but we allow it.\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        // Check if the node is eventually a child of EXPR_RESULT or BLOCK.\n        Node exprRoot = NodeUtil.getExpressionRoot(n);\n        if (exprRoot != null && NodeUtil.isExpressionStatement(exprRoot)) {\n           return;\n        }\n      }\n\n      // Check for side effects.\n      boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n      // TODO(nicksantos|johnlenz): Decide if we should move the side effect\n      // check into isExpressionResultUsed.\n      if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        // No side effects and result not used = useless code.\n\n        // The original code had `else if (n.isExprResult()) { return; }`.\n        // This check is confusing and likely wrong. An EXPR_RESULT node's result is,\n        // by definition, unused. We should be checking the *child* of the EXPR_RESULT.\n        // If 'n' itself is the EXPR_RESULT, this visitor shouldn't process it directly\n        // for this check; it should process the child. Removing this check.\n\n        // Report the error.\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n          msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n              \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        // TODO(johnlenz): determine if it is necessary to\n        // try to protect side-effect free statements as well.\n\n        // Keep track of non-statement nodes that might be removable by other passes.\n        // CheckSideEffects always runs before the peephole passes.\n        if (!NodeUtil.isStatement(n)) {\n          problemNodes.add(n);\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}