{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points (min, max, initial) do not indicate a root is bracketed.</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root), or if the function values at the\n     * endpoints and initial guess do not indicate a root is bracketed.\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Fixed: Set result to min, not yMin\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Fixed: Set result to max, not yMax\n            return result;\n        }\n\n        // Check if the function values indicate abracketing interval\n        if (yInitial * yMin < 0) {\n            // Bisection is performed on the [min, initial] interval\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        } else if (yInitial * yMax < 0) {\n            // Bisection is performed on the [initial, max] interval\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        } else if (yMin * yMax < 0) {\n            // The endpoints bracket the root, use the full interval and the initial\n            // guess for the Brent algorithm.\n            return solve(f, min, yMin, max, yMax, initial, yInitial);\n        } else {\n            // The function values do not indicate that a root is bracketed by\n            // either [min, initial], [initial, max] or [min, max].\n            throw new IllegalArgumentException(String.format(\n                    \"Function values at endpoints [%f, %f] and initial guess %f \" +\n                    \"do not bracket a root. Values: [%f, %f], %f\",\n                    min, max, initial, yMin, yMax, yInitial));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}