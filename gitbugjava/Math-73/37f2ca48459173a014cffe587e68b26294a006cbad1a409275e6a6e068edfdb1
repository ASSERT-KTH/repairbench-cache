{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root), or if the function values at the\n     * endpoints and initial guess do not bracket a root.\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // Evaluate function at initial, min, and max\n        double yInitial = f.value(initial);\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n\n        // return the initial guess if it is good enough\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Use min, not yMin\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Use max, not yMax\n            return result;\n        }\n\n        // Check for bracketing:\n        // A root is bracketed if initial has different sign than either endpoint,\n        // or if the endpoints have different signs.\n        if (yInitial * yMin < 0) {\n            // Root is bracketed by [min, initial]. Refine using this interval.\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        } else if (yInitial * yMax < 0) {\n            // Root is bracketed by [initial, max]. Refine using this interval.\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        } else if (yMin * yMax < 0) {\n             // Root is bracketed by [min, max]. Use initial point as starting guess.\n            return solve(f, min, yMin, max, yMax, initial, yInitial);\n        } else {\n            // If none of the above conditions are met, the function values\n            // do not indicate a bracketed root according to the requirement.\n            // (Either all have the same sign, or some are zero but not close enough to count as roots).\n             throw new IllegalArgumentException(\n                 \"Function values at endpoints do not bracket a root. \" +\n                 \"Values at endpoints: [\" + min + \", \" + max + \"] -> [\" + yMin + \", \" + yMax + \"]. \" +\n                 \"Value at initial: \" + initial + \" -> \" + yInitial);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}