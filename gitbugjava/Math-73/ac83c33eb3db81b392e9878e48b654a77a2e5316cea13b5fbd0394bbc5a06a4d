{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root) or if the function values at the\n     * provided points do not indicate a root is bracketed.\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            // Fixed: Set result to min, not yMin\n            setResult(min, 0);\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            // Fixed: Set result to max, not yMax\n            setResult(max, 0);\n            return result;\n        }\n\n        // Check bracketing: a root is bracketed if function values at endpoints have different signs\n        if (yInitial * yMin < 0) {\n            // Root is bracketed by [min, initial]. Refine interval.\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        } else if (yInitial * yMax < 0) {\n            // Root is bracketed by [initial, max]. Refine interval.\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        } else {\n            // Initial guess does not form a bracketing interval with either endpoint.\n            // Check if the original interval [min, max] brackets the root.\n            if (yMin * yMax < 0) {\n                 // Root is bracketed by [min, max]. Proceed with the full Brent algorithm,\n                 // using the initial guess as a starting point.\n                 return solve(f, min, yMin, max, yMax, initial, yInitial);\n            } else {\n                 // No interval brackets the root (yMin, yInitial, yMax have the same sign).\n                 // Throw exception as per Javadoc and bracketing requirement.\n                 throw MathRuntimeException.createIllegalArgumentException(\n                        NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}