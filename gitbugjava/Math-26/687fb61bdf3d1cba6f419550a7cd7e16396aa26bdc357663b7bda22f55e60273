{
    "generation": "import org.apache.commons.math3.util.FastMath;\nimport java.lang.ArithmeticException; // Ensure this is imported if not implicitly available\n\n    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge or overflowed.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        // Handle early overflow condition where integer part is too large for int.\n        // Use FastMath.abs to handle Long.MIN_VALUE correctly. Cast overflow to double for comparison.\n        if (FastMath.abs((double)a0) > (double)overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            // Ensure the integer value fits in the int type\n            if (a0 > overflow || a0 < Integer.MIN_VALUE) {\n                 throw new FractionConversionException(value, a0, 1l);\n            }\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0; // Convergent numerator\n        long q2 = 1; // Convergent denominator (initialize to 1 to avoid issues)\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r0MinusA0 = r0 - a0;\n            // Check for zero difference, implies exact convergence in previous step.\n            // This case should ideally be caught by epsilon check, but handle defensively.\n            if (r0MinusA0 == 0.0) {\n                // Avoid division by zero. Stop iteration, p1/q1 is the exact fraction.\n                // The post-loop logic will handle using p1/q1 or p2/q2 correctly.\n                // Let the loop termination condition decide. We set stop=true later based on conditions.\n                // If we stop here, p2/q2 might not be updated.\n                // Alternative: r1 will be infinite, caught by isFinite check below.\n            }\n            double r1 = 1.0 / r0MinusA0;\n\n            // Check for non-finite intermediate result (indicates division by zero or potential overflow).\n            if (!Double.isFinite(r1)) {\n                 // If r1 is infinite, value was likely exactly p1/q1. Loop should terminate.\n                 // If NaN, there was an issue.\n                 // Treat both as potential overflow/failure to converge further. Use last valid convergent p1/q1.\n                 throw new FractionConversionException(value, p1, q1);\n            }\n\n            // Check if floor(r1) exceeds Long limits before casting.\n            if (r1 > (double) Long.MAX_VALUE) {\n                 // a1 would overflow long. Use last valid convergent p1/q1.\n                throw new FractionConversionException(value, p1, q1);\n            }\n            long a1 = (long)FastMath.floor(r1);\n\n            // Calculate next convergent numerator p2 = (a1 * p1) + p0\n            long p2_hat; // Use temporary variable for check\n            try {\n                // Use exact arithmetic (Java 8+) to detect long overflow.\n                long safeMul = Math.multiplyExact(a1, p1);\n                p2_hat = Math.addExact(safeMul, p0);\n            } catch (ArithmeticException e) {\n                // Long overflow detected during p2 calculation. Use last valid convergent p1/q1.\n                throw new FractionConversionException(value, p1, q1);\n            }\n\n            // Calculate next convergent denominator q2 = (a1 * q1) + q0\n            long q2_hat; // Use temporary variable for check\n            try {\n                // Use exact arithmetic (Java 8+) to detect long overflow.\n                long safeMul = Math.multiplyExact(a1, q1);\n                q2_hat = Math.addExact(safeMul, q0);\n             } catch (ArithmeticException e) {\n                 // Long overflow detected during q2 calculation. Use last valid convergent p1/q1.\n                 throw new FractionConversionException(value, p1, q1);\n             }\n\n            // Check if the calculated convergent numerator/denominator exceed Integer limits\n            // Note: overflow = Integer.MAX_VALUE\n            if ((p2_hat > overflow) || (p2_hat < Integer.MIN_VALUE) || (q2_hat > overflow)) {\n                // Denominator q2_hat should be positive based on algorithm, so no < MIN_VALUE check needed for it.\n                // Throw exception reporting the values (p2_hat, q2_hat) that exceed int limits.\n                throw new FractionConversionException(value, p2_hat, q2_hat);\n            }\n\n            // If all checks passed, update p2 and q2\n            p2 = p2_hat;\n            q2 = q2_hat;\n\n            // Denominator q2 must be positive. If not, it indicates an error in the algorithm logic.\n            if (q2 <= 0) {\n                 throw new FractionConversionException(\"Denominator non-positive\", value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n\n            // Check convergence criteria: Continue ONLY IF:\n            // - Iteration limit not reached AND\n            // - Error is still greater than epsilon AND\n            // - Denominator is strictly less than maxDenominator limit\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                // Convergent is not yet satisfactory. Continue iteration.\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                // Stop iteration criteria met (max iterations reached, or epsilon satisfied, or max denominator reached/exceeded).\n                stop = true;\n            }\n        } while (!stop);\n\n        // Check if iteration stopped specifically due to reaching max iterations limit.\n        if (n >= maxIterations) {\n            // If max iterations reached, throw exception regardless of other conditions.\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        // If loop finished normally (n < maxIterations), determine the result fraction.\n        // The loop stops when epsilon is met OR q2 >= maxDenominator.\n\n        // If the denominator q2 of the last calculated convergent (p2, q2)\n        // meets or exceeds maxDenominator, we must use the previous convergent (p1, q1).\n        if (q2 < maxDenominator) {\n            // The last calculated convergent (p2, q2) is acceptable and within denominator limit.\n            // It has already been checked to fit within Integer range inside the loop.\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            // Denominator limit was met or exceeded by q2. Use previous convergent (p1, q1).\n            // p1 and q1 represent the state before the last iteration and were implicitly\n            // checked against Integer limits in the prior loop iteration's check.\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}