{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n        String remainder = text.substring(pos).trim(); // The rest of the text\n\n        // Loop whilst there is still text to be processed\n        while (remainder.length() > 0) \n        {\n            // The line we are trying to format\n            String currentLine = padding + remainder;\n            pos = findWrapPos(currentLine, width, 0);\n\n            if (pos == -1)\n            {\n                // The rest fits on the line\n                sb.append(rtrim(currentLine));\n                remainder = \"\"; // Done\n            }\n            else\n            {\n                // Calculate the next remainder\n                String nextRemainder = currentLine.substring(pos).trim();\n\n                // Check for infinite loop scenario: if the remainder appears unchanged\n                // after wrapping attempt. This usually means the next wrap position\n                // calculated by findWrapPos is within the padding, typically because\n                // the first word of the remainder is longer than the available line\n                // width (width - padding.length()).\n                if (nextRemainder.equals(remainder))\n                {\n                    // Force break at the first space or newline within the remainder\n                    // to prevent the infinite loop, even if it overflows the line.\n                    int breakPosInRemainder = -1;\n                    int firstSpace = remainder.indexOf(' ');\n                    int firstNewLine = remainder.indexOf('\\n');\n\n                    // Choose the earliest break point\n                    if (firstSpace != -1 && (firstNewLine == -1 || firstSpace < firstNewLine)) {\n                        breakPosInRemainder = firstSpace;\n                    } else {\n                        breakPosInRemainder = firstNewLine; // Might be -1 if neither exists\n                    }\n\n                    if (breakPosInRemainder != -1) {\n                         // Break at the first space/newline found in the remainder\n                         String textToAppend = padding + remainder.substring(0, breakPosInRemainder);\n                         sb.append(rtrim(textToAppend)).append(defaultNewLine);\n                         remainder = remainder.substring(breakPosInRemainder).trim();\n                    } else {\n                        // No space/newline found in remainder (single long word).\n                        // Append the whole line and stop. It will overflow, but avoids the loop.\n                        sb.append(rtrim(currentLine));\n                        remainder = \"\"; // Done\n                    }\n                }\n                else\n                {\n                    // Normal wrap: append the calculated part and update remainder\n                    sb.append(rtrim(currentLine.substring(0, pos))).append(defaultNewLine);\n                    remainder = nextRemainder;\n                }\n            }\n        }\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}