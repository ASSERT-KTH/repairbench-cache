{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF for the current entry.\n     * @throws IOException on error, including premature termination of the stream.\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // Check if we are already at or past the end of the current entry\n        if (entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Limit the number of bytes to read to the remaining bytes in the current entry\n        // and ensure numToRead is not negative.\n        numToRead = Math.min(numToRead, available());\n\n        // InputStream contract: if len is zero, then no bytes are read and 0 is returned.\n        if (numToRead <= 0) {\n            return 0;\n        }\n\n        // Read bytes from the underlying stream\n        int bytesRead = is.read(buf, offset, numToRead);\n\n        // Update the count of total bytes read from the underlying stream\n        // count() handles bytesRead == -1 gracefully.\n        count(bytesRead);\n\n        if (bytesRead == -1) {\n            // EOF from underlying stream.\n            // Since we passed the initial check (entryOffset < entrySize) and requested\n            // numToRead > 0 bytes, reaching EOF here signifies a truncated archive/entry.\n            hasHitEOF = true; // Mark that the stream ended prematurely.\n            throw new IOException(\"Unexpected EOF detected reading entry '\" + currEntry.getName()\n                                + \"'. Expected \" + entrySize + \" bytes, but received EOF after reading \"\n                                + entryOffset + \" bytes.\");\n        }\n\n        // If bytes were successfully read (bytesRead >= 0), update the offset within the current entry.\n        // Note: bytesRead can be 0 here if is.read returns 0, even if numToRead was > 0.\n        entryOffset += bytesRead;\n\n        // Return the number of bytes actually read.\n        return bytesRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}