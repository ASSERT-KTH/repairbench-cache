{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // 1. Check for entry completion or prior EOF detection\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // 2. Check for valid state\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // 3. Determine actual number of bytes to read (respecting entry boundary and request)\n        // available() returns (int) (entrySize - entryOffset)\n        numToRead = Math.min(numToRead, available());\n\n        // 4. Handle case where numToRead is 0 (caller requested 0 bytes)\n        // If available() was 0, the check at step 1 should have returned -1.\n        // So we only reach here if available() > 0 or caller requested 0.\n        if (numToRead == 0) {\n             return 0; // As per InputStream contract for numToRead = 0\n        }\n\n        // 5. Read from the underlying stream\n        int bytesRead = is.read(buf, offset, numToRead);\n\n        // 6. Handle result of read\n        if (bytesRead == -1) {\n            // Underlying stream EOF.\n            // Since we ensured numToRead > 0 based on available() before the read,\n            // hitting EOF here means the stream ended before the current entry's\n            // declared size was reached. This indicates a truncated archive.\n            if (entrySize > entryOffset) {\n                throw new IOException(\"Truncated TAR archive: Expected \" + entrySize\n                                      + \" bytes, but only received \" + entryOffset\n                                      + \" bytes for entry '\" + currEntry.getName() + \"'\");\n            }\n            // If entrySize == entryOffset, we reached EOF exactly at the boundary.\n            // Mark EOF for this entry and return -1.\n            hasHitEOF = true;\n            // Note: We should only reach here if available() was 0 initially,\n            // but step 1 should have caught that. Reaching here with bytesRead == -1\n            // and entrySize == entryOffset implies the underlying stream ended\n            // exactly at the boundary, which is valid EOF for the entry.\n            return -1;\n        } else {\n            // Successfully read some bytes.\n            count(bytesRead); // Update total bytes read from stream for metrics/limiting\n            entryOffset += bytesRead; // Update position within the current entry\n            // Return the number of bytes actually read in this call\n            return bytesRead;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}