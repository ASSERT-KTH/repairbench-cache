{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        if (length == 0) {\n            boolean zeroedData = true;\n            // Check some extra bytes \u2013 if all zero then ignore the LBS block\n            for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                if (buf.getByte(i) != 0) {\n                    zeroedData = false;\n                    break;\n                }\n            }\n            if (zeroedData) {\n                buf.skipBytes(Math.min(buf.readableBytes(), 45));\n            }\n            return false;\n        }\n    }\n\n    // Remember where the LBS fields begin so we can compute the expected block length.\n    int start = buf.readerIndex();\n\n    int mcc = buf.readUnsignedShort();\n    // For some messages the Mobile Network Code is 2 bytes, otherwise 1 byte.\n    boolean twoByteMnc = (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6);\n    int mnc = twoByteMnc ? buf.readUnsignedShort() : buf.readUnsignedByte();\n    int lac = (type == MSG_LBS_ALARM) ? buf.readInt() : buf.readUnsignedShort();\n    long cid;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cid = buf.readLong();\n    } else if (type == MSG_GPS_LBS_6) {\n        cid = buf.readUnsignedInt();\n    } else {\n        cid = buf.readUnsignedMedium();\n    }\n\n    // Calculate how many bytes we consumed while reading LBS fields.\n    int basicSize = buf.readerIndex() - start;\n    // Now compute the \u201cexpected\u201d size for the LBS block according to type:\n    int expected;\n    if (type == MSG_GPS_LBS_6) {\n        // mcc (2) + mnc (2) + lac (2) + cid (4) = 10\n        expected = 2 + 2 + 2 + 4;\n    } else if (type == MSG_GPS_LBS_7) {\n        // mcc (2) + mnc (1 or 2) + lac (2) + cid (8)\n        expected = 2 + (twoByteMnc ? 2 : 1) + 2 + 8;\n    } else if (type == MSG_LBS_ALARM) {\n        // mcc (2) + mnc (1 or 2) + lac (4) + cid (8)\n        expected = 2 + (twoByteMnc ? 2 : 1) + 4 + 8;\n    } else {\n        // default LBS format: mcc (2) + mnc (1 or 2) + lac (2) + cid (3)\n        expected = 2 + (twoByteMnc ? 2 : 1) + 2 + 3;\n    }\n\n    if (hasLength) {\n        // If the block length (from the header) isn\u2019t exactly what we expect,\n        // skip any extra bytes and do not decode LBS information.\n        if (length != expected) {\n            int remaining = length - basicSize;\n            if (remaining > 0 && remaining <= buf.readableBytes()) {\n                buf.skipBytes(remaining);\n            }\n            return false;\n        }\n    }\n\n    // Additionally, if any essential field is zero, consider the LBS data invalid.\n    if (mcc == 0 || lac == 0 || cid == 0) {\n        return false;\n    }\n\n    position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}