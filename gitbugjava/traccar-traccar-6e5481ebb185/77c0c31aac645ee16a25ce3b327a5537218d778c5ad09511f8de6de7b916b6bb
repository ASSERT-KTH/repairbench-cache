{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    // mark the start of the LBS\u2011data block (immediately after the length byte)\n    int dataStartIndex = buf.readerIndex();\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        if (length == 0) {\n            // no LBS data in this packet\n            return false;\n        }\n        // reset our data\u2011start to right after the length field\n        dataStartIndex = buf.readerIndex();\n    }\n\n    // parse one LBS record\n    int mcc = buf.readUnsignedShort();\n    int mnc;\n    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n        mnc = buf.readUnsignedShort();\n    } else {\n        mnc = buf.readUnsignedByte();\n    }\n    int lac;\n    if (type == MSG_LBS_ALARM) {\n        lac = buf.readInt();\n    } else {\n        lac = buf.readUnsignedShort();\n    }\n    long cid;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cid = buf.readLong();\n    } else if (type == MSG_GPS_LBS_6) {\n        cid = buf.readUnsignedInt();\n    } else {\n        cid = buf.readUnsignedMedium();\n    }\n\n    // set the cell\u2010tower network info\n    position.setNetwork(new Network(\n        CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n\n    // skip any remaining LBS bytes (in case there are multiple towers)\n    if (hasLength) {\n        int readBytes = buf.readerIndex() - dataStartIndex;\n        if (length > readBytes) {\n            buf.skipBytes(length - readBytes);\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}