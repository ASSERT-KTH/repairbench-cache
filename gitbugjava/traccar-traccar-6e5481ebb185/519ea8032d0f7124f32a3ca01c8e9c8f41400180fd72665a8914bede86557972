{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        if (length == 0) {\n            boolean zeroedData = true;\n            for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                if (buf.getByte(i) != 0) {\n                    zeroedData = false;\n                    break;\n                }\n            }\n            if (zeroedData) {\n                buf.skipBytes(Math.min(buf.readableBytes(), 45));\n            }\n            return false;\n        }\n\n        // Make sure the LBS block contains enough bytes\n        if (buf.readableBytes() < length) {\n            buf.skipBytes(buf.readableBytes());\n            return false;\n        }\n\n        // In order to compute the expected number of bytes, we need to inspect the first field.\n        // Mark the reader index so we can recompute later.\n        buf.markReaderIndex();\n        if (buf.readableBytes() < 2) {  // not enough for MCC\n            buf.resetReaderIndex();\n            buf.skipBytes(length);\n            return false;\n        }\n        int mccTemp = buf.readUnsignedShort();\n        // Based on the flag in MCC (or message type) we decide the MNC length.\n        int mncBytes = ((BitUtil.check(mccTemp, 15)) || type == MSG_GPS_LBS_6) ? 2 : 1;\n        // lac: normally 2 bytes; for alarm messages use 4 bytes.\n        int lacBytes = (type == MSG_LBS_ALARM) ? 4 : 2;\n        // cid: normally 3 bytes; for MSG_GPS_LBS_6 use 4, and for MSG_LBS_ALARM / MSG_GPS_LBS_7 use 8.\n        int cidBytes;\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            cidBytes = 8;\n        } else if (type == MSG_GPS_LBS_6) {\n            cidBytes = 4;\n        } else {\n            cidBytes = 3;\n        }\n        int expected = 2 /*mcc*/ + mncBytes + lacBytes + cidBytes;\n        buf.resetReaderIndex();\n        if (length < expected) {\n            buf.skipBytes(length);\n            return false;\n        }\n\n        // Now decode the fields from the LBS block.\n        int mcc = buf.readUnsignedShort();\n        int mnc;\n        if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n            mnc = buf.readUnsignedShort();\n        } else {\n            mnc = buf.readUnsignedByte();\n        }\n        int lac;\n        if (type == MSG_LBS_ALARM) {\n            lac = buf.readInt();\n        } else {\n            lac = buf.readUnsignedShort();\n        }\n        long cid;\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            cid = buf.readLong();\n        } else if (type == MSG_GPS_LBS_6) {\n            cid = buf.readUnsignedInt();\n        } else {\n            cid = buf.readUnsignedMedium();\n        }\n\n        // Skip any extra bytes present in the LBS block.\n        int consumed = expected;\n        if (length > consumed) {\n            buf.skipBytes(length - consumed);\n        }\n\n        position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n        return true;\n    }\n\n    // Without length field assume fixed LBS structure.\n    int mcc = buf.readUnsignedShort();\n    int mnc;\n    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n        mnc = buf.readUnsignedShort();\n    } else {\n        mnc = buf.readUnsignedByte();\n    }\n    int lac;\n    if (type == MSG_LBS_ALARM) {\n        lac = buf.readInt();\n    } else {\n        lac = buf.readUnsignedShort();\n    }\n    long cid;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cid = buf.readLong();\n    } else if (type == MSG_GPS_LBS_6) {\n        cid = buf.readUnsignedInt();\n    } else {\n        cid = buf.readUnsignedMedium();\n    }\n\n    position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}