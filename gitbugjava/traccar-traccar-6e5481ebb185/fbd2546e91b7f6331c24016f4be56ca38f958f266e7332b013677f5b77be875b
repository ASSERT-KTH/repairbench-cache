{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    int lengthFieldSize = 0;\n    // read LBS block length (1 or 2 bytes depending on type)\n    if (hasLength) {\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            length = buf.readUnsignedShort();\n            lengthFieldSize = 2;\n        } else {\n            length = buf.readUnsignedByte();\n            lengthFieldSize = 1;\n        }\n        if (length == 0) {\n            // in some devices a zero\u2010length LBS block is just padding\n            boolean zeroedData = true;\n            int start = buf.readerIndex();\n            for (int i = start + 9; i < start + 45 && i < buf.writerIndex(); i++) {\n                if (buf.getByte(i) != 0) {\n                    zeroedData = false;\n                    break;\n                }\n            }\n            if (zeroedData) {\n                buf.skipBytes(Math.min(buf.readableBytes(), 45));\n            }\n            return false;\n        }\n    }\n\n    // parse MCC/MNC/LAC/CID\n    int start = buf.readerIndex();\n    int mcc = buf.readUnsignedShort();\n    int mnc;\n    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n        mnc = buf.readUnsignedShort();\n    } else {\n        mnc = buf.readUnsignedByte();\n    }\n    int lac;\n    if (type == MSG_LBS_ALARM) {\n        lac = buf.readInt();\n    } else {\n        lac = buf.readUnsignedShort();\n    }\n    long cid;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cid = buf.readLong();\n    } else if (type == MSG_GPS_LBS_6) {\n        cid = buf.readUnsignedInt();\n    } else {\n        cid = buf.readUnsignedMedium();\n    }\n\n    position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n\n    // skip any remaining bytes in the LBS block\n    if (hasLength) {\n        int readBytes = buf.readerIndex() - start;\n        int toSkip = length - readBytes;\n        if (toSkip > 0) {\n            buf.skipBytes(toSkip);\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}