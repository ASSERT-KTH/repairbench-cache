{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        if (length == 0) {\n            boolean zeroedData = true;\n            for (int i = buf.readerIndex(); i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                if (buf.getByte(i) != 0) {\n                    zeroedData = false;\n                    break;\n                }\n            }\n            if (zeroedData) {\n                buf.skipBytes(Math.min(buf.readableBytes(), 45));\n            }\n            return false;\n        }\n    }\n\n    try {\n        int mcc = buf.readUnsignedShort();\n        int mnc = BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6 ? buf.readUnsignedShort() : buf.readUnsignedByte();\n        int lac = type == MSG_LBS_ALARM ? buf.readInt() : buf.readUnsignedShort();\n\n        long cid;\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            cid = buf.readLong();\n        } else if (type == MSG_GPS_LBS_6) {\n            cid = buf.readUnsignedInt();\n        } else {\n            cid = buf.readUnsignedMedium();\n        }\n\n        position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n\n        if (length > 9) {\n            buf.skipBytes(length - 9);\n        }\n    } catch (IndexOutOfBoundsException e) {\n        // Handle possible buffer underflow\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}