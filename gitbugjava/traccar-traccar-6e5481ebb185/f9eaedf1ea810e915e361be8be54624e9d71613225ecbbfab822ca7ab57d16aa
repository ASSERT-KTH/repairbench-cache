{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n    \n    int length = 0;\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        if (length == 0) {\n            // If length is zero, check if the following bytes are all zeros.\n            boolean zeroedData = true;\n            for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                if (buf.getByte(i) != 0) {\n                    zeroedData = false;\n                    break;\n                }\n            }\n            if (zeroedData) {\n                buf.skipBytes(Math.min(buf.readableBytes(), 45));\n            }\n            return false;\n        }\n        // Peek at the first two bytes (mcc) to determine the expected LBS length.\n        if (buf.readableBytes() < 2) {\n            buf.skipBytes(length);\n            return false;\n        }\n        int mccPeek = buf.getUnsignedShort(buf.readerIndex());\n        // In our protocol the mnc is read as two bytes if the mcc\u2019s high bit is set or if type indicates GPS_LBS_6.\n        boolean twoDigitMnc = BitUtil.check(mccPeek, 15) || type == MSG_GPS_LBS_6;\n        int expectedLength;\n        if (type == MSG_LBS_ALARM) {\n            // mcc (2) + mnc (2 if twoDigit, else 1) + lac (4) + cid (8)\n            expectedLength = 2 + (twoDigitMnc ? 2 : 1) + 4 + 8;\n        } else if (type == MSG_GPS_LBS_6) {\n            // mcc (2) + mnc (always 2 for this type) + lac (2) + cid (4)\n            expectedLength = 2 + 2 + 2 + 4;\n        } else if (type == MSG_GPS_LBS_7) {\n            // mcc (2) + mnc (1) + lac (2) + cid (8)\n            expectedLength = 2 + 1 + 2 + 8;\n        } else {\n            // Default: mcc (2) + mnc (assumed 2-byte) + lac (2) + cid (3)\n            expectedLength = 2 + 2 + 2 + 3;\n        }\n        // If the provided length is too short the message isn\u2019t valid.\n        if (length < expectedLength) {\n            buf.skipBytes(length);\n            return false;\n        }\n    }\n\n    int mcc = buf.readUnsignedShort();\n    int mnc;\n    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n        mnc = buf.readUnsignedShort();\n    } else {\n        mnc = buf.readUnsignedByte();\n    }\n    \n    int lac;\n    if (type == MSG_LBS_ALARM) {\n        lac = buf.readInt();\n    } else {\n        lac = buf.readUnsignedShort();\n    }\n    \n    long cid;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cid = buf.readLong();\n    } else if (type == MSG_GPS_LBS_6) {\n        cid = buf.readUnsignedInt();\n    } else {\n        cid = buf.readUnsignedMedium();\n    }\n    \n    position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n    \n    if (hasLength) {\n        int expectedLength;\n        // Recalculate expected length now that we\u2019ve consumed mcc.\n        boolean twoDigitMnc = BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6;\n        if (type == MSG_LBS_ALARM) {\n            expectedLength = 2 + (twoDigitMnc ? 2 : 1) + 4 + 8;\n        } else if (type == MSG_GPS_LBS_6) {\n            expectedLength = 2 + 2 + 2 + 4;\n        } else if (type == MSG_GPS_LBS_7) {\n            expectedLength = 2 + 1 + 2 + 8;\n        } else {\n            expectedLength = 2 + 2 + 2 + 3;\n        }\n        if (length > expectedLength) {\n            buf.skipBytes(length - expectedLength);\n        }\n    }\n    \n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}