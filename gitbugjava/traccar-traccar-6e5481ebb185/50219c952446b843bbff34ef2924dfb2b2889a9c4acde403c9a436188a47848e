{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        if (length == 0) {\n            boolean zeroedData = true;\n            // The buggy code incorrectly checked some future bytes, skipping LBS when there *is* valid MCC/MNC/LAC/CID.\n            // Instead, for LBS to be treated as zero, ALL *next* LBS bytes should be zero.\n            // The usual size of LBS = 9 bytes (mcc:2, mnc:1, lac:2, cid:3), for certain types more.\n            // We'll conservatively check the next 9 bytes; if they're all zero, skip this LBS.\n            int size = 9;\n            boolean allZero = true;\n            int max = Math.min(buf.readerIndex() + size, buf.writerIndex());\n            for (int i = buf.readerIndex(); i < max; i++) {\n                if (buf.getByte(i) != 0) {\n                    allZero = false;\n                    break;\n                }\n            }\n            if (allZero) {\n                buf.skipBytes(Math.min(buf.readableBytes(), size));\n                return false;\n            }\n            // Not all zero: proceed (it's real LBS data even if length is 0)\n        }\n    }\n\n    int mcc = buf.readUnsignedShort();\n    int mnc;\n    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n        mnc = buf.readUnsignedShort();\n    } else {\n        mnc = buf.readUnsignedByte();\n    }\n    int lac;\n    if (type == MSG_LBS_ALARM) {\n        lac = buf.readInt();\n    } else {\n        lac = buf.readUnsignedShort();\n    }\n    long cid;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cid = buf.readLong();\n    } else if (type == MSG_GPS_LBS_6) {\n        cid = buf.readUnsignedInt();\n    } else {\n        cid = buf.readUnsignedMedium();\n    }\n\n    position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n\n    if (length > 9) {\n        buf.skipBytes(length - 9);\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}