{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    // mark where LBS\u2010block starts (after the length byte)\n    int startIndex = buf.readerIndex();\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        // no LBS data\n        if (length == 0) {\n            return false;\n        }\n        // if the entire block is zeroes, skip it and drop\n        boolean zeroed = true;\n        int endIndex = Math.min(buf.readerIndex() + length, buf.writerIndex());\n        for (int i = buf.readerIndex(); i < endIndex; i++) {\n            if (buf.getByte(i) != 0) {\n                zeroed = false;\n                break;\n            }\n        }\n        if (zeroed) {\n            buf.skipBytes(length);\n            return false;\n        }\n    }\n\n    // read MCC\n    int mcc = buf.readUnsignedShort();\n    // read MNC (2 bytes if high\u2010bit flag or type\u00a06, otherwise 1 byte)\n    int mnc;\n    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n        mnc = buf.readUnsignedShort();\n    } else {\n        mnc = buf.readUnsignedByte();\n    }\n    // read LAC\n    int lac = (type == MSG_LBS_ALARM)\n            ? buf.readInt()            // 4 bytes for alarm LBS\n            : buf.readUnsignedShort(); // 2 bytes otherwise\n    // read CID\n    long cid;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cid = buf.readLong();         // 8 bytes\n    } else if (type == MSG_GPS_LBS_6) {\n        cid = buf.readUnsignedInt();  // 4 bytes\n    } else {\n        cid = buf.readUnsignedMedium(); // 3 bytes\n    }\n\n    position.setNetwork(new Network(\n            CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n\n    // skip any remaining bytes in the LBS block\n    if (hasLength) {\n        int bytesRead = buf.readerIndex() - startIndex;\n        int toSkip = length - bytesRead;\n        if (toSkip > 0) {\n            buf.skipBytes(toSkip);\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}