{
    "generation": "    private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n        int lbsLength = 0;\n        if (hasLength) {\n            lbsLength = buf.readUnsignedByte();\n            if (lbsLength == 0) {\n                // Original logic for length == 0:\n                // This case implies a specific structure where LBS data might be all zeros.\n                // It checks a 36-byte region after an assumed 9-byte core.\n                // If that region is zero, it skips 45 bytes. If not zero, it skips 0 bytes.\n                // The \"skip 0 bytes\" if !zeroedData is suspicious as it leaves the buffer\n                // unconsumed for an LBS block that's effectively declared invalid by returning false.\n                // A more robust fix might always skip the expected block (e.g., 45 bytes).\n                // However, to minimize unrelated changes, this specific logic is retained for now.\n                boolean zeroedData = true;\n                // readerIndex is after lbsLength byte. Check starts 9 bytes from current position.\n                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                    if (buf.getByte(i) != 0) {\n                        zeroedData = false;\n                        break;\n                    }\n                }\n                if (zeroedData) {\n                    buf.skipBytes(Math.min(buf.readableBytes(), 45));\n                }\n                // If !zeroedData, no bytes are skipped by this block.\n                return false;\n            }\n        }\n\n        // Ensure there's enough data for MCC (2 bytes)\n        if (buf.readableBytes() < 2) {\n            return false; // Not enough data to read MCC\n        }\n        int mcc = buf.readUnsignedShort();\n\n        // If MCC is 0 or 0xFFFF, it often indicates invalid/unavailable LBS data.\n        if (mcc == 0 || mcc == 0xFFFF) {\n            // Skip the rest of the LBS data block.\n            if (hasLength && lbsLength > 0) {\n                // lbsLength is the total size of the LBS data block. We've read 2 bytes for MCC.\n                int bytesToSkip = lbsLength - 2;\n                if (bytesToSkip > 0) {\n                    buf.skipBytes(Math.min(buf.readableBytes(), bytesToSkip));\n                }\n            } else if (!hasLength) {\n                // No explicit length provided. Estimate MNC, LAC, CID sizes and skip them.\n                int mncSizeToSkip;\n                if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) { // BitUtil.check is true for 0xFFFF, false for 0\n                    mncSizeToSkip = 2;\n                } else {\n                    mncSizeToSkip = 1;\n                }\n                int lacSizeToSkip = (type == MSG_LBS_ALARM) ? 4 : 2;\n                int cidSizeToSkip;\n                if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n                    cidSizeToSkip = 8;\n                } else if (type == MSG_GPS_LBS_6) {\n                    cidSizeToSkip = 4;\n                } else {\n                    cidSizeToSkip = 3;\n                }\n                buf.skipBytes(Math.min(buf.readableBytes(), mncSizeToSkip + lacSizeToSkip + cidSizeToSkip));\n            }\n            return false; // Signal that LBS data is invalid/not processed\n        }\n\n        // MCC is valid, proceed to parse MNC, LAC, CID\n        int mnc;\n        if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n            mnc = buf.readUnsignedShort();\n        } else {\n            mnc = buf.readUnsignedByte();\n        }\n        int lac;\n        if (type == MSG_LBS_ALARM) {\n            lac = buf.readInt();\n        } else {\n            lac = buf.readUnsignedShort();\n        }\n        long cid;\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            cid = buf.readLong();\n        } else if (type == MSG_GPS_LBS_6) {\n            cid = buf.readUnsignedInt();\n        } else {\n            cid = buf.readUnsignedMedium();\n        }\n\n        position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n\n        // If lbsLength was provided, skip any remaining bytes in the LBS block\n        // beyond what was consumed for MCC, MNC, LAC, CID.\n        if (hasLength && lbsLength > 0) {\n            int consumedBytes = 2; // MCC\n            consumedBytes += (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) ? 2 : 1; // MNC\n            consumedBytes += (type == MSG_LBS_ALARM) ? 4 : 2; // LAC\n            if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n                consumedBytes += 8; // CID\n            } else if (type == MSG_GPS_LBS_6) {\n                consumedBytes += 4; // CID\n            } else {\n                consumedBytes += 3; // CID\n            }\n\n            if (lbsLength > consumedBytes) {\n                int bytesToSkip = lbsLength - consumedBytes;\n                buf.skipBytes(Math.min(buf.readableBytes(), bytesToSkip));\n            }\n            // If lbsLength < consumedBytes, it implies a format error in the packet.\n            // We've parsed the fields based on their types; nothing more to skip.\n        }\n\n        return true;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}