{
    "generation": "    /**\n     * Test for the equality of two Complex objects.\n     * <p>\n     * If both the real and imaginary parts of two Complex numbers\n     * are exactly the same, and neither is <code>Double.NaN</code>, the two\n     * Complex objects are considered to be equal.</p>\n     * <p>\n     * All <code>NaN</code> values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to <code>Double.NaN</code>, the complex number is equal to \n     * <code>Complex.NaN</code>.</p>\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if\n     *         object is null, not an instance of Complex, or\n     *         not equal to this Complex instance\n     * \n     */\n    public boolean equals(Object other) {\n        if (this == other) { \n            return true; // Identity check\n        }\n        if (other instanceof Complex) { // Type check\n            Complex rhs = (Complex) other;\n            // Check based on NaN status first, as Javadoc requires NaN==NaN\n            // (meaning Complex(NaN, y).equals(Complex(x, NaN)) is true)\n            if (this.isNaN() || rhs.isNaN()) {\n                // If either is NaN, they are equal iff both are NaN\n                return this.isNaN() && rhs.isNaN();\n            } else {\n                // Neither is NaN. Compare components numerically.\n                // Use standard double comparison '==' which treats +0.0 and -0.0 as equal.\n                // This is safe because NaN cases are already handled above (NaN == NaN is false).\n                // The original code used Double.doubleToRawLongBits which distinguishes +0.0 and -0.0,\n                // causing the test failure when Complex(0.0, -1.0) was compared to Complex(-0.0, -1.0).\n                return (real == rhs.getReal()) && (imaginary == rhs.getImaginary());\n            }\n        }\n        // Not an instance of Complex or null (implicit from instanceof)\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}