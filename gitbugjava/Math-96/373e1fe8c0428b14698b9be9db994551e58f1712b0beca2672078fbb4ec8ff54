{
    "generation": "    /**\n     * Test for the equality of two Complex objects.\n     * <p>\n     * If both the real and imaginary parts of two Complex numbers\n     * are exactly the same, and neither is <code>Double.NaN</code>, the two\n     * Complex objects are considered to be equal.</p>\n     * <p>\n     * All <code>NaN</code> values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to <code>Double.NaN</code>, the complex number is equal to\n     * <code>Complex.NaN</code>.</p>\n     * <p>\n     * Note that this implementation handles <code>+0.0</code> and\n     * <code>-0.0</code> appropriately. Specifically, <code>+0.0</code>\n     * and <code>-0.0</code> are considered equal in both the real and\n     * imaginary parts. For example, <code>Complex(0.0, 1.0)</code>\n     * is equal to <code>Complex(-0.0, 1.0)</code>.</p>\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if\n     *         object is null, not an instance of Complex, or\n     *         not equal to this Complex instance\n     *\n     */\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true; // Same object instance\n        }\n        if (other instanceof Complex) {\n            Complex rhs = (Complex) other;\n            if (rhs.isNaN()) {\n                // If other is NaN, this must also be NaN to be equal\n                return this.isNaN();\n            } else if (this.isNaN()) {\n                 // If this is NaN, but other is not, they are not equal.\n                 return false;\n            } else {\n                // Neither is NaN, compare real and imaginary parts.\n                // Use == comparison for doubles, which treats +0.0 and -0.0 as equal.\n                // This aligns with the behavior of Double.equals() but is simpler.\n                // The NaN case is handled above, so == works fine for finite values.\n                return (real == rhs.getReal()) && (imaginary == rhs.getImaginary());\n            }\n        }\n        // other is null or not an instance of Complex\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}