{
    "generation": "    /**\n     * Replace the provide statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     */\n    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        // replacementNode is already null and the processor will ignore it.\n        if (candidateDefinition != null && !NodeUtil.isNamespaceDecl(candidateDefinition)) {\n          // If there is a candidate definition, convert it to a namespace placeholder.\n          replacementNode = candidateDefinition;\n          // TODO(b/16156439): Make this preserve the full original candidate definition,\n          // including the RHS and any JSdoc. This doesn't matter for 'goog' which is special,\n          // but could matter for other top-level namespaces.\n          replacementNode.putBooleanProp(Node.IS_NAMESPACE, true);\n        }\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.isQualifiedName()) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n\n            Node varNode;\n            // If the name is simple ('a = {};') create 'var a = {};'\n            if (nameNode.isName()) {\n              nameNode.addChildToFront(valueNode);\n              varNode = new Node(Token.VAR, nameNode);\n            } else {\n              // If the name is qualified ('a.b = {};') create 'var a = {}; a.b = {};'\n              // The parent namespace ('a') should have been created already. Find its VAR node.\n              ProvidedName parentName =\n                  providedNames.get(namespace.substring(0, namespace.lastIndexOf('.')));\n              Preconditions.checkState(parentName != null, \"Parent namespace %s not provided.\", parentName);\n              Preconditions.checkState(parentName.replacementNode != null,\n                  \"Parent namespace %s should have been replaced.\", parentName.namespace);\n              // Create 'a.b = value;'\n              Node assign = new Node(Token.ASSIGN, nameNode, valueNode);\n              // Wrap in EXPR_RESULT statement\n              varNode = new Node(Token.EXPR_RESULT, assign);\n              // Add it after the parent VAR node.\n              parentName.replacementNode.getParent().addChildAfter(varNode, parentName.replacementNode);\n              // The 'replacementNode' for 'a.b' will be this new EXPR_RESULT node.\n            }\n\n            varNode.copyInformationFrom(candidateDefinition);\n            // Replace the original expression statement.\n            candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);\n            // Transfer the JSDoc to the new node. For VAR, attach to the NAME node;\n            // for EXPR_RESULT, attach to the EXPR_RESULT itself.\n            Node nodeForJsDoc = varNode.isVar() ? varNode.getFirstChild() : varNode;\n            nodeForJsDoc.setJSDocInfo(assignNode.getJSDocInfo());\n            varNode.putBooleanProp(Node.IS_NAMESPACE, true);\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        } else {\n           // Definition is already acceptable (like a VAR or function)\n           replacementNode.putBooleanProp(Node.IS_NAMESPACE, true);\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n\n        // If the node is null, maybe there was an error. Return.\n        if (replacementNode == null) {\n          return;\n        }\n\n        if (firstModule == minimumModule) {\n          // Declare the variable in the first module that provided it.\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.indexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine. Add it to the beginning of the module.\n            // We add to the beginning because the name might be used directly\n            // by code lower down.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToFront(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName, \"Parent namespace %s not provided.\", namespace);\n\n            // Make sure the parent namespace has been processed.\n            Preconditions.checkState(parentName.replacementNode != null,\n                \"Parent namespace %s should have been replaced.\", parentName.namespace);\n\n            Node parentNode = parentName.replacementNode;\n            Node parentScript = parentNode.getParent();\n\n            Preconditions.checkNotNull(parentScript, \"Parent node %s should have parent\", parentNode);\n            parentScript.addChildAfter(replacementNode, parentNode);\n          }\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}