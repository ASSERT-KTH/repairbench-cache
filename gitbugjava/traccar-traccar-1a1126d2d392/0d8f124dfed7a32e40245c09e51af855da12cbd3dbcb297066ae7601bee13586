{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    String type = values[index++].substring(5);\n\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // model\n\n    Network network = new Network();\n\n    // Defensive: cell info (7 cells, each 6-7 fields, but sometimes missing)\n    int maxCellInfoFields = Math.min(7, (values.length - index) / 6);\n    for (int i = 0; i < 7 && index + 5 < values.length; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index += 1; // timing advance\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n\n    if (index < values.length) {\n        String archiveValue = values[index++];\n        Boolean archive = null;\n        if (archiveValue.equals(\"0\")) {\n            archive = true;\n        } else if (archiveValue.equals(\"1\")) {\n            archive = false;\n        }\n        position.set(Position.KEY_ARCHIVE, archive);\n    }\n\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n\n    // Defensive skip for collaborative network (if present)\n    if (index < values.length && values[index].length() == 3) {\n        index += 1; // collaborative network\n    }\n\n    // Defensive: check enough values for date time\n    if (index + 1 < values.length && !values[index].isEmpty() && !values[index + 1].isEmpty()) {\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        position.setTime(dateFormat.parse(values[index++] + values[index++]));\n    } else {\n        // Not enough data for time, or blanks\n        return null;\n    }\n\n    if (index < values.length) {\n        try {\n            position.setLatitude(Double.parseDouble(values[index++]));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        try {\n            position.setLongitude(Double.parseDouble(values[index++]));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        try {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        try {\n            position.setCourse(Double.parseDouble(values[index++]));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n        } catch (Throwable error) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        String valid = values[index++];\n        position.setValid(valid.equals(\"1\"));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}