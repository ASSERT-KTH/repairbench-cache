{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    // Use whole string if it\u2019s short (e.g. \"ALT\") or strip the header if longer (e.g. \"ST410STT\")\n    String rawType = values[index++];\n    String type = rawType.length() > 5 ? rawType.substring(5) : rawType;\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    // Firmware version and skip model field\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index++; // skip model\n\n    Network network = new Network();\n\n    // Read network/cell tower information (7 sets, each 6 fields)\n    for (int i = 0; i < 7; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index++; // skip timing advance\n\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n    position.setNetwork(network);\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    // The archive field: if the value is \"0\" we mark it true, otherwise leave it null\n    position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    // Sometimes a collaborative network field with exactly three characters is sent;\n    // skip it only if it is present (and not empty)\n    if (!values[index].isEmpty() && values[index].length() == 3) {\n        index++;\n    }\n\n    // Date and time. In some messages these fields can be empty.\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    String dateField = values[index++];\n    String timeField = values[index++];\n    if (!dateField.isEmpty() && !timeField.isEmpty()) {\n        position.setTime(dateFormat.parse(dateField + timeField));\n    }\n\n    position.setLatitude(Double.parseDouble(values[index++]));\n    position.setLongitude(Double.parseDouble(values[index++]));\n    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    position.setCourse(Double.parseDouble(values[index++]));\n\n    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n\n    position.setValid(values[index++].equals(\"1\"));\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}