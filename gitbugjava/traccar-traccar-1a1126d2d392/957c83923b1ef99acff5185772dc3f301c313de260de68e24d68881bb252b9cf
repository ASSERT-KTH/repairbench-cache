{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    String type = values[index++].substring(5);\n\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // model\n\n    Network network = new Network();\n\n    for (int i = 0; i < 7; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index += 1; // timing advance\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    // skip optional collaborative network if present (e.g., length 3)\n    if (index < values.length && values[index].length() == 3) {\n        index += 1;\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    String dateStr = \"\";\n    String timeStr = \"\";\n\n    if (index + 1 < values.length) {\n        // Expected case: date and time present\n        dateStr = values[index++];\n        timeStr = values[index++];\n    } else if (index < values.length) {\n        // Sometimes only date/time combined, or missing\n        String datetime = values[index++];\n        if (datetime.length() >= 14) { // e.g., 20221228113305\n            dateStr = datetime.substring(0, 8);\n            timeStr = datetime.substring(8, 14);\n            timeStr = timeStr.substring(0, 2) + \":\" + timeStr.substring(2, 4) + \":\" + timeStr.substring(4, 6);\n        } else {\n            // fallback: missing or invalid date/time\n            position.setTime(new Date());\n        }\n    } else {\n        position.setTime(new Date());\n    }\n\n    if (!dateStr.isEmpty() && !timeStr.isEmpty()) {\n        try {\n            position.setTime(dateFormat.parse(dateStr + timeStr));\n        } catch (ParseException e) {\n            position.setTime(new Date());\n        }\n    }\n\n    if (index + 3 <= values.length) {\n        position.setLatitude(Double.parseDouble(values[index++]));\n        position.setLongitude(Double.parseDouble(values[index++]));\n        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    } else {\n        return position;\n    }\n\n    if (index < values.length) {\n        position.setCourse(Double.parseDouble(values[index++]));\n    }\n    if (index < values.length) {\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n    }\n    if (index < values.length) {\n        position.setValid(values[index++].equals(\"1\"));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}