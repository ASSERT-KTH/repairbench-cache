{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    // Use the full header if it\u2019s short, otherwise assume first 5 characters are a prefix.\n    String header = values[index++];\n    String type = header.length() > 5 ? header.substring(5) : header;\n\n    // We only process STT or ALT messages in this method.\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // Skip model token\n\n    Network network = new Network();\n\n    // Extended (network) part: expect exactly 7 groups of 6 tokens each.\n    for (int i = 0; i < 7; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index += 1; // Skip timing advance token\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    // If the next token is exactly 3 characters, skip it (collaborative network field)\n    if (values[index].length() == 3) {\n        index += 1;\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    // Get date and time parts.\n    String datePart = values[index++];\n    String timePart = values[index++];\n\n    // Only parse fix date and following location fields if both date and time are non-empty.\n    if (!datePart.isEmpty() && !timePart.isEmpty()) {\n        position.setTime(dateFormat.parse(datePart + timePart));\n        position.setLatitude(Double.parseDouble(values[index++]));\n        position.setLongitude(Double.parseDouble(values[index++]));\n        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n        position.setCourse(Double.parseDouble(values[index++]));\n\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n        position.setValid(values[index++].equals(\"1\"));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}