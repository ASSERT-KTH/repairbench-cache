{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n\n    int index = 0;\n\n    String type = values[index++].substring(5);\n\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // model\n\n    Network network = new Network();\n\n    // Robustly handle number of cell towers and avoid unparseable or missing fields\n    for (int i = 0; i < 7; i++) {\n        // Not enough values left? Break.\n        if (index + 4 > values.length) {\n            break;\n        }\n        int cid, mcc, mnc, lac = 0, rssi = 0;\n        try {\n            cid = Integer.parseInt(values[index++]);\n            mcc = Integer.parseInt(values[index++]);\n            mnc = Integer.parseInt(values[index++]);\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; // timing advance\n            if (cid > 0) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        } catch (Exception error) {\n            // Defensive: skip invalid/missing cell fields\n            break;\n        }\n    }\n\n    position.setNetwork(network);\n\n    // Battery\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n\n    // Archive\n    if (index < values.length) {\n        String archive = values[index++];\n        // Accept both 1 and 0 as values, older protocol sometimes is simply \"1\"\n        if (archive.equals(\"0\")) {\n            position.set(Position.KEY_ARCHIVE, true);\n        } else if (archive.equals(\"1\")) {\n            position.set(Position.KEY_ARCHIVE, false);\n        } else {\n            position.set(Position.KEY_ARCHIVE, null);\n        }\n    }\n\n    // Index\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n\n    // Status\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n\n    // If collaborative network present, skip one field\n    if (index < values.length && values[index].length() == 3) {\n        index += 1;\n    }\n\n    // Date/time: two fields expected: date (yyyyMMdd), time (HH:mm:ss)\n    String date = index < values.length ? values[index++] : \"\";\n    String time = index < values.length ? values[index++] : \"\";\n\n    if (!date.isEmpty() && !time.isEmpty()) {\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        position.setTime(dateFormat.parse(date + time));\n    } else {\n        // Defensive: If missing date/time, do not throw exception, use current time or set null\n        position.setTime(new Date());\n    }\n\n    // Latitude, Longitude\n    if (index < values.length) {\n        try {\n            position.setLatitude(Double.parseDouble(values[index++]));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        try {\n            position.setLongitude(Double.parseDouble(values[index++]));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n    // Speed (in kph, must convert to knots), Course\n    if (index < values.length) {\n        try {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n    if (index < values.length) {\n        try {\n            position.setCourse(Double.parseDouble(values[index++]));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n    // Satellites\n    if (index < values.length) {\n        try {\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n        } catch (Exception ex) {\n            index++;\n        }\n    }\n    // Valid\n    if (index < values.length) {\n        String valid = values[index++];\n        if (valid.equals(\"1\")) {\n            position.setValid(true);\n        } else {\n            position.setValid(false);\n        }\n    } else {\n        position.setValid(false);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}