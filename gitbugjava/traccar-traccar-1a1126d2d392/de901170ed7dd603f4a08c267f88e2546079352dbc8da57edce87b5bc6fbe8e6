{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    String type = values[index++].substring(5);\n\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // model\n\n    Network network = new Network();\n\n    // \u9650\u5236\u6700\u59277\u4e2a\u57fa\u7ad9\u6761\u76ee\u540c\u65f6\u68c0\u67e5\u5269\u4f59\u5b57\u6bb5\n    for (int i = 0; i < 7; i++) {\n        if (index + 5 >= values.length) {\n            break;\n        }\n        \n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index]);\n            lac = Integer.parseInt(values[index + 1]);\n            index += 2;\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        \n        index += 1; // timing advance\n\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    position.set(Position.KEY_ARCHIVE, \"0\".equals(values[index++]) ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    if (values[index].length() == 3) {\n        index += 1; // collaborative network\n    }\n\n    // \u786e\u4fdd\u65f6\u95f4\u5b57\u6bb5\u5b58\u5728\n    String datePart = values[index++];\n    String timePart = values[index++];\n    position.setTime(new SimpleDateFormat(\"yyyyMMddHH:mm:ss\").parse(datePart + timePart));\n\n    position.setLatitude(Double.parseDouble(values[index++]));\n    position.setLongitude(Double.parseDouble(values[index++]));\n    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    position.setCourse(Double.parseDouble(values[index++]));\n\n    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n\n    position.setValid(\"1\".equals(values[index++]));\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}