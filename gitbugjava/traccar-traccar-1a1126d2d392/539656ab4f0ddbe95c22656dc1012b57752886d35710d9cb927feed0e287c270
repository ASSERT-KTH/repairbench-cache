{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    // Instead of blindly taking substring(5) we first get the header and then either take the suffix\n    // or use it as\u2010is. Also, allow several known types.\n    String header = values[index++];\n    String type = header.length() > 5 ? header.substring(5) : header;\n    if (!(type.equals(\"STT\") || type.equals(\"ALT\") || type.equals(\"UEX\") ||\n          type.equals(\"BLE\") || type.equals(\"EMG\") || type.equals(\"ST910\"))) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // skip model\n\n    // The original decoder expects an \"extended\" format with cell tower data.\n    // If there are enough tokens we assume the extended (tower) part; otherwise we skip it.\n    // Extended messages will have many tokens (typically >40) while minimal messages have far fewer.\n    if (values.length - index > 30) {\n        // Expect 7 cell tower records, each consisting of 3 values, plus 2 values (rssi and lac)\n        // for the first record and in reverse order for the others, plus one timing advance per record.\n        // That means each record consumes 6 tokens.\n        for (int i = 0; i < 7; i++) {\n            int cid = Integer.parseInt(values[index++]);\n            int mcc = Integer.parseInt(values[index++]);\n            int mnc = Integer.parseInt(values[index++]);\n            int lac, rssi;\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; // skip timing advance\n            if (cid > 0) {\n                Network network = position.getNetwork();\n                if (network == null) {\n                    network = new Network();\n                    position.setNetwork(network);\n                }\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        }\n    }\n\n    // In any case, attempt to read these common fields.\n    // If the extended cell tower fields were not present (minimal message),\n    // the index will be at a lower value and subsequent tokens will match the minimal format.\n    if (values.length - index < 8) {\n        // not enough tokens for the remaining expected fields\n        return position;\n    }\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    // Some messages include a collaborative network field. If the next token has length 3\n    // (for example, \"016\"), then we skip it.\n    if (index < values.length && values[index].length() == 3) {\n        index += 1;\n    }\n\n    // Concatenate date and time tokens. Check they are not empty.\n    String datePart = (index < values.length ? values[index++].trim() : \"\");\n    String timePart = (index < values.length ? values[index++].trim() : \"\");\n    if (datePart.isEmpty() || timePart.isEmpty()) {\n        throw new ParseException(\"Empty date/time\", index);\n    }\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    position.setTime(dateFormat.parse(datePart + timePart));\n\n    if (index < values.length) {\n        position.setLatitude(Double.parseDouble(values[index++]));\n    }\n    if (index < values.length) {\n        position.setLongitude(Double.parseDouble(values[index++]));\n    }\n    if (index < values.length) {\n        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    }\n    if (index < values.length) {\n        position.setCourse(Double.parseDouble(values[index++]));\n    }\n\n    if (index < values.length) {\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n    }\n\n    if (index < values.length) {\n        position.setValid(\"1\".equals(values[index++]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}