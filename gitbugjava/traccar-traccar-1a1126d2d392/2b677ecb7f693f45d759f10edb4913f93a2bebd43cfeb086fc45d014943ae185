{
    "generation": "private Position decode4(Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    // Instead of assuming the incoming header is always at least 5 characters,\n    // extract the type from the last three characters if the header is longer than three,\n    // otherwise use the header as is.\n    String header = values[index++];\n    String type = header.length() > 3 ? header.substring(header.length() - 3) : header;\n\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // skip model\n\n    Network network = new Network();\n\n    for (int i = 0; i < 7; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index += 1; // skip timing advance\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    // Some messages include an extra collaborative network token of length 3.\n    // If the next token\u2019s length is exactly 3, skip it.\n    if (values[index].length() == 3) {\n        index++;\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    // Trim the date and time tokens so that stray whitespace or empty tokens do not cause a parse error.\n    String datePart = values[index++].trim();\n    String timePart = values[index++].trim();\n    String dateTime = datePart + timePart;\n    if (dateTime.isEmpty()) {\n        // Fallback if no valid date/time is provided.\n        position.setTime(new Date());\n    } else {\n        position.setTime(dateFormat.parse(dateTime));\n    }\n\n    position.setLatitude(Double.parseDouble(values[index++]));\n    position.setLongitude(Double.parseDouble(values[index++]));\n    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    position.setCourse(Double.parseDouble(values[index++]));\n\n    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n\n    position.setValid(values[index++].equals(\"1\"));\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}