{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    // message type (STT or ALT)\n    String type = values[index++].substring(5);\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    // device session\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // prepare position\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    // firmware version and model\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index++; // skip model\n\n    // read up to 7 cell towers\n    Network network = new Network();\n    for (int i = 0; i < 7; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index++; // skip timing advance\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n    position.setNetwork(network);\n\n    // battery, archive flag, message index, status\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    // optional collaborative network (3\u2010char field)\n    if (index < values.length && values[index].length() == 3) {\n        index++;\n    }\n\n    // if there's no date/time following, this is a status\u2010only message\n    if (index + 1 >= values.length\n            || values[index].isEmpty()\n            || values[index + 1].isEmpty()) {\n        return position;\n    }\n\n    // parse timestamp\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    position.setTime(dateFormat.parse(values[index++] + values[index++]));\n\n    // parse GPS data\n    position.setLatitude(Double.parseDouble(values[index++]));\n    position.setLongitude(Double.parseDouble(values[index++]));\n    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    position.setCourse(Double.parseDouble(values[index++]));\n\n    // satellites and validity\n    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n    position.setValid(values[index++].equals(\"1\"));\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}