{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    // If the header includes a numeric prefix (e.g. \"ST410STT\"), remove it;\n    // otherwise (e.g. \"STT\" or \"ST910\") use the header as is.\n    String header = values[index++];\n    String type = header.length() > 5 ? header.substring(5) : header;\n\n    // Only process messages we support (for example, STT, ALT and ST910)\n    if (!(type.equals(\"STT\") || type.equals(\"ALT\") || type.equals(\"ST910\"))) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // skip model\n\n    Network network = new Network();\n\n    for (int i = 0; i < 7; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            // For the first cell tower, the order is: rssi then lac.\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            // For additional towers, the order is: lac then rssi.\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index += 1; // skip timing advance\n\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    if (values[index].length() == 3) {\n        index += 1; // skip collaborative network field if present\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    // If both date and time fields are non-empty, parse the fix time\n    // Otherwise, leave the time unset (or set it to null)\n    if (index + 1 < values.length \n            && !values[index].trim().isEmpty() \n            && !values[index + 1].trim().isEmpty()) {\n        String datePart = values[index++].trim();\n        String timePart = values[index++].trim();\n        position.setTime(dateFormat.parse(datePart + timePart));\n\n        // Expecting positional data after the date/time only if available.\n        // Make sure there are enough tokens and they are not empty.\n        if (index + 5 <= values.length \n                && !values[index].trim().isEmpty() \n                && !values[index + 1].trim().isEmpty()) {\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Double.parseDouble(values[index++]));\n    \n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            position.setValid(values[index++].equals(\"1\"));\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}