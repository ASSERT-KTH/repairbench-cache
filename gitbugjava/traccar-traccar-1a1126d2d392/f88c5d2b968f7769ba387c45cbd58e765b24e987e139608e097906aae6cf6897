{
    "generation": "    private Position decode4(\n            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n        int index = 0;\n\n        String type = values[index++].substring(5);\n\n        if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_TYPE, type);\n\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        index += 1; // model\n\n        Network network = new Network();\n\n        for (int i = 0; i < 7; i++) {\n            int cid = Integer.parseInt(values[index++]);\n            int mcc = Integer.parseInt(values[index++]);\n            int mnc = Integer.parseInt(values[index++]);\n            int lac, rssi;\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; // timing advance\n            if (cid > 0) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        }\n\n        position.setNetwork(network);\n\n        String batteryStr = values[index++];\n        if (!batteryStr.isEmpty()) {\n            position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));\n        }\n\n        String archiveStr = values[index++];\n        position.set(Position.KEY_ARCHIVE, archiveStr.equals(\"0\") ? true : null);\n\n        String keyIndexStr = values[index++];\n        if (!keyIndexStr.isEmpty()) {\n            position.set(Position.KEY_INDEX, Integer.parseInt(keyIndexStr));\n        }\n\n        String statusStr = values[index++];\n        if (!statusStr.isEmpty()) {\n            position.set(Position.KEY_STATUS, Integer.parseInt(statusStr));\n        }\n\n        if (values[index].length() == 3) {\n            index += 1; // collaborative network\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        String datePart = values[index++];\n        String timePart = values[index++];\n        if (!datePart.isEmpty() && !timePart.isEmpty()) {\n            position.setTime(dateFormat.parse(datePart + timePart));\n        }\n\n        String latStr = values[index++];\n        if (!latStr.isEmpty()) {\n            position.setLatitude(Double.parseDouble(latStr));\n        }\n\n        String lonStr = values[index++];\n        if (!lonStr.isEmpty()) {\n            position.setLongitude(Double.parseDouble(lonStr));\n        }\n\n        String speedStr = values[index++];\n        if (!speedStr.isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedStr)));\n        }\n\n        String courseStr = values[index++];\n        if (!courseStr.isEmpty()) {\n            position.setCourse(Double.parseDouble(courseStr));\n        }\n\n        String satellitesStr = values[index++];\n        if (!satellitesStr.isEmpty()) {\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesStr));\n        }\n\n        String validStr = values[index++];\n        position.setValid(validStr.equals(\"1\"));\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}