{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    String type = values[index++].substring(5);\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    // firmware version\n    if (index < values.length) {\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n    }\n    // skip model\n    index++;\n\n    // parse up to 7 cell towers\n    Network network = new Network();\n    for (int i = 0; i < 7 && index + 5 < values.length; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index++; // timing advance\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n    position.setNetwork(network);\n\n    // battery\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));\n    }\n    index++;\n\n    // archive flag\n    if (index < values.length) {\n        position.set(Position.KEY_ARCHIVE, values[index].equals(\"0\") ? true : null);\n    }\n    index++;\n\n    // message index\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index]));\n    }\n    index++;\n\n    // status / input\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index]));\n    }\n    index++;\n\n    // skip collaborative network if present (length 3)\n    if (index < values.length && values[index].length() == 3) {\n        index++;\n    }\n\n    // if no date/time fields, return with just attributes\n    if (index + 1 >= values.length || values[index].isEmpty() || values[index + 1].isEmpty()) {\n        return position;\n    }\n\n    // parse date and time\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    position.setTime(dateFormat.parse(values[index] + values[index + 1]));\n    index += 2;\n\n    // latitude\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setLatitude(Double.parseDouble(values[index]));\n    }\n    index++;\n\n    // longitude\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setLongitude(Double.parseDouble(values[index]));\n    }\n    index++;\n\n    // speed\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));\n    }\n    index++;\n\n    // course\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setCourse(Double.parseDouble(values[index]));\n    }\n    index++;\n\n    // satellites\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));\n    }\n    index++;\n\n    // valid\n    if (index < values.length) {\n        position.setValid(values[index].equals(\"1\"));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}