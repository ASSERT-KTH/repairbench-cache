{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    // Use the entire field if it is short, otherwise strip the first five characters.\n    String typeField = values[index++];\n    String type = typeField.length() > 5 ? typeField.substring(5) : typeField;\n\n    if (!\"STT\".equals(type) && !\"ALT\".equals(type)) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // skip model\n\n    Network network = new Network();\n\n    for (int i = 0; i < 7; i++) {\n        int cid = Integer.parseInt(values[index++]);\n        int mcc = Integer.parseInt(values[index++]);\n        int mnc = Integer.parseInt(values[index++]);\n        int lac, rssi;\n        if (i == 0) {\n            rssi = Integer.parseInt(values[index++]);\n            lac = Integer.parseInt(values[index++]);\n        } else {\n            lac = Integer.parseInt(values[index++]);\n            rssi = Integer.parseInt(values[index++]);\n        }\n        index += 1; // skip timing advance\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    // If the archive field is \"0\", set to true; otherwise leave it null.\n    position.set(Position.KEY_ARCHIVE, \"0\".equals(values[index++]) ? true : null);\n    position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n    // Optional collaborative network field: if present and exactly 3 characters, then skip it.\n    if (index < values.length && values[index].length() == 3) {\n        index += 1;\n    }\n\n    // Parse date and time. If either token is missing or empty, use current time.\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    if (index + 1 < values.length) {\n        String dateToken = values[index++].trim();\n        String timeToken = values[index++].trim();\n        if (dateToken.isEmpty() || timeToken.isEmpty()) {\n            position.setTime(new Date());\n        } else {\n            position.setTime(dateFormat.parse(dateToken + timeToken));\n        }\n    } else {\n        position.setTime(new Date());\n    }\n\n    position.setLatitude(Double.parseDouble(values[index++]));\n    position.setLongitude(Double.parseDouble(values[index++]));\n    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    position.setCourse(Double.parseDouble(values[index++]));\n\n    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n\n    position.setValid(\"1\".equals(values[index++]));\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}