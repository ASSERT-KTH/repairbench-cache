{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    String type = values[index++].substring(5);\n\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // model\n\n    Network network = new Network();\n\n    // Adjusted: Don't try to parse empty or missing cell fields\n    for (int i = 0; i < 7; i++) {\n        // If not enough values left or field is empty, break\n        if (index >= values.length || values[index].isEmpty()) {\n            // skip remaining cell towers\n            // Still advance the index by correct amount to keep parsing in sync\n            for (; i < 7; i++) {\n                // On protocol, each cell: cid, mcc, mnc, (lac,rssi), timing advance = 6 values per cell\n                index += 6;\n            }\n            break;\n        }\n        int cid = 0, mcc = 0, mnc = 0, lac = 0, rssi = 0;\n        try {\n            cid = Integer.parseInt(values[index++]);\n        } catch (Exception e) {\n            index++;\n            continue;\n        }\n        try {\n            mcc = Integer.parseInt(values[index++]);\n        } catch (Exception e) {\n            index++;\n            continue;\n        }\n        try {\n            mnc = Integer.parseInt(values[index++]);\n        } catch (Exception e) {\n            index++;\n            continue;\n        }\n\n        if (i == 0) {\n            try {\n                rssi = Integer.parseInt(values[index++]);\n            } catch (Exception e) {\n                index++;\n            }\n            try {\n                lac = Integer.parseInt(values[index++]);\n            } catch (Exception e) {\n                index++;\n            }\n        } else {\n            try {\n                lac = Integer.parseInt(values[index++]);\n            } catch (Exception e) {\n                index++;\n            }\n            try {\n                rssi = Integer.parseInt(values[index++]);\n            } catch (Exception e) {\n                index++;\n            }\n        }\n        index += 1; // timing advance\n\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    // Defensive: check if enough fields remain before parse\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n    } else {\n        index++;\n    }\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n    } else {\n        index++;\n    }\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n    } else {\n        index++;\n    }\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n    } else {\n        index++;\n    }\n\n    // Defensive: skip collaborative network field if it's present and 3 chars\n    if (index < values.length && values[index].length() == 3) {\n        index += 1;\n    }\n\n    // Defensive: only parse date/time if present and not empty\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    if (index + 1 < values.length && !values[index].isEmpty() && !values[index + 1].isEmpty()) {\n        position.setTime(dateFormat.parse(values[index++] + values[index++]));\n    } else {\n        // Not enough data for date/time; bail out with a null position\n        return null;\n    }\n\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setLatitude(Double.parseDouble(values[index++]));\n    } else {\n        index++;\n    }\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setLongitude(Double.parseDouble(values[index++]));\n    } else {\n        index++;\n    }\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n    } else {\n        index++;\n    }\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setCourse(Double.parseDouble(values[index++]));\n    } else {\n        index++;\n    }\n\n    if (index < values.length && !values[index].isEmpty()) {\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n    } else {\n        index++;\n    }\n\n    if (index < values.length && !values[index].isEmpty()) {\n        position.setValid(values[index++].equals(\"1\"));\n    } else {\n        index++;\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}