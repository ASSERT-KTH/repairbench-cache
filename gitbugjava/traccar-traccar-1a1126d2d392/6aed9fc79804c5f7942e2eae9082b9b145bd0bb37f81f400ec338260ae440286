{
    "generation": "private Position decode4(\n        Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n    int index = 0;\n\n    String type = values[index++].substring(5);\n\n    if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n    position.set(Position.KEY_TYPE, type);\n\n    position.set(Position.KEY_VERSION_FW, values[index++]);\n    index += 1; // model\n\n    Network network = new Network();\n\n    for (int i = 0; i < 7; i++) {\n        int cid = 0, mcc = 0, mnc = 0, lac = 0, rssi = 0;\n\n        // Safely check array bounds before parsing\n        if (index < values.length) cid = parseIntSafe(values[index++]);\n        if (index < values.length) mcc = parseIntSafe(values[index++]);\n        if (index < values.length) mnc = parseIntSafe(values[index++]);\n        if (i == 0) {\n            if (index < values.length) rssi = parseIntSafe(values[index++]);\n            if (index < values.length) lac = parseIntSafe(values[index++]);\n        } else {\n            if (index < values.length) lac = parseIntSafe(values[index++]);\n            if (index < values.length) rssi = parseIntSafe(values[index++]);\n        }\n        index += 1; // timing advance\n        if (cid > 0) {\n            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n        }\n    }\n\n    position.setNetwork(network);\n\n    // Defensive parse for optional trailing fields\n    position.set(Position.KEY_BATTERY, parseDoubleSafe(values, index++));\n    Boolean archive = null;\n    if (index < values.length) {\n        String archiveVal = values[index++];\n        archive = archiveVal.equals(\"0\") ? true : null;\n    }\n    position.set(Position.KEY_ARCHIVE, archive);\n\n    if (index < values.length)\n        position.set(Position.KEY_INDEX, parseIntSafe(values[index++]));\n    if (index < values.length)\n        position.set(Position.KEY_STATUS, parseIntSafe(values[index++]));\n\n    // Check for optional collaborative network length field\n    if (index < values.length && values[index].length() == 3) {\n        index += 1; // collaborative network\n    }\n\n    // Defensive: ensure enough fields remain for date\n    if (index + 1 >= values.length) {\n        return position; // or return null if you prefer fail fast\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    String dateStr = values[index++] + values[index++];\n    position.setTime(dateFormat.parse(dateStr));\n\n    if (index < values.length)\n        position.setLatitude(parseDoubleSafe(values, index++));\n    if (index < values.length)\n        position.setLongitude(parseDoubleSafe(values, index++));\n    if (index < values.length)\n        position.setSpeed(UnitsConverter.knotsFromKph(parseDoubleSafe(values, index++)));\n    if (index < values.length)\n        position.setCourse(parseDoubleSafe(values, index++));\n\n    if (index < values.length)\n        position.set(Position.KEY_SATELLITES, parseIntSafe(values[index++]));\n\n    if (index < values.length)\n        position.setValid(values[index++].equals(\"1\"));\n\n    return position;\n}\n\n// Utility safe parse methods\nprivate static int parseIntSafe(String value) {\n    try {\n        return Integer.parseInt(value);\n    } catch (Exception e) {\n        return 0;\n    }\n}\nprivate static double parseDoubleSafe(String[] values, int index) {\n    if (index < values.length) {\n        try {\n            return Double.parseDouble(values[index]);\n        } catch (Exception e) {\n            return 0.0;\n        }\n    }\n    return 0.0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}