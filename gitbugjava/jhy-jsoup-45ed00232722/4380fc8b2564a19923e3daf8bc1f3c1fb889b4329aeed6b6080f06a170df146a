{
    "generation": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u);\n        try {\n            // properly encode the URL by breaking it into parts and encoding each component\n            String protocol = u.getProtocol();\n            String authority = u.getAuthority();\n            String path = u.getPath();\n            String query = u.getQuery();\n            String fragment = u.getRef();\n\n            // encode path segments (but not slashes)\n            String encodedPath = path != null ?\n                Arrays.stream(path.split(\"/\"))\n                    .mapsegment -> {\n                        if (segment.isEmpty()) return segment;\n                        try {\n                            return URLEncoder.encode(segment, \"UTF-8\")\n                                .replace(\"+\", \"%20\") // URLEncoder uses + for space but we want %20\n                                .replace(\"%2F\", \"/\"); // don't encode slashes\n                        } catch (UnsupportedEncodingException e) {\n                            return segment; // fallback\n                        }\n                    })\n                    .collect(Collectors.joining(\"/\")) : \"\";\n\n            // encode query parameters\n            String encodedQuery = query != null ?\n                Arrays.stream(query.split(\"&\"))\n                    .map(param -> {\n                        String[] parts = param.split(\"=\");\n                        try {\n                            String key = parts.length > 0 ? URLEncoder.encode(parts[0], \"UTF-8\").replace(\"+\", \"%20\") : \"\";\n                            String value = parts.length > 1 ? URLEncoder.encode(parts[1], \"UTF-8\").replace(\"+\", \"%20\") : \"\";\n                            return key + (value.isEmpty() ? \"\" : \"=\" + value);\n                        } catch (UnsupportedEncodingException e) {\n                            return param;\n                        }\n                    })\n                    .collect(Collectors.joining(\"&\")) : null;\n\n            // encode fragment\n            String encodedFragment = fragment != null ?\n                URLEncoder.encode(fragment, \"UTF-8\")\n                    .replace(\"+\", \"%20\")\n                    .replace(\"%23\", \"#\") : null;\n\n            // reconstruct the URL\n            String reconstructedUrl = String.format(\"%s://%s%s%s%s%s\",\n                protocol,\n                authority,\n                path != null && !path.isEmpty() ? \"/\" + (encodedPath.startsWith(\"/\") ? encodedPath.substring(1) : encodedPath) : \"\",\n                path != null && path.endsWith(\"/\") ? \"/\" : \"\",\n                encodedQuery != null ? \"?\" + encodedQuery : \"\",\n                encodedFragment != null ? \"#\" + encodedFragment : \"\");\n\n            return new URL(reconstructedUrl);\n        } catch (Exception e) {\n            // give up and return the original input\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}