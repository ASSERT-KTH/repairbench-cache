{
    "generation": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u);\n        try {\n            // Extract components from the URL. These components are in their *raw* form,\n            // meaning special characters like space, [, ] are not yet percent-encoded.\n            String protocol = u.getProtocol();\n            String userInfo = u.getUserInfo();\n            String host = u.getHost();\n            int port = u.getPort(); // -1 if not specified\n            String path = u.getPath();\n            String query = u.getQuery();\n            String fragment = u.getRef(); // getRef() returns the fragment\n\n            // Construct a URI from its components.\n            // The URI constructor automatically applies percent-encoding to characters\n            // that are illegal or reserved in the path, query, and fragment components\n            // as per RFC 2396 / RFC 3986 rules. This is the key to correctly encoding\n            // characters like spaces, [, and ] in the path or query.\n            URI uri = new URI(protocol, userInfo, host, port, path, query, fragment);\n\n            // Convert the URI to its ASCII string form (which is percent-encoded)\n            // and then create a new URL from this correctly encoded string.\n            return new URL(uri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            // If there's an issue constructing the URI or URL (e.g., highly malformed\n            // components that even the URI constructor can't handle),\n            // give up and return the original input URL.\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}