{
    "generation": "static URL encodeUrl(URL u) {\n    u = punyUrl(u);\n    try {\n        String scheme = u.getProtocol();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n        String fragment = u.getRef();\n        \n        StringBuilder urlStr = new StringBuilder();\n        urlStr.append(scheme).append(\"://\").append(host);\n        if (port != -1)\n            urlStr.append(\":\").append(port);\n        \n        if (path != null && !path.isEmpty()) {\n            String[] segments = path.split(\"/\");\n            for (int i = 0; i < segments.length; i++) {\n                if (i == 0 && segments[i].isEmpty()) {\n                    urlStr.append(\"/\");\n                    continue;\n                }\n                if (i > 0 || (i == 0 && !segments[i].isEmpty()))\n                    urlStr.append(\"/\");\n                urlStr.append(URLEncoder.encode(segments[i], \"UTF-8\")\n                        .replace(\"+\", \"%20\")\n                        .replace(\"%2F\", \"/\")\n                        .replace(\"%3A\", \":\")\n                        .replace(\"%40\", \"@\"));\n            }\n        }\n        \n        if (query != null) {\n            urlStr.append(\"?\").append(query);\n        }\n        \n        if (fragment != null) {\n            urlStr.append(\"#\").append(fragment);\n        }\n        \n        return new URL(urlStr.toString());\n    } catch (Exception e) {\n        // give up and return the original input\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}