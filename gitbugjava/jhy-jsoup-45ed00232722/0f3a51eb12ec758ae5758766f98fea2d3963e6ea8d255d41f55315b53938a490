{
    "generation": "    static URL encodeUrl(URL u) {\n        u = punyUrl(u);\n        try {\n            // properly encode all components of the URL\n            String protocol = u.getProtocol();\n            String authority = u.getAuthority();\n            String path = u.getPath();\n            String query = u.getQuery();\n            String ref = u.getRef();\n\n            // encode each component separately\n            String encodedPath = encodeComponent(path);\n            String encodedQuery = encodeComponent(query);\n            String encodedRef = encodeComponent(ref);\n\n            // reconstruct the URL with encoded components\n            String urlS = protocol + \"://\" + authority + encodedPath;\n            if (encodedQuery != null && !encodedQuery.isEmpty()) {\n                urlS += \"?\" + encodedQuery;\n            }\n            if (encodedRef != null && !encodedRef.isEmpty()) {\n                urlS += \"#\" + encodedRef;\n            }\n\n            return new URL(urlS);\n        } catch (MalformedURLException e) {\n            // give up and return the original input\n            return u;\n        }\n    }\n\n    private static String encodeComponent(String component) {\n        if (component == null) {\n            return null;\n        }\n        try {\n            return URLEncoder.encode(component, \"UTF-8\")\n                .replace(\"%2F\", \"/\") // don't encode slashes\n                .replace(\"%3A\", \":\") // don't encode colons\n                .replace(\"%3F\", \"?\") // don't encode question marks\n                .replace(\"%3D\", \"=\") // don't encode equals\n                .replace(\"%26\", \"&\"); // don't encode ampersands\n        } catch (UnsupportedEncodingException e) {\n            return component;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}