{
    "generation": "import java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.IDN; // Required for punyUrl implementation detail (assumed)\n\n/**\n * Helper static methods for URL interactions. Visible for testing.\n */\nclass UrlHelper { // Dummy class to make the static method compile standalone\n    // Assume punyUrl exists and works correctly, handling IDN conversion.\n    // Example minimal implementation for context:\n    static URL punyUrl(URL u) {\n        if (u == null || u.getHost() == null || u.getHost().matches(\"[\\u0000-\\u007F]+\")) // Already ASCII\n            return u;\n        try {\n            String asciiHost = IDN.toASCII(u.getHost());\n            // Reconstruct URL with ASCII host\n            return new URL(u.getProtocol(), asciiHost, u.getPort(), u.getFile());\n        } catch (MalformedURLException | IllegalArgumentException e) {\n            // Log? Or just return original on error\n            return u;\n        }\n    }\n\n\n    /**\n     * Creates a new URL by encoding the input URL. Handles Punycode domains, spaces, and other characters that need\n     * encoding. Falls back to the original URL if encoding fails.\n     * @param u the input URL to encode.\n     * @return the encoded URL, or the original URL if encoding failed.\n     */\n    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u); // Ensure host is ASCII (Punycode if needed) before component extraction\n        try {\n            // Use the URI multi-argument constructor which properly encodes the components (path, query, fragment)\n            // This handles spaces, brackets, and other illegal characters correctly.\n            URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), u.getRef());\n            return uri.toURL();\n        } catch (URISyntaxException | MalformedURLException e) {\n            // Log the error? System.err.println(\"Failed to encode URL '\" + u + \"': \" + e);\n            // Fallback: return the original URL if encoding fails.\n            return u;\n        } catch (IllegalArgumentException e) {\n            // The URI constructor can also throw IllegalArgumentException for severe syntax issues\n            // Log the error? System.err.println(\"Failed to encode URL '\" + u + \"' (Illegal Argument): \" + e);\n             return u;\n        }\n    }\n} // End dummy class",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}