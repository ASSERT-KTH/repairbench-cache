{
    "generation": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u); // Apply punycode transformation first\n        try {\n            // Deconstruct the URL into its components.\n            // URL.getProtocol(), getAuthority(), getPath(), getQuery(), getRef()\n            // return an unencoded (decoded) version of the respective component.\n            String protocol = u.getProtocol();\n            String authority = u.getAuthority(); \n            String path = u.getPath();      \n            String query = u.getQuery();    \n            String fragment = u.getRef();   \n\n            // Construct a new URI from the unencoded components.\n            // The URI constructor public URI(String scheme, String authority, String path, String query, String fragment)\n            // will correctly encode any illegal characters within each component according to RFC 2396 and RFC 2732.\n            // For example, spaces in the path will be encoded to %20, '[' to %5B, ']' to %5D.\n            URI uri = new URI(protocol, authority, path, query, fragment);\n            \n            // Convert the URI to its ASCII string form. This string is fully\n            // percent-encoded as required for a valid URI reference.\n            // Then, create a new URL from this string.\n            return new URL(uri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            // If encoding fails for any reason (e.g., components form an invalid URI,\n            // or the resulting string is not a valid URL),\n            // fall back to returning the (punyUrl-processed) input URL.\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}