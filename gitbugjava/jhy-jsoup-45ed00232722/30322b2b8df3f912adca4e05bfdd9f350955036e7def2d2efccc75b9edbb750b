{
    "generation": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u); // u might be a new URL object if punyUrl modified it\n        try {\n            // Decompose the URL into its components and use the URI constructor\n            // that takes these components. This constructor will correctly encode\n            // the path, query, and fragment.\n            // The host is also handled (e.g., for Punycode conversion if it wasn't already done by punyUrl,\n            // or if punyUrl only returns the original u on error).\n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                u.getHost(),\n                u.getPort(),\n                u.getPath(),    // Will be automatically %-encoded by URI constructor\n                u.getQuery(),   // Will be automatically %-encoded by URI constructor\n                u.getFragment() // Will be automatically %-encoded by URI constructor\n            );\n            // toASCIIString() ensures that the URI is represented as a US-ASCII string,\n            // e.g., hostnames are in Punycode if they contain non-ASCII characters,\n            // and path/query/fragment are appropriately percent-encoded.\n            return new URL(uri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            // Fallback: return the URL as it was after punyUrl, if encoding fails.\n            // This matches the original behavior.\n            // Optionally, one might log the exception 'e' here.\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}