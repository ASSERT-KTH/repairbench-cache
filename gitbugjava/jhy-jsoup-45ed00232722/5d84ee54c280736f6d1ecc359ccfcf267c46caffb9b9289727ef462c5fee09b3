{
    "generation": "static URL encodeUrl(URL u) {\n    u = punyUrl(u);\n    try {\n        // Correct way to encode URLs, handling all components properly\n        String protocol = u.getProtocol();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n        String ref = u.getRef();\n\n        // Encode each component separately to handle special characters\n        String encodedPath = URLEncoder.encode(path, \"UTF-8\").replace(\"+\", \"%20\");\n        String encodedQuery = query != null ? URLEncoder.encode(query, \"UTF-8\").replace(\"+\", \"%20\") : null;\n        String encodedRef = ref != null ? URLEncoder.encode(ref, \"UTF-8\").replace(\"+\", \"%20\") : null;\n\n        // Reconstruct the URL with encoded components\n        StringBuilder encodedUrl = new StringBuilder();\n        encodedUrl.append(protocol).append(\"://\").append(host);\n        if (port != -1) {\n            encodedUrl.append(\":\").append(port);\n        }\n        encodedUrl.append(encodedPath);\n        if (encodedQuery != null) {\n            encodedUrl.append(\"?\").append(encodedQuery);\n        }\n        if (encodedRef != null) {\n            encodedUrl.append(\"#\").append(encodedRef);\n        }\n\n        return new URL(encodedUrl.toString());\n    } catch (UnsupportedEncodingException | MalformedURLException e) {\n        // Give up and return the original input\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}