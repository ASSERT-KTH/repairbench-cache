{
    "generation": "    static URL encodeUrl(URL u) {\n        u = punyUrl(u);\n        try {\n            // properly encode the URL components\n            String protocol = u.getProtocol();\n            String authority = u.getAuthority();\n            String path = u.getPath();\n            String query = u.getQuery();\n            String fragment = u.getFragment();\n\n            // Encode path components\n            path = encodePath(path);\n            // Encode query components if present\n            if (query != null) {\n                query = encodeQuery(query);\n            }\n\n            // Reconstruct the URL string\n            StringBuilder urlS = new StringBuilder();\n            urlS.append(protocol).append(\"://\").append(authority);\n            if (path != null) {\n                urlS.append(path);\n            }\n            if (query != null) {\n                urlS.append(\"?\").append(query);\n            }\n            if (fragment != null) {\n                urlS.append(\"#\").append(fragment);\n            }\n\n            return new URL(urlS.toString());\n        } catch (MalformedURLException e) {\n            // give up and return the original input\n            return u;\n        }\n    }\n\n    private static String encodePath(String path) {\n        if (path == null) return null;\n        try {\n            String[] segments = path.split(\"/\");\n            StringBuilder encodedPath = new StringBuilder();\n            for (String segment : segments) {\n                if (!segment.isEmpty()) {\n                    encodedPath.append(\"/\")\n                            .append(URLEncoder.encode(segment, \"UTF-8\")\n                                    .replace(\"+\", \"%20\")\n                                    .replace(\"%3A\", \":\")\n                                    .replace(\"%5B\", \"[\")\n                                    .replace(\"%5D\", \"]\"));\n                } else if (encodedPath.length() == 0 || !encodedPath.toString().endsWith(\"/\")) {\n                    encodedPath.append(\"/\");\n                }\n            }\n            return encodedPath.length() == 0 ? \"/\": encodedPath.toString();\n        } catch (UnsupportedEncodingException e) {\n            return path; // fall back to original if encoding fails\n        }\n    }\n\n    private static String encodeQuery(String query) {\n        if (query == null) return null;\n        try {\n            String[] pairs = query.split(\"&\");\n            StringBuilder encodedQuery = new StringBuilder();\n            for (int i = 0; i < pairs.length; i++) {\n                String[] keyValue = pairs[i].split(\"=\");\n                if (keyValue.length > 0) {\n                    String key = keyValue[0];\n                    String value = keyValue.length > 1 ? keyValue[1] : \"\";\n                    if (i > 0) encodedQuery.append(\"&\");\n                    encodedQuery.append(URLEncoder.encode(key, \"UTF-8\"))\n                               .append(\"=\")\n                               .append(URLEncoder.encode(value, \"UTF-8\"));\n                }\n            }\n            return encodedQuery.toString();\n        } catch (UnsupportedEncodingException e) {\n            return query; // fall back to original if encoding fails\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}