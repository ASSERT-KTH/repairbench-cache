{
    "generation": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u); // u is now the result of punyUrl\n        try {\n            // URI's multi-argument constructor performs proper encoding of components.\n            // URL.getPath(), getQuery(), getRef() return decoded components.\n            // URL.getUserInfo() returns undecoded user-info.\n            // URL.getHost() returns the host name (which punyUrl should have handled for IDNs).\n            final URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                u.getHost(),\n                u.getPort(),\n                u.getPath(),\n                u.getQuery(),\n                u.getRef()\n            );\n            // uri.toASCIIString() ensures that the URI is represented using US-ASCII characters.\n            // For example, if the host was an IDN, punyUrl should have converted it to Punycode,\n            // and toASCIIString would ensure it's in that form.\n            // The URI constructor itself should have percent-encoded illegal characters\n            // in path, query, fragment, and other components as necessary.\n            return new URL(uri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            // In case of errors during URI instantiation or new URL creation,\n            // return the URL as it was after punyUrl processing.\n            // This matches the original behavior of giving up and returning the input.\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}