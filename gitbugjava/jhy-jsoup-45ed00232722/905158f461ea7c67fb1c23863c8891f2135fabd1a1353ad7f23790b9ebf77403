{
    "generation": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u); // Apply punycode for internationalized domain names if needed\n        try {\n            // Extract components from the URL. These methods return decoded strings.\n            String protocol = u.getProtocol();\n            String userInfo = u.getUserInfo(); // Returns null if no user info\n            String host = u.getHost();\n            int port = u.getPort(); // Returns -1 if port is not set or is default for protocol\n\n            // getPath() returns the decoded path. It can be \"\" for URLs like \"http://example.com\"\n            // or \"/\" for \"http://example.com/\". The URI constructor handles this.\n            String path = u.getPath();\n            String query = u.getQuery(); // Returns null if no query string\n            String fragment = u.getRef(); // Returns null if no fragment (ref)\n\n            // Construct a URI using its components. This constructor automatically handles\n            // the necessary percent-encoding for characters within the path, query,\n            // and fragment components that are not allowed unencoded by URI syntax rules.\n            URI uri = new URI(protocol, userInfo, host, port, path, query, fragment);\n\n            // Convert the properly constructed and encoded URI back to a URL.\n            // toASCIIString() ensures all necessary characters are percent-encoded.\n            return new URL(uri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            // If any error occurs during URI construction or URL conversion,\n            // give up and return the original input URL, as per the original logic.\n            return u;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}