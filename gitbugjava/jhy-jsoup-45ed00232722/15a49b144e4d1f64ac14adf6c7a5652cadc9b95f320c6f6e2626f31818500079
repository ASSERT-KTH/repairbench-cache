{
    "generation": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u);\n        try {\n            // First, try to convert URL to URI directly.\n            // This is the simplest and most correct way if the URL string\n            // already conforms to URI syntax (e.g., no unencoded spaces or brackets).\n            return u.toURI().toURL();\n        } catch (URISyntaxException | MalformedURLException e) {\n            // If the direct conversion fails (e.g., URISyntaxException due to unencoded\n            // characters like ' ', '[', ']' in the URL path/query/fragment),\n            // then we need to reconstruct the URI by encoding its components.\n            try {\n                String protocol = u.getProtocol();\n                String host = u.getHost();\n                int port = u.getPort(); // -1 if not specified\n                String path = u.getPath();\n                String query = u.getQuery();\n                String fragment = u.getRef();\n                String userInfo = u.getUserInfo(); // Can be null\n\n                URI uri;\n                // Use the URI constructor that takes components.\n                // This constructor correctly encodes characters in path, query, and fragment.\n                // For example, \"foo bar/[One]\" in path will be encoded to \"foo%20bar/%5BOne%5D\".\n                if (port == -1) {\n                    uri = new URI(protocol, userInfo, host, path, query, fragment);\n                } else {\n                    uri = new URI(protocol, userInfo, host, port, path, query, fragment);\n                }\n                return new URL(uri.toASCIIString());\n            } catch (URISyntaxException | MalformedURLException e2) {\n                // If even the component-based construction fails,\n                // give up and return the original input URL, as per original logic.\n                return u;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}