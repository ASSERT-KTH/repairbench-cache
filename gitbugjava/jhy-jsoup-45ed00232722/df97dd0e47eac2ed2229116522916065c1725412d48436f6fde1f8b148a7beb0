{
    "generation": "import java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\n\n// Assume HttpConnection class structure and existence of punyUrl method\nclass HttpConnection {\n    // Assume punyUrl is defined elsewhere in this class\n    // static URL punyUrl(URL u) { ... IDN handling ... }\n    // Placeholder for compilation if needed:\n    static URL punyUrl(URL u) { return u; }\n\n\n    /**\n     * Encodes the URL components (path, query, fragment) as necessary, following RFC-3986 norms.\n     * Handles International Domain Names (IDN) via {@link #punyUrl(URL)}.\n     * @param u The URL to encode.\n     * @return An encoded URL, or the original URL if encoding failed.\n     */\n    static URL encodeUrl(URL u) {\n        // Apply punycode for IDN hosts first.\n        // Store the result in a new variable to avoid confusion and keep the original parameter `u` unchanged.\n        URL punyU = punyUrl(u);\n\n        try {\n            // Use the multi-argument URI constructor which properly encodes the components.\n            // URL component getters (getPath, getQuery, getRef) return *decoded* strings.\n            // These decoded strings are then correctly encoded by the URI constructor.\n            String path = punyU.getPath();\n            String query = punyU.getQuery();\n            String fragment = punyU.getRef();\n\n            // Special handling for the path: If the original URL had an empty path\n            // (e.g., \"http://example.com\"), URL.getPath() returns \"\". Passing \"\" to the\n            // URI constructor can result in \"/\" being added. Passing null preserves the absence of the path.\n            String pathToUse = (path != null && path.isEmpty()) ? null : path;\n\n            URI uri = new URI(\n                punyU.getProtocol(),\n                punyU.getUserInfo(),\n                punyU.getHost(),\n                punyU.getPort(),\n                pathToUse, // Use potentially null path\n                query,     // Pass decoded query, URI constructor encodes it\n                fragment   // Pass decoded fragment, URI constructor encodes it\n            );\n\n            // Convert the correctly constructed and encoded URI back to a URL.\n            return uri.toURL();\n        } catch (URISyntaxException | MalformedURLException e) {\n            // Fallback behavior from the original code:\n            // If URI/URL construction fails (e.g., due to fundamentally invalid components\n            // that even the multi-arg constructor can't handle), return the URL\n            // obtained after the initial punycode attempt.\n            // Consider logging this exception in a real application.\n            return punyU;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}