{
    "generation": "static URL encodeUrl(URL u) {\n    u = punyUrl(u);\n    try {\n        String path = u.getPath();\n        String query = u.getQuery();\n        String ref = u.getRef();\n\n        // Encode the path, query, and fragment components individually\n        StringBuilder sb = new StringBuilder();\n        sb.append(u.getProtocol()).append(\"://\");\n        sb.append(u.getHost());\n        if (u.getPort() != -1) {\n            sb.append(\":\").append(u.getPort());\n        }\n        if (path != null) {\n            sb.append(encodePath(path));\n        }\n        if (query != null) {\n            sb.append(\"?\").append(URLEncoder.encode(query, \"UTF-8\").replace(\"+\", \"%20\").replace(\"%3D\", \"=\").replace(\"%26\", \"&\"));\n        }\n        if (ref != null) {\n            sb.append(\"#\").append(URLEncoder.encode(ref, \"UTF-8\").replace(\"+\", \"%20\"));\n        }\n        return new URL(sb.toString());\n    } catch (Exception e) {\n        // give up and return the original input\n        return u;\n    }\n}\n\n// Helper method to percent-encode the path component:\nprivate static String encodePath(String path) {\n    try {\n        // Use URI to encode the path correctly\n        return new URI(null, null, path, null).getRawPath();\n    } catch (URISyntaxException e) {\n        // fallback if it fails\n        return path.replace(\" \", \"%20\")\n                   .replace(\"[\", \"%5B\")\n                   .replace(\"]\", \"%5D\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}