{
    "generation": "    static URL encodeUrl(URL u) {\n        URL originalURL = u; // Keep a reference to the original URL for comparison and fallback\n        u = punyUrl(u); // Apply Punycode transformation first. This may return originalU or a new URL.\n\n        // If punyUrl returned a new URL object, it implies the host was non-ASCII and\n        // punyUrl successfully encoded the host. As part of its process (using the\n        // multi-argument URI constructor), other parts like path, query, and fragment\n        // would have also been encoded. So, 'u' is already fully and correctly encoded.\n        if (u != originalURL) {\n            return u;\n        }\n\n        // If u == originalURL, it means either:\n        // 1. The host was already ASCII, so punyUrl did nothing and returned the original URL.\n        //    In this case, the path, query, or fragment might still need encoding.\n        // 2. The host was non-ASCII, but punyUrl failed internally (e.g., due to an exception)\n        //    and returned the original URL.\n        // In both scenarios, we proceed to encode the path, query, and fragment of 'u' (which is originalURL).\n        try {\n            // Use the multi-argument URI constructor. It expects unencoded components for path, query,\n            // and fragment, and will correctly percent-encode them.\n            // URL.getPath(), getQuery(), getRef() provide components that are suitable for this\n            // constructor when the URL was created from a string with unencoded special characters\n            // (like spaces, '[', ']' as in the test case).\n            final URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), u.getRef());\n            return new URL(uri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            // If encoding fails (e.g., due to a non-ASCII host if punyUrl failed and returned\n            // originalURL with a non-ASCII host, or other syntax issues),\n            // return 'u' (which is originalURL in this logical path) as a fallback.\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}