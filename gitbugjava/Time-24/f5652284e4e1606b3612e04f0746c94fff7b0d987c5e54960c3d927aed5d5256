{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            // Clone array to make thread-safe processing possible\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        // Sort fields primarily by duration, then range, then type\n        sort(savedFields, count); \n\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                // Add default year if month or day specified but not year\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // Re-sort and re-process\n                return computeMillis(resetFields, text); \n            }\n        }\n\n        long millis = iMillis;\n\n        // --- Bug fix start ---\n        // Check for potentially conflicting fields: year/weekyear, monthOfYear, and weekOfWeekyear\n        boolean hasYearField = false;\n        boolean hasMonthOfYear = false;\n        boolean hasWeekOfWeekyear = false;\n\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            DateTimeFieldType type = field.getType();\n\n            // Check for any type of year field (standard year or weekyear)\n            if (type == DateTimeFieldType.year() || type == DateTimeFieldType.yearOfEra() ||\n                type == DateTimeFieldType.yearOfCentury() || type == DateTimeFieldType.weekyear() ||\n                type == DateTimeFieldType.weekyearOfCentury()) {\n                 hasYearField = true;\n            }\n            // Check for monthOfYear field\n            if (type == DateTimeFieldType.monthOfYear()) {\n                 hasMonthOfYear = true;\n            }\n            // Check for weekOfWeekyear field\n            if (type == DateTimeFieldType.weekOfWeekyear()) {\n                 hasWeekOfWeekyear = true;\n            }\n        }\n\n        // If a year field, monthOfYear, and weekOfWeekyear are all present,\n        // this indicates a potential ambiguity between the standard date system (year-month)\n        // and the week date system (year-week).\n        // Resolve this by prioritizing the week system fields (year/weekyear + weekOfWeekyear)\n        // and skipping the application of the monthOfYear field.\n        boolean resolveBySkippingMonth = hasYearField && hasMonthOfYear && hasWeekOfWeekyear;\n        // --- Bug fix end ---\n\n        try {\n            for (int i = 0; i < count; i++) {\n                // --- Bug fix part 2 ---\n                // If the ambiguity resolution strategy is active, skip the monthOfYear field.\n                if (resolveBySkippingMonth && savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear()) {\n                    continue; // Skip applying monthOfYear\n                }\n                // --- End Bug fix part 2 ---\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                // Prepend context to the error message\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        // Adjust for time zone offset\n        if (iZone == null) {\n            // Apply fixed offset if time zone is null\n            millis -= iOffset;\n        } else {\n            // Apply time zone offset, checking for illegal instants due to transitions\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            // If offset differs after adjustment, it's an invalid instant\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                // Throw exception as per original behavior\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}