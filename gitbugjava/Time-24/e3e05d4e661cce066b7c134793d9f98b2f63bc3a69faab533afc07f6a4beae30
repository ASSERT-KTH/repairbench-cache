{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // Re-sort and re-compute count after adding year\n                // Note: This recursive call might need adjustment if fields are added.\n                // However, the original code has this recursive call structure.\n                // Let's assume it works or the issue is elsewhere.\n                // Re-running sort and getting count again would be safer.\n                // sort(iSavedFields, iSavedFieldsCount);\n                // savedFields = iSavedFields; // update local reference\n                // count = iSavedFieldsCount; // update local count\n                // For minimal change, keep the recursive call as is.\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        // Check if both monthOfYear and weekOfWeekyear are specified.\n        // If so, the week field should take precedence, and month should be ignored\n        // to resolve ambiguity, matching the behavior needed for patterns like \"yyyy-MM-ww\".\n        boolean hasMonthOfYear = false;\n        boolean hasWeekOfWeekyear = false;\n        DateTimeFieldType monthType = DateTimeFieldType.monthOfYear();\n        DateTimeFieldType weekType = DateTimeFieldType.weekOfWeekyear();\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (field.getType() == monthType) {\n                hasMonthOfYear = true;\n            } else if (field.getType() == weekType) {\n                hasWeekOfWeekyear = true;\n            }\n        }\n        final boolean skipMonth = hasMonthOfYear && hasWeekOfWeekyear;\n\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                // If we have both monthOfYear and weekOfWeekyear, skip applying monthOfYear.\n                if (skipMonth && savedField.iField.getType() == monthType) {\n                    continue;\n                }\n                millis = savedField.set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        // Restore original logic for timezone offset calculation\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                // If the local time is ambiguous or invalid due to DST transition,\n                // handle it. For LocalDate/LocalDateTime, this might throw an exception.\n                // For DateTime, the behavior might depend on the Chronology.\n                // The original code throws an exception here, retain that.\n                 String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                // Joda-Time issue #171 suggests using ZoneInfoCompiler's handling.\n                // However, for a minimal fix, retain the exception.\n                 throw new IllegalArgumentException(message);\n                 // Alternative: use a lenient resolution? Depends on desired behavior.\n                 // For now, keep original exception logic.\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}