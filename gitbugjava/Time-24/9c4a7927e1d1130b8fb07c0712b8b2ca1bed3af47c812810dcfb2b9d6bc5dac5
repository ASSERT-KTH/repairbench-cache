{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        // Check if both monthOfYear and weekOfWeekyear fields are present.\n        // If so, week-based fields should take precedence over month-based ones.\n        boolean hasMonthOfYear = false;\n        boolean hasWeekOfWeekyear = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if (type == DateTimeFieldType.monthOfYear()) {\n                hasMonthOfYear = true;\n            }\n            if (type == DateTimeFieldType.weekOfWeekyear()) {\n                hasWeekOfWeekyear = true;\n            }\n            // Optimization: break early if both found\n            if (hasMonthOfYear && hasWeekOfWeekyear) {\n                break;\n            }\n        }\n\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // Recursive call needs the state to be consistent. The check for\n                // month/week conflict happens after sorting, so it should be safe.\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                // If both monthOfYear and weekOfWeekyear fields were parsed,\n                // skip setting monthOfYear, as the week-based fields take precedence.\n                if (hasMonthOfYear && hasWeekOfWeekyear &&\n                    savedField.iField.getType() == DateTimeFieldType.monthOfYear()) {\n                    continue; // Skip applying monthOfYear field\n                }\n                millis = savedField.set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            // Check again potentially DST change\n            // This check has been identified as potentially problematic (JODATIME-176)\n            // but is kept here as it's unrelated to the primary bug being fixed.\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                // Note: This used to throw IllegalInstantException, but was changed\n                // in some versions. Sticking to IllegalArgumentException as per original code.\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}