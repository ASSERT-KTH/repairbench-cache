{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared.\n     *                    Note: the behaviour of this flag changed in v2.0. It is ignored\n     *                    by this implementation and treated as true only for the last field.\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            // Clone array to ensure bucket is not thread-safe, see bug 1410611\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // The recursive call is necessary to handle the added year field properly.\n                // It will resort and re-process the fields. The resetFields flag passed\n                // doesn't directly affect the loop below due to the i == count - 1 logic.\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                // Pass 'true' for the 'reset' parameter only if it's the last field being applied.\n                // This strategy, adopted in later Joda-Time versions (v2.0+), helps resolve\n                // complex field interactions like monthOfYear vs. weekOfWeekyear\n                // more effectively than applying reset=true/false consistently to all fields.\n                // The underlying DateTimeField.set implementation might use this flag,\n                // or its behavior might implicitly depend on the sequence of calls.\n                millis = savedFields[i].set(millis, i == count - 1);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        } catch (IllegalArgumentException e) {\n            // Handle IllegalArgumentExceptions thrown by field setters, decorating with text context\n            if (text != null) {\n                // Preserve original exception type but add context\n                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            // If offset adjusted millis, check result is valid instant.\n            // This handles time zone transitions, especially daylight saving gaps.\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                // Throw IllegalInstantException for time zone transition issues,\n                // aligning with later Joda-Time practice (e.g., issue #485).\n                // Previously, IllegalArgumentException was thrown.\n                throw new org.joda.time.IllegalInstantException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}