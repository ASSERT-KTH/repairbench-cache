{
    "generation": "    @Override\n    public PropertyName findNameForSerialization(Annotated a)\n    {\n        String name = null;\n\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            name = jg.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n            } else {\n                /* 22-Apr-2014, tatu: Should figure out a better way to do this, but\n                 *   it's actually bit tricky to do it more efficiently (meta-annotations\n                 *   add more lookups; AnnotationMap costs etc)\n                 *\n                 * 16-Aug-2016, tatu: Also, Inclusion checks should not be handled here...\n                 *    (although this is registry? Or introspector? Oh well)\n                 */\n                // Also: any getter, setter, field is considered implicitly a property...\n                // 19-May-2017, tatu: ... unless explicit indicates otherwise...\n                if (_hasAnnotation(a, JsonSerialize.class)\n                        || _hasAnnotation(a, JsonView.class)\n                        // 14-Jan-2016, tatu: How about @JsonUnwrapped? Need to map it too,\n                        //    similar to other annotations that indicate property-ness\n                        || _hasAnnotation(a, JsonUnwrapped.class)\n                        || _hasAnnotation(a, JsonRawValue.class)) {\n                    name = \"\";\n                } else {\n                    return null;\n                }\n            }\n        }\n        // must return non-empty name or null\n        if (name == null) { // should not happen\n             return null;\n        }\n        // empty String non-null indicates 'default' name, which is currently\n        // indicated by null. This may be changed in future.\n        if (name.length() == 0) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return PropertyName.construct(name);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}