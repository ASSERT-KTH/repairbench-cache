{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        // Handle leading NUL requested by COMPRESS-144 / COMPRESS-197\n        // Detectable by seeing leading NUL. Less precise than below, but avoids\n        // unnecessary exceptions. Effectively returns 0 for ALL NUL fields.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // If the field is empty or consists entirely of spaces, return 0.\n        // This check is necessary to avoid reading buffer[end-1] if start has reached end.\n        // It also handles the case where the field is only spaces, which technically meets\n        // the \"trailing space\" requirement if the last character was a space.\n        if (start == end) {\n            return 0L;\n        }\n\n        // Check that the required trailer (space or NUL) is present at the end of the field.\n        byte trailer = buffer[end - 1];\n        if (trailer != 0 && trailer != ' ') {\n            // Build a helpful exception message inline, assuming exceptionMessage helper might not be available.\n            String error = \"Invalid byte \" + trailer + \" at offset \" + (end - 1 - offset) + \" in '\" +\n                           new String(buffer, offset, length).replace(\"\\0\", \"{NUL}\") + \"'. Expected space or null.\";\n            throw new IllegalArgumentException(error);\n            // If exceptionMessage helper exists, use:\n            // throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // Find the end of the octal digits.\n        // Scan from the first non-space character up to the character before the trailer.\n        int parseEnd = start;\n        // buffer[end-1] is the trailer, so scan up to end - 1.\n        while (parseEnd < end - 1 && buffer[parseEnd] >= '0' && buffer[parseEnd] <= '7') {\n            parseEnd++;\n        }\n        // parseEnd now points to the first non-octal digit, or end-1.\n\n        // Verify that characters between the last digit (parseEnd-1) and the trailer (end-1)\n        // are only spaces or NULs. Check indices from parseEnd to end-2.\n        for (int i = parseEnd; i < end - 1; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte != ' ' && currentByte != 0) {\n                 // Build helpful message inline.\n                 String error = \"Invalid byte \" + currentByte + \" at offset \" + (i - offset) + \" in '\" +\n                                new String(buffer, offset, length).replace(\"\\0\", \"{NUL}\") + \"'. Expected space or null.\";\n                 throw new IllegalArgumentException(error);\n                 // If exceptionMessage helper exists, use:\n                 // throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        }\n\n        // Parse the identified octal digits (from start to parseEnd).\n        for (int i = start; i < parseEnd; i++) {\n            final byte currentByte = buffer[i];\n            // CheckStyle:MagicNumber OFF\n            // No need to re-validate the byte is '0'-'7' due to the earlier loop.\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    /*\n     * Helper method to generate exception message (if needed and available in the original class).\n     * Keep this comment or remove if submitting only the parseOctal function.\n     * private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {\n     *     String L = System.lineSeparator();\n     *     StringBuilder sb = new StringBuilder();\n     *     sb.append(\"Invalid byte \").append(currentByte).append(\" at offset \").append(idx - offset);\n     *     sb.append(\" in '\").append(new String(buffer, offset, length).replace(\"\\0\", \"{NUL}\")).append(\"'\");\n     *     sb.append(L);\n     *     return sb.toString();\n     * }\n     */",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}