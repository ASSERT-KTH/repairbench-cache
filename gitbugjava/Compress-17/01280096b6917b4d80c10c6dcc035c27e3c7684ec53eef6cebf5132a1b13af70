{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Workaround for leading NUL check at the start of the field segment\n        // based on the original code logic which checked buffer[start] (initially buffer[offset])\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Must have trailing NUL or space at the end of the defined length\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' '){\n            end--; // Adjust end to point before the mandatory trailer\n        } else {\n            // If the last byte isn't a valid trailer, reject per Javadoc requirements.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // May have an additional trailing NUL or space before the mandatory one.\n        // Check if there's still data to check (end > start) before accessing buffer[end-1].\n        // This protects against invalid index if the buffer was all spaces/NULs trimmed away.\n        if (end > start) {\n            trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' '){\n                end--; // Adjust end to point before the second trailer\n            }\n        }\n        // 'end' now marks the boundary after the potential octal digits, considering mandatory trailers.\n\n        // Parse digits from the adjusted start up to the adjusted end.\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte >= '0' && currentByte <= '7') {\n                // Accumulate octal value\n                result = (result << 3) + (currentByte - '0');\n            } else if (currentByte == ' ' || currentByte == 0) {\n                // If a space or NUL is found *within* the range [start, end)\n                // after trimming the required trailers, it indicates the end\n                // of the actual octal number. Stop processing cleanly.\n                // This handles cases like \"123 \\0\" correctly.\n                break;\n            } else {\n                // Any other character within this range [start, end) is considered invalid.\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist for constructing the exception message.\n    // The exact implementation is not part of the fix but needed for compilation.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int index, byte value) {\n        // Create a reasonable representation of the buffer segment for the message.\n        String content = \"invalid\";\n        try {\n             // Attempt to decode as UTF-8, replacing errors. Use a limited length for brevity.\n             int displayLength = Math.min(length, 32); // Show up to 32 bytes\n             content = new String(buffer, offset, displayLength, java.nio.charset.StandardCharsets.UTF_8);\n             if (length > displayLength) {\n                 content += \"...\";\n             }\n        } catch (Exception e) { /* ignore decoding issues */ }\n\n        // Highlight the problematic byte\n        String annotatedContent = content;\n        int problematicIndexInSubstring = index - offset;\n        if (problematicIndexInSubstring >= 0 && problematicIndexInSubstring < content.length()) {\n             try {\n                 annotatedContent = content.substring(0, problematicIndexInSubstring)\n                                   + \"{\" + (char)value + \"}\" // Show char representation if possible\n                                   + content.substring(problematicIndexInSubstring + 1);\n             } catch(Exception e) { /* ignore annotation issues */ }\n        }\n\n        return \"Invalid byte \" + value + \" (at index \" + index + \") in octal value field: [offset=\" + offset + \", length=\" + length + \", content='\" + annotatedContent + \"']\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}