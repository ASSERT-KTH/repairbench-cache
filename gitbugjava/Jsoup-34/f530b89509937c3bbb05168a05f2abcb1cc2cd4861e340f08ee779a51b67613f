{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length();\n\n        // The maximum start offset for a match is length - seqLen.\n        // We search from the current position 'pos'.\n        int maxOffset = length - seqLen;\n\n        for (int offset = pos; offset <= maxOffset; offset++) {\n            // Scan for the first character match.\n            // This check is safe because offset <= maxOffset = length - seqLen <= length - 1 (assuming seqLen >= 1).\n            // If seqLen == 0, seq.charAt(0) would throw an exception earlier.\n            if (input[offset] != startChar) {\n                // Optimization: Use an inner loop to find the next startChar efficiently.\n                // This avoids redundant checks in the outer loop for non-matching start chars.\n                while (++offset <= maxOffset && input[offset] != startChar);\n                // If the inner loop finished, check if we are still within bounds.\n                if (offset > maxOffset) {\n                    break; // No possible match left.\n                }\n            }\n\n            // Found a potential start character match at 'offset'.\n            // Now check if the rest of the sequence matches.\n            boolean match = true;\n            for (int j = 1; j < seqLen; j++) {\n                // Check the character at input[offset + j].\n                // The index offset + j is safe:\n                // Max value of j is seqLen - 1.\n                // Max index accessed is offset + seqLen - 1.\n                // Since offset <= maxOffset = length - seqLen,\n                // max index <= (length - seqLen) + seqLen - 1 = length - 1.\n                // So, the index is always < length.\n                if (seq.charAt(j) != input[offset + j]) {\n                    match = false;\n                    break; // Mismatch found, break the inner comparison loop.\n                }\n            }\n\n            if (match) {\n                // Full sequence matched.\n                return offset - pos; // Return the offset relative to the initial position.\n            }\n            // If no match (match == false), the outer loop continues to the next offset.\n        }\n\n        // If the loop completes without finding the sequence.\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}