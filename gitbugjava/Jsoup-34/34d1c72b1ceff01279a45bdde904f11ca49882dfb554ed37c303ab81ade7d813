{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length(); // Cache sequence length\n\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset]) {\n                // This loop advances offset. If it reaches length, the outer loop condition will handle termination.\n                while (++offset < length && startChar != input[offset]);\n            }\n\n            // Check if offset is still within bounds (possible the while loop reached the end)\n            // and if the full sequence can fit from this offset\n            if (offset < length && offset + seqLen <= length) {\n                int i = offset + 1; // input index, starting after the matched startChar\n                int j = 1;          // seq index, starting from the second char\n                // Compare the rest of the sequence\n                // Condition `j < seqLen` ensures we don't read past seq bounds.\n                // Condition `offset + seqLen <= length` ensures `i` (which is offset + j) doesn't read past input bounds.\n                while (j < seqLen && seq.charAt(j) == input[i]) {\n                    i++;\n                    j++;\n                }\n                // If we matched all characters (j reached the end of seq)\n                if (j == seqLen) {\n                    return offset - pos; // Return the relative offset from the original position\n                }\n                // Otherwise, mismatch found, continue the outer loop (offset will be incremented)\n            }\n            // else: sequence doesn't fit starting here, or offset is already >= length.\n            // In either case, continue (or exit) the outer loop.\n        }\n        return -1; // Not found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}