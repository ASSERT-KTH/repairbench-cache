{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length();\n\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset]) {\n                // This loop advances offset to the next startChar or the end of the input\n                while (++offset < length && startChar != input[offset]);\n                // If we scanned past the end, the sequence cannot be found\n                if (offset >= length)\n                    return -1;\n            }\n\n            // Found startChar at input[offset]. Now check if the rest of the sequence matches.\n            int i = offset + 1; // index in input array (starts from 2nd char of potential match)\n            int j = 1;          // index in seq (starts from 2nd char)\n            int endMatch = offset + seqLen; // The index *after* the last char of seq if matched in input\n\n            // Check if the potential match would go beyond the input buffer length.\n            // Need input indices up to endMatch - 1. So, endMatch - 1 < length, which means endMatch <= length.\n            if (endMatch > length) {\n                // Not enough characters left in input for a full match starting at 'offset'.\n                // Since we scan sequentially, no match is possible from here on.\n                return -1;\n            }\n\n            // Compare the remaining characters of the sequence with the input buffer.\n            // We already checked that indices up to endMatch - 1 are valid (endMatch <= length).\n            while (i < endMatch && seq.charAt(j) == input[i]) {\n                i++;\n                j++;\n            }\n\n            // If i reached endMatch, it means all characters matched (j reached seqLen)\n            if (i == endMatch) {\n                return offset - pos; // Return the offset from the original position 'pos'\n            }\n            // Otherwise, there was a mismatch. The outer loop will continue search from the next offset.\n        }\n\n        return -1; // Scanned through all possible starting positions, no match found.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}