{
    "generation": "    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n        // Calculate SSE using the computational formula\n        double sse = sumYY - sumXY * sumXY / sumXX;\n        \n        // The documentation requires the result to be non-negative.\n        // Due to rounding errors, the formula can sometimes yield a small negative value\n        // for data very close to a perfect line. In such cases, 0.0 should be returned.\n        // Note: If sumXX is 0 (all x values the same), the division results in NaN or Infinity.\n        // sumYY - NaN = NaN. Math.max(0.0, NaN) is NaN.\n        // sumYY - Infinity = -Infinity. Math.max(0.0, -Infinity) is 0.0.\n        // The precondition check for estimability (n >= 2 and sumXX > 0)\n        // should ideally handle the NaN case explicitly, but Math.max covers the\n        // primary issue of small negative values due to precision loss.\n        return Math.max(0.0, sse);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}