{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11 *if the type supports both years and months*.\n     * If the type only supports months, then the total number of months will be placed\n     * in the months field.\n     * The days field and below will be normalized as necessary based on the millisecond totals,\n     * however this normalization will not overflow into the months field.\n     * Thus a period of 1 year 15 months normalized to a standard period type\n     * will be 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days after normalization.\n     * A period of 1 year 15 months normalized to a PeriodType that only supports months\n     * will be 27 months.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     *\n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        // Get values from THIS period\n        int years = getYears();\n        int months = getMonths();\n\n        // Per Javadoc: throw if original has Y/M but type doesn't support either\n        if ((years != 0 || months != 0)) {\n            boolean supportsYears = type.isSupported(DurationFieldType.years());\n            boolean supportsMonths = type.isSupported(DurationFieldType.months());\n            if (!supportsYears && !supportsMonths) {\n                 // Use a standard message similar to other places in Joda-Time\n                 throw new UnsupportedOperationException(\"PeriodType does not support fields: Years or Months\");\n            }\n        }\n\n        // Calculate total millis from lower fields (weeks down to millis)\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Create the base Period from the 'time' fields using the specified type and UTC Chronology.\n        // This constructor handles the distribution of millis into the fields supported by 'type'.\n        // Crucially, per the method docs, this step does not overflow into months/years.\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Normalize years and months if present in the original period and supported by the type\n        if (years != 0 || months != 0) {\n            // Calculate total months, using long to prevent intermediate overflow\n            long totalMonths = FieldUtils.safeMultiply((long)years, 12);\n            totalMonths = FieldUtils.safeAdd(totalMonths, months);\n\n            boolean supportsYears = type.isSupported(DurationFieldType.years());\n            boolean supportsMonths = type.isSupported(DurationFieldType.months());\n\n            if (supportsYears) {\n                int normYears = FieldUtils.safeToInt(totalMonths / 12);\n                // Assign normalized years to the result period.\n                // The result period already has the millis part calculated and set.\n                result = result.withYears(normYears);\n\n                // If months are also supported, assign the remainder months\n                if (supportsMonths) {\n                    int normMonths = FieldUtils.safeToInt(totalMonths % 12);\n                    // Combine with potentially existing month value in result?\n                    // No, the 'new Period(millis...)' call shouldn't produce months based on time fields.\n                    // So, just set the normalized months derived from the original years/months.\n                    result = result.withMonths(normMonths);\n                }\n                // If months are not supported by the type, the remainder (totalMonths % 12) is discarded.\n\n            } else if (supportsMonths) {\n                // Years not supported, but months are. Put all months into the months field.\n                int normMonths = FieldUtils.safeToInt(totalMonths);\n                // Similar to above, set the total months value calculated from original years/months.\n                result = result.withMonths(normMonths);\n            }\n            // Case where neither years nor months are supported was handled by the exception check earlier.\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}