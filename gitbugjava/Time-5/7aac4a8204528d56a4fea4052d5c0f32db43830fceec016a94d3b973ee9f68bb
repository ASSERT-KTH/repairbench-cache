{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type); // Ensure type is not null\n\n        // Calculate total millis from time fields (ms to weeks) using safe arithmetic\n        long millis = getMillis();\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Create base result period with normalized time fields.\n        // Unsupported fields (including years/months if not in type) are initialized to 0.\n        // Use UTC chronology to avoid potential daylight saving issues with time fields.\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Cache original year/month values\n        int years = getYears();\n        int months = getMonths();\n\n        // Only process years/months if the original period had non-zero values in them.\n        if (years != 0 || months != 0) {\n            // Calculate total months using safe arithmetic\n            long totalMonths = FieldUtils.safeMultiply((long) years, 12);\n            totalMonths = FieldUtils.safeAdd(totalMonths, (long) months);\n\n            // Check if type supports the fields needed to represent the non-zero year/month part.\n            boolean yearsSupported = type.isSupported(DurationFieldType.years());\n            boolean monthsSupported = type.isSupported(DurationFieldType.months());\n\n            if (!yearsSupported && !monthsSupported) {\n                // As per Javadoc, throw if original had non-zero years/months but type supports neither.\n                throw new UnsupportedOperationException(\"Period contains years or months but PeriodType does not support them\");\n            }\n\n            // Distribute totalMonths into the result period based on supported fields\n            if (yearsSupported) {\n                int normYears = FieldUtils.safeToInt(totalMonths / 12);\n                result = result.withYears(normYears); // Update year field\n                \n                // If months are also supported, set the remainder months\n                if (monthsSupported) {\n                    int normMonths = FieldUtils.safeToInt(totalMonths % 12);\n                    result = result.withMonths(normMonths); // Update month field\n                }\n                // If months are not supported, they remain 0 (set by constructor)\n            } else if (monthsSupported) { // Years not supported, but months are\n                // Assign the entire total months value to the months field\n                int normMonthsTotal = FieldUtils.safeToInt(totalMonths);\n                result = result.withMonths(normMonthsTotal); // Update month field with total months\n                // Years remain 0 (set by constructor as type doesn't support years)\n            }\n            // else case (neither year nor month supported) is handled by the exception above\n        }\n        // If original years and months were both zero, the result period created\n        // by new Period(millis, type, chrono) already has year/month fields correctly\n        // initialized (likely to 0), so no further action is needed in that case.\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}