{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * <p>\n     * When normalizing based on a PeriodType, the years and months are normalized\n     * within themselves. The weeks, days, hours, minutes, seconds and milliseconds\n     * are normalized based on millisecond conversions. If the specified period type\n     * does not support years, and the period contains years, the years will be\n     * converted to months. If the period type does not support months either,\n     * an exception will be thrown if the period contains non-zero years or months.\n     * If the period type supports years but not months, the months will be normalized\n     * into the years field and any remainder discarded.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        \n        // Calculate total millis from weeks downwards. Use long to avoid intermediate overflow.\n        long millis = getMillis();\n        millis = FieldUtils.safeAdd(millis, ((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis = FieldUtils.safeAdd(millis, ((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis = FieldUtils.safeAdd(millis, ((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis = FieldUtils.safeAdd(millis, ((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        \n        // Create a base period with the normalized time fields based on the target type.\n        // Use ISOChronology.getInstanceUTC() to ensure consistent normalization independent of default Chronology.\n        // This constructor distributes the milliseconds across the supported time fields (weeks to millis).\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        \n        // Normalize the year/month fields separately.\n        int years = getYears();\n        int months = getMonths();\n        \n        if (years != 0 || months != 0) {\n            // Calculate total months, using long to avoid intermediate overflow.\n            long totalMonths = FieldUtils.safeAdd(((long) years) * 12L, months);\n\n            boolean hasY = type.isSupported(DurationFieldType.years());\n            boolean hasM = type.isSupported(DurationFieldType.months());\n            \n            // Check if the target type can hold the year/month value.\n            if (!hasY && !hasM && totalMonths != 0) {\n                 // Throw if period has years/months, but the target type supports neither.\n                 throw new UnsupportedOperationException(\"Cannot normalize a period containing years or months to a type that doesn't support either field\");\n            }\n\n            // If we reach here, normalization is possible or totalMonths is 0.\n\n            if (hasY) {\n                // Type supports years. Calculate normalized years.\n                int normYears = FieldUtils.safeToInt(totalMonths / 12);\n                // Update the result period with the normalized years.\n                result = result.withYears(normYears); \n\n                // Calculate the remaining months after extracting whole years.\n                int normMonths = FieldUtils.safeToInt(totalMonths % 12);\n                if (hasM) {\n                    // Type also supports months, set the remainder months.\n                    result = result.withMonths(normMonths);\n                } else {\n                    // Type supports years but not months. The remainder months (normMonths)\n                    // are discarded, as per observed behavior in tests like testNormalizedStandard_periodType_years.\n                    // The years field is already set, nothing more needed for months.\n                }\n                \n            } else if (hasM) {\n                // Type supports months but not years (hasY is false).\n                // Convert the entire year/month duration into months.\n                int normMonths = FieldUtils.safeToInt(totalMonths);\n                // Update the result period with the total months.\n                result = result.withMonths(normMonths); \n            }\n            // else: !hasY && !hasM case was handled by the exception check or totalMonths == 0.\n            // If totalMonths is 0, no update is needed as result starts with 0 years/months.\n        }\n        // If the original period had years = 0 and months = 0, the 'result' created\n        // from the millis part is sufficient, as it correctly initializes fields based on 'type'.\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}