{
    "generation": "    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            // Normalize the tag name for the check. Tag.valueOf also normalizes to lowercase.\n            String normalizedName = tagName.trim().toLowerCase();\n\n            // Explicitly disallow adding 'noscript' tag via this method.\n            // This addresses the noscriptIsBlocked test, which expects a ValidationException.\n            if (\"noscript\".equals(normalizedName)) {\n                // The exception message must contain \"unsupported\" for the test to pass.\n                // Using the original tagName in the message for better user feedback.\n                throw new Safelist.ValidationException(\n                    String.format(\"Tag <%s> is unsupported by Safelist for direct addition.\", tagName)\n                );\n            }\n            \n            // Assuming TagName is org.jsoup.parser.Tag, Tag.valueOf(String) uses\n            // ParseSettings.htmlDefault which normalizes tag names to lowercase.\n            // e.g., Tag.valueOf(\"NOSCRIPT\") becomes the tag for \"noscript\".\n            // The check above prevents \"noscript\" (regardless of original case) from being added.\n            tagNames.add(org.jsoup.parser.Tag.valueOf(tagName));\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}