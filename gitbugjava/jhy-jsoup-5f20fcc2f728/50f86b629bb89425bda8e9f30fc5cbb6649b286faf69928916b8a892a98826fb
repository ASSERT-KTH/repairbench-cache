{
    "generation": "    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName); // Ensures tagName itself is not null or empty. \"  \" is not empty.\n\n            String trimmedTagName = tagName.trim(); // Used for the \"noscript\" check and in the exception message.\n                                                    // E.g., if tagName is \"  NOSCRIPT  \", trimmedTagName is \"NOSCRIPT\".\n                                                    // If tagName is \"  \", trimmedTagName is \"\".\n\n            if (trimmedTagName.equalsIgnoreCase(\"noscript\")) {\n                // If, after trimming, the tag is \"noscript\" (case-insensitive), throw ValidationException as per test requirements.\n                // ValidationException here refers to Safelist.ValidationException, an inner class.\n                throw new ValidationException(\n                    String.format(\"Tag <%s> is unsupported and cannot be whitelisted.\", trimmedTagName));\n            }\n            \n            // If not \"noscript\", proceed to add the tag using the original tagName string.\n            // org.jsoup.nodes.TagName.valueOf() handles its own normalization (trimming, lowercasing).\n            // For example:\n            //   TagName.valueOf(\"DIV\") returns TagName(\"div\").\n            //   TagName.valueOf(\"  span  \") returns TagName(\"span\").\n            //   If tagName was all whitespace (e.g. \"   \"), TagName.valueOf(\"   \") internally trims to \"\",\n            //   and then throws an IllegalArgumentException because an empty tag name is invalid.\n            //   This IllegalArgumentException is fine; it's not Safelist.ValidationException but appropriately\n            //   signals a generally invalid input, distinct from the policy-based \"noscript\" rejection.\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}