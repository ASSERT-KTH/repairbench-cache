{
    "generation": "import org.jsoup.helper.Validate;\nimport org.jsoup.internal.Normalizer;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport static org.jsoup.internal.Normalizer.normalize;\n\n// -- classes defined elsewhere --\nclass TagName {\n    private String name;\n    TagName(String name) { this.name = name; }\n    static TagName valueOf(String name) { return new TagName(Normalizer.normalize(name)); }\n    @Override public String toString() { return name; }\n    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; TagName tagName = (TagName) o; return name.equals(tagName.name); }\n    @Override public int hashCode() { return name.hashCode(); }\n}\n\nclass AttributeKey {\n    private String name;\n    AttributeKey(String name) { this.name = name; }\n    static AttributeKey valueOf(String name) { return new AttributeKey(Normalizer.normalize(name)); }\n     @Override public String toString() { return name; }\n    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AttributeKey that = (AttributeKey) o; return name.equals(that.name); }\n    @Override public int hashCode() { return name.hashCode(); }\n}\n\nclass AttributeValue {\n    private String value;\n    AttributeValue(String value) { this.value = value; }\n    static AttributeValue valueOf(String name) { return new AttributeValue(name); } // Don't normalize value (case sensitive)\n    @Override public String toString() { return value; }\n    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AttributeValue that = (AttributeValue) o; return value.equals(that.value); }\n    @Override public int hashCode() { return value.hashCode(); }\n}\n\nclass Protocol {\n    private String name;\n    Protocol(String name) { this.name = name; }\n    static Protocol valueOf(String name) { return new Protocol(name); } // Don't normalize value (case sensitive)\n    @Override public String toString() { return name; }\n    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Protocol protocol = (Protocol) o; return name.equals(protocol.name); }\n    @Override public int hashCode() { return name.hashCode(); }\n}\n\nclass Safelist {\n    private Set<TagName> tagNames; // tags allowed\n    private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[s] allowed\n    private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; // tag -> attribute -> value allowed\n    private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; // tag -> attribute -> protocol[s] allowed\n    private boolean preserveRelativeLinks; // option to preserve relative links\n\n    /**\n     Thrown by {@link #addTags(String...)} et al methods if the provided tag is not supported.\n     @since 1.15.1\n     */\n    public static class ValidationException extends IllegalArgumentException {\n        public ValidationException(String message) {\n            super(message);\n        }\n    }\n\n    // -- other methods --\n\n     /**\n      Default constructor. Generally use one of the defaults instead.\n      @see #basic()\n      @see #basicWithImages()\n      @see #none()\n      @see #relaxed()\n      @see #simpleText()\n      */\n     public Safelist() {\n         tagNames = new HashSet<>();\n         attributes = new HashMap<>();\n         enforcedAttributes = new HashMap<>();\n         protocols = new HashMap<>();\n         preserveRelativeLinks = false;\n     }\n\n    public static Safelist none() {\n        return new Safelist();\n    }\n\n\n    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     @throws ValidationException if a tag is unsupported, e.g. {@code noscript}.\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            // Added check for noscript tag as per test requirement\n            if (tagName.equalsIgnoreCase(\"noscript\")) {\n                 throw new ValidationException(\"Cannot add unsupported tag 'noscript' to safelist\");\n            }\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}