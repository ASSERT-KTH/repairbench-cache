{
    "generation": "    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            if (!isValidTag(tagName)) {\n                throw new ValidationException(\"Tag '\" + tagName + \"' is unsupported or blocked.\");\n            }\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n\n    private boolean isValidTag(String tagName) {\n        try {\n            // Attempt to get the tag name value, this will implicitly check if the tag is allowed.\n            TagName.valueOf(tagName.toUpperCase());\n            return true;\n        } catch (IllegalArgumentException e) {\n            return false;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}