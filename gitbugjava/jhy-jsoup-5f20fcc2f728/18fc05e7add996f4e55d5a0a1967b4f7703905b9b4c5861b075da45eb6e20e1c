{
    "generation": "import org.jsoup.helper.Validate;\nimport org.jsoup.internal.Normalizer;\nimport org.jsoup.nodes.TagName;\n\n// Import for ValidationException - assuming it's a nested class or in the same package\n// (Adjust import if ValidationException is defined elsewhere)\nimport org.jsoup.safety.Safelist.ValidationException; // Hypothetical import, adjust as needed\n\nimport java.util.Set; // Assuming tagNames is a Set<TagName>\n\n    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     @throws ValidationException if attempting to add an unsupported tag (e.g., {@code <noscript>})\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            // Tags are stored lowercase, check lowercase against unsupported tags:\n            String normalName = Normalizer.lowerCase(tagName);\n            Validate.notEmpty(normalName, \"Tag name cannot be empty after normalization\"); // ensure we don't add \"\"\n\n            // Check against unsupported tags. <noscript> is unsupported as it allows arbitrary JS.\n            if (normalName.equals(\"noscript\")) {\n                throw new ValidationException(\"Cannot add unsupported tag 'noscript' to safelist.\");\n            }\n\n            tagNames.add(TagName.valueOf(normalName)); // ensure TagName is created with normalized name\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}