{
    "generation": "import org.jsoup.helper.Validate;\nimport org.jsoup.internal.Normalizer;\nimport org.jsoup.parser.TagName;\n\nimport java.util.HashSet;\nimport java.util.Set;\n// Assuming Safelist.ValidationException is a static inner class or accessible\n// If not, adjust the exception type or import as needed. For this fix,\n// we assume it's accessible as Safelist.ValidationException.\n\n// Also assuming TagName has a method like normalName() or similar\n// to get the normalized (lowercase) tag name.\n// If the actual method is different, it needs adjustment.\n\n    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     @throws Safelist.ValidationException if a tag is unsupported, like {@code noscript}.\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            // Use Normalizer.lowerCase as TagName.valueOf might not be public or directly usable for normalization check\n            String normalizedTag = Normalizer.lowerCase(tagName);\n\n            // Block tags that are typically used for scripting attacks, like <noscript>\n            // See https://github.com/jsoup/jsoup/issues/1722\n            if (normalizedTag.equals(\"noscript\")) {\n                 throw new Safelist.ValidationException(String.format(\"Tag <%s> is unsupported and may be abused, forcing static HTML.\", tagName));\n             }\n\n            tagNames.add(TagName.valueOf(normalizedTag)); // Add the normalized tag\n        }\n        return this;\n    }\n\n    // Define the nested ValidationException class if it's not already defined elsewhere\n    // This is just for context, the fix only requires the addTags method body\n    /**\n     * A validation exception, occurring when assessing node validity. Tells you why the node was dropped.\n     * Use {@link #getMessage()} to retrieve the reason.\n     */\n    public static class ValidationException extends IllegalArgumentException {\n        ValidationException(String message) {\n            super(message);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}