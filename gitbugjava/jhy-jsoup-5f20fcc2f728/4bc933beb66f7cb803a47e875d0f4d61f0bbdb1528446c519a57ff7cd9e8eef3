{
    "generation": "    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName); // Original validation: ensures tagName is not null and not an empty string \"\"\n\n            String trimmedTagName = tagName.trim(); // Trim leading/trailing whitespace\n\n            // Normalize the tag name for the check. JSoup typically normalizes to lowercase using Locale.ENGLISH.\n            String normalizedName = trimmedTagName.toLowerCase(java.util.Locale.ENGLISH);\n\n            if (normalizedName.equals(\"noscript\")) {\n                // Throw ValidationException as required by the failing test for \"NOSCRIPT\"\n                // The exception type is org.jsoup.helper.Validate.ValidationException\n                throw new org.jsoup.helper.Validate.ValidationException(\n                    \"Tag '\" + tagName + \"' is unsupported and not allowed in Safelist.\");\n            }\n            \n            // If not \"noscript\", proceed to add the tag.\n            // Pass the trimmed name to TagName.valueOf. It will handle its own full normalization (which includes trimming and case normalization).\n            tagNames.add(TagName.valueOf(trimmedTagName));\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}