{
    "generation": "    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName); // Ensures original string is not null or empty.\n                                        // Throws IllegalArgumentException for null or \"\" input.\n\n            String trimmedTagName = tagName.trim();\n            // After trimming, tag name could be empty (e.g., if original was \"   \").\n            // Validate this, ensuring it's not empty.\n            // Throws IllegalArgumentException if trimmedTagName is empty.\n            Validate.notEmpty(trimmedTagName, \"Tag name must not be empty after trimming (original: \\\"\" + tagName + \"\\\")\");\n\n            // Normalize the tag name to lowercase. This is standard for HTML tags\n            // and ensures that tag matching (e.g., in isSafeTag) is case-insensitive.\n            String normalizedTagName = org.jsoup.internal.Normalizer.lowerCase(trimmedTagName);\n\n            // Specific check for 'noscript' tag.\n            // Based on test requirements, adding \"noscript\" (case-insensitively)\n            // should be disallowed and throw a Safelist.ValidationException.\n            if (\"noscript\".equals(normalizedTagName)) {\n                // The exception message must contain \"unsupported\" for the test to pass.\n                // Using trimmedTagName in the message provides the user with the\n                // tag name as they likely input it (after basic trimming).\n                throw new Safelist.ValidationException(\"Unsupported tag: '\" + trimmedTagName + \"'\");\n            }\n\n            // Add the normalized (lowercase) tag name to the set of allowed tag names.\n            // Safelist.TagName.valueOf() creates a wrapper around the string. Storing\n            // the normalized version ensures consistency.\n            tagNames.add(TagName.valueOf(normalizedTagName));\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}