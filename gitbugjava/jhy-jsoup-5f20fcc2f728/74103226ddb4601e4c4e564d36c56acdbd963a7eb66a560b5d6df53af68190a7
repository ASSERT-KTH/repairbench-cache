{
    "generation": "    /**\n     * Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n     *\n     * @param tags tag names to allow\n     * @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n\n            if (!isSupportedTagName(tagName)) {\n                throw new ValidationException(\"Tag \" + tagName + \" is not supported.\");\n            }\n\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n\n    private boolean isSupportedTagName(String tagName) {\n        // Assuming TagName is an enum or class that represents supported tags\n        try {\n            TagName.valueOf(tagName.toUpperCase());\n        } catch (IllegalArgumentException e) {\n            return false;\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}