{
    "generation": "    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName); // Original validation: ensures tagName is not null and not an empty string.\n            \n            // Trim the input tagName. This is good practice for user-facing messages\n            // and aligns with TagName.valueOf's internal normalization which also trims.\n            String trimmedTagName = tagName.trim(); \n\n            // TagName.valueOf uses ParseSettings.htmlDefault by default.\n            // This normalizes the tag name (e.g., to lowercase for HTML: \"body\" from \"BODY\" or \"Body\").\n            // It also performs structural validation (e.g., not empty after normalization).\n            TagName tag = TagName.valueOf(trimmedTagName);\n\n            // Policy: The \"noscript\" tag is explicitly disallowed.\n            // Check against the canonical, normalized form of the tag, which is \"noscript\".\n            // tag.normalName() returns this normalized string.\n            if (\"noscript\".equals(tag.normalName())) {\n                // The failing test expects a ValidationException with \"unsupported\" in its message.\n                // org.jsoup.helper.ValidationException is the standard Jsoup exception for this.\n                throw new org.jsoup.helper.ValidationException(\n                    String.format(\"Tag <%s> is unsupported by Safelist.\", trimmedTagName));\n            }\n            \n            tagNames.add(tag);\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}