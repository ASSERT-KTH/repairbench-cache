{
    "generation": "    /**\n     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)\n\n     @param tags tag names to allow\n     @return this (for chaining)\n     */\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName); // Ensures tagName is not null or graphically empty\n\n            // Normalize the tag name for the check (trim and lowercase using Locale.ROOT).\n            // This matches the normalization done by org.jsoup.nodes.TagName.valueOf().\n            String normalizedName = tagName.trim().toLowerCase(java.util.Locale.ROOT);\n\n            if (\"noscript\".equals(normalizedName)) {\n                // As per the failing test, adding \"noscript\" should throw a ValidationException.\n                // The message uses tagName.trim() to reflect the user's input case prior to normalization.\n                throw new org.jsoup.helper.ValidationException(\n                    \"Tag <\" + tagName.trim() + \"> is unsupported and cannot be added to the safelist.\");\n            }\n            \n            // If the tag is not \"noscript\", proceed to add it.\n            // TagName.valueOf() will handle its own internal normalization and validation\n            // (e.g., throwing IllegalArgumentException if the tag name becomes empty after trimming).\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}