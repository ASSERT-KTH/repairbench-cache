{
    "generation": "    private boolean isInlineable(Document.OutputSettings out) {\n        if (!tag.isInline())\n            return false;\n        \n        // Check general conditions under which an element might be inlineable.\n        // An element can only be considered for inlining if its parent is a block (or it has no parent)\n        // and if we are not in outline mode.\n        boolean contextAllowsInlineable = (parent() == null || parent().isBlock()) && !out.outline();\n\n        if (!contextAllowsInlineable) {\n            // If the general context doesn't allow inlining, then this element cannot be inlineable.\n            return false;\n        }\n\n        // At this point, the context (parent type and output mode) would allow an inline element\n        // to be rendered \"inlineable\". Now, check specific rules based on the tag type and position.\n\n        if (tag.normalName().equals(\"br\")) {\n            // A <br> tag, by its definition, creates a line break.\n            // Therefore, for pretty-printing purposes, it should not be considered \"inlineable\"\n            // in a way that would suppress newlines or indents around it.\n            // If the context allows inlining (checked above), a <br> specifically should not be inlineable.\n            return false;\n        } else {\n            // For other inline tags (e.g., <span>, <a>), they are inlineable if they are not\n            // the first \"effective\" (e.g. non-whitespace) child of their parent.\n            // If they are the first, they might need to start on a new indented line themselves.\n            return !isEffectivelyFirst();\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}