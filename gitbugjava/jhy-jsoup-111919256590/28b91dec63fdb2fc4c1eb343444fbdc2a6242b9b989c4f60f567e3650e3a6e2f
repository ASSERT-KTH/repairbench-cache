{
    "generation": "    private boolean isInlineable(Document.OutputSettings out) {\n        if (!tag.isInline()) // A block tag is never inlineable\n            return false;\n\n        // An inline tag may be inlineable.\n        // Special case for <br>:\n        if (tag.getName().equals(\"br\")) {\n            Element parent = parent(); // parent() returns null if no parent\n            // If <br> is in a parent that cannot contain block elements (e.g. <p>, <h1> -- phrasing content parent),\n            // then <br> is inlineable (unless outlining). This prevents an undue leading newline.\n            // e.g., <p><br>Foo</p> becomes <p><br>\\n Foo</p>\n            if (parent != null && !parent.tag().canContainBlock()) {\n                return !out.outline();\n            } else {\n                // If parent can contain block elements (e.g. <div> -- flow content parent), or if no parent,\n                // <br> is not inlineable. This makes it act as a block separator.\n                // e.g., <div><br></div> becomes <div>\\n <br>\\n</div>\n                // e.g., <div><p>Foo</p><br></div> becomes <div>\\n <p>Foo</p>\\n <br>\\n</div>\n                return false;\n            }\n        }\n\n        // Default for other inline tags (e.g. <span>, <a>, <b>):\n        // Inlineable if parent is block (or this is root), and this is not the first significant child, and not outlining.\n        // This preserves the existing behavior for non-<br> inline tags.\n        return (parent() == null || parent().isBlock())\n            && !isEffectivelyFirst()\n            && !out.outline();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}