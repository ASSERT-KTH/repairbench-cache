{
    "generation": "    private boolean isInlineable(Document.OutputSettings out) {\n        // A node is \"inlineable\" if it doesn't force a new line before it during pretty printing.\n        // This generally applies to inline elements within a block-level parent,\n        // but with special considerations for self-closing inline tags like <br>.\n\n        // 1. Must be an inline tag\n        if (!tag.isInline()) {\n            return false;\n        }\n\n        // 2. Not in outline mode (where everything gets its own line)\n        if (out.outline()) {\n            return false;\n        }\n\n        // 3. Parent must be a block-level element or null (top-level)\n        // If parent is also inline, the child is naturally \"inline\" within that context,\n        // and its inlineability is not managed by this method for newlines.\n        if (!(parent() == null || parent().isBlock())) {\n            return false;\n        }\n\n        // Special handling for self-closing inline tags (like <br>).\n        // These tags are inlineable (don't force a preceding newline) ONLY if they are the first\n        // effectively non-whitespace/non-block child of their block parent.\n        // This creates output like: <p><br>Foo</p> vs <div>...<br></div> => <div>...<br>\\n <br>\\n</div>\n        if (tag.isSelfClosing()) {\n            return isEffectivelyFirst();\n        } else {\n            // For other inline tags (e.g., <span>, <em>, <a>), they are generally\n            // inlineable when in a block parent and not in outline mode, regardless\n            // of whether they are the first effective child or not.\n            // E.g., <p>Foo<span>Bar</span></p> should not have a newline before <span>.\n            // <p><span>Foo</span></p> should not have a newline before <span>.\n            return true;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}