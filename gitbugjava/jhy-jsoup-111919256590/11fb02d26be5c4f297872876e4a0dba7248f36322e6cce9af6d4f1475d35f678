{
    "generation": "    private boolean isInlineable(Document.OutputSettings out) {\n        if (!tag.isInline())\n            return false;\n\n        // If in outline mode, no element should be inlineable (always force newlines for structure)\n        if (out.outline())\n            return false;\n\n        boolean isBr = tag.equals(Tag.valueOf(\"br\"));\n        boolean parentIsBlock = (parent() == null || parent().isBlock());\n        boolean effectivelyFirst = isEffectivelyFirst();\n\n        if (isBr) {\n            // Special handling for <br> tags due to their unique line-break behavior.\n            // A <br> tag is inlineable (meaning no newline will be printed before it)\n            // in two main scenarios:\n\n            // 1. If it's the first effectively non-blank child of a block-level parent.\n            //    This prevents an unwanted newline like in \"<p>\\n <br>Foo</p>\".\n            //    We want \"<p><br>\\n Foo</p>\".\n            if (parentIsBlock && effectivelyFirst) {\n                return true;\n            }\n            // 2. If its parent is an inline element.\n            //    E.g., \"<span>Foo<br>Bar</span>\" should pretty-print as \"<span>Foo<br>Bar</span>\".\n            //    This is covered by the final `return true;` if `parentIsBlock` is false.\n\n            // If a <br> is in a block-level parent but is NOT the first effectively non-blank child,\n            // then it should NOT be inlineable. This means a newline will be printed before it,\n            // visually separating it from the preceding content within the block.\n            // E.g., \"<div><p></p><br></div>\" should result in a newline before the <br>\n            // to separate it from the preceding block <p>.\n            if (parentIsBlock && !effectivelyFirst) {\n                return false;\n            }\n\n            // If none of the above conditions returned, it means `parentIsBlock` is false,\n            // implying the parent is an inline element. In this case, <br> should always be inlineable.\n            return true;\n\n        } else {\n            // General case for other inline tags (e.g., <em>, <strong>, <span>).\n            // An inline tag is inlineable if:\n            // 1. Its parent is a block-level element (or null, for top-level elements).\n            // 2. It is NOT the first effectively non-blank child of its parent.\n            // This ensures that:\n            //   - \"<p><em>Foo</em></p>\" becomes \"<p>\\n <em>Foo</em></p>\" (not inlineable as first child)\n            //   - \"<p>Foo<em>Bar</em></p>\" remains \"<p>Foo<em>Bar</em></p>\" (inlineable as not first child)\n            //   - \"<span><em>Foo</em></span>\" remains \"<span><em>Foo</em></span>\" (inlineable as parent is inline)\n            return parentIsBlock && !effectivelyFirst;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}