{
    "generation": "    private boolean isInlineable(Document.OutputSettings out) {\n        if (!tag.isInline())\n            return false; // Only inline tags can be inlineable\n\n        if (out.outline())\n            return false; // If outlining mode, nothing is inlineable\n\n        // <br> is special: it acts like a block element when it's not the first child\n        // of a block parent, forcing a newline before it. When it *is* the first child\n        // of a block parent, it prints inline. This aligns with the test's expectation\n        // \"br gets wrapped if in div, but not in p (block vs inline)\".\n        // - In <p><br>Foo: <br> is effectively first, should be inlineable (true).\n        // - In <div>...<br>: <br> is not effectively first, should not be inlineable (false),\n        //   thus forcing a newline before it.\n        if (tag.getName().equals(\"br\")) {\n            return isEffectivelyFirst();\n        }\n\n        // For all other inline tags (e.g., span, a, em, strong), they are generally inlineable,\n        // meaning they do not force a newline before themselves for pretty printing.\n        // The previous `!isEffectivelyFirst()` condition was problematic for general\n        // inline tags when they were the first child of a block parent (e.g., <div><span>...</span></div>),\n        // incorrectly making them non-inlineable.\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}