{
    "generation": "import org.apache.commons.math.special.Erf;\nimport org.apache.commons.math.MathException;\n\n    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        // Handle case where standardDeviation is very small or zero properly?\n        // Current implementation assumes standardDeviation is positive,\n        // which is enforced by the constructor.\n        \n        // Calculate the standardized score (z-score)\n        final double z = dev / standardDeviation;\n\n        // As per the javadoc, handle cases where x is far from the mean.\n        // The threshold of 20 standard deviations is mentioned. For values\n        // beyond this threshold, the CDF is effectively 0 or 1.\n        // This also avoids potential convergence issues in the Erf.erf function\n        // for very large inputs, which caused the test failure.\n        // Note: A threshold like 8 might be sufficient as erf(z/sqrt(2)) is\n        // extremely close to +/-1 for |z| > 8 * sqrt(2) ~ 11.3, but using the\n        // documented value of 20 is safer and adheres to the description.\n        // The test fails for z=40, so a threshold of 20 correctly handles this.\n        final double Z_THRESHOLD = 20.0; \n\n        if (Math.abs(z) > Z_THRESHOLD) {\n            if (z > 0) {\n                return 1.0; // If x is far above the mean, CDF is 1\n            } else {\n                return 0.0; // If x is far below the mean, CDF is 0\n            }\n        } else {\n            // If x is within Z_THRESHOLD standard deviations of the mean,\n            // calculate the CDF using the error function.\n            // The relationship is CDF(x) = 0.5 * (1 + erf((x - mean) / (stdDev * sqrt(2))))\n            // which is equivalent to 0.5 * (1 + erf(z / sqrt(2)))\n            return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}