{
    "generation": "    private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShort(); // length\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_STRING_INFO) {\n            buf.readUnsignedInt(); // server flag\n            String data;\n            if (buf.readUnsignedByte() == 1) {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);\n            } else {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);\n            }\n\n            Parser parser = new Parser(PATTERN_LOCATION, data);\n            if (parser.matches()) {\n                position.setValid(true);\n                position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setCourse(parser.nextDouble());\n                position.setSpeed(parser.nextDouble());\n                position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n            } else {\n                position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_RESULT, data);\n            }\n            return position;\n        } else if (type == MSG_INFO) {\n            int subType = buf.readUnsignedByte();\n            getLastLocation(position, null);\n\n            if (subType == 0x00) {\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n                return position;\n            } else if (subType == 0x05) {\n                if (buf.readableBytes() >= 6 + 1 + 6) {\n                    DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                    position.setDeviceTime(dateBuilder.getDate());\n                }\n                int flags = buf.readUnsignedByte();\n                position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                return position;\n            } else if (subType == 0x0a) {\n                buf.skipBytes(8); // imei\n                buf.skipBytes(8); // imsi\n                String iccid = ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\");\n                if (iccid != null && !iccid.isEmpty()) {\n                    position.set(Position.KEY_ICCID, iccid);\n                }\n                return position;\n            } else if (subType == 0x0d) {\n                if (buf.readableBytes() > 4 && buf.getByte(buf.readerIndex()) != '!') {\n                    buf.skipBytes(6);\n                }\n                if (buf.readableBytes() > 4) {\n                    Parser parser = new Parser(PATTERN_FUEL, buf.toString(\n                        buf.readerIndex(), Math.min(buf.readableBytes() - 4 - 2, 100), StandardCharsets.US_ASCII));\n                    if (!parser.matches()) {\n                        return position; // Return position even if fuel data doesn't match\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                    position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n                }\n                return position;\n            } else if (subType == 0x1b) {\n                if (buf.readableBytes() > 6) {\n                    if (Character.isLetter(buf.getByte(buf.readerIndex()))) {\n                        String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();\n                        position.set(\"serial\", data.trim());\n                    } else {\n                        buf.readUnsignedByte(); // header\n                        buf.readUnsignedByte(); // type\n                        String driverId = ByteBufUtil.hexDump(buf.readSlice(4));\n                        if (driverId != null) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);\n                        }\n                        buf.readUnsignedByte(); // checksum\n                        buf.readUnsignedByte(); // footer\n                    }\n                }\n                return position;\n            }\n        } else if (type == MSG_X1_PHOTO_DATA) {\n            int pictureId = buf.readInt();\n            ByteBuf photo = photos.get(pictureId);\n            buf.readUnsignedInt(); // offset\n            int bytesToRead = Math.min(buf.readUnsignedShort(), buf.readableBytes());\n            buf.readBytes(photo, bytesToRead);\n\n            if (photo != null && photo.writableBytes() <= 0) {\n                sendPhotoRequest(channel, pictureId);\n            } else if (photo != null) {\n                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                photos.remove(pictureId).release();\n            }\n            return null;\n        } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {\n            if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n                getLastLocation(position, position.getDeviceTime());\n            }\n\n            if (decodeLbs(position, buf, type, true)) {\n                if (buf.readableBytes() > 0) {\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                }\n            }\n\n            int cellTowersCount = buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0;\n            buf.skipBytes(cellTowersCount);\n            int wifiCount = buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0;\n            buf.skipBytes(wifiCount);\n\n            if (buf.readableBytes() > 0) {\n                int status = buf.readUnsignedByte();\n                position.set(Position.KEY_STATUS, status);\n\n                if (type == MSG_AZ735_ALARM) {\n                    switch (status) {\n                        case 0xA0:\n                            position.set(Position.KEY_ARMED, true);\n                            break;\n                        case 0xA1:\n                            position.set(Position.KEY_ARMED, false);\n                            break;\n                        case 0xA2:\n                        case 0xA3:\n                            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                            break;\n                        case 0xA4:\n                            position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                            break;\n                        case 0xA5:\n                            position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n\n            int reservedLength = buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0;\n            buf.skipBytes(reservedLength);\n\n            sendResponse(channel, true, type, buf.readableBytes() > 5 ? buf.readShort() : 0, null);\n            return position;\n        } else if (type == MSG_OBD) {\n            if (buf.readableBytes() >= 6) {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n\n                if (buf.readableBytes() > 0) {\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n\n                    if (buf.readableBytes() > 0) {\n                        int length = Math.min(buf.readableBytes(), 500); // Limit length to avoid issues\n                        String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        for (String pair : data.split(\",\")) {\n                            String[] values = pair.split(\"=\");\n                            if (values.length >= 2) {\n                                try {\n                                    int code = Integer.parseInt(values[0].substring(0, Math.min(2, values[0].length())), 16);\n                                    switch (code) {\n                                        case 40:\n                                            position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);\n                                            break;\n                                        case 43:\n                                            position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);\n                                            break;\n                                        case 45:\n                                            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);\n                                            break;\n                                        case 53:\n                                            position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);\n                                            break;\n                                        case 54:\n                                            position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);\n                                            break;\n                                        case 71:\n                                            position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);\n                                            break;\n                                        case 73:\n                                            position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);\n                                            break;\n                                        case 74:\n                                            position.set(Position.KEY_VIN, values[1]);\n                                            break;\n                                    }\n                                } catch (NumberFormatException e) {\n                                    // Ignore malformed values\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return position;\n        } else if (type == MSG_GPS_MODULAR) {\n            while (buf.readableBytes() > 6) {\n                int moduleType = buf.readUnsignedShort();\n                int moduleLength = buf.readUnsignedShort();\n\n                // Prevent reading beyond buffer\n                int availableBytes = Math.min(moduleLength, buf.readableBytes());\n                int originalReaderIndex = buf.readerIndex();\n                try {\n                    switch (moduleType) {\n                        case 0x03:\n                            if (availableBytes >= 10) {\n                                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));\n                                buf.skipBytes(moduleLength - 10);\n                            }\n                            break;\n                        case 0x09:\n                            if (availableBytes >= 1) {\n                                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                                buf.skipBytes(moduleLength - 1);\n                            }\n                            break;\n                        case 0x0a:\n                            if (availableBytes >= 1) {\n                                position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());\n                                buf.skipBytes(moduleLength - 1);\n                            }\n                            break;\n                        case 0x11:\n                            if (availableBytes >= 9) {\n                                CellTower cellTower = CellTower.from(\n                                    buf.readUnsignedShort(),\n                                    buf.readUnsignedShort(),\n                                    buf.readUnsignedShort(),\n                                    buf.readUnsignedMedium(),\n                                    buf.readUnsignedByte());\n                                if (cellTower.getCellId() > 0) {\n                                    position.setNetwork(new Network(cellTower));\n                                }\n                                buf.skipBytes(moduleLength - 9);\n                            }\n                            break;\n                        case 0x18:\n                            if (availableBytes >= 2) {\n                                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                                buf.skipBytes(moduleLength - 2);\n                            }\n                            break;\n                        case 0x28:\n                            if (availableBytes >= 1) {\n                                position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                                buf.skipBytes(moduleLength - 1);\n                            }\n                            break;\n                        case 0x29:\n                            if (availableBytes >= 4) {\n                                position.set(Position.KEY_INDEX, buf.readUnsignedInt());\n                                buf.skipBytes(moduleLength - 4);\n                            }\n                            break;\n                        case 0x2a:\n                            if (availableBytes >= 1) {\n                                int input = buf.readUnsignedByte();\n                                position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n                                position.set(\"tamper\", BitUtil.from(input, 4) > 0);\n                                buf.skipBytes(moduleLength - 1);\n                            }\n                            break;\n                        case 0x2b:\n                            if (availableBytes >= 1) {\n                                int event = buf.readUnsignedByte();\n                                switch (event) {\n                                    case 0x11:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                                        break;\n                                    case 0x12:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                                        break;\n                                    case 0x13:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                                        break;\n                                    case 0x14:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                                        break;\n                                }\n                                position.set(Position.KEY_EVENT, event);\n                                buf.skipBytes(moduleLength - 1);\n                            }\n                            break;\n                        case 0x2e:\n                            if (availableBytes >= 4) {\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                                buf.skipBytes(moduleLength - 4);\n                            }\n                            break;\n                        case 0x33:\n                            if (availableBytes >= 13) { // Minimum bytes needed for this module type\n                                long timestamp = buf.readUnsignedInt();\n                                position.setTime(new Date(timestamp * 1000));\n                                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                                position.setAltitude(buf.readShort());\n\n                                double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                                double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                                position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n\n                                if (availableBytes >= 3) {\n                                    int flags = buf.readUnsignedShort();\n                                    if (availableBytes >= 2) {\n                                        position.setCourse(BitUtil.to(flags, 10));\n                                    }\n                                    position.setValid(BitUtil.check(flags, 12));\n\n                                    if (!BitUtil.check(flags, 10)) {\n                                        latitude = -latitude;\n                                    }\n                                    if (BitUtil.check(flags, 11)) {\n                                        longitude = -longitude;\n                                    }\n\n                                    position.setLatitude(latitude);\n                                    position.setLongitude(longitude);\n                                    buf.skipBytes(moduleLength - 13);\n                                }\n                            }\n                            break;\n                        case 0x34:\n                            if (availableBytes >= 5) {\n                                position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                                buf.readUnsignedIntLE(); // time\n                                int contentLength = Math.min(buf.readUnsignedByte(), availableBytes - 5);\n                                buf.skipBytes(contentLength);\n                            }\n                            break;\n                        default:\n                            buf.skipBytes(Math.min(moduleLength, buf.readableBytes()));\n                            break;\n                    }\n                } catch (Exception e) {\n                    buf.readerIndex(originalReaderIndex);\n                    buf.skipBytes(moduleLength);\n                }\n            }\n\n            if (position.getFixTime() == null) {\n                getLastLocation(position, null);\n            }\n\n            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readableBytes() > 1 ? buf.readUnsignedShort() : 0, null);\n            return position;\n        } else if (type == MSG_MULTIMEDIA) {\n            buf.skipBytes(8); // serial number\n            if (buf.readableBytes() >= 4) {\n                long timestamp = buf.readUnsignedInt() * 1000L;\n                buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps data\n                buf.skipBytes(2 + 2 + 2 + 2); // cell data\n\n                if (buf.readableBytes() >= 4) {\n                    int mediaId = buf.readInt();\n                    if (buf.readableBytes() >= 4) {\n                        int mediaLength = buf.readInt();\n                        if (buf.readableBytes() >= 2) {\n                            int mediaType = buf.readUnsignedByte();\n                            int mediaFormat = buf.readUnsignedByte();\n\n                            if (mediaType == 0 && mediaFormat == 0) {\n                                if (buf.readableBytes() >= 1) {\n                                    buf.readUnsignedByte(); // event\n\n                                    if (buf.readableBytes() >= 2) {\n                                        int packetIndex = buf.readUnsignedShort();\n                                        ByteBuf photo;\n\n                                        if (packetIndex == 0) {\n                                            photo = Unpooled.buffer(mediaLength);\n                                            if (photos.containsKey(mediaId)) {\n                                                photos.remove(mediaId).release();\n                                            }\n                                            photos.put(mediaId, photo);\n                                        } else {\n                                            photo = photos.get(mediaId);\n                                        }\n\n                                        if (photo != null) {\n                                            int bytesToWrite = Math.min(buf.readableBytes() - 3 * 2, photo.writableBytes());\n                                            buf.readBytes(photo, bytesToWrite);\n                                            if (!photo.isWritable()) {\n                                                position = new Position(getProtocolName());\n                                                position.setDeviceId(deviceSession.getDeviceId());\n                                                getLastLocation(position, new Date(timestamp));\n                                                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                                                photos.remove(mediaId).release();\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            sendResponse(channel, true, type, buf.readableBytes() > 1 ? buf.readUnsignedShort() : 0, null);\n            return position;\n        } else if (type == MSG_SERIAL) {\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n\n            if (buf.readableBytes() > 0) {\n                buf.readUnsignedByte(); // external device type code\n                int length = buf.readableBytes() - 1; // subtract checksum, etc.\n                if (length > 0) {\n                    if (length < 8) {\n                        try {\n                            String tempStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                            double tempValue = Double.parseDouble(tempStr.trim());\n                            position.set(Position.PREFIX_TEMP + 1, tempValue);\n                        } catch (NumberFormatException e) {\n                            // Ignore if parsing fails\n                        }\n                    } else {\n                        buf.readUnsignedByte(); // card type\n                        String driverId = buf.readCharSequence(Math.min(length - 1, buf.readableBytes()), StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId.trim());\n                    }\n                }\n            }\n            return position;\n        } else if (type == MSG_INPUT) {\n            // Handle input type messages which were causing null returns\n            getLastLocation(position, null);\n            if (buf.readableBytes() > 0) {\n                int subType = buf.readUnsignedByte();\n                switch (subType) {\n                    case 0x01:\n                        int value = buf.readUnsignedShort();\n                        position.set(Position.PREFIX_ADC + 1, value * 0.01);\n                        break;\n                    case 0x02:\n                        int flags = buf.readUnsignedByte();\n                        position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                        position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                        break;\n                    case 0x03:\n                        if (buf.readableBytes() >= 10) {\n                            String iccid = ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\");\n                            position.set(Position.KEY_ICCID, iccid);\n                        }\n                        break;\n                    case 0x04:\n                        if (buf.readableBytes() >= 1) {\n                            int tempValue = buf.readUnsignedByte();\n                            position.set(Position.PREFIX_TEMP + 1, tempValue);\n                        }\n                        break;\n                    case 0x05:\n                        if (buf.readableBytes() >= 4) {\n                            String driverId = ByteBufUtil.hexDump(buf.readSlice(4));\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);\n                        }\n                        break;\n                }\n            }\n            return position;\n        } else {\n            // For unknown message types, create a basic position\n            getLastLocation(position, null);\n            return position;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}