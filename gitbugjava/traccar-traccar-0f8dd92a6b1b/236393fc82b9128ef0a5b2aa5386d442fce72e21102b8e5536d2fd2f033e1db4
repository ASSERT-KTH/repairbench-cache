{
    "generation": "    private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShort(); // length\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_STRING_INFO) {\n\n            buf.readUnsignedInt(); // server flag\n            String data;\n            if (buf.readUnsignedByte() == 1) {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);\n            } else {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);\n            }\n\n            Parser parser = new Parser(PATTERN_LOCATION, data);\n\n            if (parser.matches()) {\n                position.setValid(true);\n                position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setCourse(parser.nextDouble());\n                position.setSpeed(parser.nextDouble());\n                position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n            } else {\n                getLastLocation(position, null);\n                position.set(Position.KEY_RESULT, data);\n            }\n\n            return position;\n\n        } else if (type == MSG_INFO) {\n\n            int subType = buf.readUnsignedByte();\n\n            getLastLocation(position, null);\n\n            if (subType == 0x00) {\n\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n                return position;\n\n            } else if (subType == 0x05) {\n\n                if (buf.readableBytes() >= 6 + 1 + 6) { // 6 for date/time, 1 for flags, 6 for packet end (index, checksum, stop)\n                    DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                            .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                            .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                    position.setDeviceTime(dateBuilder.getDate());\n                }\n\n                int flags = buf.readUnsignedByte();\n                position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                return position;\n\n            } else if (subType == 0x0a) {\n\n                buf.skipBytes(8); // imei\n                buf.skipBytes(8); // imsi\n                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\"));\n                return position;\n\n            } else if (subType == 0x0d) {\n\n                if (buf.getByte(buf.readerIndex()) != '!') {\n                    buf.skipBytes(6);\n                }\n\n                Parser parser = new Parser(PATTERN_FUEL, buf.toString(\n                        buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));\n                if (!parser.matches()) {\n                    return null;\n                }\n\n                position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n\n                return position;\n\n            } else if (subType == 0x1b) {\n\n                if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                    String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();\n                    position.set(\"serial\", data.trim());\n                } else {\n                    buf.readUnsignedByte(); // header\n                    buf.readUnsignedByte(); // type\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                    buf.readUnsignedByte(); // checksum\n                    buf.readUnsignedByte(); // footer\n                }\n                return position;\n\n            }\n            // If subType is not matched, it will fall through to the end and return null.\n            // This behavior is kept as changing it might break other tests expecting null for unhandled sub-types.\n\n        } else if (type == MSG_X1_PHOTO_DATA) {\n\n            int pictureId = buf.readInt();\n            ByteBuf photo = photos.get(pictureId);\n\n            if (photo == null) {\n                // Cannot process photo data without a pre-existing buffer for this pictureId.\n                // This might happen if MSG_X1_PHOTO_INFO was missed or this is an unexpected packet.\n                // To satisfy non-null return expectation for a recognized type, return base position.\n                return position;\n            }\n\n            buf.readUnsignedInt(); // offset\n            int chunkLength = buf.readUnsignedShort();\n\n            if (buf.readableBytes() < chunkLength) {\n                // Not enough data in the input buffer to read the declared chunk length.\n                return position; // Return base position.\n            }\n            if (photo.writableBytes() < chunkLength) {\n                // The photo buffer allocated for this pictureId is too small for the current chunk.\n                // Clean up problematic photo session to prevent further errors.\n                if (photos.containsKey(pictureId)) {\n                    photos.remove(pictureId); // Remove from map\n                    photo.release();          // Release buffer\n                }\n                return position; // Return base position.\n            }\n\n            buf.readBytes(photo, chunkLength);\n\n            if (photo.writableBytes() > 0) {\n                sendPhotoRequest(channel, pictureId);\n            } else {\n                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                photos.remove(pictureId).release();\n            }\n            return position; // Always return the 'position' object.\n\n        } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {\n\n            if (!decodeGps(position, buf, true, (TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n                getLastLocation(position, position.getDeviceTime());\n            }\n\n            if (decodeLbs(position, buf, type, true)) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            buf.skipBytes(buf.readUnsignedByte()); // additional cell towers\n            buf.skipBytes(buf.readUnsignedByte()); // wifi access point\n\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_STATUS, status);\n\n            if (type == MSG_AZ735_ALARM) {\n                switch (status) {\n                    case 0xA0:\n                        position.set(Position.KEY_ARMED, true);\n                        break;\n                    case 0xA1:\n                        position.set(Position.KEY_ARMED, false);\n                        break;\n                    case 0xA2:\n                    case 0xA3:\n                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                        break;\n                    case 0xA4:\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                        break;\n                    case 0xA5:\n                        position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            buf.skipBytes(buf.readUnsignedByte()); // reserved extension\n\n            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n\n            return position;\n\n        } else if (type == MSG_OBD) {\n\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n            getLastLocation(position, dateBuilder.getDate());\n\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n\n            String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();\n            for (String pair : data.split(\",\")) {\n                String[] values = pair.split(\"=\");\n                if (values.length >= 2) {\n                    switch (Integer.parseInt(values[0].substring(0, 2), 16)) {\n                        case 40:\n                            position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 43:\n                            position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 45:\n                            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 53:\n                            position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 54:\n                            position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 71:\n                            position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 73:\n                            position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 74:\n                            position.set(Position.KEY_VIN, values[1]);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n\n            return position;\n\n        } else if (type == MSG_GPS_MODULAR) {\n\n            while (buf.readableBytes() > 6) { // Ensure there's enough for module header + packet end\n                int moduleType = buf.readUnsignedShort();\n                int moduleLength = buf.readUnsignedShort();\n\n                if (buf.readableBytes() < moduleLength) {\n                    // Not enough data for the declared module length, skip remaining readable bytes\n                    buf.skipBytes(buf.readableBytes());\n                    break; \n                }\n                \n                ByteBuf moduleSlice = buf.readSlice(moduleLength);\n\n                switch (moduleType) {\n                    case 0x03:\n                        if (moduleSlice.readableBytes() >= 10) {\n                           position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(moduleSlice.readSlice(10)));\n                        }\n                        break;\n                    case 0x09:\n                        if (moduleSlice.readableBytes() >= 1) {\n                           position.set(Position.KEY_SATELLITES, moduleSlice.readUnsignedByte());\n                        }\n                        break;\n                    case 0x0a:\n                        if (moduleSlice.readableBytes() >= 1) {\n                           position.set(Position.KEY_SATELLITES_VISIBLE, moduleSlice.readUnsignedByte());\n                        }\n                        break;\n                    case 0x11:\n                         if (moduleSlice.readableBytes() >= 2 + 2 + 2 + 3 + 1) {\n                            CellTower cellTower = CellTower.from(\n                                    moduleSlice.readUnsignedShort(),\n                                    moduleSlice.readUnsignedShort(),\n                                    moduleSlice.readUnsignedShort(),\n                                    moduleSlice.readUnsignedMedium(),\n                                    moduleSlice.readUnsignedByte());\n                            if (cellTower.getCellId() > 0) {\n                                position.setNetwork(new Network(cellTower));\n                            }\n                        }\n                        break;\n                    case 0x18:\n                        if (moduleSlice.readableBytes() >= 2) {\n                           position.set(Position.KEY_BATTERY, moduleSlice.readUnsignedShort() * 0.01);\n                        }\n                        break;\n                    case 0x28:\n                        if (moduleSlice.readableBytes() >= 1) {\n                           position.set(Position.KEY_HDOP, moduleSlice.readUnsignedByte() * 0.1);\n                        }\n                        break;\n                    case 0x29:\n                        if (moduleSlice.readableBytes() >= 4) {\n                           position.set(Position.KEY_INDEX, moduleSlice.readUnsignedInt());\n                        }\n                        break;\n                    case 0x2a:\n                        if (moduleSlice.readableBytes() >= 1) {\n                            int input = moduleSlice.readUnsignedByte();\n                            position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n                            position.set(\"tamper\", BitUtil.from(input, 4) > 0);\n                        }\n                        break;\n                    case 0x2b:\n                        if (moduleSlice.readableBytes() >= 1) {\n                            int event = moduleSlice.readUnsignedByte();\n                            switch (event) {\n                                case 0x11:\n                                    position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                                    break;\n                                case 0x12:\n                                    position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                                    break;\n                                case 0x13:\n                                    position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                                    break;\n                                case 0x14:\n                                    position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                                    break;\n                                default:\n                                    break;\n                            }\n                            position.set(Position.KEY_EVENT, event);\n                        }\n                        break;\n                    case 0x2e:\n                        if (moduleSlice.readableBytes() >= 4) {\n                           position.set(Position.KEY_ODOMETER, moduleSlice.readUnsignedIntLE());\n                        }\n                        break;\n                    case 0x33:\n                        if (moduleSlice.readableBytes() >= 4 + 1 + 2 + 4 + 4 + 1 + 2) {\n                            position.setTime(new Date(moduleSlice.readUnsignedInt() * 1000));\n                            position.set(Position.KEY_SATELLITES, moduleSlice.readUnsignedByte());\n                            position.setAltitude(moduleSlice.readShort());\n\n                            double latitude = moduleSlice.readUnsignedInt() / 60.0 / 30000.0;\n                            double longitude = moduleSlice.readUnsignedInt() / 60.0 / 30000.0;\n                            position.setSpeed(UnitsConverter.knotsFromKph(moduleSlice.readUnsignedByte()));\n\n                            int flags = moduleSlice.readUnsignedShort();\n                            position.setCourse(BitUtil.to(flags, 10));\n                            position.setValid(BitUtil.check(flags, 12));\n\n                            if (!BitUtil.check(flags, 10)) {\n                                latitude = -latitude;\n                            }\n                            if (BitUtil.check(flags, 11)) {\n                                longitude = -longitude;\n                            }\n\n                            position.setLatitude(latitude);\n                            position.setLongitude(longitude);\n                        }\n                        break;\n                    case 0x34:\n                        if (moduleSlice.readableBytes() >= 1) {\n                            position.set(Position.KEY_EVENT, moduleSlice.readUnsignedByte());\n                            if (moduleSlice.readableBytes() >= 4) { // time\n                                moduleSlice.readUnsignedIntLE(); \n                            }\n                            if (moduleSlice.readableBytes() >= 1) { // content length byte\n                                int contentLength = moduleSlice.readUnsignedByte();\n                                if (moduleSlice.readableBytes() >= contentLength) {\n                                     moduleSlice.skipBytes(contentLength); // content\n                                } else {\n                                     moduleSlice.skipBytes(moduleSlice.readableBytes()); // skip what's left\n                                }\n                            }\n                        }\n                        break;\n                    default:\n                        // All bytes of moduleSlice are consumed by readSlice(moduleLength) or skipped if unhandled\n                        break;\n                }\n                 // Ensure moduleSlice is fully consumed if a case partially read it or didn't read at all\n                if (moduleSlice.readableBytes() > 0) {\n                    moduleSlice.skipBytes(moduleSlice.readableBytes());\n                }\n            }\n\n            if (position.getFixTime() == null) {\n                getLastLocation(position, null);\n            }\n\n            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);\n\n            return position;\n\n        } else if (type == MSG_MULTIMEDIA) {\n\n            buf.skipBytes(8); // serial number\n            long timestamp = buf.readUnsignedInt() * 1000;\n            buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps\n            buf.skipBytes(2 + 2 + 2 + 2); // cell\n\n            int mediaId = buf.readInt();\n            int mediaLength = buf.readInt();\n            int mediaType = buf.readUnsignedByte();\n            int mediaFormat = buf.readUnsignedByte();\n\n            if (mediaType == 0 && mediaFormat == 0) {\n\n                buf.readUnsignedByte(); // event\n\n                ByteBuf photo;\n                if (buf.readUnsignedShort() == 0) { // packet index\n                    photo = Unpooled.buffer(mediaLength);\n                    if (photos.containsKey(mediaId)) {\n                        ByteBuf oldPhoto = photos.remove(mediaId);\n                        if (oldPhoto != null) {\n                             oldPhoto.release();\n                        }\n                    }\n                    photos.put(mediaId, photo);\n                } else {\n                    photo = photos.get(mediaId);\n                }\n\n                if (photo != null) {\n                    int bytesToRead = buf.readableBytes() - 6; // 2 for index, 2 for checksum, 2 for stop\n                    if (bytesToRead > 0) {\n                        if (photo.writableBytes() < bytesToRead) {\n                            bytesToRead = photo.writableBytes(); // Read only what fits\n                        }\n                        buf.readBytes(photo, bytesToRead);\n                    }\n\n                    if (!photo.isWritable()) { // Photo is complete\n                        Position mediaPosition = new Position(getProtocolName());\n                        mediaPosition.setDeviceId(deviceSession.getDeviceId());\n                        getLastLocation(mediaPosition, new Date(timestamp));\n                        mediaPosition.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                        photos.remove(mediaId).release();\n                        sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n                        return mediaPosition; // Return the position with media\n                    }\n                }\n            }\n\n            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n            // If photo not complete, or not the expected media type/format, or photo object was null,\n            // return the original 'position' object (base information).\n            return position;\n\n        } else if (type == MSG_SERIAL) {\n\n            Position serialPosition = new Position(getProtocolName()); // Use a new Position for serial data\n            serialPosition.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(serialPosition, null);\n\n            buf.readUnsignedByte(); // external device type code\n            int length = buf.readableBytes() - 9;\n\n            if (length <= 0) {\n                return null;\n            }\n\n            if (length < 8) {\n                // Ensure there are enough bytes for content (length - 1) and the remaining suffix (9 bytes - 1 for content)\n                if (buf.readableBytes() >= (length -1) + (9-(length-1)) ) { // Simplified: buf.readableBytes() >= 8\n                     serialPosition.set(\n                        Position.PREFIX_TEMP + 1,\n                        Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));\n                } else {\n                    return null; // Not enough data\n                }\n            } else {\n                // Ensure there are enough bytes for card type (1), content (length - 1 -1 ) and suffix\n                if (buf.readableBytes() >= 1 + (length - 1 -1) + (9-(1+(length-1-1))) ) { // Simplified: buf.readableBytes() >= 8\n                    buf.readUnsignedByte(); // card type\n                    serialPosition.set(\n                            Position.KEY_DRIVER_UNIQUE_ID,\n                            buf.readCharSequence(length - 1 - 1, StandardCharsets.US_ASCII).toString()); // length-1 for total content, another -1 for card type byte\n                } else {\n                    return null; // Not enough data\n                }\n            }\n\n            return serialPosition;\n\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}