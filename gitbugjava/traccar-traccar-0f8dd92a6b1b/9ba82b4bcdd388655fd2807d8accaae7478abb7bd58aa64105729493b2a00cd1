{
    "generation": "private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n        deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedShort(); // length\n    int type = buf.readUnsignedByte();\n\n    if (type == MSG_STRING_INFO) {\n\n        // Skip one\u2010byte server flag\n        buf.readUnsignedByte();\n\n        // Read all remaining bytes except CRC/footer as ASCII\n        String data = buf.readSlice(buf.readableBytes() - 6)\n                .toString(StandardCharsets.US_ASCII).trim();\n\n        Parser parser = new Parser(PATTERN_LOCATION, data);\n\n        if (parser.matches()) {\n            position.setValid(true);\n            position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n            position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n            position.setCourse(parser.nextDouble());\n            position.setSpeed(parser.nextDouble());\n            position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n        } else {\n            getLastLocation(position, null);\n            // Multi\u2011key/value (\"K1=V1;K2=V2;\u2026\")\n            if (data.contains(\";\")) {\n                for (String part : data.split(\";\")) {\n                    if (!part.contains(\"=\")) {\n                        continue;\n                    }\n                    String[] kv = part.split(\"=\", 2);\n                    String key = kv[0].trim();\n                    String value = kv[1].trim();\n                    if (key.equalsIgnoreCase(\"door\")) {\n                        position.set(Position.KEY_DOOR, \"1\".equals(value));\n                    } else if (key.equalsIgnoreCase(\"serial\")) {\n                        position.set(\"serial\", value);\n                    } else {\n                        position.set(key, value);\n                    }\n                }\n            // Single key/value (\"K=V\")\n            } else if (data.contains(\"=\")) {\n                String[] kv = data.split(\"=\", 2);\n                position.set(kv[0].trim(), kv[1].trim());\n            // Serial numbers or other colon data\n            } else if (data.contains(\":\")) {\n                position.set(\"serial\", data);\n            // Fallback: raw result\n            } else {\n                position.set(Position.KEY_RESULT, data);\n            }\n        }\n\n        return position;\n\n    } else if (type == MSG_INFO) {\n\n        int subType = buf.readUnsignedByte();\n\n        getLastLocation(position, null);\n\n        if (subType == 0x00) {\n\n            position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n            return position;\n\n        } else if (subType == 0x05) {\n\n            if (buf.readableBytes() >= 6 + 1 + 6) {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                position.setDeviceTime(dateBuilder.getDate());\n            }\n\n            int flags = buf.readUnsignedByte();\n            position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n            position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n            return position;\n\n        } else if (subType == 0x0a) {\n\n            buf.skipBytes(8); // imei\n            buf.skipBytes(8); // imsi\n            position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\"));\n            return position;\n\n        } else if (subType == 0x0d) {\n\n            if (buf.getByte(buf.readerIndex()) != '!') {\n                buf.skipBytes(6);\n            }\n\n            Parser parser = new Parser(PATTERN_FUEL, buf.toString(\n                    buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));\n            if (!parser.matches()) {\n                return null;\n            }\n\n            position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n            position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n            return position;\n\n        } else if (subType == 0x1b) {\n\n            if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                String serial = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString().trim();\n                position.set(\"serial\", serial);\n            } else {\n                buf.readUnsignedByte(); // header\n                buf.readUnsignedByte(); // type\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                buf.readUnsignedByte(); // checksum\n                buf.readUnsignedByte(); // footer\n            }\n            return position;\n\n        }\n\n        // Fallback for unknown subType\n        return position;\n\n    } else if (type == MSG_X1_PHOTO_DATA) {\n\n        int pictureId = buf.readInt();\n        ByteBuf photo = photos.get(pictureId);\n\n        buf.readUnsignedInt(); // offset\n        buf.readBytes(photo, buf.readUnsignedShort());\n\n        if (photo.writableBytes() > 0) {\n            sendPhotoRequest(channel, pictureId);\n        } else {\n            position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n            photos.remove(pictureId).release();\n        }\n\n    } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {\n\n        if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n            getLastLocation(position, position.getDeviceTime());\n        }\n        if (decodeLbs(position, buf, type, true)) {\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        }\n        buf.skipBytes(buf.readUnsignedByte()); // cell towers\n        buf.skipBytes(buf.readUnsignedByte()); // wifi\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_STATUS, status);\n        if (type == MSG_AZ735_ALARM) {\n            switch (status) {\n                case 0xA0:\n                    position.set(Position.KEY_ARMED, true);\n                    break;\n                case 0xA1:\n                    position.set(Position.KEY_ARMED, false);\n                    break;\n                case 0xA2:\n                case 0xA3:\n                    position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                    break;\n                case 0xA4:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n                case 0xA5:\n                    position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                    break;\n                default:\n                    break;\n            }\n        }\n        buf.skipBytes(buf.readUnsignedByte()); // extension\n        sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n\n    } else if (type == MSG_OBD) {\n\n        DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n        getLastLocation(position, dateBuilder.getDate());\n\n        position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n\n        String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();\n        for (String pair : data.split(\",\")) {\n            String[] values = pair.split(\"=\");\n            if (values.length >= 2) {\n                int code = Integer.parseInt(values[0].substring(0, 2), 16);\n                double val = Integer.parseInt(values[1], 16) * 0.01;\n                switch (code) {\n                    case 40:\n                        position.set(Position.KEY_ODOMETER, val);\n                        break;\n                    case 43:\n                        position.set(Position.KEY_FUEL_LEVEL, val);\n                        break;\n                    case 45:\n                        position.set(Position.KEY_COOLANT_TEMP, val);\n                        break;\n                    case 53:\n                        position.set(Position.KEY_OBD_SPEED, val);\n                        break;\n                    case 54:\n                        position.set(Position.KEY_RPM, val);\n                        break;\n                    case 71:\n                        position.set(Position.KEY_FUEL_USED, val);\n                        break;\n                    case 73:\n                        position.set(Position.KEY_HOURS, val);\n                        break;\n                    case 74:\n                        position.set(Position.KEY_VIN, values[1]);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return position;\n\n    } else if (type == MSG_GPS_MODULAR) {\n\n        while (buf.readableBytes() > 6) {\n            int moduleType = buf.readUnsignedShort();\n            int moduleLength = buf.readUnsignedShort();\n            switch (moduleType) {\n                case 0x03:\n                    position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));\n                    break;\n                case 0x09:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x0a:\n                    position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());\n                    break;\n                case 0x11:\n                    CellTower cellTower = CellTower.from(\n                            buf.readUnsignedShort(),\n                            buf.readUnsignedShort(),\n                            buf.readUnsignedShort(),\n                            buf.readUnsignedMedium(),\n                            buf.readUnsignedByte());\n                    if (cellTower.getCellId() > 0) {\n                        position.setNetwork(new Network(cellTower));\n                    }\n                    break;\n                case 0x18:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x28:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x29:\n                    position.set(Position.KEY_INDEX, buf.readUnsignedInt());\n                    break;\n                case 0x2a:\n                    int input = buf.readUnsignedByte();\n                    position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n                    position.set(\"tamper\", BitUtil.from(input, 4) > 0);\n                    break;\n                case 0x2b:\n                    int event = buf.readUnsignedByte();\n                    switch (event) {\n                        case 0x11:\n                            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                            break;\n                        case 0x12:\n                            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                            break;\n                        case 0x13:\n                            position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                            break;\n                        case 0x14:\n                            position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                            break;\n                        default:\n                            break;\n                    }\n                    position.set(Position.KEY_EVENT, event);\n                    break;\n                case 0x2e:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x33:\n                    position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    position.setAltitude(buf.readShort());\n                    double lat = buf.readUnsignedInt() / 60.0 / 30000.0;\n                    double lon = buf.readUnsignedInt() / 60.0 / 30000.0;\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                    int flags2 = buf.readUnsignedShort();\n                    position.setCourse(BitUtil.to(flags2, 10));\n                    position.setValid(BitUtil.check(flags2, 12));\n                    if (!BitUtil.check(flags2, 10)) {\n                        lat = -lat;\n                    }\n                    if (BitUtil.check(flags2, 11)) {\n                        lon = -lon;\n                    }\n                    position.setLatitude(lat);\n                    position.setLongitude(lon);\n                    break;\n                case 0x34:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    buf.readUnsignedIntLE(); // time\n                    buf.skipBytes(buf.readUnsignedByte()); // content\n                    break;\n                default:\n                    buf.skipBytes(moduleLength);\n                    break;\n            }\n        }\n\n        if (position.getFixTime() == null) {\n            getLastLocation(position, null);\n        }\n\n        sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);\n        return position;\n\n    } else if (type == MSG_MULTIMEDIA) {\n\n        buf.skipBytes(8); // serial number\n        long timestamp = buf.readUnsignedInt() * 1000;\n        buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps\n        buf.skipBytes(2 + 2 + 2 + 2);           // cell\n\n        int mediaId = buf.readInt();\n        int mediaLength = buf.readInt();\n        int mediaType = buf.readUnsignedByte();\n        int mediaFormat = buf.readUnsignedByte();\n\n        if (mediaType == 0 && mediaFormat == 0) {\n\n            buf.readUnsignedByte(); // event\n\n            ByteBuf photo;\n            if (buf.readUnsignedShort() == 0) {\n                photo = Unpooled.buffer(mediaLength);\n                if (photos.containsKey(mediaId)) {\n                    photos.remove(mediaId).release();\n                }\n                photos.put(mediaId, photo);\n            } else {\n                photo = photos.get(mediaId);\n            }\n\n            if (photo != null) {\n                buf.readBytes(photo, buf.readableBytes() - 3 * 2);\n                if (!photo.isWritable()) {\n                    position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, new Date(timestamp));\n                    position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                    photos.remove(mediaId).release();\n                }\n            }\n        }\n\n        sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n\n    } else if (type == MSG_SERIAL) {\n\n        position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceDeviceId());\n        getLastLocation(position, null);\n\n        buf.readUnsignedByte(); // external device type code\n        int len = buf.readableBytes() - 9; // adjust for line break/checksum/footer\n\n        if (len <= 0) {\n            return null;\n        } else if (len < 8) {\n            double val = Double.parseDouble(\n                    buf.readCharSequence(len - 1, StandardCharsets.US_ASCII).toString());\n            position.set(Position.PREFIX_TEMP + 1, val);\n        } else {\n            buf.readUnsignedByte(); // card type\n            String uid = buf.readCharSequence(len - 1, StandardCharsets.US_ASCII).toString();\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, uid);\n        }\n\n        return position;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}