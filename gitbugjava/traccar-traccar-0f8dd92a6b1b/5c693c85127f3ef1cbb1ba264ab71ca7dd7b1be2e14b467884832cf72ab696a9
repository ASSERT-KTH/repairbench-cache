{
    "generation": "private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n        deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedShort(); // length\n    int type = buf.readUnsignedByte();\n\n    if (type == MSG_STRING_INFO) {\n        buf.readUnsignedInt(); // server flag\n\n        String data;\n        if (buf.readUnsignedByte() == 1) {\n            int length = buf.readableBytes() - 4;\n            data = buf.readSlice(length).toString(StandardCharsets.UTF_16BE);\n        } else {\n            int length = buf.readableBytes() - 4;\n            data = buf.readSlice(length).toString(StandardCharsets.US_ASCII);\n        }\n\n        Parser parser = new Parser(PATTERN_LOCATION, data);\n\n        if (parser.matches()) {\n            position.setValid(true);\n            position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n            position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n            position.setCourse(parser.nextDouble());\n            position.setSpeed(parser.nextDouble());\n            position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n        } else {\n            getLastLocation(position, null);\n            position.set(Position.KEY_RESULT, data);\n        }\n\n        return position;\n\n    } else if (type == MSG_INFO) {\n\n        int subType = buf.readUnsignedByte();\n        getLastLocation(position, null);\n\n        switch (subType) {\n            case 0x00:\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n                return position;\n\n            case 0x05:\n                if (buf.readableBytes() >= 6 + 1 + 6) {\n                    DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                            .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                            .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                    position.setDeviceTime(dateBuilder.getDate());\n                }\n\n                int flags = buf.readUnsignedByte();\n                position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                return position;\n\n            case 0x0A:\n                buf.skipBytes(8); //imei\n                buf.skipBytes(8); //imsi\n                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"[^a-fA-F0-9]\", \"\"));\n                return position;\n\n            case 0x0D:\n                if (buf.readableBytes() >= 4 &&\n                        buf.getByte(buf.readerIndex()) != '!') {\n                    buf.skipBytes(6);\n                }\n                Parser parser = new Parser(PATTERN_FUEL,\n                        buf.toString(buf.readerIndex(),\n                                buf.readableBytes() - 6,\n                                StandardCharsets.US_ASCII));\n                if (!parser.matches()) {\n                    return null;\n                }\n\n                position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n                return position;\n\n            case 0x1B:\n                if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                    String data = buf.readCharSequence(buf.readableBytes() - 2, StandardCharsets.US_ASCII).toString();\n                    position.set(\"serial\", data.trim());\n                } else {\n                    buf.skipBytes(1); // header\n                    buf.skipBytes(1); // type\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                    buf.skipBytes(1); // checksum\n                    buf.skipBytes(1); // footer\n                }\n\n                return position;\n\n            default:\n                break;\n        }\n\n    } else if (type == MSG_X1_PHOTO_DATA) {\n\n        int pictureId = buf.readInt();\n        ByteBuf photo = photos.get(pictureId);\n\n        int offset = buf.readUnsignedInt();\n        buf.readBytes(photo, buf.readUnsignedShort());\n\n        if (photo.writableBytes() > 0) {\n            sendPhotoRequest(channel, pictureId);\n        } else {\n            position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n            photos.remove(pictureId).release();\n        }\n\n    } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {\n        if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n            getLastLocation(position, position.getDeviceTime());\n        }\n\n        if (decodeLbs(position, buf, type, true)) {\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        }\n\n        buf.skipBytes(buf.readUnsignedByte()); // additional cell towers\n        buf.skipBytes(buf.readUnsignedByte()); // wifi access point\n\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_STATUS, status);\n\n        if (type == MSG_AZ735_ALARM) {\n            switch (status) {\n                case 0xA0:\n                    position.set(Position.KEY_ARMED, true);\n                    break;\n                case 0xA1:\n                    position.set(Position.KEY_ARMED, false);\n                    break;\n                case 0xA2:\n                case 0xA3:\n                    position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                    break;\n                case 0xA4:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n                case 0xA5:\n                    position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        buf.skipBytes(buf.readUnsignedByte()); // reserved extension\n\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 4), null);\n\n    } else if (type == MSG_OBD) {\n        DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n        getLastLocation(position, dateBuilder.getDate());\n\n        position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n\n        String data = buf.readCharSequence(buf.readableBytes(), StandardCharsets.US_ASCII).toString();\n        for (String pair : data.split(\",\")) {\n            String[] values = pair.split(\"=\");\n            if (values.length >= 2) {\n                switch (Integer.parseInt(values[0].substring(0, 2), 16)) {\n                    case 40:\n                        position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);\n                        break;\n                    case 43:\n                        position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);\n                        break;\n                    case 45:\n                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);\n                        break;\n                    case 53:\n                        position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);\n                        break;\n                    case 54:\n                        position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);\n                        break;\n                    case 71:\n                        position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);\n                        break;\n                    case 73:\n                        position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);\n                        break;\n                    case 74:\n                        position.set(Position.KEY_VIN, values[1]);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        return position;\n\n    } else if (type == MSG_GPS_MODULAR) {\n\n        while (buf.readableBytes() > 6) {\n            int moduleType = buf.readUnsignedShort();\n            int moduleLength = buf.readUnsignedShort();\n\n            if (buf.readableBytes() < moduleLength) {\n                continue;\n            }\n\n            switch (moduleType) {\n                case 0x03:\n                    position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));\n                    break;\n                case 0x09:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());\n                    break;\n                case 0x11:\n                    CellTower cellTower = CellTower.from(\n                            buf.readUnsignedShort(),\n                            buf.readUnsignedShort(),\n                            buf.readUnsignedShort(),\n                            buf.readUnsignedMedium(),\n                            buf.readUnsignedByte());\n                    if (cellTower.getCellId() > 0) {\n                        position.setNetwork(new Network(cellTower));\n                    }\n                    break;\n                case 0x18:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x28:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x29:\n                    position.set(Position.KEY_INDEX, buf.readUnsignedInt());\n                    break;\n                case 0x2A:\n                    int input = buf.readUnsignedByte();\n                    position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n                    position.set(\"tamper\", BitUtil.from(input, 4) > 0);\n                    break;\n                case 0x2B:\n                    int event = buf.readUnsignedByte();\n                    switch (event) {\n                        case 0x11:\n                            position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                            break;\n                        case 0x12:\n                            position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                            break;\n                        case 0x13:\n                            position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                            break;\n                        case 0x14:\n                            position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                            break;\n                        default:\n                            break;\n                    }\n                    position.set(Position.KEY_EVENT, event);\n                    break;\n                case 0x2E:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x33:\n                    position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    position.setAltitude(buf.readShort());\n\n                    double latitude = buf.readInt() / 60.0 / 36000.0;\n                    double longitude = buf.readInt() / 60.0 / 36000.0;\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n\n                    int flags = buf.readUnsignedShort();\n\n                    if (BitUtil.check(flags, 10)) {\n                        latitude *= -1;\n                        position.setLat(logitude);\n                    }\n\n                    if (BitUtil.check(flags, 11)) {\n                        longitude *= -1;\n                        position.setLon(logitude);\n\n                    }\n\n                    position.setLatitude(latitude);\n                    position.setLongitude(longitude);\n\n                    position.setLatitude(latitude);\n                    position.setCourse(BitUtil.to(flags, 10));\n                    position.setValid(BitUtil.check(flags, 12));\n                    break;\n                case 0x34:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    buf.readUnsignedIntLE(); // time\n                    buf.skipBytes(buf.readUnsignedByte()); // content\n                    break;\n                default:\n                    buf.skipBytes(moduleLength);\n                    break;\n            }\n        }\n\n        if (position.getFixTime() == null) {\n            getLastLocation(position, null);\n        }\n\n        sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);\n\n    } else if (type == MSG_MULTIMEDIA) {\n\n        buf.skipBytes(8); // serial number\n        long timestamp = buf.readUnsignedInt() * 1000;\n        buf.skipBytes(16); // gps and cell info\n        int mediaId = buf.readInt();\n        int mediaLength = buf.readInt();\n        int mediaType = buf.readUnsignedByte();\n        int mediaFormat = buf.readUnsignedByte();\n\n        if (mediaType == 0 && mediaFormat == 0) {\n            buf.readUnsignedByte(); // event\n\n            ByteBuf photo;\n            if (buf.readUnsignedShort() == 0) {\n                photo = Unpooled.buffer(mediaLength);\n                if (photos.containsKey(mediaId)) {\n                    photos.remove(mediaId).release();\n                }\n                photos.put(mediaId, photo);\n            } else {\n                photo = photos.get(mediaId);\n            }\n\n            if (photo != null) {\n                buf.readBytes(photo, buf.readableBytes());\n                if (!photo.isWritable()) {\n                    position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, new Date(timestamp));\n                    position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                    photos.remove(mediaId).release();\n                }\n            }\n        }\n\n        sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 4), null);\n\n    } else if (type == MSG_SERIAL) {\n        position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        buf.readUnsignedByte(); // external device type code\n        int length = buf.readableBytes() - 6; // line break + checksum + index + checksum + footer\n\n        if (length <= 0) {\n            return null;\n        } else if (length < 8) {\n            position.set(\n                    Position.PREFIX_TEMP + 1,\n                    Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));\n        } else {\n            buf.readUnsignedByte(); // card type\n            position.set(\n                    Position.KEY_DRIVER_UNIQUE_ID,\n                    buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());\n        }\n\n        return position;\n\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}