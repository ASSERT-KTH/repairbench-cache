{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // This is the main handling for String values. Delegates to other methods for other types\n        String text = p.getValueAsString();\n        if (text != null) { // has String representation\n            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n                // 04-Feb-2013, tatu: Usually should become null; but not always\n                return _deserializeFromEmptyString();\n            }\n            // If we have non-empty String, must parse it:\n            Exception cause = null;\n            T result = null;\n            try {\n                // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n                //    indicated error; but that seems wrong. Should be able to return\n                //    `null` as value.\n                result = _deserialize(text, ctxt);\n            } catch (IllegalArgumentException | MalformedURLException e) {\n                // Standard type conversion failures result in IAE/ME; allow mapping\n                // handlers to possibly handle these.\n                cause = e;\n            }\n            // 28-May-2020, tatu: Not sure if any implementations would throw plain\n            //   IOException, but maybe? Let's treat same way as IAE/ME\n            // Also: Make sure we don't inadvertently catch JsonMappingException itself, being IOException\n            catch (IOException e) {\n                if (e instanceof JsonMappingException) { // perhaps shouldn't have happened but...\n                    throw e;\n                }\n                cause = e;\n            }\n\n            // Ok: if we got null back, or have exception, call Problem Handler\n            // 16-Oct-2017, tatu: As per [databind#1629] allow ProblemHandler to deal\n            if (result == null || cause != null) {\n                String msg = \"not a valid textual representation\";\n                if (cause != null) {\n                    String m2 = cause.getMessage();\n                    if (m2 != null) {\n                        msg = msg + \", problem: \"+m2;\n                    }\n                }\n                // Note: this call may handle it, by returning value or throwing exception\n                // If handler returns `POISON_PILL` marker, means \"not handled\"\n                T handlerResult = (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);\n                if (handlerResult != DeserializationContext.POISON_PILL) {\n                    return handlerResult;\n                }\n                // If not handled, let's throw the exception we created\n                JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n                if (cause != null) {\n                    e.initCause(cause);\n                }\n                throw e;\n            }\n            // Otherwise, we are good, return the value\n            return result;\n        }\n\n        // If not-a-string, check other cases\n        JsonToken t = p.getCurrentToken();\n        // [databind#381]\n        if (t == JsonToken.START_ARRAY) {\n            return _deserializeFromArray(p, ctxt);\n        }\n        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n            // Trivial cases; null to null, instance of type itself returned as is\n            Object ob = p.getEmbeddedObject();\n            if (ob == null) {\n                return null;\n            }\n            if (_valueClass.isAssignableFrom(ob.getClass())) {\n                return (T) ob;\n            }\n            // 30-Sep-2018, tatu: May need coercion, similar to String coercion\n            // Let's assume this is case for CLOBs, BYTE[]\n            return _deserializeEmbedded(ob, ctxt);\n        }\n        // Otherwise can not handle\n        return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}