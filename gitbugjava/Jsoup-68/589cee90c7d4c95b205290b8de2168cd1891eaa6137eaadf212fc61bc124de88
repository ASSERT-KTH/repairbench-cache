{
    "generation": "    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope\n        // Limits the number of nodes traversed up the stack to prevent parser loops and bugs\n        final int SearchDepthLimit = 100; // As defined in HtmlTreeBuilder constant, kept local for clarity of fix scope\n        final int bottom = stack.size() - 1; // The current node position\n\n        // The loop should check elements from 'bottom' upwards, but only up to 'SearchDepthLimit' levels,\n        // or until the root (index 0) is reached.\n        // Calculate the highest index we can reach (lowest index number)\n        // Spec implies loop counter starting at 0, incrementing, and stopping *before* check if counter >= limit.\n        // This means at most 'limit' iterations (0 to limit-1).\n        // Iteration 0 checks index 'bottom'.\n        // Iteration 'limit - 1' checks index 'bottom - (limit - 1)'.\n        // So the lowest index to check is 'bottom - limit + 1'.\n        final int top = Math.max(0, bottom - SearchDepthLimit + 1);\n\n        for (int pos = bottom; pos >= top; pos--) {\n            final String elName = stack.get(pos).nodeName();\n            if (inSorted(elName, targetNames))\n                return true;\n            if (inSorted(elName, baseTypes))\n                return false;\n            if (extraTypes != null && inSorted(elName, extraTypes))\n                return false;\n        }\n        // Validate.fail(\"Should not be reachable\"); // Commented out original validation failure point\n        return false; // Did not find target element within scope limit\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}