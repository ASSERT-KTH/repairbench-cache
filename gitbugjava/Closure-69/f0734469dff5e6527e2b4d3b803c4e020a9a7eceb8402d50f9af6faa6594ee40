{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      // Try to determine extern status from the function's source node first\n      Node functionNode = functionType.getSource();\n      if (functionNode != null) {\n          // Check JSDoc on the function node itself\n          JSDocInfo functionJSDocInfo = NodeUtil.getBestJSDocInfo(functionNode);\n          if (functionJSDocInfo != null && functionJSDocInfo.isExterns()) {\n              isExtern = true;\n          } else {\n              // Fallback to checking the source file name associated with the node\n              String sourceName = functionNode.getSourceFileName();\n              if (sourceName != null) {\n                  CompilerInput functionSource = compiler.getInput(sourceName);\n                  if (functionSource != null && functionSource.isExtern()) {\n                      isExtern = true;\n                  }\n              }\n          }\n      } else {\n          // Fallback to the JSDoc associated with the FunctionType (less reliable)\n          JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n          if (functionJSDocInfo != null) {\n              String sourceName = functionJSDocInfo.getSourceName();\n               if (sourceName != null) {\n                 CompilerInput functionSource = compiler.getInput(sourceName);\n                 if (functionSource != null) {\n                    isExtern = functionSource.isExtern();\n                 }\n               }\n          }\n      }\n\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explcit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      // Check if 'this' is constrained (not unknown and not the default Object type)\n      boolean requiresSpecificThis = !thisType.isUnknownType() &&\n          !(thisType.isObjectType() && thisType.toObjectType().isNativeObjectType() && \"Object\".equals(thisType.toObjectType().getReferenceName()));\n\n      // Check if the call is made directly on a property access (method call)\n      boolean isMethodCall = child.isGetProp() || child.isGetElem();\n\n      if (requiresSpecificThis && !isMethodCall) {\n          // Report warning for calls like `f()` or `(cond ? foo : bar)()`\n          // when `f` or `foo`/`bar` require a specific `this`.\n          // We don't check for .call/.apply here, assuming other checks handle them.\n          report(t, n, FUNCTION_WITH_THIS_TYPE_MUST_BE_CALLED_AS_METHOD, childType.toString());\n      }\n\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}