{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      // Note: functionJSDocInfo can be null if the function type is created\n      // by code rather than parsed from source.\n      if(functionJSDocInfo != null && functionJSDocInfo.getSourceName() != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        // functionSource can be null if the function is defined in a\n        // different compilation unit.\n        if (functionSource != null) {\n           isExtern = functionSource.isExtern();\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM context.\n      JSType fnThisType = functionType.getTypeOfThis();\n      // TODO(johnlenz): consider making isExplicitThis a method of FunctionType\n      // isLoose indicates that the 'this' type is not strictly enforced.\n      boolean isLoose = child.getBooleanProp(Node.FREE_CALL);\n      // An explicit 'this' type is specified if it's not unknown and not <All>.\n      // The global 'this' is not considered explicit. Native Object is the\n      // expected 'this' for unbound functions.\n      boolean isExplicitThis = fnThisType != null &&\n          !fnThisType.isUnknownType() &&\n          !fnThisType.isAllType() && // different from UNKNOWN\n          !fnThisType.isEquivalentTo(registry.getNativeType(JSTypeNative.GLOBAL_THIS));\n\n      // Is the call performed as a method call?\n      boolean isMethodCall = child.isGetProp() || child.isGetElem();\n\n      // Constructors and interfaces are subtypes of FunctionType, but don't need this check.\n      // Constructors implicitly create the 'this' type. Interfaces can't be called.\n      // The check should only apply to regular functions with a @this annotation.\n      if (isExplicitThis && !isMethodCall && !isLoose &&\n          !functionType.isConstructor() && !functionType.isInterface()) {\n        report(t, n, WRONG_THIS_ERROR, functionType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      // Handle calls to types that are not FunctionType, like boxed primitives.\n      ensureTyped(t, n);\n    }\n\n    // TODO(johnlenz): Add something to check for calls of RegExp objects, which is not\n    // supported by IE. Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}