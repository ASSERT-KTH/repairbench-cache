{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        // Check sourceName and functionSource for null, as compiler.getInput can return null.\n        if (sourceName != null) {\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          if (functionSource != null) {\n             isExtern = functionSource.isExtern();\n          }\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM context.\n      JSType thisType = functionType.getTypeOfThis();\n      // Check if thisType is explicitly defined (i.e., not unknown).\n      // A function has an explicit 'this' type if specified via @this.\n      // functionType.getTypeOfThis() returns UnknownType if not specified.\n      boolean hasExplicitThis = !thisType.isUnknownType();\n\n      // Check if the call is made directly on the function expression (e.g., f())\n      // as opposed to a method call (e.g., obj.f() or obj['f']()).\n      boolean isDirectCall = !child.isGetProp() && !child.isGetElem();\n\n      if (hasExplicitThis && isDirectCall) {\n        // Report warning: Function with explicit 'this' called directly.\n        // This covers cases like f() or (condition ? foo : bar)().\n        report(t, n, FUNCTION_CALLED_ON_WRONG_TYPE, functionType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}