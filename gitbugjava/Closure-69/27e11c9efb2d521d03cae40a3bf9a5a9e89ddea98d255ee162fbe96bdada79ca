{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      // Check source file of the function definition JSDoc, if available.\n      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        // SourceName might be null if the function is defined synthetically.\n        if (sourceName != null) {\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          // functionSource might be null if the sourceName does not exist in the compiler inputs.\n          // This can happen if the functionType is created programmatically.\n          if (functionSource != null) {\n             isExtern = functionSource.isExtern();\n          }\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types (including methods) must be called\n      // in a way that sets the 'this' context correctly, typically via property access\n      // (GETPROP/GETELEM) or using Function.prototype.call/apply.\n      JSType expectedThisType = functionType.getTypeOfThis();\n      // Need the registry to access the global 'this' type.\n      JSType globalThis = registry.getNativeType(JSTypeNative.GLOBAL_THIS);\n\n      // Check if 'this' is explicitly specified or inferred as a specific object type\n      // which is not unknown, not NoObjectType, and not the global this.\n      // Functions explicitly annotated with @this {None} have NoObjectType and are excluded.\n      // Functions bound to the global 'this' are also excluded.\n      boolean requiresSpecificThis = !expectedThisType.isUnknownType() &&\n                                     expectedThisType.isObjectType() &&\n                                     !expectedThisType.isNoObjectType() &&\n                                     expectedThisType != globalThis;\n\n      // Check if the function is being called directly (e.g., \"f()\")\n      // rather than as a method (e.g., \"obj.f()\", \"obj['f']()\").\n      // Calls via .call or .apply are implicitly handled because the child node\n      // would be a GETPROP (e.g., `f.call`), thus `isDirectCall` would be false.\n      boolean isDirectCall = !(child.isGetProp() || child.isGetElem());\n\n      // If the function requires a specific 'this' and is called directly,\n      // then the 'this' context is likely incorrect (usually the global 'this').\n      if (requiresSpecificThis && isDirectCall) {\n           // Report the error, indicating that the function needs to be called\n           // with a specific 'this' type.\n           // Example: /** @this {MyClass} */ function f() {}; f(); <-- error\n           // Example: var m = myObj.method; m(); <-- error\n           // Example: (cond ? myObj.m1 : myObj.m2)(); <-- error\n           report(t, n, WRONG_THIS_ERROR, expectedThisType.toString(), childType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}