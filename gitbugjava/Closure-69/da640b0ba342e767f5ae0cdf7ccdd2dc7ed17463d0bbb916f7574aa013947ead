{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      // TODO(nicksantos): Add a test case for this isExterns check.\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        if (sourceName != null) {\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          // NOTE(nicksantos): We would really like to use the input's\n          // isExtern method, but FunctionType#getSourceName does not\n          // necessarily return the same path as InputId#getName.\n          isExtern = functionSource != null && functionSource.isExtern();\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          !child.isQualifiedName() && // Allow calls like goog.base(this).\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM, or be the first operand of a CALL/APPLY.\n      // TODO(johnlenz): Add checks for CALL/APPLY/BIND.\n      JSType thisType = functionType.getTypeOfThis();\n      // A function requires a specific 'this' if its this-type is not unknown\n      // and not the root Object type.\n      boolean requiresExplicitThis = !thisType.isUnknownType() &&\n          !thisType.isEquivalentTo(registry.getNativeType(OBJECT_TYPE)) &&\n          // Added !functionType.isConstructor() check to avoid conflicting\n          // checks with CONSTRUCTOR_NOT_CALLABLE. Calling a constructor\n          // without new is checked above.\n          !functionType.isConstructor();\n\n      // We check if the call is made without a receiver object.\n      // Calls like obj.method() or obj['method']() have child as GETPROP/GETELEM.\n      // Calls like f() or (condition ? foo : bar)() have child as NAME or HOOK.\n      if (requiresExplicitThis && !(child.isGetProp() || child.isGetElem())) {\n        report(t, n, MISSING_THIS, functionType.toString());\n      }\n\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO(user): Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}