{
    "generation": "    /**\n     * Converts an old style id to a new style id.\n     *\n     * @param id  the old style id\n     * @return the new style id, null if not found\n     */\n    private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            // The list is derived from TimeZone.getAvailableIDs() using JDK 1.4\n            // Some other IDs were added - CET, EET, MET, WET\n            // I have studied the list of short zone ids provided by ZoneInfoCompiler\n            // and they seem to conflict in some cases. Joda-Time will use the\n            // long form zone ids by preference.\n            map = new HashMap<String, String>();\n            map.put(\"GMT\", \"UTC\"); // Included in ZoneInfoCompiler, mapping is different (\"Etc/GMT\")\n            map.put(\"MIT\", \"Pacific/Apia\"); // Included in ZoneInfoCompiler\n            map.put(\"HST\", \"Pacific/Honolulu\");  // Included in ZoneInfoCompiler, mapping is different (\"US/Hawaii\")\n            map.put(\"AST\", \"America/Anchorage\"); // Included in ZoneInfoCompiler, mapping is different (\"US/Alaska\")\n            map.put(\"PST\", \"America/Los_Angeles\"); // Included in ZoneInfoCompiler, mapping is different (\"US/Pacific\")\n            map.put(\"MST\", \"America/Denver\");  // Included in ZoneInfoCompiler, mapping is different (\"US/Mountain\")\n            map.put(\"PNT\", \"America/Phoenix\"); // Included in ZoneInfoCompiler, mapping is different (\"US/Arizona\")\n            map.put(\"CST\", \"America/Chicago\"); // Included in ZoneInfoCompiler, mapping is different (\"US/Central\")\n            map.put(\"EST\", \"America/New_York\");  // Included in ZoneInfoCompiler, mapping is different (\"US/Eastern\")\n            map.put(\"IET\", \"America/Indiana/Indianapolis\"); // Included in ZoneInfoCompiler, mapping is different (\"US/East-Indiana\")\n            map.put(\"PRT\", \"America/Puerto_Rico\"); // Included in ZoneInfoCompiler\n            map.put(\"CNT\", \"America/St_Johns\"); // Included in ZoneInfoCompiler, mapping is different (\"Canada/Newfoundland\")\n            map.put(\"AGT\", \"America/Argentina/Buenos_Aires\"); // Included in ZoneInfoCompiler, mapping is different (\"America/Buenos_Aires\")\n            map.put(\"BET\", \"America/Sao_Paulo\"); // Included in ZoneInfoCompiler, mapping is different (\"Brazil/East\")\n            map.put(\"WET\", \"WET\"); // Added, assumes 'WET' is the canonical ID\n            map.put(\"CET\", \"CET\"); // Added, assumes 'CET' is the canonical ID\n            map.put(\"MET\", \"CET\"); // Added, mapping based on TZDB commentary, assumes 'CET' is canonical. ZoneInfoCompiler maps MET to Asia/Tehran\n            map.put(\"ECT\", \"CET\"); // Included in ZoneInfoCompiler, mapping is different (\"Europe/Paris\"). Mapping to CET based on common practice.\n            map.put(\"ART\", \"Africa/Cairo\"); // Included in ZoneInfoCompiler, mapping is different (\"Egypt\")\n            map.put(\"CAT\", \"Africa/Harare\"); // Included in ZoneInfoCompiler\n            map.put(\"EET\", \"EET\"); // Added, assumes 'EET' is the canonical ID\n            map.put(\"EAT\", \"Africa/Addis_Ababa\"); // Included in ZoneInfoCompiler\n            map.put(\"NET\", \"Asia/Yerevan\"); // Included in ZoneInfoCompiler, mapping is different (\"Asia/Dubai\") - JDK 1.4 linked Armenia to NET not Dubai\n            map.put(\"PLT\", \"Asia/Karachi\"); // Included in ZoneInfoCompiler\n            map.put(\"IST\", \"Asia/Kolkata\"); // Included in ZoneInfoCompiler, mapping is different (\"Asia/Calcutta\")\n            map.put(\"BST\", \"Asia/Dhaka\"); // Included in ZoneInfoCompiler\n            map.put(\"VST\", \"Asia/Ho_Chi_Minh\"); // Included in ZoneInfoCompiler, mapping is different (\"Asia/Saigon\")\n            map.put(\"CTT\", \"Asia/Shanghai\"); // Included in ZoneInfoCompiler, mapping is different (\"Asia/Hong_Kong\") - JDK 1.4 linked China to CTT not Hong Kong\n            map.put(\"JST\", \"Asia/Tokyo\"); // Included in ZoneInfoCompiler, mapping is different (\"Japan\")\n            map.put(\"ACT\", \"Australia/Darwin\"); // Included in ZoneInfoCompiler\n            map.put(\"AET\", \"Australia/Sydney\"); // Included in ZoneInfoCompiler\n            map.put(\"SST\", \"Pacific/Guadalcanal\"); // Included in ZoneInfoCompiler\n            map.put(\"NST\", \"Pacific/Auckland\"); // Included in ZoneInfoCompiler, mapping is different (\"NZ\")\n\n            // These keys are mapped directly to themselves in the test for compatibility\n            // map.put(\"WET\", \"Europe/London\"); // Original mapping\n            // map.put(\"EET\", \"Europe/Bucharest\"); // Original mapping\n            // map.put(\"MET\", \"Asia/Tehran\"); // Original mapping\n\n            cZoneIdConversion = map;\n        }\n        return map.get(id);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}