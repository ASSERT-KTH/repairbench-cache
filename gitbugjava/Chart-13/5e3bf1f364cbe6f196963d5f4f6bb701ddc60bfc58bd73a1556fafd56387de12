{
    "generation": "    /**\n     * Arranges the items within a container that has dimensions fixed in both\n     * directions.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            // Constraint c1: Width fixed, Height ranged up to available constraint height\n            Range heightRange1 = new Range(0.0, constraint.getHeight());\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, heightRange1,\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n\n        // Calculate height remaining for bottom block (clamp to non-negative)\n        double heightRemaining1 = Math.max(0.0, constraint.getHeight() - h[0]);\n\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n             // Constraint c2: Width fixed, Height ranged up to remaining height\n             Range heightRange2 = new Range(0.0, heightRemaining1);\n             RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                     LengthConstraintType.FIXED, 0.0, heightRange2,\n                     LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n\n        // Calculate fixed height for the middle row (clamp to non-negative)\n        h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);\n\n        double widthAvailable = constraint.getWidth(); // Width available for L, R, C\n\n        if (this.leftBlock != null) {\n            // Constraint c3: Width ranged up to available width, Height fixed at h[2]\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, widthAvailable),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n\n        // Width remaining for R, C (clamp to non-negative)\n        double widthRemaining1 = Math.max(0.0, widthAvailable - w[2]);\n\n        h[3] = h[2]; // Right block has same fixed height\n        if (this.rightBlock != null) {\n            // Constraint c4: Width ranged up to remaining width, Height fixed at h[3]\n             // Ensure the upper bound of the range is not less than the lower bound (0.0)\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, widthRemaining1), // Use clamped remaining width\n                    LengthConstraintType.RANGE, h[3], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n\n        // Width remaining for C (clamp to non-negative)\n        double widthRemaining2 = Math.max(0.0, widthRemaining1 - w[3]);\n\n        h[4] = h[2]; // Center block has same fixed height\n        w[4] = widthRemaining2; // Center block gets the final remaining width\n\n        // Constraint c5: Fixed width w[4], fixed height h[4]\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        // Set bounds using calculated w[0..4] and h[0..4]\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n\n        // Return the original fixed constraint size\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}