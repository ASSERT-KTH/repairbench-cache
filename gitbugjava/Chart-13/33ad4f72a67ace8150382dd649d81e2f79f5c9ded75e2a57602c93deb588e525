{
    "generation": "    /**\n     * Arranges the items within a container. This method handles fixed width\n     * constraints but adapts calculation based on the height constraint type.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth(); // Container width is fixed\n\n        // --- Top Block ---\n        if (this.topBlock != null) {\n            // Constraint is fixed width, height constraint from input constraint\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, constraint.getHeight(),\n                    constraint.getHeightRange(), constraint.getHeightConstraintType());\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        } else {\n            h[0] = 0.0;\n        }\n\n        // --- Bottom Block ---\n        w[1] = w[0]; // Bottom block also uses fixed container width\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2;\n            LengthConstraintType hConsType = constraint.getHeightConstraintType();\n            if (hConsType == LengthConstraintType.NONE) {\n                 // Fixed width, NONE height constraint for bottom block\n                 c2 = new RectangleConstraint(w[1], null, LengthConstraintType.FIXED,\n                         0.0, null, LengthConstraintType.NONE);\n            } else { // FIXED or RANGE height for container\n                 // Calculate remaining height range [0, max(0, H_upper - h[0])]\n                 double H_upper = constraint.getHeightRange().getUpperBound();\n                 Range R = new Range(0.0, Math.max(0.0, H_upper - h[0]));\n                 // Constraint type for bottom block should be RANGE to allow flexibility within remaining space\n                 c2 = new RectangleConstraint(w[1], null, LengthConstraintType.FIXED,\n                         0.0, R, LengthConstraintType.RANGE);\n            }\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        } else {\n            h[1] = 0.0;\n        }\n\n        // --- Determine Middle Row Height Constraint ---\n        // This constraint applies to left, right, and center blocks if container height is FIXED or RANGE\n        double middleRowConstraintHeight = 0.0; // Target fixed height if applicable\n        Range middleRowConstraintRange = null; // Target range if applicable\n        LengthConstraintType middleRowConstraintType = LengthConstraintType.NONE; // Default is no height constraint\n\n        LengthConstraintType hConsType = constraint.getHeightConstraintType();\n        if (hConsType == LengthConstraintType.FIXED) {\n             // Calculate fixed height available for the middle row\n             middleRowConstraintHeight = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);\n             middleRowConstraintType = LengthConstraintType.FIXED;\n             middleRowConstraintRange = new Range(middleRowConstraintHeight, middleRowConstraintHeight);\n        } else if (hConsType == LengthConstraintType.RANGE) {\n             double H_upper = constraint.getHeightRange().getUpperBound();\n             // Max height available for middle row based on container range and top/bottom heights\n             double maxMiddleHeight = Math.max(0.0, H_upper - h[1] - h[0]);\n             middleRowConstraintType = LengthConstraintType.RANGE;\n             // Height range for middle blocks is [0, maxMiddleHeight]\n             middleRowConstraintRange = new Range(0.0, maxMiddleHeight);\n             // fixedHeight argument (middleRowConstraintHeight) is not used for RANGE type\n        } // else type remains NONE, middle blocks determine their own height\n\n\n        // --- Left Block ---\n        Size2D sizeL = Size2D.ZERO;\n        if (this.leftBlock != null) {\n             // Width constraint: Range [0, containerWidth]\n             Range widthRange3 = new Range(0.0, constraint.getWidth());\n             // Height constraint determined above\n             RectangleConstraint c3 = new RectangleConstraint(0.0, widthRange3, LengthConstraintType.RANGE,\n                      middleRowConstraintHeight, middleRowConstraintRange, middleRowConstraintType);\n             sizeL = this.leftBlock.arrange(g2, c3);\n             w[2] = sizeL.width;\n        } else {\n             w[2] = 0.0;\n        }\n\n        // --- Right Block ---\n        Size2D sizeR = Size2D.ZERO;\n        if (this.rightBlock != null) {\n             // Width constraint: Range [0, max(0, containerWidth - w[2])]\n             Range widthRange4 = new Range(0.0, Math.max(0.0, constraint.getWidth() - w[2]));\n             // Height constraint determined above\n             RectangleConstraint c4 = new RectangleConstraint(0.0, widthRange4, LengthConstraintType.RANGE,\n                      middleRowConstraintHeight, middleRowConstraintRange, middleRowConstraintType);\n             sizeR = this.rightBlock.arrange(g2, c4);\n             w[3] = sizeR.width;\n        } else {\n             w[3] = 0.0;\n        }\n\n        // --- Center Block ---\n        Size2D sizeC = Size2D.ZERO;\n        // Width for center block is fixed to remaining space\n        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);\n        if (this.centerBlock != null) {\n            // Height constraint determined above\n            RectangleConstraint c5 = new RectangleConstraint(w[4], null, LengthConstraintType.FIXED,\n                     middleRowConstraintHeight, middleRowConstraintRange, middleRowConstraintType);\n            sizeC = this.centerBlock.arrange(g2, c5);\n            // Actual width may differ if block behaviour overrides, but w[4] is the constraint.\n            // We use the calculated w[4] for layout.\n        }\n\n        // --- Determine Actual Middle Row Height ---\n        // The actual height is the max of the arranged heights of L, R, C blocks.\n        double middleRowActualHeight = Math.max(sizeL.height, Math.max(sizeR.height, sizeC.height));\n\n        // If the container height was constrained (FIXED or RANGE), the actual middle height\n        // cannot exceed the constraint calculated earlier.\n        if (hConsType == LengthConstraintType.FIXED) {\n             // Clip actual height to the calculated fixed constraint height\n             middleRowActualHeight = Math.min(middleRowActualHeight, middleRowConstraintHeight);\n        } else if (hConsType == LengthConstraintType.RANGE) {\n             // Clip actual height to the upper bound of the calculated range constraint\n             middleRowActualHeight = Math.min(middleRowActualHeight, middleRowConstraintRange.getUpperBound());\n        }\n        // Ensure non-negative height regardless of calculations\n        middleRowActualHeight = Math.max(0.0, middleRowActualHeight);\n\n\n        // Assign the determined actual middle row height for layout\n        h[2] = middleRowActualHeight; // Actual height for Left\n        h[3] = middleRowActualHeight; // Actual height for Right\n        h[4] = middleRowActualHeight; // Actual height for Center\n\n        // --- Set Bounds ---\n        double currentY = 0.0;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, currentY, w[0], h[0]));\n            currentY += h[0];\n        }\n        double middleY = currentY; // Y-coordinate for the middle row\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, middleY, w[2], h[2]));\n        }\n        if (this.centerBlock != null) {\n            // Center block starts after left block\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], middleY, w[4], h[4]));\n        }\n        if (this.rightBlock != null) {\n            // Right block starts after left and center blocks\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], middleY, w[3], h[3]));\n        }\n        currentY += middleRowActualHeight; // Advance Y past the middle row\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, currentY, w[1], h[1]));\n            // currentY += h[1]; // Update Y if needed later\n        }\n\n        // --- Return Total Size ---\n        // Calculate the total required height based on arranged components\n        double totalHeight = h[0] + middleRowActualHeight + h[1];\n        // The result width is always the fixed constraint width\n        double resultWidth = constraint.getWidth();\n\n        // Apply the original container height constraint to the calculated total height\n        double resultHeight = totalHeight;\n        if (hConsType == LengthConstraintType.FIXED) {\n            // If container height was fixed, return that fixed height\n            resultHeight = constraint.getHeight();\n        } else if (hConsType == LengthConstraintType.RANGE) {\n            // If container height was a range, constrain the calculated height by that range\n            resultHeight = constraint.getHeightRange().constrain(totalHeight);\n        } // else (hConsType == NONE), resultHeight remains the calculated totalHeight\n\n        return new Size2D(resultWidth, resultHeight);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}