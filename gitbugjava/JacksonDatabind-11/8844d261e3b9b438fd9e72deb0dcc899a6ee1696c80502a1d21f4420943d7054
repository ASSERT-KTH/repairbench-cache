{
    "generation": "    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n    {\n        final String name = type.getName();\n        // 19-Mar-2015: Without context, all we can check are bounds.\n        if (context == null) {\n            // And to prevent infinite loops, now need this:\n            // 11-Jun-2016, tatu: Let's try to actually resolve from bounds; context is null\n            //   pseudo-type, won't contain anything useful\n             //return _resolveVariableViaSubTypes(type, name, context); // placeholder, should replace context\n            // 13-Jun-2016, tatu: Maybe this is wrong; maybe Unknown should be returned...\n             //   Need to revisit [databind#127]\n             return _unknownType();\n//            return _resolveVariableViaSubTypes(type, name, TypeBindings.emptyBindings());\n        } else {\n            // Ok: here's where context might come in handy!\n            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n             *   unresolved type variables to handle some cases where bounds\n             *   are enough. Let's hope it does not hide real fail cases.\n             */\n            JavaType actualType = context.findType(name);\n            if (actualType != null) {\n                return actualType;\n            }\n\n            // [databind#1828]: If we have already tried resolving this type variable, return Unknown\n            if (context.hasUnresolved(name)) {\n                 return _unknownType();\n            }\n        }\n\n        /* 29-Jan-2010, tatu: We used to throw exception here, if type was\n         *   bound: but the problem is that this can occur for generic \"base\"\n         *   method, overridden by sub-class. If so, we will want to ignore\n         *   current type (for method) since it will be masked.\n         */\n        Type[] bounds = type.getBounds();\n\n        /* With type variables we must use bound information.\n         * Theoretically this gets tricky, as there may be multiple\n         * bounds (\"... extends A & B\"); and optimally we might\n         * want to choose the best match. Also, bounds are optional;\n         * but here we are lucky in that implicit \"Object\" is\n         * added as bounds if so.\n         * Either way let's just use the first bound, for now, and\n         * worry about better match later on if there is need.\n         */\n\n        /* 29-Jan-2010, tatu: One more problem are recursive types\n         *   (T extends Comparable<T>). Need to add \"placeholder\"\n         *   for resolution to catch those.\n         */\n\n        // 13-Jun-2016, tatu: Handling of recursive types incomplete;\n        //   Specifically, need to establish context for possible inner\n        //   bindings.\n\n        // Bounds can be problematic if they depend on type variable itself;\n        // if so, mark recursive setup, THEN construct. Otherwise can\n        // just proceed. For simple cases like \"T extends Number\", context\n        // is not needed.\n\n        if (bounds.length == 0) { // is this even possible?\n             return _unknownType();\n        }\n\n        // Ok, regardless, need placeholder to avoid infinite loops\n        context = context.withUnresolved(name); // [databind#1828]\n\n        // And finally, construct type using (first) bound as definition\n        return _constructType(bounds[0], context);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}