{
    "generation": "    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n    {\n        final String name = type.getName();\n        // 19-Mar-2015: Without context, all we can check are bounds.\n        if (context == null) {\n            // And to prevent infinite loops, now need this:\n            // Ok; if no context, can not resolve, should indicate failure/unknown\n            return _unknownType();\n        }\n        \n        // Ok: here's where context might come in handy!\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         *   ... and as per [databind#728], it seems it did. So handle differently\n         */\n        JavaType actualType = context.findType(name);\n        if (actualType != null) {\n            return actualType;\n        }\n\n        /* 29-Jan-2010, tatu: We used to throw exception here, if type was\n         *   bound: but the problem is that this can occur for generic \"base\"\n         *   method, overridden by sub-class. If so, we will want to ignore\n         *   current type (for method) since it will be masked.\n         */\n\n        // [databind#728]: If context is present, resolution MUST be done via context.\n        // If type is not found, that's an issue; reverting to using bounds does\n        // not work. Instead, must be considered unresolved.\n        // Note: bounds are still needed if context is null (handled above),\n        // or for recursive definitions?\n        //\n        // Let's simply return \"unknown\" -- caller can decide what to do\n        return _unknownType();\n\n        /* Original code, dropped due to #728:\n        Type[] bounds = type.getBounds();\n        if (bounds == null || bounds.length == 0) { // Is this possible? Seems unlikely via JVM specifics\n             return _unknownType();\n        }\n        // With type variables we must use bound information.\n        // Theoretically this gets tricky, as there may be multiple\n        // bounds (\"... extends A & B\"); and optimally we might\n        // want to choose the best match. Also, bounds are optional;\n        // but here we are lucky in that implicit \"Object\" is\n        // added as bounds if so.\n        // Either way let's just use the first bound, for now, and\n        // worry about better match later on if there is need.\n\n        // One more problem are recursive types (T extends Comparable<T>). Need\n        // to add \"placeholder\" for resolution to catch those.\n        context._addPlaceholder(name);\n        return _constructType(bounds[0], context);\n        */\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}