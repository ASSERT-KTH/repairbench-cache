{
    "generation": "    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n    {\n        final String name = type.getName();\n        // 19-Mar-2015: Without context, all we can check are bounds.\n        if (context == null) {\n            // 13-Nov-2015, tatu: Let's try resolving from bounds even without context,\n            //   as per [databind#939]. Use empty bindings.\n            // Also: We must add placeholder otherwise we may end up in infinite loop\n             return _resolveVariableViaBound(type);\n             // Before #939: return _unknownType();\n        }\n        \n        // Ok: have context, resolve variable by name.\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         */\n        JavaType actualType = context.findType(name);\n        if (actualType != null) {\n            return actualType;\n        }\n\n        // Not found? Try to resolve from bounds. Check for recursion:\n        // (NOTE: It is absolutely essential to add placeholder BEFORE resolving\n        // bounds, to handle recursive definitions like Enum<T extends Enum<T>>)\n        \n        // Perhaps already resolving it?\n        if (context.isPlaceholder(name)) { // since 2.12\n             return _unknownType();\n        }\n        \n        /* 29-Jan-2010, tatu: One more problem are recursive types\n         *   (T extends Comparable<T>). Need to add \"placeholder\"\n         *   for resolution to catch those.\n         */\n        TypeBindings newBindings = context.withPlaceholder(name);\n        Type[] bounds = type.getBounds();\n        // Note: bounds are optional, but here we are lucky in that implicit\n        // bound of 'Object' is forced if none specified. Hence, bounds[0] is safe.\n\n        /* Important: must resolve bounds with recursive types by using\n         * new context that contains placeholder.\n         */\n        return _constructType(bounds[0], newBindings);\n    }\n\n    // Helper method suggested by changes for [#939]\n    private JavaType _resolveVariableViaBound(TypeVariable<?> type) {\n        // 13-Nov-2015, tatu: Let's try resolving from bounds even without context,\n        //   as per [databind#939]. Use empty bindings.\n        // Also: We must add placeholder otherwise we may end up in infinite loop\n        Type[] bounds = type.getBounds();\n        if (bounds == null || bounds.length == 0) { // Should not happen?\n            return _unknownType();\n        }\n        // Need context for recursive resolution, use empty one.\n        // Important: Must create new instance, can not modify shared empty bindings\n        final String name = type.getName();\n        TypeBindings bindings;\n        if (_context == null) { // _context is the TypeFactory._bindings\n             bindings = TypeBindings.emptyBindings();\n        } else {\n             bindings = _context;\n        }\n        // Use withPlaceholder which should create new instance or handle safely\n        TypeBindings newBindings = bindings.withPlaceholder(name);\n        return _constructType(bounds[0], newBindings);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}