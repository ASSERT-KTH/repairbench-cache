{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        final int seqEnd = input.length();\n\n        // Check for '&#'\n        // Ensure index+1 is valid before checking charAt(index+1)\n        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if input ends prematurely after \"&#\"\n            if (start >= seqEnd) {\n                return 0;\n            }\n\n            // Check for optional 'x' or 'X' hex indicator\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check if input ends prematurely after \"&#x\" or \"&#X\"\n                if (start >= seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Scan for digits, stopping at the end of the input, a non-digit, or a semicolon.\n            // The loop condition `end < seqEnd` prevents StringIndexOutOfBoundsException.\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                if (isHex) {\n                    // Check for valid hex digit (0-9, a-f, A-F)\n                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {\n                        break; // Character is not a hex digit\n                    }\n                } else { // Decimal\n                    // Check for valid decimal digit (0-9)\n                    if (!(c >= '0' && c <= '9')) {\n                        break; // Character is not a decimal digit\n                    }\n                }\n                end++;\n            }\n\n            // Check if any digits were consumed\n            if (end == start) {\n                // No digits found after \"&#\" or \"&#x...\"\n                return 0;\n            }\n\n            boolean semiColonPresent = false;\n            // Check if the sequence ended with a semicolon (and we haven't gone past the end)\n            if (end < seqEnd && input.charAt(end) == ';') {\n                semiColonPresent = true;\n            }\n\n            int entityValue;\n            try {\n                CharSequence numericEntity = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(numericEntity.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(numericEntity.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // This could happen if the number is too large for an int,\n                // although the check for valid digits should prevent format errors otherwise.\n                // Treat as untranslatable --> return 0\n                return 0;\n            }\n\n            // Write the translated character(s) to the output writer\n            if (entityValue > 0xFFFF) {\n                // Handle supplementary characters (represented by surrogate pairs in UTF-16)\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                // Handle Basic Multilingual Plane (BMP) characters\n                // Includes characters like &#0; (NUL)\n                out.write((char) entityValue);\n            }\n\n            // Calculate the total number of characters consumed from the input\n            // Consumed = length of \"&#\" (2)\n            //          + length of \"x\" (1 if hex, 0 otherwise)\n            //          + length of digits (end - start)\n            //          + length of \";\" (1 if present, 0 otherwise)\n            int consumed = 2 + (isHex ? 1 : 0) + (end - start) + (semiColonPresent ? 1 : 0);\n            return consumed;\n        }\n\n        // The sequence starting at index is not a numeric entity (\"&#...\")\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}