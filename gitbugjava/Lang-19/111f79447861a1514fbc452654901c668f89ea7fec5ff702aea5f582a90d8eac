{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check if '&' and '#' exist and that there is at least one potential digit character after &# or &#x\n        // The check index < seqEnd - 2 ensures there is room for at least one character after &#\n        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's still characters left after &#x or &#X\n                // If not, entity is incomplete (e.g., \"&#x\" at end of input)\n                if (start == seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Advance 'end' pointer to find the end of the numeric entity part.\n            // Stop condition is ';', or the end of the sequence.\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // Check if any characters were found after &# or &#x\n            // This handles cases like \"&#;\" or \"&#x;\" where no digits are present.\n            if (end == start) {\n                 return 0;\n            }\n\n            int entityValue;\n            try {\n                CharSequence numericSequence = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                 // The sequence between start and end was not a valid number in the specified base (e.g., \"&#zz;\")\n                return 0;\n            }\n\n            // Write the translated character(s) to the output writer\n            if (entityValue > 0xFFFF) {\n                // Handle supplementary characters (codepoints > U+FFFF) which require two char units\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else if (entityValue > 0) { // Ensure it's a valid character codepoint (optional, but good practice)\n                // Handle BMP characters (codepoints <= U+FFFF)\n                out.write(entityValue);\n            } else {\n                // Value was 0 or negative - not typically valid entities, treat as untranslated\n                return 0;\n            }\n\n\n            // Calculate the total number of characters consumed by this translation.\n            // This spans from the initial '&' up to and including the terminating semicolon (if present),\n            // or up to the last digit character if the semicolon is absent.\n            int consumedLen = end - index;\n            // Check if the loop stopped because a semicolon was found at 'end'\n            boolean hasSemiColon = end < seqEnd && input.charAt(end) == ';';\n            if (hasSemiColon) {\n                consumedLen++; // Increment length to include the semicolon\n            }\n\n            return consumedLen;\n        }\n        // If the input doesn't start with \"&#\" at the given index, or is too short,\n        // return 0 indicating no translation occurred starting at this index.\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}