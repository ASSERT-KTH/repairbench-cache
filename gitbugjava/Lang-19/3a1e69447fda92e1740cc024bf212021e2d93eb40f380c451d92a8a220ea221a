{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check for & #\n        // Must have at least &# followed by one potential digit/x and maybe ;\n        // So, need at least 3 characters after index\n        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n                if (start == seqEnd) {\n                    return 0; // Input ends with \"&#x\" or \"&#X\"\n                }\n            }\n            // Note: No need for a specific check like \"if (start == seqEnd)\" for the decimal case here,\n            // because the subsequent check \"end == start\" will handle the case where input is \"&#\"\n            // and no digits follow.\n\n            int end = start;\n            // Find the end of the numeric sequence by checking for valid digits\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                if (isHex) {\n                    // Check for valid hex digit\n                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {\n                        end++;\n                    } else {\n                        break; // Non-hex character found, stop scanning\n                    }\n                } else {\n                    // Check for valid decimal digit\n                    if (c >= '0' && c <= '9') {\n                        end++;\n                    } else {\n                        break; // Non-digit character found, stop scanning\n                    }\n                }\n            }\n\n            // Check if any digits were actually found after &# or &#x\n            if (end == start) {\n                // Input was &# or &#x/&#X followed by non-digit/end of string.\n                return 0;\n            }\n\n            boolean semiColonPresent = false;\n            // Check if the entity ends with a semicolon\n            if (end < seqEnd && input.charAt(end) == ';') {\n                semiColonPresent = true;\n            }\n\n            int entityValue;\n            try {\n                // Parse the numeric value found\n                CharSequence numericSequence = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // This case should be unlikely given the prior checks for digits,\n                // but is a safeguard. Could indicate an unusually large number.\n                // Log or handle appropriately if required.\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0; // Indicate translation failed\n            }\n\n            // Write the character(s) to the output writer\n            if (entityValue > 0xFFFF) {\n                // Handle Unicode supplementary characters (requires two Java chars)\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                // Handle Basic Multilingual Plane (BMP) characters (single Java char)\n                out.write(entityValue);\n            }\n\n            // Calculate the total number of characters consumed from the input\n            // This includes '&', '#', 'x' (if present), digits, and ';' (if present)\n            // If semicolon is present, consumed chars = (end index of digits) + 1 - (start index)\n            // If semicolon is absent, consumed chars = (end index of digits) - (start index)\n            int consumedLength = (semiColonPresent ? end + 1 : end) - index;\n            return consumedLength;\n        }\n        // Input didn't start with \"&#\" at the given index\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}