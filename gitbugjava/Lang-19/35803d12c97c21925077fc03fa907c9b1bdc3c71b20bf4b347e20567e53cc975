{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check for '&#'\n        // Ensure index + 1 and index + 2 are valid indices to prevent StringIndexOutOfBoundsException\n        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check for optional 'x' or 'X' prefix\n            // 'start' is guaranteed to be a valid index (< seqEnd) due to the initial check 'index < seqEnd - 2'\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check if there's anything after 'x'/'X'\n                // If start is now == seqEnd, the input ended with \"&#x\" or \"&#X\"\n                if (start == seqEnd) {\n                    return 0; // Indicate no translation was performed\n                }\n            }\n            // The initial check 'index < seqEnd - 2' ensures we don't proceed for input ending with just \"&#\"\n\n            int end = start;\n            // Find the end of the numeric sequence by checking for valid digits for the specified base (decimal or hex)\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                if (isHex) {\n                    // Check for valid hex digit (0-9, a-f, A-F)\n                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {\n                        end++;\n                    } else {\n                        break; // Character is not a valid hex digit, end sequence here\n                    }\n                } else {\n                    // Check for valid decimal digit (0-9)\n                    if (c >= '0' && c <= '9') {\n                        end++;\n                    } else {\n                        break; // Character is not a valid decimal digit, end sequence here\n                    }\n                }\n            }\n\n            // Check if any digits were actually found after &# or &#x\n            // If end == start, it means no valid digits were present (e.g., \"&#;\", \"&#x;\", \"&#abc;\")\n            if (end == start) {\n                return 0; // Indicate no translation was performed\n            }\n\n            boolean semiColonPresent = false;\n            // Check for an optional semicolon immediately after the digits\n            // If end < seqEnd, it means the loop stopped before the end of the input\n            // Check if the character at 'end' is a semicolon\n            if (end < seqEnd && input.charAt(end) == ';') {\n                semiColonPresent = true;\n            }\n\n            int entityValue;\n            try {\n                // Parse the numeric part (digits found between start and end)\n                CharSequence numericValue = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(numericValue.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(numericValue.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // This can happen if the number format is valid (e.g., all digits)\n                // but the value exceeds Integer.MAX_VALUE.\n                // The original code printed an error message. Returning 0 is standard\n                // for CharSequenceTranslator to indicate failure/no translation.\n                // System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0; // Indicate translation failure\n            }\n\n            // Write the corresponding character (or characters for supplementary code points) to the output writer\n            if (entityValue > 0xFFFF) {\n                // Handle supplementary Unicode characters (code points > U+FFFF) which require two char representation\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                // Handle Basic Multilingual Plane (BMP) characters (code points <= U+FFFF)\n                // This includes the null character if entityValue is 0 (e.g. &#0;)\n                out.write(entityValue);\n            }\n\n            // Calculate the total number of characters consumed from the input sequence\n            // Consumed part includes: '&', '#', optional 'x'/'X', the digits, and the optional ';'\n            int consumedLength = (end - start) // Length of the digits\n                               + (isHex ? 1 : 0) // Add 1 for 'x'/'X' if present\n                               + 2; // Add 2 for '&#'\n            if (semiColonPresent) {\n                consumedLength++; // Add 1 for the semicolon if it was present and consumed\n            }\n\n            return consumedLength;\n        }\n        // If the input at the current index does not start with \"&#\", return 0\n        // indicating that no translation occurred at this index.\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}