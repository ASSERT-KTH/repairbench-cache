{
    "generation": "    public Object handle(Invocation invocation) throws Throwable {\n        // 1. Handle explicit stubbing mode (e.g., doAnswer(), stubVoid())\n        if (invocationContainerImpl.hasAnswersForStubbing()) {\n            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n            invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n            return null;\n        }\n\n        // 2. Check if verification is active\n        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n        InvocationMatcher invocationMatcher = null; // Prepare InvocationMatcher\n\n        // 3. If verification is active...\n        if (verificationMode != null) {\n            // Handle mock-aware verification modes (most common case)\n            if (verificationMode instanceof MockAwareVerificationMode) {\n                MockAwareVerificationMode mockAwareMode = (MockAwareVerificationMode) verificationMode;\n                // Check if verification is for THIS mock\n                if (mockAwareMode.getMock() == invocation.getMock()) {\n                    // Yes: Verify this invocation\n                    invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n                    mockingProgress.validateState(); // Validate after pulling mode and binding matchers\n                    VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\n                    verificationMode.verify(data);\n                    return null; // Verification finished, no return value expected\n                } else {\n                    // No: Verification active, but for a DIFFERENT mock.\n                    // This happens e.g. with verify(mock1).doSomething(mock2.doSomethingElse());\n                    // The invocation on mock2 occurs while mock1 is being verified.\n                    // Put the verification mode back for mock1.\n                    mockingProgress.verificationStarted(verificationMode);\n                    // Let invocation on mock2 proceed normally below.\n                    verificationMode = null; // Clear verification mode for THIS invocation handling\n                }\n            // Handle non-mock-aware verification modes (less common)\n            } else {\n                 // Assume it's for the current invocation (original behavior)\n                 invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n                 mockingProgress.validateState();\n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\n                 verificationMode.verify(data);\n                 return null;\n            }\n        }\n\n        // 4. Standard invocation handling (code reaches here if verificationMode was null initially,\n        //    or if it was for a different mock and has been put back)\n        mockingProgress.validateState(); // Validate state before reporting ongoing stubbing or executing method\n\n        // Bind matchers if they weren't already bound during verification checks\n        if (invocationMatcher == null) {\n             invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n        }\n\n        // Prepare for potential 'when(mock.method()).thenReturn()' style stubbing\n        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n        // Execute the invocation: find a stubbed answer or use the default answer\n        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n        if (stubbedInvocation != null) {\n            // Found a stubbed answer\n            stubbedInvocation.captureArgumentsFrom(invocation);\n            return stubbedInvocation.answer(invocation);\n        } else {\n            // No stub found, use the default answer\n            Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n            // Clean up potential stubbing state, essential for spies/partials\n            // to avoid self-calls overwriting the intended stubbing\n            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n            return ret;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}