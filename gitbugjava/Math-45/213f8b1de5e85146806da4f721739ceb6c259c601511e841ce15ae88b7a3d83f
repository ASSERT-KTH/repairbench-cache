{
    "generation": "import org.apache.commons.math.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math.exception.NumberIsTooLargeException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.util.OpenIntToDoubleHashMap;\n\n// ... other imports\n\n/**\n * Build a sparse matrix with the supplied row and column dimensions.\n *\n * @param rowDimension Number of rows of the matrix.\n * @param columnDimension Number of columns of the matrix.\n * @throws NotStrictlyPositiveException if row or column dimension is not\n * positive.\n * @throws NumberIsTooLargeException if the total number of entries of the\n * matrix is larger than {@code Integer.MAX_VALUE}.\n */\npublic OpenMapRealMatrix(int rowDimension, int columnDimension) {\n    super(rowDimension, columnDimension);\n    long theoreticalSize = (long) rowDimension * columnDimension;\n    if (theoreticalSize > Integer.MAX_VALUE) {\n        throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_TOO_LARGE,\n                                            theoreticalSize, Integer.MAX_VALUE, true);\n    }\n    this.rows = rowDimension;\n    this.columns = columnDimension;\n    this.entries = new OpenIntToDoubleHashMap(0.0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}