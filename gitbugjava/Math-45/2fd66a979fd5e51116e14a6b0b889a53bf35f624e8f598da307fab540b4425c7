{
    "generation": "import org.apache.commons.math.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math.exception.NumberIsTooLargeException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.util.OpenIntToDoubleHashMap;\n\n/**\n * Sparse matrix implementation based on an open addressed map.\n *\n * <p>\n * Caveat: This implementation assumes that, for any {@code x},\n * the equality {@code x * 0d == 0d} holds. But it is is not true for\n * {@code NaN}. Moreover, zero entries are ignored during matrix multiplication\n * or addition.\n * </p>\n */\n// The following is just context for the constructor, not part of the fixed code block.\n// Make sure to import necessary classes if they are not already imported.\npublic class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix {\n    /** Number of rows of the matrix. */\n    private final int rows;\n    /** Number of columns of the matrix. */\n    private final int columns;\n    /** Storage for (sparse) matrix elements. */\n    private final OpenIntToDoubleHashMap entries;\n\n    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws NotStrictlyPositiveException if row or column dimension is not\n     * positive.\n     * @throws NumberIsTooLargeException if the total number of entries of the\n     * matrix is larger than {@code Integer.MAX_VALUE}.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension)\n        throws NotStrictlyPositiveException, NumberIsTooLargeException {\n        super(rowDimension, columnDimension);\n        long lRow = rowDimension;\n        long lCol = columnDimension;\n        // The maximum key (`row * columns + column`) needs to be small enough\n        // to fit into a non-negative int. The max key is `(rows - 1) * columns + (columns - 1)`\n        // which simplifies to `rows * columns - 1`.\n        // Thus, `rows * columns - 1 <= Integer.MAX_VALUE`\n        // which means `rows * columns <= Integer.MAX_VALUE + 1L`.\n        // We use long multiplication to avoid intermediate overflow.\n        if (lRow * lCol > Integer.MAX_VALUE) {\n            throw new NumberIsTooLargeException(LocalizedFormats.SPARSE_MATRIX_STORAGE,\n                                                lRow * lCol, Integer.MAX_VALUE, true);\n        }\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }\n\n    // Dummy methods to make the class compilable for context. Not part of the fix.\n    @Override\n    public RealMatrix copy() { return null; }\n    @Override\n    public RealMatrix createMatrix(int rowDimension, int columnDimension) { return null; }\n    @Override\n    public int getColumnDimension() { return columns; }\n    @Override\n    public double getEntry(int row, int column) { return 0; }\n    @Override\n    public int getRowDimension() { return rows; }\n    @Override\n    public void setEntry(int row, int column, double value) {}\n    @Override\n    public void addToEntry(int row, int column, double increment) {}\n    @Override\n    public void multiplyEntry(int row, int column, double factor) {}\n} // End of context class definition\n\n// The fixed function:\n    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws NotStrictlyPositiveException if row or column dimension is not\n     * positive.\n     * @throws NumberIsTooLargeException if the total number of entries of the\n     * matrix is larger than {@code Integer.MAX_VALUE}.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension)\n        throws NotStrictlyPositiveException, NumberIsTooLargeException {\n        super(rowDimension, columnDimension);\n        long lRow = rowDimension;\n        long lCol = columnDimension;\n        // Check if the total number of entries exceeds Integer.MAX_VALUE.\n        // Use long multiplication to prevent potential overflow.\n        if (lRow * lCol > Integer.MAX_VALUE) {\n            throw new NumberIsTooLargeException(LocalizedFormats.SPARSE_MATRIX_STORAGE,\n                                                lRow * lCol, Integer.MAX_VALUE, true);\n        }\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}