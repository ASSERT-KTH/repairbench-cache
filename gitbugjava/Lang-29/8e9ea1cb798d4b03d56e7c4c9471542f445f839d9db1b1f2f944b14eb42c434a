{
    "generation": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     *\n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     *\n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     *\n     * @param version the Java version string to convert, may be null.\n     * @return the version, for example 131 for Java 1.3.1, or 0 if the version string is null or cannot be parsed.\n     */\n    // Method visibility changed to package private for unit testing only. DO NOT MAKE PUBLIC.\n    static int toJavaVersionInt(String version) { // Changed return type from float to int\n        // Cast the result of toVersionInt to int, as the method is expected to return an integer representation.\n        // This assumes toVersionInt returns a numeric type (like float or int).\n        // The cast handles the case where toVersionInt returns float and ensures the return type matches the required int.\n        return (int) toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}