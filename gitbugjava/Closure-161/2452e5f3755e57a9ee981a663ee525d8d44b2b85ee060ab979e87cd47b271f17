{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    // Don't fold if this is potentially an LValue:\n    //   \"[][0] = 1\" shouldn't become \"undefined = 1\"\n    //   \"delete [][0]\" shouldn't become \"delete undefined\"\n    if (NodeUtil.isLValue(n)) {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods. Non-numeric indices\n      // are generally not foldable.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n\n    // Check for invalid indices (non-integer or negative). Report errors for these.\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n    if (intIndex < 0) {\n      // Negative indices are explicitly out of bounds.\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element at the specified index.\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    Node replacement;\n    // If the index is out of bounds (elem is null) or points to an array hole (EMPTY),\n    // the result of the access is 'undefined'.\n    if (elem == null || elem.getType() == Token.EMPTY) {\n      // Create a new VOID node (representing undefined) with source info from the GETELEM node.\n      replacement = NodeUtil.newUndefinedNode(n);\n    } else {\n      // The element exists and is not a hole. Detach it from the array literal.\n      left.removeChild(elem);\n      // The replacement is the element itself.\n      replacement = elem;\n    }\n\n    // Replace the entire GETELEM node (n) with the replacement node (either the element or undefined).\n    parent.replaceChild(n, replacement);\n    reportCodeChange();\n    // Return the replacement node, as it's now part of the AST.\n    return replacement;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}