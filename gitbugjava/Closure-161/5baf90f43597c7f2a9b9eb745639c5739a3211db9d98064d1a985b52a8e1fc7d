{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    // Also bail on \"[][0]--\" and \"--[][0]\".\n    // FIX: Add check for assignment/inc/dec target.\n    if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n ||\n        parent.getType() == Token.INC || parent.getType() == Token.DEC) {\n      return n;\n    }\n    // END FIX\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    // Check if the index is valid (integer, not out of representable range)\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n    // NaN and Infinity should also be treated as invalid.\n    // Although intIndex != index might catch NaN, explicitly check is safer.\n    // Infinity might cast to Integer.MAX_VALUE, potentially passing the intIndex != index check.\n    if (Double.isNaN(index) || Double.isInfinite(index)) {\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n    }\n\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      // TODO(johnlenz): Fold out of bounds reads to undefined. Fold holes to undefined.\n      // See http://blickly.github.io/closure-compiler-issues/#522\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      // TODO(johnlenz): Fold holes to undefined.\n      // See http://blickly.github.io/closure-compiler-issues/#522\n      elem = NodeUtil.newUndefinedNode(elem);\n      // Don't remove EMPTY nodes from the array, this would change the structure\n      // and potentially the length of the array literal which would be observable\n      // if the array is used elsewhere.\n    } else {\n      // Detach elem from the ArrayLit Node before we reuse it.\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}