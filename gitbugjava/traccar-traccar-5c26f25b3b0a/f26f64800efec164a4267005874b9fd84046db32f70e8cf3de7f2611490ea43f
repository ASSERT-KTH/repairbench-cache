{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                if (extension) {\n                    buf.skipBytes(2); // Skip the ID bytes already read indirectly\n                } else {\n                    buf.skipBytes(1); // Skip the ID byte already read indirectly\n                }\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                 if (extension) {\n                    buf.skipBytes(2); // Skip the ID bytes already read indirectly\n                } else {\n                    buf.skipBytes(1); // Skip the ID byte already read indirectly\n                }\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // Correction: Apply scale factor 0.1\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Correction: Apply scale factor 0.1\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE() - 40); // Correction: Apply offset -40\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1); // Correction: Signed short, scale factor 0.1\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); // Correction: Apply scale factor 0.1\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                 if (extension) {\n                    buf.skipBytes(2); // Skip the ID bytes already read indirectly\n                } else {\n                    buf.skipBytes(1); // Skip the ID byte already read indirectly\n                }\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Correction: Rename \"runtime\" to KEY_HOURS and convert seconds to ms\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                if (extension) {\n                    buf.skipBytes(2); // Skip the ID bytes already read indirectly\n                } else {\n                    buf.skipBytes(1); // Skip the ID byte already read indirectly\n                }\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x0E: // ICCID\n                        position.set(Position.KEY_ICCID, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n                        break;\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); // label\n                        position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.1); // Correction: Scale factor 0.1, Temp index starts from 1\n                        break;\n                    case 0x4B: // Network Information\n                        buf.readUnsignedByte(); // subtype\n                        int status = buf.readUnsignedByte(); // status\n                        if ((status & 0x01) != 0) {\n                            position.set(Position.KEY_ROAMING, (status & 0x02) != 0);\n                            position.set(Position.KEY_OPERATOR, buf.readCharSequence(length - 2, StandardCharsets.US_ASCII).toString());\n                        } else {\n                             buf.skipBytes(length - 2);\n                        }\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); // alarm protocol\n                        buf.readUnsignedByte(); // alarm type\n                        buf.skipBytes(length - 2);\n                        break;\n                     case 0xFEA5: // Mobile Network Cell\n                        if (length >= 6) {\n                            int mcc = buf.readUnsignedShortLE();\n                            int mnc = buf.readUnsignedByte();\n                            int lac = buf.readUnsignedShortLE();\n                            int cid = buf.readUnsignedMediumLE();\n                            Network network = new Network(CellTower.from(mcc, mnc, lac, cid));\n                            if (position.getNetwork() == null || position.getNetwork().getCellTowers().isEmpty()) {\n                                position.setNetwork(network);\n                            }\n                            buf.skipBytes(length - 8); // Skip remaining bytes if any\n                        } else {\n                             buf.skipBytes(length);\n                        }\n                        break;\n                    case 0xFEA8: // Battery Voltages\n                        int status1 = buf.readUnsignedByte();\n                        int level1 = buf.readUnsignedByte();\n                        int status2 = buf.readUnsignedByte();\n                        int level2 = buf.readUnsignedByte();\n                        int status3 = buf.readUnsignedByte();\n                        int level3 = buf.readUnsignedByte();\n                        buf.readUnsignedByte(); // alert\n                        if ((status1 & 0x01) != 0) {\n                             position.set(Position.KEY_BATTERY_LEVEL, level1);\n                        }\n                        if ((status2 & 0x01) != 0) {\n                             position.set(\"battery2Level\", level2); // Store battery 2 level\n                        }\n                         if ((status3 & 0x01) != 0) {\n                             position.set(\"battery3Level\", level3); // Store battery 3 level\n                        }\n                        break;\n                    case 0xFEB2: // WiFi Network\n                        buf.readUnsignedByte(); // sub type\n                        int wifiCount = buf.readUnsignedByte();\n                        Network networkWifi = new Network();\n                        for (int k = 0; k < wifiCount; k++) {\n                            networkWifi.addWifiAccessPoint(WifiAccessPoint.from(\n                                    buf.readCharSequence(6 * 2, StandardCharsets.US_ASCII).toString(), buf.readByte()));\n                        }\n                        if (!networkWifi.getWifiAccessPoints().isEmpty()) {\n                             position.setNetwork(networkWifi);\n                        }\n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n\n            // Skip Checksum (2 bytes) + End marker (2 bytes) before next record or end of buffer\n            // This logic assumes checksum/end marker are per record, adjust if they are at the end of the packet\n            if (buf.readableBytes() >= 4) {\n                 // Check if the next bytes look like a new record start or end marker\n                 // This part might need adjustment based on exact protocol specs for multiple records\n                 // For now, assume checksum/end are read outside the loop or handled by the caller\n            }\n\n\n            if (position.getLatitude() != 0 && position.getLongitude() != 0) {\n                positions.add(position);\n            }\n        }\n\n        // Skip checksum and end characters if they are at the very end of the buffer\n        if (buf.readableBytes() >= 4) {\n             buf.skipBytes(buf.readableBytes()); // Or specific skipping logic based on protocol doc\n        }\n\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}