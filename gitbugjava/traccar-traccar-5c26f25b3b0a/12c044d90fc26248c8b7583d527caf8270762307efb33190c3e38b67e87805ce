{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1 + 3 + 1);\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.readUnsignedIntLE(); // remaining cache\n    int count = buf.readUnsignedShortLE();\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // index\n\n        int paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x01: position.set(Position.KEY_EVENT, buf.readUnsignedByte()); break;\n                case 0x05: position.setValid(buf.readUnsignedByte() > 0); break;\n                case 0x06: position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); break;\n                case 0x07: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break;\n                case 0x14: position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); break;\n                case 0x15: position.set(Position.KEY_INPUT, buf.readUnsignedByte()); break;\n                case 0x47: {\n                    int lockState = buf.readUnsignedByte();\n                    if (lockState > 0) {\n                        position.set(Position.KEY_LOCK, lockState == 2);\n                    }\n                    break;\n                }\n                case 0x97: position.set(Position.KEY_THROTTLE, buf.readUnsignedByte()); break;\n                case 0x9D: position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte()); break;\n                case 0xFE69: position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); break;\n                default: buf.readUnsignedByte(); break;\n            }\n        }\n\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x08: {\n                    int speed = buf.readUnsignedShortLE();\n                    position.setSpeed(UnitsConverter.knotsFromKph(speed));\n                    break;\n                }\n                case 0x09: position.setCourse(buf.readUnsignedShortLE()); break;\n                case 0x0A: position.set(Position.KEY_HDOP, buf.readUnsignedShortLE()); break;\n                case 0x0B: position.setAltitude(buf.readShortLE()); break;\n                case 0x16: position.set(Position.KEY_ADC + 1, buf.readUnsignedShortLE() * 0.01); break;\n                case 0x19: position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); break;\n                case 0x1A: position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); break;\n                case 0x40: position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); break;\n                case 0x91: \n                case 0x92: case 0xFE91: case 0xFE92: \n                case 0xFE9B: case 0xFE9C: case 0xFE9F: case 0xFE19:\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                    break;\n                case 0x99: position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); break;\n                case 0x9C: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE()); break;\n                case 0x98: position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE()); break;\n                default:\n                    buf.readUnsignedShortLE();\n                    break;\n            }\n        }\n\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x04:\n                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                    break;\n                case 0x0C:\n                case 0x9B:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE()); \n                    break;\n                case 0x0D: position.set(\"runtime\", buf.readUnsignedIntLE()); break;\n                case 0x25: position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE())); break;\n                case 0xA0: position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); break;\n                case 0xA2: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); break;\n                default:\n                    buf.readUnsignedIntLE();\n                    break;\n            }\n        }\n\n        paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            int length = buf.readUnsignedByte(); \n            switch (id) {\n                case 0x2A...0x31:\n                    buf.readUnsignedByte(); \n                    position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                    break;\n                case 0xFE31:\n                    // Skip alarm protocol and type, then remaining bytes \n                    buf.skipBytes(length - 2); \n                    break;\n                case 0xFEA8: {\n                    // Battery1 status\n                    int status1 = buf.readUnsignedByte();\n                    if (status1 > 0) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    // Battery2 status and level\n                    int status2 = buf.readUnsignedByte();\n                    int battery2Level = buf.readUnsignedByte();\n                    position.set(\"battery2Level\", (long) battery2Level); // Changed this line.\n                    // Battery3 status and level\n                    int status3 = buf.readUnsignedByte();\n                    int battery3Level = buf.readUnsignedByte();\n                    // Alert byte\n                    buf.readUnsignedByte();\n                    break;\n                }\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n\n        positions.add(position);\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}