{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node callee = n.getFirstChild();\n\n      // Ignore cast nodes. Cast nodes are artifacts of the type system\n      // that should not affect how we treat the code at runtime.\n      while (callee.isCast()) {\n        callee = callee.getFirstChild();\n      }\n\n      // A call is free if the callee is not a GETPROP or GETELEM.\n      // Examples: foo(), (0, foo)(), (!foo)()\n      // These calls have a 'this' of window in non-strict mode\n      // and 'undefined' in strict mode.\n      if (!NodeUtil.isGet(callee)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct call to eval is SELECTED_PROPERTY_CALL when the callee is\n      // a NAME node storing \"eval\".\n      if (callee.isName() &&\n          \"eval\".equals(callee.getString())) {\n        // Note: We annotate the NAME node, not the CALL node.\n        // This annotation is consumed by other passes like CheckGlobalThis\n        // and potentially optimizations.\n        callee.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}