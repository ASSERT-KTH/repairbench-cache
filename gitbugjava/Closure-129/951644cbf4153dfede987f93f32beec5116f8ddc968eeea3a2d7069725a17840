{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // ignore cast nodes. (Note: In Closure Compiler, casts are typically JSType info\n      // attached to the node, not separate AST nodes. This comment might be historical\n      // or refer to a different representation.)\n\n      // Resolve the callee, looking through comma operators, e.g. (0, foo)().\n      // The last part of the comma expression determines the function to call\n      // and how 'this' is bound. If it's a GETPROP/GETELEM, 'this' is preserved.\n      Node callee = first;\n      if (callee.isComma()) {\n        callee = callee.getLastChild();\n      }\n\n      // A free call is one where 'this' is not set explicitly by the call syntax.\n      // This happens when the called expression (after resolving comma)\n      // is not a property access (GETPROP or GETELEM).\n      if (!NodeUtil.isGet(callee)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A \"direct eval\" call specifically means the syntax eval(...).\n      // We check if the *original* first child node (before comma resolution)\n      // is the NAME 'eval'.\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        // Mark the NAME node ('eval') itself as being used in a direct eval call.\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}