{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                // Special case for Long.MIN_VALUE * -1, as -Long.MIN_VALUE == Long.MIN_VALUE\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        // Check for overflow by dividing back. \n        // If the result does not match the original value, there was an overflow.\n        // This check works for all values except Long.MIN_VALUE * -1 (handled above).\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}