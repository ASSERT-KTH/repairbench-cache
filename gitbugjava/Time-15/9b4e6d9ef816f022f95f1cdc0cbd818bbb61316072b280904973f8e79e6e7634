{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                // Handle Long.MIN_VALUE * -1 manually, as -Long.MIN_VALUE == Long.MIN_VALUE\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        // Implementation note: the general check calculation below also handles\n        // val1 == Long.MIN_VALUE and val2 = -1 correctly. However, the switch\n        // optimizes the common cases -1, 0 and 1.\n        \n        long total = val1 * val2;\n        // The overflow check `total / val2 != val1` is OK in general, but fails specifically for\n        // Long.MIN_VALUE * -1 because Long.MIN_VALUE / -1 == Long.MIN_VALUE.\n        // That case is handled above. Other overflow cases are caught by this check.\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}