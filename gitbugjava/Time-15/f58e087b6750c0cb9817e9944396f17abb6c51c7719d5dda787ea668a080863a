{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        // Handle the special case Integer.MIN_VALUE to avoid division by zero in the check below\n        // val2=0 is handled elsewhere.\n        \n        // Special case for Long.MIN_VALUE * -1, as it overflows but the standard check (total/val2 == val1) fails.\n        if (val1 == Long.MIN_VALUE && val2 == -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n\n        // Handle trivial cases for performance\n        switch (val2) {\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n            // case -1 is handled above for Long.MIN_VALUE, and below for other values.\n            // No need for case -1 here anymore as the general check works fine for non-MIN_VALUE longs.\n        }\n\n        long total = val1 * val2;\n        // The division check works for all cases except Long.MIN_VALUE * -1, which was handled above.\n        // It implicitly handles val2 != 0 because case 0 is handled above.\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}