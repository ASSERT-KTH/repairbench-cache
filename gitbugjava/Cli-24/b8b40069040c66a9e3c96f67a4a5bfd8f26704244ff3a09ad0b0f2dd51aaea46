{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        \n        // Append the first line (wrapped).\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Get the rest of the text for subsequent lines.\n        String currentText = text.substring(pos).trim();\n\n        // Create padding string for subsequent lines.\n        final String padding = createPadding(nextLineTabStop);\n\n        while (currentText.length() > 0) // Loop while there is text remaining\n        {\n            // Handle the special case where indentation is >= width.\n            // In this case, wrap character by character.\n            if (nextLineTabStop >= width)\n            {\n                // Create line content: padding + first char of current text\n                StringBuffer lineBuf = new StringBuffer();\n                lineBuf.append(padding);\n                // Add the first character of the remaining text\n                lineBuf.append(currentText.charAt(0));\n\n                String line = lineBuf.toString();\n                // Truncate line to width if necessary\n                if (line.length() > width) {\n                    line = line.substring(0, width);\n                }\n\n                // Append the line (rtrim is safe here, line should end with a non-space char)\n                sb.append(rtrim(line));\n                sb.append(defaultNewLine);\n\n                // Consume the first character\n                currentText = currentText.substring(1);\n            }\n            else // Normal case: nextLineTabStop < width\n            {\n                // Prepare the line with padding and current text for wrap calculation\n                String lineToWrap = padding + currentText;\n                pos = findWrapPos(lineToWrap, width, 0);\n\n                if (pos == -1) // No wrap point found, append the rest\n                {\n                    sb.append(rtrim(lineToWrap));\n                    currentText = \"\"; // Mark as done\n                }\n                else // Wrap point found\n                {\n                    // This condition handles cases where the wrap point is precisely\n                    // the indentation boundary (pos equals the start of the text\n                    // after padding). In these cases, we might want to force wrapping\n                    // at the width boundary if the text overflows.\n                    // This check prevents an infinite loop in certain scenarios involving\n                    // text that doesn't contain spaces near the wrap position.                    \n                    if ( (lineToWrap.length() > width) && (pos == nextLineTabStop - 1) )\n                    {\n                        pos = width;\n                    }\n\n                    // Append the wrapped line segment\n                    sb.append(rtrim(lineToWrap.substring(0, pos))).append(defaultNewLine);\n                    \n                    // Update remaining text; trim leading whitespace.\n                    currentText = lineToWrap.substring(pos).trim();\n                }\n            }\n        } // end while\n\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}