{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // Handle null or empty text\n        if (text == null || text.length() == 0) {\n            return sb;\n        }\n\n        // Handle the edge case where the indentation is greater\n        // than or equal to the line width; print the text char by char\n        if (nextLineTabStop >= width && width > 0) {\n            // Create padding of width-1 spaces\n            final String padding = createPadding(width - 1);\n            // Trim the input text once at the beginning\n            String trimmedText = text.trim(); \n            // Append each character on a new line, preceded by the padding\n            for (int i = 0; i < trimmedText.length(); i++) {\n                sb.append(padding).append(trimmedText.charAt(i)).append(defaultNewLine);\n            }\n            // All text processed in char-by-char mode\n            return sb;\n        }\n\n        // --- Standard wrapping logic ---\n        \n        // Find the first wrap position\n        int pos = findWrapPos(text, width, 0);\n\n        // If the text fits on a single line, append it (trimmed) and return\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        \n        // Append the first line chunk (trimmed)\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Prepare padding for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n        // Get the remaining text, trimmed\n        String remainingText = text.substring(pos).trim();\n\n        // Loop while there is remaining text to process\n        while (remainingText.length() > 0)\n        {\n            // Construct the line to wrap for this iteration: padding + remaining text\n            String lineToWrap = padding + remainingText;\n            \n            // Find the wrap position within this potentially padded line\n            pos = findWrapPos(lineToWrap, width, 0);\n\n            if (pos == -1)\n            {\n                // The rest fits on one line (with padding)\n                sb.append(rtrim(lineToWrap)); // Append the final chunk (trimmed)\n                break; // Done with the loop\n            }\n\n            // Wrap needed for this line. Append the chunk that fits (trimmed).\n            sb.append(rtrim(lineToWrap.substring(0, pos))).append(defaultNewLine);\n\n            // Update remaining text for the next iteration (trimmed)\n            remainingText = lineToWrap.substring(pos).trim();\n        }\n\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}