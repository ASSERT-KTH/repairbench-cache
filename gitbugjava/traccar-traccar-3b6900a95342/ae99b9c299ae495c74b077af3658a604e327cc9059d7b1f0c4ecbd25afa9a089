{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // header\n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n\n        if (type == MSG_DATA) { // Assuming MSG_DATA is a constant like Minifinder2Protocol.MSG_DATA\n\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false; // For the current position object being built\n            Position position = new Position(getProtocolName());\n\n            DeviceSession deviceSession = null; // Device session for the whole message\n\n            while (buf.isReadable()) {\n                int recordValueLength = buf.readUnsignedByte();\n                // recordEndIndex is the end of the current key's value data\n                int recordEndIndex = buf.readerIndex() + recordValueLength;\n                int key = buf.readUnsignedByte();\n\n                if (keys.contains(key)) {\n                    // Key repetition indicates a new logical position report starts\n                    if (!hasLocation) { // If the previous position didn't get location data\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position); // Add the completed position to the list\n                    keys.clear();          // Reset keys for the new position\n                    hasLocation = false;   // Reset location flag for the new position\n                    position = new Position(getProtocolName()); // Create a new position object\n                }\n                keys.add(key); // Add current key to the set for the current position\n\n                switch (key) {\n                    case 0x01:\n                        // Read IMEI and get/create device session\n                        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n                        deviceSession = getDeviceSession(channel, remoteAddress, imei);\n                        if (deviceSession != null) {\n                            position.setDeviceId(deviceSession.getDeviceId());\n                        }\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0); // A position is valid if HDOP is positive\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < recordEndIndex) {\n                            int rssi = buf.readByte(); // Signed byte for RSSI\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < recordEndIndex) {\n                            int rssi = buf.readByte(); // Signed byte for RSSI\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23: // Tag location\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24: // Time and status\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true); // Historical data\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24)); // Signal strength\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24)); // Battery level from status\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28: // Beacon tag data\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte()); // RSSI at 1 meter\n                        if (BitUtil.check(beaconFlags, 7)) { // Location data present\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) { // Description present\n                            position.set(\"description\", buf.readCharSequence(\n                                    recordEndIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A: // WiFi location\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6);       // MAC address (skipped as per original)\n                        buf.readUnsignedByte(); // RSSI (skipped as per original)\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30: // Steps\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31: // Activity data\n                        int i = 1;\n                        while (buf.readerIndex() < recordEndIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37: // Barking sensor\n                        buf.readUnsignedIntLE(); // timestamp\n                        long barkingValue = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barkingValue, 31)) { // Bark stop event\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barkingValue, 31)); // Bark count\n                        break;\n                    case 0x40: // Heart rate\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) { // Filter out invalid low values\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        // Unknown key, skip its data by advancing reader index\n                        break;\n                }\n                // Ensure reader index is at the end of the current record's value data\n                buf.readerIndex(recordEndIndex);\n            }\n\n            // After processing all records in the buffer for the current message\n            if (!hasLocation) {\n                getLastLocation(position, null); // Fill in location for the last position object if it's missing\n            }\n            positions.add(position); // Add the last (or only) position object to the list\n\n            // Try to get deviceSession using connection details if not already found via IMEI\n            if (deviceSession == null) {\n                deviceSession = getDeviceSession(channel, remoteAddress);\n            }\n\n            if (deviceSession != null) {\n                // If a device session is established, set its ID on all positions\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n                return positions;\n            } else {\n                // No device session could be established.\n                // Check if the parsed positions list contains any actual data.\n                boolean hasAnyMeaningfulData = false;\n                for (Position p : positions) {\n                    if (p.getFixTime() != null || p.getValid() ||\n                        (p.getAttributes().size() > 1) || // Has attributes other than default KEY_PROTOCOL\n                        (p.getNetwork() != null &&\n                         (!p.getNetwork().getCellTowers().isEmpty() || !p.getNetwork().getWifiAccessPoints().isEmpty()))) {\n                        hasAnyMeaningfulData = true;\n                        break;\n                    }\n                }\n\n                if (hasAnyMeaningfulData) {\n                    // If there's meaningful data, return it even if deviceId couldn't be set.\n                    return positions;\n                } else {\n                    // If positions list contains only \"empty\" Position objects, treat as no data.\n                    return null;\n                }\n            }\n        }\n        return null; // If type is not MSG_DATA or other specific handling\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}