{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // header\n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n\n        // Assuming MSG_DATA is a class constant (e.g., static final int MSG_DATA = 0x01;)\n        if (type == MSG_DATA) {\n\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false; // For the current position object being built\n            Position position = new Position(getProtocolName());\n\n            DeviceSession deviceSession = null; // Overall device session for this message\n\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n\n                if (keys.contains(key)) {\n                    // Finalize current 'position' before adding it and starting a new one.\n                    // Ensure deviceId is set for getLastLocation.\n                    if (position.getDeviceId() == 0 && deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    if (position.getDeviceId() == 0) {\n                         DeviceSession currentPosSession = getDeviceSession(channel, remoteAddress);\n                         if (currentPosSession != null) {\n                             position.setDeviceId(currentPosSession.getDeviceId());\n                             if (deviceSession == null) {\n                                 deviceSession = currentPosSession;\n                             }\n                         }\n                    }\n\n                    if (!hasLocation) { // hasLocation refers to the 'position' being finalized\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    \n                    // Reset for new 'position'\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                    // If a deviceSession is already known, apply its ID to the new 'position'\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                }\n                keys.add(key);\n\n                switch (key) {\n                    case 0x01:\n                        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n                        // Try to get session with this IMEI\n                        DeviceSession identifiedDeviceSession = getDeviceSession(channel, remoteAddress, imei);\n                        if (identifiedDeviceSession != null) {\n                            deviceSession = identifiedDeviceSession; // Update message-wide session\n                            position.setDeviceId(deviceSession.getDeviceId()); // Set for current position\n                        }\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6); // mac\n                        buf.readUnsignedByte(); // rssi\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); // timestamp\n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n\n            // Finalize the last 'position' object.\n            // Ensure its deviceId is set if a message-wide session is known or can be found by channel.\n            if (position.getDeviceId() == 0 && deviceSession != null) {\n                position.setDeviceId(deviceSession.getDeviceId());\n            }\n            if (position.getDeviceId() == 0) { // If still not set, try by channel\n                 DeviceSession lastPosSession = getDeviceSession(channel, remoteAddress);\n                 if (lastPosSession != null) {\n                     position.setDeviceId(lastPosSession.getDeviceId());\n                     if (deviceSession == null) { // Update message-wide session if it was null\n                         deviceSession = lastPosSession;\n                     }\n                 }\n            }\n\n            if (!hasLocation) { // hasLocation refers to this last 'position'\n                getLastLocation(position, null); // Called with best-effort deviceId on 'position'\n            }\n            positions.add(position); // Add the completed last position\n\n\n            // Consolidate device session for the whole message, if not already established.\n            if (deviceSession == null) {\n                deviceSession = getDeviceSession(channel, remoteAddress);\n            }\n\n            // If a device session is now known (from 0x01 tag or by channel),\n            // ensure all positions in the list have the deviceId.\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    if (p.getDeviceId() == 0) { // Only set if not already set by earlier logic\n                        p.setDeviceId(deviceSession.getDeviceId());\n                    }\n                }\n            }\n            // If deviceSession is still null, positions will have deviceId = 0. This is acceptable.\n\n            // Return the list of positions. For MSG_DATA, this list will contain at least one Position object.\n            return positions;\n        }\n\n        return null; // For message types other than MSG_DATA\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}