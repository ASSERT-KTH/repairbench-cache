{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // header\n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n\n        if (type == MSG_DATA) {\n\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n\n            // DeviceSession might be identified later via key 0x01\n            DeviceSession deviceSession = null;\n\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n\n                if (keys.contains(key)) {\n                    // Record boundary detected. Finalize and add the previous position.\n                    if (!hasLocation) {\n                        // Attempt to get last location if current record lacks it.\n                        // This requires a deviceSession to be meaningful.\n                        getLastLocation(position, null); // Replicates original logic\n                    }\n                    // Set deviceId before adding if known at this point\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    positions.add(position); // Add the completed position\n\n                    // Reset for the next position record\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                    // Pre-set deviceId on new position if session already known\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                }\n                keys.add(key);\n\n                switch (key) {\n                    case 0x01: // IMEI\n                        // Identify device session using IMEI\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        // If session exists, set deviceId on the current position object\n                        if (deviceSession != null) {\n                            position.setDeviceId(deviceSession.getDeviceId());\n                        }\n                        break;\n                    case 0x02: // Alarm\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14: // Battery\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20: // GPS Location\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21: // Cell Tower\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22: // WiFi AP\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23: // Tag Location\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24: // Timestamp and Status\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28: // Beacon Info\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            int descriptionLength = endIndex - buf.readerIndex();\n                            if (descriptionLength > 0) {\n                                position.set(\"description\", buf.readCharSequence(\n                                        descriptionLength, StandardCharsets.US_ASCII).toString());\n                            }\n                        }\n                        break;\n                    case 0x2A: // WiFi Location Alt\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6); // mac\n                        buf.readUnsignedByte(); // rssi\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30: // Steps\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31: // Activity\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37: // Barking\n                        buf.readUnsignedIntLE(); // timestamp\n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40: // Heart Rate\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                         // Unknown key: data will be skipped by buf.readerIndex(endIndex)\n                        break;\n                }\n                // Ensure reader index is positioned at the end of the current field's data,\n                // regardless of whether the switch case consumed all bytes.\n                buf.readerIndex(endIndex);\n            }\n\n            // Handle the last position object being built\n            if (!keys.isEmpty()) { // Check if any data was put into the last position object\n                if (!hasLocation) {\n                    // Replicates original logic\n                    getLastLocation(position, null);\n                }\n                 // Set deviceId before adding if known\n                if (deviceSession != null) {\n                    position.setDeviceId(deviceSession.getDeviceId());\n                }\n                positions.add(position); // Add the final position object\n            }\n\n            // Post-process the list: If deviceSession was found (possibly late), ensure all positions have the ID.\n            if (deviceSession != null) {\n                long deviceId = deviceSession.getDeviceId();\n                for (Position p : positions) {\n                    // Set deviceId if it wasn't set previously (e.g., position added before key 0x01)\n                    if (p.getDeviceId() == 0) { // Default deviceId is 0\n                         p.setDeviceId(deviceId);\n                    }\n                }\n            }\n            // FIX: Return the list if it's not empty, even if deviceSession is null.\n            // Avoids returning null just because the device hasn't identified itself in this message.\n            return positions.isEmpty() ? null : positions;\n\n        } // End of if (type == MSG_DATA)\n\n        return null; // Return null if type is not MSG_DATA\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}