{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // TODO(user): We should use isEnumElementType property rather than\n    // isEnumType, but Nodes must be annotated for that to work.\n    boolean isObjLit = objNode.isObjectLit();\n    if (childType.isDict() && !isObjLit) { // Allow property access on object literals, even if they are dicts\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (childType.isEnumType() && !isObjLit) { // Allow property access on object literals, even if they are enums\n      // TODO(nicksantos): This needs to be flushed out more.\n      // Like dicts, enums should not allow random property accesses.\n      // We can't use JSType#isSubtypeOf because we don't have\n      // a type variable for the enum type yet.\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"enum\");\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      // If the property access occurs on the left hand side of an assignment\n      // or a compound assignment, check whether the property is assignable.\n      boolean isAssign = parent.isAssign();\n      boolean isCompoundAssign = NodeUtil.isCompoundAssignment(parent);\n      if (isAssign || isCompoundAssign) {\n          checkPropertyAssignment(t, parent, n, childType);\n      } else {\n          // Do not check getprop accesses on the prototype chain\n          // unless the user has specified the stricter checks.\n          checkPropertyAccess(childType, property.getString(), t, n);\n      }\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}