{
    "generation": "    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n     * Must be called at least twice:  once with the data to encode, and once\n     * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n     * so flush last remaining bytes (if not multiple of 3).\n     * </p><p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n     * and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in byte[] array of binary data to base64 encode.\n     * @param inPos Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     */\n    void encode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        // inAvail < 0 is how we're informed of EOF in the underlying data we're\n        // encoding.\n        if (inAvail < 0) {\n            eof = true;\n            if (buf == null || buf.length - pos < encodeSize) { // Ensure buffer has space for potential output (4 chars + separator)\n                resizeBuf();\n            }\n            switch (modulus) { // Handle any leftover bytes (0, 1, or 2).\n                case 1: // One leftover byte needs padding\n                    // Output: 2 base64 chars + 2 padding (if standard) = 4 chars\n                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                        buf[pos++] = PAD;\n                    }\n                    break;\n\n                case 2: // Two leftover bytes need padding\n                    // Output: 3 base64 chars + 1 padding (if standard) = 4 chars\n                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                    }\n                    break;\n                // case 0: No leftover bytes -> no padding needed. pos remains unchanged.\n            }\n            // Add final line separator if lineLength is enabled AND some output has actually been generated (pos > 0).\n            // This prevents adding a line separator for empty input, fixing the reported bug.\n            if (lineLength > 0 && pos > 0) {\n                 // Ensure buffer has space for the line separator - resizeBuf should have handled this?\n                 // Adding an explicit check/resize here might be safer depending on resizeBuf implementation.\n                 // Assuming resizeBuf called above is sufficient for now.\n                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                 pos += lineSeparator.length;\n            }\n        } else { // Process available data bytes\n            for (int i = 0; i < inAvail; i++) {\n                if (buf == null || buf.length - pos < encodeSize) { // Ensure buffer has space for next output group (4 chars + potential separator)\n                    resizeBuf();\n                }\n                modulus = (++modulus) % 3; // Track position within input triplet\n                int b = in[inPos++];\n                if (b < 0) { b += 256; } // Convert byte to unsigned value\n                x = (x << 8) + b; // Accumulate 3 bytes into 24 bits (int x)\n                if (0 == modulus) { // If 3 bytes have been processed\n                    // Output 4 Base64 characters corresponding to the 3 bytes\n                    buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                    buf[pos++] = encodeTable[x & MASK_6BITS];\n                    currentLinePos += 4; // Update count of characters on current line\n\n                    // If line length is enabled and exceeded, add line separator\n                    if (lineLength > 0 && lineLength <= currentLinePos) {\n                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                        pos += lineSeparator.length;\n                        currentLinePos = 0; // Reset line counter\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}