{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order\n        for (ZipArchiveEntry ze : entries.keySet()) {\n            OffsetEntry offsetEntry = entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            // Seek to the LFH entry's filename length field\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            // Read filename length (2 bytes) and extra field length (2 bytes)\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n\n            // Skip the filename in the LFH\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new IOException(\"failed to skip file name in\"\n                                               + \" local file header\"); // Use IOException\n                }\n                lenToSkip -= skipped;\n            }\n\n            // Read the local extra field data to ascertain the correct data offset\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            // NOTE: We DO NOT update the entry's extra data with localExtraData.\n            // The extra data from the central directory is authoritative for metadata.\n            // Overwriting it here would discard potentially important information (e.g.,\n            // Unicode path extra fields) which might only be present in the central directory.\n            // ze.setExtra(localExtraData); // DO NOT DO THIS\n\n            // Calculate the data offset using lengths from LFH\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            // If the UTF-8 flag is not set, we might need to use extra fields\n            // (from the central directory) to find the correct name.\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                String orig = ze.getName();\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                // This method uses the extra fields already set on ze (from CDH)\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n                // If the name changed, update the name map\n                if (!orig.equals(ze.getName())) {\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                }\n            }\n            \n            // General Purpose Bit Flags specific processing? Usually done elsewhere.\n            // Setting the data offset is the main purpose here, plus potential name correction.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}