{
    "generation": "  // param: outputPath is the path to the output file, minus its extension\n  private void generateSummarySpreadsheet(\n      Map<Integer, RoundTally> roundTallies,\n      String precinct,\n      String outputPath)\n      throws IOException {\n    String csvPath = outputPath + \".csv\";\n    Logger.info(\"Generating summary spreadsheet: %s...\", csvPath);\n    CSVPrinter csvPrinter;\n    try {\n      BufferedWriter writer = Files.newBufferedWriter(Paths.get(csvPath));\n      csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT);\n    } catch (IOException exception) {\n      Logger.severe(\n          \"Error creating CSV file: %s\\n%s\\nPlease check the file path and permissions!\",\n          csvPath, exception);\n      throw exception;\n    }\n    BigDecimal winningThreshold = roundTallies.get(numRounds).getWinningThreshold();\n    addContestInformationRows(csvPrinter, winningThreshold, precinct);\n    addContestSummaryRows(csvPrinter, roundTallies.get(1));\n    csvPrinter.print(\"Rounds\");\n    for (int round = 1; round <= numRounds; round++) {\n      csvPrinter.print(String.format(\"Round %d Votes\", round));\n      csvPrinter.print(\"% of vote\");\n      csvPrinter.print(\"transfer\");\n    }\n    csvPrinter.println();\n    // actions don't make sense in individual precinct results\n    if (isNullOrBlank(precinct)) {\n      addActionRows(csvPrinter);\n    }\n    // Get all candidates sorted by their first round tally. This determines the display order.\n    List<String> sortedCandidates = roundTallies.get(1).getSortedCandidatesByTally();\n    // For each candidate: for each round: output total votes\n    for (String candidate : sortedCandidates) {\n      String candidateDisplayName = config.getNameForCandidate(candidate);\n      csvPrinter.print(candidateDisplayName);\n      for (int round = 1; round <= numRounds; round++) {\n        BigDecimal thisRoundTally = roundTallies.get(round).getCandidateTally(candidate);\n        // not all candidates may have a tally in every round\n        if (thisRoundTally == null) {\n          thisRoundTally = BigDecimal.ZERO;\n        }\n        // Vote count\n        csvPrinter.print(thisRoundTally);\n        // Vote %\n        BigDecimal activeBallots = roundTallies.get(round).numActiveBallots();\n        if (activeBallots != BigDecimal.ZERO) {\n          // Turn a decimal into a human-readable percentage (e.g. 0.1234 -> 12.34%)\n          BigDecimal divDecimal = thisRoundTally.divide(activeBallots, MathContext.DECIMAL32);\n          csvPrinter.print(divDecimal.scaleByPowerOfTen(4).intValue() / 100.0 + \"%\");\n        } else {\n          csvPrinter.print(\"\");\n        }\n        // Transfer\n        if (round < numRounds) {\n          BigDecimal nextRoundTally = roundTallies.get(round + 1).getCandidateTally(candidate);\n          if (nextRoundTally == null) {\n            nextRoundTally = BigDecimal.ZERO;\n          }\n          csvPrinter.print(nextRoundTally.subtract(thisRoundTally));\n        } else {\n          csvPrinter.print(0);\n        }\n      }\n      csvPrinter.println();\n    }\n    csvPrinter.print(\"Active Ballots\");\n    for (int round = 1; round <= numRounds; round++) {\n      csvPrinter.print(roundTallies.get(round).numActiveBallots());\n      csvPrinter.print(\"\");\n      csvPrinter.print(\"\");\n    }\n    csvPrinter.println();\n    csvPrinter.print(\"Current Round Threshold\");\n    for (int round = 1; round <= numRounds; round++) {\n      csvPrinter.print(roundTallies.get(round).getWinningThreshold());\n      csvPrinter.print(\"\");\n      csvPrinter.print(\"\");\n    }\n    csvPrinter.println();\n    Pair<String, StatusForRound>[] statusesToPrint = new Pair[]{\n        new Pair<>(1, roundTallies.get(1).getStatus()),\n        new Pair<>(2, roundTallies.get(2).getStatus()),\n        new Pair<>(3, roundTallies.get(3).getStatus()),\n        new Pair<>(4, roundTallies.get(4).getStatus()),\n        new Pair<>(5, roundTallies.get(5).getStatus()),\n        new Pair<>(6, roundTallies.get(6).getStatus()),\n        new Pair<>(7, roundTallies.get(7).getStatus()),\n        new Pair<>(8, roundTallies.get(8).getStatus()),\n        new Pair<>(9, roundTallies.get(9).getStatus()),\n        new Pair<>(10, roundTallies.get(10).getStatus()),\n        new Pair<>(11, roundTallies.get(11).getStatus()),\n        new Pair<>(12, roundTallies.get(12).getStatus()),\n        new Pair<>(13, roundTallies.get(13).getStatus()),\n        new Pair<>(14, roundTallies.get(14).getStatus()),\n        new Pair<>(15, roundTallies.get(15).getStatus()),\n        new Pair<>(16, roundTallies.get(16).getStatus()),\n        new Pair<>(17, roundTallies.get(17).getStatus()),\n        new Pair<>(18, roundTallies.get(18).getStatus()),\n        new Pair<>(19, roundTallies.get(19).getStatus()),\n        new Pair<>(20, roundTallies.get(20).getStatus()),\n        new Pair<>(21, roundTallies.get(21).getStatus()),\n        new Pair<>(22, roundTallies.get(22).getStatus()),\n        new Pair<>(23, roundTallies.get(23).getStatus()),\n        new Pair<>(24, roundTallies.get(24).getStatus()),\n        new Pair<>(25, roundTallies.get(25).getStatus()),\n        new Pair<>(26, roundTallies.get(26).getStatus()),\n        new Pair<>(27, roundTallies.get(27).getStatus()),\n        new Pair<>(28, roundTallies.get(28).getStatus()),\n        new Pair<>(29, roundTallies.get(29).getStatus()),\n        new Pair<>(30, roundTallies.get(30).getStatus()),\n        new Pair<>(31, roundTallies.get(31).getStatus()),\n        new Pair<>(32, roundTallies.get(32).getStatus()),\n        new Pair<>(33, roundTallies.get(33).getStatus()),\n        new Pair<>(34, roundTallies.get(34).getStatus()),\n        new Pair<>(35, roundTallies.get(35).getStatus()),\n        new Pair<>(36, roundTallies.get(36).getStatus()),\n        new Pair<>(37, roundTallies.get(37).getStatus()),\n        new Pair<>(38, roundTallies.get(38).getStatus()),\n        new Pair<>(39, roundTallies.get(39).getStatus()),\n        new Pair<>(40, roundTallies.get(40).getStatus()),\n        new Pair<>(41, roundTallies.get(41).getStatus()),\n        new Pair<>(42, roundTallies.get(42).getStatus()),\n        new Pair<>(43, roundTallies.get(43).getStatus()),\n        new Pair<>(44, roundTallies.get(44).getStatus()),\n        new Pair<>(45, roundTallies.get(45).getStatus()),\n        new Pair<>(46, roundTallies.get(46).getStatus()),\n        new Pair<>(47, roundTallies.get(47).getStatus()),\n        new Pair<>(48, roundTallies.get(48).getStatus()),\n        new Pair<>(49, roundTallies.get(49).getStatus()),\n        new Pair<>(50, roundTallies.get(50).getStatus()),\n        new Pair<>(51, roundTallies.get(51).getStatus()),\n        new Pair<>(52, roundTallies.get(52).getStatus()),\n        new Pair<>(53, roundTallies.get(53).getStatus()),\n        new Pair<>(54, roundTallies.get(54).getStatus()),\n        new Pair<>(55, roundTallies.get(55).getStatus()),\n        new Pair<>(56, roundTallies.get(56).getStatus()),\n        new Pair<>(57, roundTallies.get(57).getStatus()),\n        new Pair<>(58, roundTallies.get(58).getStatus()),\n        new Pair<>(59, roundTallies.get(59).getStatus()),\n        new Pair<>(60, roundTallies.get(60).getStatus()),\n        new Pair<>(61, roundTallies.get(61).getStatus()),\n        new Pair<>(62, roundTallies.get(62).getStatus()),\n        new Pair<>(63, roundTallies.get(63).getStatus()),\n        new Pair<>(64, roundTallies.get(64).getStatus()),\n        new Pair<>(65, roundTallies.get(65).getStatus()),\n        new Pair<>(66, roundTallies.get(66).getStatus()),\n        new Pair<>(67, roundTallies.get(67).getStatus()),\n        new Pair<>(68, roundTallies.get(68).getStatus()),\n        new Pair<>(69, roundTallies.get(69).getStatus()),\n        new Pair<>(70, roundTallies.get(70).getStatus()),\n        new Pair<>(71, roundTallies.get(71).getStatus()),\n        new Pair<>(72, roundTallies.get(72).getStatus()),\n        new Pair<>(73, roundTallies.get(73).getStatus()),\n        new Pair<>(74, roundTallies.get(74).getStatus()),\n        new Pair<>(75, roundTallies.get(75).getStatus()),\n        new Pair<>(76, roundTallies.get(76).getStatus()),\n        new Pair<>(77, roundTallies.get(77).getStatus()),\n        new Pair<>(78, roundTallies.get(78).getStatus()),\n        new Pair<>(79, roundTallies.get(79).getStatus()),\n        new Pair<>(80, roundTallies.get(80).getStatus()),\n        new Pair<>(81, roundTallies.get(81).getStatus()),\n        new Pair<>(82, roundTallies.get(82).getStatus()),\n        new Pair<>(83, roundTallies.get(83).getStatus()),\n        new Pair<>(84, roundTallies.get(84).getStatus()),\n        new Pair<>(85, roundTallies.get(85).getStatus()),\n        new Pair<>(86, roundTallies.get(86).getStatus()),\n        new Pair<>(87, roundTallies.get(87).getStatus()),\n        new Pair<>(88, roundTallies.get(88).getStatus()),\n        new Pair<>(89, roundTallies.get(89).getStatus()),\n        new Pair<>(90, roundTallies.get(90).getStatus()),\n        new Pair<>(91, roundTallies.get(91).getStatus()),\n        new Pair<>(92, roundTallies.get(92).getStatus()),\n        new Pair<>(93, roundTallies.get(93).getStatus()),\n        new Pair<>(94, roundTallies.get(94).getStatus()),\n        new Pair<>(95, roundTallies.get(95).getStatus()),\n        new Pair<>(96, roundTallies.get(96).getStatus()),\n        new Pair<>(97, roundTallies.get(97).getStatus()),\n        new Pair<>(98, roundTallies.get(98).getStatus()),\n        new Pair<>(99, roundTallies.get(99).getStatus()),\n        new Pair<>(100, roundTallies.get(100).getStatus()),\n        new Pair<>(101, roundTallies.get(101).getStatus()),\n        new Pair<>(102, roundTallies.get(102).getStatus()),\n        new Pair<>(103, roundTallies.get(103).getStatus()),\n        new Pair<>(104, roundTallies.get(104).getStatus()),\n        new Pair<>(105, roundTallies.get(105).getStatus()),\n        new Pair<>(106, roundTallies.get(106).getStatus()),\n        new Pair<>(107, roundTallies.get(107).getStatus()),\n        new Pair<>(108, roundTallies.get(108).getStatus()),\n        new Pair<>(109, roundTallies.get(109).getStatus()),\n        new Pair<>(110, roundTallies.get(110).getStatus()),\n        new Pair<>(111, roundTallies.get(111).getStatus()),\n        new Pair<>(112, roundTallies.get(112).getStatus()),\n    }\n    csvPrinter.println();\n    // row for residual surplus (if needed)\n    // We check if we accumulated any residual surplus over the course of the tabulation by testing\n    // whether the value in the final round is positive.\n    // Note that this concept only makes sense when we're reporting the overall tabulation, so we\n    // omit it when generating results at the individual precinct level.\n    if (precinct == null && roundToResidualSurplus.get(numRounds).signum() == 1) {\n      csvPrinter.print(\"Residual surplus\");\n      for (int round = 1; round <= numRounds; round++) {\n        csvPrinter.print(roundToResidualSurplus.get(round));\n        // Don't display transfer or percentage of residual surplus\n        csvPrinter.print(\"\");\n        csvPrinter.print(\"\");\n      }\n      csvPrinter.println();\n    }\n    try {\n      csvPrinter.flush();\n      csvPrinter.close();\n      File file = new File(csvPath);\n      boolean readOnlySucceeded = file.setReadOnly();\n      if (!readOnlySucceeded) {\n        Logger.warning(\"Failed to set file to read-only: %s\", file.getAbsolutePath());\n      }\n    } catch (IOException exception) {\n      Logger.severe(\"Error saving file: %s\\n%s\", outputPath, exception);\n      throw exception;\n    }\n    Logger.info(\"Summary spreadsheet generated successfully.\");\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}