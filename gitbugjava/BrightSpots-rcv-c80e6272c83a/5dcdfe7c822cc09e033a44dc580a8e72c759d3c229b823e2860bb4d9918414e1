{
    "generation": "  // param: outputPath is the path to the output file, minus its extension\n  private void generateSummarySpreadsheet(\n      Map<Integer, RoundTally> roundTallies,\n      String precinct,\n      String outputPath)\n      throws IOException {\n    String csvPath = outputPath + \".csv\";\n    Logger.info(\"Generating summary spreadsheet: %s...\", csvPath);\n    CSVPrinter csvPrinter;\n    try {\n      BufferedWriter writer = Files.newBufferedWriter(Paths.get(csvPath));\n      csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT);\n    } catch (IOException exception) {\n      Logger.severe(\n          \"Error creating CSV file: %s\\n%s\\nPlease check the file path and permissions!\",\n          csvPath, exception);\n      throw exception;\n    }\n    BigDecimal winningThreshold = roundTallies.get(numRounds).getWinningThreshold();\n    addContestInformationRows(csvPrinter, winningThreshold, precinct);\n    addContestSummaryRows(csvPrinter, roundTallies.get(1));\n    csvPrinter.print(\"Rounds\");\n    for (int round = 1; round <= numRounds; round++) {\n      csvPrinter.print(String.format(\"Round %d Votes\", round));\n      csvPrinter.print(\"% of vote\");\n      csvPrinter.print(\"transfer\");\n    }\n    csvPrinter.println();\n    // actions don't make sense in individual precinct results\n    if (isNullOrBlank(precinct)) {\n      addActionRows(csvPrinter);\n    }\n    // Get all candidates sorted by their first round tally. This determines the display order.\n    List<String> sortedCandidates = roundTallies.get(1).getSortedCandidatesByTally();\n    // For each candidate: for each round: output total votes\n    for (String candidate : sortedCandidates) {\n      String candidateDisplayName = config.getNameForCandidate(candidate);\n      csvPrinter.print(candidateDisplayName);\n      for (int round = 1; round <= numRounds; round++) {\n        BigDecimal thisRoundTally = roundTallies.get(round).getCandidateTally(candidate);\n        // not all candidates may have a tally in every round\n        if (thisRoundTally == null) {\n          thisRoundTally = BigDecimal.ZERO;\n        }\n        // Vote count\n        csvPrinter.print(thisRoundTally);\n        // Vote %\n        BigDecimal activeBallots = roundTallies.get(round).numActiveBallots();\n        if (activeBallots != BigDecimal.ZERO) {\n          // Turn a decimal into a human-readable percentage (e.g. 0.1234 -> 12.34%)\n          BigDecimal divDecimal = thisRoundTally.divide(activeBallots, MathContext.DECIMAL32);\n          csvPrinter.print(divDecimal.scaleByPowerOfTen(4).intValue() / 100.0 + \"%\");\n        } else {\n          csvPrinter.print(\"\");\n        }\n        // Transfer\n        if (round < numRounds) {\n          BigDecimal nextRoundTally = roundTallies.get(round + 1).getCandidateTally(candidate);\n          if (nextRoundTally == null) {\n            nextRoundTally = BigDecimal.ZERO;\n          }\n          csvPrinter.print(nextRoundTally.subtract(thisRoundTally));\n        } else {\n          csvPrinter.print(0);\n        }\n      }\n      csvPrinter.println();\n    }\n    csvPrinter.print(\"Active Ballots\");\n    for (int round = 1; round <= numRounds; round++) {\n      csvPrinter.print(roundTallies.get(round).numActiveBallots());\n      csvPrinter.print(\"\");\n      csvPrinter.print(\"\");\n    }\n    csvPrinter.println();\n    csvPrinter.print(\"Current Round Threshold\");\n    for (int round = 1; round <= numRounds; round++) {\n      csvPrinter.print(roundTallies.get(round).getWinningThreshold());\n      csvPrinter.print(\"\");\n      csvPrinter.print(\"\");\n    }\n    csvPrinter.println();\n    Pair<String, StatusForRound>[] statusesToPrint = new Pair[]{\n        new Pair<>(1, roundToStatus.get(1)),\n        new Pair<>(2, roundToStatus.get(2)),\n        new Pair<>(3, roundToStatus.get(3)),\n        new Pair<>(4, roundToStatus.get(4)),\n        new Pair<>(5, roundToStatus.get(5)),\n        new Pair<>(6, roundToStatus.get(6)),\n        new Pair<>(7, roundToStatus.get(7)),\n        new Pair<>(8, roundToStatus.get(8)),\n        new Pair<>(9, roundToStatus.get(9)),\n        new Pair<>(10, roundToStatus.get(10)),\n        new Pair<>(11, roundToStatus.get(11)),\n        new Pair<>(12, roundToStatus.get(12)),\n        new Pair<>(13, roundToStatus.get(13)),\n        new Pair<>(14, roundToStatus.get(14)),\n        new Pair<>(15, roundToStatus.get(15)),\n        new Pair<>(16, roundToStatus.get(16)),\n        new Pair<>(17, roundToStatus.get(17)),\n        new Pair<>(18, roundToStatus.get(18)),\n        new Pair<>(19, roundToStatus.get(19)),\n        new Pair<>(20, roundToStatus.get(20)),\n        new Pair<>(21, roundToStatus.get(21)),\n        new Pair<>(22, roundToStatus.get(22)),\n        new Pair<>(23, roundToStatus.get(23)),\n        new Pair<>(24, roundToStatus.get(24)),\n        new Pair<>(25, roundToStatus.get(25)),\n        new Pair<>(26, roundToStatus.get(26)),\n        new Pair<>(27, roundToStatus.get(27)),\n        new Pair<>(28, roundToStatus.get(28)),\n        new Pair<>(29, roundToStatus.get(29)),\n        new Pair<>(30, roundToStatus.get(30)),\n        new Pair<>(31, roundToStatus.get(31)),\n        new Pair<>(32, roundToStatus.get(32)),\n        new Pair<>(33, roundToStatus.get(33)),\n        new Pair<>(34, roundToStatus.get(34)),\n        new Pair<>(35, roundToStatus.get(35)),\n        new Pair<>(36, roundToStatus.get(36)),\n        new Pair<>(37, roundToStatus.get(37)),\n        new Pair<>(38, roundToStatus.get(38)),\n        new Pair<>(39, roundToStatus.get(39)),\n        new Pair<>(40, roundToStatus.get(40)),\n        new Pair<>(41, roundToStatus.get(41)),\n        new Pair<>(42, roundToStatus.get(42)),\n        new Pair<>(43, roundToStatus.get(43)),\n        new Pair<>(44, roundToStatus.get(44)),\n        new Pair<>(45, roundToStatus.get(45)),\n        new Pair<>(46, roundToStatus.get(46)),\n        new Pair<>(47, roundToStatus.get(47)),\n        new Pair<>(48, roundToStatus.get(48)),\n        new Pair<>(49, roundToStatus.get(49)),\n        new Pair<>(50, roundToStatus.get(50)),\n        new Pair<>(51, roundToStatus.get(51)),\n        new Pair<>(52, roundToStatus.get(52)),\n        new Pair<>(53, roundToStatus.get(53)),\n        new Pair<>(54, roundToStatus.get(54)),\n        new Pair<>(55, roundToStatus.get(55)),\n        new Pair<>(56, roundToStatus.get(56)),\n        new Pair<>(57, roundToStatus.get(57)),\n        new Pair<>(58, roundToStatus.get(58)),\n        new Pair<>(59, roundToStatus.get(59)),\n        new Pair<>(60, roundToStatus.get(60)),\n        new Pair<>(61, roundToStatus.get(61)),\n        new Pair<>(62, roundToStatus.get(62)),\n        new Pair<>(63, roundToStatus.get(63)),\n        new Pair<>(64, roundToStatus.get(64)),\n        new Pair<>(65, roundToStatus.get(65)),\n        new Pair<>(66, roundToStatus.get(66)),\n        new Pair<>(67, roundToStatus.get(67)),\n        new Pair<>(68, roundToStatus.get(68)),\n        new Pair<>(69, roundToStatus.get(69)),\n        new Pair<>(70, roundToStatus.get(70)),\n        new Pair<>(71, roundToStatus.get(71)),\n        new Pair<>(72, roundToStatus.get(72)),\n        new Pair<>(73, roundToStatus.get(73)),\n        new Pair<>(74, roundToStatus.get(74)),\n        new Pair<>(75, roundToStatus.get(75)),\n        new Pair<>(76, roundToStatus.get(76)),\n        new Pair<>(77, roundToStatus.get(77)),\n        new Pair<>(78, roundToStatus.get(78)),\n        new Pair<>(79, roundToStatus.get(79)),\n        new Pair<>(80, roundToStatus.get(80)),\n        new Pair<>(81, roundToStatus.get(81)),\n        new Pair<>(82, roundToStatus.get(82)),\n        new Pair<>(83, roundToStatus.get(83)),\n        new Pair<>(84, roundToStatus.get(84)),\n        new Pair<>(85, roundToStatus.get(85)),\n        new Pair<>(86, roundToStatus.get(86)),\n        new Pair<>(87, roundToStatus.get(87)),\n        new Pair<>(88, roundToStatus.get(88)),\n        new Pair<>(89, roundToStatus.get(89)),\n        new Pair<>(90, roundToStatus.get(90)),\n        new Pair<>(91, roundToStatus.get(91)),\n        new Pair<>(92, roundToStatus.get(92)),\n        new Pair<>(93, roundToStatus.get(93)),\n        new Pair<>(94, roundToStatus.get(94)),\n        new Pair<>(95, roundToStatus.get(95)),\n        new Pair<>(96, roundToStatus.get(96)),\n        new Pair<>(97, roundToStatus.get(97)),\n        new Pair<>(98, roundToStatus.get(98)),\n        new Pair<>(99, roundToStatus.get(99)),\n        new Pair<>(100, roundToStatus.get(100)),\n        new Pair<>(101, roundToStatus.get(101)),\n        new Pair<>(102, roundToStatus.get(102)),\n        new Pair<>(103, roundToStatus.get(103)),\n        new Pair<>(104, roundToStatus.get(104)),\n        new Pair<>(105, roundToStatus.get(105)),\n        new Pair<>(106, roundToStatus.get(106)),\n        new Pair<>(107, roundToStatus.get(107)),\n        new Pair<>(108, roundToStatus.get(108)),\n        new Pair<>(109, roundToStatus.get(109)),\n        new Pair<>(110, roundToStatus.get(110)),\n        new Pair<>(111, roundToStatus.get(111)),\n        new Pair<>(112, roundToStatus.get(112)),\n        new Pair<>(113, roundToStatus.get(113)),\n        new Pair<>(114, roundToStatus.get(114)),\n        new Pair<>(115, roundToStatus.get(115)),\n        new Pair<>(116, roundToStatus.get(116)),\n        new Pair<>(117, roundToStatus.get(117)),\n        new Pair<>(118, roundToStatus.get(118)),\n        new Pair<>(119, roundToStatus.get(119)),\n        new Pair<>(120, roundToStatus.get(120)),\n        new Pair<>(121, roundToStatus.get(121)),\n        new Pair<>(122, roundToStatus.get(122)),\n        new Pair<>(123, roundToStatus.get(123)),\n        new Pair<>(124, roundToStatus.get(124)),\n        new Pair<>(125, roundToStatus.get(125)),\n        new Pair<>(126, roundToStatus.get(126)),\n        new Pair<>(127, roundToStatus.get(127)),\n        new Pair<>(128, roundToStatus.get(128)),\n        new Pair<>(129, roundToStatus.get(129)),\n        new Pair<>(130, roundToStatus.get(130)),\n        new Pair<>(131, roundToStatus.get(131)),\n        new Pair<>(132, roundToStatus.get(132)),\n        new Pair<>(133, roundToStatus.get(133))\n    };\n    for (\n    }\n    csvPrinter.println();\n    // row for residual surplus (if needed)\n    // We check if we accumulated any residual surplus over the course of the tabulation by testing\n    // whether the value in the final round is positive.\n    // Note that this concept only makes sense when we're reporting the overall tabulation, so we\n    // omit it when generating results at the individual precinct level.\n    if (precinct == null && roundToResidualSurplus.get(numRounds).signum() == 1) {\n      csvPrinter.print(\"Residual surplus\");\n      for (int round = 1; round <= numRounds; round++) {\n        csvPrinter.print(roundToResidualSurplus.get(round));\n        // Don't display transfer or percentage of residual surplus\n        csvPrinter.print(\"\");\n        csvPrinter.print(\"\");\n      }\n      csvPrinter.println();\n    }\n    try {\n      csvPrinter.flush();\n      csvPrinter.close();\n      File file = new File(csvPath);\n      boolean readOnlySucceeded = file.setReadOnly();\n      if (!readOnlySucceeded) {\n        Logger.warning(\"Failed to set file to read-only: %s\", file.getAbsolutePath());\n      }\n    } catch (IOException exception) {\n      Logger.severe(\"Error saving file: %s\\n%s\", outputPath, exception);\n      throw exception;\n    }\n    Logger.info(\"Summary spreadsheet generated successfully.\");\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}