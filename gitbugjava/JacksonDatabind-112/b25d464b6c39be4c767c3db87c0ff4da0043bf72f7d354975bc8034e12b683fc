{
    "generation": "    /*\n    /**********************************************************\n    /* Validation, post-processing\n    /**********************************************************\n     */\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegate = null;\n        if (_valueInstantiator != null) {\n            JavaType delegateType = null;\n            // [databind#2324]: Check array-delegate BEFORE standard delegate\n            if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n                // We may also need the creator metadata, but I don't think\n                // contextualization requires it? If it did, would need:\n                 // AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();\n            } else if (_valueInstantiator.canCreateUsingDelegate()) {\n                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                 // AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n            }\n\n            if (delegateType != null) {\n                 // Living dangerously, for a moment:\n                 // (note: property is null if called by collection?)\n                 delegate = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n\n        // Ok, then possibly resolve content deserializer:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        final JavaType valueType = _containerType.getContentType();\n        if (valueDeser == null) {\n            // [databind#125]: May have a content converter\n            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n            if (valueDeser == null) {\n            // And we may also need to get deserializer for String\n                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n            }\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n        }\n        // [databind#104]: Support single-element arrays from scalar values\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // [databind#2023] Need to make sure ValueNullProvider is contextualized here\n        NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n        if (isDefaultDeserializer(valueDeser)) {\n            valueDeser = null;\n        }\n        // Note: we do not actually check that delegate == null if valueDeser == null.\n        // Perhaps we should? Seems strange if both are null?\n        return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}