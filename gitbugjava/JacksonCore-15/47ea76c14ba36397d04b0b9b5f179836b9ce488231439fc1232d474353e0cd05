{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // [APR] Check if we've already found a match and further matches are disallowed.\n        // If multiple matches not allowed, and we have found the first match,\n        // and we are not still processing buffered tokens from that match, return null.\n        // (_foundMatch is a new protected boolean field, initialized to false)\n        if (!_allowMultipleMatches && _foundMatch && _exposedContext == null) {\n             // Signal EOF for the filter stream\n             return (_currToken = null);\n        }\n\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    // If we get here, previous context is now fully read.\n                    // If _foundMatch was true, the next call will return null via the check above.\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n                        // Is this guaranteed to work without further checks? Yes, context handled.\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of FIELD_NAME, which can't be current token\n                    // after spending time buffered\n                    //\n                    // BUT: [JACKSON-291] May need to improve handling of FIELD_NAME matching\n                    // things...\n                    /* Let's assume it's ok: that is, FIELD_NAME is only returned by main loop,\n                     * if this occurs?\n                     */\n                    /*\n                    JsonToken t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                       _currToken = t;\n                       return t;\n                    }\n                    */\n\n                    break; // Break from while, resume main loop\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // End-of-input is always passed directly (although contexts may need closing?)\n            /* NOTE: there is one possible edge case; where the last token is END_OBJECT/ARRAY,\n             * which could match a filter. But let's assume that's not the case; handling\n             * would require significant rooting around. And initial goal is just to get\n             * basic path/property filtering working.\n             */\n            // No need to close anything here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n\n        // Use ID constants for switch for performance\n        final int id = t.id();\n        switch (id) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                // [APR] Set flag if this START_ARRAY itself constitutes the single match result\n                if (!_includePath && !_allowMultipleMatches && !_foundMatch) {\n                    _foundMatch = true;\n                }\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Non-trivial filter, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) { // value filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Ok, value check passes; check structure itself:\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n             // Check filter result for the array itself\n             if (f == null) { // filter indicates skip\n                 delegate.skipChildren();\n                 break;\n             }\n            _itemFilter = f; // filter for items\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                // [APR] Set flag if this START_ARRAY itself constitutes the single match result\n                if (!_includePath && !_allowMultipleMatches && !_foundMatch) {\n                    _foundMatch = true;\n                }\n                return (_currToken = t);\n            }\n            // Not-INCLUDE_ALL; include container structure if parent path is included\n            _headContext = _headContext.createChildArrayContext(f, false);\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // If !includePath or buffering didn't provide token, we need to call\n            // _nextToken2() to find the first actual token to return\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                 // [APR] Set flag if this START_OBJECT itself constitutes the single match result\n                 if (!_includePath && !_allowMultipleMatches && !_foundMatch) {\n                     _foundMatch = true;\n                 }\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Non-trivial filter, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) { // value filter indicates skip\n                delegate.skipChildren();\n                break;\n            }\n            // Ok, value check passes; check structure itself:\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n              // Check filter result for the object itself\n              if (f == null) { // filter indicates skip\n                  delegate.skipChildren();\n                  break;\n              }\n            _itemFilter = f; // filter for properties\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                 // [APR] Set flag if this START_OBJECT itself constitutes the single match result\n                 if (!_includePath && !_allowMultipleMatches && !_foundMatch) {\n                     _foundMatch = true;\n                 }\n                return (_currToken = t);\n            }\n             // Not-INCLUDE_ALL; include container structure if parent path is included\n            _headContext = _headContext.createChildObjectContext(f, false);\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n             // If !includePath or buffering didn't provide token, we need to call\n             // _nextToken2() to find the first actual token to return\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    // Call the filter method appropriate for the token type\n                    if (id == ID_END_ARRAY) { // Use id directly\n                        f.filterFinishArray();\n                    } else { // Must be END_OBJECT\n                        f.filterFinishObject();\n                    }\n                }\n                _headContext = _headContext.getParent();\n                // Update item filter based on the parent context's filter\n                _itemFilter = (_headContext != null) ? _headContext.getFilter() : null; // Need null check for root\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName' in context\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f; // filter for value is also INCLUDE_ALL\n                    // If including path, return FIELD_NAME.\n                    // If not including path, but need to include START_OBJECT, buffer it.\n                    // This logic follows the original closely.\n                    if (!_includePath) {\n                         if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                             t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                             _exposedContext = _headContext;\n                             // Original code returned FIELD_NAME even after buffering START_OBJECT.\n                             // Let next call return START_OBJECT from buffer.\n                             // The current call returns FIELD_NAME.\n                         }\n                    }\n                    return (_currToken = t); // Return FIELD_NAME\n                }\n                if (f == null) { // field name filtered out\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                 // Ok, maybe include? Check specific property filter:\n                TokenFilter fprop = f.includeProperty(name); // filter for property value\n                if (fprop == null) { // property filtered out\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                // Property included, 'fprop' is the filter for the value.\n                _itemFilter = fprop;\n                if (fprop == TokenFilter.INCLUDE_ALL) {\n                    // Value is included automatically. Return FIELD_NAME?\n                    if (_includePath) { // Original check\n                        return (_currToken = t); // Return FIELD_NAME\n                    }\n                    // If !_includePath, check buffering for parent START_OBJECT\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                         t = _headContext.nextTokenToRead(); // returns START_OBJECT\n                         _exposedContext = _headContext;\n                         return (_currToken = t); // Return buffered START_OBJECT first\n                    }\n                    // Otherwise break to let value be processed by nextToken2 (value follows FIELD_NAME)\n                } else { // fprop is not null, not INCLUDE_ALL. Value needs filtering.\n                    // Need buffering check?\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                 // If !includePath or buffering yields nothing, break to process value.\n                }\n                break; // Proceed to _nextToken2() for value/structure\n            }\n\n        default: // scalar value (primitive types, null, text)\n            f = _itemFilter;\n            boolean included = false;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                included = true;\n            } else if (f != null) {\n                TokenFilter f2 = _headContext.checkValue(f);\n                if ((f2 == TokenFilter.INCLUDE_ALL) || ((f2 != null) && f2.includeValue(delegate))) {\n                    included = true;\n                }\n            }\n\n            if (included) {\n                // [APR] This scalar is included. If multiple matches not allowed, set the flag\n                // only if it hasn't been set already (first match).\n                if (!_allowMultipleMatches && !_foundMatch) {\n                     _foundMatch = true;\n                }\n                return (_currToken = t);\n            }\n            // Otherwise scalar value is filtered out, continue loop via _nextToken2()\n            break;\n        }\n\n        // We get here if token was filtered out, or needs further processing (like FIELD_NAME value)\n        // find next token to return (may be null)\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}