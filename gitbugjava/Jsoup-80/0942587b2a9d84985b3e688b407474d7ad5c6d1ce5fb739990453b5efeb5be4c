{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                try {\n                    // Remove the first character (? or !)\n                    String declarationContent = data.substring(1);\n                    // Check if content is empty or blank, which would lead to invalid tag like \"<>\"\n                    if (declarationContent.trim().isEmpty()) {\n                         // If content is empty/blank, fallback to inserting the original comment node.\n                         // The 'insert' variable already holds the comment node.\n                    } else {\n                        // Parse the content as an XML fragment, wrapped in \"<>\"\n                        Document doc = Jsoup.parse(\"<\" + declarationContent + \">\", baseUri, Parser.xmlParser());\n                        // Check if the parsing resulted in a valid element\n                        if (doc.children().size() > 0) {\n                            Element el = doc.child(0);\n                            // Create an XmlDeclaration node\n                            insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                            // Copy attributes from the parsed element\n                            insert.attributes().addAll(el.attributes());\n                        }\n                        // If doc had no children (e.g., parsed fragment was empty or invalid like \"<>\"),\n                        // 'insert' remains the original comment node.\n                    }\n                } catch (Exception e) {\n                    // In case of any parsing errors, fallback to inserting the original comment.\n                    // 'insert' remains the original comment node.\n                    // Consider logging the exception e if necessary for debugging.\n                }\n            }\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}