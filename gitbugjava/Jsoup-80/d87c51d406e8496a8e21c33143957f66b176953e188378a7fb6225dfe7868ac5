{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                String coreData = data.substring(1);\n                 // Trim trailing ? or > defensively, handling empty coreData case\n                 if (coreData.length() > 0 && (coreData.endsWith(\"?\") || coreData.endsWith(\">\"))) {\n                    coreData = coreData.substring(0, coreData.length() - 1);\n                 }\n\n                 // Check if there's actual content after stripping delimiters\n                 if (coreData.trim().length() > 0) {\n                    Document doc = null;\n                    try {\n                         // Parse the core data assumed to be tagname + attributes\n                         doc = Jsoup.parse(\"<\" + coreData + \">\", baseUri, Parser.xmlParser());\n                    } catch (Exception e) {\n                        // On parse failure, keep the original comment node. Log error?\n                        // Logger.warn(\"Could not parse bogus comment data: \" + coreData, e);\n                    }\n\n                    if (doc != null) {\n                        // Safely get the first element child, null if none\n                        Element el = doc.children().first();\n                        if (el != null) { // Check if an element was found\n                            // If starts with ?, it's likely a PI e.g. <?xml version=...?>\n                            if (data.startsWith(\"?\")) {\n                                String nodeName = settings.normalizeTag(el.tagName());\n                                // Create XmlDeclaration, isProcessingInstruction=true\n                                insert = new XmlDeclaration(nodeName, true);\n                                insert.attributes().addAll(el.attributes());\n                            }\n                            // If starts with !, it could be <!DOCTYPE...> or other directives.\n                            // The original code treated this as XmlDeclaration(name, false) which seems incorrect.\n                            // Safest fallback is to leave it as a comment. A future enhancement\n                            // could parse <!DOCTYPE> into a DocumentType node.\n                            // else data starts with \"!\", keep insert = comment;\n                        }\n                        // else: If parsing produced no element child (e.g., parse of \"< >\"), keep as comment.\n                    }\n                    // else: If parse failed (doc is null), keep as comment.\n                }\n                 // else: If coreData is empty or whitespace (e.g., from \"<??>\"), keep as comment.\n            }\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}