{
    "generation": "package com.fasterxml.jackson.databind.deser.std;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\n\nimport com.fasterxml.jackson.databind.*;\nimport com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer;\nimport com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\nimport com.fasterxml.jackson.databind.util.AccessPattern;\nimport com.fasterxml.jackson.databind.util.NumberInput;\n\n// This is one of the functions likely containing the bug pattern.\n// The fix needs to be applied similarly to LongDeserializer, FloatDeserializer, DoubleDeserializer.\n// Located in: com.fasterxml.jackson.databind.deser.std.NumberDeserializers.IntDeserializer\n// Note: The exact surrounding class structure and imports might vary slightly depending on the specific Jackson version.\n\npublic final class IntDeserializer extends PrimitiveOrWrapperDeserializer<Integer>\n{\n    // ... other fields and methods ...\n\n    /**\n     * Variant needed for primitive values.\n     */\n    @Override\n    protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        switch (p.currentTokenId()) {\n            case JsonTokenId.ID_NUMBER_INT:\n                return p.getIntValue();\n            case JsonTokenId.ID_NUMBER_FLOAT: // coercing may work too\n                if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                    _failDoubleToIntCoercion(p, ctxt, \"int\");\n                }\n                return p.getValueAsInt();\n            case JsonTokenId.ID_NULL: {\n                // 26-Oct-2017, tatu: Need to honor CoercionConfig, explicit basic check first:\n                 CoercionAction act = _checkNullCoercion(ctxt, true); // true -> primitive\n                 if (act == CoercionAction.FAIL) {\n                     _verifyNullForPrimitive(ctxt); // should throw\n                 }\n                 // else `return 0` comes next\n                return 0;\n            }\n            case JsonTokenId.ID_STRING:\n                String text = p.getText().trim();\n\n                // validator check is done in caller\n                // 10-Mar-2017, tatu: Empty String can be ok; but need to check feature acceptability\n                if (text.isEmpty()) {\n                    // [databind#1998] Can not coerce empty strings to primitives unless feature enabled\n                    if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                        // Throw exception? Or use new Coercion mechanism?\n                        // Try Coercion first (shared method checks feature)\n                        CoercionAction act = _checkEmptyStringCoercion(ctxt, true); // true -> primitive\n                        if (act == CoercionAction.FAIL) {\n                            // This method handles the exception generation\n                           _verifyNullForPrimitiveCoercion(ctxt, text); // text = \"\"\n                        }\n                    }\n                    // Whether feature enabled or not, result is 0 for primitive `int`\n                    return 0;\n                 }\n                 // Null text handling differs a bit\n                 if (_hasTextualNull(text)) {\n                     // 26-Oct-2017, tatu: Need to honor CoercionConfig, explicit basic check first:\n                     CoercionAction act = _checkTextualNullCoercion(ctxt, true); // true -> primitive\n                     if (act == CoercionAction.FAIL) {\n                         _verifyNullForPrimitiveCoercion(ctxt, text);\n                     }\n                     // else `return 0` comes next\n                      return 0;\n                 }\n                 // let's allow Strings to be forced into primitives...\n                try {\n                    return NumberInput.parseInt(text);\n                } catch (IllegalArgumentException iae) {\n                    // If not integer, perhaps is double? But does not support Nan for ints...\n                    // 10-Nov-2019, tatu: As per [databind#2478], should possibly allow? No, not for `int`\n                    /*\n                    if (_isNaN(text)) {\n                         if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                              _failDoubleToIntCoercion(p, ctxt, \"int\");\n                         }\n                         return 0;\n                    }\n                    */\n                    return ctxt.handleWeirdStringValue(_valueClass, text,\n                            \"not a valid int value\");\n                }\n            case JsonTokenId.ID_START_ARRAY: // unwrapping?\n                // 12-Jun-2020, tatu: Start with optimized path for common case\n                if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                    p.nextToken();\n                    final int value = _parseIntPrimitive(p, ctxt);\n                    _verifyEndArrayForSingle(p, ctxt);\n                    return value;\n                }\n                // but fail if not enabled\n                break;\n            default:\n        }\n        // Otherwise, bad format, fail\n        // 18-Nov-2017, tatu: Say, FIELD_NAME -> 0? Uh, probably not. Let's instead\n        //     call method that indicates problem, which might translate to `0` if need be\n        return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).intValue();\n    }\n\n    // NOTE: Helper methods like _checkEmptyStringCoercion, _verifyNullForPrimitiveCoercion, _hasTextualNull\n    // are assumed to exist and function correctly based on newer Jackson versions that refined coercion handling.\n    // The core fix logic is the check for DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT\n    // (or equivalent CoercionConfig check) before allowing \"\" -> 0.\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}