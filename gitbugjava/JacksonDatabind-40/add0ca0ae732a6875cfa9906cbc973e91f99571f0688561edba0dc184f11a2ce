{
    "generation": "    /**\n     * Helper method called to determine required {@link CoercionAction}\n     * for input that is String, for target (\"logical\") type.\n     * If {@link CoercionAction#FAIL} is returned, an exception is thrown.\n     *\n     * @param ctxt Deserialization context\n     * @param value String value to coerce\n     * @param logicalType Logical target type\n     * @param targetType Physical target type\n     *\n     * @return Coercion action configured for specified input shape and target type\n     *    combination; never {@code null} or {@link CoercionAction#FAIL}.\n     *\n     * @throws JsonMappingException If configured action is {@link CoercionAction#FAIL}\n     *\n     * @since 2.12\n     */\n    protected CoercionAction _checkFromStringCoercion(DeserializationContext ctxt, String value,\n            LogicalType logicalType, Class<?> targetType)\n        throws IOException\n    {\n        // Special handling for possible `null` representation\n        // 13-Oct-2016, tatu: Let's allow \"null\" string for scalars, related to [databind#1398]\n        // 28-Oct-2020, tatu: ... although should perhaps not Naked nulls? Seems less optimal\n        //    workaround but has to do for now\n        if (value.equals(\"null\")) {\n            // 19-Sep-2020, tatu: Is this potentially problematic for some types?\n            //    Seems like it should be ok for most/all standard types?\n            return CoercionAction.AS_NULL;\n        }\n\n        // Then empty String:\n        if (value.length() == 0) {\n            final boolean isPrimitive = targetType.isPrimitive();\n            final CoercionAction act = ctxt.findCoercionAction(logicalType, targetType,\n                    CoercionInputShape.EmptyString);\n\n            // Regardless of configuration, `null` is NOT allowed for primitives,\n            // so AS_NULL for primitive target is just not possible.\n            if (isPrimitive && act == CoercionAction.AS_NULL) {\n                 _reportFailedCoercion(ctxt, act, targetType, value,\n                         \"Cannot coerce empty String (\\\"\\\") to `null` value for primitive type (\"+targetType.getName()+\")\");\n            }\n\n            // If action is FAIL, need to verify we can report it:\n            _checkCoercionFail(ctxt, act, targetType, value, \"empty String (\\\"\\\")\");\n            // Otherwise, it's fine: AS_EMPTY maps to primitive zero, TryConvert handled by caller;\n            // and AS_NULL was checked above for primitive targets. Wrappers/Objects are fine with nulls.\n            return act;\n        }\n        // Then blank String:\n        else if (StringUtil.isBlank(value)) {\n             final boolean isPrimitive = targetType.isPrimitive();\n             final CoercionAction act = ctxt.findCoercionFromBlankAction(logicalType, targetType,\n                     CoercionAction.FAIL); // default to FAIL\n\n             // Regardless of configuration, `null` is NOT allowed for primitives,\n             // so AS_NULL for primitive target is just not possible.\n             if (isPrimitive && act == CoercionAction.AS_NULL) {\n                  _reportFailedCoercion(ctxt, act, targetType, value,\n                          \"Cannot coerce blank String (all whitespace) to `null` value for primitive type (\"+targetType.getName()+\")\");\n             }\n\n             // If action is FAIL, need to verify we can report it:\n             _checkCoercionFail(ctxt, act, targetType, value, \"blank String (all whitespace)\");\n            // Either FAIL (already checked), or AS_NULL, AS_EMPTY:\n             return act;\n        }\n        // 02-Nov-2020, tatu: How about \"arbitrary\" Strings? Maybe should have check\n        //   like above? For now assume caller can handle\n\n        // 11-Sep-2020, tatu: For [databind#2854], consider possibility of JSON specification\n        //   violation for non-quoted textual values (\"naked booleans\"). For now just\n        //   add context, maybe improve later\n        if (ctxt.isEnabled(StreamReadCapability.JSON_READ_CAPABILITY_UNTYPED_SCALARS)\n                && _isScalarType(targetType)) {\n            // Nothing specific but indicates we may be getting non-standard input\n            ;\n        }\n\n        // Action is `TryConvert`, return as is, to be handled by caller\n        return CoercionAction.TRY_CONVERT;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}