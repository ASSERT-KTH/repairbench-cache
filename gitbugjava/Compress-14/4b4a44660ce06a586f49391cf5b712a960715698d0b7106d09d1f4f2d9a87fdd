{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Check for all NULs first (means empty field)\n        boolean allNUL = true;\n        for (int i = start; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // CheckStyle:MagicNumber OFF\n        // Work-around for some tar implementations that insert a leading NUL\n        // (and consequently, Poynting Tar implementation that runs on an old C library).\n        // This needs to be detected after skipping leading spaces.\n        if (start < end && buffer[start] == 0) {\n            return 0L;\n        }\n        // CheckStyle:MagicNumber ON\n\n        // Must have trailing NUL or space\n        // Get the original last byte trait\u00e9s before potential end-- modifications\n        final byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--; // Decrement end to exclude the trailer\n        } else {\n            // If the last byte is not a NUL or space, the format is invalid\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // May have additional NUL or space character. Should only be checked\n        // if the buffer has not been exhausted by trimming the first NUL/space.\n        if (end > start) { // Ensure start < end before accessing buffer[end - 1]\n            final byte secondTrailer = buffer[end - 1];\n            if (secondTrailer == 0 || secondTrailer == ' ') {\n                end--; // Decrement end again\n            }\n        }\n\n        // Trim additional spaces from the start of the octal digits.\n        // Although the initial space skip handled leading spaces for the field,\n        // there might be spaces between the skipped leading spaces and the actual number,\n        // or between the number and the trailing NUL/space.\n        // The previous loop ensures the last char is not NUL/space, but middle chars might be spaces.\n        // Example: \" 123 NUL\" -> start=1, end=4 -> parse ' ', '1', '2', '3' -> fail\n        // Example: \"123  NUL\" -> start=0, end=5 -> parse '1','2','3',' ' -> fail\n        // The original code did not explicitly handle spaces *within* the number part,\n        // relying on the digit check to fail them. Let's keep that behavior.\n        // The parsing loop below will throw if it encounters a space.\n\n        // Parse the octal digits\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Includes check for NUL byte within the number part\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method to format exception message (implementation assumed to exist elsewhere)\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {\n        String fieldContent;\n        try {\n            // Attempt to decode assuming ASCII or compatible\n            fieldContent = new String(buffer, offset, length, java.nio.charset.StandardCharsets.US_ASCII);\n        } catch(Exception e) {\n            fieldContent = \"[cannot decode byte array]\";\n        }\n        // Make NUL characters visible\n        fieldContent = fieldContent.replace(\"\\0\", \"{NUL}\");\n        return \"Invalid byte \" + currentByte + \" at offset \" + (idx - offset)\n                + \" in '\" + fieldContent + \"' len \" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}