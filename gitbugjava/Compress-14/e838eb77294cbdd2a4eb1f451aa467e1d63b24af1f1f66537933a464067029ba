{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        boolean allNUL = true;\n        for (int i = start; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Handle leading NUL workaround AFTER skipping spaces\n        // If the first non-space character is NUL, return 0.\n        // This addresses the issue identified in COMPRESS-171 and COMPRESS-199.\n        if (start < end && buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Must have trailing NUL or space\n        byte trailer;\n        trailer = buffer[end-1];\n        if (trailer == 0 || trailer == ' '){\n            end--;\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, trailer));\n        }\n\n        // May have additional NUL or space\n        // This check needs to happen against the potentially adjusted end index.\n        // It should also only happen if 'end' is still greater than 'start'\n        // However, the original code performed this check unconditionally.\n        // To minimize changes and stick to the apparent original logic (which handles\n        // cases like [\" \", \" \"] correctly by returning 0), we keep it unconditional.\n        // If end <= start here, accessing buffer[end-1] might seem problematic,\n        // but in those cases (like all spaces), the final loop condition start < end\n        // will prevent parsing anyway, and 0 will be returned.\n        if (end > start) { // Check only needed if there might be content left\n             trailer = buffer[end-1];\n             if (trailer == 0 || trailer == ' '){\n                 end--;\n             }\n        }\n\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method to generate exception message (assumed to exist in the original class)\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {\n        // This is a plausible implementation for debugging purposes.\n        // The actual implementation in the original codebase might differ.\n        String val = new String(buffer, offset, length).replaceAll(\"\\u0000\", \"{NUL}\");\n        return \"Invalid byte \" + currentByte + \" at offset \" + current + \" in octal entry '\" + val + \"'\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}