{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     current = offset; // Use 'current' as the parsing cursor\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Check for all NULs first (optimization and handling of empty fields)\n        boolean allNUL = true;\n        for (int i = current; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (current < end && buffer[current] == ' '){\n            current++;\n        }\n\n        // Check for leading NUL directly after spaces (commons-compress 1.4 workaround)\n        // This check must come *before* the trailer removal logic.\n        // If the first non-space character is NUL, return 0.\n        if (current < end && buffer[current] == 0) {\n             return 0L;\n        }\n\n        // Trim trailing NUL or space.\n        // The buffer must contain a trailing space or NUL.\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--; // Consume one trailer\n        } else {\n            // No required trailer found. Throw exception using the original buffer info.\n            // Use a helper or inline the message creation logic if exceptionMessage is not available/desired.\n            // For now, assuming a helper method `exceptionMessage` exists as in the original snippet context.\n             throw new IllegalArgumentException(\n                     exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // It may contain an additional trailing space or NUL.\n        // Check only if there are bytes remaining between current and the new end.\n        // This prevents IndexOutOfBoundsException for short fields like \"1 \".\n        if (current < end) {\n             trailer = buffer[end - 1];\n             if (trailer == 0 || trailer == ' ') {\n                 end--; // Consume second trailer\n             }\n        }\n        // At this point, 'current' points to the first potential digit (after spaces),\n        // and 'end' points past the last potential digit (before trailers).\n\n        // Parse digits\n        for ( ;current < end; current++) {\n            final byte currentByte = buffer[current];\n            // CheckStyle:MagicNumber OFF\n            // Check if the current byte is an octal digit.\n            if (currentByte < '0' || currentByte > '7'){\n                 // If not, it's an error (could be NUL inside the number, or other non-octal char).\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, current, currentByte));\n            }\n            // Convert ASCII octal digit to numeric value and add to result.\n            result = (result << 3) + (currentByte - '0');\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Dummy helper method to allow compilation if the original context is missing.\n    // In the actual Commons Compress code, a real helper method exists.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {\n        // This should ideally provide more context from the buffer like the original did.\n        return \"Invalid byte \" + currentByte + \" at index \" + idx + \" in buffer segment (offset: \" + offset + \", length: \" + length + \")\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}