{
    "generation": "private List<Position> parseData(\n        final Channel channel, final SocketAddress remoteAddress, final ByteBuf buf, final int locationPacketId, final String... imei) {\n\n    List<Position> positions = new LinkedList<>();\n\n    final int connectionlessOffset = connectionless ? 4 : 0;\n\n    int offset = buf.readUnsignedByte(); // operation code\n    int codec = buf.readUnsignedByte();  // codec\n    int count = buf.readUnsignedByte();  // count\n    DeviceSession deviceSession = getDeviceSession(channel, (SocketAddress) null, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.setValid(true);\n\n        buf.skipBytes(connectionlessOffset);\n        int messageLength = buf.readInt(); // data message length\n\n        if (codec == CODEC_13) {\n            buf.readUnsignedByte(); // type\n            int length = messageLength - 4;\n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            if (isPrintable(buf, length)) {\n                position.set(Position.KEY_RESULT,\n                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n            } else {\n                position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.readSlice(length)));\n            }\n        } else {\n            // Adjust the message length for codecs other than 13 based on the codec type\n            if (messageLength > 0) {\n                buf.readBytes(messageLength);\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            }\n        }\n        if (offset == 0x06) {\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        } else {\n            decodeLocation(position, buf, codec, model);\n        }\n    }\n\n    if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n        ByteBuf response = Unpooled.buffer();\n        if (connectionless) {\n            response.writeShort(5);\n            response.writeShort(0);\n            response.writeByte(0x01);\n            response.writeByte(locationPacketId);\n            response.writeByte(count);\n        } else {\n            response.writeInt(count);\n        }\n        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}