{
    "generation": "private List<Position> parseData(\n        Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n    List<Position> positions = new LinkedList<>();\n\n    if (!connectionless) {\n        buf.readUnsignedInt(); // data length\n    }\n\n    // Read location packet ID first\n    int packetId = buf.readUnsignedByte(); // First byte after the data length skip\n    if (packetId != locationPacketId) { // Ensure packet ID matches the provided parameter\n        return null; \n    }\n\n    int codec = buf.readUnsignedByte(); // Second byte is the correct codec value\n    int count = buf.readUnsignedByte(); // Third byte is the count\n\n    // Continuation of existing code for device session and position decoding\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n    String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.setValid(true);\n\n        if (codec == CODEC_13) {\n            buf.readUnsignedByte(); // type\n            int length = buf.readInt() - 4; // length of payload, excluding type and 4 bytes for length itself\n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            if (isPrintable(buf, length)) {\n                position.set(Position.KEY_RESULT,\n                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n            } else {\n                position.set(Position.KEY_RESULT,\n                        ByteBufUtil.hexDump(buf.readSlice(length)));\n            }\n        } else if (codec == CODEC_12) {\n            decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n        } else {\n            decodeLocation(position, buf, codec, model);\n        }\n\n        // Continue adding positions if valid or has attributes (now the correct paths would set attributes)\n        if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n            positions.add(position);\n        }\n    }\n\n    // Generating response as before (assuming codec was read correctly now)\n    if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n        ByteBuf response = Unpooled.buffer();\n        if (connectionless) {\n            response.writeShort(5);\n            response.writeShort(0);\n            response.writeByte(0x01);\n            response.writeByte(locationPacketId);\n            response.writeByte(count);\n        } else {\n            response.writeInt(count);\n        }\n        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}