{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        if (!connectionless) {\n            buf.readUnsignedInt(); // data length\n        }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); // type\n                int length = buf.readInt() - 4; // Total length of data block - 4 bytes for timestamp\n                \n                Date time = new Date(buf.readUnsignedInt() * 1000); // Read timestamp\n                getLastLocation(position, time); // Set position time (and other common location data if handled by getLastLocation)\n\n                String message;\n                if (isPrintable(buf, length)) {\n                    message = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                } else {\n                    message = ByteBufUtil.hexDump(buf.readSlice(length));\n                }\n                position.set(Position.KEY_RESULT, message);\n\n                // Check if the message contains a driver unique ID (e.g., from GTSL commands)\n                if (message.startsWith(\"GTSL|\")) {\n                    String[] parts = message.split(\"\\\\|\");\n                    if (parts.length >= 5) {\n                        String driverUniqueId = parts[4];\n                        // Validate if the extracted part is a numeric ID\n                        if (driverUniqueId.matches(\"\\\\d+\")) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, driverUniqueId);\n                        }\n                    }\n                }\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}