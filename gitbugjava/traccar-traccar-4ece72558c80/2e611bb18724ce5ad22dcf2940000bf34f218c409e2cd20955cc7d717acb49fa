{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        if (!connectionless) {\n            buf.readUnsignedInt(); // data length\n        }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); // type\n                int commandPayloadLength = buf.readInt(); // \"Command Size\" field from spec\n                \n                // \"Command Size\" is assumed to include 4 bytes for a timestamp plus the actual string length\n                int stringContentLength = Math.max(0, commandPayloadLength - 4);\n\n                // Read timestamp (first 4 bytes of the command payload)\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n\n                String resultString;\n                boolean wasPrintable = false;\n\n                if (buf.isReadable(stringContentLength)) { // Ensure buffer has enough bytes for declared length\n                    // Check printability before reading the string part\n                    // isPrintable peeks at the buffer, it does not advance the reader index\n                    if (isPrintable(buf, stringContentLength)) {\n                        resultString = buf.readCharSequence(stringContentLength, StandardCharsets.US_ASCII).toString().trim();\n                        wasPrintable = true;\n                    } else {\n                        resultString = ByteBufUtil.hexDump(buf.readSlice(stringContentLength));\n                        // wasPrintable remains false\n                    }\n                } else {\n                    // Not enough bytes in buffer for the declared stringContentLength.\n                    // This indicates a malformed packet or an issue with length calculation.\n                    // Log an error or handle as appropriate. For now, set to empty string.\n                    resultString = \"\"; \n                    // Optionally, consume remaining readable bytes if necessary to prevent framing issues,\n                    // though framing should ideally be handled by a FrameDecoder.\n                    // e.g., if (buf.isReadable()) buf.skipBytes(buf.readableBytes());\n                }\n                \n                position.set(Position.KEY_RESULT, resultString);\n\n                // Parse specific known text formats from CODEC_13 if it was printable text\n                if (wasPrintable && resultString.startsWith(\"GTSL|\")) {\n                    String[] parts = resultString.split(\"\\\\|\");\n                    // The test case implies a format \"GTSL|6|1|0|12749884|1\"\n                    // where parts[0]=\"GTSL\", parts[1]=\"6\", parts[2]=\"1\", parts[3]=\"0\", and parts[4]=\"12749884\" (driver ID)\n                    if (parts.length >= 5 && // Ensures parts[0] through parts[4] are accessible\n                        parts[0].equals(\"GTSL\") &&\n                        parts[1].equals(\"6\") &&\n                        parts[2].equals(\"1\") &&\n                        parts[3].equals(\"0\")) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4].trim());\n                    }\n                }\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}