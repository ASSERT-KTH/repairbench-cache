{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        // BUG FIX 1: For Teltonika AVL packets, the main TeltonikaProtocolDecoder.decode method\n        // handles the overall data length and preamble. The 'parseData' helper is called\n        // with the buffer already positioned at the Codec ID.\n        // Reading another unsigned int here when connectionless is false would misalign the buffer\n        // (i.e., read the Codec ID and subsequent bytes as 'data length').\n        // Removing this line correctly aligns the buffer for subsequent reads.\n        // if (!connectionless) {\n        //     buf.readUnsignedInt(); // data length\n        // }\n\n        int codec = buf.readUnsignedByte(); // This will now correctly read the Codec ID (e.g., 0x0D for CODEC_13)\n        int count = buf.readUnsignedByte(); // This will now correctly read the Number of Data records\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            // If a device session cannot be obtained (e.g., IMEI not known or not provided),\n            // the protocol decoder cannot proceed with linking positions to a device.\n            // Returning null here is consistent with the original logic.\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); // type (e.g., 0x06 in the test data)\n                int length = buf.readInt() - 4; // Length of the string data block (e.g., 0x1C - 4 = 24)\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000)); // Timestamp\n\n                if (isPrintable(buf, length)) {\n                    String result = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                    position.set(Position.KEY_RESULT, result);\n\n                    // BUG FIX 2: For CODEC_13, specifically the \"GTSL\" format,\n                    // the driver unique ID is embedded in the result string.\n                    // The test expects \"12749884\" as KEY_DRIVER_UNIQUE_ID.\n                    // We parse the string to extract this ID.\n                    String[] parts = result.split(\"\\\\|\");\n                    // Based on the example \"GTSL|6|1|0|12749884|1|\", the ID is at index 4.\n                    if (parts.length > 4) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);\n                    }\n                } else {\n                    position.set(Position.KEY_RESULT,\n                            ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}