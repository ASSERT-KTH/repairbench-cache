{
    "generation": "private List<Position> parseData(\n        Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n    List<Position> positions = new LinkedList<>();\n\n    if (!connectionless) {\n        buf.readUnsignedInt(); // data length\n    }\n\n    int codec = buf.readUnsignedByte();\n    int count = buf.readUnsignedByte();\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n    String model = null;\n    Object cachedDevice = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (cachedDevice != null) {\n        model = ((Device) cachedDevice).getModel();\n    }\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.setValid(true);\n\n        if (codec == CODEC_13) {\n            buf.readUnsignedByte(); // type\n            int length = buf.readInt() - 4;\n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000L));\n            if (isPrintable(buf, length)) {\n                position.set(Position.KEY_RESULT,\n                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n            } else {\n                position.set(Position.KEY_RESULT,\n                        ByteBufUtil.hexDump(buf.readSlice(length)));\n            }\n        } else if (codec == CODEC_12) {\n            decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n        } else {\n            decodeLocation(position, buf, codec, model);\n\n            // BEGIN FIX: decode driver id for Codec 8E AVL I/O element 0x0E, as in GPRS driver id packet\n            if (codec == CODEC_GPRS && buf.readableBytes() >= 4) {\n                int ioElementId = buf.getUnsignedByte(buf.readerIndex());\n                if (ioElementId == 0x0E && buf.readableBytes() >= 5) {\n                    buf.readUnsignedByte(); // id\n                    int driverIdLen = buf.readUnsignedByte();\n                    if (buf.readableBytes() >= driverIdLen) {\n                        String driverId = buf.readCharSequence(driverIdLen, StandardCharsets.US_ASCII).toString().trim();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);\n                    }\n                }\n            }\n            // END FIX\n        }\n\n        if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n            positions.add(position);\n        }\n    }\n\n    if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n        ByteBuf response = Unpooled.buffer();\n        if (connectionless) {\n            response.writeShort(5);\n            response.writeShort(0);\n            response.writeByte(0x01);\n            response.writeByte(locationPacketId);\n            response.writeByte(count);\n        } else {\n            response.writeInt(count);\n        }\n        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}