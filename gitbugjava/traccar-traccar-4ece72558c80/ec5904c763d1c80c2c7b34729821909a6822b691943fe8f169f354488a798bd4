{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        if (!connectionless) {\n            buf.readUnsignedInt(); // data length\n        }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n\n            if (codec == CODEC_13) {\n                int recordType = buf.readUnsignedByte();\n                int avlRecordDataLength = buf.readInt(); // Total length of (timestamp + data payload)\n                \n                // Read timestamp (assuming 4 bytes for timestamp are always present as per original logic)\n                // Netty's readUnsignedInt() returns a long, so 1000L is for clarity but 1000 would also work.\n                Date recordTime = new Date(buf.readUnsignedInt() * 1000L); \n                getLastLocation(position, recordTime);\n\n                int dataPayloadLength = avlRecordDataLength - 4; // Length of the actual data payload\n\n                boolean processedAsSpecialType = false;\n                if (recordType == 0x06 && dataPayloadLength > 0) { // Check for specific type and if there's data\n                    if (isPrintable(buf, dataPayloadLength)) {\n                        // Data is printable, consume it and try to parse as iButton\n                        String dataStr = buf.readCharSequence(dataPayloadLength, StandardCharsets.US_ASCII).toString().trim();\n                        String[] parts = dataStr.split(\"\\\\|\");\n                        // Example format: \"GTSL|6|1|0|12749884|1\"\n                        if (parts.length >= 5 && \"GTSL\".equals(parts[0])) {\n                            String iButtonId = parts[4];\n                            if (iButtonId != null && !iButtonId.isEmpty() && !\"0\".equals(iButtonId)) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, iButtonId);\n                                processedAsSpecialType = true; // Successfully set KEY_DRIVER_UNIQUE_ID\n                            } else {\n                                // Parsed as GTSL, but iButton ID is invalid/zero. Set KEY_RESULT.\n                                position.set(Position.KEY_RESULT, dataStr);\n                                processedAsSpecialType = true; // Processed, but resulted in KEY_RESULT\n                            }\n                        } else {\n                            // It was printable and type 0x06, but not \"GTSL\" format. Set KEY_RESULT.\n                            position.set(Position.KEY_RESULT, dataStr);\n                            processedAsSpecialType = true; // Processed, resulted in KEY_RESULT\n                        }\n                    }\n                    // If not printable (and type 0x06), processedAsSpecialType remains false.\n                    // The general case below will handle it (e.g. hex dump).\n                }\n\n                if (!processedAsSpecialType && dataPayloadLength > 0) {\n                    // General case for:\n                    // 1. recordType != 0x06 AND dataPayloadLength > 0\n                    // 2. recordType == 0x06 AND dataPayloadLength > 0 AND data was not printable\n                    if (isPrintable(buf, dataPayloadLength)) {\n                        position.set(Position.KEY_RESULT,\n                                buf.readCharSequence(dataPayloadLength, StandardCharsets.US_ASCII).toString().trim());\n                    } else {\n                        position.set(Position.KEY_RESULT,\n                                ByteBufUtil.hexDump(buf.readSlice(dataPayloadLength)));\n                    }\n                }\n                // If dataPayloadLength <= 0, no data attributes (KEY_DRIVER_UNIQUE_ID or KEY_RESULT) are set from the payload.\n                // The position object will only have attributes from getLastLocation or device session.\n\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}