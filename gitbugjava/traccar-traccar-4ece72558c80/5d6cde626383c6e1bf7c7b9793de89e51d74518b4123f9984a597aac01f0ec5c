{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        if (!connectionless) {\n            buf.readUnsignedInt(); // data length\n        }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n\n            if (codec == CODEC_13) {\n                int type = buf.readUnsignedByte(); // Read the type of the record\n                int dataBlockLength = buf.readInt(); // Total length of: timestamp + string value\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000)); // Timestamp is 4 bytes\n                \n                int stringLength = dataBlockLength - 4; // Actual length of the string value\n\n                if (stringLength >= 0) { // Ensure length is not negative\n                    if (isPrintable(buf, stringLength)) {\n                        String rawString = buf.readCharSequence(stringLength, StandardCharsets.US_ASCII).toString().trim();\n                        position.set(Position.KEY_RESULT, rawString); // Keep setting KEY_RESULT for general data\n\n                        // Check if it's an iButton string (Type 0x06 for many Teltonika devices)\n                        // and has the expected \"GTSL\" prefix.\n                        if (type == 0x06 && rawString.startsWith(\"GTSL\")) {\n                            String[] parts = rawString.split(\"\\\\|\");\n                            // Expected format: GTSL|ParamCount|Param1|Param2|iButton_ID|...\n                            // iButton_ID is at index 4.\n                            if (parts.length >= 5) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);\n                            }\n                        }\n                    } else {\n                        // For non-printable data, store as hex dump if length > 0\n                        if (stringLength > 0) {\n                            position.set(Position.KEY_RESULT,\n                                    ByteBufUtil.hexDump(buf.readSlice(stringLength)));\n                        } else {\n                            // If stringLength is 0 and not printable, set empty result\n                            position.set(Position.KEY_RESULT, \"\");\n                        }\n                    }\n                } else {\n                    // stringLength < 0 indicates a problem with dataBlockLength or parsing logic.\n                    // Log an error or handle appropriately. Original code would likely error here.\n                    // For now, we skip processing this malformed record part.\n                }\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}