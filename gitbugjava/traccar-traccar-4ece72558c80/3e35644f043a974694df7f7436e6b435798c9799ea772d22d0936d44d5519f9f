{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        if (!connectionless) {\n            buf.readUnsignedInt(); // data length\n        }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setValid(true);\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            if (buf.readableBytes() < 4) {\n                // Insufficient bytes to read, discard this packet\n                continue;\n            }\n\n            buf.readUnsignedByte(); // type\n            int length = buf.readInt();\n\n            if (length < 0) {\n                // Length should not be negative, discard this packet\n                length = -length;\n            }\n\n            if (buf.readableBytes() < length) {\n                // Insufficient bytes to read the data length, discard the remaining bytes in this loop\n                while (buf.readableBytes() > 0) {\n                    buf.readByte();\n                }\n                break;\n            }\n\n            if (isPrintable(buf, length)) {\n                position.set(Position.ATTR_CONTENT,\n                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n            } else {\n                position.set(Position.ATTR_CONTENT,\n                        ByteBufUtil.hexDump(buf.readSlice(length)));\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeByte(0x00);\n                response.writeByte(0x00);\n                response.writeByte(0x05);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}