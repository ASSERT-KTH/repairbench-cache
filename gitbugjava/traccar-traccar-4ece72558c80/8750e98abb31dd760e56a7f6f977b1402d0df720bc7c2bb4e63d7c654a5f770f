{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        if (!connectionless) {\n            buf.readUnsignedInt(); // data length\n        }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true); // Assume valid initially\n\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); // type\n                int totalLength = buf.readInt(); // Includes timestamp and content\n                Date timestamp = new Date(buf.readUnsignedInt() * 1000);\n                int contentLength = totalLength - 4; // Subtract timestamp length\n\n                // Set position time from timestamp\n                getLastLocation(position, timestamp);\n\n                if (contentLength > 0) {\n                    // Read the content slice without consuming it yet for isPrintable check\n                    if (isPrintable(buf.slice(buf.readerIndex(), contentLength), contentLength)) {\n                        String data = buf.readCharSequence(contentLength, StandardCharsets.US_ASCII).toString().trim();\n                        position.set(Position.KEY_RESULT, data); // Store raw string in result\n\n                        // Parse specific GTSL format for driver ID\n                        if (data.startsWith(\"GTSL\") && data.contains(\"|\")) {\n                            String[] parts = data.split(\"\\\\|\");\n                            // Expected format: GTSL|Type|Index|Status|Data|CS\n                            if (parts.length >= 5 && !parts[4].isEmpty()) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);\n                            }\n                        }\n                    } else {\n                        // Content is not printable ASCII, store as hex dump\n                        position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.readSlice(contentLength)));\n                    }\n                } else if (contentLength < 0) {\n                    // Invalid length, skip remaining buffer for this record if possible or log error\n                    // For now, assume buffer structure is compromised, potentially stop processing.\n                    // Or mark position as invalid?\n                    position.setValid(false); // Mark invalid due to bad length\n                    // We need to ensure the buffer reader index is advanced correctly\n                    // buf.skipBytes(contentLength) won't work if negative.\n                    // Best might be to break or return early if protocol error detected.\n                    // For now, just mark invalid and let the outer loop condition handle it.\n                }\n                // If contentLength is 0, buffer index is already correct after reading timestamp.\n\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n\n            // Only add position if it's still considered valid and meets original criteria\n            if (position.getValid() && (!position.getOutdated() || !position.getAttributes().isEmpty())) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}