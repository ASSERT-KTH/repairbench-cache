{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        // Removed: This conditional block was problematic for standard TCP Teltonika streams\n        // where TeltonikaFrameDecoder already strips the outer length.\n        // if (!connectionless) {\n        //     buf.readUnsignedInt(); // data length\n        // }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte(); // Note: For Codec 0x8E, count is 2 bytes. This might need further refinement\n                                         // if 0x8E is used, but is not the cause of the current test failure.\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        \n        String model = null;\n        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n        if (device != null) {\n            model = device.getModel();\n        }\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n\n            if (codec == CODEC_13) { // Command result\n                buf.readUnsignedByte(); // type of command/response\n                int length = buf.readInt() - 4; // Length of string data, excluding 4 bytes for timestamp\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000L)); // Timestamp from payload\n                \n                if (length > 0 && buf.isReadable(length)) {\n                    CharSequence commandResultSequence = buf.readCharSequence(length, StandardCharsets.US_ASCII);\n                    String commandResult = commandResultSequence.toString().trim();\n                    position.set(Position.KEY_RESULT, commandResult);\n\n                    // Parse \"GTSL\" command result for specific attributes like driver ID\n                    if (commandResult.startsWith(\"GTSL|\")) {\n                        String[] parts = commandResult.split(\"\\\\|\");\n                        // Assuming fixed structure \"GTSL|...|...|...|DRIVER_ID|...\"\n                        // The test expects parts[4] to be the driver ID.\n                        if (parts.length >= 5 && parts[4] != null && !parts[4].isEmpty()) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);\n                        }\n                    }\n                } else if (length == 0) {\n                    position.set(Position.KEY_RESULT, \"\"); // Empty result\n                } else {\n                    // Length indicates non-readable or negative data, skip reading and log if necessary\n                    // For now, just advance reader index if any slice was supposed to be read but is invalid.\n                    if (length > 0) {\n                        buf.skipBytes(length);\n                    }\n                }\n            } else if (codec == CODEC_12) { // Serial data / Configuration\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else { // AVL data packet (e.g., 0x08, 0x8E, 0x10)\n                decodeLocation(position, buf, codec, model);\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5); // Length of ACK content\n                response.writeShort(0); // Packet ID of this ACK\n                response.writeByte(0x01); // Packet Type (e.g., response)\n                response.writeByte(locationPacketId); // Echo of AVL Packet ID from incoming packet\n                response.writeByte(count); // Number of records accepted\n            } else {\n                response.writeInt(count); // TCP ACK: number of records accepted\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}