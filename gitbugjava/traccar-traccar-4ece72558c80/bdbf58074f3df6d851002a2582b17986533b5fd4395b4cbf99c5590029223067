{
    "generation": "private List<Position> parseData(\n        Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n    List<Position> positions = new LinkedList<>();\n\n    if (!connectionless) {\n        buf.readUnsignedInt(); // data length\n    }\n\n    int codec = buf.readUnsignedByte();\n    int count = buf.readUnsignedByte();\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    String model = device != null ? device.getModel() : null;\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.setValid(true);\n\n        if (codec == CODEC_13) {\n            int type = buf.readUnsignedByte(); // type\n            int length = buf.readInt() - 4;\n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            if (isPrintable(buf, length)) {\n                String result = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                position.set(Position.KEY_RESULT, result);\n            } else {\n                position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.readSlice(length)));\n            }\n            // Fix: driver code for CODEC_13\n            if (type == 6) { // 6 == driver code/identification message\n                String result = position.getString(Position.KEY_RESULT);\n                if (result != null) {\n                    String code = result;\n                    // According to protocol, split by | or extract number\n                    // Attempt possible extraction of driver code: TS|CODE|...\n                    String[] segments = code.split(\"\\\\|\");\n                    if (segments.length >= 3 && segments[0].equalsIgnoreCase(\"TS\")) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, segments[2]);\n                    } else if (segments.length >= 2 && segments[0].equalsIgnoreCase(\"TS\")) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, segments[1]);\n                    } else {\n                        // Fallback, if looks like a code itself (all digits)\n                        if (code.matches(\"^[0-9]+$\")) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, code);\n                        }\n                    }\n                }\n            }\n        } else if (codec == CODEC_12) {\n            decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n        } else {\n            decodeLocation(position, buf, codec, model);\n        }\n\n        if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n            positions.add(position);\n        }\n    }\n\n    if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n        ByteBuf response = Unpooled.buffer();\n        if (connectionless) {\n            response.writeShort(5);\n            response.writeShort(0);\n            response.writeByte(0x01);\n            response.writeByte(locationPacketId);\n            response.writeByte(count);\n        } else {\n            response.writeInt(count);\n        }\n        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}