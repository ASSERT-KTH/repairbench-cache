{
    "generation": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        if (!connectionless) {\n            buf.readUnsignedInt(); // data length\n        }\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true); // Assume valid unless location data proves otherwise\n\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); // type\n                int length = buf.readInt(); // Total length of timestamp + data\n                long time = buf.readUnsignedInt(); // Read the timestamp (4 bytes)\n                if (time != 0) {\n                    getLastLocation(position, new Date(time * 1000));\n                } else {\n                    // If timestamp is 0, use current time and don't rely on last location\n                    position.setTime(new Date());\n                }\n\n                int dataLength = length - 4; // Calculate actual data length\n\n                // Check if buffer has enough readable bytes and length is sensible\n                if (dataLength > 0 && buf.readableBytes() >= dataLength) {\n                    if (isPrintable(buf, dataLength)) {\n                        String data = buf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString().trim();\n                        position.set(Position.KEY_RESULT, data); // Store the raw result\n\n                        // Attempt to parse specific command responses based on prefix\n                        // Format: GTSL|type|index|status|id|checksum|\\r\\n (iButton)\n                        // Format: GTRTL|type|index|status|id|checksum|\\r\\n (RFID)\n                        if (data.startsWith(\"GTSL\") || data.startsWith(\"GTRTL\")) {\n                            String[] parts = data.split(\"\\\\|\");\n                            // Index 4 should contain the ID\n                            if (parts.length >= 5 && !parts[4].isEmpty() && !parts[4].equals(\"0\")) {\n                                position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);\n                            }\n                        } else if (data.startsWith(\"GTSOS\")) {\n                            // Format: GTSOS|latitude|longitude...\n                            String[] parts = data.split(\"\\\\|\");\n                            if (parts.length >= 2 && !parts[1].isEmpty()) {\n                                try {\n                                    position.set(Position.KEY_ALARM, Alarm.SOS);\n                                    position.setLatitude(Double.parseDouble(parts[1]));\n                                    if (parts.length >= 3 && !parts[2].isEmpty()) {\n                                        position.setLongitude(Double.parseDouble(parts[2]));\n                                    }\n                                    // SOS positions are usually considered valid location updates\n                                    position.setValid(true);\n                                } catch (NumberFormatException e) {\n                                    // Ignore if coordinates are not valid numbers\n                                }\n                            }\n                        } else if (data.startsWith(\"GTVER\")) {\n                            // Format: GTVER|...|fw|hw|...\n                            String[] parts = data.split(\"\\\\|\");\n                            if (parts.length >= 5 && !parts[4].isEmpty()) {\n                                position.set(Position.KEY_VERSION_FW, parts[4]);\n                            }\n                            if (parts.length >= 6 && !parts[5].isEmpty()) {\n                                position.set(Position.KEY_VERSION_HW, parts[5]);\n                            }\n                        }\n                        // NOTE: Add parsing for other CODEC_13 responses if needed\n\n                    } else {\n                        // Handle non-printable data (store as hex)\n                        position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.readSlice(dataLength)));\n                    }\n                } else if (dataLength < 0) {\n                    // Log or handle invalid negative length? For now, we just proceed.\n                } else { // dataLength >= 0 but not enough readable bytes\n                    if (buf.readableBytes() > 0) {\n                        buf.skipBytes(buf.readableBytes()); // Skip remaining bytes to avoid errors later\n                    }\n                }\n                // For command responses, validity might not apply in the GPS sense\n                // But we keep the record if it contains attributes\n                 if (position.getLatitude() == 0 && position.getLongitude() == 0) {\n                     position.setValid(false); // Mark invalid if no coordinates parsed\n                 }\n\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                // Decodes location data for CODEC_8, CODEC_8E, CODEC_16 etc.\n                decodeLocation(position, buf, codec, model);\n            }\n\n            // Add position if it's not outdated or if it contains any attributes (like command responses)\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        // Send response for location packets (not command/response packets)\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer(connectionless ? 5 : 4);\n            if (connectionless) {\n                // UDP response format: short(5), short(0), byte(0x01), byte(packetId), byte(count)\n                response.writeShort(5);      // Packet Length\n                response.writeShort(0);      // Packet ID\n                response.writeByte(0x01);    // Packet Type (Response)\n                response.writeByte(locationPacketId); // AVL Packet ID (echo back)\n                response.writeByte(count);   // Number of accepted records\n            } else {\n                // TCP response format: int(count)\n                response.writeInt(count);    // Number of accepted records\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}