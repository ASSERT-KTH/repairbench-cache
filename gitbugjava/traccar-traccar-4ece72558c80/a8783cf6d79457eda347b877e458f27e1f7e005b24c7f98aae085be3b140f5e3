{
    "generation": "import io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport org.traccar.model.Device;\nimport org.traccar.model.Position;\nimport org.traccar.session.DeviceSession;\nimport org.traccar.wrapper.NetworkMessage;\n\nimport java.net.SocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n// Assuming these constants and methods are available in the class scope\n// private static final int CODEC_13 = 0x0D;\n// private static final int CODEC_12 = 0x0C;\n// private final boolean connectionless; // Assumed to be a class member\n// protected abstract String getProtocolName();\n// protected abstract DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... imei);\n// protected abstract CacheManager getCacheManager(); // Assuming it returns a CacheManager instance\n// protected abstract boolean isPrintable(ByteBuf buf, int length);\n// protected abstract void getLastLocation(Position position, Date date);\n// protected abstract void decodeSerial(Channel channel, SocketAddress remoteAddress, DeviceSession deviceSession, Position position, ByteBuf buf);\n// protected abstract void decodeLocation(Position position, ByteBuf buf, int codec, String model);\n\n// Define a static Pattern to extract the driver ID from CODEC_13 messages.\n// This pattern specifically targets the digits after the 4th pipe in a string like\n// \"GTSL|6|1|0|12749884|1|\\r\\n\", which is observed in the failing test data.\nprivate static final Pattern CODEC_13_DRIVER_ID_PATTERN = Pattern.compile(\"GTSL\\\\|\\\\d+\\\\|\\\\d+\\\\|\\\\d+\\\\|(\\\\d+)\\\\|.*\");\n\n    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n\n        // Fix 1: Read both preamble and data length for non-connectionless packets\n        if (!connectionless) {\n            buf.readUnsignedInt(); // Preamble (often 0x00000000)\n            buf.readUnsignedInt(); // Data length\n        }\n\n        // Store the current reader index. This is needed for speculative reading\n        // to establish device session if the initial lookup fails.\n        int initialReaderIndex = buf.readerIndex();\n\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n\n        // Fix 3: If deviceSession is null and it's a CODEC_13 packet with records,\n        // attempt to extract a unique ID from the first record to establish the session.\n        if (deviceSession == null && codec == CODEC_13 && count > 0) {\n            // Temporarily reset buffer to read the first record's data\n            buf.readerIndex(initialReaderIndex);\n\n            // Re-read codec and count\n            buf.readUnsignedByte(); // currentCodec\n            buf.readUnsignedByte(); // currentCount\n\n            // Read the data for the first record\n            buf.readUnsignedByte(); // type\n            int length = buf.readInt() - 4; // Length of the string data\n\n            buf.readUnsignedInt(); // timestamp\n\n            // Try to extract a potential unique ID from the result string\n            if (isPrintable(buf, length)) {\n                String result = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                Matcher matcher = CODEC_13_DRIVER_ID_PATTERN.matcher(result);\n                if (matcher.find()) {\n                    String driverId = matcher.group(1);\n                    // Attempt to get device session again with the extracted driver ID\n                    deviceSession = getDeviceSession(channel, remoteAddress, driverId);\n                }\n            }\n            // Reset buffer reader index to its state before this speculative read\n            buf.readerIndex(initialReaderIndex);\n        }\n\n        // If device session is still null after attempts, we cannot proceed\n        if (deviceSession == null) {\n            return null;\n        }\n\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); // type\n                int length = buf.readInt() - 4; // Length of the string data\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n                if (isPrintable(buf, length)) {\n                    String result = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                    position.set(Position.KEY_RESULT, result);\n\n                    // Fix 2: Extract driver ID from CODEC_13 result and set it\n                    Matcher matcher = CODEC_13_DRIVER_ID_PATTERN.matcher(result);\n                    if (matcher.find()) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, matcher.group(1));\n                    }\n                } else {\n                    position.set(Position.KEY_RESULT,\n                            ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n\n        return positions.isEmpty() ? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}