{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        // If there's not exactly one assignment, it's not assigned once.\n        return false;\n      }\n\n      // Ensure the assignment isn't within a loop structure.\n      // Traverse up the BasicBlock chain until the enclosing function or script block.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // Reached the block representing the enclosing function/script. Stop loop check.\n          break;\n        }\n        if (block.isLoop) {\n          // The assignment is inside a loop. It cannot be assigned only once.\n          return false;\n        }\n      }\n\n      // Now, check if the assignment occurs in the global scope (represented by a SCRIPT node)\n      // or inside a FUNCTION node. Assignments inside FUNCTION nodes are\n      // conservatively assumed to potentially execute multiple times (e.g., due to\n      // multiple calls or recursion), so we only consider global assignments\n      // (not in loops) as potentially assigned once in their lifetime.\n      Node assignmentNode = ref.getNode();\n      Node enclosingFcnOrScript = NodeUtil.getEnclosingFunction(assignmentNode);\n\n      // If the assignment is not enclosed in any function or script, something is unexpected.\n      // Be conservative. Note: Global code should be enclosed in a SCRIPT node.\n      if (enclosingFcnOrScript == null) {\n           return false;\n      }\n\n      // If the enclosing node is a SCRIPT, the assignment is in the global scope\n      // and not inside a loop (checked above). This is assigned once.\n      if (enclosingFcnOrScript.isScript()) {\n          return true;\n      }\n\n      // Otherwise, the assignment is inside a FUNCTION. Conservatively assume it\n      // can execute multiple times during the program's lifetime.\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}