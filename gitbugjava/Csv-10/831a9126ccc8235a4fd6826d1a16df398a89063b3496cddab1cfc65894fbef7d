{
    "generation": "    /**\n     * Creates a printer that will print values to the given stream following the CSVFormat.\n     * <p>\n     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation\n     * and escaping with a different character) are not supported.\n     * </p>\n     *\n     * @param out\n     *        stream to which to print. Must not be null.\n     * @param format\n     *        the CSV format. Must not be null.\n     * @throws IOException\n     *         thrown if the optional header cannot be printed.\n     * @throws IllegalArgumentException\n     *         thrown if the parameters of the format are inconsistent or if either out or format are null.\n     */\n    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n        Assertions.notNull(out, \"out\");\n        Assertions.notNull(format, \"format\");\n\n        this.out = out;\n        this.format = format;\n        this.format.validate();\n        // TODO: Is it a good idea to do this here instead of on the first call to a print method?\n        // It seems a pain to have to track whether the header has already been printed or not.\n        // ---> Option: Steal \u09aa\u09cd\u09b0\u09bf\u09a8\u09cd\u099f\u09b9\u09c7\u09a1\u09be\u09b0 from CsvBeanWriter\n        // print header comments if any\n        if (format.getHeaderComments() != null) {\n            for (final String line : format.getHeaderComments()) {\n                if (line != null) {\n                    this.printComment(line);\n                }\n            }\n        }\n        // print the header if defined\n        if (format.getHeader() != null && !format.getSkipHeaderRecord()) {\n            this.printRecord((Object[]) format.getHeader());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}