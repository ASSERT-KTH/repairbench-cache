{
    "generation": "import org.jsoup.nodes.Element;\nimport org.jsoup.parser.Token;\nimport org.jsoup.parser.ParseSettings; // Import ParseSettings if not already imported\n\n// Assuming 'stack' and 'settings' are accessible fields (e.g., from TreeBuilder base class)\n\n    /**\n     * If the stack contains an element with this tag's name (compared case-insensitively if settings require),\n     * pop up the stack to remove the first occurrence. If not found, skips.\n     *\n     * @param endTag tag to close\n     */\n    private void popStackToClose(Token.EndTag endTag) {\n        String elName = settings.normalizeTag(endTag.name()); // ensure properly normalized theoretically redundant if tokeniser did job\n        Element firstFound = null;\n\n        // Find the first matching element from the top of the stack\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            // Use normalized name for comparison - XmlTreeBuilder should respect case sensitivity of settings\n            if (settings.normalizeTag(next.nodeName()).equals(elName)) {\n                firstFound = next;\n                break; // Found the first instance from the top\n            }\n        }\n\n        if (firstFound == null)\n            return; // Element not found on stack, skip.\n\n        // Pop stack elements up to and including the found element\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos); // Remove the element at the current position\n            // Check object identity to ensure we stop after removing the correct element\n            if (next == firstFound)\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}