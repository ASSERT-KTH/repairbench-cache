{
    "generation": "@Override\nprotected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n    int startIndex = buf.readerIndex();\n    int frameEndIndex = -1;\n\n    // Scan forward from the reader index for the first unescaped ']'\n    for (int i = startIndex; i < buf.writerIndex(); i++) {\n        byte b = buf.getByte(i);\n        if (b == '}') {\n            // Make sure we have the escaped value available\n            if (i + 1 >= buf.writerIndex()) {\n                return null; // incomplete escape sequence, wait for more data\n            }\n            i++; // skip next byte as it is part of the escape sequence\n        } else if (b == ']') {\n            frameEndIndex = i;\n            break;\n        }\n    }\n\n    // No complete frame found\n    if (frameEndIndex < 0) {\n        return null;\n    }\n\n    int frameEnd = frameEndIndex + 1; // include the closing bracket\n\n    // Decode the frame (handling escape sequences)\n    ByteBuf frame = Unpooled.buffer();\n    while (buf.readerIndex() < frameEnd) {\n        byte b = buf.readByte();\n        if (b == '}') {\n            byte b2 = buf.readByte();\n            switch (b2) {\n                case 0x01:\n                    frame.writeByte('}');\n                    break;\n                case 0x02:\n                    frame.writeByte('[');\n                    break;\n                case 0x03:\n                    frame.writeByte(']');\n                    break;\n                case 0x04:\n                    frame.writeByte(',');\n                    break;\n                case 0x05:\n                    frame.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\n                            \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n            }\n        } else {\n            frame.writeByte(b);\n        }\n    }\n\n    return frame;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}