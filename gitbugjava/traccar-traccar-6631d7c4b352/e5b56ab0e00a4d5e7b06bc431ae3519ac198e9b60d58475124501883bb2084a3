{
    "generation": "@Override\nprotected Object decode(\n        ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n    int endIndex = -1;\n    int startIndex = buf.readerIndex();\n\n    // Search from the start of the buffer to find the first ] which closes the current frame\n    for (int i = startIndex; i < buf.writerIndex(); i++) {\n        if (buf.getByte(i) == ']') {\n            endIndex = i + 1;\n            break;\n        }\n    }\n\n    if (endIndex > 0) {\n        byte[] bytes = new byte[endIndex - startIndex];\n        ByteBuf slice = buf.slice(startIndex, endIndex - startIndex);\n\n        ByteBuf frame = Unpooled.buffer();\n        ByteBuf iterator = buf.alloc().buffer();\n\n        // Recreate the exact slice without advancing the original buffer's readerIndex yet\n        iterator.writeBytes(slice); \n        buf.readerIndex(startIndex);\n\n        while (iterator.readableBytes() > 0) {\n            byte b1 = iterator.readByte();\n            if (b1 == '}') {\n                byte b2 = iterator.readByte();\n                switch (b2) {\n                    case 0x01:\n                        frame.writeByte('}');\n                        break;\n                    case 0x02:\n                        frame.writeByte('[');\n                        break;\n                    case 0x03:\n                        frame.writeByte(']');\n                        break;\n                    case 0x04:\n                        frame.writeByte(',');\n                        break;\n                    case 0x05:\n                        frame.writeByte('*');\n                        break;\n                    default:\n                        throw new IllegalArgumentException(String.format(\n                                \"unexpected byte at %d: 0x%02x\", iterator.readerIndex() + 1, b2));\n                }\n            } else {\n                frame.writeByte(b1);\n            }\n        }\n\n        // Advance readerIndex to end of frame\n        buf.readerIndex(endIndex);\n\n        return frame;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}