{
    "generation": "    @Override\n    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n        int endIndex = -1;\n        // Search for the first occurrence of ']' starting from the current readerIndex.\n        // This is crucial for correctly splitting frames when multiple frames are present in the buffer.\n        // The original code searched backwards from the end of the buffer, which would find the last ']'\n        // and cause the decoder to read multiple complete frames as a single one.\n        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n            if (buf.getByte(i) == ']') {\n                endIndex = i + 1; // endIndex is the position *after* the ']' character\n                break;\n            }\n        }\n\n        // If no ']' is found, or if it's found but there's not enough data yet (shouldn't happen with endIndex > 0),\n        // return null to indicate that no complete frame is available and wait for more data.\n        if (endIndex > 0) {\n            // We have found a complete frame ending at 'endIndex'.\n            ByteBuf frame = Unpooled.buffer();\n            \n            // Read bytes from the input buffer up to the calculated endIndex.\n            // This loop correctly consumes the bytes of the current frame from 'buf'.\n            // The readerIndex of 'buf' will be advanced to 'endIndex' after this loop,\n            // positioning it for the next frame or incoming data.\n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte(); // Read the current byte\n                if (b1 == '}') {\n                    // This is an escape sequence. We need to read the next byte to decode it.\n                    // Check if there is a byte available to be read for the escape sequence within the frame boundary.\n                    // If not, it means the escape character '}' is the last byte of the frame, which is a malformed sequence.\n                    if (buf.readerIndex() >= endIndex) {\n                        throw new IllegalArgumentException(String.format(\n                                \"Malformed frame: dangling escape character '}' at index %d\", buf.readerIndex() - 1));\n                    }\n                    byte b2 = buf.readByte(); // Read the escaped byte\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1); // Not an escape sequence, write the byte directly to the frame\n                }\n            }\n            return frame; // Return the successfully decoded frame\n        }\n\n        // No complete frame found in the current buffer, wait for more data.\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}