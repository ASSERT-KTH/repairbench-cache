{
    "generation": "@Override\nprotected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n    int startIndex = buf.readerIndex();\n    int frameEnd = -1;\n\n    // Scan forward for the first unescaped closing bracket.\n    // If we see an escape character ('}'), skip the following byte.\n    for (int i = startIndex; i < buf.writerIndex(); i++) {\n        byte b = buf.getByte(i);\n        if (b == ']') {\n            frameEnd = i + 1;\n            break;\n        }\n        if (b == '}') {\n            if (i + 1 >= buf.writerIndex()) {\n                // Incomplete escape sequence; wait for more data.\n                return null;\n            }\n            i++; // Skip escape code byte.\n        }\n    }\n    if (frameEnd < 0) {\n        return null;\n    }\n\n    // Now decode the frame (including handling escape sequences)\n    ByteBuf frame = Unpooled.buffer();\n    while (buf.readerIndex() < frameEnd) {\n        byte current = buf.readByte();\n        if (current == '}') {\n            if (buf.readerIndex() >= frameEnd) {\n                return null; // Incomplete escape sequence.\n            }\n            byte code = buf.readByte();\n            switch (code) {\n                case 0x01:\n                    frame.writeByte('}');\n                    break;\n                case 0x02:\n                    frame.writeByte('[');\n                    break;\n                case 0x03:\n                    frame.writeByte(']');\n                    break;\n                case 0x04:\n                    frame.writeByte(',');\n                    break;\n                case 0x05:\n                    frame.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(\n                        String.format(\"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, code));\n            }\n        } else {\n            frame.writeByte(current);\n        }\n    }\n    return frame;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}