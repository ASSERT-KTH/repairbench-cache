{
    "generation": "@Override\nprotected Object decode(\n        ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n    // Look for a complete frame starting and ending with '[' and ']'\n    int readerIndex = buf.readerIndex();\n    int writerIndex = buf.writerIndex();\n\n    // Find the first '['\n    int startIndex = -1;\n    for (int i = readerIndex; i < writerIndex; i++) {\n        if (buf.getByte(i) == '[') {\n            startIndex = i;\n            break;\n        }\n    }\n\n    if (startIndex == -1) {\n        return null;\n    }\n\n    // Find the matching ']'\n    int endIndex = -1;\n    for (int i = startIndex + 1; i < writerIndex; i++) {\n        if (buf.getByte(i) == ']') {\n            endIndex = i;\n            break;\n        }\n    }\n\n    if (endIndex == -1) {\n        return null;\n    }\n\n    // Set readerIndex to startIndex to only consume the current frame\n    buf.readerIndex(startIndex);\n\n    ByteBuf frame = Unpooled.buffer(endIndex - startIndex + 1);\n    while (buf.readerIndex() <= endIndex) {\n        byte b1 = buf.readByte();\n        if (b1 == '}') {\n            if (buf.readerIndex() > endIndex) {\n                // Not enough data for escape sequence, reset reader index and exit\n                buf.readerIndex(startIndex);\n                return null;\n            }\n            byte b2 = buf.readByte();\n            switch (b2) {\n                case 0x01:\n                    frame.writeByte('}');\n                    break;\n                case 0x02:\n                    frame.writeByte('[');\n                    break;\n                case 0x03:\n                    frame.writeByte(']');\n                    break;\n                case 0x04:\n                    frame.writeByte(',');\n                    break;\n                case 0x05:\n                    frame.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\n                            \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n            }\n        } else {\n            frame.writeByte(b1);\n        }\n    }\n\n    // Discard everything up to endIndex + 1 (inclusive)\n    buf.discardReadBytes();\n\n    return frame;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}