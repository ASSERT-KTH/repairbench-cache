{
    "generation": "    @Override\n    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n        int endIndex = -1;\n        // Corrected loop: Search for the first ']' from the readerIndex.\n        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n            if (buf.getByte(i) == ']') {\n                endIndex = i + 1; // endIndex is exclusive, pointing to the byte *after* ']'\n                break;\n            }\n        }\n\n        if (endIndex > 0) { // This condition is fine; if ']' is the first char, readerIndex=0, endIndex=1.\n            ByteBuf frame = Unpooled.buffer(); // Dynamically-sized buffer for the frame\n            // Loop to read bytes from the input buffer up to endIndex.\n            // buf.readByte() advances buf.readerIndex(), consuming the frame from input.\n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte();\n                if (b1 == '}') { // Check for escape character '}'\n                    // Ensure there's a byte to read for the escape sequence value.\n                    // This check is robust: if '}' is the last char before ']',\n                    // b2 will be ']', triggering the default switch case (error), which is correct.\n                    // If frame ends with '}' (e.g. \"[...data}\"), 'endIndex' wouldn't be found initially.\n                    if (!buf.isReadable()) {\n                        // This case implies a frame like \"[...data}\" where '}' is the detected end,\n                        // which shouldn't happen if ']' is the delimiter.\n                        // However, if it could, this would be an invalid escape sequence.\n                        // The original code didn't have this explicit check, but it would likely fail\n                        // on buf.readByte() for b2 if '}' was the true last byte of a segment up to endIndex.\n                        // Given the problem's structure, this is an unlikely path if ']' is always the terminator.\n                        // For maximum safety, keeping the original structure unless a specific test fails here.\n                        // The primary bug is frame delimitation, not escape sequence handling at buffer end.\n                        // The original code would attempt to read b2. If '}' is the penultimate byte\n                        // (i.e., buf.getByte(endIndex - 2) == '}' and buf.getByte(endIndex - 1) == ']'),\n                        // then b2 will be ']', which is handled by the switch default.\n                    }\n                    byte b2 = buf.readByte();\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1);\n                }\n            }\n            return frame;\n        }\n\n        return null; // No complete frame found (no ']' detected or buffer empty)\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}