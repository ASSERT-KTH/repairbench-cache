{
    "generation": "@Override\nprotected Object decode(\n        ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n    if (!buf.isReadable()) {\n        return null;\n    }\n\n    int startIndex = -1;\n    int endIndex = -1;\n\n    // Find start delimiter '['\n    for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n        if (buf.getByte(i) == '[') {\n            startIndex = i;\n            break;\n        }\n    }\n\n    if (startIndex < 0) {\n        // No start delimiter found, discard all data\n        buf.skipBytes(buf.readableBytes());\n        return null;\n    }\n\n    // Find end delimiter ']'\n    for (int i = startIndex + 1; i < buf.writerIndex(); i++) {\n        if (buf.getByte(i) == ']') {\n            endIndex = i + 1; // include the ']'\n            break;\n        }\n    }\n\n    if (endIndex < 0) {\n        // No end delimiter yet, wait for more data\n        return null;\n    }\n\n    // Skip bytes before start of message\n    buf.readerIndex(startIndex);\n    ByteBuf data = buf.readSlice(endIndex - startIndex);\n\n    ByteBuf frame = Unpooled.buffer();\n\n    while (data.isReadable()) {\n        byte b1 = data.readByte();\n        if (b1 == '}') {\n            // escape sequence\n            if (!data.isReadable()) {\n                break;\n            }\n            byte b2 = data.readByte();\n            switch (b2) {\n                case 0x01:\n                    frame.writeByte('}');\n                    break;\n                case 0x02:\n                    frame.writeByte('[');\n                    break;\n                case 0x03:\n                    frame.writeByte(']');\n                    break;\n                case 0x04:\n                    frame.writeByte(',');\n                    break;\n                case 0x05:\n                    frame.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\n                            \"unexpected byte in escape sequence: 0x%02x\", b2));\n            }\n        } else {\n            frame.writeByte(b1);\n        }\n    }\n\n    return frame;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}