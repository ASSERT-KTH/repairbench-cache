{
    "generation": "    @Override\n    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n        // Find the index of the first closing bracket ']'\n        int endIndex = -1;\n        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n            if (buf.getByte(i) == ']') {\n                // Found the closing bracket, endIndex is the position *after* it\n                endIndex = i + 1;\n                break;\n            }\n        }\n\n        // If no ']' is found in the readable bytes, return null (wait for more data)\n        if (endIndex == -1) {\n            return null;\n        }\n\n        // Found a complete frame '[...]'. Extract and unescape it.\n        // Allocate buffer with estimated size for efficiency.\n        ByteBuf frame = Unpooled.buffer(endIndex - buf.readerIndex());\n        while (buf.readerIndex() < endIndex) {\n            byte b1 = buf.readByte(); // Read byte and advance reader index\n            if (b1 == '}') { // Check for escape character\n                // Ensure there is a next byte *within the frame* to check\n                if (buf.readerIndex() < endIndex) {\n                    byte b2 = buf.readByte(); // Read the byte after escape char\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}'); // 7d 01 -> 7d\n                            break;\n                        case 0x02:\n                            frame.writeByte('['); // 7d 02 -> 5b\n                            break;\n                        case 0x03:\n                            frame.writeByte(']'); // 7d 03 -> 5d\n                            break;\n                        case 0x04:\n                            frame.writeByte(','); // 7d 04 -> 2c\n                            break;\n                        case 0x05:\n                            frame.writeByte('*'); // 7d 05 -> 2a\n                            break;\n                        default:\n                            // Invalid escape sequence, throw exception\n                            // readerIndex is already advanced past the invalid byte b2\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte after escape character at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    // Found '}' right before the end of the frame ('endIndex').\n                    // This means an incomplete escape sequence (e.g., \"[...}\")\n                    throw new IllegalArgumentException(String.format(\n                            \"incomplete escape sequence at end of frame at %d\", buf.readerIndex() - 1));\n                }\n            } else {\n                // Regular byte, just write it to the frame\n                frame.writeByte(b1);\n            }\n        }\n        // Return the decoded frame. The readerIndex of the input buffer 'buf'\n        // has been advanced to endIndex by the readByte() calls.\n        return frame;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}