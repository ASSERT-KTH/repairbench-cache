{
    "generation": "    @Override\n    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n        int endIndex = -1;\n        // MODIFIED PART: Search for the first ']' from the current readerIndex forwards.\n        // The original loop searched backwards from writerIndex, finding the *last* ']'\n        // in the buffer, which caused it to consume multiple frames if present.\n        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n            if (buf.getByte(i) == ']') {\n                endIndex = i + 1; // endIndex is the position *after* the ']'\n                break;\n            }\n        }\n        // END OF MODIFIED PART\n\n        if (endIndex > 0) { // This condition checks if ']' was found.\n                            // If found, endIndex will be (i_where_']'_found + 1). Since i >= buf.readerIndex() >= 0,\n                            // endIndex will be >= 1. If not found, endIndex remains -1.\n            \n            // Pre-allocate buffer with the exact size of the frame to be read.\n            // Original code used Unpooled.buffer() which might lead to reallocations.\n            ByteBuf frame = Unpooled.buffer(endIndex - buf.readerIndex());\n            \n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte();\n                if (b1 == '}') {\n                    // This is part of the original unescaping logic.\n                    // It assumes that if '}' is encountered, the next byte is an escape code.\n                    byte b2 = buf.readByte(); \n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1);\n                }\n            }\n            return frame;\n        }\n\n        return null; // ']' not found, so the frame is incomplete.\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}