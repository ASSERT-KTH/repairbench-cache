{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize() {\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n        final double lo = getMin();\n        final double mid = getStartValue();\n        final double hi = getMax();\n\n        // Optional additional convergence criteria.\n        final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();\n\n        double a;\n        double b;\n        if (lo < hi) {\n            a = lo;\n            b = hi;\n        } else {\n            a = hi;\n            b = lo;\n        }\n\n        double x = mid;\n        double v = x;\n        double w = x;\n        double d = 0;\n        double e = 0;\n        // The value of the objective function at x, w and v.\n        // Used to drive the update rule: if the objective function is\n        // to be maximized, we store -f(x) to obtain a minimization problem.\n        double fx = computeObjectiveValue(x);\n        if (!isMinim) {\n            fx = -fx;\n        }\n        double fv = fx;\n        double fw = fx;\n\n        // Best point found so far (which is the initial guess).\n        UnivariatePointValuePair best = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n\n        // Points used for convergence checking.\n        UnivariatePointValuePair previous = null;\n        UnivariatePointValuePair current = best;\n\n\n        int iter = 0;\n        while (true) {\n            final double m = 0.5 * (a + b);\n            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\n            final double tol2 = 2 * tol1;\n\n            // Default stopping criterion.\n            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\n            if (!stop) {\n                double p = 0;\n                double q = 0;\n                double r = 0;\n                double u = 0;\n\n                if (FastMath.abs(e) > tol1) { // Fit parabola.\n                    r = (x - w) * (fx - fv);\n                    q = (x - v) * (fx - fw);\n                    p = (x - v) * q - (x - w) * r;\n                    q = 2 * (q - r);\n\n                    if (q > 0) {\n                        // Standard case: p is set to the numerator of the interpolating parabola.\n                        // The sign of p is adjusted so that the subtraction in the update rule\n                        // corresponds to moving towards the minimum.\n                        p = -p;\n                    } else {\n                        // Degenerate case: denominator is zero.\n                        q = -q;\n                    }\n\n                    r = e;\n                    e = d;\n\n                    // Check acceptability of parabolic interpolation step.\n                    if (p > q * (a - x) && // Interpolated point is within bounds.\n                        p < q * (b - x) &&\n                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { // Interpolation step is significantly smaller than the previous step.\n                        // Parabolic interpolation step.\n                        d = p / q;\n                        u = x + d;\n\n                        // f must not be evaluated too close to a or b.\n                        if (u - a < tol2 || b - u < tol2) {\n                            // If the proposed step would bring us too close to the boundaries,\n                            // adjust the step size.\n                            if (x <= m) { // If x is on the left side of the interval center m\n                                d = tol1; // Move towards the right boundary by tol1\n                            } else {      // If x is on the right side of m\n                                d = -tol1;// Move towards the left boundary by tol1\n                            }\n                        }\n                    } else {\n                        // Golden section step.\n                        if (x < m) { // If x is on the left side of the interval center m\n                            e = b - x; // Distance from x to the right boundary\n                        } else {       // If x is on the right side of m\n                            e = a - x; // Distance from x to the left boundary\n                        }\n                        d = GOLDEN_SECTION * e; // Step size based on golden section\n                    }\n                } else {\n                    // Golden section step.\n                    if (x < m) { // If x is on the left side of the interval center m\n                        e = b - x; // Distance from x to the right boundary\n                    } else {       // If x is on the right side of m\n                        e = a - x; // Distance from x to the left boundary\n                    }\n                    d = GOLDEN_SECTION * e; // Step size based on golden section\n                }\n\n                // Update by at least \"tol1\".\n                // Ensures that the step size is not too small, preventing premature convergence.\n                if (FastMath.abs(d) < tol1) {\n                    if (d >= 0) { // Keep the sign of d\n                        u = x + tol1;\n                    } else {\n                        u = x - tol1;\n                    }\n                } else {\n                    u = x + d;\n                }\n\n                // Compute the objective function value at the new point u.\n                double fu = computeObjectiveValue(u);\n                if (!isMinim) {\n                    fu = -fu; // Negate if maximizing\n                }\n\n                // Store the previous best point for the convergence checker.\n                previous = current;\n                // Store the current evaluation point for the convergence checker.\n                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n                // Keep track of the overall best point found so far.\n                best = FastMath.max(best, current, isMinim);\n\n\n                // User-defined convergence checker.\n                if (checker != null) {\n                    // If the checker converges, return the current best point found.\n                    if (checker.converged(iter, previous, current)) {\n                        return best;\n                    }\n                }\n\n                // Update a, b, v, w and x based on the function value at u.\n                if (fu <= fx) { // If the new point u is better than or equal to the current best x\n                    if (u < x) { // If u is to the left of x\n                        b = x;   // Update the right boundary to x\n                    } else {     // If u is to the right of x\n                        a = x;   // Update the left boundary to x\n                    }\n                    // Shift the points: v becomes w, w becomes x, x becomes u\n                    v = w;\n                    fv = fw;\n                    w = x;\n                    fw = fx;\n                    x = u;\n                    fx = fu;\n                } else { // If the new point u is worse than the current best x\n                    if (u < x) { // If u is to the left of x\n                        a = u;   // Update the left boundary to u\n                    } else {     // If u is to the right of x\n                        b = u;   // Update the right boundary to u\n                    }\n                    // Update w or v if u is better than them, or if w or v are at x\n                    if (fu <= fw || Precision.equals(w, x)) {\n                        v = w;\n                        fv = fw;\n                        w = u;\n                        fw = fu;\n                    } else if (fu <= fv ||\n                               Precision.equals(v, x) ||\n                               Precision.equals(v, w)) {\n                        v = u;\n                        fv = fu;\n                    }\n                }\n            } else { // Default termination (Brent's criterion).\n                // Return the best point found overall.\n                return best;\n            }\n            ++iter; // Increment iteration counter.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}