{
    "generation": "    /**\n     * <p>Converts a String to a boolean (optimised for performance).</p>\n     * \n     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n     * (case insensitive) will return <code>true</code>. Otherwise,\n     * <code>false</code> is returned.</p>\n     * \n     * <p>This method performs 4 times faster (JDK1.4) than\n     * <code>Boolean.valueOf(String)</code>. However, this method accepts\n     * 'on' and 'yes' as true values.\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(null)    = false\n     *   BooleanUtils.toBoolean(\"true\")  = true\n     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n     *   BooleanUtils.toBoolean(\"on\")    = true\n     *   BooleanUtils.toBoolean(\"yes\")   = true\n     *   BooleanUtils.toBoolean(\"false\") = false\n     *   BooleanUtils.toBoolean(\"x gti\") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @return the boolean value of the string, <code>false</code> if no match\n     */\n    public static boolean toBoolean(String str) {\n        // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n        // Non interned 'true' matched 15 times slower.\n        // \n        // Optimisation provides same performance as before for interned 'true'.\n        // Similar performance for null, 'false', and other strings not length 2/3/4.\n        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n        if (str == \"true\") { // Optimisation for interned \"true\"\n            return true;\n        }\n        if (str == null) {\n            return false;\n        }\n        switch (str.length()) {\n            case 2: {\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                return \n                    (ch0 == 'o' || ch0 == 'O') &&\n                    (ch1 == 'n' || ch1 == 'N');\n            }\n            case 3: {\n                char ch0 = str.charAt(0);\n                if (ch0 == 'y' || ch0 == 'Y') {\n                    char ch1 = str.charAt(1);\n                    char ch2 = str.charAt(2);\n                    // Check for \"yes\" ignoring case\n                    return (ch1 == 'e' || ch1 == 'E') &&\n                           (ch2 == 's' || ch2 == 'S');\n                }\n                // If the string has length 3 but is not \"yes\" (case-insensitive),\n                // return false immediately. The original code missed this, causing\n                // fallthrough to case 4 for strings like \"off\" or \"tru\", leading\n                // to StringIndexOutOfBoundsException.\n                return false;\n            }\n            case 4: {\n                char ch0 = str.charAt(0);\n                 if (ch0 == 't' || ch0 == 'T') {\n                     char ch1 = str.charAt(1);\n                     char ch2 = str.charAt(2);\n                     char ch3 = str.charAt(3);\n                    // Check for \"true\" ignoring case\n                    return (ch1 == 'r' || ch1 == 'R') &&\n                           (ch2 == 'u' || ch2 == 'U') &&\n                           (ch3 == 'e' || ch3 == 'E');\n                }\n                 // Note: No need for an explicit 'return false' here.\n                 // If the length is 4 but it's not \"true\" (case-insensitive),\n                 // execution will proceed past the switch statement and hit\n                 // the final 'return false'.\n                 break; // Added break for clarity, though not strictly necessary\n                       // as it's the last case before the default return.\n            }\n        }\n        // Default case: string is not null, not \"true\" (interned), and not\n        // a case-insensitive match for \"on\", \"yes\", or \"true\".\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}