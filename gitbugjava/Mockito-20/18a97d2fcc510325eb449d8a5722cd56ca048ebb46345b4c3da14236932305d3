{
    "generation": "    @Override\n    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n\n        T mockInstance = null;\n        // Decalare instantiator variable to use it in the catch block\n        Instantiator instantiator = null;\n        try {\n            // Determine the instantiator based on settings:\n            // - If mockito should use constructor, create an instance an instantiator that uses the constructor\n            // - Otherwise use the default instantiator that bypass the constructor (when possible)\n            if (settings.isUsingConstructor()) {\n                 instantiator = new ConstructorInstantiator(\n                     settings.getOuterClassInstance(),\n                     settings.getConstructorArgs()\n                 );\n            } else {\n                // Use the default instantiator (likely Objenesis-based to bypass constructor)\n                instantiator = classInstantiator;\n            }\n\n            // Instantiate the mock using the chosen instantiator\n            mockInstance = instantiator.newInstance(mockedProxyType);\n\n            // Set the interceptor\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            // Useful diagnostics for ClassCastException happened during mock creation\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(settings.getTypeToMock()),\n                    \"  created class : \" + describeClass(mockedProxyType),\n                    \"  proxy instance class : \" + describeClass(mockInstance), // Can be null if instantiation failed before assignment\n                    \"  instance creation method : \" + (settings.isUsingConstructor() ? \"constructor\" : \"jvm-bypass (Objenesis)\"),\n                    \"  instantiator : \" + (instantiator != null ? instantiator.getClass().getSimpleName() : \"UNKNOWN\"), // Show actual instantiator class\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ), cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            // Use a clearer message referencing the type requested by the user for InstantiationException\n            throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}