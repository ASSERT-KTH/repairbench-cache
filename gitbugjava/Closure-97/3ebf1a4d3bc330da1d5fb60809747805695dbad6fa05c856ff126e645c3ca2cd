{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      // JavaScript bitwise operations implicitly convert operands to Int32.\n      // We only fold if the operand is precisely representable as an Int32\n      // by the host platform's double representation.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // only the lower 5 bits are used when shifting, so don't do anything\n      // if the shift amount is outside [0,32)\n      // JavaScript bitwise operations implicitly convert the shift amount\n      // to Uint32 and then use the lower 5 bits (mask with 0x1F).\n      // We only fold if the shift amount is an integer in the range [0, 31].\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      switch (n.getType()) {\n        case Token.LSH:\n          // JavaScript: ToInt32(lval) << (ToUint32(rval) & 0x1F)\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          // JavaScript: ToInt32(lval) >> (ToUint32(rval) & 0x1F)\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript: ToUint32(lval) >>> (ToUint32(rval) & 0x1F)\n          // Java's >>> operator performs the unsigned shift correctly\n          // on the bits. However, the result is an int. To represent\n          // the result as JavaScript would (a Number, which is a double,\n          // capable of representing unsigned 32-bit values), we need to\n          // convert the resulting bits (interpreted as unsigned) to double.\n          // Casting the result of >>> to long and masking with 0xFFFFFFFFL\n          // achieves this, correctly handling cases like (-1 >>> 0) which\n          // should result in 4294967295.0.\n          long unsignedResult = (lvalInt >>> rvalInt) & 0xFFFFFFFFL;\n          result = unsignedResult;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}