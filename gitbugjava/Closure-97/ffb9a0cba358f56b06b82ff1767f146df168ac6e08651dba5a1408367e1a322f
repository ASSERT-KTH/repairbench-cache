{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      // Note: This check differs slightly from the ECMA specification section\n      // 11.7 but works in practice for safe integer values. It prevents folding\n      // for large doubles that would lose precision or change value through\n      // the ToInt32/ToUint32 conversions implicit in JavaScript's bitwise ops.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // only the lower 5 bits are used when shifting, according to ECMAScript spec\n      // so check if the shift amount is outside [0, 31]. Note that the result\n      // of ToUint32(rval) & 0x1F is used, so we check the original double rval.\n      // We restrict folding to non-negative integer shifts for simplicity and safety.\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints. Check for fractional parts.\n      // The previous range check ensures lval fits in signed int range.\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      // Check rval for fractional parts.\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      // Check that the rvalInt is still in the valid range [0, 31] after cast.\n      // This check is technically redundant given the previous double check and\n      // the rvalInt != rval check, but kept for clarity.\n      if (rvalInt < 0 || rvalInt >= 32) {\n         // This case should ideally not be reached due to earlier checks.\n         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n         return n;\n      }\n\n\n      switch (n.getType()) {\n        case Token.LSH:\n          // JavaScript << performs ToInt32(lval) << (ToUint32(rval) & 0x1F)\n          // Java's << on int performs a similar operation.\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          // JavaScript >> performs ToInt32(lval) >> (ToUint32(rval) & 0x1F)\n          // Java's >> on int performs a similar signed right shift.\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript >>> performs ToUint32(lval) >>> (ToUint32(rval) & 0x1F)\n          // Java's >>> on int results in an int, which can be negative if the\n          // high bit is set. To mimic JS's unsigned result accurately,\n          // we convert lvalInt to its unsigned 32-bit representation using a long,\n          // perform the shift, and store the result (which fits in double).\n          long unsignedLval = lvalInt & 0xFFFFFFFFL;\n          result = unsignedLval >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}