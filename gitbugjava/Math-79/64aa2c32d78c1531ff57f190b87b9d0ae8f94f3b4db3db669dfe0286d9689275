{
    "generation": "    /**\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     */\n    public static double distance(int[] p1, int[] p2) {\n      // Use double for the sum to avoid integer overflow\n      double sum = 0;\n      for (int i = 0; i < p1.length; i++) {\n          // Cast difference to double before squaring to prevent potential intermediate overflow\n          // although simple subtraction of ints is unlikely to overflow unless the coordinates themselves\n          // are near Integer.MAX_VALUE/MIN_VALUE. The main issue is the sum of squares.\n          final double dp = (double)p1[i] - p2[i];\n          sum += dp * dp;\n      }\n      return Math.sqrt(sum);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}