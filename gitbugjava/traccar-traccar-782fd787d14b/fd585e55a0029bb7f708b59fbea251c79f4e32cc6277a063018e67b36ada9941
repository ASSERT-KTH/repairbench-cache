{
    "generation": "    private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n        String id = String.format(\"%08d%07d\", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n        position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));\n        while (buf.isReadable()) {\n            int type = buf.readUnsignedByte();\n            switch (type) {\n                case 0:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    buf.readUnsignedIntLE(); // event data\n                    int status = buf.readUnsignedShortLE();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));\n                    position.set(Position.KEY_STATUS, status);\n                    position.setValid(true);\n                    break;\n                case 1:\n                    position.set(Position.KEY_LATITUDE, buf.readDoubleLE());\n                    break;\n                case 2:\n                    position.set(Position.KEY_LONGITUDE, buf.readDoubleLE());\n                    break;\n                case 3:\n                    position.set(Position.KEY_ALTITUDE, buf.readUnsignedShortLE());\n                    break;\n                case 4:\n                    position.set(Position.KEY_SPEED, buf.readUnsignedShortLE());\n                    break;\n                case 5:\n                    position.set(Position.KEY_HEADING, buf.readUnsignedShortLE());\n                    break;\n                case 6:\n                    position.set(Position.KEY_ACCURACY, buf.readUnsignedShortLE());\n                    break;\n                case 7:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 8:\n                    position.set(Position.KEY_IGNITION, BitUtil.check(buf.readUnsignedShortLE(), 5));\n                    break;\n                case 9:\n                    position.set(Position.KEY_IGNITION, BitUtil.check(buf.readUnsignedShortLE(), 5));\n                    break;\n                case 10:\n                    position.set(Position.KEY_IGNITION, BitUtil.check(buf.readUnsignedShortLE(), 5));\n                    break;\n                case 11:\n                    position.set(Position.KEY_IGNITION, BitUtil.check(buf.readUnsignedShortLE(), 5));\n                    break;\n                case 12:\n                    position.set(Position.KEY_IGNITION, BitUtil.check(buf.readUnsignedShortLE(), 5));\n                    break;\n                case 13:\n                    position.set(Position.KEY_IGNITION, BitUtil.check(buf.readUnsignedShortLE(), 5));\n                    break;\n                case 14:\n                    position.set(Position.KEY_IGNITION, BitUtil.check(buf.readUnsignedShortLE(), 5));\n                    break;\n                case 255:\n                    buf.skipBytes(4); // acknowledgement\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"Unknown type %d\", type));\n            }\n        }\n        return position.getValid() ? position : null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}