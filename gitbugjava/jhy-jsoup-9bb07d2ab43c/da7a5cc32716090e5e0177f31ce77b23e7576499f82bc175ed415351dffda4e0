{
    "generation": "    protected void replaceChild(Node out, Node in) {\n        // If replacing a node with itself, it's a no-op.\n        // The original code would incorrectly modify the node and its siblings.\n        if (out == in) {\n            // Note: Validate.isTrue(out.parentNode == this) must hold here.\n            // If out == in, and out.parentNode == this, then in.parentNode == this.\n            // So, 'in' is already correctly parented and positioned.\n            return;\n        }\n\n        Validate.isTrue(out.parentNode == this, \"Node to be replaced is not a child of this node.\");\n        Validate.notNull(in, \"Node to insert must not be null.\");\n\n        // If 'in' is already part of a tree, remove it from its current parent.\n        // This handles cases where 'in' is a sibling of 'out', or elsewhere in this tree, or in another tree.\n        if (in.parentNode != null) {\n            in.parentNode.removeChild(in);\n            // After removeChild, in.parentNode == null and in.siblingIndex == 0.\n        }\n\n        // Get the original index of 'out'. This is where 'in' will be inserted.\n        final int index = out.siblingIndex; // Direct field access as in the original snippet\n\n        // Replace 'out' with 'in' in this node's child list.\n        // ensureChildNodes() gets (or creates) the list of children.\n        // List.set(index, element) replaces the element at the specified position.\n        ensureChildNodes().set(index, in);\n\n        // Set up 'in's relationship to this parent node.\n        in.parentNode = this; // Assign 'this' as the parent of 'in'.\n        in.setSiblingIndex(index); // Set 'in's sibling index within this parent.\n\n        // Orphan 'out' by detaching it from any parent and resetting its sibling index.\n        out.parentNode = null;\n        out.setSiblingIndex(0); // An orphaned node should have its sibling index reset to 0.\n                                // The original code was missing this, leaving out.siblingIndex stale.\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}