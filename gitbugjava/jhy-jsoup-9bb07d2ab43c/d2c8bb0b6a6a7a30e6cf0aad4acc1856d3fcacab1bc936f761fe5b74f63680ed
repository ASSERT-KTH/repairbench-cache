{
    "generation": "    protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode == this);\n        Validate.notNull(in);\n\n        // If 'in' is the same node as 'out', it means we are trying to replace a node with itself.\n        // In this case, no actual DOM structural modification is needed. The node is already in place.\n        // This prevents `in.parentNode.removeChild(in)` from detaching 'out' prematurely when 'out' == 'in',\n        // which would lead to an incorrect state or IndexOutOfBoundsException when trying to re-insert.\n        if (out == in) {\n            // The node is already in its correct position with the correct parent and sibling index.\n            // No operation is needed.\n            return;\n        }\n\n        // If 'in' is a different node than 'out', and 'in' is currently attached to any parent, detach it first.\n        // This is crucial to prevent 'in' from having multiple parents or being part of two DOM trees.\n        if (in.parentNode != null) {\n            in.parentNode.removeChild(in);\n        }\n\n        // Get the current sibling index of 'out'. This index is where 'in' will be placed.\n        // At this point, 'out' is still correctly part of 'this's children list, so its siblingIndex is valid.\n        final int index = out.siblingIndex;\n\n        // Replace 'out' with 'in' in the childNodes list at the determined index.\n        // The `List.set()` method performs the replacement, effectively removing 'out' from the list.\n        ensureChildNodes().set(index, in);\n\n        // Update 'in' node's parent and sibling index to reflect its new position within 'this' node's children.\n        in.parentNode = this;\n        in.setSiblingIndex(index);\n\n        // Detach 'out' from the DOM. It's no longer part of 'this' node's children list.\n        // Its parent reference is cleared, and its sibling index is reset to indicate it's detached.\n        out.parentNode = null;\n        out.setSiblingIndex(-1); // Explicitly set siblingIndex to -1 for the detached node.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}