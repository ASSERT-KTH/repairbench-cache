{
    "generation": "protected void replaceChild(Node out, Node in) {\n    Validate.isTrue(out.parentNode == this);\n    Validate.notNull(in);\n    if (in.parentNode != null)\n        in.parentNode.removeChild(in);\n\n    Node siblingNextChildren;\n    if (!out.isLeaf()) {\n        siblingNextChildren = out.nextSibling();\n        out.afterCopy(out.nextSibling());\n        siblingNextChildren.setSiblingIndex(out.siblingIndex() + 1);\n    }\n    final int index = out.siblingIndex;\n    ensureChildNodes().set(index, in);\n    in.parentNode = this;\n    in.setSiblingIndex(index);\n\n    if (!out.isLeaf()) {\n        Node firstChild = out.childNodes().first();\n        if (firstChild != null) {\n            firstChild.remove();\n        }\n        for (Node child = firstChild;;) {\n            if (child == null) return;\n            Node next = child.nextSibling();\n            in.appendChild(child);\n            child = next;\n        }\n    }\n    out.parentNode = null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}