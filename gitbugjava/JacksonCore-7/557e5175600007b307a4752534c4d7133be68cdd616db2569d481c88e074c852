{
    "generation": "    public int writeValue() {\n        // Most likely, object:\n        if (_type == TYPE_OBJECT) {\n            // [core#177] Need to ensure we are expecting a value, not a name\n            if (!_gotName) {\n                // If we are not expecting value, means error; contextually\n                // should be expecting field name\n                // RATIONALE: This addresses the case where writeValue() is called (as part of\n                // a value writing operation like writeString()) when the context actually\n                // expects a field name (_gotName == false). By returning STATUS_EXPECT_NAME,\n                // we signal this incorrect state to the caller (_verifyValueWrite or similar),\n                // which should then throw an exception, aligning with the test expectation.\n                return STATUS_EXPECT_NAME;\n            }\n            _gotName = false;\n            ++_index;\n            return STATUS_OK_AFTER_COLON;\n        }\n\n        // Ok, array?\n        if (_type == TYPE_ARRAY) {\n            int ix = _index;\n            ++_index;\n            return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n        }\n        \n        // Nope, root context\n        // No commas within root context, but need space\n        ++_index;\n        // Before version 2.10, calculation was `(_index == 0)`. Incorrect for multiple root values\n        //\n        // NOTE: This was changed in 2.10. Looks like 0 was special cased, not > 0\n        // (see [core#548]) -- meaning problem was AFTER the first value.\n        // But let's retain logic here: for non-array/object, separator only needed\n        // after the first value.\n        // Also: note that root-level requires space, not comma\n        return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}