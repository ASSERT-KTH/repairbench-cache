{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0); // Find initial wrap point\n\n        if (pos == -1)\n        {\n            // Text fits on one line\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        // Append the first line (up to wrap point)\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Prepare padding for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n\n        // Loop for subsequent lines\n        while (true)\n        {\n            // Prepare the text for the next line: padding + remaining trimmed text\n            // The remaining text starts from the wrap position 'pos' found in the previous iteration\n            text = padding + text.substring(pos).trim();\n\n            // Find the wrap position for this new (padded) line\n            // FIX: Use 0 instead of nextLineTabStop for the start position in the loop.\n            // The start position for searching the wrap point should always be 0 for the current line text.\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                // Remainder fits on the last line\n                // Apply rtrim to the last line for consistency, like other appended lines.\n                sb.append(rtrim(text));\n                return sb;\n            }\n\n            // Append the wrapped part of the current line\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n            // The loop continues. 'text' is updated at the start of the loop\n            // using the 'pos' found in this iteration to determine the remaining text.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}