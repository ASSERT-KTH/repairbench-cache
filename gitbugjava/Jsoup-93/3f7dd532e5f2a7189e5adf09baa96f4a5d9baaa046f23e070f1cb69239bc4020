{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n\n            // Special handling for <input> types per HTML spec: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#constructing-the-form-data-set\n            if (\"input\".equals(el.normalName())) {\n                String lowerType = type.toLowerCase();\n                // ignore any button types, reset, image, file\n                // checkboxes and radios are handled below)\n                if (lowerType.equals(\"button\") || lowerType.equals(\"submit\") || lowerType.equals(\"reset\") || lowerType.equals(\"image\") || lowerType.equals(\"file\")) {\n                    continue;\n                }\n                // radios and checkboxes only submit if checked:\n                 else if (lowerType.equals(\"checkbox\") || lowerType.equals(\"radio\")) {\n                    if (el.hasAttr(\"checked\")) {\n                        final String val = el.val().length() > 0 ? el.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                    continue; // Already handled above, don't re-add below\n                }\n                // else fall through to add default input value\n            }\n\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // This branch is actually unreachable now for <input type=radio|checkbox> due to the input-specific logic above\n                // Kept for parallel structure and potential future refactoring or handling of non-input checkboxes/radios if any exist\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                // General inputs (text, hidden, password etc), textarea\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}