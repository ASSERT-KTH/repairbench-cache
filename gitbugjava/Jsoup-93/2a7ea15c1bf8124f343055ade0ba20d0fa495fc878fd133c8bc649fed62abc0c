{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Assume this class exists and 'elements' is a field or accessible variable containing the form elements\n// public class FormElement extends Element { ...\n//     private final Elements elements = new Elements(); ...\n// }\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) { // Assuming 'elements' is the list of form control elements\n            // filters for valid controls\n            if (!el.tag().isFormSubmittable()) continue; // Element must be submittable\n            if (el.hasAttr(\"disabled\")) continue; // Can't be disabled\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue; // Must have a name\n\n            String tagName = el.normalName();\n\n            if (\"select\".equals(tagName)) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                // When multiple=false, browsers select the first option if none is selected.\n                // Otherwise no value is submitted. For jsoup, default to first if none selected.\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"input\".equals(tagName)) {\n                String type = el.hasAttr(\"type\") ? el.attr(\"type\") : \"text\"; // Default type is \"text\"\n                 // If checkbox or radio, only add if checked.\n                if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                    if (el.hasAttr(\"checked\")) {\n                        // Use value=on if not present, per HTML spec\n                        final String val = el.val().length() >  0 ? el.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                 } else {\n                    // All other input types (text, password, hidden, etc.), excluding buttons\n                    // Per HTML spec, buttons shouldn't be submitted as form data unless clicked.\n                    // input types button, submit, reset, image are excluded.\n                     boolean excludedType = \"button\".equalsIgnoreCase(type) ||\n                                            \"submit\".equalsIgnoreCase(type) ||\n                                            \"reset\".equalsIgnoreCase(type) ||\n                                            \"image\".equalsIgnoreCase(type);\n                     if (!excludedType) {\n                        data.add(HttpConnection.KeyVal.create(name, el.val()));\n                     }\n                 }\n            } else if (\"textarea\".equals(tagName)) {\n                 // Simple value\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n            // Other form submittable elements (like button, keygen, object) are implicitly ignored here,\n            // which aligns with standard successful control submission (except for clicked buttons).\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}