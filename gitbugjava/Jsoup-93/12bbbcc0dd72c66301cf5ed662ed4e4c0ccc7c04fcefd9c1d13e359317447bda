{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) { // elements is assumed to be a list of form controls associated with this form\n            if (!el.tag().isFormSubmittable()) continue; // skip non-submittable tags (e.g., <p>)\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue; // skip elements without a name\n            String tagName = el.normalName();\n\n            if (\"select\".equals(tagName)) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                // Browsers default to the first option if nothing explicitly selected\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"input\".equals(tagName)) {\n                String type = el.attr(\"type\"); // Keep original case for equalsIgnoreCase\n                if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                    // only add checkbox or radio if they have the checked attribute\n                    if (el.hasAttr(\"checked\")) {\n                        // Use \"on\" as default value for checked checkbox/radio inputs if value attribute is not set\n                        final String val = el.val().length() > 0 ? el.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                } else {\n                    // Add all other input types except the explicitly excluded ones\n                    // Based on HTML spec: button, reset, file, image inputs' value attribute is not submitted this way.\n                    boolean excluded = \"button\".equalsIgnoreCase(type) ||\n                                       \"reset\".equalsIgnoreCase(type) ||\n                                       \"file\".equalsIgnoreCase(type) ||\n                                       \"image\".equalsIgnoreCase(type);\n                    if (!excluded) {\n                        data.add(HttpConnection.KeyVal.create(name, el.val()));\n                    }\n                    // input types like submit are included here - representing potential data.\n                }\n            } else if (\"textarea\".equals(tagName)) {\n                // Textareas submit their text content\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            } else if (\"button\".equals(tagName)) {\n                 // Button elements submit their value attribute if they have a name\n                 data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n            // Other submittable tags (like keygen, object) are currently ignored by this logic.\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}