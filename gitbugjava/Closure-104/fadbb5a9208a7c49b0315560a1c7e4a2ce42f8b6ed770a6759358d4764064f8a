{
    "generation": "  @Override\n  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n\n    // The meet of two union types is the union of the meets of the alternates.\n    // meet(A|B, C) = meet(A, C) | meet(B, C)\n    // meet(A|B, C|D) = meet(A, C) | meet(A, D) | meet(B, C) | meet(B, D)\n    // We calculate the meet for every pair of alternates between this type and that type.\n\n    // Determine the alternates of the 'that' type. If 'that' is not a union,\n    // it's treated as a union with a single alternate.\n    com.google.common.collect.ImmutableSet<JSType> otherAlternates = that.isUnionType()\n        ? that.toMaybeUnionType().getAlternates()\n        : com.google.common.collect.ImmutableSet.of(that);\n\n    // Iterate through all pairs of alternates ((thisAlternate, thatAlternate))\n    for (JSType thisAlternate : this.alternates) {\n      for (JSType thatAlternate : otherAlternates) {\n        // Calculate the greatest lower bound (meet) of the individual alternates.\n        // JSType.getGreatestSubtype handles the actual computation, including\n        // recursive calls back to this method if alternates are themselves unions.\n        // Base cases in JSType.getGreatestSubtype handle non-union types.\n        JSType alternateMeet = thisAlternate.getGreatestSubtype(thatAlternate);\n\n        // Add the result of the pairwise meet to the builder.\n        // The UnionTypeBuilder handles combining these results, including simplifying\n        // unions, ignoring NoType, and potentially propagating NoObject.\n        builder.addAlternate(alternateMeet);\n      }\n    }\n\n    // Build the final union type from the collected meets.\n    JSType result = builder.build();\n\n    // If the builder produced a valid type (including potentially NoObject if all\n    // pairwise meets resulted in NoObject), return that type.\n    // If the builder returns null, it means all pairwise meets resulted in NoType,\n    // so the overall meet is NoType.\n    return (result != null) ? result : getNativeType(JSTypeNative.NO_TYPE);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}