{
    "generation": "  @Override\n  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      // Calculate the meet of the alternate with 'that'.\n      // JSType#meet handles the dispatch correctly, avoiding infinite recursion\n      // because eventually a non-UnionType#meet will be called.\n      JSType meetResult = alternate.meet(that);\n      // Add the result to the builder. UnionTypeBuilder handles adding\n      // unions, NO_TYPE, NO_OBJECT_TYPE, etc., correctly.\n      builder.addAlternate(meetResult);\n    }\n\n    JSType result = builder.build();\n\n    // If the build result is null (empty union) or NO_TYPE, it means\n    // no common subtype was found via the distributive meet.\n    // Fallback to NO_OBJECT_TYPE if both original types were object types.\n    // Note: An empty union (null result) should ideally represent NO_TYPE.\n    // The builder might return NO_TYPE directly in this case.\n    if (result == null || result.isNoType()) {\n      // Check if both 'this' union and 'that' are subtypes of Object.\n      // Using isSubtype is more reliable than isObject() potentially.\n      JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);\n      // Check that 'that' is an object type AND this union contains only object types.\n      // The check for 'this' being a subtype of object ensures all its alternates are object types.\n      if (this.isSubtype(objectType) && that.isSubtype(objectType)) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n      } else {\n        // Otherwise, return the absolute bottom type\n        return getNativeType(JSTypeNative.NO_TYPE);\n      }\n    } else {\n      // Otherwise, return the computed union of meets.\n      // The UnionTypeBuilder is responsible for simplifications like\n      // (Foo | NO_OBJECT_TYPE) => Foo if Foo is an object type.\n      return result;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}