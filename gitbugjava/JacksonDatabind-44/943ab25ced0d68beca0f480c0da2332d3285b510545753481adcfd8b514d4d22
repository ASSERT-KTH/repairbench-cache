{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        // Note: Method already deprecated in source\n        if (_class == subclass) {\n            return this;\n        }\n        // Existing comments explaining why sub-class check is tricky\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.8\n            /*\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n                    */\n\n        // Fix inspired by Jackson 2.8.x handling for non-generic types:\n        // If the current type has no type bindings (is not generic, or bindings already resolved),\n        // create the narrowed type differently. This addresses issues where the simple propagation\n        // of 'this' as superclass led to incorrect type information for introspection.\n        if (_bindings == null || _bindings.isEmpty()) {\n            // Create the new SimpleType for the subclass:\n            // - Use the specific subclass.\n            // - Use empty TypeBindings as the base type was not generic.\n            // - Pass null for the superclass JavaType. This avoids propagating potentially\n            //   incorrect hierarchy information from 'this'. Downstream code (like\n            //   introspector) might fall back to reflection on the raw class when needed.\n            // - Propagate _superInterfaces (consistent with 2.8.x simple case approach).\n            // - Propagate handlers and static flag.\n            return new SimpleType(subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings(),\n                    null, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        } else {\n            // If the current type *does* have bindings (generic type), fall back to the\n            // original behavior. This case might still be buggy, as proper narrowing\n            // of generic types requires more complex hierarchy resolution (as done in Jackson 2.8+).\n            // However, this retains the previous behavior for the generic case.\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n        // The original code was effectively just the 'else' block logic applied unconditionally.\n        // Leftover comments from original:\n        // Otherwise, stitch together the hierarchy. First, super-class\n        // if not found, try a super-interface\n        // should not get here but...\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}