{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        // NOTE: Class instance comparison is fine WRT generics since we only narrow\n        // for same raw type or more specific one (never more generic)\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.8 (by calling TypeFactory?)\n            /*\n            if (!_class.isAssignableFrom(subclass)) {\n                 throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                         +_class.getName());\n            }\n            */\n\n        // 18-Nov-2016, tatu: As per [databind#1417], need to ensure we don't propagate\n        //    static types, and also that we properly handle super-class/super-interfaces.\n        //    Let's try specifically NOT constructing super-type hierarchy by passing null\n        //    for super-interfaces; resolution should work.\n        //    Also: handlers are inherited. And, importantly, bindings need to be\n        //    copied. Static-ness is NOT inherited.\n        return new SimpleType(subclass, _bindings, this, null, // resolve super-interfaces lazily\n                _valueHandler, _typeHandler, false); // also: static-ness is NOT inherited\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}