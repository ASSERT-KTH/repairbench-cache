{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.8\n            /*\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n                    */\n\n        // 04-Sep-2017, tatu: For 2.9.x MUST NOT pass value/type handlers, as that will\n        //    prevent subtype-specific handlers from being applied\n        //    ... also, must not blindly assume same static-typing setting...\n\n        // As per later comments/fixes in Jackson (and analysis of the issue):\n        // Inheriting value/type handlers and the _asStatic flag from the supertype\n        // is incorrect when narrowing to a subtype. The subtype should get its own\n        // handlers and its static typing status should not be assumed from the supertype.\n        // We pass null for handlers and false for _asStatic, similar to how\n        // TypeFactory creates new SimpleType instances. The superclass/superinterfaces\n        // might also be technically incorrect here, but they are expected to be\n        // refined by the caller (typically JavaType.refine).\n        return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                /*_valueHandler*/ null, /*_typeHandler*/ null, /*_asStatic*/ false);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}