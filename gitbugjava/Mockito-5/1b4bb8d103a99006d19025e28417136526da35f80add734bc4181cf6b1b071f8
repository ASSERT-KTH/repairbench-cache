{
    "generation": "    /**\n     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\n     * before the full duration has passed.\n     *\n     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once\n     * the full duration has passed, the last error returned by the delegate verification mode will be thrown\n     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known\n     * to never recover from this situation (e.g. {@link AtMost}).\n     *\n     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter\n     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If\n     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.\n     *\n     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n     */\n    public void verify(VerificationData data) {\n        AssertionError error = null; // Store the last verification error encountered\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                // Attempt to verify using the delegate mode\n                delegate.verify(data);\n\n                // If verification succeeds\n                if (returnOnSuccess) {\n                    // If returnOnSuccess is true, we are done immediately.\n                    return;\n                } else {\n                    // If returnOnSuccess is false, we need to continue waiting until the full duration passes.\n                    // Reset the error since this attempt was successful.\n                    error = null;\n                }\n            } catch (AssertionError e) {\n                // Catch any verification error (AssertionError is the base class for MockitoAssertionError and potential JUnit errors)\n                // Store the error encountered during this attempt.\n                error = handleVerifyException(e);\n                // Continue loop to retry verification until timer runs out.\n            }\n            // Non-AssertionError exceptions are not caught and will propagate, terminating the verification loop.\n        }\n\n        // After the timer has expired, if an error was captured (i.e., the delegate verification was not successful\n        // in the last attempt or consistently failed), throw the last captured error.\n        if (error != null) {\n            throw error;\n        }\n        // If the loop completes without a final error (either because returnOnSuccess was false and the delegate\n        // succeeded eventually, or because returnOnSuccess was true and it succeeded earlier),\n        // the verification is considered successful.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}