{
    "generation": "    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n      // find the column corresponding to the negative variable marker\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = (negativeVarColumn > 0) ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n      // Assume objective function is in row 0\n      final int objectiveFunctionRowIndex = 0; \n\n      for (int i = 0; i < coefficients.length; i++) {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i] = 0; // Variable not in tableau (e.g., removed)\n            continue;\n          }\n\n          Integer basicRow = getBasicRow(colIndex);\n          double value = 0; // Default value is 0 (non-basic variable)\n\n          // Check if the variable is basic in a *constraint* row (not objective row)\n          // and if that row hasn't been claimed by another basic variable yet.\n          // A variable should not be basic in the objective function row (row 0)\n          // in the context of determining the solution vector.\n          if (basicRow != null &&\n              basicRow != objectiveFunctionRowIndex && // Exclude objective function row\n              !basicRows.contains(basicRow)) {\n\n              value = getEntry(basicRow, getRhsOffset());\n              basicRows.add(basicRow); // Mark this row as used\n          }\n\n          // For unrestricted variables (restrictToNonNegative = false), \n          // subtract the 'mostNegative' offset value derived from the artificial variable.\n          if (!restrictToNonNegative) {\n              value -= mostNegative;\n          }\n\n          coefficients[i] = value;\n      }\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}