{
    "generation": "    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n      // find the column corresponding to the negative variableMinimized\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      // retrieve the row in which the negative variable is basic\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      // retrieve the value of the negative variable\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      // Sets to store the basic rows/columns already processed\n      Set<Integer> basicRows = new HashSet<Integer>();\n      // array to store the coefficients of the solution vector\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n      // iterate through the decision variables\n      for (int i = 0; i < coefficients.length; i++) {\n          // find the column corresponding to the current variable\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            // if the variable is not found in the tableau (e.g., eliminated), set coefficient to 0\n            coefficients[i] = 0;\n            continue;\n          }\n          // find the row in which the current variable is basic\n          Integer basicRow = getBasicRow(colIndex);\n\n          // Check if the row is already assigned to another basic variable (degeneracy, etc.)\n          // Note: The original contains check could potentially accept null if basicRow is null.\n          // The fix focuses on the calculation of the coefficient value, not altering this check structure.\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables map to the same basic row, set subsequent ones to 0\n              // The subtraction logic here remains as in the original code, as the commit didn't change this branch's assignment.\n              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n          } else {\n              // Add the row (even if null for non-basic vars) to the set of processed rows\n              basicRows.add(basicRow);\n              // Set the coefficient:\n              // If the variable is basic (basicRow != null), use the RHS value from its row.\n              // If the variable is non-basic (basicRow == null), use 0.\n              // *** FIX START ***\n              // The original code subtracted 'mostNegative' here if !restrictToNonNegative.\n              // The fix removes that subtraction from this line.\n              coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));\n              // *** FIX END ***\n          }\n\n          // *** FIX START ***\n          // Conditionally subtract 'mostNegative' only under specific conditions:\n          // 1. The variable is basic (basicRow != null).\n          // 2. Variables are allowed to be negative (!restrictToNonNegative).\n          // This block was added by the fix for MATH-713.\n          if (basicRow != null && !restrictToNonNegative) {\n               coefficients[i] -= mostNegative;\n          }\n          // *** FIX END ***\n      }\n      // Return the solution point and its value calculated using the objective function f\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}