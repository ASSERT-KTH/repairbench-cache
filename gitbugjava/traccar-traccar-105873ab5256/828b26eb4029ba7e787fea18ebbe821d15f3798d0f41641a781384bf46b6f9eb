{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // header\n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf.slice());\n        }\n\n        if (type == MSG_DATA || type == MSG_SERVICES) {\n\n            // Handle potential NullPointerException if protocol is null\n            String protocolName = null;\n            try {\n                // getProtocolName() might throw NPE if the 'protocol' instance variable is null\n                // This can happen depending on how the decoder is instantiated (e.g., in tests)\n                protocolName = getProtocolName();\n            } catch (NullPointerException e) {\n                // Log warning or ignore, proceed with null protocolName\n                // Position class should ideally handle a null protocol name gracefully.\n            }\n\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(protocolName); // Use potentially null protocolName\n\n            DeviceSession deviceSession = null;\n\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                // Ensure we don't read past the expected end index for this key-value pair\n                if (endIndex > buf.writerIndex()) {\n                    throw new CorruptedFrameException(\"Invalid end index for key-value pair\");\n                }\n                int key = buf.readUnsignedByte();\n\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(protocolName); // Use potentially null protocolName\n                }\n                keys.add(key);\n\n                switch (key) {\n                    case 0x01:\n                        // Ensure reading within bounds\n                        if (buf.readableBytes() < 15) throw new CorruptedFrameException(\"Not enough data for IMEI\");\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        if (deviceSession == null) {\n                            // If device session is not found, we cannot associate data, return null\n                            return null;\n                        }\n                        break;\n                    case 0x02:\n                        if (buf.readableBytes() < 4) throw new CorruptedFrameException(\"Not enough data for alarm\");\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        if (buf.readableBytes() < 3) throw new CorruptedFrameException(\"Not enough data for battery\");\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        if (buf.readableBytes() < 21) throw new CorruptedFrameException(\"Not enough data for location\");\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        if (buf.readableBytes() < 3) throw new CorruptedFrameException(\"Not enough data for cell header\");\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 5) throw new CorruptedFrameException(\"Not enough data for cell tower\");\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 7) throw new CorruptedFrameException(\"Not enough data for wifi ap\");\n                            int rssi = buf.readByte();\n                            if (buf.readableBytes() < 6) throw new CorruptedFrameException(\"Not enough data for wifi mac\");\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        // Assuming readTagId reads 6 bytes. Check readable bytes before calling.\n                        if (buf.readableBytes() < 6 + 4 + 4) throw new CorruptedFrameException(\"Not enough data for tag location\");\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        if (buf.readableBytes() < 8) throw new CorruptedFrameException(\"Not enough data for time/status\");\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        if (buf.readableBytes() < 1) throw new CorruptedFrameException(\"Not enough data for beacon flags\");\n                        int beaconFlags = buf.readUnsignedByte();\n                        // Assuming readTagId reads 6 bytes. Check readable bytes.\n                        if (buf.readableBytes() < 6 + 1 + 1) throw new CorruptedFrameException(\"Not enough data for beacon tag\");\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            if (buf.readableBytes() < 8) throw new CorruptedFrameException(\"Not enough data for beacon location\");\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            int descriptionLength = endIndex - buf.readerIndex();\n                            if (buf.readableBytes() < descriptionLength) throw new CorruptedFrameException(\"Not enough data for description\");\n                            position.set(\"description\", buf.readCharSequence(\n                                    descriptionLength, StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        if (buf.readableBytes() < 1 + 6 + 1 + 4 + 4) throw new CorruptedFrameException(\"Not enough data for wifi location\");\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6); // mac\n                        buf.readUnsignedByte(); // rssi\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        if (buf.readableBytes() < 8) throw new CorruptedFrameException(\"Not enough data for steps\");\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            if (buf.readableBytes() < 8) throw new CorruptedFrameException(\"Not enough data for activity\");\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        if (buf.readableBytes() < 8) throw new CorruptedFrameException(\"Not enough data for barking\");\n                        buf.readUnsignedIntLE(); // timestamp\n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        if (buf.readableBytes() < 5) throw new CorruptedFrameException(\"Not enough data for heart rate\");\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        // Skip unknown keys safely\n                        break;\n                }\n                // Ensure reader index does not go beyond the calculated end index for the current key\n                if (buf.readerIndex() > endIndex) {\n                     // This indicates a bug in the parsing logic for one of the keys\n                     throw new CorruptedFrameException(\"Reader index exceeded end index for key \" + key);\n                }\n                // Set reader index to endIndex to skip any unparsed data within the key-value pair\n                buf.readerIndex(endIndex);\n            }\n\n            if (!hasLocation && !positions.isEmpty()) {\n                // Try to get last location only if we have at least one position\n                // but the *last* one didn't contain location data.\n                 getLastLocation(position, null);\n            } else if (!hasLocation && positions.isEmpty()) {\n                 // This is the first and only position, and it has no location.\n                 getLastLocation(position, null);\n            }\n\n            // Add the last processed position\n            positions.add(position);\n\n            // Associate deviceId with all collected positions if a session was found\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    if (p.getDeviceId() == 0) { // Avoid overwriting if already set elsewhere\n                       p.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    if (p.getFixTime() == null) { // If time wasn't set by key 0x24, set it now\n                       p.setTime(new Date());\n                    }\n                }\n            } else {\n                // If no device session (key 0x01 missing or failed lookup),\n                // we cannot associate these positions with a device. Return null.\n                return null;\n            }\n\n            // Return the list, even if empty (e.g., only header data received)\n            return positions;\n\n        }\n\n        return null; // Return null for message types other than MSG_DATA or MSG_SERVICES\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}