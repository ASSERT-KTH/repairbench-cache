{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.readUnsignedByte(); // header\n    int flags = buf.readUnsignedByte();\n    buf.readUnsignedShortLE(); // length\n    buf.readUnsignedShortLE(); // checksum\n    int index = buf.readUnsignedShortLE();\n    int type = buf.readUnsignedByte();\n\n    if (BitUtil.check(flags, 4)) {\n        sendResponse(channel, remoteAddress, index, type, buf.slice());\n    }\n\n    if (type == MSG_DATA || type == MSG_SERVICES) {\n\n        List<Position> positions = new LinkedList<>();\n        Set<Integer> keys = new HashSet<>();\n        boolean hasLocation = false;\n        Position position = new Position(getProtocolName());\n\n        DeviceSession deviceSession = null;\n\n        while (buf.isReadable()) {\n            // Correctly calculate endIndex after reading length and key:\n            int length = buf.readUnsignedByte();\n            int key = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n\n            if (keys.contains(key)) {\n                if (!hasLocation) {\n                    getLastLocation(position, null);\n                }\n                positions.add(position);\n                keys.clear();\n                hasLocation = false;\n                position = new Position(getProtocolName());\n            }\n            keys.add(key);\n\n            switch (key) {\n                case 0x01:\n                    deviceSession = getDeviceSession(\n                            channel, remoteAddress, \n                            buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                    if (deviceSession == null) {\n                        return null;\n                    }\n                    break;\n                case 0x02:\n                    long alarm = buf.readUnsignedIntLE();\n                    position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                    if (BitUtil.check(alarm, 31)) {\n                        position.set(\"bark\", true);\n                    }\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                    break;\n                case 0x20:\n                    hasLocation = true;\n                    position.setLatitude(buf.readIntLE() * 0.0000001);\n                    position.setLongitude(buf.readIntLE() * 0.0000001);\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    position.setCourse(buf.readUnsignedShortLE());\n                    position.setAltitude(buf.readShortLE());\n                    int hdop = buf.readUnsignedShortLE();\n                    position.setValid(hdop > 0);\n                    position.set(Position.KEY_HDOP, hdop * 0.1);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x21:\n                    if (position.getNetwork() == null) {\n                        position.setNetwork(new Network());\n                    }\n                    while (buf.readerIndex() < endIndex) {\n                        int rssi = buf.readByte();\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        position.getNetwork().addCellTower(\n                                CellTower.from(mcc, mnc, buf.readUnsignedShortLE(), rssi));\n                    }\n                    break;\n                case 0x22:\n                    if (position.getNetwork() == null) {\n                        position.setNetwork(new Network());\n                    }\n                    while (buf.readerIndex() < endIndex) {\n                        int rssi = buf.readByte();\n                        int bssidNibble = buf.readUnsignedByte(); // 1 byte is for BSSID preceding MAC\uff09\n                    }\n                    break;\n                case 0x22 (continued ...):\n                    // Correct MAC processing after skipping the BSSID nibble. But since it's out of readable for the current case (as `endIndex` is computed correctly),\uc2e4\u9645 the inner loop will properly handle the MAC data:\n                    while (buf.readerIndex() < endIndex) {\n                        int rssi = buf.readByte();\n                        String mac = ByteBufUtil.hexDump(buf.readSlice(6))\n                                .replaceAll(\"(..)\", \"$1:\")\n                                .substring(0, 11);\n                        position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(mac, rssi));\n                    }\n                    break;\n                case 0x23:\n                    position.set(\"tagId\", readTagId(buf));\n                    position.setLatitude(buf.readIntLE() * 0.0000001);\n                    position.setLongitude(buf.readIntLE() * 0.0000001);\n                    position.setValid(true);\n                    hasLocation = true;\n                    break;\n                case 0x24:\n                    position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                    ... \n                    break;\n                default:\n                    break;\n            }\n            // Ensure reader jumps to end of current key block\n            buf.readerIndex(endIndex);\n        }\n\n        // Add final position after processing all key blocks\n        if (!hasLocation) {\n            getLastLocation(position, null);\n        }\n        positions.add(position);\n\n        if (deviceSession != null && !positions.isEmpty()) {\n            for (Position p : positions) {\n                p.setDeviceId(deviceSession.getDeviceId());\n            }\n            return positions;\n        } else {\n            return null;\n        }\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}