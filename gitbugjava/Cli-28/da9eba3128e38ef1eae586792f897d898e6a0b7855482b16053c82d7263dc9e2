{
    "generation": "    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    protected void processProperties(Properties properties)\n    {\n        if (properties == null)\n        {\n            return;\n        }\n\n        // Use generics for Enumeration\n        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n\n            // only process options that have not already been processed\n            if (!cmd.hasOption(option))\n            {\n                Option opt = getOptions().getOption(option);\n\n                // unknown option property-> ignore\n                if (opt == null)\n                {\n                    continue;\n                }\n\n                // get the value from the properties instance\n                String value = properties.getProperty(option);\n\n                if (opt.hasArg()) // Option expects an argument\n                {\n                    // If the option already has a value, do not override it\n                    if (opt.getValues() == null || opt.getValues().length == 0)\n                    {\n                        try\n                        {\n                            // process value like it would be on the command line\n                            opt.addValueForProcessing(value);\n                        }\n                        catch (RuntimeException exp)\n                        {\n                            // if we cannot add the value don't worry about it\n                            // an OptionValidator could be used to deal with this\n                        }\n                    }\n                    // Add the option to the command line\n                    cmd.addOption(opt);\n                }\n                // Flag option (--flag) vs (-f value)\n                // If the value is specified for a flag option, check if it indicates true\n                else // Option is a flag (no argument expected)\n                {\n                    if (!(\"yes\".equalsIgnoreCase(value)\n                            || \"true\".equalsIgnoreCase(value)\n                            || \"1\".equalsIgnoreCase(value)))\n                    {\n                        // The value is not a \"true\" value, so ignore the option\n                        // Previously, this had a 'break' which incorrectly stopped all property processing.\n                        // Now we 'continue' to the next property.\n                        continue;\n                    }\n                    // The value is a \"true\" value, so add the option.\n                    cmd.addOption(opt);\n                }\n\n                // We need to add the option to the command line, but this was\n                // moved inside the if/else blocks above to handle flags correctly.\n                // cmd.addOption(opt); <-- Removed from here\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}