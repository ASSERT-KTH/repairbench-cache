{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild(); // LHS node\n      // Check if LHS is a property assignment like obj.prop = ... or obj['prop'] = ...\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {\n          // Check if LHS is a property access using dot notation (GETPROP)\n          // or bracket notation (GETELEM)\n          if (n.isGetProp() || n.isGetElem()) {\n              // Get the object part (e.g., \"someConstructor.prototype\" in\n              // \"someConstructor.prototype.property = ...\" or\n              // \"someConstructor.prototype['property'] = ...\")\n              Node objectNode = n.getFirstChild();\n\n              // Check if the object part itself is a property access\n              // using dot notation (e.g., \"someConstructor.prototype\")\n              if (objectNode.isGetProp()) {\n                  // Get the name of the property being accessed on the base object.\n                  // For GETPROP, the second child is the property name string.\n                  Node propertyNameNode = objectNode.getSecondChild();\n\n                  // Check if the property name is the string \"prototype\"\n                  if (propertyNameNode.isString() &&\n                      propertyNameNode.getString().equals(\"prototype\")) {\n                      // This identifies assignments like:\n                      // someConstructor.prototype.someProperty = ...\n                      // someConstructor.prototype['someProperty'] = ...\n                      return true;\n                  }\n              }\n          }\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}