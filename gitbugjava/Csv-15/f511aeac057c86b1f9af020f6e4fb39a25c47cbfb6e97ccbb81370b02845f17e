{
    "generation": "    // the original object is needed so can check for Number\n    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        final char delimChar = getDelimiter();\n        // Use getQuoteCharacter() if it's not null, otherwise don't quote\n        final Character quoteCharObject = getQuoteCharacter();\n        final char quoteChar = quoteCharObject != null ? quoteCharObject.charValue() : Constants.NULL_CHAR; // Or handle null differently? Assume it's set.\n\n        QuoteMode quoteModePolicy = getQuoteMode();\n        if (quoteModePolicy == null) {\n            quoteModePolicy = QuoteMode.MINIMAL;\n        }\n        switch (quoteModePolicy) {\n        case ALL:\n        case ALL_NON_NULL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            // Check for null object, as specified in QuoteMode.NON_NUMERIC definition\n            quote = object == null || !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // simplified check for potentially problematic first characters\n                // FIXED: Removed the check for c > 0x7E which caused issues with characters like Euro (\u20ac)\n                // The conditions c > 0x21 && c < 0x23 check for quote char (\") and c > 0x2B && c < 0x2D check for delimiter (, assuming defaults)\n                // These are also checked below in the loop. The primary useful check here is c < 0x20 (control chars).\n                // The original check `c <= COMMENT` might also be needed if comments are enabled and need quoting.\n                // Let's keep the structure but remove the > 0x7E part.\n                if (newRecord && (c < Constants.SP || c > Constants.EXCLAMATION_MARK && c < Constants.HASH || c > Constants.PLUS && c < Constants.MINUS)) {\n                     quote = true;\n                 } else if (c <= Constants.COMMENT) {\n                     // Some other chars at the start of a value caused the parser to fail, so for now\n                     // encapsulate if we start in anything less than '#'. We are being conservative\n                     // by including the default comment char too.\n                     // This check should ideally be more specific, e.g., only if comment char is enabled and c == commentMarker\n                     // but we keep original logic for now, minus the > 0x7E bug.\n                     quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == Constants.LF || c == Constants.CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= Constants.SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break; // End of MINIMAL case\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }\n\n        // If quote is not required based on policy, append original value and return\n        // (This check seems redundant given the returns inside MINIMAL and NONE, but harmless)\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n\n        // Handle quoting if required\n        if (quoteCharObject == null) {\n            // Should not happen if quote is true, unless QuoteMode is NONE (already handled)\n            // Or if QuoteMode is ALL/ALL_NON_NULL/NON_NUMERIC but no quote char is defined.\n            // In this case, throw exception or just print value without quotes?\n            // Let's assume quoteChar is always valid if quote is true based on policy.\n            // If not, the original code would fail with NullPointerException on quoteCharObject.charValue().\n            // Added null check earlier for quoteChar init. If quoteChar is NULL_CHAR, maybe throw?\n            // For now, proceed assuming quoteChar is valid if quote=true.\n             out.append(value, start, end); // Fallback: print without quotes if quote char is somehow null\n             return;\n        }\n\n\n        // We hit something that needed encapsulation\n        out.append(quoteChar);\n\n        // Reset position for scanning the value to escape quotes\n        pos = offset; // Start scanning from the beginning of the value segment\n\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            if (c == quoteChar) {\n                // write out the chunk up until this point (including the quote)\n                out.append(value, start, pos + 1);\n                // Set start to current position so the quote char is written again\n                start = pos;\n            }\n            // else { } // No action needed, just advance position\n            pos++;\n        }\n\n        // write the last segment\n        out.append(value, start, pos); // pos is equal to 'end' here\n        out.append(quoteChar);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}