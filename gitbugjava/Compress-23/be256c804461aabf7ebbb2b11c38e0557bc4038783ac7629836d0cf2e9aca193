{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            if (coder.properties == null) {\n                 throw new IOException(\"Missing LZMA properties\");\n            }\n            // LZMA properties are 1 byte for props, 4 bytes for dict size\n            if (coder.properties.length < 5) {\n                 throw new IOException(\"LZMA properties too short, need at least 5 bytes, got \" + coder.properties.length);\n            }\n\n            byte propsByte = coder.properties[0];\n\n            // Dictionary size is a 32-bit unsigned integer in little-endian format\n            // stored in coder.properties[1] to coder.properties[4].\n            // We need to read it carefully to avoid sign extension issues and store it in a long.\n            long dictSize = coder.properties[1] & 0xFF;\n            dictSize |= (coder.properties[2] & 0xFFL) << 8;  // Use 0xFFL to ensure promotion to long before shift\n            dictSize |= (coder.properties[3] & 0xFFL) << 16;\n            dictSize |= (coder.properties[4] & 0xFFL) << 24;\n\n            // The org.tukaani.xz.LZMAInputStream constructor used takes dictionary size as an int.\n            // Therefore, the maximum dictionary size supported by this specific constructor path\n            // is Integer.MAX_VALUE (2GiB - 1). The 7z format itself allows up to 4GiB - 1.\n            // If the dictionary size exceeds Integer.MAX_VALUE, we cannot proceed with this constructor.\n            if (dictSize > Integer.MAX_VALUE) {\n                // Throw an informative exception indicating the limitation.\n                // This explains why the test might fail with \"UnsupportedOptionsException\" for large dictionaries.\n                throw new IOException(\"Dictionary size \" + dictSize + \" bytes exceeds implementation limit of \" + Integer.MAX_VALUE + \" bytes\");\n            }\n\n            // The constructor requires dictSize as int. Since we checked dictSize <= Integer.MAX_VALUE,\n            // the cast (int)dictSize is safe and preserves the value.\n            // The uncompressed size is set to -1 (unknown), as is often the case for raw LZMA streams.\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}