{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // Dictionary size is a 32-bit unsigned integer, little-endian\n            // See https://www.7-zip.org/_LZMA.txt (section \"LZMA Properties\")\n            long dictSize = 0;\n            for (int i = 0; i < 4; i++) {\n                // coder.properties[1] is the LSB, coder.properties[4] is the MSB\n                // Need to treat bytes as unsigned when converting to long\n                dictSize |= ((long)(coder.properties[i + 1] & 0xFF)) << (8 * i);\n            }\n\n            // LZMAInputStream constructor takes dictionary size as an int.\n            // LZMAInputStream.DICT_SIZE_MAX is defined as (1 << 30) * 4L - 1, i.e. 4GiB - 1.\n            // This check ensures we don't exceed the 7z specification's theoretical limit.\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n\n            // Additionally, the LZMAInputStream constructor (from org.tukaani.xz) takes an int.\n            // Check if the dictionary size exceeds the maximum value for a Java int.\n            // Casting a value > Integer.MAX_VALUE to int results in a negative or wrapped-around value,\n            // which will likely cause an error in the underlying library.\n            if (dictSize > Integer.MAX_VALUE) {\n                 // Throw an exception here to prevent passing an invalid size to the constructor.\n                 // The underlying library (xz-java) might have its own, possibly lower, limit\n                 // (like ~1.5 GiB), but Integer.MAX_VALUE is the limit imposed by the method signature.\n                 throw new IOException(\"Dictionary size \" + dictSize + \" exceeds maximum int value\");\n            }\n\n            // Pass the dictionary size as an int, now that we've validated it fits.\n            // The uncompressed size is set to -1 (unknown).\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}