{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // Dictionary size is a 32-bit unsigned integer, stored in bytes 1-4 (little endian)\n            // Need to treat bytes as unsigned using & 0xFF and use long for calculation\n            // to avoid sign extension and overflow issues during intermediate steps.\n            long dictSize = coder.properties[1] & 0xFFL; // LSB\n            for (int i = 1; i < 4; i++) {\n                // Combine the next bytes, masking with 0xFFL before shifting to treat as unsigned\n                dictSize |= ((coder.properties[i + 1] & 0xFFL) << (8 * i));\n            }\n\n            // The check below uses LZMAInputStream.DICT_SIZE_MAX, which is assumed to be defined\n            // in the scope of this class (likely org.apache.commons.compress.archivers.sevenz.LZMAInputStream).\n            // This check should validate against the theoretical limit or the practical limit imposed\n            // by the underlying library or the int cast below.\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than maximum size \" + LZMAInputStream.DICT_SIZE_MAX);\n            }\n\n            // The org.tukaani.xz.LZMAInputStream constructor expects the dictionary size as an int.\n            // If dictSize > Integer.MAX_VALUE, casting to int results in a negative value,\n            // which the constructor will likely reject. The check above should ideally prevent this\n            // if LZMAInputStream.DICT_SIZE_MAX is appropriately defined (e.g., <= Integer.MAX_VALUE).\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}