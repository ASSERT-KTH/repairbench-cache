{
    "generation": "    @Override\n    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        KeyDeserializer deser = null;\n        // First: call factory method\n        if (_factoryConfig.hasKeyDeserializers()) {\n            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                deser = d.findKeyDeserializer(type, config, beanDesc);\n                if (deser != null) {\n                    break;\n                }\n            }\n        }\n\n        // If not found, only then check for standard creators\n        if (deser == null) {\n            // Need to consider @JsonCreator for key deserializers too..\n            // ... need to figure out details, but for now just consider Enums\n            if (type.isEnumType()) {\n                // This is the change: don't return, assign to 'deser'\n                // so that modification processing below will run\n                deser = _createEnumKeyDeserializer(ctxt, type);\n            } else {\n                // Then check for standard string-based types:\n                deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n            }\n        }\n        // And finally, provide modifiers chance to override / modify\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyKeyDeserializer(config, type, deser);\n                }\n            }\n        }\n        return deser;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}