{
    "generation": "    @Override\n    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        KeyDeserializer deser = null;\n        // First, check Concrete Deserializers\n        if (_factoryConfig.hasKeyDeserializers()) {\n            // We'll assume `keyDeserializers` are immutable. And if not, perhaps we\n            // should make a copy? For now, just iterate.\n            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                deser = d.findKeyDeserializer(type, config, beanDesc);\n                if (deser != null) {\n                    break;\n                }\n            }\n        }\n\n        // If not found, only possibilities are standard Enum and String-based ones\n        if (deser == null) {\n            if (type.isEnumType()) {\n                // This is the fix: assign to 'deser' instead of returning directly,\n                // so that modifiers can be applied later.\n                deser = _createEnumKeyDeserializer(ctxt, type);\n            } else {\n                deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n            }\n        }\n        // and then post-processing\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyKeyDeserializer(config, type, deser);\n                }\n            }\n        }\n        return deser;\n    }\n",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}