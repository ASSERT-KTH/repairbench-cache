{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        // Note: Global vars are recorded in the CALCULATE_GLOBALS pass.\n        // Handle functions + objlit keys.\n        if (NodeUtil.isFunctionDeclaration(n)) {\n          // Function declarations are handled via assigns -> recordSet.\n          // FUNCTION nodes are handled by the Call callback below.\n          // TODO(nicksantos): Fix this. This is dead code.\n          Node nameNode = n.getFirstChild();\n          // A function declaration in the global scope is assigned to a name.\n          // If we're computing smart name removal, we need to map this name\n          // back to the function node.\n          if (!nameNode.getString().isEmpty()) {\n            NameInformation ns = createNameInformation(t, nameNode, n);\n            if (ns != null) {\n              recordSet(ns.name, nameNode);\n            }\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        // Record references to functions only if we can resolve the name.\n        if (ns != null) {\n          if (ns.onlyAffectsClassDef) {\n            JsName name = getName(ns.name, false);\n            if (name != null) {\n              refNodes.add(new ClassDefiningFunctionNode(\n                  name, n, parent, parent.getParent()));\n            }\n          } else {\n            // Record function calls for naming purposes.\n            // Functions that are exported or potentially exported should be named.\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isNew()) {\n        // Handle constructor calls similar to regular calls.\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          recordSet(ns.name, nameNode);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}