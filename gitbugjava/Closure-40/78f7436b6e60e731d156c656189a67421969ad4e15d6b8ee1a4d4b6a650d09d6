{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            // Use ns.name which is the canonical name.\n            JsName nameInfo = getName(ns.name, true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild(); // LHS\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode); // Record set for LHS\n          }\n          // References in RHS are handled by traversal visiting RHS nodes\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild(); // Function being called\n        NameInformation ns = createNameInformation(t, nameNode, n);\n\n        if (ns != null) {\n          // Mark the called function name as referenced.\n          getName(ns.name, false);\n\n          if (ns.onlyAffectsClassDef) {\n            // Special handling for calls like goog.inherits, etc.\n\n            // Record the call itself for dependency analysis.\n            JsName name = getName(ns.name, false); // Re-retrieve the JsName\n            if (name != null) {\n              refNodes.add(new ClassDefiningFunctionNode(\n                  name, n, parent, parent.getParent()));\n            }\n\n            // Handle arguments for class-defining calls (like goog.inherits)\n            // First argument is the subclass name (definition)\n            Node subclassNode = nameNode.getNext();\n            if (subclassNode != null) {\n              NameInformation subNs = createNameInformation(t, subclassNode, n);\n              if (subNs != null) {\n                recordSet(subNs.name, subclassNode); // Treat subclass as defined\n              }\n\n              // Second argument is the superclass name (reference)\n              Node superclassNode = subclassNode.getNext();\n              if (superclassNode != null) {\n                NameInformation superNs = createNameInformation(t, superclassNode, n);\n                if (superNs != null) {\n                  // Mark superclass as referenced. Calling getName should be sufficient\n                  // to ensure it's not removed if otherwise unused.\n                  getName(superNs.name, false);\n                }\n              }\n            }\n          }\n          // For non-class-defining calls, references in arguments\n          // are handled by standard traversal visiting argument nodes.\n        }\n        // If ns is null, createNameInformation failed (e.g., complex call target).\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}