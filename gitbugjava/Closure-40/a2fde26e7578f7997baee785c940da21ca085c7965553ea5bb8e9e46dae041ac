{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          // Function statement names are NAME nodes, so they cannot be\n          // references to potentially undefined names.\n          Preconditions.checkNotNull(ns);\n          JsName nameInfo = getName(nameNode.getString(), true);\n          recordSet(nameInfo.name, nameNode);\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n); // Info about the function being called\n\n        // Original logic for calls affecting class definition\n        // (e.g. goog.addSingletonGetter)\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n          }\n        }\n\n        // START OF FIX: Special handling for goog.inherits arguments\n        // Need to make sure the names exists, and are related.\n        if (NodeUtil.isGoogInheritsCall(n)) {\n          Node childArg = nameNode.getNext();\n          Node parentArg = (childArg == null) ? null : childArg.getNext();\n\n          // Record the 'definition' implied by the child argument\n          if (childArg != null) {\n            NameInformation childNs = createNameInformation(t, childArg, n);\n            if (childNs != null) {\n              // Treat the child class as being 'set' or defined by this call\n              recordSet(childNs.name, childArg);\n            }\n          }\n          // Record the 'reference' to the parent argument\n          if (parentArg != null) {\n             NameInformation parentNs = createNameInformation(t, parentArg, n);\n             if (parentNs != null) {\n               // Ensure the parent name exists and is marked as referenced\n               getName(parentNs.name, true);\n             }\n          }\n        }\n        // END OF FIX\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}