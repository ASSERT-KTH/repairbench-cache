{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a\n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        if (str == null) {\n            return null;\n        }\n        try\n        {\n            // If str contains a '.', create a Double\n            if (str.indexOf('.') != -1)\n            {\n                // Handle potential 'f'/'F' suffix for floats if needed,\n                // but Double.valueOf should handle standard double formats.\n                // The Javadoc specifically mentions Double, so we create a Double.\n                return Double.valueOf(str);\n            }\n            // Otherwise, create a Long\n            else\n            {\n                // Long.valueOf handles standard long formats.\n                // It might throw NumberFormatException for non-integer strings,\n                // hex/octal depending on the implementation, which is caught below.\n                return Long.valueOf(str);\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            // The original code printed the error, but the Javadoc contract\n            // is just to return null if the string is not a number.\n            // System.err.println(nfe.getMessage()); // Removed error printing\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}