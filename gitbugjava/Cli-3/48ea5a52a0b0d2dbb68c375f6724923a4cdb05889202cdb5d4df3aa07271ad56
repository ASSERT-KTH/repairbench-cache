{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        if (str == null) {\n             return null;\n        }\n        try\n        {\n            // Delegate parsing to commons-lang NumberUtils\n            Number number = org.apache.commons.lang.math.NumberUtils.createNumber(str);\n\n            // commons-lang NumberUtils can return Float, Double, Long, BigInteger, BigDecimal.\n            // Test case implies that floating point numbers like \"4.5\" should be Double.\n            // NumberUtils may return Float for smaller precision floating point numbers.\n            // Convert Float to Double to ensure consistency with Double expectation.\n            if (number instanceof Float)\n            {\n                // Use doubleValue() to get the value and create a new Double\n                return Double.valueOf(number.doubleValue());\n            }\n            \n            // Return other Number types (Long, Double, BigInteger, BigDecimal) as is.\n            return number;\n        }\n        catch (NumberFormatException nfe)\n        {\n            // If NumberUtils fails to parse, return null as per the contract.\n            // The original code printed the error, which is removed here.\n            return null;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}