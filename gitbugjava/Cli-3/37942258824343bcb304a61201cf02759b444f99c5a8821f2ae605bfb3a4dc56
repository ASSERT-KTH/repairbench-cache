{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     * <p>Note: This method deviates from NumberUtils.createNumber which may return\n     * Integer, Float, BigInteger, or BigDecimal.</p> // Added note about deviation\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        if (str == null)\n        {\n            return null;\n        }\n        try\n        {\n            // Rule: Check for decimal point or exponent marker.\n            // If present, create a Double. Handles cases like \"4.5\", \"1.0\", \"1e6\".\n            // Double.valueOf handles \"d\" or \"D\" suffix, but throws NFE for \"f\" or \"F\".\n            // This aligns with the expectation of creating a Double, not a Float.\n            if (str.indexOf('.') != -1 || str.indexOf('e') != -1 || str.indexOf('E') != -1)\n            {\n                // Consider it a Double\n                return Double.valueOf(str);\n            }\n            else\n            {\n                // No decimal point or exponent, treat as Long.\n                // Long.valueOf handles optional sign and \"L\" or \"l\" suffix.\n                // It does *not* handle hex (\"0x\") or octal (\"0\") prefixes like NumberUtils.\n                return Long.valueOf(str);\n            }\n        }\n        catch (NumberFormatException e)\n        {\n            // The original code printed the error to System.err,\n            // but the Javadoc contract is to return null if str is not a number.\n            // Return null on any parsing failure.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}