{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Fix: Add space if x is strictly negative OR negative zero, and the previous\n    // character was '-'. The original condition `x < 0` did not handle negative zero.\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    // Handle integers and check for negative zero, which should be printed as -0.0\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // Try to use scientific notation for large integers (e.g., 1E3 instead of 1000)\n      // This optimization check seems to target numbers >= 100.\n      // The loop condition checks if the number can be represented as mantissa/10 * 10^(exp+1)\n      if (Math.abs(value) >= 100) { // Use value (long) instead of x (double) for check\n        // Check if mantissa is divisible by 10 and the representation holds\n        while (mantissa != 0 && mantissa % 10 == 0) {\n           long tempMantissa = mantissa / 10;\n           int tempExp = exp + 1;\n           // Use double for the check to mimic the original behavior, comparing\n           // the potential simplified form back to the original value.\n           // Note: This can have precision issues for very large longs.\n           if (tempMantissa * Math.pow(10, tempExp) != value) {\n             break; // Stop if simplification changes the value\n           }\n           // Update if the simplification is valid\n           mantissa = tempMantissa;\n           exp = tempExp;\n        }\n      }\n\n      // Use scientific notation only if the exponent is greater than 2 (e.g., 1E3, not 1E2)\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      // Handles non-integer doubles and negative zero\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}