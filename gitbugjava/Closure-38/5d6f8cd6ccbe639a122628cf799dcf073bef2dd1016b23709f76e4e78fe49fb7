{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space before negatives, including negative zero, if the previous\n    // character was a minus sign.\n    if ((x < 0 || negativeZero) && prev == '-') { // Fix: Include negativeZero in the check\n      add(\" \");\n    }\n\n    // Check if the number can be represented as a long (integer) and is not negative zero.\n    // We special case negative zero because we want it printed as -0.0, not 0.\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // For large integers, try to use scientific E notation like 1E3 for 1000.\n      // Check magnitude using the original double value `x` to avoid potential issues\n      // with Math.abs(Long.MIN_VALUE).\n      if (Math.abs(x) >= 100) {\n        // This loop finds the exponent for E notation. It checks if stripping a zero\n        // from the mantissa and adjusting the exponent preserves the original value.\n        // This check `mantissa / 10 * Math.pow(10, exp + 1) == value` is used\n        // to ensure correctness even with potential floating point inaccuracies\n        // or large long values.\n        while (mantissa != 0 && mantissa % 10 == 0 && // Optimization: Check divisibility by 10 first\n               mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      // Use E notation only if the exponent is significant (greater than 2).\n      // e.g., 1000 becomes 1E3, but 100 remains 100.\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        // Otherwise, print the integer value directly.\n        add(Long.toString(value));\n      }\n    } else {\n      // For doubles, non-integer numbers, or negative zero, use String.valueOf.\n      // This handles printing -0.0 correctly.\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}