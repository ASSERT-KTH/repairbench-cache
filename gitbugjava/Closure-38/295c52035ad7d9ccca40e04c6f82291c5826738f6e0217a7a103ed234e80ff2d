{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space before negative numbers (including -0.0) if the previous\n    // character is '-'. This prevents x--4 which is syntactically invalid.\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    // Use long representation if it doesn't lose precision (and not for -0.0).\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // Check if we should use scientific notation (for numbers >= 100 or <= -100).\n      // This check also avoids potential issues with Math.abs(Long.MIN_VALUE).\n      if (Math.abs(value) >= 100) {\n        // Use a loop that avoids floating point math if possible.\n        // Check for trailing zeros.\n        while (mantissa % 10 == 0 && mantissa != 0) {\n             // Check if dividing by 10 would preserve the representation.\n             // This condition prevents issues with large longs where division\n             // might be lossy or lead to unexpected results with Math.pow.\n             // We essentially check if mantissa is a multiple of 10^(exp+1).\n             // Using long multiplication avoids potential floating point inaccuracies.\n             long powerOf10 = 1L;\n             for (int i = 0; i < exp + 1; i++) {\n                // Avoid overflow if possible, though unlikely for reasonable exponents.\n                if (Long.MAX_VALUE / 10 < powerOf10) {\n                    powerOf10 = Long.MAX_VALUE; // Indicate potential overflow stop\n                    break;\n                }\n                powerOf10 *= 10;\n             }\n\n             // If powerOf10 calculation overflowed or doesn't divide value cleanly\n             // or mantissa / 10 * powerOf10 isn't the original value, stop.\n             if (powerOf10 == Long.MAX_VALUE || value % powerOf10 != 0 || (mantissa / 10) * powerOf10 != value) {\n                 break;\n             }\n             // It's safe to divide mantissa by 10 and increment exponent.\n             mantissa /= 10;\n             exp++;\n        }\n      }\n      // Use scientific notation if exponent is sufficiently large.\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        // Otherwise, print the long value directly.\n        add(Long.toString(value));\n      }\n    } else {\n      // Otherwise, print the double value using String.valueOf,\n      // which handles -0.0 correctly as \"-0.0\".\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}