{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space before minus signs that follow another minus sign, creating\n    // \"--\". This is necessary because \"--\" is interpreted as the decrement\n    // operator in JavaScript. This also handles the case of \"- -0.0\".\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    // Try printing the number as an integer if possible.\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // Check if printing in scientific notation is shorter.\n      // We only bother with positive exponents, negative exponents don't make\n      // sense for integer values. Also, Math.abs(x) >= 100 implies that\n      // value != 0, thus we don't need to worry about division by zero.\n      // We make sure that the value can be represented accurately in scientific\n      // notation before using it. Otherwise, we may print 1.23E4 for 12300,\n      // which is technically correct, but may be misleading.\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      // Print in scientific notation if it saves space.\n      // In particular, \"1E3\" is shorter than \"1000\".\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      // Otherwise, print it as a regular double.\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}