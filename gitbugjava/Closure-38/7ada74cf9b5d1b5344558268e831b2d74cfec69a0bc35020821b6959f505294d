{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Fix: Add space if prev is '-' and x is negative OR negative zero.\n    // The original condition (x < 0) is false for -0.0.\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    // Handle numbers that can be represented as longs (integers), but exclude negative zero.\n    // Negative zero must be printed as -0.0, not 0.\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // Try to use scientific notation for large integers (e.g., 1000 -> 1E3).\n      // This avoids printing large strings like \"1000000000000000000\".\n      // The threshold (>= 100) and exponent check (exp > 2) are somewhat arbitrary\n      // and aim for shorter output in some cases.\n      if (Math.abs(value) >= 100) { // Check magnitude using the long value\n        // This loop attempts to find the shortest scientific notation (mantissa * 10^exp).\n        // It checks if removing a trailing zero from the mantissa and increasing\n        // the exponent preserves the original value.\n        // Potential precision issues with Math.pow for very large longs exist.\n        while (mantissa != 0 && mantissa % 10 == 0) {\n            long nextMantissa = mantissa / 10;\n            int nextExp = exp + 1;\n            // Check if value == nextMantissa * 10^nextExp without using floating point potentially.\n            // A direct check or BigInteger might be safer for extremely large numbers.\n            // Using Math.pow here for consistency with the original code.\n            if (nextMantissa * Math.pow(10, nextExp) == value) {\n                mantissa = nextMantissa;\n                exp = nextExp;\n            } else {\n                // Stop if removing the zero changes the value (e.g., 12300 -> 1230 -> 123).\n                break;\n            }\n        }\n      }\n      // Use scientific notation only if the exponent is significantly large (e.g., > 2).\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        // Otherwise, print the standard integer representation.\n        add(Long.toString(value));\n      }\n    } else {\n      // Handle non-integer doubles and negative zero using the standard String.valueOf conversion.\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}