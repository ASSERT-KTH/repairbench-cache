{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space after '-' if the number is negative or negative zero.\n    // This prevents \"--\" which is confusing or a syntax error.\n    // The original check (x < 0) failed for -0.0.\n    if (prev == '-' && (x < 0 || negativeZero)) {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // Avoid scientific notation for integers < 1000 to save space.\n      // TODO(johnlenz): This is overly conservative. Revisit.\n      // We could also print \"1E3\" but that requires more sophisticated analysis.\n      if (Math.abs(value) >= 1000) {\n        // Check for potential scientific notation representation.\n        // This is prone to floating point errors. A better approach might involve\n        // string manipulation or careful integer math.\n        while (mantissa % 10 == 0 && mantissa != 0) {\n            // Verify if the representation is precise enough.\n            // Using Math.pow might introduce inaccuracies for large numbers.\n            // Let's stick to simpler integer logic for this loop condition check.\n            // If value = 1000, mantissa = 1000, exp = 0.\n            // 1st iter: m=100, exp=1. Is 100 * 10^1 == 1000? Yes.\n            // 2nd iter: m=10, exp=2. Is 10 * 10^2 == 1000? Yes.\n            // 3rd iter: m=1, exp=3. Is 1 * 10^3 == 1000? Yes.\n            // Next: mantissa = 1, which doesn't end in 0. Loop stops. exp=3.\n           if (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n              mantissa /= 10;\n              exp++;\n           } else {\n               // If precision issues occur, break the loop.\n               break;\n           }\n        }\n      }\n\n      // Use scientific notation only if it's shorter than the long representation.\n      // The threshold exp > 2 means numbers like 1E3, 2E4, etc.\n      // Length of \"1E3\" is 3, length of \"1000\" is 4.\n      // Length of mantissa + \"E\" + length of exp vs length of value\n      String longStr = Long.toString(value);\n      String sciStr = Long.toString(mantissa) + \"E\" + Integer.toString(exp);\n      if (exp > 2 && sciStr.length() < longStr.length()) {\n          add(sciStr);\n      } else {\n        add(longStr);\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}