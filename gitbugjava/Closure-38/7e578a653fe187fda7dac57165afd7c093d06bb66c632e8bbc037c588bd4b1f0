{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space before negative numbers or negative zero if the previous\n    // character was a minus sign.\n    if (prev == '-' && (x < 0 || negativeZero)) {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // Use scientific notation for large integers. CodePrinter relies on this\n      // behavior for VALIDATION_MAP. See CodePrinter#CodePrinterParser.\n      // It is exposed publicly via titular transformation PassFactory#createCodePrinterFormatTransformer.\n      if (Math.abs(value) >= 100) {\n         // While Math.abs(value) >= Math.pow(10, exp + 1), we know there are still zeros to trim.\n         // We check using multiplication instead to avoid precision loss with Math.pow.\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}