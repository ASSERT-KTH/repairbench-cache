{
    "generation": "    @Override\n    protected Object encodeCommand(Command command) {\n\n        ByteBuf content = Unpooled.buffer();\n\n        switch (command.getType()) {\n            case Command.TYPE_POSITION_SINGLE:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);\n            case Command.TYPE_ENGINE_STOP:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);\n            case Command.TYPE_ENGINE_RESUME:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);\n            case Command.TYPE_SET_SPEED_LIMIT:\n                content.writeByte(command.getInteger(Command.KEY_DATA));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);\n            case Command.TYPE_SET_ODOMETER:\n                content.writeShort(command.getInteger(Command.KEY_DATA));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);\n            case Command.TYPE_POSITION_PERIODIC:\n                String[] data = command.getString(Command.KEY_FREQUENCY).split(\";\");\n                content.writeShort(Integer.valueOf(data[0])); // first value (interval in seconds)\n                content.writeShort(Integer.valueOf(data[1])); // second value (upload interval)\n                // The third value (upload time or timeout) should be a single byte.\n                // The original code used writeShort, causing an extra byte (0x00) to be prepended to 0x78.\n                content.writeByte(Integer.valueOf(data[2])); \n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);\n            default:\n                return null;\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}