{
    "generation": "@Override\nprotected Object encodeCommand(Command command) {\n\n    ByteBuf content = Unpooled.buffer();\n\n    switch (command.getType()) {\n        case Command.TYPE_POSITION_SINGLE:\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);\n        case Command.TYPE_ENGINE_STOP:\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);\n        case Command.TYPE_ENGINE_RESUME:\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);\n        case Command.TYPE_SET_SPEED_LIMIT:\n            content.writeByte(command.getInteger(Command.KEY_DATA));\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);\n        case Command.TYPE_SET_ODOMETER:\n            content.writeShort(command.getInteger(Command.KEY_DATA));\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);\n        case Command.TYPE_POSITION_PERIODIC:\n            // The protocol expects exactly two parameters:\n            // first: the retrieval interval,\n            // second: the duration value adjusted by subtracting 33.\n            // Here, the KEY_FREQUENCY string \"5;5;120\" holds three parts, but only parts[0] and parts[2] are used.\n            String[] data = command.getString(Command.KEY_FREQUENCY).split(\";\");\n            content.writeShort(Integer.parseInt(data[0]));\n            content.writeShort(Integer.parseInt(data[2]) - 33);\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);\n        default:\n            return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}