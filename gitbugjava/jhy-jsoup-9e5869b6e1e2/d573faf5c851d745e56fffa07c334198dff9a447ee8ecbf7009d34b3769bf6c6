{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n        // Check using static method Element.preserveWhitespace\n        final boolean parentPreservesWhitespace = parent != null && Element.preserveWhitespace(parent);\n        final boolean normaliseWhite = prettyPrint && !parentPreservesWhitespace;\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // Determine parent characteristics accurately\n            final boolean parentIsBlock = parent != null && parent.tag().isBlock();\n            // Check if parent requires block formatting (consistency with shouldIndent logic)\n            // boolean parentRequiresBlockChildren = parentIsBlock && parent.tag().formatAsBlock(); // Example - logic can be complex\n\n            // Calculate trimming flags based on context\n            trimLeading = (siblingIndex == 0 && parentIsBlock) || parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parentIsBlock;\n\n            // Logic for skipping blank nodes before an indenting element\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean nextWillIndent = false;\n            if (next instanceof Element) {\n                // This relies on Element.shouldIndent(), which might be the source of external issues.\n                nextWillIndent = ((Element) next).shouldIndent(out);\n            }\n            boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());\n\n            // If this node is blank and should be skipped, return early.\n            boolean shouldSkip = isBlank && (nextWillIndent || nextIsBlankText);\n            if (shouldSkip) return;\n\n            // Determine if this text node itself should be indented\n            Node prev = previousSibling();\n            boolean indentThis = false;\n            // Case 1: First non-blank child of a block parent\n            if (siblingIndex == 0 && parentIsBlock && !isBlank) {\n                indentThis = true;\n            }\n            // Case 2: After a <br> element\n            else if (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) {\n                // No need to re-check parentPreservesWhitespace as it's covered by normaliseWhite scope\n                indentThis = true;\n            }\n            // Case 3: Outline mode (less common, keep original logic)\n            if (out.outline() && siblingNodes().size() > 0 && !isBlank) {\n                 // Note: This condition can overlap with Case 1. Using || is safe.\n                 indentThis = true;\n            }\n\n            // Apply indentation if needed\n            if (indentThis) {\n                indent(accum, depth, out);\n            }\n        }\n\n        // Escape and write the text content, applying normalization and trimming as determined.\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}