{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        Node next = nextSibling();\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            parentNode instanceof Document;\n        // Avoid trimming trailing whitespace if next sibling is a block element (e.g., <p>) or a custom element\n        if (next == null) {\n            trimTrailing = parent != null && parent.tag().isBlock();\n        } else {\n            trimTrailing = false;\n        }\n\n        // if this text is just whitespace, and the next node will cause an indent, skip this text:\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n        if (couldSkip && isBlank) return;\n\n        Node prev = previousSibling();\n        if (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n        )\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}