{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock())\n            || parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        if (isBlank) {\n            // blank before any element: indent for the element and skip the whitespace node\n            if (next instanceof Element) {\n                indent(accum, depth, out);\n                return;\n            }\n            // consecutive blank text nodes: skip\n            if (next instanceof TextNode && ((TextNode) next).isBlank()) {\n                return;\n            }\n            // trailing blank at end: indent for closing tag and skip\n            if (next == null) {\n                indent(accum, depth - 1, out);\n                return;\n            }\n        }\n\n        Node prev = previousSibling();\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)\n            || (out.outline() && siblingNodes().size() > 0 && !isBlank)\n            || (siblingIndex > 0 && prev instanceof Element\n                && ((Element) prev).normalName().equals(\"br\")))\n        {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}