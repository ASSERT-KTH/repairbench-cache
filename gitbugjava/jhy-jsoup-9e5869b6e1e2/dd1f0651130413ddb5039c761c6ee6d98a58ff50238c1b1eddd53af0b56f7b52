{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean doNormaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        String text = coreValue();\n\n        if (doNormaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            boolean currentIsBlank = StringUtil.isBlank(text);\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            \n            if (currentIsBlank && couldSkip) {\n                return; // skip this text node\n            }\n\n            // If current text node is blank, not skipped, and contains a newline:\n            if (currentIsBlank && text.indexOf('\\n') != -1) {\n                // Output it as a single newline.\n                // Pass 'false' for 'normaliseWhite' to Entities.escape to prevent converting \"\\n\" to a space.\n                // Trimming flags (trimLeading, trimTrailing) will still apply to this \"\\n\".\n                Entities.escape(accum, \"\\n\", out, false, false, trimLeading, trimTrailing);\n                return;\n            }\n            // If current text node is blank, not skipped, but contains no newlines (e.g., \"   \"),\n            // it will fall through to the main Entities.escape call at the end.\n            // That call will use doNormaliseWhite=true, so \"   \" becomes \" \" (if not trimmed), which is correct.\n\n            // Indent non-blank text nodes in certain conditions:\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !currentIsBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !currentIsBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        // Default Entities.escape call for:\n        // 1. Non-blank text nodes.\n        // 2. Blank text nodes that are all spaces/tabs (no newlines), and were not skipped.\n        // 3. All text nodes if doNormaliseWhite is false (e.g. in a <pre> tag or prettyPrint=false).\n        Entities.escape(accum, text, out, false, doNormaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}