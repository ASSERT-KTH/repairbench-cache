{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // Determines if normalization applies\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // Calculate trimming based on standard block rules BEFORE potential override\n            final Node next = nextSibling();\n            final boolean isBlank = isBlank();\n\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = (next == null && parent != null && parent.tag().isBlock());\n\n            // Skip completely if blank and followed by indenting element or another blank node\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))\n                || (next instanceof TextNode && (((TextNode) next).isBlank()));\n            if (couldSkip && isBlank) return;\n\n            // Indent before this text node if required by context (e.g., after <br>)\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            )\n                indent(accum, depth, out);\n\n            // Special case: If this node is blank, and it's the last child of a non-block parent during pretty printing,\n            // prevent normalization to ensure a newline is outputted, mimicking the newline that a block parent would add\n            // before its closing tag in Element.outerHtmlTail.\n            if (isBlank && next == null && parent != null && !parent.tag().isBlock()) {\n                normaliseWhite = false; // Override: Do not normalize whitespace for this specific case\n            }\n        }\n\n        // Escape and append the text content, using the determined normalization and trimming settings\n        // Note: if normaliseWhite was overridden to false, the trim flags are ignored in escape()\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}