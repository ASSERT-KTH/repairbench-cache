{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        // Only trim leading and trailing whitespace for text nodes, not element nodes.\n        // Fix: Only trimLeading/trailing when node() is actually TextNode, not always when prettyPrint.\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            parentNode instanceof Document;\n        // Fix: Only trim trailing whitespace if this node *is* the last node and is a text node,\n        // and parent is not a custom tag (like <bar> or <foo>).\n        boolean parentIsBlock = parent != null && parent.tag().isBlock();\n        boolean parentIsKnownTag = parent != null && (!parent.tag().isKnownTag() || parent.tag().isBlock());\n        trimTrailing = nextSibling() == null && parentIsBlock && parentIsKnownTag;\n\n        // if this text is just whitespace, and the next node will cause an indent, skip this text:\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n        if (couldSkip && isBlank) return;\n\n        Node prev = previousSibling();\n        if (\n            (siblingIndex == 0 && parentIsBlock && !isBlank) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n        )\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}