{
    "generation": "static void outerHtmlHead(Appendable accum, int depth, OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && (parent == null || !parent.tag().shouldPreserveWhitespace());\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        // Fix: compare against formatAsBlock() instead of isBlock()\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||\n            parentNode instanceof Document;\n        // Fix: compare against formatAsBlock() instead of isBlock()\n        trimTrailing = (nextSibling() == null && parent != null && parent.tag().formatAsBlock());\n\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) || // next\uc2a4 will indent\n            (next instanceof TextNode && ((TextNode) next).isBlank()); // next also\ub294 blank text\n        if (couldSkip && isBlank) return;\n\n        Node prev = previousSibling();\n        // Fix:\u4eca\u307e\u3067 invert the BR condition\n        if (\n            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n            (siblingIndex > 0 && prev instanceof Element && !prev.tag().normalName().equals(\"br\"))\n        ) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}