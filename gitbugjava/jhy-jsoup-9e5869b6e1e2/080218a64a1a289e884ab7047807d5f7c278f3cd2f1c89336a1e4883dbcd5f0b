{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // Check if whitespace normalization should occur. It does if pretty printing is enabled,\n        // and the parent node (if it's an element) doesn't preserve whitespace.\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent); // Use the parent Element, if available.\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // Determine if leading/trailing whitespace within this text node should be trimmed.\n            // Trim leading if it's the first node in a block parent or the document root.\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            // Trim trailing if it's the last node in a block parent.\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // Check if this text node should be skipped entirely.\n            // This happens if it's blank (only whitespace) and the node that follows it\n            // will cause an indentation, effectively replacing this whitespace.\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip =\n                // Condition 1: Next sibling is an Element that will be indented.\n                (next instanceof Element && ((Element) next).shouldIndent(out))\n                // Condition 2: Next sibling is another blank TextNode (can happen during re-parenting).\n                || (next instanceof TextNode && (((TextNode) next).isBlank()));\n            // If blank and could be skipped, render nothing for this node.\n            if (couldSkip && isBlank) return; // Don't outputLEADING white space as the next element will indent\n\n            // If not skipping, check if this text node itself needs to be indented.\n            Node prev = previousSibling();\n            if (\n                // Condition A: First node in parent, parent requires indent, and node is not blank.\n                // ** FIX: Changed parent.tag().formatAsBlock() to parent.shouldIndent(out) **\n                // Rationale: Indenting the first text node depends on whether the parent itself was indented,\n                // aligning with the behavior for element siblings. See https://github.com/jhy/jsoup/issues/1852\n                (siblingIndex == 0 && parent != null && parent.shouldIndent(out) && !isBlank) ||\n                // Condition B: Outline mode is enabled, node has siblings, and node is not blank.\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                // Condition C: Follows a <br> tag (special case for inline wrapping).\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            ) {\n                indent(accum, depth, out); // Add newline and indentation spaces.\n            }\n        }\n\n        // Finally, escape and write the text content, applying normalization and trimming as determined.\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}