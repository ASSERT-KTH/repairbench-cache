{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            boolean parentProvidesBlockContext;\n            if (parentNode instanceof Document) {\n                parentProvidesBlockContext = true; // Document root is always a block context\n            } else if (parent != null) { // parent is an Element\n                parentProvidesBlockContext = parent.shouldIndent(out);\n            } else { // parentNode is null or some other Node type\n                parentProvidesBlockContext = false;\n            }\n\n            if (siblingIndex == 0 && parentProvidesBlockContext) {\n                trimLeading = true;\n            }\n            // trimTrailing only makes sense if the parent is an Element (not Document, where it's covered by trimLeading of next block)\n            if (nextSibling() == null && parentProvidesBlockContext && parent != null) {\n                trimTrailing = true;\n            }\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            Node prev = previousSibling();\n            // Original indenting logic for non-blank text nodes:\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                // original BR: (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n                //  Ensure parent is not null for prev/siblingIndex > 0 to be meaningful\n                (parent != null && siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}