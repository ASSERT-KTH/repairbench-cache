{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // Element.preserveWhitespace static method correctly takes parentNode (which can be null or non-Element)\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        boolean isBlank = isBlank(); // Calculate isBlank once, used multiple times\n\n        if (normaliseWhite) {\n            // Special case: if this is a blank text node containing a newline, and it's the last node\n            // in a parent that is a custom tag (or a block tag not formatting as block),\n            // then we should print a newline. This is for the newline before the parent's closing tag.\n            if (isBlank && getWholeText().contains(\"\\n\") && nextSibling() == null && parent != null) {\n                org.jsoup.parser.Tag parentTag = parent.tag();\n                // Apply if parent is not formatAsBlock (standard blocks handle their own newlines via outerHtmlTail)\n                // AND parent is either an actual block tag OR it's an unknown (custom) tag.\n                // This heuristic avoids adding newlines for known inline tags like <span>\\n</span>,\n                // while allowing it for custom tags like <bar>\\n</bar> as implied by tests.\n                if (!parentTag.formatAsBlock() && (parentTag.isBlock() || !parentTag.isKnownTag())) {\n                    accum.append(\"\\n\");\n                    return; // Done with this node, printed a newline.\n                }\n            }\n\n            // Original trim and skip logic:\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                (parentNode instanceof Document); // Text nodes directly under Document root\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            Node next = nextSibling();\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            Node prev = previousSibling();\n            // Indent logic for the text node itself (not for the special case newline handled above)\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br>\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}