{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        // preserveWhitespace determines if whitespace normalization should occur\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) { // Check normaliseWhite first; parent is implicitly non-null if preserveWhitespace was checked. Or check parent explicitly.\n            // Calculate trimming flags based on parent block status\n            // Use parent.tag().isBlock() as in the original code for consistency, assuming it's the correct check for trimming context.\n            // Ensure parent is not null before accessing tag()\n            boolean parentIsBlock = parent != null && parent.tag().isBlock();\n            trimLeading = (siblingIndex == 0 && parentIsBlock) || parentNode instanceof Document; // parentNode can be Document\n            trimTrailing = nextSibling() == null && parentIsBlock;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean isBlank = isBlank(); // Call isBlank() once for efficiency\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return; // Don't output this node\n\n            // Indentation logic: indent non-blank text based on context\n            if (!isBlank) { // Only indent non-blank text nodes\n                Node prev = previousSibling();\n                // Use formatAsBlock for decisions on formatting/indentation, consistent with #1853 fix intent\n                boolean parentFormatAsBlock = parent != null && parent.tag().formatAsBlock();\n                boolean prevElementFormatAsBlock = prev instanceof Element && ((Element) prev).tag().formatAsBlock();\n                boolean prevIsBr = prev instanceof Element && ((Element) prev).normalName().equals(\"br\");\n\n                 if (\n                     (siblingIndex == 0 && parentFormatAsBlock) || // First child of a block-formatted parent\n                     (out.outline() && siblingNodes().size() > 0) || // Outline mode\n                     (prevElementFormatAsBlock) || // Follows a block-formatted element\n                     (prevIsBr) // Follows a <br> element (special case)\n                 ) {\n                     indent(accum, depth, out);\n                 }\n            }\n        }\n\n        // Call escape with the determined flags\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}