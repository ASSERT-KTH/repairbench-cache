{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean preserveWhitespace = Element.preserveWhitespace(parentNode);\n\n        // Special handling for blank text nodes that are the last child of a non-block parent element.\n        // In pretty print mode, these should render as a newline to ensure the parent's closing tag is on a new line.\n        if (prettyPrint && !preserveWhitespace && isBlank() && nextSibling() == null && parent != null && !parent.tag().formatAsBlock()) {\n            accum.append(\"\\n\");\n            return; // Outputted a newline, so no further processing for this TextNode.\n        }\n\n        // Original logic for other cases:\n        final boolean normaliseWhite = prettyPrint && !preserveWhitespace;\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            boolean currentIsBlank = isBlank(); // Use current blank state for decisions\n\n            // Refined trimLeading: also check !currentIsBlank for Document parent.\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock() && !currentIsBlank) ||\n                (parentNode instanceof Document && !currentIsBlank);\n            \n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && currentIsBlank) return;\n\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !currentIsBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !currentIsBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br>\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}