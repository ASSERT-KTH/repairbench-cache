{
    "generation": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            // Determine trimming based on siblings and parent block status\n            // * Use formatAsBlock rather than isBlock to act consistently with indenting *\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||\n                (parentNode instanceof Document); // first node in document is trimmed\n            trimTrailing = (nextSibling() == null && parent != null && parent.tag().formatAsBlock()); // last node in parent formats as block\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, maybe from re-parenting\n            if (couldSkip && isBlank) return; // don't output this blank text node, the next indent will make it look ugly\n\n            // indent if:\n            // * we are the first node in a formatting block container, and not blank (since blank is trimmed). (otherwise leaves leading space)\n            // * we are in outline mode\n            // * the previous node was a <br> element. (so this text gets indented; unless blank)\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (prev instanceof Element && ((Element) prev).tag().normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n            {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}