{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            // Fix: Enhanced trimTrailing logic to consider formatAsBlock and next sibling being a block element\n            trimTrailing = (nextSibling() == null && parent != null && parent.tag().formatAsBlock()) || // parent's closing tag\n                (nextSibling() instanceof Element && ((Element) nextSibling()).tag().formatAsBlock()); // next is a block tag\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text. Or if it's the last in a block, skip.\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            // Fix: If text is only whitespace, and it's the last child in a block-like element, skip it.\n            // e.g. <bar><p/>\\n</bar> -- the \\n is pure whitespace, and the last child, so skip it.\n            if (isBlank && next == null && parent != null && parent.tag().formatAsBlock()) {\n                return;\n            }\n\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}