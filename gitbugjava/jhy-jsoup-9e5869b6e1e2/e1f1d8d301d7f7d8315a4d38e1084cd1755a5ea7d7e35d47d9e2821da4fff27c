{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean calculatedNormaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (calculatedNormaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            // isBlank() must be called on coreValue() not wholeText(), as the latter normalises /n to space\n            boolean isBlank = StringUtil.isBlank(coreValue()); // Use coreValue() for isBlank check consistent with Entities.escape path\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        String textToEscape = coreValue();\n        boolean passNormaliseWhiteToEntities = calculatedNormaliseWhite;\n\n        if (calculatedNormaliseWhite && StringUtil.isBlank(textToEscape) && textToEscape.length() > 0) {\n            // This node is blank (but not empty), and subject to normalization.\n            if (trimLeading || trimTrailing) {\n                // It's blank and contextually trimmed.\n                // Standard path via Entities.escape with normaliseWhite=true will handle this\n                // (StringUtil.normaliseWhitespace will make it \"\", trims will have no further effect).\n                // So, no change to textToEscape or passNormaliseWhiteToEntities needed here.\n            } else {\n                // It's blank, not empty, and not contextually trimmed.\n                // We need to apply a normalization that preserves newlines and collapses other whitespace.\n                // This mimics older StringUtil.normalizeWhitespace behavior for blank strings.\n                StringBuilder sb = new StringBuilder(textToEscape.length());\n                boolean lastCharWasSpace = false; // Tracks if the last appended char to sb was a non-newline whitespace\n                                                  // (to collapse multiple spaces)\n                boolean lastCharWasNewline = true; // Tracks if last char was a newline (to allow a space after newline)\n\n                for (int i = 0; i < textToEscape.length(); i++) {\n                    char c = textToEscape.charAt(i);\n                    if (c == '\\n' || c == '\\r') {\n                        sb.append(c);\n                        lastCharWasSpace = false;\n                        lastCharWasNewline = true;\n                    } else if (Character.isWhitespace(c)) { // Space, tab, etc.\n                        // Append a single space if not preceded by another space (unless after a newline)\n                        if (!lastCharWasSpace || lastCharWasNewline) {\n                             sb.append(' ');\n                             lastCharWasSpace = true;\n                        }\n                        lastCharWasNewline = false;\n                    } else {\n                        // This case should ideally not be reached if StringUtil.isBlank(textToEscape) is true.\n                        // However, to be safe, append non-whitespace characters if they appear.\n                        sb.append(c);\n                        lastCharWasSpace = false;\n                        lastCharWasNewline = false;\n                    }\n                }\n                textToEscape = sb.toString();\n                passNormaliseWhiteToEntities = false; // Text is now pre-normalized.\n            }\n        }\n        \n        Entities.escape(accum, textToEscape, out, false, passNormaliseWhiteToEntities, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}