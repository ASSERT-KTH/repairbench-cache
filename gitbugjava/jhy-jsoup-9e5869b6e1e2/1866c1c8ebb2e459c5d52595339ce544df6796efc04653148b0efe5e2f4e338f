{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        // Helper variable for common condition check (matches Jsoup's internal style)\n        final boolean isBlockParent = parent != null && parent.tag().isBlock();\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n\n        // Condition for identifying a blank text node that serves as a trailing newline\n        // within a block-formatted parent (e.g., `</p>\\n</div>`).\n        final boolean isTrailingBlankTextNodeInBlock = isBlank() && nextSibling() == null && isBlockParent;\n\n        if (normaliseWhite) {\n            // Special handling: If this text node is a blank node acting as a trailing newline\n            // for a block parent, explicitly print a newline and return.\n            // This prevents it from being trimmed completely or normalized to a space,\n            // ensuring correct pretty-printed output and subsequent indentation for the closing tag.\n            if (isTrailingBlankTextNodeInBlock) {\n                accum.append('\\n');\n                return; // Handled this text node, no further processing needed.\n            }\n\n            // Apply trimLeading and trimTrailing logic for other text nodes.\n            // These conditions are based on the standard Jsoup formatting rules.\n            trimLeading = (siblingIndex == 0 && isBlockParent) || parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && isBlockParent;\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean isBlank = isBlank(); // This re-declaration is consistent with the original code.\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && isBlockParent && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) // special case wrap on inline <br> - doesn't make sense as a block tag\n            )\n                indent(accum, depth, out);\n        }\n\n        // Apply escaping and normalization for remaining cases.\n        // If normaliseWhite is false, or if the special trailing newline case was not met,\n        // Entities.escape will handle the text content.\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}