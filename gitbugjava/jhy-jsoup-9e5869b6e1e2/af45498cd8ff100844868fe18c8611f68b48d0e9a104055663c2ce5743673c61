{
    "generation": "@Override\nvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n    // normaliseWhite means collapse and trim runs of whitespace\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        // trim leading if first in a block, or at document root\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock())\n                  || parentNode instanceof Document;\n        // trim trailing if last in a block\n        trimTrailing = (nextSibling() == null && parent != null && parent.tag().isBlock());\n\n        // skip any blank text node that is either\n        //  - before an element that will indent\n        //  - before another blank text node\n        //  - or is the very last node in its parent\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        boolean shouldSkip = isBlank\n                           && ((next instanceof Element && ((Element) next).shouldIndent(out))\n                             || (next instanceof TextNode && ((TextNode) next).isBlank())\n                             || next == null);\n        if (shouldSkip) {\n            return;\n        }\n\n        // indent this text if it breaks a block context\n        Node prev = previousSibling();\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)\n         || (out.outline() && siblingNodes().size() > 0 && !isBlank)\n         || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))) {\n            indent(accum, depth, out);\n        }\n    }\n\n    // finally, escape & append the text (with collapsing/trimming as flagged)\n    Entities.escape(accum, coreValue(), out,\n                    /* inAttribute= */ false,\n                    /* normaliseWhite= */ normaliseWhite,\n                    /* trimLeading=   */ trimLeading,\n                    /* trimTrailing=  */ trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}