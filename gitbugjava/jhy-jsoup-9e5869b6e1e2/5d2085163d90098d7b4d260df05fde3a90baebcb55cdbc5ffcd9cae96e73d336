{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = (parentNode instanceof Element) ? ((Element) parentNode) : null;\n    final boolean normalizeWhitespace = prettyPrint && parent != null && !parent.hasWhitespace();\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n\n    if (normalizeWhitespace) {\n        trimLeading = siblingIndex == 0 && parent != null && parent.tag().isBlockElement();\n        trimTrailing = parent != null && parent.tag().isBlockElement() && nextSibling() == null;\n\n        // if this text is just whitespace, and the next node will cause an indentation, skip this text:\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||\n                        (next instanceof TextNode && ((TextNode) next).isBlank());\n\n        if (couldSkip && isBlank)\n            return;\n\n        if (siblingIndex == 0 && parent != null && parent.tag().isBlockElement() && !isBlank ||\n            (out.outline() && hasSiblingNodes() && !isBlank) ||\n            (siblingIndex > 0 && previousSibling() instanceof Element && ((Element) previousSibling()).tagName().equals(\"br\"))) {\n                indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normalizeWhitespace, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}