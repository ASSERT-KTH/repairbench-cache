{
    "generation": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n\n        if (normaliseWhite) {\n            // Determine if the parent is a block-level element or the document root.\n            // Parent is null if parentNode is Document.\n            final boolean parentIsBlock = parent != null && parent.tag().isBlock();\n            final boolean parentIsDocument = parent == null; // True if parentNode is Document\n\n            trimLeading = siblingIndex == 0 && (parentIsBlock || parentIsDocument);\n            trimTrailing = nextSiblingNode == null && (parentIsBlock || parentIsDocument);\n\n            // if this text is just whitespace, and the next node will cause an indent, skip this text:\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n            if (couldSkip && isBlank) return;\n\n            Node prev = previousSibling();\n            // Conditions under which this TextNode itself should be indented.\n            // Inlined logic from private helper method preserveAndNotIndentThis:\n            boolean preserveAndNotIndent = false;\n            if (parent != null) { // parent must be an Element for these checks\n                preserveAndNotIndent = (parent.tag().preserveWhitespace()) ||\n                    (out.outline() && parent.tag().isBlock() && siblingNodes().size() == 1);\n            }\n\n            if (parent != null && // Parent must be an Element to cause indentation based on its properties\n                (\n                    (parent.tag().formatAsBlock() && !isBlank) || // Parent is a block, and this text is not blank\n                    (out.outline() && !isBlank) || // Outline mode active, and this text is not blank\n                    // Special case for text node immediately following a <br> element\n                    (prev instanceof Element && ((Element) prev).normalName().equals(\"br\"))\n                ) &&\n                !preserveAndNotIndent // And not in a situation where we preserve whitespace or skip indent\n            ) {\n                indent(accum, depth, out);\n            }\n        }\n\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}