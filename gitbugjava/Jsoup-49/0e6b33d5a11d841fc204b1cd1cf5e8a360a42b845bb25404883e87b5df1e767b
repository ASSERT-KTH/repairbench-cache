{
    "generation": "    protected void addChildren(int index, Node... children) {\n        Validate.noNullElements(children);\n        ensureChildNodes();\n        List<Node> nodes = childNodes; // Get the live list\n\n        for (int i = children.length - 1; i >= 0; i--) { // Iterate backwards to maintain correct order when inserting at same index\n            Node in = children[i];\n\n            // If 'in' is already a child of 'this', remove it from its current position first.\n            // Using Node.removeChild(child) is problematic as it uses siblingIndex, which can be stale\n            // if the list was modified due to other adds/removes in this loop, especially when moving nodes.\n            // Instead, find the current index reliably and remove directly from the list.\n            if (in.parentNode == this) {\n                int currentIdx = nodes.indexOf(in); // Use indexOf(Object) to find current location reliably (uses ==)\n                if (currentIdx != -1)\n                    nodes.remove(currentIdx);\n                // No need to call parent.removeChild() or change parent node yet, as we are moving it within the same parent\n            } else {\n                // If 'in' has a different parent, remove it from there using the standard mechanism.\n                // This is safe as it operates on the old parent's list and indices.\n                if (in.parentNode != null)\n                    in.parentNode.removeChild(in);\n            }\n\n            // Add the node at the target index. List.add(index, E) shifts subsequent elements.\n            nodes.add(index, in);\n\n            // Update the parent node pointer for 'in'. setParentNode just updates the field.\n            in.setParentNode(this);\n        }\n\n        // After all children are added/moved, reindex children starting from the insertion point\n        // to update their siblingIndex fields correctly.\n        reindexChildren(index);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}