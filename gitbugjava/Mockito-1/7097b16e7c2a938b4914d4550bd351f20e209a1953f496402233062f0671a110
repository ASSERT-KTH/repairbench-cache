{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        int numMatchers = matchers.size(); // Assuming matchers is available field List<Matcher>\n        int numArgs = invocation.getRawArguments().length;\n\n        for (int position = 0; position < numMatchers; position++) {\n            Matcher m = matchers.get(position);\n            if (!(m instanceof org.mockito.internal.matchers.CapturesArguments)) {\n                continue; // Skip non-capturing matchers\n            }\n\n            org.mockito.internal.matchers.CapturesArguments captor = (org.mockito.internal.matchers.CapturesArguments) m;\n            boolean isVarargMethod = invocation.getMethod().isVarArgs();\n            int varargParameterIndex = -1;\n            if (isVarargMethod) {\n                 // The index of the vararg parameter in the *declared* parameters list\n                 varargParameterIndex = invocation.getMethod().getParameterTypes().length - 1;\n            }\n\n            // Check if the current matcher position corresponds to the vararg parameter\n            if (isVarargMethod && position == varargParameterIndex) {\n                // This matcher corresponds to the vararg parameter. Capture elements from the array argument.\n\n                Object varargArgument = null;\n                // The vararg argument array (or null) is expected at this position in rawArguments.\n                if (position < numArgs) {\n                     varargArgument = invocation.getRawArguments()[position];\n                }\n                // If position >= numArgs, it implies no varargs elements were passed, varargArgument remains null.\n                // The logic below handles null correctly (captures null) and handles empty array correctly (captures no elements).\n\n                // Capture elements if it's an array, otherwise capture the value itself (e.g., null).\n                if (varargArgument != null && varargArgument.getClass().isArray()) {\n                    int arrayLength = java.lang.reflect.Array.getLength(varargArgument);\n                    for (int i = 0; i < arrayLength; i++) {\n                        captor.captureFrom(java.lang.reflect.Array.get(varargArgument, i));\n                    }\n                } else {\n                    // Capture the argument itself (which could be null if nothing was passed for varargs,\n                    // or if null was explicitly passed as the vararg array)\n                    captor.captureFrom(varargArgument);\n                }\n\n                // Vararg parameter captured, finish processing matchers for this invocation.\n                // This assumes one matcher corresponds to the entire vararg parameter set.\n                return;\n\n            } else {\n                // This matcher is for a regular (non-vararg) parameter position.\n                if (position < numArgs) {\n                    captor.captureFrom(invocation.getRawArguments()[position]);\n                }\n                // else: No argument at this position (e.g., invocation with fewer args than matchers), capture nothing.\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}