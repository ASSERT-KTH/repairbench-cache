{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        Object[] rawArguments = invocation.getRawArguments();\n        int argumentCount = rawArguments.length;\n        int matcherCount = matchers.size();\n\n        for (int position = 0; position < matcherCount; position++) {\n            Matcher m = matchers.get(position);\n\n            if (m instanceof CapturesArguments) {\n                CapturesArguments captor = (CapturesArguments) m;\n\n                // Check if this matcher is specifically for handling varargs element by element\n                // and if it's placed at the vararg parameter position.\n                // Assumes helper methods isVarargMatcher(Matcher) and isVariableArgument(Invocation, int) exist\n                // within the class scope or are accessible.\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    // Capture all remaining actual arguments from this position onwards as individual captures.\n                    // This handles calls like method(\"a\", \"b\") for method(String... args) correctly.\n                    for (int i = position; i < argumentCount; i++) {\n                        captor.captureFrom(rawArguments[i]);\n                    }\n                    // Once a vararg matcher captures arguments, stop processing further matchers\n                    // as the vararg matcher consumes all remaining arguments for the purpose of capturing.\n                    return;\n                } else {\n                    // Standard capture: capture the single argument at the current position.\n                    // This also handles the case where a vararg parameter is matched by a non-vararg matcher\n                    // (e.g., eq(new String[]{\"a\", \"b\"})), capturing the array object itself.\n                    if (position < argumentCount) {\n                        captor.captureFrom(rawArguments[position]);\n                    }\n                    // If position >= argumentCount, there's no argument for this matcher\n                    // (e.g., method() called for method(int i, String s)), so capture nothing.\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}