{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        Method method = invocation.getMethod();\n        boolean isVarargMethod = method.isVarArgs();\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        int declaredParamCount = parameterTypes.length;\n\n        for (int position = 0; position < matchers.size(); position++) {\n            // Using Matcher type as in the original snippet context\n            org.mockito.Matcher m = matchers.get(position);\n\n            if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                org.mockito.internal.matchers.CapturesArguments captor = (org.mockito.internal.matchers.CapturesArguments) m;\n\n                // Assume a helper method 'isVarargMatcher(Matcher)' exists in the class or is accessible.\n                // This helper determines if the matcher is specifically designed for varargs (like anyVararg()).\n                // The original commented code used isVarargMatcher(m).\n                boolean isVarargMatcher = isVarargMatcher(m); // Assuming this helper method exists\n\n                // Check if the current matcher position corresponds to the vararg parameter declaration\n                boolean isVarargPosition = isVarargMethod && position == declaredParamCount - 1;\n\n                if (isVarargPosition && isVarargMatcher) {\n                    // Case 1: This matcher is at the vararg parameter position and is a vararg matcher.\n                    // It should capture all remaining arguments packed into an array by getArgumentAt.\n                    Class<?> varargParamType = parameterTypes[position]; // e.g., String[].class\n                    // Use Object.class for getArgumentAt to ensure we get the array object itself,\n                    // handling different vararg types (Object[], String[], int[], etc.).\n                    Object varargsArray = invocation.getArgumentAt(position, Object.class);\n\n                    if (varargsArray != null && varargsArray.getClass().isArray()) {\n                        // Capture each element of the vararg array\n                        for (int i = 0; i < java.lang.reflect.Array.getLength(varargsArray); i++) {\n                            captor.captureFrom(java.lang.reflect.Array.get(varargsArray, i));\n                        }\n                    } else if (varargsArray == null && varargParamType.isArray()) {\n                         // Capture the explicitly passed null for the vararg array parameter\n                         captor.captureFrom(null);\n                    }\n                    // If zero varargs were passed, getArgumentAt typically provides an empty array,\n                    // the loop doesn't run, correctly capturing nothing.\n\n                    // A vararg matcher consumes the vararg parameter; stop processing further matchers.\n                    // This behavior matches the original commented-out code's 'return'.\n                    return;\n\n                } else if (position < declaredParamCount) {\n                    // Case 2: This is a non-vararg parameter position, or it's the vararg position\n                    // but the matcher is *not* a vararg matcher (e.g., eq(\"value\") used for a vararg).\n                    // Capture the single argument corresponding to this parameter position.\n                    // Using Object.class with getArgumentAt retrieves the argument regardless of its type.\n                    Object argument = invocation.getArgumentAt(position, Object.class);\n                    captor.captureFrom(argument);\n                }\n                // Case 3: position >= declaredParamCount\n                // This implies more matchers than declared method parameters. This could be an error\n                // state or an edge case. Nothing is captured for such extra matchers.\n            }\n        }\n    }\n\n    // Helper method assumed to exist elsewhere in the class or be accessible.\n    // Its implementation depends on Mockito internals for identifying vararg matchers.\n    // private boolean isVarargMatcher(org.mockito.Matcher matcher) { ... }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}