{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if a invalid byte is detected.\n     *         (Note: The exception for missing trailer is effectively removed by the fix).\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     initialEnd = offset + length; // Use a different variable for initial end\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < initialEnd){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // Use a local variable 'end' for the effective end after trimming.\n        int end = initialEnd;\n        while (start < end) {\n            final byte currentTrailer = buffer[end - 1];\n            if (currentTrailer == 0 || currentTrailer == ' ') {\n                end--; // Reduce the effective end\n            } else {\n                break; // Found the last non-trailer character (or start reached end)\n            }\n        }\n\n        // If start == end, it means the buffer contained only spaces/NULs\n        // after the initial characters, or was empty to begin with after skipping spaces.\n        // Return 0L in this case, consistent with handling of missing fields or all-NUL buffers.\n        if (start == end) {\n            // Previous code threw an exception based on the last character looked at during trimming,\n            // which could be misleading if the effective string was empty.\n            // throw new IllegalArgumentException(\n            //         exceptionMessage(buffer, offset, length, start, trailer)); // 'trailer' byte here was problematic\n             return 0L; // FIX: Return 0 for empty effective value after trimming.\n        }\n\n        // Now, parse digits between the determined start and end points.\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Found an invalid (non-octal) character within the determined range.\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist elsewhere for creating exception messages.\n    // Included here for completeness of the thought process, but not part of the required function output.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int badIdx, byte badByte) {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"Invalid byte \").append(badByte).append(\" at offset \").append(badIdx - offset);\n         sb.append(\" in '\");\n         final int MAX_DUMP_LEN = 30;\n         int dumpLen = Math.min(length, MAX_DUMP_LEN);\n         for (int i = 0; i < dumpLen; ++i) {\n             byte b = buffer[offset + i];\n             if (b == 0) {\n                 sb.append(\"{NUL}\");\n             } else {\n                 sb.append((char) b);\n             }\n         }\n         if (length > MAX_DUMP_LEN) {\n             sb.append(\"...\");\n         }\n         sb.append(\"' len=\").append(length);\n         return sb.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}