{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL. This is sufficient for \"all NULs\" as well if the first byte is NUL.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // Keep trimming from the end while we see NUL or space.\n        int realEnd = end; // Use a different variable for the end of octal digits\n        while (realEnd > start) {\n            final byte currentByte = buffer[realEnd - 1];\n            if (currentByte == 0 || currentByte == ' ') {\n                realEnd--;\n            } else {\n                break; // Found a non-terminator character\n            }\n        }\n\n        // After skipping leading spaces and trimming trailing NULs/spaces,\n        // if start == realEnd, it means the buffer contained only spaces and/or NULs.\n        // Example: {' ', 0} -> start=1, end=2 -> trim 0 -> realEnd=1. start == realEnd. Returns 0.\n        // Example: {' ', ' '} -> start=2, end=2 -> trim nothing -> realEnd=2. start == realEnd. Returns 0.\n        // This should be treated as 0, similar to the leading NUL case.\n        if (start == realEnd) {\n             // Original code threw exception here, causing the test failure for {' ', 0}\n             return 0L;\n        }\n\n        // Parse octal digits from start up to the potentially reduced end (realEnd).\n        for ( ;start < realEnd; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Use the original offset and length in the exception message for context\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method used by the original code (and the fix) to generate exception messages.\n    // This method is assumed to exist elsewhere in the TarUtils class.\n    private static String exceptionMessage(byte[] buffer, final int offset,\n                                           final int length, int currentOffset, final byte currentByte) {\n        String Tmp = null;\n        try {\n            // Attempt to decode using a common TAR encoding that preserves ASCII\n            Tmp = new String(buffer, offset, length, \"ISO-8859-1\");\n        } catch (final java.io.UnsupportedEncodingException e) {\n            // Should generally not happen with ISO-8859-1, but fallback just in case\n            Tmp = new String(buffer, offset, length); // Use default charset\n        }\n        // Replace NUL characters for clearer display in the message\n        Tmp = Tmp.replace('\\0', '{NUL}');\n        // Construct the error message including the byte value, its offset within the segment,\n        // the segment content, and the segment length.\n        final String err = \"Invalid byte \" + currentByte + \" at offset \" + (currentOffset - offset) + \" in '\" + Tmp + \"' len=\" + length;\n        return err;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}