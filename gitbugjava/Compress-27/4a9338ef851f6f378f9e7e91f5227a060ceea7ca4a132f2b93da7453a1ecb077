{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases of leading NUL\n        // Tar implementation workaround: leading NUL is treated as zero\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // Trim back from end looking for NUL or space\n        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n             end--;\n        }\n\n        // After trimming spaces and NULs, if start >= end,\n        // it indicates an empty field (or field containing only spaces/NULs).\n        // This should be treated as 0, consistent with all-NUL or leading-NUL fields.\n        // The original code threw an exception here for cases like {' ', NUL}, causing the test failure.\n        if (start >= end) {\n            return 0L;\n        }\n        // Original erroneous exception throw was here:\n        // if (start == end) {\n        //     throw new IllegalArgumentException(\n        //             exceptionMessage(buffer, offset, length, start, trailer));\n        // }\n\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Use a standard exception message format, assuming exceptionMessage is not accessible/needed\n                // Providing the actual byte value and offset is helpful for debugging.\n                 throw new IllegalArgumentException(\n                         \"Invalid octal digit '\" + (char)currentByte + \"' near offset \" + (start - offset) +\n                         \" in buffer '\" + new String(buffer, offset, length, java.nio.charset.StandardCharsets.UTF_8) + // May need charset awareness\n                         \"'\");\n                // If exceptionMessage is available and desired, the original call was:\n                // throw new IllegalArgumentException(\n                //         exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist elsewhere, needed for the original exception throwing logic.\n    // Define it here or ensure it's available if using the original exception call.\n    // Example structure (actual implementation might vary):\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {\n         String s = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1); // TAR uses ASCII or ISO-8859-1\n         s = s.replace((char) 0, '{'NUL'}'); // Make NULs visible\n         return \"Invalid byte \" + currentByte + \" at offset \" + (idx - offset) + \" in '\" + s + \"' len=\" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}