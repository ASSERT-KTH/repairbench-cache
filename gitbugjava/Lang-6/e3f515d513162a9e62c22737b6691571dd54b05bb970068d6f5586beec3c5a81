{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // Find the code point starting at index pos\n                // Check if it's a high surrogate first, if so, ensure there's a low surrogate available\n                char c1 = input.charAt(pos);\n                 if (Character.isHighSurrogate(c1) && pos + 1 < len) {\n                     char c2 = input.charAt(pos + 1);\n                     if (Character.isLowSurrogate(c2)) {\n                         // Write the surrogate pair\n                         out.write(c1);\n                         out.write(c2);\n                         pos += 2;\n                         continue; // Continue to next position after the surrogate pair\n                     }\n                 }\n                // Treat as a single character (BMP or unpaired surrogate)\n                out.write(c1);\n                pos++;\n                continue; // Continue to the next position\n            }\n            // The translator consumed 'consumed' characters.\n            // Advance the position by the number of characters consumed.\n            pos += consumed;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}