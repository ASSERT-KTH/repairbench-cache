{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // Translate method returned zero, meaning no matching character was found, so handle\n                // unrecognized characters processing supplementary characters correctly\n                int codePoint = Character.codePointAt(input, pos);\n                char[] c = Character.toChars(codePoint);\n                out.write(c);\n                pos += c.length; // Advance by the number of chars written\n            } else {\n                // The translator consumed input characters. Advance position accordingly.\n                // 'consumed' is the number of code points consumed.\n                for (int pt = 0; pt < consumed; pt++) {\n                    // Check if we've already advanced past the end of the input string.\n                    // This can happen if the translator returns a 'consumed' count greater than\n                    // the number of code points remaining in the input.\n                    if (pos >= len) {\n                        // Avoid StringIndexOutOfBoundsException from Character.codePointAt(input, pos)\n                        break;\n                    }\n                    // Advance position by the number of chars corresponding to the code point.\n                    pos += Character.charCount(Character.codePointAt(input, pos));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}