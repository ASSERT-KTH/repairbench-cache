{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // Translate method didn't consume any chars\n                // Read the code point at the current position\n                int codePoint = Character.codePointAt(input, pos);\n                // Convert the code point to its char representation (might be 1 or 2 chars)\n                char[] c = Character.toChars(codePoint);\n                // Write the char(s) to the output\n                out.write(c);\n                // Advance the position by the number of chars used by the code point\n                pos += c.length; // or pos += Character.charCount(codePoint);\n                continue; // Continue to the next position in the input\n            }\n            // The translate method consumed 'consumed' characters starting at 'pos'.\n            // Advance 'pos' by the number of characters consumed.\n            // The logic below is incorrect because 'pos' is incremented inside the loop,\n            // leading to potential StringIndexOutOfBoundsException for surrogate pairs.\n//          // contract with translators is that they have to understand codepoints\n//          // and they just took care of a surrogate pair\n//            for (int pt = 0; pt < consumed; pt++) {\n//                pos += Character.charCount(Character.codePointAt(input, pos));\n//            }\n            // Correct logic: Simply advance the position by the number of chars consumed.\n            pos += consumed;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}