{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // In CsvEscaper, this usually means the character needs no escaping.\n                // We need to copy the character directly to the output.\n                // Handle potential surrogate pairs correctly.\n                int codePoint = Character.codePointAt(input, pos);\n                char[] c = Character.toChars(codePoint);\n                out.write(c);\n                pos += c.length; // Advance by 1 or 2, depending on the code point\n                continue; // Continue to the next character position\n            }\n            // The translate method consumed 'consumed' characters starting from 'pos'.\n            // Advance our position in the input string by that amount.\n            pos += consumed;\n            // Note: The previous implementation had a bug here where it iterated 'consumed'\n            // times, calling Character.codePointAt and Character.charCount inside the loop.\n            // This was incorrect because 'consumed' already represents the number of\n            // char units processed by the specific translator. Simply advancing 'pos'\n            // by 'consumed' is the correct way to move past the characters that\n            // have already been handled. This fixes issues with surrogate pairs\n            // when 'consumed' is greater than 0.\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}