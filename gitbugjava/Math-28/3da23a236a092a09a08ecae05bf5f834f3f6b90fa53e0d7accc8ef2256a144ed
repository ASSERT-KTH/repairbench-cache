{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Check if the entry in the pivot column is strictly positive\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // compare the ratio with the current minimum ratio\n                // do not use a ulp/epsilon check\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    // Equal ratio, add to the list of ties\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    // New minimum ratio found\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>(); // Reset ties list\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            // No viable pivot row found (e.g., all entries in pivot column are non-positive)\n            // This indicates an unbounded problem if pivoting is required.\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // Tie in the minimum ratio test (degeneracy)\n\n            // 1. check if there's an artificial variable that can be forced out of the basis\n            //    among the tied rows. Prioritize removing artificial variables.\n                for (Integer row : minRatioPositions) {\n                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                        int column = i + tableau.getArtificialVariableOffset();\n                        final double entry = tableau.getEntry(row, column);\n                        // Check if the entry is ~1 and if this artificial variable is basic in this row\n                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                            return row; // Choose this row to remove the artificial variable\n                        }\n                    }\n                }\n\n            // 2. apply Bland's rule to prevent cycling:\n            //    take the row for which the corresponding basic variable has the smallest index\n            //\n            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n            //\n            // The implementation below corresponds to Bland's rule: choose the leaving variable\n            // (identified by the pivot row) such that its index is the smallest among the tied options.\n                Integer minRow = null;\n                int minIndex = Integer.MAX_VALUE; // Initialize with a large value\n\n                for (Integer row : minRatioPositions) {\n                    int basicVarIndex = -1;\n                    // Find the column index of the basic variable corresponding to this 'row'\n                    // Iterate through all columns that can represent variables (0 to width - 2)\n                    for (int j = 0; j < tableau.getWidth() - 1; j++) {\n                        // Check if variable 'j' is basic in this row using .equals() for Integer comparison\n                        if (row.equals(tableau.getBasicRow(j))) {\n                            basicVarIndex = j;\n                            break; // Found the basic variable for this row\n                        }\n                    }\n\n                    // If a basic variable was found (should always happen for rows in the basis)\n                    // and its index is smaller than the current minimum index, update minIndex and minRow.\n                    if (basicVarIndex != -1 && basicVarIndex < minIndex) {\n                        minIndex = basicVarIndex;\n                        minRow = row;\n                    }\n                }\n                // Return the row corresponding to the basic variable with the smallest index\n                return minRow;\n        }\n        // No tie, return the unique row with the minimum ratio\n        return minRatioPositions.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}