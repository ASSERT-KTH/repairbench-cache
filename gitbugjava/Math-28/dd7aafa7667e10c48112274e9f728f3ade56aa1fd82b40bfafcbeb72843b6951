{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Use precision comparison for the entry check\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // check if the entry is strictly equal to the current min ratio\n                // do not use a ulp/epsilon check\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>(); // Reset list\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            return null; // No feasible row found\n        } else if (minRatioPositions.size() > 1) {\n            // there's a degeneracy as indicated by a tie in the minimum ratio test\n\n            // 1. check if there's an artificial variable that can be forced out of the basis\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    // Use precision comparison for checking equality to 1.0\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row;\n                    }\n                }\n            }\n\n            // 2. apply Bland's rule to prevent cycling:\n            //    take the row for which the corresponding basic variable has the smallest index\n            //\n            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n            //\n            // Additional heuristic (commented out in original): if we did not get a solution after half of maxIterations\n            //                       revert to the simple case of just returning the top-most row\n            // This heuristic is based on empirical data gathered while investigating MATH-828.\n\n                Integer minRow = null;\n                int minIndex = Integer.MAX_VALUE; // Initialize with a value larger than any possible column index\n\n                for (Integer row : minRatioPositions) { // Iterate through rows that tied for minimum ratio\n                    int basicVarIndexForRow = -1; // Index of the basic variable for the current 'row'\n\n                    // Find the column index 'i' of the basic variable for the current 'row'\n                    // Iterate through all potential variable columns (excluding RHS)\n                    for (int i = 0; i < tableau.getWidth() - 1; i++) {\n                        Integer basicRowForColI = tableau.getBasicRow(i);\n                        // Check if variable 'i' is basic in the current 'row'. Use .equals() for Integer comparison.\n                        if (basicRowForColI != null && basicRowForColI.equals(row)) {\n                            basicVarIndexForRow = i;\n                            break; // Found the basic variable for this row, stop searching columns\n                        }\n                    }\n\n                    // If we found a basic variable for this row (should always happen for valid tableau rows)\n                    // and its index is smaller than the minimum index found so far among tied rows.\n                    if (basicVarIndexForRow != -1 && basicVarIndexForRow < minIndex) {\n                        minIndex = basicVarIndexForRow;\n                        minRow = row; // Update the row to return\n                    }\n                }\n                // Return the row selected by Bland's rule (corresponding to the smallest basic variable index)\n                return minRow;\n        }\n        // If there was no tie, return the unique row with the minimum ratio\n        return minRatioPositions.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}