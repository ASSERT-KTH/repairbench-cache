{
    "generation": "private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n    if ((content == null) || (content.length == 0)) {\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n    }\n\n    int bytesLen = content.length;\n    int offset = 0;\n    Charset encoding = StandardCharsets.ISO_8859_1;\n\n    // Check BOMs\n    if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n        offset = 3;\n        bytesLen -= 3;\n        encoding = StandardCharsets.UTF_8;\n    } else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n        offset = 2;\n        bytesLen -= 2;\n        encoding = StandardCharsets.UTF_16LE;\n    } else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n        offset = 2;\n        bytesLen -= 2;\n        encoding = StandardCharsets.UTF_16BE;\n    }\n\n    // Check Content-Type's charset parameter if no BOM was found\n    if (offset == 0 && contentType != null) {\n        final String lowerCaseContentType = contentType.toLowerCase(Locale.ROOT);\n        int charsetIndex = lowerCaseContentType.indexOf(\"charset=\");\n        if (charsetIndex != -1) {\n            String charsetName = lowerCaseContentType.substring(charsetIndex + \"charset=\".length());\n            charsetName = charsetName.split(\";\", 2)[0].trim();\n            charsetName = charsetName.replaceAll(\"^['\\\"]|['\\\"]*$\", \"\"); // Remove surrounding quotes\n\n            try {\n                encoding = Charset.forName(charsetName);\n            } catch (Exception e) {\n                // Use the default ISO-8859-1 if invalid charset found\n                reportWarning(\"\", \"Invalid charset parameter in Content-Type: {}\", charsetName);\n            }\n        }\n    }\n\n    // Convert the bytes to a String using the determined encoding\n    String contentAsStr = new String(content, offset, bytesLen, encoding);\n\n    // ... Rest of the method remains unchanged except for possible logging adjustments for replaced warnings ...\n    // The HTML detection and remaining logic stays the same\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}