{
    "generation": "private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n    // If there's nothing there, treat it like we have no restrictions.\n    if ((content == null) || (content.length == 0)) {\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n    }\n\n    int bytesLen = content.length;\n    int offset = 0;\n    Charset encoding = StandardCharsets.US_ASCII;\n\n    // Check content type for charset parameter first\n    if (contentType != null) {\n        int charsetIndex = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (charsetIndex != -1) {\n            String charsetSpecifier = contentType.substring(charsetIndex + \"charset=\".length());\n            charsetSpecifier = charsetSpecifier.split(\";\", 2)[0].trim();\n\n            if (charsetSpecifier.startsWith(\"'\") && charsetSpecifier.endsWith(\"'\")) {\n                charsetSpecifier = charsetSpecifier.substring(1, charsetSpecifier.length() - 1).trim();\n            } else if (charsetSpecifier.startsWith(\"\\\"\") && charsetSpecifier.endsWith(\"\\\"\")) {\n                charsetSpecifier = charsetSpecifier.substring(1, charsetSpecifier.length() - 1).trim();\n            } else {\n                charsetSpecifier = charsetSpecifier.trim();\n            }\n\n            try {\n                encoding = Charset.forName(charsetSpecifier);\n            } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {\n                LOGGER.trace(\"Invalid charset '{}' detected for robots.txt at {}: {}\", charsetSpecifier, url, e);\n            }\n        }\n    }\n\n    // Check BOM for encoding only if charset wasn't specified\n    if (encoding == StandardCharsets.US_ASCII) {\n        // Check for UTF-8 BOM (EF BB BF)\n        if (bytesLen >= 3 && content[offset] == (byte) 0xEF && content[offset + 1] == (byte) 0xBB && content[offset + 2] == (byte) 0xBF) {\n            offset = 3;\n            bytesLen -= 3;\n            encoding = StandardCharsets.UTF_8;\n        }\n        // Check for UTF-16LE BOM (FF FE)\n        else if (bytesLen >= 2 && content[offset] == (byte) 0xFF && content[offset + 1] == (byte) 0xFE) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        // Check for UTF-16BE BOM (FE FF)\n        else if (bytesLen >= 2 && content[offset] == (byte) 0xFE && content[offset + 1] == (byte) 0xFF) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n    }\n\n    // Convert bytes to String with final encoding and BOM handling\n    String contentAsStr;\n    contentAsStr = new String(content, offset, bytesLen, encoding);\n\n    // HTML processing logic remains unchanged\n    boolean isHtmlType = (contentType != null && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n    boolean hasHTML = false;\n    if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n        if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n            LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        } else {\n            hasHTML = true;\n            if (isHtmlType) {\n                LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n            } else {\n                LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n            }\n        }\n    }\n\n    // Split content into lines using the correct encoding\n    StringTokenizer lineParser = new StringTokenizer(contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n    ParseState parseState = new ParseState(url, robotNames);\n\n    // Parsing loop remains unchanged except correct encoding usage\n    while (lineParser.hasMoreTokens()) {\n        String line = lineParser.nextToken();\n\n        if (hasHTML) {\n            line = line.replaceAll(\"<[^>]+>\", \"\");\n        }\n\n        int hashPos = line.indexOf('#');\n        if (hashPos >= 0) {\n            line = line.substring(0, hashPos);\n        }\n\n        line = line.trim();\n        if (line.length() == 0) continue;\n\n        RobotToken token = tokenize(line);\n        switch (token.getDirective()) {\n            case USER_AGENT:\n                handleUserAgent(parseState, token);\n                break;\n            case DISALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleDisallow(parseState, token);\n                break;\n            case ALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleAllow(parseState, token);\n                break;\n            case CRAWL_DELAY:\n                parseState.setFinishedAgentFields(true);\n                handleCrawlDelay(parseState, token);\n                break;\n            case SITEMAP:\n                parseState.setFinishedAgentFields(true);\n                handleSitemap(parseState, token);\n                break;\n            case HTTP:\n                parseState.setFinishedAgentFields(true);\n                handleHttp(parseState, token);\n                break;\n            case UNKNOWN:\n                reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                parseState.setFinishedAgentFields(true);\n                break;\n            case MISSING:\n                reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                parseState.setFinishedAgentFields(true);\n                break;\n            default:\n                // Handle other directives or ignore\n                break;\n        }\n    }\n\n    this._numWarningsDuringLastParse.set(parseState._numWarnings);\n    SimpleRobotRules result = parseState.getRobotRules();\n    if (result.getCrawlDelay() > _maxCrawlDelay) {\n        LOGGER.debug(\"Crawl delay exceeds max value - disallowing all URLs: {}\", url);\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n    } else {\n        result.sortRules();\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}