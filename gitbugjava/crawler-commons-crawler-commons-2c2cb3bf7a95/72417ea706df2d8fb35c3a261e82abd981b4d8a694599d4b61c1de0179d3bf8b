{
    "generation": "    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n        // If there's nothing there, treat it like we have no restrictions.\n        if ((content == null) || (content.length == 0)) {\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n\n        int bytesLen = content.length;\n        int offset = 0;\n        // Default to UTF-8, as recommended by RFC 9309, Section 2.2.\n        Charset encoding = StandardCharsets.UTF_8;\n\n        // Check for a UTF-8 BOM at the beginning (EF BB BF)\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n            // encoding = StandardCharsets.UTF_8; // Already the default, but explicit doesn't hurt\n        }\n        // Check for UTF-16LE BOM at the beginning (FF FE)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        // Check for UTF-16BE BOM at the beginning (FE FF)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n        // Note: RFC 9309 specifies UTF-8 as the character encoding.\n        // While BOMs for UTF-16 are checked here for robustness against\n        // non-compliant files, the standard implies UTF-8 should be assumed\n        // if no BOM indicates otherwise. Our default is now UTF-8.\n\n        String contentAsStr;\n        // Decode the content using the detected encoding. Handle malformed input.\n        try {\n            contentAsStr = new String(content, offset, bytesLen, encoding);\n        } catch (Exception e) {\n            // It's possible that the site is sending us junk, or we decided\n            // on the wrong encoding. Rather than die, let's assume we can't\n            // process this file.\n            LOGGER.warn(\"Couldn't decode robots.txt file: \" + url, e);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n\n\n        // Decide if we need to do special HTML processing.\n        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n\n        // If it looks like it contains HTML, but doesn't have a user agent\n        // field, then\n        // assume somebody messed up and returned back to us a random HTML page\n        // instead\n        // of a robots.txt file.\n        boolean hasHTML = false;\n        if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n            if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n                LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n                return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n            } else {\n                // We'll try to strip out HTML tags below.\n                if (isHtmlType) {\n                    LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n                } else {\n                    LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n                }\n\n                hasHTML = true;\n            }\n        }\n\n        // Break on anything that might be used as a line ending. Since\n        // tokenizer doesn't return empty tokens, a \\r\\n sequence still\n        // works since it looks like an empty string between the \\r and \\n.\n        // Using Pattern.split preserves empty lines which might be significant\n        // between user-agent blocks, although StringTokenizer was likely OK too.\n        // Using regex for line breaks handles \\n, \\r, \\r\\n, \\u0085, \\u2028, \\u2029\n        String[] lines = contentAsStr.split(\"[\\\\n\\\\r\\\\u0085\\\\u2028\\\\u2029]\");\n        ParseState parseState = new ParseState(url, robotNames);\n\n        for (String line : lines) {\n\n            // Get rid of HTML markup, in case some brain-dead webmaster has\n            // created an HTML\n            // page for robots.txt. We could do more sophisticated processing\n            // here to better\n            // handle bad HTML, but that's a very tiny percentage of all\n            // robots.txt files.\n            if (hasHTML) {\n                // Basic removal, might not handle complex cases like comments within tags.\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n\n            // trim out comments and whitespace\n            int hashPos = line.indexOf(\"#\");\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n\n            line = line.trim();\n            if (line.length() == 0) {\n                // Empty lines might signify the end of a user-agent's record.\n                // Handle this state change if necessary (depends on ParseState logic).\n                // Assuming handleUserAgent resets state for a new agent,\n                // and other handlers correctly associate with the current agent.\n                // The primary effect of empty lines is separating records for different user agents.\n                // The ParseState or handler logic should manage this context.\n                // If parseState needs explicit notification: parseState.handleEmptyLine();\n                continue;\n            }\n\n            RobotToken token = tokenize(line);\n            switch (token.getDirective()) {\n                case USER_AGENT:\n                handleUserAgent(parseState, token);\n                    break;\n\n                case DISALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleDisallow(parseState, token);\n                    break;\n\n                case ALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleAllow(parseState, token);\n                    break;\n\n                case CRAWL_DELAY:\n                parseState.setFinishedAgentFields(true);\n                handleCrawlDelay(parseState, token);\n                    break;\n\n                case SITEMAP:\n                parseState.setFinishedAgentFields(true);\n                handleSitemap(parseState, token);\n                    break;\n\n                case HTTP:\n                parseState.setFinishedAgentFields(true);\n                handleHttp(parseState, token);\n                    break;\n\n                case UNKNOWN:\n                reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                parseState.setFinishedAgentFields(true);\n                    break;\n\n                case MISSING:\n                // This case implies the line didn't match \"directive: value\" format\n                reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                // Whether this invalidates the current agent block might depend on interpretation.\n                // Setting finishedAgentFields might be too strict? Or correct? Assuming current logic is intended.\n                parseState.setFinishedAgentFields(true);\n                    break;\n\n                default:\n                    // All others we just ignore (e.g., HOST, NOINDEX, etc., depending on RobotDirective enum)\n                    // Explicitly ignored directives might also need setFinishedAgentFields(true)\n                    // based on whether they are considered part of the agent-specific block or global.\n                    // E.g., Host is deprecated and generally ignored.\n                    // NoIndex is Google-specific, might be handled similarly to Allow/Disallow.\n                    // Request-rate/Visit-time are archaic/rare.\n                    // Sitemaps are global, setting finishedAgentFields is correct.\n                    break;\n            }\n        }\n\n        this._numWarningsDuringLastParse.set(parseState._numWarnings);\n        SimpleRobotRules result = parseState.getRobotRules();\n        if (result.getCrawlDelay() > _maxCrawlDelay) {\n            // Some evil sites use a value like 3600 (seconds) for the crawl\n            // delay, which would cause lots of problems for us.\n            LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n        } else {\n            result.sortRules();\n            return result;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}