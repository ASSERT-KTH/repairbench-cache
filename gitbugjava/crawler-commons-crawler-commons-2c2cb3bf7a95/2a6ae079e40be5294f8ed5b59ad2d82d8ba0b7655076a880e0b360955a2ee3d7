{
    "generation": "import java.nio.ByteBuffer;\nimport java.nio.charset.CharacterCodingException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.CodingErrorAction;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collection;\nimport java.util.Locale;\nimport java.util.StringTokenizer;\nimport java.util.regex.Pattern;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n// Assume relevant imports and static fields are available from the original class context.\n// For completeness, adding the necessary ones here if not already imported in the environment.\n// For example:\n// import crawlercommons.robots.SimpleRobotRules;\n// import crawlercommons.robots.SimpleRobotRules.RobotRulesMode;\n// import crawlercommons.robots.BaseRobotRules; // For SimpleRobotRules class\n// import crawlercommons.robots.ParsedUrlGroup.RobotToken; // For RobotToken enum\n\n// Dummy definitions for types not included in the snippet, assume they exist in the actual project\nclass SimpleRobotRules {\n    enum RobotRulesMode { ALLOW_ALL, ALLOW_NONE }\n    private long crawlDelay;\n    public SimpleRobotRules(RobotRulesMode mode) {}\n    public long getCrawlDelay() { return crawlDelay; }\n    public void sortRules() {}\n}\n\nclass ParseState {\n    int _numWarnings;\n    public ParseState(String url, Collection<String> robotNames) {}\n    public void setFinishedAgentFields(boolean finishedAgentFields) {}\n    public SimpleRobotRules getRobotRules() { return new SimpleRobotRules(SimpleRobotRules.RobotRulesMode.ALLOW_ALL); } // Dummy\n}\n\nclass RobotToken {\n    enum Directive { USER_AGENT, DISALLOW, ALLOW, CRAWL_DELAY, SITEMAP, HTTP, UNKNOWN, MISSING }\n    public Directive getDirective() { return Directive.UNKNOWN; } // Dummy\n}\n\npublic class SimpleRobotRulesParser {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleRobotRulesParser.class);\n    private static final Pattern SIMPLE_HTML_PATTERN = Pattern.compile(\"<html\", Pattern.CASE_INSENSITIVE);\n    private static final Pattern USER_AGENT_PATTERN = Pattern.compile(\"User-agent\", Pattern.CASE_INSENSITIVE);\n    private final long _maxCrawlDelay = Long.MAX_VALUE; // Dummy value\n\n    // Dummy method implementations for the context\n    private RobotToken tokenize(String line) { return new RobotToken(); }\n    private void handleUserAgent(ParseState parseState, RobotToken token) {}\n    private void handleDisallow(ParseState parseState, RobotToken token) {}\n    private void handleAllow(ParseState parseState, RobotToken token) {}\n    private void handleCrawlDelay(ParseState parseState, RobotToken token) {}\n    private void handleSitemap(ParseState parseState, RobotToken token) {}\n    private void handleHttp(ParseState parseState, RobotToken token) {}\n    private void reportWarning(ParseState parseState, String format, Object... args) { parseState._numWarnings++; }\n\n    // This field needs to be defined in the actual class\n    private final java.util.concurrent.atomic.AtomicInteger _numWarningsDuringLastParse = new java.util.concurrent.atomic.AtomicInteger(0);\n\n\n    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n        // If there's nothing there, treat it like we have no restrictions.\n        if ((content == null) || (content.length == 0)) {\n            return new SimpleRobotRules(SimpleRobotRules.RobotRulesMode.ALLOW_ALL);\n        }\n\n        int bytesLen = content.length;\n        int offset = 0;\n        Charset encoding = null; // Changed to null, will be determined below\n\n        // Check for a UTF-8 BOM at the beginning (EF BB BF)\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n            encoding = StandardCharsets.UTF_8;\n        }\n        // Check for UTF-16LE BOM at the beginning (FF FE)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        // Check for UTF-16BE BOM at the beginning (FE FF)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n\n        String contentAsStr;\n        // If no BOM was found, try to determine encoding (UTF-8, then ISO-8859-1 fallback)\n        if (encoding == null) {\n            ByteBuffer byteBuffer = ByteBuffer.wrap(content, offset, bytesLen);\n            CharsetDecoder utf8Decoder = StandardCharsets.UTF_8.newDecoder()\n                                               .onMalformedInput(CodingErrorAction.REPORT)\n                                               .onUnmappableCharacter(CodingErrorAction.REPORT);\n            CharsetDecoder iso88591Decoder = StandardCharsets.ISO_8859_1.newDecoder()\n                                                 .onMalformedInput(CodingErrorAction.REPLACE) // Allow replacement for malformed input\n                                                 .onUnmappableCharacter(CodingErrorAction.REPLACE); // Allow replacement for unmappable characters\n\n            try {\n                // Try UTF-8 first for content without BOM\n                contentAsStr = utf8Decoder.decode(byteBuffer).toString();\n                encoding = StandardCharsets.UTF_8; // Record the successful encoding\n            } catch (CharacterCodingException e) {\n                // If UTF-8 decoding fails (e.g., malformed sequence), fall back to ISO-8859-1\n                // Reset buffer position before trying another decoder\n                byteBuffer.rewind();\n                LOGGER.debug(\"UTF-8 decoding failed for robots.txt ({}). Falling back to ISO-8859-1. Error: {}\", url, e.getMessage());\n                contentAsStr = iso88591Decoder.decode(byteBuffer).toString();\n                encoding = StandardCharsets.ISO_8859_1; // Record the successful encoding\n            }\n        } else {\n            // Use the encoding determined by BOM (already set)\n            contentAsStr = new String(content, offset, bytesLen, encoding);\n        }\n\n        // Decide if we need to do special HTML processing.\n        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n\n        // If it looks like it contains HTML, but doesn't have a user agent\n        // field, then\n        // assume somebody messed up and returned back to us a random HTML page\n        // instead\n        // of a robots.txt file.\n        boolean hasHTML = false;\n        if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n            if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n                LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n                return new SimpleRobotRules(SimpleRobotRules.RobotRulesMode.ALLOW_ALL);\n            } else {\n                // We'll try to strip out HTML tags below.\n                if (isHtmlType) {\n                    LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n                } else {\n                    LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n                }\n\n                hasHTML = true;\n            }\n        }\n\n        // Break on anything that might be used as a line ending. Since\n        // tokenizer doesn't return empty tokens, a \\r\\n sequence still\n        // works since it looks like an empty string between the \\r and \\n.\n        StringTokenizer lineParser = new StringTokenizer(contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n        ParseState parseState = new ParseState(url, robotNames);\n\n        while (lineParser.hasMoreTokens()) {\n            String line = lineParser.nextToken();\n\n            // Get rid of HTML markup, in case some brain-dead webmaster has\n            // created an HTML\n            // page for robots.txt. We could do more sophisticated processing\n            // here to better\n            // handle bad HTML, but that's a very tiny percentage of all\n            // robots.txt files.\n            if (hasHTML) {\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n\n            // trim out comments and whitespace\n            int hashPos = line.indexOf(\"#\");\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n\n            line = line.trim();\n            if (line.length() == 0) {\n                continue;\n            }\n\n            RobotToken token = tokenize(line);\n            switch (token.getDirective()) {\n                case USER_AGENT:\n                handleUserAgent(parseState, token);\n                    break;\n\n                case DISALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleDisallow(parseState, token);\n                    break;\n\n                case ALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleAllow(parseState, token);\n                    break;\n\n                case CRAWL_DELAY:\n                parseState.setFinishedAgentFields(true);\n                handleCrawlDelay(parseState, token);\n                    break;\n\n                case SITEMAP:\n                parseState.setFinishedAgentFields(true);\n                handleSitemap(parseState, token);\n                    break;\n\n                case HTTP:\n                parseState.setFinishedAgentFields(true);\n                handleHttp(parseState, token);\n                    break;\n\n                case UNKNOWN:\n                reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                parseState.setFinishedAgentFields(true);\n                    break;\n\n                case MISSING:\n                reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                parseState.setFinishedAgentFields(true);\n                    break;\n\n                default:\n                    // All others we just ignore\n                    // TODO KKr - which of these should be setting\n                    // finishedAgentFields to true?\n                    // TODO KKr - handle no-index\n                    // TODO KKr - handle request-rate and visit-time\n                    break;\n            }\n        }\n\n        this._numWarningsDuringLastParse.set(parseState._numWarnings);\n        SimpleRobotRules result = parseState.getRobotRules();\n        if (result.getCrawlDelay() > _maxCrawlDelay) {\n            // Some evil sites use a value like 3600 (seconds) for the crawl\n            // delay, which would cause lots of problems for us.\n            LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n            return new SimpleRobotRules(SimpleRobotRules.RobotRulesMode.ALLOW_NONE);\n        } else {\n            result.sortRules();\n            return result;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}