{
    "generation": "    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n        // If there's nothing there, treat it like we have no restrictions.\n        if ((content == null) || (content.length == 0)) {\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n\n        int bytesLen = content.length;\n        int offset = 0;\n        // Per RFC draft (https://tools.ietf.org/html/draft-koster-rep-01) and Google's spec\n        // (https://developers.google.com/search/reference/robots_txt#file-format),\n        // the default encoding is UTF-8.\n        Charset encoding = StandardCharsets.UTF_8;\n\n        // Check for a UTF-8 BOM at the beginning (EF BB BF)\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n            encoding = StandardCharsets.UTF_8; // Already UTF-8, but explicit\n        }\n        // Check for UTF-16LE BOM at the beginning (FF FE)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        // Check for UTF-16BE BOM at the beginning (FE FF)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n\n        String contentAsStr;\n        try {\n            // Use the detected or default encoding. Handle malformed input.\n            contentAsStr = new String(content, offset, bytesLen, encoding);\n        } catch (Exception e) {\n            // Handle case where content is not valid in the detected/default encoding\n            // Log the error and treat as empty rules (allow all).\n             LOGGER.warn(\"Failed to decode robots.txt content using {} encoding for url: {}. Treating as empty.\", encoding, url, e);\n             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n\n\n        // Decide if we need to do special HTML processing.\n        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n\n        // If it looks like it contains HTML, but doesn't have a user agent\n        // field, then\n        // assume somebody messed up and returned back to us a random HTML page\n        // instead\n        // of a robots.txt file.\n        boolean hasHTML = false;\n        if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n            if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n                LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n                return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n            } else {\n                // We'll try to strip out HTML tags below.\n                if (isHtmlType) {\n                    LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n                } else {\n                    LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n                }\n\n                hasHTML = true;\n            }\n        }\n\n        // Break on anything that might be used as a line ending. Since\n        // tokenizer doesn't return empty tokens, a \\r\\n sequence still\n        // works since it looks like an empty string between the \\r and \\n.\n        StringTokenizer lineParser = new StringTokenizer(contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n        ParseState parseState = new ParseState(url, robotNames, exactUserAgentMatching); // Pass exactUserAgentMatching\n\n        while (lineParser.hasMoreTokens()) {\n            String line = lineParser.nextToken();\n\n            // Get rid of HTML markup, in case some brain-dead webmaster has\n            // created an HTML\n            // page for robots.txt. We could do more sophisticated processing\n            // here to better\n            // handle bad HTML, but that's a very tiny percentage of all\n            // robots.txt files.\n            if (hasHTML) {\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n\n            // trim out comments and whitespace\n            int hashPos = line.indexOf(\"#\");\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n\n            line = line.trim();\n            if (line.length() == 0) {\n                continue;\n            }\n\n            RobotToken token = tokenize(line);\n            // Google's spec: \"Values for the path field [in Allow/Disallow] should be used\n            // after URL-unescaping according to RFC 3986.\"\n            // We assume the handler methods (handleAllow, handleDisallow) perform this unescaping.\n            switch (token.getDirective()) {\n                case USER_AGENT:\n                    handleUserAgent(parseState, token);\n                    break;\n\n                case DISALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleDisallow(parseState, token);\n                    break;\n\n                case ALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleAllow(parseState, token);\n                    break;\n\n                case CRAWL_DELAY:\n                    parseState.setFinishedAgentFields(true);\n                    handleCrawlDelay(parseState, token);\n                    break;\n\n                case SITEMAP:\n                    // Sitemaps are not user-agent specific, but seeing one implies\n                    // the previous agent block is finished.\n                    parseState.setFinishedAgentFields(true);\n                    handleSitemap(parseState, token);\n                    break;\n\n                case HTTP:\n                    parseState.setFinishedAgentFields(true);\n                    handleHttp(parseState, token);\n                    break;\n\n                case UNKNOWN:\n                    reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                    // Unknown directives apply to the current agent block, so don't necessarily finish it.\n                    // parseState.setFinishedAgentFields(true); // Reconsider this logic based on spec if needed.\n                    break;\n\n                case MISSING:\n                    reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                    // Unparsable lines don't necessarily end an agent block.\n                    // parseState.setFinishedAgentFields(true); // Reconsider this.\n                    break;\n\n                default:\n                    // All others we just ignore (e.g. Host, Noindex, Request-rate, Visit-time mentioned in drafts/extensions)\n                    // These might implicitly end the user-agent fields depending on the specific directive and standard interpretation.\n                    // For now, we follow the pattern of setting finishedAgentFields for recognized non-UA directives.\n                    // parseState.setFinishedAgentFields(true); // Add if specific directives require it\n                    break;\n            }\n        }\n\n        this._numWarningsDuringLastParse.set(parseState._numWarnings);\n        SimpleRobotRules result = parseState.getRobotRules();\n        if (result.getCrawlDelay() > _maxCrawlDelay) {\n            // Some evil sites use a value like 3600 (seconds) for the crawl\n            // delay, which would cause lots of problems for us.\n            LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n            // Return rules that disallow everything but keep sitemap info\n            SimpleRobotRules restrictedRules = new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n            restrictedRules.addSitemaps(result.getSitemaps());\n            return restrictedRules;\n        } else {\n            result.sortRules();\n            return result;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}