{
    "generation": "private SimpleRobotRules parseContent(String url, byte[] content, String contentType,\n                                      Collection<String> robotNames,\n                                      boolean exactUserAgentMatching) {\n    // If there's nothing there, treat it like we have no restrictions.\n    if ((content == null) || (content.length == 0)) {\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n    }\n\n    int bytesLen = content.length;\n    int offset = 0;\n    // Change default from US_ASCII to UTF_8 so that unescaped Unicode paths\n    // in robots.txt are decoded correctly.\n    Charset encoding = StandardCharsets.UTF_8;\n\n    // Check for a UTF-8 BOM at the beginning (EF BB BF)\n    if ((bytesLen >= 3)\n            && (content[0] == (byte) 0xEF)\n            && (content[1] == (byte) 0xBB)\n            && (content[2] == (byte) 0xBF)) {\n        offset = 3;\n        bytesLen -= 3;\n        encoding = StandardCharsets.UTF_8;\n    }\n    // Check for UTF-16LE BOM at the beginning (FF FE)\n    else if ((bytesLen >= 2)\n            && (content[0] == (byte) 0xFF)\n            && (content[1] == (byte) 0xFE)) {\n        offset = 2;\n        bytesLen -= 2;\n        encoding = StandardCharsets.UTF_16LE;\n    }\n    // Check for UTF-16BE BOM at the beginning (FE FF)\n    else if ((bytesLen >= 2)\n            && (content[0] == (byte) 0xFE)\n            && (content[1] == (byte) 0xFF)) {\n        offset = 2;\n        bytesLen -= 2;\n        encoding = StandardCharsets.UTF_16BE;\n    }\n\n    String contentAsStr = new String(content, offset, bytesLen, encoding);\n\n    // Decide if we need to do special HTML processing.\n    boolean isHtmlType = ((contentType != null)\n            && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n\n    // If it looks like HTML but doesn't have a user-agent field,\n    // assume this is a mis-served HTML page.\n    boolean hasHTML = false;\n    if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n        if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n            LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        } else {\n            if (isHtmlType) {\n                LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n            } else {\n                LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n            }\n            hasHTML = true;\n        }\n    }\n\n    // Split on all line-ending characters\n    StringTokenizer lineParser = new StringTokenizer(\n            contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n    ParseState parseState = new ParseState(url, robotNames);\n\n    while (lineParser.hasMoreTokens()) {\n        String line = lineParser.nextToken();\n        if (hasHTML) {\n            line = line.replaceAll(\"<[^>]+>\", \"\");\n        }\n        int hashPos = line.indexOf(\"#\");\n        if (hashPos >= 0) {\n            line = line.substring(0, hashPos);\n        }\n        line = line.trim();\n        if (line.isEmpty()) {\n            continue;\n        }\n\n        RobotToken token = tokenize(line);\n        switch (token.getDirective()) {\n            case USER_AGENT:\n                handleUserAgent(parseState, token);\n                break;\n            case DISALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleDisallow(parseState, token);\n                break;\n            case ALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleAllow(parseState, token);\n                break;\n            case CRAWL_DELAY:\n                parseState.setFinishedAgentFields(true);\n                handleCrawlDelay(parseState, token);\n                break;\n            case SITEMAP:\n                parseState.setFinishedAgentFields(true);\n                handleSitemap(parseState, token);\n                break;\n            case HTTP:\n                parseState.setFinishedAgentFields(true);\n                handleHttp(parseState, token);\n                break;\n            case UNKNOWN:\n                reportWarning(parseState,\n                              \"Unknown directive in robots.txt file: {}\",\n                              line);\n                parseState.setFinishedAgentFields(true);\n                break;\n            case MISSING:\n                reportWarning(parseState,\n                              \"Unknown line in robots.txt file (size {}): {}\",\n                              content.length, line);\n                parseState.setFinishedAgentFields(true);\n                break;\n            default:\n                // ignore all other directives\n                break;\n        }\n    }\n\n    this._numWarningsDuringLastParse.set(parseState._numWarnings);\n    SimpleRobotRules result = parseState.getRobotRules();\n    if (result.getCrawlDelay() > _maxCrawlDelay) {\n        LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\",\n                     url);\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n    } else {\n        result.sortRules();\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}