{
    "generation": "    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n        // If there's nothing there, treat it like we have no restrictions.\n        if ((content == null) || (content.length == 0)) {\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n\n        int bytesLen = content.length;\n        int offset = 0;\n        Charset encoding = StandardCharsets.US_ASCII;\n\n        // Check for a UTF-8 BOM at the beginning (EF BB BF)\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n            encoding = StandardCharsets.UTF_8;\n        }\n        // Check for UTF-16LE BOM at the beginning (FF FE)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        // Check for UTF-16BE BOM at the beginning (FE FF)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n\n        String contentAsStr;\n        contentAsStr = new String(content, offset, bytesLen, encoding);\n\n        // Decide if we need to do special HTML processing.\n        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n\n        // If it looks like it contains HTML, but doesn't have a user agent\n        // field, then\n        // assume somebody messed up and returned back to us a random HTML page\n        // instead\n        // of a robots.txt file.\n        boolean hasHTML = false;\n        if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n            if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n                LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n                return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n            } else {\n                // We'll try to strip out HTML tags below.\n                if (isHtmlType) {\n                    LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n                } else {\n                    LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n                }\n\n                hasHTML = true;\n            }\n        }\n\n        // Break on anything that might be used as a line ending. Since\n        // tokenizer doesn't return empty tokens, a \\r\\n sequence still\n        // works since it looks like an empty string between the \\r and \\n.\n        StringTokenizer lineParser = new StringTokenizer(contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n        ParseState parseState = new ParseState(url, robotNames);\n\n        while (lineParser.hasMoreTokens()) {\n            String line = lineParser.nextToken();\n\n            // Get rid of HTML markup, in case some brain-dead webmaster has\n            // created an HTML\n            // page for robots.txt. We could do more sophisticated processing\n            // here to better\n            // handle bad HTML, but that's a very tiny percentage of all\n            // robots.txt files.\n            if (hasHTML) {\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n\n            // trim out comments and whitespace\n            int hashPos = line.indexOf(\"#\");\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n\n            line = line.trim();\n            if (line.length() == 0) {\n                continue;\n            }\n\n            RobotToken originalToken = tokenize(line);\n            RobotToken tokenToProcess = originalToken; // By default, use the original token\n\n            RobotDirective directive = originalToken.getDirective();\n            // For Allow/Disallow directives, we need to normalize the path data.\n            // Non-ASCII characters in paths should be percent-encoded using UTF-8.\n            // This ensures that rule paths are stored in the same canonical form as\n            // URL paths are processed by the isAllowed() method (which uses URI.getPath()).\n            if (directive == RobotDirective.ALLOW || directive == RobotDirective.DISALLOW) {\n                String pathData = originalToken.getData();\n                \n                StringBuilder normalizedPath = null; // Lazily initialized if modification is needed\n                for (int i = 0; i < pathData.length(); i++) {\n                    char c = pathData.charAt(i);\n                    if (c > 127) { // Non-ASCII character\n                        if (normalizedPath == null) {\n                            // Initialize StringBuilder with a capacity that anticipates expansion\n                            normalizedPath = new StringBuilder(pathData.length() + 16);\n                            // Append the part of the string before this non-ASCII character\n                            normalizedPath.append(pathData, 0, i);\n                        }\n                        // Convert char to UTF-8 bytes and percent-encode each byte\n                        byte[] utf8Bytes = Character.toString(c).getBytes(StandardCharsets.UTF_8);\n                        for (byte b : utf8Bytes) {\n                            normalizedPath.append('%');\n                            normalizedPath.append(Character.forDigit((b >> 4) & 0xF, 16)); // Upper nibble (lowercase hex)\n                            normalizedPath.append(Character.forDigit(b & 0xF, 16));      // Lower nibble (lowercase hex)\n                        }\n                    } else {\n                        // ASCII character (including '%' from existing escapes)\n                        if (normalizedPath != null) {\n                            // Append to normalizedPath if it has been initialized\n                            normalizedPath.append(c);\n                        }\n                    }\n                }\n\n                if (normalizedPath != null) {\n                    // If modifications were made (i.e., non-ASCII chars were encoded),\n                    // create a new token with the normalized path.\n                    tokenToProcess = new RobotToken(originalToken.getDirective(), normalizedPath.toString());\n                }\n            }\n            \n            // Use tokenToProcess (which may be the originalToken or the new one with normalized path)\n            switch (tokenToProcess.getDirective()) {\n                case USER_AGENT:\n                    handleUserAgent(parseState, tokenToProcess);\n                    break;\n\n                case DISALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleDisallow(parseState, tokenToProcess);\n                    break;\n\n                case ALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleAllow(parseState, tokenToProcess);\n                    break;\n\n                case CRAWL_DELAY:\n                    parseState.setFinishedAgentFields(true);\n                    handleCrawlDelay(parseState, tokenToProcess);\n                    break;\n\n                case SITEMAP:\n                    parseState.setFinishedAgentFields(true);\n                    handleSitemap(parseState, tokenToProcess);\n                    break;\n\n                case HTTP:\n                    parseState.setFinishedAgentFields(true);\n                    handleHttp(parseState, tokenToProcess);\n                    break;\n\n                case UNKNOWN:\n                    reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                    parseState.setFinishedAgentFields(true);\n                    break;\n\n                case MISSING:\n                    reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                    parseState.setFinishedAgentFields(true);\n                    break;\n\n                default:\n                    // All others we just ignore\n                    break;\n            }\n        }\n\n        this._numWarningsDuringLastParse.set(parseState._numWarnings);\n        SimpleRobotRules result = parseState.getRobotRules();\n        if (result.getCrawlDelay() > _maxCrawlDelay) {\n            LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n        } else {\n            result.sortRules();\n            return result;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}