{
    "generation": "private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n    // If there's nothing there, treat it like we have no restrictions.\n    if ((content == null) || (content.length == 0)) {\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n    }\n\n    int bytesLen = content.length;\n    int offset = 0;\n    Charset encoding = StandardCharsets.US_ASCII;\n\n    // Check for BOMs to determine encoding\n    if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n        offset = 3;\n        bytesLen -= 3;\n        encoding = StandardCharsets.UTF_8;\n    } else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n        offset = 2;\n        bytesLen -= 2;\n        encoding = StandardCharsets.UTF_16LE;\n    } else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n        offset = 2;\n        bytesLen -= 2;\n        encoding = StandardCharsets.UTF_16BE;\n    }\n\n    // Process the content line by line as bytes\n    ParseState parseState = new ParseState(url, robotNames);\n\n    try {\n        // Create a reader with the detected encoding\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                new ByteArrayInputStream(content, offset, bytesLen), encoding));\n\n        String line;\n        boolean isHtmlType = (contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\");\n\n        while ((line = reader.readLine()) != null) {\n            if (isHtmlType) {\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n\n            int hashPos = line.indexOf('#');\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n            line = line.trim();\n            if (line.isEmpty()) {\n                continue;\n            }\n\n            RobotToken token = tokenize(line);\n            switch (token.getDirective()) {\n                case USER_AGENT:\n                    handleUserAgent(parseState, token);\n                    break;\n                case DISALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleDisallow(parseState, token);\n                    break;\n                case ALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleAllow(parseState, token);\n                    break;\n                case CRAWL_DELAY:\n                    parseState.setFinishedAgentFields(true);\n                    handleCrawlDelay(parseState, token);\n                    break;\n                case SITEMAP:\n                    parseState.setFinishedAgentFields(true);\n                    handleSitemap(parseState, token);\n                    break;\n                case HTTP:\n                    parseState.setFinishedAgentFields(true);\n                    handleHttp(parseState, token);\n                    break;\n                case UNKNOWN:\n                    reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                    parseState.setFinishedAgentFields(true);\n                    break;\n                case MISSING:\n                    reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                    parseState.setFinishedAgentFields(true);\n                    break;\n                default:\n                    // All others are ignored\n                    break;\n            }\n        }\n    } catch (IOException e) {\n        LOGGER.warn(\"Error parsing robots.txt content\", e);\n    }\n\n    this._numWarningsDuringLastParse.set(parseState._numWarnings);\n    SimpleRobotRules result = parseState.getRobotRules();\n    if (result.getCrawlDelay() > _maxCrawlDelay) {\n        LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n    } else {\n        result.sortRules();\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}