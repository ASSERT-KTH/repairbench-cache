{
    "generation": "    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of\n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see\n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled\n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init(); // Clears this.tokens\n        this.options = options;\n\n        // An iterator for the command line tokens\n        // Use Java 5 generics for safety\n        Iterator<String> iter = Arrays.asList(arguments).iterator();\n\n        // A flag to remember if we need to stop processing options\n        boolean eatTheRest = false;\n\n        // Process each command line token\n        while (iter.hasNext())\n        {\n            // Get the next command line token\n            String token = iter.next();\n\n            // If stopAtNonOption is enabled and we must eat the rest\n            if (eatTheRest)\n            {\n                this.tokens.add(token); // Add token directly\n            }\n            // Handle the special token \"--\"\n            else if (\"--\".equals(token))\n            {\n                this.tokens.add(token);\n                eatTheRest = true; // Stop processing options\n            }\n            // Handle the special token \"-\"\n            else if (\"-\".equals(token))\n            {\n                this.tokens.add(token);\n            }\n            // Handle options starting with \"--\"\n            else if (token.startsWith(\"--\"))\n            {\n                int eq = token.indexOf('=');\n                String opt = eq == -1 ? token : token.substring(0, eq);\n\n                // Check if the option (the part before =) is recognized\n                if (!options.hasOption(opt)) // Option NOT recognized\n                {\n                    if (stopAtNonOption)\n                    {\n                        // If stopping, add the original token as an argument and stop\n                        this.tokens.add(token);\n                        eatTheRest = true;\n                    }\n                    else\n                    {\n                        // If not stopping, add as an argument (Rule 6)\n                        this.tokens.add(token);\n                    }\n                }\n                else // Option recognized\n                {\n                    if (eq != -1) // Contains =\n                    {\n                        this.tokens.add(opt); // Add \"--opt\" part\n                        // Fix: Add value part without \"=\"\n                        this.tokens.add(token.substring(eq + 1));\n                    }\n                    else\n                    {\n                        this.tokens.add(token); // Add \"--opt\"\n                    }\n                }\n            }\n            // Handle options starting with \"-\"\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2) // Like -X\n                {\n                     // Check if the option -X is recognized\n                    if (!options.hasOption(token)) // Option -X NOT recognized\n                    {\n                        if (stopAtNonOption)\n                        {\n                            // If stopping, add the original token as an argument and stop\n                            this.tokens.add(token);\n                            eatTheRest = true;\n                        }\n                        else\n                        {\n                            // If not stopping, add as argument (Rule 6)\n                            this.tokens.add(token);\n                        }\n                    }\n                    else // Option -X recognized\n                    {\n                        // processOptionToken adds the token to this.tokens and sets currentOption\n                        processOptionToken(token, stopAtNonOption);\n                    }\n                }\n                // Potential cluster (-abc) or long opt (-longopt), length > 2\n                else if (options.hasOption(token)) // Check if token as a whole is registered (e.g. -longopt)\n                {\n                     this.tokens.add(token);\n                }\n                // Requires bursting OR is unrecognized -abc type token\n                else\n                {\n                    // If stopAtNonOption is true, don't burst, just add token as argument and stop\n                    if (stopAtNonOption)\n                    {\n                        this.tokens.add(token);\n                        eatTheRest = true;\n                    }\n                    else\n                    {\n                        // Otherwise (stopAtNonOption is false), burst the token\n                        // Pass false, as stopAtNonOption=true case is handled above.\n                        // burstToken should add to this.tokens\n                        burstToken(token, false);\n                    }\n                }\n            }\n            // Handle non-option arguments\n            else\n            {\n                // If stopping, add the original token as an argument and stop\n                if (stopAtNonOption)\n                {\n                    this.tokens.add(token);\n                    eatTheRest = true;\n                }\n                else\n                {\n                     this.tokens.add(token);\n                }\n            }\n\n            // Gobble arguments for the current option ONLY if we are NOT stopping\n            if (!eatTheRest)\n            {\n                gobble(iter);\n            }\n        }\n\n        // Use String[] generics for type safety\n        return this.tokens.toArray(new String[this.tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}