{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n\n    // Check if this node is a function call.\n    if (node.getType() == Token.CALL) {\n      Node callee = node.getFirstChild();\n      Node functionNameNode = null;\n\n      // Case 1: Direct call, e.g., func()\n      if (callee.getType() == Token.NAME) {\n        functionNameNode = callee;\n      }\n      // Case 2: Property access call, e.g., obj.method(), obj.call(), func.call()\n      else if (callee.getType() == Token.GETPROP) {\n        // Check if it's a call via .call or .apply\n        String propName = callee.getLastChild().getString();\n        if (\"call\".equals(propName) || \"apply\".equals(propName)) {\n          // The function being called via .call/.apply is the object\n          // part of the GETPROP.\n          Node target = callee.getFirstChild();\n          // We are interested if the function being called is referenced\n          // by a simple name, e.g., func.call()\n          if (target.getType() == Token.NAME) {\n            functionNameNode = target;\n          }\n          // Note: We ignore cases like obj.func.call() or complex expressions,\n          // focusing on simple NAME.call/apply consistent with the original\n          // function's apparent scope (handling simple NAME calls).\n        }\n        // Case 3: Regular method call, e.g., obj.method().\n        // We ignore this, as the original code did not track these, and\n        // the goal is likely finding calls to functions defined by simple names.\n      }\n\n      // If we identified a function name node (either direct or via .call/.apply)\n      if (functionNameNode != null) {\n        changed.add(functionNameNode.getString());\n      }\n    }\n\n    // Recursively traverse the children.\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}