{
    "generation": "import io.netty.buffer.ByteBuf;\nimport io.netty.channel.Channel;\n\nimport java.net.SocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\nimport java.util.LinkedList;\nimport java.util.List;\n\n// Assume Position, DeviceSession, UnitsConverter, getProtocolName, getDeviceSession are defined elsewhere.\n// This is a placeholder to make the snippet self-contained for compilation purposes.\nclass Position {\n    public static final String KEY_EVENT = \"event\";\n    public static final String KEY_SATELLITES = \"sat\";\n    public static final String KEY_RSSI = \"rssi\";\n    public static final String KEY_OUTPUT = \"out\";\n    public static final String KEY_INPUT = \"in\";\n    public static final String KEY_LOCK = \"lock\";\n    public static final String KEY_THROTTLE = \"throttle\";\n    public static final String KEY_FUEL_LEVEL = \"fuel\";\n    public static final String KEY_BATTERY_LEVEL = \"battery\";\n    public static final String KEY_HDOP = \"hdop\";\n    public static final String PREFIX_ADC = \"adc\";\n    public static final String KEY_BATTERY = \"batteryVoltage\";\n    public static final String KEY_POWER = \"power\";\n    public static final String KEY_OBD_SPEED = \"obdSpeed\";\n    public static final String KEY_FUEL_USED = \"fuelUsed\";\n    public static final String KEY_RPM = \"rpm\";\n    public static final String KEY_COOLANT_TEMP = \"coolantTemp\";\n    public static final String PREFIX_TEMP = \"temp\";\n    public static final String KEY_FUEL_CONSUMPTION = \"fuelConsumption\";\n    public static final String KEY_ODOMETER = \"odometer\";\n    public static final String KEY_DRIVER_UNIQUE_ID = \"driverUniqueId\";\n    public static final String KEY_RESULT = \"result\";\n\n    private long deviceId;\n    private String protocolName;\n    private Date time;\n    private double latitude;\n    private double longitude;\n    private double altitude;\n    private double speed;\n    private double course;\n    private boolean valid;\n    private java.util.Map<String, Object> attributes = new java.util.HashMap<>();\n\n    public Position(String protocolName) {\n        this.protocolName = protocolName;\n    }\n\n    public void setDeviceId(long deviceId) { this.deviceId = deviceId; }\n    public void setTime(Date time) { this.time = time; }\n    public void setValid(boolean valid) { this.valid = valid; }\n    public void setLatitude(double latitude) { this.latitude = latitude; }\n    public void setLongitude(double longitude) { this.longitude = longitude; }\n    public void setAltitude(double altitude) { this.altitude = altitude; }\n    public void setSpeed(double speed) { this.speed = speed; }\n    public void setCourse(double course) { this.course = course; }\n    public void set(String key, Object value) { attributes.put(key, value); }\n}\n\nclass DeviceSession {\n    private long deviceId;\n    public DeviceSession(long deviceId) { this.deviceId = deviceId; }\n    public long getDeviceId() { return deviceId; }\n}\n\nclass UnitsConverter {\n    public static double knotsFromKph(int kph) { return kph * 0.539957; }\n}\n\n// Dummy class to simulate the context where this function exists\nabstract class MeitrackProtocolDecoder {\n    protected String getProtocolName() { return \"meitrack\"; }\n    protected DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String imei) {\n        // Dummy implementation for testing purposes\n        return new DeviceSession(12345);\n    }\n\n    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte(); // This length is the length of the *value* part\n                int bytesConsumedFromValue = 0; // Track how many bytes of the 'value' part have been consumed\n\n                switch (id) {\n                    case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: case 0x30: case 0x31:\n                        buf.readUnsignedByte(); // label\n                        bytesConsumedFromValue += 1;\n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        bytesConsumedFromValue += 2;\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); // alarm protocol\n                        bytesConsumedFromValue += 1;\n                        buf.readUnsignedByte(); // alarm type\n                        bytesConsumedFromValue += 1;\n                        break;\n                    case 0xFEA8:\n                        buf.readUnsignedByte(); // battery status\n                        bytesConsumedFromValue += 1;\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        bytesConsumedFromValue += 1;\n                        buf.readUnsignedByte(); // battery alert\n                        bytesConsumedFromValue += 1;\n                        break;\n                    default:\n                        // For unhandled IDs, no specific value parsing is done,\n                        // so bytesConsumedFromValue remains 0.\n                        break;\n                }\n                // After processing the specific case, skip any remaining bytes for this parameter's value\n                // (length - bytesConsumedFromValue)\n                buf.skipBytes(length - bytesConsumedFromValue);\n            }\n\n            positions.add(position);\n        }\n\n        return positions;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}