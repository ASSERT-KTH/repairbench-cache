{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    // Read up to the end of the buffer to avoid IndexOutOfBoundsException\n    if (buf.readableBytes() >= 15) {\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n    } else {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    if (buf.readableBytes() >= Integer.BYTES) {\n        buf.readUnsignedIntLE(); // remaining cache\n    } else {\n        return null;\n    }\n\n    if (buf.readableBytes() >= Short.BYTES) {\n        int count = buf.readUnsignedShortLE();\n    } else {\n        return null;\n    }\n\n    for (int i = 0; i < count; i++) {\n        if (!buf.isReadable(2)) {\n            break;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // index\n\n        if (buf.isReadable(1)) {\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (!buf.isReadable(1)) {\n                    break;\n                }\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                if (extension) {\n                    if (!buf.isReadable(2)) {\n                        break;\n                    }\n                    buf.readUnsignedShort();\n                } else {\n                    if (!buf.isReadable(1)) {\n                        break;\n                    }\n                    buf.readUnsignedByte();\n                }\n            }\n        }\n\n        if (buf.isReadable(1)) {\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (!buf.isReadable(1)) {\n                    break;\n                }\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                if (extension) {\n                    if (!buf.isReadable(2)) {\n                        break;\n                    }\n                    buf.readUnsignedShort();\n                } else {\n                    if (!buf.isReadable(1)) {\n                        break;\n                    }\n                    buf.readUnsignedByte();\n                }\n            }\n        }\n\n        if (buf.isReadable(1)) {\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (!buf.isReadable(1)) {\n                    break;\n                }\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int length = buf.readUnsignedByte();\n                if (length > buf.readableBytes()) {\n                   length = buf.readableBytes();\n                }\n                if (extension) {\n                    if (!buf.isReadable(2)) {\n                        break;\n                    }\n                    int id = buf.readUnsignedShort();\n                    switch (id) {\n                        // ... existing switch cases ...\n                        default:\n                            buf.skipBytes(length);\n                            break;\n                    }\n                } else {\n                    if (!buf.isReadable(1)) {\n                        break;\n                    }\n                    int id = buf.readUnsignedByte();\n                    switch (id) {\n                        // ... existing switch cases ...\n                        default:\n                            buf.skipBytes(length);\n                            break;\n                    }\n                }\n            }\n        }\n\n        positions.add(position);\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}