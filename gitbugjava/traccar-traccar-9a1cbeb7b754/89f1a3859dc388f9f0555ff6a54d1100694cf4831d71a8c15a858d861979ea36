{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1); // ,CCE, type\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            // Parameters group 1 (unsigned byte)\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte(); // skip value\n                        break;\n                }\n            }\n\n            // Parameters group 2 (unsigned short LE)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // Assuming scale 0.1 based on other protocols\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91: // reserved\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Assuming scale 0.1\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE()); // Units unclear, assuming Celsius\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE()); // Changed to readShortLE as temp can be negative\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE()); // Units unclear\n                        break;\n                    default:\n                        buf.readUnsignedShortLE(); // skip value\n                        break;\n                }\n            }\n\n            // Parameters group 3 (unsigned int LE)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // Seconds since 2000-01-01\n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE()); // Assuming meters\n                        break;\n                    case 0x0D:\n                        position.set(Position.KEY_HOURS, UnitsConverter.msFromSeconds(buf.readUnsignedIntLE()));\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Assuming 0.001 Liter\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); // Units unclear\n                        break;\n                    default:\n                        buf.readUnsignedIntLE(); // skip value\n                        break;\n                }\n            }\n\n            // Parameters group 4 (variable length)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                int bytesConsumed = 0;\n                switch (id) {\n                    case 0x2A: // External Temperature Sensor 1\n                    case 0x2B: // External Temperature Sensor 2\n                    case 0x2C: // External Temperature Sensor 3\n                    case 0x2D: // External Temperature Sensor 4\n                    case 0x2E: // External Temperature Sensor 5\n                    case 0x2F: // External Temperature Sensor 6\n                    case 0x30: // External Temperature Sensor 7\n                    case 0x31: // External Temperature Sensor 8\n                        buf.readUnsignedByte(); // label\n                        position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.01); // Store as temp1..temp8\n                        bytesConsumed = 1 + 2;\n                        break;\n                    case 0xFE31: // Alarm data\n                        buf.readUnsignedByte(); // alarm protocol\n                        buf.readUnsignedByte(); // alarm type\n                        buf.skipBytes(length - 2); // skip remaining specific alarm data\n                        bytesConsumed = length; // Already handled within the case\n                        break;\n                    case 0xFEA8: // Extended Battery Info\n                        buf.readUnsignedByte(); // battery status\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        buf.readUnsignedByte(); // battery alert\n                        bytesConsumed = 1 + 1 + 1;\n                        break;\n                    default:\n                        // Skip the data for unknown parameters\n                        buf.skipBytes(length);\n                        bytesConsumed = length; // Mark length bytes as consumed\n                        break;\n                }\n                // Ensure exactly 'length' bytes are consumed, even if specific case logic was wrong or length was unexpected\n                if (bytesConsumed < length) {\n                    buf.skipBytes(length - bytesConsumed);\n                } else if (bytesConsumed > length) {\n                    // This shouldn't happen if logic is correct, but log if it does\n                    // Potentially adjust reader index backwards, though risky\n                     buf.readerIndex(buf.readerIndex() - (bytesConsumed - length));\n                }\n            }\n\n            if (position.getFixTime() != null) { // only add if we have minimal data (time)\n                positions.add(position);\n            }\n        }\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}