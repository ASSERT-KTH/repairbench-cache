{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            // First parameter block (byte values)\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (buf.readableBytes() < 1) { break; } // For ID or extension marker\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id;\n                if (extension) {\n                    if (buf.readableBytes() < 2) { break; } // For full extended ID\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n                \n                if (buf.readableBytes() < 1) { break; } // For 1-byte payload\n\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte(); // consume 1 byte payload\n                        break;\n                }\n            }\n\n            // Second parameter block (short LE values)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (buf.readableBytes() < 1) { break; } // For ID or extension marker\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id;\n                if (extension) {\n                    if (buf.readableBytes() < 2) { break; } // For full extended ID\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n\n                if (buf.readableBytes() < 2) { break; } // For 2-byte payload (short)\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE(); // consume 2 bytes payload\n                        break;\n                }\n            }\n\n            // Third parameter block (int LE values)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (buf.readableBytes() < 1) { break; } // For ID or extension marker\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id;\n                if (extension) {\n                    if (buf.readableBytes() < 2) { break; } // For full extended ID\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n\n                if (buf.readableBytes() < 4) { break; } // For 4-byte payload (int)\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE(); // consume 4 bytes payload\n                        break;\n                }\n            }\n\n            // Fourth parameter block (variable length)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (buf.readableBytes() < 1) { break; } // For ID or extension marker\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id;\n                if (extension) {\n                    if (buf.readableBytes() < 2) { break; } // For full extended ID\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n\n                if (buf.readableBytes() < 1) { break; } // For length byte\n                int length = buf.readUnsignedByte();\n\n                if (buf.readableBytes() < length) {\n                    // Declared length exceeds available data. Consume what's left and break.\n                    buf.skipBytes(buf.readableBytes());\n                    break; \n                }\n\n                int consumedInCase = 0;\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        if (length >= 1) { buf.readUnsignedByte(); consumedInCase++; } // label\n                        if (length >= 3) { // Requires 2 more bytes for the short value\n                            position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                            consumedInCase += 2;\n                        }\n                        break;\n                    case 0xFE31:\n                        if (length >= 1) { buf.readUnsignedByte(); consumedInCase++; } // alarm protocol\n                        if (length >= 2) { buf.readUnsignedByte(); consumedInCase++; } // alarm type\n                        break;\n                    case 0xFEA8:\n                        if (length >= 1) { buf.readUnsignedByte(); consumedInCase++; } // battery status\n                        if (length >= 2) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); consumedInCase++; }\n                        if (length >= 3) { buf.readUnsignedByte(); consumedInCase++; } // battery alert\n                        break;\n                    default:\n                        // All 'length' bytes will be skipped by the logic below.\n                        // consumedInCase remains 0.\n                        break;\n                }\n                \n                // Skip any remaining part of the payload if not fully consumed by the switch case\n                if (length > consumedInCase) {\n                    buf.skipBytes(length - consumedInCase);\n                }\n                // If length < consumedInCase, it means the switch case logic tried to read more\n                // than 'length' allowed. The guarded reads (if length >= X) should prevent this.\n                // If it still happens, it's a bug in a specific case's guarded read logic.\n            }\n\n            positions.add(position);\n        }\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}