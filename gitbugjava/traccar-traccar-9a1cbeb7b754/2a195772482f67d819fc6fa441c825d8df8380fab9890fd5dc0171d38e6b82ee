{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        // Find the first comma to locate the start of IMEI\n        int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (commaIndex == -1) {\n            return null; // Invalid format, comma not found\n        }\n        buf.readerIndex(commaIndex + 1); // Move reader index past the comma\n\n        // Ensure there are enough bytes for IMEI (15) and the subsequent fields (,CCC,)\n        if (buf.readableBytes() < 15 + 1 + 3 + 1) {\n            return null; // Not enough data\n        }\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1); // Skip ,CCC,\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        // Ensure there are enough bytes for the main header (remaining cache + count)\n        if (buf.readableBytes() < 4 + 2) {\n             return positions; // Not enough data for header\n        }\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            // Check buffer readable length before reading position header (record length + record index)\n            if (buf.readableBytes() < 2 + 2) {\n                break; // Not enough data for next position record header\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            // Parameter Block 1: 1-byte data\n            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                // Check readable bytes for ID (1 or 2) + value (1)\n                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int idLength = extension ? 2 : 1;\n                if (buf.readableBytes() < idLength + 1) break; // Need bytes for ID and 1 byte value\n\n                int id;\n                if (extension) {\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte(); // Skip 1 byte\n                        break;\n                }\n            }\n\n            // Parameter Block 2: 2-byte data (LE)\n            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                // Check readable bytes for ID (1 or 2) + value (2)\n                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int idLength = extension ? 2 : 1;\n                if (buf.readableBytes() < idLength + 2) break; // Need bytes for ID and 2 byte value\n\n                int id;\n                if (extension) {\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1);\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1);\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        // Temperature: value * 0.1 - 40 (degrees C)\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE() * 0.1 - 40.0);\n                        break;\n                    case 0x9F:\n                        // External Temperature Sensor 1: value * 0.1 (degrees C)? uses signed short\n                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1);\n                        break;\n                    case 0xC9:\n                        // Fuel Rate: value * 0.01 (L/h)?\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedShortLE(); // Skip 2 bytes LE\n                        break;\n                }\n            }\n\n            // Parameter Block 3: 4-byte data (LE)\n            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                // Check readable bytes for ID (1 or 2) + value (4)\n                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int idLength = extension ? 2 : 1;\n                 if (buf.readableBytes() < idLength + 4) break; // Need bytes for ID and 4 byte value\n\n                int id;\n                if (extension) {\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        // Time is seconds since 2000-01-01 00:00:00 UTC (946684800)\n                        position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000L));\n                        break;\n                    case 0x0C: // Odometer (meters)\n                    case 0x9B: // OBD Odometer (meters)\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D: // Runtime (seconds)\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Store as ms\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0: // Total Fuel Used (ml)\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Convert ml to L\n                        break;\n                    case 0xA2: // Engine Fuel Rate (0.01 ml/h)\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01 * 0.001); // Convert 0.01ml/h to L/h\n                        break;\n                    default:\n                        buf.readUnsignedIntLE(); // Skip 4 bytes LE\n                        break;\n                }\n            }\n\n            // Parameter Block 4: Variable length data\n            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                // Check readable bytes for ID (1 or 2) + length (1)\n                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int idLength = extension ? 2 : 1;\n                 if (buf.readableBytes() < idLength + 1) break; // Need bytes for ID and 1 byte length\n\n                int id;\n                if (extension) {\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n\n                int length = buf.readUnsignedByte();\n\n                // **** Critical Check: Ensure buffer has enough readable bytes for the specified length ****\n                if (buf.readableBytes() < length) {\n                    // Data seems corrupt or buffer truncated. Skip remaining bytes in buffer and stop processing this record.\n                    buf.skipBytes(buf.readableBytes());\n                    break; // Exit this inner loop\n                }\n\n                // Now safe to read/skip 'length' bytes\n                switch (id) {\n                    case 0x2A: case 0x2B: case 0x2C: case 0x2D: // Temp sensors 1-4\n                    case 0x2E: case 0x2F: case 0x30: case 0x31: // Temp sensors 5-8\n                        // Expecting length >= 3: 1 byte label + 2 bytes value (short LE * 0.01)\n                        if (length >= 3) {\n                            buf.readUnsignedByte(); // label (ignore)\n                            position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.01);\n                            if (length > 3) {\n                                buf.skipBytes(length - 3); // Skip unexpected extra bytes\n                            }\n                        } else {\n                            buf.skipBytes(length); // Skip if length is incorrect (< 3)\n                        }\n                        break;\n                    case 0xFE31: // Alarm Data\n                        // Expecting length >= 2: 1 byte protocol + 1 byte type + optional data\n                        if (length >= 2) {\n                            buf.readUnsignedByte(); // alarm protocol (ignore)\n                            buf.readUnsignedByte(); // alarm type (ignore)\n                            if (length > 2) {\n                                buf.skipBytes(length - 2); // Skip remaining alarm data\n                            }\n                        } else {\n                             buf.skipBytes(length); // Skip if length is incorrect (< 2)\n                        }\n                        break;\n                    case 0xFEA8: // Battery Info\n                         // Expecting length >= 3: 1 byte status + 1 byte level + 1 byte alert\n                         if (length >= 3) {\n                             buf.readUnsignedByte(); // battery status (ignore)\n                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                             buf.readUnsignedByte(); // battery alert (ignore)\n                             if (length > 3) {\n                                 buf.skipBytes(length - 3); // Skip unexpected extra bytes\n                             }\n                         } else {\n                             buf.skipBytes(length); // Skip if length is incorrect (< 3)\n                         }\n                        break;\n                    default:\n                        buf.skipBytes(length); // Skip data for unknown/unhandled IDs\n                        break;\n                }\n            }\n\n            // Only add position if essential GPS data is present\n            if (position.getFixTime() != null && position.getLatitude() != 0 && position.getLongitude() != 0) {\n                 positions.add(position);\n            } else {\n                 // Optionally log or handle cases where essential data is missing after processing parameters\n            }\n        }\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}