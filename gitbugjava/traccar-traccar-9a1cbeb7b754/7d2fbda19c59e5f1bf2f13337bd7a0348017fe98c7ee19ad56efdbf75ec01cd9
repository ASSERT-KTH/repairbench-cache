{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1 + 3 + 1);\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.readUnsignedIntLE(); // remaining cache\n    int count = buf.readUnsignedShortLE();\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        // Read length and index for current position\n        int positionLength = buf.readUnsignedShortLE();\n        int index = buf.readUnsignedShortLE();\n\n        // Create a slice for the current position data to avoid exceeding bounds\n        int dataAvailable = positionLength - 4; // Subtract 4 bytes for length and index\n        if (buf.readableBytes() < dataAvailable) {\n            break; // Insufficient data to proceed\n        }\n        ByteBuf posData = buf.readSlice(dataAvailable);\n        try {\n            // Process first parameters set\n            int paramCount = posData.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;\n                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, posData.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(posData.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, posData.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, posData.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, posData.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, posData.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = posData.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, posData.readUnsignedByte());\n                        break;\n                    default:\n                        posData.readUnsignedByte();\n                        break;\n                }\n            }\n\n            // Process second parameters set\n            paramCount = posData.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;\n                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(posData.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(posData.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, posData.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(posData.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, posData.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, posData.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, posData.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, posData.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, posData.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, posData.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, posData.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, posData.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.KEY_TEMP + 1, posData.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, posData.readUnsignedShortLE());\n                        break;\n                    default:\n                        posData.readUnsignedShortLE();\n                        break;\n                }\n            }\n\n            // Process third parameters set\n            paramCount = posData.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;\n                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(posData.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(posData.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + posData.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, posData.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", posData.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(posData.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, posData.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, posData.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        posData.readUnsignedIntLE();\n                        break;\n                }\n            }\n\n            // Process fourth parameters set\n            paramCount = posData.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = posData.getUnsignedByte(posData.readerIndex()) == 0xFE;\n                int id = extension ? posData.readUnsignedShort() : posData.readUnsignedByte();\n                int length = posData.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        posData.readUnsignedByte(); // label\n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), posData.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        posData.readUnsignedByte(); // alarm protocol\n                        posData.readUnsignedByte(); // alarm type\n                        posData.skipBytes(length - 2);\n                        break;\n                    case 0xFEA8:\n                        posData.readUnsignedByte(); // battery status\n                        position.set(Position.KEY_BATTERY_LEVEL, posData.readUnsignedByte());\n                        posData.readUnsignedByte(); // battery alert\n                        break;\n                    default:\n                        posData.skipBytes(length);\n                        break;\n                }\n            }\n\n            // Ensure position data slice is exhausted (This might not be strictly necessary, but helps catch errors)\n            if (posData.readerIndex() != posData.writerIndex()) {\n                if (LOG.isWarnEnabled()) {\n                    LOG.warn(\"Partial data consumed for position binary in: \" + HexDump.hexDump(posData.array()));\n                }\n            }\n\n            positions.add(position);\n        } finally {\n            posData.release();\n        }\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}