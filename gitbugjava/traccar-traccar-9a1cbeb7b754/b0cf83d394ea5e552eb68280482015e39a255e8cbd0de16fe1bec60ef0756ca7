{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1); // ,CCE,\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            // Parameters Block 1 (1 byte data)\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (!buf.isReadable()) {\n                    // Log.warning(\"Buffer ended prematurely in params block 1\");\n                    return positions; // Avoid IndexOutOfBoundsException\n                }\n                int firstByte = buf.readUnsignedByte();\n                boolean extension = (firstByte == 0xFE);\n                int id;\n                if (extension) {\n                    if (!buf.isReadable(2)) {\n                         // Log.warning(\"Buffer ended prematurely reading extended ID in params block 1\");\n                         return positions;\n                    }\n                    id = buf.readUnsignedShort(); // Read next 2 bytes for ID\n                } else {\n                    id = firstByte; // Use the first byte as ID\n                }\n\n                if (!buf.isReadable()) { // Check before reading value\n                     // Log.warning(\"Buffer ended prematurely before reading value for ID \" + id + \" in params block 1\");\n                     return positions;\n                }\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte(); // Skip 1 byte value\n                        break;\n                }\n            }\n\n            // Parameters Block 2 (2 bytes LE data)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                 if (!buf.isReadable()) {\n                     // Log.warning(\"Buffer ended prematurely in params block 2\");\n                     return positions;\n                 }\n                int firstByte = buf.readUnsignedByte();\n                boolean extension = (firstByte == 0xFE);\n                int id;\n                if (extension) {\n                     if (!buf.isReadable(2)) {\n                         // Log.warning(\"Buffer ended prematurely reading extended ID in params block 2\");\n                         return positions;\n                     }\n                    id = buf.readUnsignedShort(); // Read next 2 bytes for ID\n                } else {\n                    id = firstByte; // Use the first byte as ID\n                }\n\n                if (!buf.isReadable(2)) { // Check before reading value (2 bytes)\n                     // Log.warning(\"Buffer ended prematurely before reading value for ID \" + id + \" in params block 2\");\n                     return positions;\n                }\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n\n            // Parameters Block 3 (4 bytes LE data)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                 if (!buf.isReadable()) {\n                     // Log.warning(\"Buffer ended prematurely in params block 3\");\n                     return positions;\n                 }\n                 int firstByte = buf.readUnsignedByte();\n                 boolean extension = (firstByte == 0xFE);\n                 int id;\n                 if (extension) {\n                      if (!buf.isReadable(2)) {\n                          // Log.warning(\"Buffer ended prematurely reading extended ID in params block 3\");\n                          return positions;\n                      }\n                     id = buf.readUnsignedShort(); // Read next 2 bytes for ID\n                 } else {\n                     id = firstByte; // Use the first byte as ID\n                 }\n\n                if (!buf.isReadable(4)) { // Check before reading value (4 bytes)\n                     // Log.warning(\"Buffer ended prematurely before reading value for ID \" + id + \" in params block 3\");\n                     return positions;\n                }\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        // Store runtime in seconds, let attributes handle conversion if needed\n                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L);\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n\n            // Parameters Block 4 (variable length data)\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                 if (!buf.isReadable()) {\n                     // Log.warning(\"Buffer ended prematurely in params block 4\");\n                     return positions;\n                 }\n                 int firstByte = buf.readUnsignedByte();\n                 boolean extension = (firstByte == 0xFE);\n                 int id;\n                 if (extension) {\n                      if (!buf.isReadable(2)) {\n                          // Log.warning(\"Buffer ended prematurely reading extended ID in params block 4\");\n                          return positions;\n                      }\n                     id = buf.readUnsignedShort(); // Read next 2 bytes for ID\n                 } else {\n                     id = firstByte; // Use the first byte as ID\n                 }\n\n                if (!buf.isReadable()) { // Check before reading length\n                     // Log.warning(\"Buffer ended prematurely before reading length for ID \" + id + \" in params block 4\");\n                     return positions;\n                }\n                int length = buf.readUnsignedByte();\n\n                // Check remaining bytes *before* attempting to read/skip based on length\n                if (buf.readableBytes() < length) {\n                    // Data is truncated or length is wrong. Can't proceed reliably.\n                    // Log.warning(\"Invalid length \" + length + \" for param ID \" + id + \", only \" + buf.readableBytes() + \" bytes available. Skipping rest of record.\");\n                    buf.skipBytes(buf.readableBytes()); // Skip what's left\n                    break; // Exit the inner loop for this position record\n                }\n\n                // Keep track of reader index to ensure correct skipping\n                int startIndex = buf.readerIndex();\n\n                switch (id) {\n                    case 0x2A: // External Temperature Sensor 1\n                    case 0x2B: // External Temperature Sensor 2\n                    case 0x2C: // External Temperature Sensor 3\n                    case 0x2D: // External Temperature Sensor 4\n                    case 0x2E: // External Temperature Sensor 5\n                    case 0x2F: // External Temperature Sensor 6\n                    case 0x30: // External Temperature Sensor 7\n                    case 0x31: // External Temperature Sensor 8\n                        if (length >= 3) { // 1 byte label + 2 bytes value\n                            buf.readUnsignedByte(); // label\n                            position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        }\n                        // Skip remaining bytes specified by length by setting reader index\n                        buf.readerIndex(startIndex + length);\n                        break;\n                    case 0xFE31: // Alarm Data\n                        if (length >= 2) { // 1 byte protocol + 1 byte type\n                            buf.readUnsignedByte(); // alarm protocol\n                            buf.readUnsignedByte(); // alarm type\n                        }\n                         // Skip remaining bytes specified by length by setting reader index\n                        buf.readerIndex(startIndex + length);\n                        break;\n                    case 0xFEA8: // Battery Information\n                        if (length >= 3) { // 1 byte status + 1 byte level + 1 byte alert\n                            buf.readUnsignedByte(); // battery status\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            buf.readUnsignedByte(); // battery alert\n                        }\n                         // Skip remaining bytes specified by length by setting reader index\n                        buf.readerIndex(startIndex + length);\n                        break;\n                    default:\n                        // Skip the full length specified\n                        buf.skipBytes(length);\n                        break;\n                }\n            } // end inner loop (j)\n\n            if (position.getFixTime() != null) {\n                positions.add(position);\n            }\n        } // end outer loop (i)\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}