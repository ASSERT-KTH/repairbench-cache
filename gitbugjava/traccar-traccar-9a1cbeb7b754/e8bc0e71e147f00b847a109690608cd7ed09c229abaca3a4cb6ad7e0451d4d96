{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    if (buf.readableBytes() < 1) {\n        return null; // Not enough data in the buffer\n    }\n\n    // Find comma position safely\n    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (commaIndex == -1 || buf.readableBytes() < commaIndex + 1 + 15) {\n        return null; // No comma found or not enough data after comma\n    }\n\n    buf.readerIndex(commaIndex + 1);\n    if (buf.readableBytes() < 15) {\n        return null; // Not enough bytes for IMEI\n    }\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n\n    if (buf.readableBytes() < 1 + 3 + 1) {\n        return null; // Not enough bytes after IMEI\n    }\n    buf.skipBytes(1 + 3 + 1);\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // Read remaining cache and count\n    if (buf.readableBytes() < 4 + 2) { // unsignedIntLE(4) + unsignedShortLE(2)\n        return null;\n    }\n    buf.readUnsignedIntLE(); // remaining cache\n    int count = buf.readUnsignedShortLE();\n\n    // Check if we have enough data for all positions\n    // This is a conservative estimate - individual position decoding will handle its own bounds\n    if (buf.readableBytes() < count * 20) { // Minimum bytes per position estimate\n        return null;\n    }\n\n    for (int i = 0; i < count; i++) {\n        // Check if we have enough bytes for basic position structure\n        if (buf.readableBytes() < 2 + 2 + 1) { // length(2) + index(2) + paramCount(1)\n            break;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // index\n\n        // First param block\n        if (buf.readableBytes() < 1) break; // paramCount\n        int paramCount = buf.readUnsignedByte();\n        if (buf.readableBytes() < paramCount * 4) { // Estimate of space needed (conservative)\n            break;\n        }\n        for (int j = 0; j < paramCount; j++) {\n            if (buf.readableBytes() < 1) break;\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int bytesNeeded = extension ? 3 : 2; // 0xFE marker + 2 bytes for short, or 1 byte for id + 1 byte for value\n            if (buf.readableBytes() < bytesNeeded) break;\n\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x01:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x05:\n                    if (buf.readableBytes() < 1) break;\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x14:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x47:\n                    if (buf.readableBytes() < 1) break;\n                    int lockState = buf.readUnsignedByte();\n                    if (lockState > 0) {\n                        position.set(Position.KEY_LOCK, lockState == 2);\n                    }\n                    break;\n                case 0x97:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    break;\n                case 0x9D:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xFE69:\n                    if (buf.readableBytes() < 1) break;\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                default:\n                    if (buf.readableBytes() >= 1) {\n                        buf.readUnsignedByte();\n                    }\n                    break;\n            }\n        }\n\n        // Second param block\n        if (buf.readableBytes() < 1) break;\n        paramCount = buf.readUnsignedByte();\n        if (buf.readableBytes() < paramCount * 5) { // Estimate\n            break;\n        }\n        for (int j = 0; j < paramCount; j++) {\n            if (buf.readableBytes() < 1) break;\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int bytesNeeded = extension ? 3 : 2; // 0xFE marker + 2 bytes for short\n            if (buf.readableBytes() < bytesNeeded) break;\n\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x08:\n                    if (buf.readableBytes() < 2) break;\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    if (buf.readableBytes() < 2) break;\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                    break;\n                case 0x0B:\n                    if (buf.readableBytes() < 2) break;\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x16:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x19:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1A:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x40:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    break;\n                case 0x91:\n                case 0x92:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                    break;\n                case 0x98:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                    break;\n                case 0x99:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                    break;\n                case 0x9C:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                    break;\n                case 0x9F:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                    break;\n                case 0xC9:\n                    if (buf.readableBytes() < 2) break;\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                    break;\n                default:\n                    if (buf.readableBytes() >= 2) {\n                        buf.readUnsignedShortLE();\n                    }\n                    break;\n            }\n        }\n\n        // Third param block\n        if (buf.readableBytes() < 1) break;\n        paramCount = buf.readUnsignedByte();\n        if (buf.readableBytes() < paramCount * 8) { // Estimate\n            break;\n        }\n        for (int j = 0; j < paramCount; j++) {\n            if (buf.readableBytes() < 1) break;\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int bytesNeeded = extension ? 3 : 2; // For ID reading\n            if (buf.readableBytes() < bytesNeeded) break;\n\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    if (buf.readableBytes() < 4) break;\n                    position.setLatitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x03:\n                    if (buf.readableBytes() < 4) break;\n                    position.setLongitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x04:\n                    if (buf.readableBytes() < 4) break;\n                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n                    break;\n                case 0x0C:\n                case 0x9B:\n                    if (buf.readableBytes() < 4) break;\n                    position.set(Position.KEY_ODOMETER, buf.readUns",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}