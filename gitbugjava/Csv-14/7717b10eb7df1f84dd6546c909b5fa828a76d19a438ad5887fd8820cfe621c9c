{
    "generation": "    // the original object is needed so can check for Number\n    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        final char delimChar = getDelimiter();\n        final Character quoteCharOption = getQuoteCharacter();\n        if (quoteCharOption == null) {\n            // Cannot quote without a quote char, delegate to escape\n            printAndEscape(value, offset, len, out);\n            return;\n        }\n        final char quoteChar = quoteCharOption.charValue();\n\n        QuoteMode quoteModePolicy = getQuoteMode();\n        if (quoteModePolicy == null) {\n            quoteModePolicy = QuoteMode.MINIMAL;\n        }\n        switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // Check if the first char requires quoting\n                if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    // Note: COMMENT is typically '#' (35), so this includes control chars and '#'.\n                    quote = true;\n                } else {\n                    // Loop looking for quote-triggering characters\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break; // Found a reason to quote, exit loop\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        // Check the last character if we haven't already decided to quote\n                        pos = end - 1; // pos points to the last char\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' ' (ASCII 32).\n                        // This includes control characters and potentially space.\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            // If quote is true, execution continues below the switch\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }\n\n        // If quote=false, the MINIMAL case already returned.\n        // Other cases (ALL, NON_NUMERIC that decided to quote) will reach here,\n        // as will MINIMAL if it decided to quote.\n\n        // we hit something that needed encapsulation\n        out.append(quoteChar);\n\n        // Reset position and iterate through the value to handle embedded quotes\n        pos = offset;\n        start = offset; // Ensure start is reset for segment appending\n\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            if (c == quoteChar) {\n                // write out the chunk up until this point (including the quote)\n                out.append(value, start, pos + 1);\n                // Set start for the next segment right at the quote char position.\n                // The quote char itself will be appended again in the next call\n                // or by the final segment append, effectively doubling it.\n                start = pos;\n            }\n            pos++;\n        }\n\n        // write the last segment\n        out.append(value, start, pos); // pos is equal to 'end' here\n        out.append(quoteChar);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}