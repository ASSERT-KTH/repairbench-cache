{
    "generation": "    // the original object is needed so can check for Number\n    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        final char delimChar = getDelimiter();\n        final Character quoteChar = getQuoteCharacter(); // Use Character wrapper type\n        final QuoteMode quoteModePolicy = getQuoteMode() == null ? QuoteMode.MINIMAL : getQuoteMode();\n\n        // Check policy and conditions that preclude quoting or require escaping instead\n        if (quoteChar == null || quoteModePolicy == QuoteMode.NONE) {\n            printAndEscape(value, offset, len, out);\n            return;\n        }\n\n        final char qChar = quoteChar.charValue(); // Safe to call now because quoteChar is not null\n\n        switch (quoteModePolicy) {\n        case ALL:\n        case ALL_NON_NULL: // ALL_NON_NULL requires quoting for non-null values. The null check is typically done before calling this.\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            // Quote if the object is null or not an instance of Number.\n            quote = object == null || !(object instanceof Number);\n            break;\n        case MINIMAL:\n            if (len <= 0) {\n                // Always quote an empty token that is the first on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case, an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char firstChar = value.charAt(start);\n                char lastChar = value.charAt(end - 1);\n                final Character commentStart = getCommentMarker();\n\n                // Rule: Quote if starts/ends with SP, starts with comment marker (if defined),\n                // or contains delimiter, quote char, or newline (LF/CR).\n                // SP = Space (ASCII 32)\n                if (firstChar <= SP || lastChar <= SP || (commentStart != null && firstChar == commentStart.charValue())) {\n                    quote = true;\n                } else {\n                    // Scan the entire string for inner characters that require quoting\n                    pos = start; // Reset position for full scan\n                    while (pos < end) {\n                        final char c = value.charAt(pos);\n                        if (c == LF || c == CR || c == qChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                }\n            }\n\n            if (!quote) {\n                // No quoting needed for MINIMAL policy based on content\n                out.append(value, start, end);\n                return;\n            }\n            // If quote is true, fall through to the quoting logic below\n            break;\n        // case NONE: // Already handled at the beginning by checking quoteModePolicy == QuoteMode.NONE\n        //     printAndEscape(value, offset, len, out);\n        //     return;\n        default:\n            // Handles any potentially unexpected QuoteMode values.\n            throw new IllegalStateException(\"Unexpected QuoteMode: \" + quoteModePolicy);\n        }\n\n        // --- Apply quoting ---\n        // If we reached here, 'quote' is true based on policy (ALL, NON_NUMERIC) or content (MINIMAL)\n        out.append(qChar);\n\n        // Reset start/pos for iterating through the value to handle embedded quotes\n        start = offset;\n        pos = offset;\n\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            // Need to double inner quote characters\n            if (c == qChar) {\n                // Write segment ending at the quote char, including the quote char itself\n                out.append(value, start, pos + 1);\n                // Set start to current pos, so the quote char is effectively written twice\n                // (once above, and again as the start of the next segment or by the final append)\n                start = pos;\n            }\n            pos++;\n        }\n\n        // Write the last segment (from the last quote char encountered, or from the beginning if no quotes were found)\n        out.append(value, start, pos); // pos is equal to 'end' here\n        out.append(qChar); // Append the closing quote char\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}