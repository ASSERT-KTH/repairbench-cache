{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // As.WRAPPER_OBJECT needs a field name (for type id). It can normally\n        // expect START_OBJECT, but for structured types like ObjectId\n        // the START_OBJECT is potentially handled by ObjectIdReader,\n        // so parser may be pointing to the FIELD_NAME.\n        JsonToken t = p.currentToken();\n        final String typeId;\n\n        if (t == JsonToken.START_OBJECT) {\n            // Regular case: consume START_OBJECT, expect FIELD_NAME\n            t = p.nextToken();\n        } else if (t != JsonToken.FIELD_NAME) {\n            // Not START_OBJECT or FIELD_NAME: error\n             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                     \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n        // Either way, we must now be at FIELD_NAME\n        if (t != JsonToken.FIELD_NAME) {\n             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                     \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n\n        // Field name is the type id\n        typeId = p.currentName();\n        p.nextToken(); // Consume FIELD_NAME, move to value\n\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            // 16-Dec-2018, tatu: As per [databind#2195], need to create TokenBuffer using\n            //   parent parser, NOT null, false -> otherwise codec missing\n            TokenBuffer tb = new TokenBuffer(p, ctxt);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            \n            // Ok: let's start processing virtual tokens from buffer first\n            p.clearCurrentToken(); // important! indicates we are pointing to virtual token stream\n            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p); // Prepend buffer, don't flatten arrays\n\n            // And then get the first token (START_OBJECT) from buffer\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n\n        // And then need the closing END_OBJECT\n        JsonToken end = p.nextToken();\n        if (end != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT, // Report END_OBJECT as expected\n                    \"expected closing END_OBJECT after type information and deserialized value (got \"+end+\")\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}