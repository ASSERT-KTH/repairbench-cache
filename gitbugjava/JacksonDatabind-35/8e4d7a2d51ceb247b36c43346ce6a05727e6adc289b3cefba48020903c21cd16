{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // As.WRAPPER_OBJECT needs sequence of START_OBJECT, FIELD_NAME\n        // (FIELD_NAME as type id)\n        // 16-Aug-2017, tatu: ... except possibly if Object Id has been used\n        // first, which means we may be starting at FIELD_NAME. Let's allow that.\n        JsonToken t = p.currentToken();\n        if (t == JsonToken.START_OBJECT) {\n            // If START_OBJECT, need FIELD_NAME\n            t = p.nextToken();\n        } else if (t != JsonToken.FIELD_NAME) {\n            // Not START_OBJECT or FIELD_NAME? Error\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n        // And then we must get FIELD_NAME\n        if (t != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        // And then token that follows must be the value, starting usually with START_OBJECT\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        // 01-Aug-2015, tatu: As per [databind#899], this is surprisingly tricky\n        //   procedure... but most robust way is to create a combined parser\n        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n\n            // 02-Jul-2019, tatu: [databind#2378], need to be wary about nextToken() called\n            //   within `deserialize()`\n            // Also: can not possibly advance parser...\n            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);\n            p.nextToken(); // Need to point to the first token of the merged sequence\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n\n        // And then need the closing END_OBJECT\n        // 13-Nov-2015, tatu: Let's verify we are now pointing to END_OBJECT;\n        //   usually after value deserialization we are, but could be one intermediate\n        //   token as well (like FIELD_NAME when we are handling wrapper within wrapper)\n        JsonToken t2 = p.nextToken();\n        if (t2 != JsonToken.END_OBJECT) {\n            /* 26-Oct-2015, tatu: Let's reconsider this part: we must get END_OBJECT,\n             *   for the wrapper object. But what if we have nested wrappers?\n             *   Or Lists? Hard to be certain...\n             */\n            // 02-Jul-2019, tatu: As per [databind#2378], seems this should be checked\n            //    or, if not, maybe comment explains better. Leaving checks for now.\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value (for \"+baseTypeName()+\")\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}