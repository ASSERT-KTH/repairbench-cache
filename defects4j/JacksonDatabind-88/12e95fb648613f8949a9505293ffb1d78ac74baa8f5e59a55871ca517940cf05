{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    TypeFactory tf = ctxt.getTypeFactory();\n    JavaType type;\n    if (id.indexOf('<') > 0) {\n        type = tf.constructFromCanonical(id);\n        // 17-Aug-2017, tatu: Ensure assignment compatibility -- needed later anyway, and not doing so may open security issues.\n        if (!_baseType.getRawClass().isAssignableFrom(type.getRawClass())) {\n            throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" +\n                \"derived type (\" + type + \") not subtype of base type (\" + _baseType + \")\");\n        }\n        return type;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n    }\n    type = tf.constructSpecializedType(_baseType, cls);\n    // Double-check for assignability, just in case\n    if (!_baseType.getRawClass().isAssignableFrom(type.getRawClass())) {\n        throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" +\n            \"derived type (\" + type + \") not subtype of base type (\" + _baseType + \")\");\n    }\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}