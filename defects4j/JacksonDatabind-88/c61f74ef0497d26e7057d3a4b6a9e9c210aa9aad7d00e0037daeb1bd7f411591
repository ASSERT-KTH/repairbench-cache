{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n     *    check if any generics info is added; and only then ask factory\n     *    to do translation when necessary\n     */\n    TypeFactory tf = ctxt.getTypeFactory();\n    if (id.indexOf('<') > 0) {\n        // note: may want to try combining with specialization (esp for EnumMap)?\n        // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n        //    compatibility -- needed later anyway, and not doing so may open\n        //    security issues.\n        JavaType t = tf.constructFromCanonical(id);\n        // verify assignment compatibility\n        Class<?> raw = t.getRawClass();\n        Class<?> base = _baseType.getRawClass();\n        if (!base.isAssignableFrom(raw)) {\n            if (ctxt instanceof DeserializationContext) {\n                return ((DeserializationContext) ctxt)\n                    .handleUnknownTypeId(_baseType, id, this,\n                                         \"not subtype of \" + base.getName());\n            }\n            throw new IllegalArgumentException(\"Invalid type id '\" + id\n                + \"' (for id type 'Id.class'): not subtype of \" + base.getName());\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\" + id\n            + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n    }\n    return tf.constructSpecializedType(_baseType, cls);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}