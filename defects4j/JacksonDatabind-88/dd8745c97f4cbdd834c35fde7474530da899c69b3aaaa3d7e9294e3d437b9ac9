{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    TypeFactory tf = ctxt.getTypeFactory();\n    JavaType t;\n    if (id.indexOf('<') > 0) {\n        t = tf.constructFromCanonical(id);\n        // 17-Aug-2017, tatu: Ensure compatibility with _baseType! (Fix for #1735)\n        if ((t != null) && !_baseType.isTypeOrSubTypeOf(t.getRawClass())) {\n            // Defensive: verify t is assignable to _baseType\n            // or more strictly, that t is a subtype of _baseType (the base type declared for property)\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"\n                + \"Type \" + t + \" is not subtype of base type \" + _baseType);\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n    }\n    // Also check assignability for the simple class name case\n    if (!_baseType.isTypeOrSubTypeOf(cls)) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"\n            + \"Class \" + cls.getName() + \" is not subtype of base type \" + _baseType);\n    }\n    return tf.constructSpecializedType(_baseType, cls);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}