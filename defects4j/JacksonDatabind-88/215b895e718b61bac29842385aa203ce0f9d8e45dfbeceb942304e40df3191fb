{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n         *    check if any generics info is added; and only then ask factory\n         *    to do translation when necessary\n         */\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // note: may want to try combining with specialization (esp for EnumMap)?\n            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n            //    compatibility -- needed later anyway, and not doing so may open\n            //    security issues.\n            JavaType t = tf.constructFromCanonical(id);\n                // Probably cleaner to have a method in `TypeFactory` but can't add in patch\n\n            // START FIX for databind#1735\n            // When a generic type ID is used, `constructFromCanonical` does not\n            // implicitly verify its assignability against `_baseType`.\n            // This explicit check ensures 't' is a subtype or compatible with '_baseType'.\n            // This prevents arbitrary type injection which could lead to security issues.\n            // This check parallels the one performed by `tf.constructSpecializedType` for non-generic IDs.\n            if (_baseType != null && ! _baseType.isAssignableFrom(t)) {\n                throw new IllegalArgumentException(String.format(\n                        \"Class %s is not assignable to %s\",\n                        t.getRawClass().getName(), _baseType.getRawClass().getName()));\n            }\n            // END FIX for databind#1735\n\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //   DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            // ... meaning that we really should never get here.\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        // For non-generic IDs, `constructSpecializedType` already handles the assignment compatibility check\n        // by throwing `IllegalArgumentException` if `cls` is not assignable to `_baseType.getRawClass()`.\n        return tf.constructSpecializedType(_baseType, cls);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}