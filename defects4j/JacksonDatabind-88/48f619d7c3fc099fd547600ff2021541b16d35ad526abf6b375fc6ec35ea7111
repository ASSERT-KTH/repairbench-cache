{
    "generation": "@Override\nprotected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    TypeFactory tf = ctxt.getTypeFactory();\n    // if there is generic information, build full type first and then\n    // verify it is actually a subtype of the declared base type\n    if (id.indexOf('<') > 0) {\n        JavaType t = tf.constructFromCanonical(id);\n        // enforce assignment compatibility as per [databind#1735]\n        Class<?> raw = t.getRawClass();\n        Class<?> baseRaw = _baseType.getRawClass();\n        if (!baseRaw.isAssignableFrom(raw)) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this,\n                        \"not subtype of \" + _baseType);\n            }\n            throw new IllegalArgumentException(\n                    \"Invalid type id '\" + id + \"'; not subtype of \" + _baseType);\n        }\n        return t;\n    }\n\n    // otherwise just resolve simple class name\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id\n                +\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n    }\n    return tf.constructSpecializedType(_baseType, cls);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}