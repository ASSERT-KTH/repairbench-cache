{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // Note: need to ensure assignment compatibility before returning\n            JavaType t = tf.constructFromCanonical(id);\n            // 17-Aug-2017, tatu: need to ensure assignment compatibility\n            if (!_baseType.getRawClass().isAssignableFrom(t.getRawClass())) {\n                throw new JsonMappingException(ctxt.getParser(),\n                    String.format(\"Type defined (%s) not subtype of base type (%s)\",\n                        t, _baseType.getRawClass().getName()));\n            }\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls = tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        // Even for non-generic case, validate the type\n        if (!_baseType.getRawClass().isAssignableFrom(cls)) {\n            throw new JsonMappingException(ctxt.getParser(),\n                String.format(\"Class %s not subtype of %s\",\n                    cls.getName(), _baseType.getRawClass().getName()));\n        }\n        return tf.constructSpecializedType(_baseType, cls);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}