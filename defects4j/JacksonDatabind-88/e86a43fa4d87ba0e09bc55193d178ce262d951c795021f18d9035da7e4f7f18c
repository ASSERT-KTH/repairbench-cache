{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n         *    check if any generics info is added; and only then ask factory\n         *    to do translation when necessary\n         */\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // note: may want to try combining with specialization (esp for EnumMap)?\n            JavaType t = tf.constructFromCanonical(id);\n            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n            //    compatibility -- needed later anyway, and not doing so may open\n            //    security issues.\n            // Probably cleaner to have a method in `TypeFactory` but can't add in patch\n            \n            // Fix: Added assignability check for generic types (databind#1735)\n            // If the constructed generic type is not a subtype of the _baseType,\n            // it's an invalid type id for this context.\n            if (!_baseType.isAssignableFrom(t)) {\n                if (ctxt instanceof DeserializationContext) {\n                    // Use reportBadDefinition for deserialization specific errors,\n                    // allowing for proper error handling and message formatting.\n                    throw ((DeserializationContext) ctxt).reportBadDefinition(\n                            _baseType,\n                            String.format(\"Type id '%s' (class %s) is not a subtype of base type %s\",\n                                    id, t.getRawClass().getName(), _baseType.toCanonical()));\n                } else {\n                    // Fallback for non-deserialization contexts, though this method is\n                    // primarily used during deserialization.\n                    throw new IllegalArgumentException(\n                            String.format(\"Invalid type id '%s' (class %s): not a subtype of base type %s\",\n                                    id, t.getRawClass().getName(), _baseType.toCanonical()));\n                }\n            }\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //   DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            // ... meaning that we really should never get here.\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        return tf.constructSpecializedType(_baseType, cls);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}