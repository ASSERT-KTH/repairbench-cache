{
    "generation": "@Override\nprotected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    TypeFactory tf = ctxt.getTypeFactory();\n    // generic type ids: must ensure subtype compatibility per [databind#1735]\n    if (id.indexOf('<') > 0) {\n        JavaType t = tf.constructFromCanonical(id);\n        Class<?> raw = t.getRawClass();\n        if (!_baseType.getRawClass().isAssignableFrom(raw)) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // will throw InvalidTypeIdException (a JsonMappingException) with our failure message\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"not subtype of\");\n            }\n            throw new IllegalArgumentException(\"Class \" + raw.getName()\n                    + \" not subtype of \" + _baseType.getRawClass().getName());\n        }\n        return t;\n    }\n\n    // non-generic: fall back to findClass + specialized type\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\" + id\n                + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n    }\n    return tf.constructSpecializedType(_baseType, cls);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}