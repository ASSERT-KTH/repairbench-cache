{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n     *    check if any generics info is added; and only then ask factory\n     *    to do translation when necessary\n     */\n    TypeFactory tf = ctxt.getTypeFactory();\n    JavaType baseType = tf.constructSpecializedType(_baseType, null);\n    if (id.indexOf('<') > 0) {\n        // note: may want to try combining with specialization (esp for EnumMap)?\n        // 17-Aug-2017, tatu: Ensure assignment compatibility to prevent security issues.\n        JavaType t = tf.constructFromCanonical(id);\n        if (!_isCompatible(t, baseType, ctxt)) {\n            throw new JsonMappingException(\"Type \" + t + \" is not a subtype of \" + baseType);\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        // 24-May-2016, tatu: Ensure we handle DeserializationContext correctly.\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n    }\n    return tf.constructSpecializedType(baseType, cls);\n}\n\nprivate boolean _isCompatible(JavaType type, JavaType baseType, DatabindContext ctxt) throws IOException {\n    if (type == null || baseType == null) {\n        return false;\n    }\n    if (type.equals(baseType)) {\n        return true;\n    }\n    // Handle generic types if necessary\n    if (type.isContainerType()) {\n        JavaType contentType = type.getContentType();\n        JavaType baseContentType = baseType.getContentType();\n        if (contentType != null && baseContentType != null) {\n            return _isCompatible(contentType, baseContentType, ctxt);\n        }\n    }\n    return ctxt.getDeserializationContext().isCompatible(type, baseType);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}