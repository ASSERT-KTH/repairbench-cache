{
    "generation": "@Override\nprotected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    TypeFactory tf = ctxt.getTypeFactory();\n    // first: handle generic canonical forms\n    if (id.indexOf('<') > 0) {\n        JavaType t = tf.constructFromCanonical(id);\n        // [databind#1735] ensure assignment compatibility\n        Class<?> rawTarget = t.getRawClass();\n        Class<?> rawBase = _baseType.getRawClass();\n        if (!rawBase.isAssignableFrom(rawTarget)) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this,\n                        \"not subtype of \" + _baseType);\n            }\n            throw new IllegalArgumentException(\n                    \"Invalid type id '\" + id + \"' (for id type 'Id.class'): not subtype of \" + _baseType);\n        }\n        return t;\n    }\n    // otherwise try simple class name resolution\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this,\n                    \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\n                \"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n    }\n    return tf.constructSpecializedType(_baseType, cls);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}