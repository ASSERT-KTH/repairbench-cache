{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    TypeFactory tf = ctxt.getTypeFactory();\n    JavaType actualType;\n    if (id.indexOf('<') > 0) {\n        actualType = tf.constructFromCanonical(id);\n    } else {\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        actualType = tf.constructSpecializedType(_baseType, cls);\n    }\n\n    // [databind#1735]: Ensure actualType is a subtype of _baseType!\n    if (!_baseType.isTypeOrSuperTypeOf(actualType)) {\n        // Use DeserializationContext's handler if available for more info/error\n        if (ctxt instanceof DeserializationContext) {\n            return ((DeserializationContext) ctxt)\n                    .handleUnknownTypeId(_baseType, id, this,\n                        \"Type id '%s' is not subtype of base type %s\", id, _baseType);\n        }\n        throw new IllegalArgumentException(String.format(\n                \"Type id '%s' is not subtype of base type %s\", id, _baseType));\n    }\n    return actualType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}