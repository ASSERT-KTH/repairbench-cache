{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    TypeFactory tf = ctxt.getTypeFactory();\n    JavaType subType;\n\n    if (id.indexOf('<') > 0) {\n        subType = tf.constructFromCanonical(id);\n        // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n        //    compatibility -- needed later anyway, and not doing so may open\n        //    security issues.\n        if (!_baseType.isTypeOrSubTypeOf(subType.getRawClass())) {\n            // 17-Aug-2017, tatu: Should use proper error reporting\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"': not subtype of \"+_baseType);\n        }\n        return subType;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n    }\n    subType = tf.constructSpecializedType(_baseType, cls);\n    if (!_baseType.isTypeOrSubTypeOf(cls)) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"': not subtype of \"+_baseType);\n    }\n    return subType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}