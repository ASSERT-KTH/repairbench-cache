{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n         *    check if any generics info is added; and only then ask factory\n         *    to do translation when necessary\n         */\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // note: may want to try combining with specialization (esp for EnumMap)?\n            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n            //    compatibility -- needed later anyway, and not doing so may open\n            //    security issues.\n            JavaType t = tf.constructFromCanonical(id);\n            // Need to check assignability here, requirement from [databind#1735].\n            // Note: this check works for Raw types but does not take generic type\n            // parameters into account. Sub-classes may need to override for stricter\n            // checks. Specific case here is against ClassNameIdResolver.\n            if (!_baseType.getRawClass().isAssignableFrom(t.getRawClass())) {\n                 // If context is available, make a nicer exception?\n                 throw new IllegalArgumentException(String.format(\n                         \"Specified type %s not subtype of %s\", t.toCanonical(), _baseType.toCanonical()));\n            }\n                // Probably cleaner to have a method in `TypeFactory` but can't add in patch\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //   DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            // ... meaning that we really should never get here.\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        // 17-Aug-2017, tatu: We should be fine here, constructSpecializedType checks for compatibility\n        return tf.constructSpecializedType(_baseType, cls);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}