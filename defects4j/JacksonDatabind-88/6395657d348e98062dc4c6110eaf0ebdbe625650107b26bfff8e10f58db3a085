{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    TypeFactory tf = ctxt.getTypeFactory();\n    if (id.indexOf('<') > 0) {\n        JavaType t = tf.constructFromCanonical(id);\n        // Ensure that the resolved type is assignment-compatible with the base type.\n        if (!_baseType.getRawClass().isAssignableFrom(t.getRawClass())) {\n            String msg = \"Type id '\" + id + \"' (resolved to \" + t \n                    + \") not subtype of \" + _baseType;\n            if (ctxt instanceof DeserializationContext) {\n                return ((DeserializationContext) ctxt).handleUnknownTypeId(_baseType, id, this, msg);\n            }\n            throw new IllegalArgumentException(msg);\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            return ((DeserializationContext) ctxt).handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n    }\n    return tf.constructSpecializedType(_baseType, cls);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}