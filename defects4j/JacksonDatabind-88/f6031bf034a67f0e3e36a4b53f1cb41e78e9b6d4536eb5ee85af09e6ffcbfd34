{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n         *    check if any generics info is added; and only then ask factory\n         *    to do translation when necessary\n         */\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            // note: may want to try combining with specialization (esp for EnumMap)?\n            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment\n            //    compatibility -- needed later anyway, and not doing so may open\n            //    security issues.\n            JavaType t = tf.constructFromCanonical(id);\n                // Probably cleaner to have a method in `TypeFactory` but can't add in patch\n\n            // 18-Aug-2017, tatu: As per [databind#1735], must verify that type is assignable\n            if (_baseType != null && _baseType.getRawClass() != Object.class) {\n                // 18-Aug-2017, tatu: Make sure it's subtype (or same type) -- MUST be done\n                //   there is no other place it gets verified.\n                if (!t.isTypeOrSubTypeOf(_baseType.getRawClass())) {\n                     throw ctxt.invalidTypeIdException(_baseType, id, String.format(\n                            \"Not a subtype of (%s)\", _baseType.toCanonical()));\n                }\n            }\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //   DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                // 18-Aug-2017, tatu: Need to pass base type to handler, NOT resolved type\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            // ... meaning that we really should never get here.\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n        // 18-Aug-2017, tatu: This check must also be enforced for non-generic type ids;\n        //    and we must NOT try to specialize (to retain type parameters of resolved\n        //    type id)\n        /* Also note that we could theoretically try to use `TypeFactory.constructGeneralizedType()`\n         * or `constructSpecializedType()` -- but the problem is that we do not really know\n         * which base type to use; the declared type or actual type. For now, let's simply\n         * construct type as is; specialization can be done somewhere else if need be.\n         */\n        // 19-Aug-2017, tatu: Actually... seems we DO need to check some cases...\n        //    specifically, if `_baseType` is abstract/interface, we may need that?\n\n        // Anyway, let's try finding possibly more specialized type BUT without losing\n        // generic type declaration from within id\n        return tf.constructSpecializedType(_baseType, cls);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}