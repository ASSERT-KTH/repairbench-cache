{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Handle cases where either value is NaN\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            // Both are NaN, so check if the operation is equality\n            return evaluateCompare(0);\n        } else {\n            // Only one is NaN, result is false for any comparison\n            return false;\n        }\n    } else {\n        // Normal comparison without NaN\n        int comparison = (ld == rd) ? 0 : (ld < rd) ? -1 : 1;\n        return evaluateCompare(comparison);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}