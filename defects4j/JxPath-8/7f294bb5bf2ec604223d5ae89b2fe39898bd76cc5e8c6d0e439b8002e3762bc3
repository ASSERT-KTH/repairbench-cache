{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            return containsMatch((Iterator) right, left);\n        }\n\n        // Convert arguments to doubles\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        // Special handling for NaN values according to XPath/JXPath test semantics\n        boolean leftIsNaN = Double.isNaN(ld);\n        boolean rightIsNaN = Double.isNaN(rd);\n\n        // Check if either value is NaN\n        if (leftIsNaN || rightIsNaN) {\n            // Determine the type of comparison operation based on its symbol\n            String symbol = getSymbol(); // Assumes getSymbol() is available from CoreOperation\n\n            // For relational operators (<, <=, >, >=), any NaN operand results in false\n            if (symbol.equals(\">\") || symbol.equals(\"<\") || symbol.equals(\">=\") || symbol.equals(\"<=\")) {\n                return false;\n            }\n            // For equality (=), the result is true only if both operands are NaN (based on test expectation)\n            if (symbol.equals(\"=\")) {\n                return leftIsNaN && rightIsNaN;\n            }\n            // For inequality (!=), the result is false only if both operands are NaN\n            if (symbol.equals(\"!=\")) {\n                return !(leftIsNaN && rightIsNaN);\n            }\n            // If the symbol is none of the above comparison symbols, default to false.\n            // This case might indicate an issue or an operation type not handled here.\n            return false;\n        }\n\n        // For non-NaN numeric comparisons, use Double.compare for robustness\n        // Handles +/- Infinity, -0.0 etc. correctly.\n        // Pass the comparison result (-1, 0, or 1) to evaluateCompare.\n        return evaluateCompare(Double.compare(ld, rd));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}