{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Fix: handle NaN comparisons per XPath semantics\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // Only '=' should return true for NaN=NaN, everything else returns false\n        // But we don't know which comparison, so delegate to evaluateCompare as follows:\n        // evaluateCompare expects 0 for eq, -1 for lt, 1 for gt\n        // But whatever operator, if any arg is NaN, only eq should be true if both are NaN\n        // So:\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            // Only for equality (evaluateCompare(0)) return true, others are false\n            return evaluateCompare(0);\n        } else {\n            // If only one is NaN, all comparisons are false (except !=); evaluateCompare(0) is false on eq\n            // (Assume evaluateCompare(0) for eq, otherwise produces false for gt or lt)\n            return false;\n        }\n    }\n\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}