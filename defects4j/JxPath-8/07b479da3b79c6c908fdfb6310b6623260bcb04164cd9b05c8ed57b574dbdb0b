{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            return containsMatch((Iterator) right, left);\n        }\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        // Handle NaN equality case explicitly\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            return evaluateCompare(0); // Consider NaN equal to itself\n        }\n\n        // For any other case involving NaN, consider it false (but in Java's normal behavior)\n        // However, according to the test case, we need to return false for comparisons when either is NaN\n        // except for equality which is handled above\n        if (Double.isNaN(ld) || Double.isNaN(rd)) {\n            // For relational comparisons (>, <), return false\n            // For equality, we already handled the NaN==NaN case above\n            if (ld == rd) {\n                return true; // but this case was already handled by the first check\n            }\n            return false;\n        }\n\n        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}