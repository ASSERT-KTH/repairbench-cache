{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n    boolean ldNaN = Double.isNaN(ld);\n    boolean rdNaN = Double.isNaN(rd);\n    if (ldNaN || rdNaN) {\n        // Any comparison with NaN other than \"=\" or \"!=\" yields false\n        switch (operator) {\n            case EQUAL:\n                // only true if both are NaN\n                return ldNaN && rdNaN;\n            case NOT_EQUAL:\n                // true if exactly one is NaN\n                return !(ldNaN && rdNaN);\n            default:\n                return false;\n        }\n    }\n\n    // normal numeric comparison\n    int cmp = ld == rd ? 0 : (ld < rd ? -1 : 1);\n    return evaluateCompare(cmp);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}