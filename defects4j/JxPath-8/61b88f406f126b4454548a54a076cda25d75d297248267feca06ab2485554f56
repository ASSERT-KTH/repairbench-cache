{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Handle NaN according to XPath semantics:\n    //  - = returns true only if both are NaN\n    //  - != returns true if exactly one is NaN\n    //  - all other comparisons return false if any operand is NaN\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        boolean bothNaN = Double.isNaN(ld) && Double.isNaN(rd);\n        // Detect operator by probing evaluateCompare:\n        boolean isLt  = evaluateCompare(-1);\n        boolean isEq  = evaluateCompare(0);\n        boolean isGt  = evaluateCompare(1);\n        // '=' operator\n        if (isEq && !isLt && !isGt) {\n            return bothNaN;\n        }\n        // '!=' operator\n        if (!isEq && isLt && isGt) {\n            return !bothNaN;\n        }\n        // <,>,<=,>= with NaN \u2192 false\n        return false;\n    }\n\n    // Normal numeric compare\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}