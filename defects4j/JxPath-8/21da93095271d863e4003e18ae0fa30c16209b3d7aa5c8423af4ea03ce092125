{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n    // Fix: handle NaN comparisons according to XPath rules\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // Only = should return true if both sides are NaN, otherwise false.\n        // But the operator is not accessible here, so we must handle via evaluateCompare\n        // evaluateCompare(0) == (ld == rd)\n        return evaluateCompare(Double.isNaN(ld) && Double.isNaN(rd) ? 0 : -2); // -2 = not equal/other\n    }\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}