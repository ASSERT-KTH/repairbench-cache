{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Fix: handle NaN cases as per XPath/XQuery rules:\n    // NaN != NaN, NaN < anything == false, NaN > anything == false except for = with NaN (true)\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // try to preserve the compatibility with tests:\n        // $nan = $nan => TRUE\n        // $nan < $nan => FALSE\n        // $nan > $nan => FALSE\n        // $nan = N  => FALSE\n        // $nan < N  => FALSE\n        // $nan > N  => FALSE\n\n        // if both are NaN, and the comparison is equality, return true\n        // But this method evaluates comparison based on evaluateCompare\n        // So handle equality when both are NaN\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            // Only equality operator should return true, the rest false\n            // So pass 0 to evaluateCompare for equality, -1/1 for < >\n            // To do this, rely on evaluateCompare signature\n            return evaluateCompare(0);\n        } else {\n            // Otherwise, all comparisons return false\n            return false;\n        }\n    }\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}