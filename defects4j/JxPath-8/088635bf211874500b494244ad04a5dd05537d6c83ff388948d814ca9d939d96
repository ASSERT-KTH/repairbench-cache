{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            // Assuming findMatch correctly handles potential NaN values within iterators\n            // according to XPath node-set comparison rules.\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            // Assuming containsMatch correctly handles potential NaN values\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            // Assuming containsMatch correctly handles potential NaN values\n            return containsMatch((Iterator) right, left);\n        }\n\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        // XPath 1.0 specification section 3.4 requires that relational comparisons\n        // (<, >, <=, >=) involving NaN return false.\n        // This check assumes this compute method is used for relational expressions.\n        // Equality expressions (=, !=) might have different handling, particularly\n        // for NaN = NaN, which the tests expect to be true (a common JXPath interpretation).\n        if (Double.isNaN(ld) || Double.isNaN(rd)) {\n            // For relational operators, any comparison involving NaN is false.\n            // The evaluateCompare method is not called in this case.\n            return false;\n        }\n\n        // For non-NaN numeric values, use Double.compare which handles\n        // -0.0, +0.0, POSITIVE_INFINITY, NEGATIVE_INFINITY correctly.\n        // Pass the comparison result (-1, 0, or 1) to the specific\n        // operator's evaluation logic.\n        return evaluateCompare(Double.compare(ld, rd));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}