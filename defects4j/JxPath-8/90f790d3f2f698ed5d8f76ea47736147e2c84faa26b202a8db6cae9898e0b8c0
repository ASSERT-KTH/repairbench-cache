{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Special\u2010case NaN comparisons\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // Evaluate operator against 0, 1 and -1 to detect \"=\", \"!=\", \"<\", \">\" etc.\n        boolean r0  = evaluateCompare(0);\n        boolean r1  = evaluateCompare(1);\n        boolean r_1 = evaluateCompare(-1);\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            // Both NaN: only \"=\" should be true\n            if (r0 && !r1 && !r_1) {\n                return true;\n            }\n            return false;\n        }\n        // One NaN: only \"!=\" should be true\n        if (r1 && r_1) {\n            return true;\n        }\n        return false;\n    }\n\n    int cmp;\n    if (ld < rd) {\n        cmp = -1;\n    } else if (ld > rd) {\n        cmp = 1;\n    } else {\n        cmp = 0;\n    }\n    return evaluateCompare(cmp);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}