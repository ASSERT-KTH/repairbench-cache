{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n    // Fix: Correctly handle NaN comparisons\n    if (Double.isNaN(ld) && Double.isNaN(rd)) {\n        // In XPath 1.0, NaN = NaN is true, but all other comparisons are false\n        // We rely on evaluateCompare for the operation, thus we must detect equality test (==)\n        // But since we don't know here, assume evaluateCompare(0) means equality\n        return evaluateCompare(0);\n    }\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // If either is NaN (but not both), then equality is false, all orderings are false\n        return false;\n    }\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}