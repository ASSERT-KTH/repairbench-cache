{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    \n    // Check for NaN before converting to double\n    if (left instanceof Double && ((Double) left).isNaN() || \n        right instanceof Double && ((Double) right).isNaN()) {\n        // NaN comparisons\n        if (left.equals(right)) {\n            return evaluateCompare(0); // NaN == NaN is true\n        } else {\n            return evaluateCompare(-1); // All other NaN comparisons are false\n        }\n    }\n\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n    return evaluateCompare(Double.compare(ld, rd));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}