{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Fix: If either ld or rd is NaN and both operands are NaN and values are being equated\n    // then \"$nan = $nan\" should return true, but for comparisons, NaN always returns false.\n    // The old code used 'ld == rd', but NaN == NaN is false in Java.\n    // So, carefully handle accordingly\n\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // \"$nan = $nan\" should return true, the rest should be false\n        // The context of what is being compared (which operator) is unknown in 'compute',\n        // but it must be known, so evaluateCompare can decide. So we need to make sure\n        // that when both are NaN, and evaluating equality, evaluateCompare(0) is called.\n\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            // call evaluateCompare(0): \"equal\"\n            return evaluateCompare(0);\n        }\n        // Otherwise NaN involved, but not both => always false for compare\n        // (call evaluateCompare(other), but make sure it's never equal)\n        // We can use \"1\" or \"-1\", but evaluateCompare(0) is the only one for equals\n        // So call with -1 (which means left < right, but actually just means not equal)\n        return evaluateCompare(-1);\n    }\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}