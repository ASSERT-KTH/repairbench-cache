{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            return containsMatch((Iterator) right, left);\n        }\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        if (Double.isNaN(ld) || Double.isNaN(rd)) {\n            // JXPath's testNan implies special handling for NaN comparisons:\n            // - NaN = NaN should be TRUE.\n            // - Any other comparison involving NaN (e.g., NaN > 0, NaN < NaN) should be FALSE.\n            if (Double.isNaN(ld) && Double.isNaN(rd)) {\n                // If both are NaN, return 0 for evaluateCompare.\n                // For '=' operator, evaluateCompare(0) will return true (as per test case `NaN = NaN`).\n                // For '>', '<', etc., evaluateCompare(0) will return false.\n                return evaluateCompare(0);\n            } else {\n                // If only one is NaN (e.g., NaN > 0, NaN = 0), the result should always be false.\n                return false;\n            }\n        }\n        // If neither is NaN, perform standard comparison.\n        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}