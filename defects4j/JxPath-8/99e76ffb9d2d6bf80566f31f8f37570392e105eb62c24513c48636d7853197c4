{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n    \n    // Fix: correct handling of NaN per XPath spec\n    if (Double.isNaN(ld) && Double.isNaN(rd)) {\n        // Only \"=\" returns true for NaN == NaN\n        return evaluateCompareForNaN(ld, rd);\n    }\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        return evaluateCompareForNaN(ld, rd);\n    }\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}\n\n// Helper method to handle NaN comparisons as per XPath specs\nprivate boolean evaluateCompareForNaN(double ld, double rd) {\n    // For NaN == NaN, only '=' returns true, others false\n    // You might need to adjust the method to check which operation (=, >, <, etc) this compute is for.\n    // For illustration, let's assume 'evaluateCompare' knows the operation and handles the convention\n    // So we'll just return the conventional value for \"equals\", otherwise false\n\n    // Let's assume evaluateCompare(0) is for equals.\n    // For NaN == NaN : equals ok\n    // For >, <, etc : always false\n    return evaluateCompare(Double.isNaN(ld) && Double.isNaN(rd) ? 0 : 1); // only 'equals' will get 0\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}