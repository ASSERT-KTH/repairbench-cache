{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            return containsMatch((Iterator) right, left);\n        }\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        boolean ldIsNaN = Double.isNaN(ld);\n        boolean rdIsNaN = Double.isNaN(rd);\n\n        if (ldIsNaN || rdIsNaN) {\n            if (ldIsNaN && rdIsNaN) {\n                // XPath: NaN = NaN is true.\n                // For other comparisons (e.g., NaN < NaN, NaN > NaN), they should be false.\n                // Passing 0 to evaluateCompare will result in true for '=' operation and\n                // false for '<' or '>' operations, which matches XPath behavior.\n                return evaluateCompare(0);\n            } else {\n                // One of them is NaN, the other is not.\n                // XPath: Any comparison with NaN (where one is not NaN) is false.\n                // We pass '2' (or any value other than 0, -1, 1) to evaluateCompare.\n                // This assumes evaluateCompare will return false for standard comparisons\n                // when given an \"out of range\" value.\n                return evaluateCompare(2);\n            }\n        }\n        // Neither is NaN. Perform standard double comparison as before.\n        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}