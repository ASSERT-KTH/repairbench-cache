{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    \n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n    \n    // Handle NaN cases as specified: if one is NaN (but not both) the result is false;\n    // if both are NaN, treat them as equal (cmp==0) so that equality comparisons succeed.\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            return evaluateCompare(0);\n        }\n        return false;\n    }\n    \n    int cmp = ld == rd ? 0 : ld < rd ? -1 : 1;\n    return evaluateCompare(cmp);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}