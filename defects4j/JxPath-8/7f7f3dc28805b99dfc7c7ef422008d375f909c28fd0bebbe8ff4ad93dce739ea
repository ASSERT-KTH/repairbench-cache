{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Handle NaN: NaN compared to NaN is \"equal\", otherwise all comparisons are false\n    if (Double.isNaN(ld) && Double.isNaN(rd)) {\n        // force comparison result = 0 so \"=\" yields true, \"<\" and \">\" yield false\n        return evaluateCompare(0);\n    }\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // any comparison with exactly one NaN is false\n        return false;\n    }\n\n    return evaluateCompare(ld == rd ? 0 : (ld < rd ? -1 : 1));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}