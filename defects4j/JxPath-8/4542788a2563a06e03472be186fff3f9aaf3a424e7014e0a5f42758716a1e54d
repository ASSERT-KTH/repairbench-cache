{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // handle NaN comparision per XPath 1.0 spec: comparisons with NaN always false, except '=' yields true for two NaNs\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        if (Double.isNaN(ld) && Double.isNaN(rd)) {\n            // NaN = NaN is true; NaN < NaN or NaN > NaN are false\n            // evaluateCompare(0) means an equality comparison\n            return evaluateCompare(0);\n        } else {\n            // NaN compared to number: all <, >, = are false\n            return false;\n        }\n    }\n\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}