{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Fix: Special handling for NaN per XPath: NaN = NaN yields TRUE, all other ops with NaN yield FALSE\n    boolean ldNaN = Double.isNaN(ld);\n    boolean rdNaN = Double.isNaN(rd);\n\n    if (ldNaN && rdNaN) {\n        // NaN = NaN must yield true, others false\n        return evaluateCompare(0); // this means equality (compare==0) is true, others false\n    }\n    if (ldNaN || rdNaN) {\n        // if either is NaN, any relational or equality yields false\n        return evaluateCompare(Integer.MIN_VALUE); // always false, even for equality\n    }\n\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}