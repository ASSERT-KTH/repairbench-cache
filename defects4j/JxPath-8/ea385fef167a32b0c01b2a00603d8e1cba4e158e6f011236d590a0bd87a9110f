{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Handle NaN values per XPath spec: all comparisons except = are false; NaN = NaN is true.\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        return evaluateNaNCompare(ld, rd);\n    }\n\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}\n\n// Helper for NaN comparison (assume equals, <, > passed to this)\nprivate boolean evaluateNaNCompare(double ld, double rd) {\n    // This method should be implemented according to the operation type.\n    // For simplicity, let's assume evaluateCompare uses an operation type field:\n    // -1: less than, 0: equals, 1: greater than\n\n    // Let's assume there is a protected int operator field indicating the operation:\n    // (as is typical in CoreOperation subclasses)\n    // 0: '=', 1: '!=', 2: '<', 3: '<=', 4: '>', 5: '>='\n\n    // For =: NaN = NaN is true; otherwise false.\n    // For !=: NaN != NaN is false; otherwise true.\n    // For <, >, <=, >=: always false.\n\n    switch (operator) {\n        case 0: // '='\n            return Double.isNaN(ld) && Double.isNaN(rd);\n        case 1: // '!='\n            return !(Double.isNaN(ld) && Double.isNaN(rd));\n        case 2: // '<'\n        case 3: // '<='\n        case 4: // '>'\n        case 5: // '>='\n            return false;\n        default:\n            return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}