{
    "generation": "private boolean compute(Object left, Object right) {\n    left = reduce(left);\n    right = reduce(right);\n\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator && right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld = InfoSetUtil.doubleValue(left);\n    double rd = InfoSetUtil.doubleValue(right);\n\n    // Fix: Handle NaN comparisons according to XPath 1.0/2.0 rules\n    if (Double.isNaN(ld) && Double.isNaN(rd)) {\n        // NaN = NaN is TRUE (XPath semantics)\n        // All relational ops (>, <, >=, <=) are FALSE, only = returns true here\n        // We need to delegate decision to evaluateCompare according to the comparison intended\n        // Assume evaluateCompare(0) means \"equals\", -1 means \"<\", 1 means \">\"\n        return evaluateCompare(0); // Only = will return true, others will not\n    }\n    if (Double.isNaN(ld) || Double.isNaN(rd)) {\n        // NaN compared to anything except NaN: = is FALSE, <, > are FALSE\n        // logical meaning: the only way we get true is equals between two NaNs above\n        return evaluateCompare(Double.NaN); // For =, this should return false, and so on\n    }\n\n    return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}