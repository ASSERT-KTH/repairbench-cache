{
    "generation": "    private boolean compute(Object left, Object right) {\n        left = reduce(left);\n        right = reduce(right);\n\n        if (left instanceof InitialContext) {\n            ((InitialContext) left).reset();\n        }\n        if (right instanceof InitialContext) {\n            ((InitialContext) right).reset();\n        }\n        if (left instanceof Iterator && right instanceof Iterator) {\n            return findMatch((Iterator) left, (Iterator) right);\n        }\n        if (left instanceof Iterator) {\n            return containsMatch((Iterator) left, right);\n        }\n        if (right instanceof Iterator) {\n            return containsMatch((Iterator) right, left);\n        }\n        double ld = InfoSetUtil.doubleValue(left);\n        double rd = InfoSetUtil.doubleValue(right);\n\n        // XPath 1.0 Section 3.5 specifies that relational comparisons\n        // (<, <=, >, >=) involving NaN return false.\n        // CoreOperationRelationalExpression handles these operators.\n        // Equality (=, !=) is handled separately in CoreOperationCompare,\n        // which needs different NaN semantics (NaN = NaN is true in JXPath tests).\n        if (Double.isNaN(ld) || Double.isNaN(rd)) {\n            return false;\n        }\n\n        // Use Double.compare for robust comparison of non-NaN doubles,\n        // including handling of infinities.\n        int comparison = Double.compare(ld, rd);\n        return evaluateCompare(comparison);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}