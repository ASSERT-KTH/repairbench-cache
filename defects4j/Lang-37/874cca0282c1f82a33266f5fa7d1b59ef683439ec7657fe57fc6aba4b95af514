{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // Determine common ancestor\n    Class<?> componentType;\n    if (type1.isAssignableFrom(type2)) {\n        componentType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        componentType = type2;\n    } else {\n        // No assignable relation, defaulting to common superclass (e.g., Number or Object)\n        Class<?> superClass = type1;\n        while (!superClass.isAssignableFrom(type2)) {\n            superClass = superClass.getSuperclass();\n            if (superClass == null) {\n                superClass = Object.class;\n                break;\n            }\n        }\n        componentType = superClass;\n    }\n\n    int length = array1.length + array2.length;\n    T[] joinedArray = (T[]) Array.newInstance(componentType, length);\n    try {\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    } catch (ArrayStoreException e) {\n        throw new IllegalArgumentException(\"Cannot store elements from first array to array of type: \" + componentType.getName(), e);\n    }\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        throw new IllegalArgumentException(\"Cannot store elements from second array to array of type: \" + componentType.getName(), e);\n    }\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}