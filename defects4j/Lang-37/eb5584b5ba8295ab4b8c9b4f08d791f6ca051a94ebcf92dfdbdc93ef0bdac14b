{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> componentType1 = array1.getClass().getComponentType();\n    Class<?> componentType2 = array2.getClass().getComponentType();\n\n    // If types are equal or array2 is assignable to componentType1, proceed as before\n    if (componentType1.isAssignableFrom(componentType2)) {\n        T[] joinedArray = (T[]) Array.newInstance(componentType1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else if (componentType2.isAssignableFrom(componentType1)) {\n        // Widen return type to componentType2 if necessary\n        T[] joinedArray = (T[]) Array.newInstance(componentType2, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else {\n        // Find common superclass if possible\n        Class<?> superClass = getCommonSuperType(componentType1, componentType2);\n        if (superClass == null || superClass.equals(Object.class)) {\n            throw new IllegalArgumentException(\"Cannot store elements of type \" + componentType1 + \" and \" + componentType2 + \" in same array\");\n        }\n        T[] joinedArray = (T[]) Array.newInstance(superClass, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n}\n\n// Helper method to find the common supertype of two classes\nprivate static Class<?> getCommonSuperType(Class<?> c1, Class<?> c2) {\n    if (c1.isAssignableFrom(c2)) {\n        return c1;\n    }\n    if (c2.isAssignableFrom(c1)) {\n        return c2;\n    }\n    Class<?> superClass = c1;\n    while (superClass != null && !superClass.isAssignableFrom(c2)) {\n        superClass = superClass.getSuperclass();\n    }\n    return superClass == null ? Object.class : superClass;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}