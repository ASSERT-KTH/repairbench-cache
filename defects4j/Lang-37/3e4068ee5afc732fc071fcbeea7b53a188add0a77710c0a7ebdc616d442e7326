{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    // If array1 and array2 are of the exact same type, just proceed.\n    if (type1.isAssignableFrom(type2) && type2.isAssignableFrom(type1)) {\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n\n    // If both are subtypes of each other, use common supertype\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        // Find the nearest common superclass\n        Class<?> superClass = type1;\n        while (superClass != null && !superClass.isAssignableFrom(type2)) {\n            superClass = superClass.getSuperclass();\n        }\n        if (superClass == null || superClass == Object.class) {\n            superClass = Object.class;\n        }\n        Number newArray[] = (Number[]) Array.newInstance(superClass, array1.length + array2.length);\n        // Since Java generics are erased, we must copy carefully\n        System.arraycopy(array1, 0, newArray, 0, array1.length);\n        System.arraycopy(array2, 0, newArray, array1.length, array2.length);\n        return (T[]) newArray;\n    }\n\n    // If one can be assigned to the other, pick the \"higher\" type\n    Class<?> resultType = type1.isAssignableFrom(type2) ? type2 : type1;\n    Object joinedArray = Array.newInstance(resultType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return (T[]) joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}