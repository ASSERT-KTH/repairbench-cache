{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        try {\n            T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n            return joinedArray;\n        } catch (ArrayStoreException e) {\n            // If we can't store the elements, try using the type of the second array\n            final Class<?> type2 = array2.getClass().getComponentType();\n            if (type1.isAssignableFrom(type2)) {\n                // If type2 is compatible with type1, we can use type1\n                return addAll(array1, array2);\n            } else {\n                // Otherwise, use the common superclass\n                final Class<?> componentType = getCommonSuperclass(type1, type2);\n                T[] joinedArray = (T[]) Array.newInstance(componentType, array1.length + array2.length);\n                System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n                System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n                return joinedArray;\n            }\n        }\n    }\n\n    private static Class<?> getCommonSuperclass(Class<?> type1, Class<?> type2) {\n        if (type1.isAssignableFrom(type2)) {\n            return type1;\n        } else if (type2.isAssignableFrom(type1)) {\n            return type2;\n        } else {\n            // Find the common superclass\n            Class<?> superclass = type1;\n            while (superclass != null) {\n                if (superclass.isAssignableFrom(type2)) {\n                    return superclass;\n                }\n                superclass = superclass.getSuperclass();\n            }\n            return Object.class; // Fallback to Object if no common superclass found\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}