{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    }\n    if (array1 == null) {\n        return clone(array2);\n    }\n    if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // Compute the component type for the resulting array.\n    Class<?> componentType;\n\n    if (type1.isAssignableFrom(type2)) {\n        componentType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        componentType = type2;\n    } else {\n        // Find the most-specific common superclass\n        // For simple numbers, we use Number.class as a fallback\n        // otherwise, we use Object.class\n        if (Number.class.isAssignableFrom(type1) && Number.class.isAssignableFrom(type2)) {\n            componentType = Number.class;\n        } else {\n            componentType = Object.class;\n        }\n    }\n\n    // Now we need to check if all elements can really be assigned to the componentType\n    // as in the test case to throw an IllegalArgumentException\n    for (Object obj : array1) {\n        if (obj != null && !componentType.isInstance(obj)) {\n            throw new IllegalArgumentException(\"Cannot store \" + obj.getClass() + \" in an array of \" + componentType);\n        }\n    }\n    for (Object obj : array2) {\n        if (obj != null && !componentType.isInstance(obj)) {\n            throw new IllegalArgumentException(\"Cannot store \" + obj.getClass() + \" in an array of \" + componentType);\n        }\n    }\n\n    int length1 = array1.length;\n    int length2 = array2.length;\n    T[] joinedArray = (T[]) Array.newInstance(componentType, length1 + length2);\n    System.arraycopy(array1, 0, joinedArray, 0, length1);\n    System.arraycopy(array2, 0, joinedArray, length1, length2);\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}