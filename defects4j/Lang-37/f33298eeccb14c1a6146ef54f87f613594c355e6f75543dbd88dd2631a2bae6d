{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    // If array1 and array2 are not the same type, determine the best common supertype\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // If types differ, find common ancestor\n    Class<?> componentType;\n    if (type1.isAssignableFrom(type2)) {\n        componentType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        componentType = type2;\n    } else {\n        // Find common superclass\n        Class<?> temp1 = type1;\n        while (temp1 != null && !temp1.isAssignableFrom(type2)) {\n            temp1 = temp1.getSuperclass();\n        }\n        if (temp1 == null) {\n            componentType = Object.class;\n        } else {\n            componentType = temp1;\n        }\n    }\n\n    // Prevent the case where array1 is e.g. Integer[], array2 is Long[], which cannot be combined\n    // as Integer[] and Long[] are incompatible\n    // The expected behavior is IllegalArgumentException as in the test\n    if (!(componentType.isAssignableFrom(type1) && componentType.isAssignableFrom(type2))) {\n        throw new IllegalArgumentException(\"Cannot store both types in one array: \" +\n                type1.getName() + \" and \" + type2.getName());\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(componentType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException ex) {\n        // Happens when, for example, array1 is Integer[] and array2 is Long[], so throw a clearer exception\n        throw new IllegalArgumentException(\"Cannot store both types in one array: \" +\n                type1.getName() + \" and \" + type2.getName(), ex);\n    }\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}