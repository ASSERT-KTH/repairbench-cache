{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // If both component types are the same, proceed as before\n    if (type1.equals(type2)) {\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n\n    // If one component type is assignable from the other and not the same, use the common supertype\n    if (type1.isAssignableFrom(type2)) {\n        Class<?> newType = type1;\n        Object[] joinedArray = (Object[]) Array.newInstance(newType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return (T[]) joinedArray;\n    } else if (type2.isAssignableFrom(type1)) {\n        Class<?> newType = type2;\n        Object[] joinedArray = (Object[]) Array.newInstance(newType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return (T[]) joinedArray;\n    } else {\n        // No common component type, try to find a reasonable common supertype\n        Class<?> superType = findCommonSuperType(type1, type2);\n        if (superType == null) {\n            throw new IllegalArgumentException(\"Cannot store both array component types in a common array\");\n        }\n        Object[] joinedArray = (Object[]) Array.newInstance(superType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return (T[]) joinedArray;\n    }\n}\n\n// Helper method to find the nearest common superclass (other than Object.class)\nprivate static Class<?> findCommonSuperType(Class<?> c1, Class<?> c2) {\n    if (c1.isAssignableFrom(c2)) return c1;\n    if (c2.isAssignableFrom(c1)) return c2;\n    Class<?> superClass = c1;\n    while (superClass != null && !superClass.isAssignableFrom(c2)) {\n        superClass = superClass.getSuperclass();\n    }\n    return superClass == null ? Object.class : superClass;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}