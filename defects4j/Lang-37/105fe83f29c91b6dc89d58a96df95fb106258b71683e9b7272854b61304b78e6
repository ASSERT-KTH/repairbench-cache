{
    "generation": "    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(null, null)     = null\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * ArrayUtils.addAll([null], [null]) = [null, null]\n     * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n     * @param array2  the second array whose elements are added to the new array, may be <code\tnull</code>\n     * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n     *      The type of the new array is determined based on the type compatibility of the input arrays.\n     * @since 2.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null && array2 == null) {\n            return null;\n        } else if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n\n        // Determine the component type of the resulting array\n        Class<?> type = getComponentType(array1, array2);\n\n        // Check if elements of array2 can be stored in an array of 'type'\n        if (!canStore(array2, type)) {\n            throw new IllegalArgumentException(\"Incompatible types\");\n        }\n\n        T[] joinedArray = (T[]) Array.newInstance(type, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n\n    private static Class<?> getComponentType(Object arrayOrVarArgs, Object... array) {\n        Class<?> type = null;\n        if (arrayOrVarArgs != null && !arrayOrVarArgs.getClass().isArray()) {\n            type = arrayOrVarArgs.getClass();\n        }\n        for (Object o : array) {\n            if (o != null && !o.getClass().isArray()) {\n                Class<?> candidate = o.getClass();\n                if (type == null) {\n                    type = candidate;\n                } else if (!type.isAssignableFrom(candidate)) {\n                    // Find a common superclass\n                    Class<?> superclass = candidate;\n                    while (!type.isAssignableFrom(superclass)) {\n                        superclass = superclass.getSuperclass();\n                        if (superclass == Object.class) {\n                            return Object.class;\n                        }\n                    }\n                    type = superclass;\n                }\n            }\n        }\n        return type != null ? type : Object.class;\n    }\n\n    private static boolean canStore(Object array, Class<?> targetType) {\n        if (array == null) {\n            return true;\n        }\n        if (array.getClass().getComponentType().equals(targetType)) {\n            return true;\n        }\n        if (targetType.isAssignableFrom(array.getClass().getComponentType())) {\n            return true;\n        }\n        for (Object element : (Object[]) array) {\n            if (element != null && !targetType.isInstance(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static Object clone(Object array) {\n        if (array == null) {\n            return null;\n        }\n        if (!array.getClass().isArray()) {\n            return array;\n        }\n        int length = Array.getLength(array);\n        Object newArray = Array.newInstance(array.getClass().getComponentType(), length);\n        System.arraycopy(array, 0, newArray, 0, length);\n        return newArray;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}