{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n\n        // Check if array2 elements can be stored in array1's type\n        Class<?> type1 = array1.getClass().getComponentType();\n        for (Object element : array2) {\n            if (element != null && !type1.isInstance(element)) {\n                // Try to find a common supertype\n                Class<?> type2 = array2.getClass().getComponentType();\n                if (type1.isAssignableFrom(type2)) {\n                    type1 = type2;\n                } else if (type2.isAssignableFrom(type1)) {\n                    // type1 is already the supertype\n                } else {\n                    // No common supertype found\n                    throw new IllegalArgumentException(\"Cannot store \" + type2.getName() +\n                        \" in an array of \" + type1.getName());\n                }\n                break;\n            }\n        }\n\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}