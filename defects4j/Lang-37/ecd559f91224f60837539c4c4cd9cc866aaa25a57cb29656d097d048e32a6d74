{
    "generation": "import java.lang.reflect.Array;\n\n/**\n * <p>Adds all the elements of the given arrays into a new array.</p>\n * <p>The new array contains all of the element of <code>array1</code> followed\n * by all of the elements <code>array2</code>. When an array is returned, it is always\n * a new array.</p>\n *\n * <pre>\n * ArrayUtils.addAll(null, null)     = null\n * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n * ArrayUtils.addAll([], [])         = []\n * ArrayUtils.addAll([null], [null]) = [null, null]\n * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n * </pre>\n *\n * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n *      The type of the new array is the type of the first array,\n *      unless the first array is null, in which case the type is the same as the second array.\n * @throws IllegalArgumentException if the arrays have incompatible component types.\n * @since 2.1\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n\n    // Check compatibility before attempting to copy array2\n    final Class<?> type2 = array2.getClass().getComponentType();\n    if (!type1.isAssignableFrom(type2)){\n        // Throw IllegalArgumentException if types are incompatible, as expected by testJira567\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" elements in an array of \" + type1.getName() + \" elements\");\n    }\n\n    // Types are compatible, proceed with copying array2.\n    // An ArrayStoreException might still occur if array2 contains elements\n    // that are not actually instances of type2 (due to prior misuse),\n    // but this reflects an issue with the input array2 itself.\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    \n    return joinedArray;\n}\n\n// Helper clone method assumed to exist elsewhere in ArrayUtils, added here for context of the fix\n// This method should NOT be part of the final output block if only addAll is requested.\nprivate static <T> T[] clone(T[] array) {\n    if (array == null) {\n        return null;\n    }\n    return array.clone();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}