{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // If both arrays are not assignable to each other, use the nearest common supertype\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        // Find common supertype (up to Object)\n        Class<?> superType = type1;\n        while (!superType.isAssignableFrom(type2)) {\n            superType = superType.getSuperclass();\n            if (superType == null) {\n                superType = Object.class;\n                break;\n            }\n        }\n        type1 = superType;\n    }\n\n    Object joinedArray = Array.newInstance(type1, array1.length + array2.length);\n    try {\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        // throw more specific exception (as in test)\n        throw new IllegalArgumentException(\"Incompatible array types: \" +\n            array1.getClass().getComponentType() + \" and \" + array2.getClass().getComponentType());\n    }\n    return (T[]) joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}