{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // Determine component type of resulting array as the common superclass\n    Class<?> componentType;\n    if (type1.isAssignableFrom(type2)) {\n        componentType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        componentType = type2;\n    } else {\n        componentType = Object.class;\n    }\n\n    int length1 = array1.length;\n    int length2 = array2.length;\n    T[] joinedArray = (T[]) Array.newInstance(componentType, length1 + length2);\n\n    // Copy elements and validate type compatibility\n    for (int i = 0; i < length1; i++) {\n        Object elt = array1[i];\n        if (elt != null && !componentType.isInstance(elt)) {\n            throw new IllegalArgumentException(\"Cannot store \" + elt.getClass() + \" in an array of \" + componentType);\n        }\n        joinedArray[i] = (T) elt;\n    }\n    for (int i = 0; i < length2; i++) {\n        Object elt = array2[i];\n        if (elt != null && !componentType.isInstance(elt)) {\n            throw new IllegalArgumentException(\"Cannot store \" + elt.getClass() + \" in an array of \" + componentType);\n        }\n        joinedArray[length1 + i] = (T) elt;\n    }\n\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}