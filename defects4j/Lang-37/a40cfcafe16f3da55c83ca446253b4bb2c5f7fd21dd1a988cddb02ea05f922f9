{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        final Class<?> type2 = array2.getClass().getComponentType();\n        Class<?> type = type1;\n        if (type1 != type2) {\n            // TODO: Not the best way to do this.  More efficient to use reflection to get the type and then check that\n            //       array1 and array2 are both assignable to it.\n            //       The worst case is that we do this twice.\n            type = getCommonSuperClass(type1, type2);\n            if (type == null) {\n                throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n            }\n        }\n        T[] joinedArray = (T[]) Array.newInstance(type, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException e) {\n            // Check if problem is incompatible types\n            throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName(), e);\n        }\n        return joinedArray;\n    }\n\n    private static Class<?> getCommonSuperClass(Class<?> class1, Class<?> class2) {\n        if (class1 == null || class2 == null) {\n            return null;\n        }\n        if (class1.isAssignableFrom(class2)) {\n            return class1;\n        }\n        if (class2.isAssignableFrom(class1)) {\n            return class2;\n        }\n        if (class1.isPrimitive() || class2.isPrimitive()) {\n            return null;\n        }\n        try {\n            Class<?> ancestor = class1.getSuperclass();\n            if (ancestor.isAssignableFrom(class2)) {\n                return ancestor;\n            }\n            return getCommonSuperClass(ancestor, class2);\n        } catch (Exception e) {\n            // Should not happen, but just in case.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}