{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    // If both arrays are non-null, need to ensure types are compatible\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        // Neither is assignable from the other, pick a common super class (typically Object)\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in array of \" + type1.getName());\n    }\n    if (!type1.isAssignableFrom(type2)) {\n        // type2 elements can't go in array of type1\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in array of \" + type1.getName());\n    }\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException ex) {\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in array of \" + type1.getName(), ex);\n    }\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}