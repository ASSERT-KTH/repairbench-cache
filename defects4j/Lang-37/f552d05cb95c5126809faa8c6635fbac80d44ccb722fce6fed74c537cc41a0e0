{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    } else if (array1.length == 0) {\n        return clone(array2);\n    } else if (array2.length == 0) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (type1.isAssignableFrom(type2)) {\n        // type1 can hold elements of type2\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else if (type2.isAssignableFrom(type1)) {\n        // type2 can hold elements of type1 (we'll copy to type2 array)\n        T[] joinedArray = (T[]) Array.newInstance(type2, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else {\n        // Need to find a common supertype\n        Class<?> componentType = findCommonComponentType(type1, type2);\n        T[] joinedArray = (T[]) Array.newInstance(componentType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        // Copy second array element by element to avoid ArrayStoreException\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException e) {\n            // Fallback to individual copying if arraycopy fails\n            for (int i = 0; i < array2.length; i++) {\n                joinedArray[array1.length + i] = array2[i];\n            }\n        }\n        return joinedArray;\n    }\n}\n\nprivate static Class<?> findCommonComponentType(Class<?> type1, Class<?> type2) {\n    if (type1.isAssignableFrom(type2)) {\n        return type1;\n    }\n    if (type2.isAssignableFrom(type1)) {\n        return type2;\n    }\n    // Find common superclass\n    Class<?> superType = type1;\n    while (superType != null) {\n        if (superType.isAssignableFrom(type2)) {\n            return superType;\n        }\n        superType = superType.getSuperclass();\n    }\n    // If no common superclass found, use Object\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}