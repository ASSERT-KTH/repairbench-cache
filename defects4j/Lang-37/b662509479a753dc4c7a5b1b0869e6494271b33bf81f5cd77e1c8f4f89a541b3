{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    // Check for different component types\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        throw new IllegalArgumentException(\"Cannot store elements of type \" + type2 + \" in an array of type \" + type1);\n    }\n    // If type2 is a subclass of type1, use type1 as the joined array type (safe)\n    // If type1 is a subclass of type2, use type2 as the joined array type (safe)\n    Class<?> newComponentType = type1.isAssignableFrom(type2) ? type2 : type1;\n    T[] joinedArray = (T[]) Array.newInstance(newComponentType, array1.length + array2.length);\n    try {\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        throw new IllegalArgumentException(\"Cannot store elements of different types in the resulting array\", e);\n    }\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}