{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    final Class<?> type1 = array1.getClass().getComponentType();\n    \n    // Check if array2 has elements that aren't compatible with type1\n    if (array2.length > 0 && !type1.isAssignableFrom(array2.getClass().getComponentType())) {\n        // Create a more general array type that can hold both types\n        final Class<?> commonType = findCommonSuperType(type1, array2.getClass().getComponentType());\n        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n    \n    // Original logic for compatible types\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n\nprivate static Class<?> findCommonSuperType(Class<?> c1, Class<?> c2) {\n    if (c1.isAssignableFrom(c2)) {\n        return c1;\n    }\n    if (c2.isAssignableFrom(c1)) {\n        return c2;\n    }\n    // If neither is assignable from the other, use the superclass or interface\n    if (!c1.isPrimitive() && !c2.isPrimitive()) {\n        // For non-primitive types, look for a common superclass\n        Class<?> parent = c1.getSuperclass();\n        while (parent != null && !parent.isAssignableFrom(c2)) {\n            parent = parent.getSuperclass();\n        }\n        if (parent != null) {\n            return parent;\n        }\n    }\n    // Default to Object as the most general type\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}