{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n\n        // If array1 is empty, just clone array2\n        if (array1.length == 0) {\n            return clone(array2);\n        }\n\n        // Get the component type of array1\n        final Class<?> type1 = array1.getClass().getComponentType();\n        // Make sure we have a common type to store both arrays' elements\n        Class<?> newArrayType = type1;\n\n        // If array2 is not empty, check if we need a more general type\n        if (array2.length > 0) {\n            // If both arrays have elements, we need to find a common superclass\n            final Class<?> type2 = array2.getClass().getComponentType();\n            if (type2 != null) {\n                // Check if type1 can store type2 elements\n                if (!type1.isAssignableFrom(type2)) {\n                    // If not, we'll use Object.class if neither type is a superclass of the other\n                    // Otherwise, use the more general type\n                    if (type2.isAssignableFrom(type1)) {\n                        newArrayType = type2;\n                    } else {\n                        // Find common superclass\n                        Class<?> commonType = type1;\n                        while (commonType != null && !commonType.isAssignableFrom(type2)) {\n                            commonType = commonType.getSuperclass();\n                        }\n                        if (commonType == null) {\n                            commonType = Object.class; // fallback to Object if no common ancestor found\n                        }\n                        newArrayType = commonType;\n                    }\n                }\n            }\n        }\n\n        // Create new array of the most appropriate type\n        final T[] joinedArray = (T[]) Array.newInstance(newArrayType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException e) {\n            // This should never happen if our type checking is correct\n            throw new IllegalArgumentException(\"Cannot store \" + array2.getClass().getComponentType() + \" in an array of \" + newArrayType);\n        }\n        return joinedArray;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}