{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    Class<?> componentType;\n    if (type1.isAssignableFrom(type2)) {\n        componentType = type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        componentType = type2;\n    } else {\n        componentType = Object.class;\n    }\n    T[] joinedArray = (T[]) Array.newInstance(componentType, array1.length + array2.length);\n\n    // Copy array1 with type check\n    for (int i = 0; i < array1.length; i++) {\n        Object element = array1[i];\n        if (element != null && !componentType.isInstance(element)) {\n            throw new IllegalArgumentException(\"Cannot store \" + element.getClass() + \" in array of \" + componentType);\n        }\n        joinedArray[i] = (T) element;\n    }\n\n    // Copy array2 with type check\n    for (int i = 0; i < array2.length; i++) {\n        Object element = array2[i];\n        if (element != null && !componentType.isInstance(element)) {\n            throw new IllegalArgumentException(\"Cannot store \" + element.getClass() + \" in array of \" + componentType);\n        }\n        joinedArray[i + array1.length] = (T) element;\n    }\n\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}