{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // If array types are not compatible, must find a common supertype\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        // Find common supertype\n        Class<?> commonType = Object.class;\n        if (type1.isAssignableFrom(type2)) {\n            commonType = type1;\n        } else if (type2.isAssignableFrom(type1)) {\n            commonType = type2;\n        } else if (type1.isPrimitive() || type2.isPrimitive()) {\n            // would never work for primitives\n            throw new IllegalArgumentException(\"Cannot store elements of type \" + type2 + \" in array of type \" + type1);\n        } else {\n            commonType = findCommonSuperType(type1, type2);\n        }\n        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else if (!type1.isAssignableFrom(type2)) {\n        throw new IllegalArgumentException(\"Cannot store elements of type \" + type2 + \" in array of type \" + type1);\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n\n// Helper method to find least common ancestor (supertype) for two classes\nprivate static Class<?> findCommonSuperType(Class<?> c1, Class<?> c2) {\n    if (c1.isAssignableFrom(c2)) {\n        return c1;\n    }\n    if (c2.isAssignableFrom(c1)) {\n        return c2;\n    }\n    Class<?> superClass = c1;\n    while (superClass != null && !superClass.equals(Object.class)) {\n        if (superClass.isAssignableFrom(c2)) {\n            return superClass;\n        }\n        superClass = superClass.getSuperclass();\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}