{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    Class<?> type = getCommonType(type1, type2);\n    if (type == null) {\n        throw new IllegalArgumentException(\"Cannot store \" + type2 + \" in an array of \" + type1);\n    }\n    T[] joinedArray = (T[]) Array.newInstance(type, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n\nprivate static Class<?> getCommonType(Class<?> type1, Class<?> type2) {\n    if (type1 == type2) {\n        return type1;\n    }\n    if (type1.isAssignableFrom(type2)) {\n        return type1;\n    }\n    if (type2.isAssignableFrom(type1)) {\n        return type2;\n    }\n    if (type1.isPrimitive() || type2.isPrimitive()) {\n        return null;\n    }\n    // TODO: Not handling all cases here, e.g. interfaces and classes with common ancestors\n    Class<?> ancestor = type1.getSuperclass();\n    while (ancestor != null) {\n        if (ancestor.isAssignableFrom(type2)) {\n            return ancestor;\n        }\n        ancestor = ancestor.getSuperclass();\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}