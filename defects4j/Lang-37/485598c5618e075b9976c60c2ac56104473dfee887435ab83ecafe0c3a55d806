{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // If both arrays are non-empty and their component types are not the same,\n    // we need to find a suitable common supertype, which is the superclass.\n    // Here, we create a joined array with the appropriate type.\n    // The rule is: The returned array has the type of the first array except when it is null.\n\n    // Check if both have elements and are of different types and not directly assignable\n    if (array1.length > 0 && array2.length > 0 && !type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        // Find common supertype\n        Class<?> superType = type1;\n        while (superType != null && !superType.isAssignableFrom(type2)) {\n            superType = superType.getSuperclass();\n        }\n        if (superType == null || superType == Object.class) {\n            superType = Object.class;\n        }\n        Object[] joinedArray = (Object[]) Array.newInstance(superType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return (T[]) joinedArray;\n    } else if (array2.length > 0 && !type1.isAssignableFrom(type2)) {\n        // If type2 isn't assignable to type1, can't store in type1[]. Throw as per test.\n        throw new IllegalArgumentException(\"Cannot store elements of type \" + type2.getName() +\n                \" in an array of type \" + type1.getName());\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}