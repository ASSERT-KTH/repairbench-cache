{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        // If we get here, the element types are incompatible\n        // So we need to find a common super type\n        Class<?> newType = determineCommonType(array1, array2);\n        if (newType == null) {\n            throw new IllegalArgumentException(\"Cannot store \" + type1.getName() +\n                \" in an array of \" + array2.getClass().getComponentType().getName());\n        }\n        final T[] newArray = (T[]) Array.newInstance(newType, array1.length + array2.length);\n        System.arraycopy(array1, 0, newArray, 0, array1.length);\n        System.arraycopy(array2, 0, newArray, array1.length, array2.length);\n        return newArray;\n    }\n    return joinedArray;\n}\n\nprivate static <T> Class<?> determineCommonType(T[] array1, T[] array2) {\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    if (type1.isAssignableFrom(type2)) {\n        return type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        return type2;\n    } else {\n        // Find common superclass\n        Class<?> current = type1;\n        while (current != null) {\n            if (current.isAssignableFrom(type2)) {\n                return current;\n            }\n            current = current.getSuperclass();\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}