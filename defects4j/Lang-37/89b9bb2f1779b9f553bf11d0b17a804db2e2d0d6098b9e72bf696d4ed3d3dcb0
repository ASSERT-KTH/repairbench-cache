{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n\n    // if the component types are the same, safe to join\n    if (type1.equals(type2)) {\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n\n    // if one component type is assignable from the other, promote to common supertype\n    if (type1.isAssignableFrom(type2)) {\n        Class<?> newType = type1;\n        Object[] joinedArray = (Object[]) Array.newInstance(newType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return (T[]) joinedArray;\n    }\n\n    if (type2.isAssignableFrom(type1)) {\n        Class<?> newType = type2;\n        Object[] joinedArray = (Object[]) Array.newInstance(newType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return (T[]) joinedArray;\n    }\n\n    // incompatible types; illegal argument\n    throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" elements in an array of \"\n            + type1.getName());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}