{
    "generation": "    /**\n     * <p>Adds all the elements of the given arrays into a new array.</p>\n     * <p>The new array contains all of the element of <code>array1</code> followed\n     * by all of the elements <code>array2</code>. When an array is returned, it is always\n     * a new array.</p>\n     *\n     * <pre>\n     * ArrayUtils.addAll(null, null)     = null\n     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n     * ArrayUtils.addAll([], [])         = []\n     * ArrayUtils.addAll([null], [null]) = [null, null]\n     * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n     * </pre>\n     *\n     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n     * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n     *      The type of the new array is the type of the first array,\n     *      unless the first array is null, in which case the type is the same as the second array.\n     * @since 2.1\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException e) {\n            // If arraycopy fails with ArrayStoreException, fall back to Object array\n            final Class<?> type = determineCommonType(array1, array2);\n            joinedArray = (T[]) Array.newInstance(type, array1.length + array2.length);\n            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        }\n        return joinedArray;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static Class<?> determineCommonType(Object[] array1, Object[] array2) {\n        Class<?> type1 = array1.getClass().getComponentType();\n        Class<?> type2 = array2.getClass().getComponentType();\n\n        if (type1.isAssignableFrom(type2)) {\n            return type1;\n        } else if (type2.isAssignableFrom(type1)) {\n            return type2;\n        } else {\n            // Fall back to Object if types are incompatible\n            return Object.class;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static <T> T[] clone(final T[] array) {\n        if (array == null) {\n            return null;\n        }\n        return (T[]) array.clone();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}