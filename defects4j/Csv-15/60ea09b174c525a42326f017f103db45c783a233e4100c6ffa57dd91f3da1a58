{
    "generation": "    // the original object is needed so can check for Number\n    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        final char delimChar = getDelimiter();\n        final char quoteChar = getQuoteCharacter().charValue();\n\n        QuoteMode quoteModePolicy = getQuoteMode();\n        if (quoteModePolicy == null) {\n            quoteModePolicy = QuoteMode.MINIMAL;\n        }\n        switch (quoteModePolicy) {\n        case ALL:\n        case ALL_NON_NULL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // FIXED: corrected Unicode range logic for minimal quoting\n                // Only quote if first char is less than ' ' or equal to quoteChar or delimChar or LF or CR\n                // Or if last char is <= SP (space)\n                // Or if contains quoteChar or delimChar or LF or CR in the value\n                // THIS LOGIC MATCHES commons-csv expectations and test cases\n\n                // Only quote if value contains special characters (quote, delim, CR, LF)\n                // or if first/last character is problematic (below space, or after DEL)\n                boolean needsQuoting = false;\n                // check for special cases on first char\n                if (c == quoteChar || c == delimChar || c == LF || c == CR || c < 0x20) {\n                    needsQuoting = true;\n                } else {\n                    // scan for special chars in value\n                    int i = pos;\n                    while (i < end) {\n                        char ch = value.charAt(i);\n                        if (ch == quoteChar || ch == delimChar || ch == LF || ch == CR) {\n                            needsQuoting = true;\n                            break;\n                        }\n                        i++;\n                    }\n                    // also quote if last character is less than or equal to space (SP)\n                    if (!needsQuoting) {\n                        char lastCh = value.charAt(end - 1);\n                        if (lastCh <= ' ') {\n                            needsQuoting = true;\n                        }\n                    }\n                }\n                quote = needsQuoting;\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }\n\n        if (!quote) {\n            // no encapsulation needed - write out the original value\n            out.append(value, start, end);\n            return;\n        }\n\n        // we hit something that needed encapsulation\n        out.append(quoteChar);\n\n        // Pick up where we left off: pos should be positioned on the first character that caused\n        // the need for encapsulation.\n        pos = offset;\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            if (c == quoteChar) {\n                // write out the chunk up until this point\n\n                // add 1 to the length to write out the encapsulator also\n                out.append(value, start, pos + 1);\n                // put the next starting position on the encapsulator so we will\n                // write it out again with the next string (effectively doubling it)\n                start = pos;\n            }\n            pos++;\n        }\n\n        // write the last segment\n        out.append(value, start, pos);\n        out.append(quoteChar);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}