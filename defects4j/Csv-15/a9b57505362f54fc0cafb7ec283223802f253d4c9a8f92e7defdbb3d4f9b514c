{
    "generation": "    // the original object is needed so can check for Number\n    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        final char delimChar = getDelimiter();\n        final Character quoteCharOption = getQuoteCharacter();\n        // Check for null quote character setting, although CSVFormat should prevent this unless QuoteMode is NONE\n        final char quoteChar = quoteCharOption == null ? Constants.NULL_CHARACTER : quoteCharOption.charValue();\n\n        QuoteMode quoteModePolicy = getQuoteMode();\n        if (quoteModePolicy == null) {\n            quoteModePolicy = QuoteMode.MINIMAL;\n        }\n        switch (quoteModePolicy) {\n        case ALL:\n        case ALL_NON_NULL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos); // pos initially equals offset\n\n                // Decision logic for MINIMAL quoting:\n                // 1. Quote if first char of the first record is special (LF, CR, < 0x20, quote char, delimiter).\n                //    Removed the problematic check for c > 0x7E which quoted high-ASCII like Euro symbol.\n                //    Used configured quoteChar and delimChar instead of hardcoded values.\n                //    Used c < SP (space) instead of c < 0x20 for consistency with the trailing space check.\n                if (newRecord && (c < SP || c == quoteChar || c == delimChar || c == LF || c == CR)) {\n                    quote = true;\n                }\n                // 2. Quote if the first char is the comment marker (or lower ASCII). Check is retained for compatibility.\n                //    Note: This quotes if *any* field starts with a character <= COMMENT ('#').\n                //    This includes quoting fields starting with space, quote char, or comment char itself.\n                //    The check for quoteChar here might be redundant given the loop below, but kept for consistency.\n                else if (c <= COMMENT) {\n                    quote = true;\n                } else {\n                    // 3. Scan internal characters for quote-triggering characters (LF, CR, quote char, delimiter).\n                    //    Start scanning from the beginning (pos is still offset here).\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    // 4. If not already quoted, check the last character for trailing space/control chars.\n                    if (!quote) {\n                        // Read the last char safely, pos might have changed in the loop\n                        c = value.charAt(end - 1);\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            // If MINIMAL logic decided no quote is needed, write raw value and return.\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            // Otherwise, break and proceed to the quoting logic below.\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }\n\n        // If quote mode is not MINIMAL or NONE, the quote decision was made earlier.\n        // If quote is false at this point (e.g., for NON_NUMERIC with a Number), write raw.\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n\n        // ----- Perform quoting -----\n        // we hit something that needed encapsulation\n        out.append(quoteChar);\n\n        // Handle character escaping (doubling quote characters) within the value.\n        // Reset pos to scan the whole value segment for escaping.\n        pos = offset;\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            if (c == quoteChar) {\n                // write out the chunk up until this point (exclusive of the quote char)\n                out.append(value, start, pos);\n                // write the quote character out doubled.\n                out.append(quoteChar);\n                // Skip the quote char we just processed and wrote doubled\n                start = pos; // The original code's logic for doubling was slightly different, let's stick to it.\n                // Original logic:\n                // out.append(value, start, pos + 1); // includes the quote char\n                // start = pos; // next segment starts *at* the quote char, effectively doubling it\n                // Let's reimplement the original escaping logic carefully:\n                out.append(value, start, pos + 1); // Write segment including the quote char\n                start = pos; // Set start for the next segment AT the quote char (it gets written again)\n            }\n            pos++;\n        }\n\n        // write the last segment\n        out.append(value, start, pos); // pos is now 'end'\n        out.append(quoteChar); // Append the final closing quote\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}