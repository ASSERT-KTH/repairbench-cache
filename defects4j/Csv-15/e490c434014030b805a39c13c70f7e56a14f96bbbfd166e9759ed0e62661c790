{
    "generation": "import static org.apache.commons.csv.Constants.COMMENT; // Assuming COMMENT is defined here or accessible\nimport static org.apache.commons.csv.Constants.CR;      // Assuming CR is defined here or accessible\nimport static org.apache.commons.csv.Constants.LF;      // Assuming LF is defined here or accessible\nimport static org.apache.commons.csv.Constants.SP;      // Assuming SP is defined here or accessible\n\n// ... inside the class CSVPrinter ...\n\n    // the original object is needed so can check for Number\n    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        final char delimChar = getDelimiter();\n        final Character quoteCharObj = getQuoteCharacter();\n        // Check for null quote char early, as it's used in MINIMAL logic and quoting itself\n        if (quoteCharObj == null && getQuoteMode() != QuoteMode.NONE) {\n             // This should not happen with standard formats, but is a safeguard.\n             throw new IllegalStateException(\"Quote character is null, but QuoteMode is not NONE\");\n        }\n        // We only need the char value if we might actually quote.\n        final char quoteChar = (quoteCharObj == null) ? 0 : quoteCharObj.charValue(); // Default to 0 if null, won't be used in NONE mode or if not quoting.\n\n\n        QuoteMode quoteModePolicy = getQuoteMode();\n        if (quoteModePolicy == null) {\n            quoteModePolicy = QuoteMode.MINIMAL;\n        }\n        switch (quoteModePolicy) {\n        case ALL:\n        case ALL_NON_NULL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code (which might handle escape characters)\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos); // first character\n\n                // Minimal fix: Remove the check `|| c > 0x7E` which caused incorrect quoting for non-ASCII chars like Euro symbol (\u20ac).\n                // The other parts of this condition (checking for control chars, '\"', ',') seem specific and potentially\n                // overlapping with later checks, but are kept for minimal change.\n                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D /* || c > 0x7E removed */)) {\n                    quote = true;\n                // Keep the original subsequent check against the COMMENT constant. This check is potentially overly broad\n                // (quotes '!', ' ', etc.) and doesn't check if comments are enabled, but retained for minimal change.\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    // If the first character didn't trigger quoting based on the above specific rules,\n                    // scan the rest of the string for standard quote triggers.\n                    // 'pos' is still at the start (index 0 relative to the value slice)\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break; // Found a character requiring quoting\n                        }\n                        pos++;\n                    }\n\n                    // If no internal trigger found, check the last character.\n                    if (!quote) { // No need to check if len > 0, already handled by outer else block.\n                        // Need the last char; index is end - 1. 'pos' might be 'end' if loop finished.\n                        char lastChar = value.charAt(end - 1);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' ' (space)\n                        if (lastChar <= SP) { // Check includes space and control characters\n                            quote = true;\n                        }\n                        // Note: The variable 'pos' is not used after this point in the MINIMAL case\n                        // before breaking the switch or returning, so no need to reset it.\n                    }\n                }\n            }\n\n            // If MINIMAL rules determined no quoting is needed, write directly and return.\n            if (!quote) {\n                // Use 'start' and 'end' which define the original range [offset, offset + len).\n                out.append(value, start, end);\n                return;\n            }\n            // If quote=true, break the switch and fall through to the common quoting logic below.\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }\n\n        // If the policy was not MINIMAL or NONE, the 'quote' variable is set based on the policy.\n        // If 'quote' is false here, it means the policy decided against quoting (e.g., NON_NUMERIC for a number).\n        if (!quote) {\n            // No quoting needed based on policy. Write the original value.\n            // Use 'start' and 'end' which define the original range [offset, offset + len).\n            out.append(value, start, end);\n            return;\n        }\n\n        // --- Quoting is needed (either by policy or MINIMAL checks) ---\n        // Append the opening quote character.\n        out.append(quoteChar);\n\n        // Scan the value and escape the quote character by doubling it.\n        // Use the standard, reliable loop for this.\n        // Reset 'start' and 'pos' for scanning the value content [offset, offset + len).\n        start = offset; // 'start' tracks the beginning of the current segment to write\n        pos = offset;   // 'pos' is the current scanning position within the value\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            if (c == quoteChar) {\n                // Found a quote character that needs escaping.\n                // Write the segment leading up to it.\n                out.append(value, start, pos);\n                // Write the quote character, doubled.\n                out.append(quoteChar);\n                out.append(quoteChar);\n                // Update 'start' to the position *after* the quote character for the next segment.\n                start = pos + 1;\n            }\n            // Move to the next character.\n            pos++;\n        }\n\n        // Write the final segment (from the last escaped quote character, or the beginning, to the end).\n        // 'pos' is equal to 'end' at this point.\n        out.append(value, start, pos);\n        // Append the closing quote character.\n        out.append(quoteChar);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}