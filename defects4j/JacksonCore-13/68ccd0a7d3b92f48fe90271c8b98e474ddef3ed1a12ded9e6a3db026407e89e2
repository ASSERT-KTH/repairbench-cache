{
    "generation": "// Method in class com.fasterxml.jackson.core.json.UTF8JsonGenerator\nprivate final void _writePPFieldName(SerializableString name) throws IOException\n{\n    /* 20-Apr-2015, tatu: Note: cannot use version that takes String, because\n     *    that depends on calculations based on contexts other than current one...\n     * 14-Mar-2016, tatu: Actually, looks like we must pass String regardless,\n     *    for quoting/escaping logic.\n     */\n    int status = _writeContext.writeFieldName(name.getValue());\n    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n        _reportError(\"Can not write a field name, expecting a value\");\n    }\n\n    if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) { // need comma\n        _cfgPrettyPrinter.writeNameValueSeparator(this);\n    } else { // first entry\n        _cfgPrettyPrinter.beforeObjectEntries(this);\n    }\n\n    // 13-Mar-2016, tatu: Need to check if underlying name requires quoting\n    if (_cfgUnqNames) { // If unquoted names allowed\n        // always have to convert (= escape), so:\n         _writeStringSegments(name.getValue(), false); // Write String value, non-quoted\n    } else { // If quoting required\n         // With pretty-printing, always quoting. But have to take care: needs escaping\n         if (_outputTail >= _outputEnd) { _flushBuffer(); }\n         _outputBuffer[_outputTail++] = _quoteChar; // Write leading quote\n\n         // 14-Mar-2016, tatu: Use version that encodes+escapes value, but WITHOUT quotes.\n         // So must use the method that encodes and escapes, but without quotes:\n         _writeStringSegments(name.getValue(), false); // Write String value, non-quoted (escaped)\n\n         if (_outputTail >= _outputEnd) { _flushBuffer(); }\n         _outputBuffer[_outputTail++] = _quoteChar; // Write trailing quote\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}