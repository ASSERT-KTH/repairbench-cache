{
    "generation": "package com.fasterxml.jackson.core.json; // Assuming this is the correct package for JsonGeneratorBase\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.ObjectCodec;\nimport com.fasterxml.jackson.core.SerializableString;\nimport com.fasterxml.jackson.core.json.JsonWriteContext;\nimport com.fasterxml.jackson.core.io.CharacterEscapes;\nimport com.fasterxml.jackson.core.io.IOContext; // Needed for full context in a real file, but not for the method itself\n\n// NOTE: This is a simplified representation of JsonGeneratorBase.\n// The actual class has many more methods and fields.\n// The fix applies to the `configure` method within this class.\npublic abstract class JsonGeneratorBase extends JsonGenerator // ... other interfaces and extends ...\n{\n    // ... fields relevant to generator state and features ...\n    protected int _features;\n    protected ObjectCodec _codec;\n    protected boolean _cfgWriteFieldNameQuotes;\n    protected boolean _cfgWriteNumbersAsStrings;\n    protected boolean _cfgEscapeNonAscii;\n    protected JsonWriteContext _writeContext;\n    protected CharacterEscapes _characterEscapes;\n    protected int _maximumNonEscapedChar;\n\n    // Constructor (example, not the actual fix)\n    protected JsonGeneratorBase(int features, ObjectCodec codec) {\n        _features = features;\n        _codec = codec;\n        _cfgWriteFieldNameQuotes = Feature.QUOTE_FIELD_NAMES.enabledIn(features);\n        _cfgWriteNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(features);\n        _cfgEscapeNonAscii = Feature.ESCAPE_NON_ASCII.enabledIn(features);\n        _writeContext = JsonWriteContext.createRootContext(this);\n    }\n\n    @Override\n    public JsonGenerator configure(Feature f, boolean state) {\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n            // According to the test comment in TestJsonGeneratorFeatures,\n            // this feature should NOT override the factory setting once the\n            // generator is created. Removing the line below makes it immutable\n            // after creation, respecting the factory's initial configuration.\n            // _cfgWriteFieldNameQuotes = state; // REMOVED to make it factory-sticky\n        } else if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n            _cfgWriteNumbersAsStrings = state;\n        } else if (f == Feature.ESCAPE_NON_ASCII) {\n            _cfgEscapeNonAscii = state;\n            // 2.10: \n            // _maximumNonEscapedChar = state ? 0 : 0x7F; // depends on version and other features\n        } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n            if (state) {\n                if (_writeContext.getParent() != null) { // if already in non-root context\n                    _writeContext = _writeContext.getParent().getParent(); // reset to root\n                }\n                _writeContext = _writeContext.with(_writeContext.getDupDetector()); // re-initialize with new detector\n            } else {\n                _writeContext = JsonWriteContext.createRootContext(this); // reset without detector\n            }\n        } else if (f == Feature.IGNORE_UNKNOWN) { // 2.10\n            // This feature is not relevant to Generator\n        } else { // unrecognized new feature: must be base class (or unhandled)\n            // It is possible this is handled by a superclass, or it's a no-op if not.\n            // In a real scenario, this might call super.configure(f, state)\n            // if JsonGeneratorBase inherits from another configurable base class\n            // or if it's the top-level implementation for all features.\n            // For Jackson Core, it typically directly implements Feature handling.\n        }\n        // Update the aggregate features integer\n        if (state) {\n            _features |= f.getMask();\n        } else {\n            _features &= ~f.getMask();\n        }\n        return this;\n    }\n\n    // ... other abstract methods and concrete implementations\n    // (e.g., _verifyFieldName, writeStartObject, writeFieldName, writeNumber, etc.)\n    // ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}