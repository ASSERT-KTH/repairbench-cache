{
    "generation": "    private void _testFieldNameQuotingEnabled(JsonFactory f, boolean autoCloseJsonContent, boolean quoteFieldNames, String expected) throws IOException\n    {\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        JsonGenerator g = f.createGenerator(bout, JsonEncoding.UTF8);\n        \n        // Configure AUTO_CLOSE_JSON_CONTENT based on the second boolean argument\n        if (autoCloseJsonContent) {\n            g.enable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n        } else {\n            g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n        }\n\n        // Configure QUOTE_FIELD_NAMES based on the third boolean argument.\n        // This parameter is likely intended to control field name quoting for the test,\n        // overriding the factory's default if necessary.\n        if (quoteFieldNames) {\n            g.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n        } else {\n            g.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n        }\n        \n        // Note: The original signature might have named the third boolean argument 'autoCloseTarget'.\n        // However, given the context of 'testFieldNameQuotingEnabled' and the expected outputs,\n        // it's highly probable this argument is repurposed or intended to control field name quoting.\n        // The AUTO_CLOSE_TARGET feature itself typically doesn't affect the JSON string output for simple cases.\n\n        // Write a simple JSON object to test field naming\n        g.writeStartObject();\n        g.writeFieldName(\"foo\");\n        g.writeNumber(1);\n        g.writeEndObject();\n        \n        // Close the generator to ensure all content is flushed to the output stream\n        g.close();\n\n        // Get the generated string and compare it with the expected output\n        String actual = bout.toString(\"UTF-8\");\n        assertEquals(expected, actual);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}