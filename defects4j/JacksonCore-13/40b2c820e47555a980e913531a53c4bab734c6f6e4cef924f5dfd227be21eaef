{
    "generation": "protected void _writeFieldName(String name, boolean canonical) throws IOException\n{\n    if (_cfgPrettyPrinter != null) {\n        _writePPFieldName(name, canonical);\n        return;\n    }\n    if (_outputPtr >= _outputEnd) {\n        _flushBuffer();\n    }\n    if (!(_writeContext.writeFieldName(name) == Status.ALLOW_UNQUOTED)) {\n        _reportError(\"Can not write a field name, expecting a value\");\n    }\n    if (_cfgQuoteFieldNames) {\n        _writeFieldNameQuoted(name);\n    } else {\n        _writeFieldNameUnquoted(name);\n    }\n}\n\nprivate void _writeFieldNameQuoted(String name) throws IOException\n{\n    if (_outputPtr >= _outputEnd) {\n        _flushBuffer();\n    }\n    _outputBuffer[_outputPtr++] = _quoteChar;\n    _writeString(name);\n    if (_outputPtr >= _outputEnd) {\n        _flushBuffer();\n    }\n    _outputBuffer[_outputPtr++] = _quoteChar;\n}\n\nprivate void _writeFieldNameUnquoted(String name) throws IOException\n{\n    final int nameLen = name.length();\n    if (nameLen == 0) {\n        _reportError(\"Field name can not be empty\");\n    }\n    // Special case: output directly if no need to escape\n    // 11-Jan-2014, tatu: Special handling for spaces, to avoid outputting\n    //   invalid JSON (unquoted spaces are not valid field names)\n    final int firstChar = _typeOf(name.charAt(0));\n    if (!_isJavaIdentifierStart(firstChar) || firstChar == JsonTokenId.INT_SPACE) {\n        _writeFieldNameQuoted(name);\n        return;\n    }\n    for (int i = 1; i < nameLen; ++i) {\n        final int c = _typeOf(name.charAt(i));\n        if (!_isJavaIdentifierPart(c)) {\n            _writeFieldNameQuoted(name);\n            return;\n        }\n    }\n    // Ok: let's just output as is, without quotes\n    _writeString(name);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}