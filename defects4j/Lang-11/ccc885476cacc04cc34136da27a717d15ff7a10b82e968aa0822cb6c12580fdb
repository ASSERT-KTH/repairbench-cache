{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at (inclusive)\n     * @param end  the position in set of chars to end before (exclusive)\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start)} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0, {@code start} &gt; {@code end} or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';\n                }\n            }\n        // Fix for LANG-807: check relationship between start and end after potentially modifying them\n        // based on letters/numbers and chars array.\n        } else if (end <= start) {\n             throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n\n        // Note: No longer throws ArrayIndexOutOfBoundsException early, needs to check later.\n        // However, the check above prevents the main cause of Random#nextInt exception.\n\n        char[] buffer = new char[count];\n        int gap = end - start; // gap is always > 0 here due to the check above\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                // This might throw ArrayIndexOutOfBoundsException if start or end range is invalid for chars\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                // Surrogate pair handling\n                if(ch >= 56320 && ch <= 57343) { // low surrogate\n                    if(count == 0) {\n                        count++; // Cannot fit pair, skip this char and try again\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // random high surrogate\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // high surrogate\n                    if(count == 0) {\n                        count++; // Cannot fit pair, skip this char and try again\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // random low surrogate\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // private high surrogate\n                    // avoid generating characters in this range\n                    count++; // Skip this char and try again\n                } else {\n                    buffer[count] = ch; // Valid BMP char\n                }\n            } else {\n                count++; // Character did not match criteria, try again\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}