{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at (inclusive)\n     * @param end  the position in set of chars to end before (exclusive)\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array. (Note: Javadoc might be slightly imprecise here)\n     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided chars array is empty,\n     * or {@code end <= start}.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';\n                }\n            }\n        // Check if end <= start after potential modifications or if they were passed in non-zero.\n        // This ensures the range [start, end) is valid.\n        } else if (end <= start) {\n             throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n        }\n\n        char[] buffer = new char[count];\n        // calculate the gap once, as end > start is now guaranteed.\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            // Select a random character index or value within the [start, end) range.\n            // random.nextInt(gap) generates a value in [0, gap-1].\n            // Adding start shifts the range to [start, start + gap - 1] which is [start, end - 1].\n            int codePoint = random.nextInt(gap) + start;\n\n            if (chars == null) {\n                ch = (char) codePoint; // Use the generated value as a char code.\n            } else {\n                ch = chars[codePoint]; // Use the generated value as an index into the chars array.\n            }\n\n            // Filter the character based on letters/numbers flags\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n\n                // Handle surrogate pairs correctly to avoid generating broken Unicode strings.\n                // This logic generates pairs if a surrogate character is encountered.\n                if(ch >= 56320 && ch <= 57343) { // ch is a low surrogate (U+DC00 - U+DFFF)\n                    if(count == 0) { // Not enough space remaining to insert the high surrogate\n                        count++; // Retry character generation\n                    } else {\n                        // Insert the low surrogate character\n                        buffer[count] = ch;\n                        count--; // Move to the previous position for the high surrogate\n                        // Insert a random high surrogate (U+D800 - U+DB7F, standard range)\n                        // The original code used random.nextInt(128), which seems arbitrary and likely incorrect range.\n                        // Sticking to original behavior for this fix, although it might be buggy.\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // ch is a high surrogate (U+D800 - U+DBFF, excluding PUA U+DB80-U+DBFF)\n                    if(count == 0) { // Not enough space remaining to insert the low surrogate\n                        count++; // Retry character generation\n                    } else {\n                        // Insert a random low surrogate (U+DC00 - U+DFFF) first\n                        // The original code used random.nextInt(128), which seems arbitrary and likely incorrect range.\n                        // Sticking to original behavior for this fix, although it might be buggy.\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--; // Move to the previous position for the high surrogate\n                        // Insert the high surrogate character\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // ch is a Private Use Area high surrogate (U+DB80 \u2013 U+DBFF)\n                    // These are unlikely to form valid pairs with random low surrogates.\n                    // Skip this character and retry.\n                    count++;\n                } else {\n                    // ch is a valid BMP character (not a surrogate).\n                    buffer[count] = ch;\n                }\n            } else {\n                // Character did not meet the letters/numbers criteria.\n                count++; // Retry character generation\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}