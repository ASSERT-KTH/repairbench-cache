{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        // Handle the special case where start=0 and end=0 to set default character ranges.\n        // This must occur before validating the gap, as it can modify start/end to valid ranges.\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                // If chars is provided, and start=0, end=0, it means use all characters from the set.\n                end = chars.length;\n            } else {\n                // If chars is null, and start=0, end=0, use ASCII printable chars by default\n                // unless letters and numbers are both false, then use all Unicode characters.\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE; // Use all Unicode characters\n                } else {\n                    end = 'z' + 1; // ASCII ' ' (32) to 'z' (122) inclusive, so end is 123\n                    start = ' '; // ASCII ' ' (32)\n                }\n            }\n        }\n\n        // Calculate the effective gap between start and end.\n        // This gap is used as the bound for random.nextInt(bound).\n        // The bound must be positive (i.e., gap > 0, which means end - start > 0 or end > start).\n        int gap = end - start;\n        if (gap <= 0) {\n            // If the calculated gap is zero or negative, it indicates an invalid range\n            // (e.g., start == end or start > end). random.nextInt() requires a positive bound.\n            throw new IllegalArgumentException(String.format(\"Parameter 'start' (%d) must be less than parameter 'end' (%d).\", start, end));\n        }\n\n        char[] buffer = new char[count];\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                // For null chars, a random character is chosen directly based on ASCII/Unicode range.\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                // For a provided chars array, a character is chosen from the array based on the indices.\n                ch = chars[random.nextInt(gap) + start];\n            }\n\n            // Filtering logic based on 'letters' and 'numbers' flags.\n            // If a character doesn't meet the criteria, count is incremented to effectively retry this position.\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                \n                // Handle surrogate pairs (Unicode supplementary characters) to avoid malformed strings.\n                // This logic ensures that if a random char is a surrogate, its pair is also included\n                // or the char is skipped if it's a private high surrogate without clear handling.\n                if(ch >= 56320 && ch <= 57343) { // Low surrogate (0xDC00 - 0xDFFF)\n                    if(count == 0) {\n                        count++; // Cannot insert high surrogate after this, so retry this position\n                    } else {\n                        buffer[count] = ch; // Insert low surrogate\n                        count--; // Decrement count for the high surrogate\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // Insert a random high surrogate (0xD800 - 0xDB7F)\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // High surrogate (0xD800 - 0xDBFF, excluding private use area)\n                    if(count == 0) {\n                        count++; // Cannot insert low surrogate before this, so retry this position\n                    } else {\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // Insert a random low surrogate (0xDC00 - 0xDFFF)\n                        count--; // Decrement count for the high surrogate\n                        buffer[count] = ch; // Insert high surrogate\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // Private use high surrogate (0xDB80 - 0xDBFF)\n                    count++; // Skip this character, retry this position (no standard mapping for these)\n                } else {\n                    buffer[count] = ch; // Regular character\n                }\n            } else {\n                count++; // Character does not meet filtering criteria, retry this position\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}