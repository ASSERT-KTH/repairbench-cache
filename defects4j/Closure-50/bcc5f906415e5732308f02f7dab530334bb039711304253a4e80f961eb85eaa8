{
    "generation": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  // Only support zero or one argument to join.\n  Node right = callTarget.getNext();\n  if (right != null && right.getNext() != null) {\n    return n;\n  }\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT\n      || !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // \",\" is the default separator, it doesn't need to be explicit.\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n\n  // Merge adjacent immutable elements into one string fragment.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        foldedSize += sb.length() + 2; // +2 for the quotes\n        arrayFoldedChildren.add(\n            Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    prev = elem;\n    elem = elem.getNext();\n  }\n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n        Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  // account for commas between fragments\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [] -> \"\"\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n\n    case 1:\n      // Single fragment -> literal (possibly coerce)\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // Coerce to string\n        foldedStringNode = new Node(\n            Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n\n    default:\n      // Some folding, but still need a join()\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        // nothing changed\n        return n;\n      }\n      // compute cost of keeping the join() call\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += (right != null)\n          ? InlineCostEstimator.getCost(right)\n          : 0;\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      // Drop an explicit \",\" argument since it's the default\n      if (right != null && \",\".equals(joinString)) {\n        right.detach();\n      }\n      // rebuild array children\n      arrayNode.detachChildren();\n      for (Node c : arrayFoldedChildren) {\n        arrayNode.addChildToBack(c);\n      }\n      reportCodeChange();\n      break;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}