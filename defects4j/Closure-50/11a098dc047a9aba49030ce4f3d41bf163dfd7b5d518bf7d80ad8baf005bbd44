{
    "generation": "import com.google.common.base.Preconditions;\nimport com.google.common.collect.Lists;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport java.util.List;\n\n// NOTE: This code assumes the existence of NodeUtil, Lists, Preconditions,\n// Node, Token, InlineCostEstimator and reportCodeChange() from the Closure Compiler context.\n// Only the function body is provided as requested.\n\n  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    // A join() call node should have the form: call(getprop(arr, 'join'), ?sep)\n    if (!n.isCall()) {\n        return n;\n    }\n\n    // Check argument count: 0 or 1 argument allowed.\n    // Children are: GetProp, Optional<Separator>\n    if (n.getChildCount() > 2) {\n      // .join() takes at most one argument.\n      return n;\n    }\n\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    // Check call target is Array.prototype.join on an array literal\n    // Check call target is Array.prototype.join on an array literal\n    if (arrayNode == null || !arrayNode.isArrayLit() || functionName == null ||\n        !functionName.isString() || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n\n    Node right = callTarget.getNext(); // Separator node\n    // Check separator validity: must be an immutable value if present\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        // Cannot fold .join(variable)\n        return n;\n      }\n    }\n\n    // Determine the separator string value; default is \",\"\n    boolean isDefaultSeparator = (right == null ||\n        (right.isString() && right.getString().equals(\",\")));\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n    // Try to fold the array literal by joining adjacent immutable elements\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n\n    // Build the potentially folded list of children\n    while (elem != null) {\n      // Fold adjacent primitives (and EMPTY) into string nodes\n      if (NodeUtil.isImmutableValue(elem) || elem.isEmpty()) {\n        // Start accumulating immutable elements\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          // Append separator if buffer is not empty (i.e., not the first element in sequence)\n          sb.append(joinString);\n        }\n        // Append the string value of the immutable element (handles null, undefined, numbers etc.)\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        // Hit a non-constant element, flush the accumulated string if any\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // Create a new string node from the accumulated buffer\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        // Add the non-constant element directly\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    // Flush the last accumulated string if any\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    // Now arrayFoldedChildren contains the list of nodes for the new array,\n    // which might be empty, have one element, or multiple elements.\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    Node parent = n.getParent(); // Needed for replacement\n\n    switch (arrayFoldedChildren.size()) {\n      case 0: // Array folded to empty, e.g., [].join(',') -> \"\"\n        Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n);\n        // Cost check: replacing the call with \"\" must be smaller\n        if (InlineCostEstimator.getCost(emptyStringNode) < originalSize) {\n            parent.replaceChild(n, emptyStringNode);\n            reportCodeChange();\n            return emptyStringNode;\n        }\n        break; // Cost not beneficial\n\n      case 1: // Array folded to a single element, e.g., ['a'].join(',') -> \"a\" or [foo].join() -> \"\" + foo\n        Node singleElement = arrayFoldedChildren.get(0);\n        // If the single element is from the original node list, clone it for the replacement.\n        // If it's a new string node we created, we can use it directly.\n        Node potentialElement = singleElement.isNew() ? singleElement : singleElement.cloneTree();\n\n        Node finalNode;\n        if (potentialElement.isString()) {\n          // Result is already a string literal\n          finalNode = potentialElement;\n        } else {\n          // Result needs coercion to string: \"\" + element\n          finalNode = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              potentialElement);\n          finalNode.copyInformationFrom(n);\n        }\n\n        // Cost check: replacing the call with the single element (or coerced) must be smaller\n        if (InlineCostEstimator.getCost(finalNode) < originalSize) {\n            parent.replaceChild(n, finalNode);\n            reportCodeChange();\n            return finalNode;\n        }\n        break; // Cost not beneficial\n\n      default: // Array partially folded or structure changed\n        // Check if the structure or content actually changed meaningfully\n        boolean arrayContentChanged = arrayFoldedChildren.size() != arrayNode.getChildCount();\n        if (!arrayContentChanged) {\n             // Even if no elements were combined, we might be able to remove the default separator ','.\n             if (isDefaultSeparator && right != null) {\n                 // Estimate cost change just from removing the default separator\n                 Node callWithoutSeparator = n.cloneNode();\n                 callWithoutSeparator.removeChild(callWithoutSeparator.getLastChild());\n                 if (InlineCostEstimator.getCost(callWithoutSeparator) < originalSize) {\n                     // Modify the original node 'n' by removing the separator\n                     n.removeChild(right);\n                     reportCodeChange();\n                     // Fall through to return n (modified)\n                 }\n                 // else, no benefit in removing separator, return n unmodified implicitly\n             }\n             // If separator wasn't default/present, or removing default wasn't beneficial,\n             // and array size is same, do nothing, just break and return n.\n        } else {\n            // Array content changed (elements combined), estimate cost of the new call node\n            // Create a temporary new array and call structure for cost estimation\n            Node newArrayLit = arrayNode.cloneNode(); // Clone structure only\n            newArrayLit.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n              // Nodes must be cloned for cost estimation if they came from original array or reused.\n              newArrayLit.addChildToBack(node.isNew() ? node : node.cloneTree());\n            }\n\n            Node newCall = n.cloneTree(); // Clone the whole CALL structure\n            Node oldArrayInNewCall = newCall.getFirstChild().getFirstChild();\n            newCall.getFirstChild().replaceChild(oldArrayInNewCall, newArrayLit); // Put new array in place\n\n            Node separatorArgInNewCall = newCall.getChildAtIndex(1); // Might be null\n            // If separator was default (',' or implicit), remove it from the potentially optimized call\n            if (isDefaultSeparator && separatorArgInNewCall != null) {\n              newCall.removeChild(separatorArgInNewCall);\n            }\n\n            // Cost check for the potentially modified call\n            if (InlineCostEstimator.getCost(newCall) < originalSize) {\n                // Apply changes to the original node 'n'\n                arrayNode.detachChildren();\n                for (Node node : arrayFoldedChildren) {\n                    // Add the folded nodes (original elements or newly created strings)\n                    // back to the original array node. These nodes are moved or added, not cloned.\n                    arrayNode.addChildToBack(node);\n                }\n\n                // If separator was default (',' or implicit), remove it from the original call node\n                if (isDefaultSeparator && right != null) {\n                  n.removeChild(right);\n                }\n                reportCodeChange();\n                 // Fall through to return n (modified)\n            }\n            // else cost not beneficial, return original n unchanged implicitly\n        }\n        break; // Break switch\n    } // End switch\n\n    return n; // Return original node 'n' (potentially modified in default case)\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}