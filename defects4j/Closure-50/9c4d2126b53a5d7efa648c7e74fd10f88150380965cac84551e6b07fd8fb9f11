{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  // Validate that the callee is a property get\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  // Check for a single argument in .join(), or zero argument\n  Node arg1 = callTarget.getNext();\n  Node arg2 = null;\n  if (arg1 != null) {\n    arg2 = arg1.getNext();\n    if (arg2 != null) {\n      // more than one argument to join, do not fold\n      return n;\n    }\n    if (!NodeUtil.isImmutableValue(arg1)) {\n      return n;\n    }\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // Evaluate join separator argument: undefined => ','\n  String joinString;\n  if (arg1 == null || (arg1.isName() && \"undefined\".equals(arg1.getString()))) {\n    joinString = \",\";\n  } else {\n    joinString = NodeUtil.getStringValue(arg1);\n  }\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        // +2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(\n            Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    prev = elem;\n    elem = elem.getNext();\n  }\n\n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n        Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  // one for each comma or join separator between elements\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0: {\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    }\n    case 1: {\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    }\n    default:\n      // No folding could actually be performed (leave unchanged)\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return n;\n      }\n\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += (arg1 != null) ? InlineCostEstimator.getCost(arg1) : 0;\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      for (Node e : arrayFoldedChildren) {\n        arrayNode.addChildToBack(e);\n      }\n\n      // transform the call to have .join() with no argument (if explicit arg is default ',')\n      if (arg1 == null || (arg1.isString() && \",\".equals(arg1.getString())) ||\n          (arg1.isName() && \"undefined\".equals(arg1.getString()))) {\n        // remove existing arg to use default separator\n        if (arg1 != null) {\n          n.removeChild(arg1);\n        }\n      }\n      reportCodeChange();\n      return n;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}