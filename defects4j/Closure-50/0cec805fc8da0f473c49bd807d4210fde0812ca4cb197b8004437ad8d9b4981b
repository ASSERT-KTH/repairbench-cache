{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = callTarget.getLastChild();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    Node arg = callTarget.getNext();\n    String joinString = (arg == null) ? \",\" : NodeUtil.getStringValue(arg);\n    if (joinString == null) {\n        return n;\n    }\n\n    List<Node> arrayElements = arrayNode.children();\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n\n    for (Node elem : arrayElements) {\n        if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getArrayElementStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb.setLength(0);\n            }\n            arrayFoldedChildren.add(elem);\n        }\n    }\n\n    if (sb.length() > 0) {\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    foldedSize = arrayFoldedChildren.stream()\n        .mapToInt(InlineCostEstimator::getCost)\n        .sum() + (arrayFoldedChildren.size() - 1) * joinString.length();\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            n.getParent().replaceChild(n, emptyStringNode);\n            reportCodeChange();\n            return emptyStringNode;\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.get(0);\n            if (foldedSize > originalSize) {\n                return n;\n            }\n            if (foldedStringNode.getType() != Token.STRING) {\n                Node replacement = new Node(Token.ADD,\n                    Node.newString(\"\").copyInformationFrom(n),\n                    foldedStringNode);\n                foldedStringNode = replacement;\n            }\n            n.getParent().replaceChild(n, foldedStringNode);\n            reportCodeChange();\n            return foldedStringNode;\n        default:\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount() &&\n                arrayElements.stream().allMatch(NodeUtil::isImmutableValue)) {\n                return n;\n            }\n            if (foldedSize > originalSize) {\n                return n;\n            }\n            arrayNode.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            if (arg != null) {\n                callTarget.removeChild(arg);\n            }\n            reportCodeChange();\n            break;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}