{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // Determine the separator, defaulting to \",\"\n    String separator = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    Node prev = null;\n    boolean canFold = true;\n\n    // Ensure all elements are immutable strings after coercion\n    for (Node elem : arrayNode.getChildren()) {\n      // Allow only string literals or empty nodes which can be considered as empty strings\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        arrayFoldedChildren.add(elem);\n      } else {\n        // For non-immutable values, we wrap them in a coercion\n        Node coercion = new Node(Token.ADD, \n            Node.newString(\"\").copyInformationFrom(elem), elem.copyInformationFrom(elem));\n        arrayFoldedChildren.add(coercion);\n      }\n      prev = elem;\n    }\n\n    // If any element is not a string, we cannot perform the folding as per tests\n    if (arrayFoldedChildren.size() != arrayNode.getChildren().size()) {\n      canFold = false;\n    }\n\n    if (!canFold) {\n      return n;\n    }\n\n    if (arrayFoldedChildren.isEmpty()) {\n      n.getParent().replaceChild(n, Node.newString(\"\"));\n      reportCodeChange();\n      return n;\n    }\n\n    // Join all the string elements with the separator only if all can be folded\n    String joinedString = String.join(separator, arrayFoldedChildren.stream()\n        .map(elem -> NodeUtil.getArrayElementStringValue(elem))\n        .toArray(String[]::new));\n\n    Node foldedStringNode = Node.newString(joinedString);\n    n.getParent().replaceChild(n, foldedStringNode);\n    reportCodeChange();\n\n    return foldedStringNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}