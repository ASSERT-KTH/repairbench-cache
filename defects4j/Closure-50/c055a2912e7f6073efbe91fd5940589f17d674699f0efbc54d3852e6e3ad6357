{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  // Must be a .join call\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  // We only handle at most one argument for join()\n  if (n.getChildCount() > 2) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !\"join\".equals(functionName.getString())) {\n    return n;\n  }\n\n  // \",\" is the default separator\n  String joinString = (right == null)\n      ? \",\"\n      : NodeUtil.getStringValue(right);\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n\n  // Merge consecutive immutable values into one string\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        // +2 accounts for surrounding quotes\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(\n            Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    prev = elem;\n    elem = elem.getNext();\n  }\n\n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n        Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  // one comma between each element\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [].join(...) -> \"\"\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n\n    case 1:\n      // Single element -> just that string (or +\"\" if not a string literal)\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // coerce to string\n        Node replacement = new Node(\n            Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n\n    default:\n      // Multiple elements\n      // If nothing actually folded, bail\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return n;\n      }\n      // cost of join() overhead\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      // plus cost of explicit argument if present\n      foldedSize += (right != null)\n          ? InlineCostEstimator.getCost(right)\n          : 0;\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      // rebuild the array literal\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      // drop the explicit argument if it's the default \",\"\n      if (right != null && \",\".equals(joinString)) {\n        right.detach();\n      }\n      reportCodeChange();\n      break;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}