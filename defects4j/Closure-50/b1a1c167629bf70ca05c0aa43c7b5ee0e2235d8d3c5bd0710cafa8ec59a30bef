{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    // Only optimize if there's one or zero parameters to join().\n    if (n.getChildCount() > 2) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    boolean canFoldAll = true;\n    int arraySize = 0;\n\n    // Try to merge maximal sequences of immutable values (including EMPTY)\n    // and preserve non-constant values.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        canFoldAll = false;\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n      arraySize++;\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n    // one for each join string, between elements\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        // Only fold if there are no non-immutable values (canFoldAll)\n        // OR if the size win is there (as currently done)\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (!canFoldAll && foldedSize > originalSize) {\n          return n;\n        }\n        // For case when we folded a maximal string at one or both ends,\n        // and left some non-immutable in the middle, switch to .join()\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n\n        // If the join string is ',', it can be omitted.\n        Node joinFuncProp = callTarget;\n        Node newCall = null;\n        if (right == null || (right.isString() && \",\".equals(right.getString()))) {\n          // omit .join(',') => .join()\n          newCall = new Node(Token.CALL,\n              NodeUtil.newQualifiedNameNode(\"Array.prototype.join\").copyInformationFrom(joinFuncProp));\n          arrayNode = arrayNode.cloneTree(); // must reacquire after clone\n          newCall.addChildToBack(arrayNode);\n        } else {\n          newCall = new Node(Token.CALL,\n              NodeUtil.newQualifiedNameNode(\"Array.prototype.join\").copyInformationFrom(joinFuncProp));\n          arrayNode = arrayNode.cloneTree();\n          newCall.addChildToBack(arrayNode);\n          newCall.addChildToBack(right.cloneTree());\n        }\n\n        // But, actually on replacement, try to just replace the array literal's children,\n        // and keep the original CALL node if possible.\n        // To preserve side effects for non-pure array elements: keep as .join() call.\n        reportCodeChange();\n        break;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}