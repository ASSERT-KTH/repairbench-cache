{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    // Bail out if call has more than one argument (only 0 or 1 supported)\n    Node argNode = callTarget.getNext();\n    if (argNode != null && argNode.getNext() != null) {\n      return n;\n    }\n\n    // If join argument exists but isn't immutable, bail\n    if (argNode != null && !NodeUtil.isImmutableValue(argNode)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (argNode == null) ? \",\" : NodeUtil.getStringValue(argNode);\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    // Adjusted folded size based on separator\n    if (\",\".equals(joinString)) {\n      // Default join string (comma), one comma between elements\n      foldedSize += arrayFoldedChildren.size() - 1;\n    } else {\n      // explicit join string argument: length * (#elements -1)\n      int sepCount = arrayFoldedChildren.size() - 1;\n      foldedSize += sepCount * joinString.length();\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed (arrayFoldedChildren == original array child count)\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (argNode != null) ? InlineCostEstimator.getCost(argNode) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n\n        // Replace `join` argument with null or remove extra arg if join is \",\"\n        if (\",\".equals(joinString)) {\n          if (argNode != null) {\n            // remove explicit ',' separator argument\n            n.removeChildAfter(callTarget);\n          }\n        } else {\n          // update argument to folded immutable separator value\n          if (argNode != null) {\n            Node newArg = NodeUtil.makeImmutableValueLiteral(joinString)\n                .copyInformationFrom(argNode);\n            n.replaceChild(argNode, newArg);\n          }\n        }\n        reportCodeChange();\n        break;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}