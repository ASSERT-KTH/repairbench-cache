{
    "generation": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  // Ensure that there is at most one argument.\n  Node joinArg = callTarget.getNext();\n  if (joinArg != null && joinArg.getNext() != null) {\n    return n;\n  }\n  if (joinArg != null && !NodeUtil.isImmutableValue(joinArg)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // In JavaScript, the default join separator is the comma.\n  String joinString = (joinArg == null) ? \",\" : NodeUtil.getStringValue(joinArg);\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n  // Merge adjacent literal (immutable) elements.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        // Account for the quotes around string literals.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(\n            Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    prev = elem;\n    elem = elem.getNext();\n  }\n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n        Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  // Each comma inserted between merged children adds to the cost.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0: {\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    }\n    case 1: {\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      // If not a string literal, coerce it to a string using the ADD operator.\n      if (foldedStringNode.getType() != Token.STRING) {\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    }\n    default:\n      // If no folding occurred, leave the tree as-is.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return n;\n      }\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += (joinArg != null) ? InlineCostEstimator.getCost(joinArg) : 0;\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      // Rebuild the array literal with any folded nodes.\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      // If the join separator is the default comma, remove it.\n      if (joinArg != null && \",\".equals(joinString)) {\n        n.removeChild(joinArg);\n      }\n      reportCodeChange();\n      break;\n  }\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}