{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n    if (n.getType() != Token.CALL) {\n        return n;\n    }\n\n    Node callTarget = n.getFirstChild();\n    if (!NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = callTarget.getNext();\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    int foldedSize = 0;\n\n    for (Node elem : arrayNode.getChildren()) {\n        String elemStr = elem.toString();\n        if (elem.getType() == Token.EMPTY || NodeUtil.isImmutableValue(elem)) {\n            arrayFoldedChildren.add(Node.newString(elemStr));\n            foldedSize += elemStr.length();\n        } else {\n            arrayFoldedChildren.add(elem);\n            foldedSize += InlineCostEstimator.getCost(elem);\n        }\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > originalSize) {\n        return n;\n    }\n\n    if (arrayFoldedChildren.isEmpty()) {\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n    }\n\n    if (arrayFoldedChildren.size() == 1) {\n        Node foldedStringNode = arrayFoldedChildren.get(0);\n        if (foldedStringNode.getType() != Token.STRING) {\n            Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n            foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n    }\n\n    arrayNode.detachChildren();\n    for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n    }\n    reportCodeChange();\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}