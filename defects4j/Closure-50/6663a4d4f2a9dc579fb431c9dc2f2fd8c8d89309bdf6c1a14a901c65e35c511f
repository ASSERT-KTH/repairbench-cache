{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  // Only allow up to one argument to join; bail otherwise\n  Node right = callTarget.getNext();\n  if (right != null && right.getNext() != null) {\n    return n;\n  }\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // \",\" is the default separator\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n  // Merge adjacent immutable values (including null/undefined) into one string.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        // +2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(\n            Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    prev = elem;\n    elem = elem.getNext();\n  }\n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n        Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  // one char per comma\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [].join(...) -> \"\"\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n\n    case 1:\n      // Single element: fold to literal or (\"\" + expr) if needed\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // Coerce to string if not a literal\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n\n    default:\n      // Partial fold: rebuild the array literal and possibly drop the default separator\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return n;\n      }\n      // account for \"[] . join()\"\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      for (Node newChild : arrayFoldedChildren) {\n        arrayNode.addChildToBack(newChild);\n      }\n      // If the separator was the default \",\", drop the explicit argument\n      if (right != null && joinString.equals(\",\")) {\n        right.detach();\n      }\n      reportCodeChange();\n      break;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}