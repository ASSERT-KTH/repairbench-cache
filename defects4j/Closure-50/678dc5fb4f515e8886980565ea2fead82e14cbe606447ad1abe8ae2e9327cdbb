{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    // Check if there are too many arguments to the join method.\n    // A CALL node has children: FUNCTION_EXPR, ARG1, ARG2, ...\n    // So for \"x.join(arg)\", it has 2 children: GETPROP and arg.\n    // For \"x.join()\", it has 1 child: GETPROP.\n    // If it has more than 2 children, it has too many args.\n    if (n.getChildCount() > 2) {\n      return n;\n    }\n\n    Node right = callTarget.getNext(); // This is the first argument, or null if no arguments.\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    // foldedElementsCostSum will accumulate the sum of InlineCostEstimator.getCost()\n    // for each child node in the new 'arrayFoldedChildren' list.\n    int foldedElementsCostSum = 0; \n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // Calculate cost of the folded string using InlineCostEstimator\n          Node foldedStringNode = Node.newString(sb.toString()).copyInformationFrom(prev);\n          foldedElementsCostSum += InlineCostEstimator.getCost(foldedStringNode);\n          arrayFoldedChildren.add(foldedStringNode);\n          sb = null;\n        }\n        foldedElementsCostSum += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // Calculate cost of the final folded string using InlineCostEstimator\n      Node foldedStringNode = Node.newString(sb.toString()).copyInformationFrom(prev);\n      foldedElementsCostSum += InlineCostEstimator.getCost(foldedStringNode);\n      arrayFoldedChildren.add(foldedStringNode);\n    }\n    \n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        if (InlineCostEstimator.getCost(emptyStringNode) > originalSize) {\n          return n;\n        }\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        // This 'ADD' coercion can increase cost. So check cost after coercion.\n        if (foldedStringNode.getType() != Token.STRING) {\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        if (InlineCostEstimator.getCost(foldedStringNode) > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed for all elements.\n        // We now have a list of new children for the ARRAYLIT.\n\n        // If the number of children in the array literal hasn't changed,\n        // it means no elements were merged. In such cases, we usually don't fold\n        // to avoid churn, especially if the cost is not strictly better.\n        // This heuristic ensures we only optimize if we reduce the number of array elements\n        // or fully fold to a string (handled by case 0 and 1).\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n\n        // Calculate cost of the new array literal\n        // foldedElementsCostSum holds sum of costs of arrayFoldedChildren.\n        // Add cost of commas and brackets for the new array literal.\n        int newArrayLitCost = foldedElementsCostSum + Math.max(0, arrayFoldedChildren.size() - 1) + 2;\n\n        // Calculate cost of the new GETPROP node (.join)\n        // Cost of GETPROP itself is 1 (for dot).\n        // cost(Node.newString(\"join\")) is its length, which is 4 based on InlineCostEstimator.\n        int newGetPropCost = 1 + newArrayLitCost + InlineCostEstimator.getCost(Node.newString(\"join\"));\n\n        // Calculate cost of the new CALL node\n        // Cost of CALL itself is 1.\n        int newCallCost = 1 + newGetPropCost;\n        if (right != null) {\n          newCallCost += InlineCostEstimator.getCost(right);\n        }\n\n        if (newCallCost > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}