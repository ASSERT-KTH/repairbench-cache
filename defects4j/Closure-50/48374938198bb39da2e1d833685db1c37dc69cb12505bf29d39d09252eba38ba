{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  // Number of arguments\n  int argCount = n.getChildCount() - 1;\n  if (argCount > 1) {\n    // Only support zero or one argument to join.\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null) {\n    if (!NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // \",\" is the default, it doesn't need to be explicit\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n  boolean sawNonString = false;\n\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      // Check if not a string literal node\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(\n            Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n      sawNonString = true;\n    }\n    prev = elem;\n    elem = elem.getNext();\n  }\n\n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n        Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  // one for each join string.\n  foldedSize += Math.max(arrayFoldedChildren.size() - 1, 0);\n\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    default:\n      // If there were no elements folded, skip.\n      boolean didFold = arrayFoldedChildren.size() != arrayNode.getChildCount();\n\n      // If the join string is not \",\", we should only fold if we merged contiguous strings.\n      // Otherwise, folding should only be done for the exact match above.\n      if (!didFold) {\n        return n; // Nothing to fold.\n      }\n\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      // Standardize the join string to be explicit if not \",\" after folding, otherwise omit.\n      boolean useExplicitJoin = right != null; // keep explicit if supplied\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      // If the join string is \",\" after folding, we should remove the explicit argument.\n      if (right != null && \",\".equals(joinString)) {\n        n.removeChild(right);\n      }\n      // If after folding we still need an explicit join string, but no argument, add it.\n      if (right == null && !\"\".equals(joinString) && !\",\".equals(joinString)) {\n        Node explicitJoinArg = Node.newString(joinString);\n        n.addChildToBack(explicitJoinArg);\n      }\n      reportCodeChange();\n      break;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}