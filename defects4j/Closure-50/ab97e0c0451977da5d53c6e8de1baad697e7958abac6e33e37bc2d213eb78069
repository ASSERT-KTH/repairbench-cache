{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) { // Check if join separator is foldable\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedContentCost = 0; // Accumulates cost of the new array elements\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString); // Add join string if not the first element in current sb\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          foldedContentCost += sb.length() + 2; // +2 for the quotes (cost of string literal)\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedContentCost += InlineCostEstimator.getCost(elem); // Cost of the original non-foldable node\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      foldedContentCost += sb.length() + 2; // +2 for the quotes (cost of last string literal)\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    int newFoldedExpressionCost;\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        // Case: [].join(...) -> \"\"\n        Node emptyStringNode = Node.newString(\"\");\n        newFoldedExpressionCost = InlineCostEstimator.getCost(emptyStringNode);\n        if (newFoldedExpressionCost >= originalSize) {\n          return n;\n        }\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        // Case: Everything folded into one string or one non-string.\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        newFoldedExpressionCost = foldedContentCost; // Cost of the single resulting item\n\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure it is coerced to a string.\n          // This creates: \"\" + foldedStringNode\n          // Cost is Node.newString(\"\") cost (2) + foldedStringNode's cost + ADD token cost (1)\n          newFoldedExpressionCost = InlineCostEstimator.getCost(Node.newString(\"\")) + foldedContentCost + 1;\n        }\n\n        if (newFoldedExpressionCost >= originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // Case: Partial folding. The array literal and join call remain.\n        // Calculate the cost of the entire new expression: [new_array_elems].join(separator)\n        // This involves the cost of the CALL, GETPROP, and separator (which are part of originalSize)\n        // plus the cost of the *modified* array literal.\n\n        int costOfOriginalArray = InlineCostEstimator.getCost(arrayNode);\n        // Start with the cost of the surrounding structure (CALL, GETPROP, separator)\n        newFoldedExpressionCost = originalSize - costOfOriginalArray;\n\n        // Add cost of the new array literal structure itself\n        newFoldedExpressionCost += 2; // For '[]' (array literal delimiters)\n        if (!arrayFoldedChildren.isEmpty()) {\n          // For commas within the array literal itself.\n          newFoldedExpressionCost += (arrayFoldedChildren.size() - 1);\n        }\n        // Add the accumulated cost of the new children nodes\n        newFoldedExpressionCost += foldedContentCost;\n\n        if (newFoldedExpressionCost >= originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}