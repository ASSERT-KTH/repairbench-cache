{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        String value = NodeUtil.getArrayElementStringValue(elem);\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(value);\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n\n    if (arrayFoldedChildren.isEmpty()) {\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    } else if (arrayFoldedChildren.size() == 1) {\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (sb != null) {\n        foldedSize += joinString.length() * (arrayNode.getChildCount() -1 );\n      }\n      foldedSize += arrayFoldedChildren.size() -1;\n\n      int originalSize = InlineCostEstimator.getCost(n);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n        n.getParent().replaceChild(n, replacement);\n        reportCodeChange();\n        return replacement;\n      } else {\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      }\n    } else {\n      // No folding could actually be performed.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return n;\n      }\n\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize = 0;\n      for (Node child : arrayFoldedChildren) {\n        foldedSize += InlineCostEstimator.getCost(child);\n      }\n\n      foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n\n\n      foldedSize += kJoinOverhead;\n      foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n\n      int originalSize = InlineCostEstimator.getCost(n);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      reportCodeChange();\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}