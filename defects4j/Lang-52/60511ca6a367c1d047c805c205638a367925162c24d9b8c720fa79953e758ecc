{
    "generation": "/**\n * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n * \n * @param out write to receive the escaped string\n * @param str String to escape values in, may be null\n * @param escapeSingleQuote escapes single quotes if <code>true</code>\n * @throws IOException if an IOException occurs\n */\nprivate static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str == null) {\n        return;\n    }\n    int sz = str.length();\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n        // handle unicode\n        if (ch > 0xFFF) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch > 0xFF) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch > 0x7F) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch < 32) {\n            switch (ch) {\n                case '\\b':\n                    out.write('\\\\'); out.write('b'); break;\n                case '\\n':\n                    out.write('\\\\'); out.write('n'); break;\n                case '\\t':\n                    out.write('\\\\'); out.write('t'); break;\n                case '\\f':\n                    out.write('\\\\'); out.write('f'); break;\n                case '\\r':\n                    out.write('\\\\'); out.write('r'); break;\n                default:\n                    if (ch > 0xF) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch (ch) {\n                case '\\'':\n                    if (escapeSingleQuote) {\n                        out.write('\\\\');\n                    }\n                    out.write('\\'');\n                    break;\n                case '\"':\n                    out.write('\\\\');\n                    out.write('\"');\n                    break;\n                case '\\\\':\n                    out.write('\\\\'); out.write('\\\\');\n                    break;\n                case '/':\n                    // escape forward slash to avoid </script> ending\n                    out.write('\\\\');\n                    out.write('/');\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}