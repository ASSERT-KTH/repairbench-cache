{
    "generation": "    /**\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     *\n     * @param out write to receieve the escaped string\n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuote escapes single quotes if <code>true</code>\n     * @throws IOException if an IOException occurs\n     */\n    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz;\n        sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n\n            // handle unicode\n            if (ch > 0xfff) { // Characters > U+0FFF, e.g., '\\u20AC'\n                out.write(\"\\\\u\" + hex(ch));\n            } else if (ch > 0xff) { // Characters > U+00FF, e.g., '\\u0100'\n                out.write(\"\\\\u0\" + hex(ch));\n            } else if (ch > 0x7f) { // Characters > U+007F (ASCII range), e.g., '\\u00A0'\n                out.write(\"\\\\u00\" + hex(ch));\n            } else if (ch < 32) { // Control characters (0-31)\n                switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default : // Other control characters (e.g., NUL, SOH)\n                        if (ch > 0xf) { // e.g., '\\u0010' - '\\u001F'\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else { // e.g., '\\u0000' - '\\u000F'\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }\n            } else { // Visible ASCII characters (32-127)\n                switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    case '/': // Fix: Escape forward slash for JavaScript context, especially within <script> tags.\n                        out.write('\\\\');\n                        out.write('/');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}