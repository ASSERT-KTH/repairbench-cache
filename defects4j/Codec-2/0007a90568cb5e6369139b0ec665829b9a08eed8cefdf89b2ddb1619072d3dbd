{
    "generation": "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    // inAvail < 0 signals EOF in the underlying data.\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        // Process any remaining bytes that were buffered (modulus holds the count).\n        if (modulus == 1) {\n            // One byte buffered: normally output 2 characters, or 4 if using standard table with padding.\n            buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n            buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n            int charsAdded = 2;\n            if (encodeTable == STANDARD_ENCODE_TABLE) {\n                buf[pos++] = PAD;\n                buf[pos++] = PAD;\n                charsAdded = 4;\n            }\n            // Update the current line position only if lineLength is being used.\n            currentLinePos = (lineLength > 0) ? currentLinePos + charsAdded : currentLinePos;\n        } else if (modulus == 2) {\n            // Two bytes buffered: normally output 3 characters, or 4 if using standard table.\n            buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n            buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n            buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n            int charsAdded = 3;\n            if (encodeTable == STANDARD_ENCODE_TABLE) {\n                buf[pos++] = PAD;\n                charsAdded = 4;\n            }\n            currentLinePos = (lineLength > 0) ? currentLinePos + charsAdded : currentLinePos;\n        }\n        // Only append a line separator if there is a partial line.\n        if (lineLength > 0 && currentLinePos > 0) {\n            if (buf == null || buf.length - pos < lineSeparator.length) {\n                resizeBuf();\n            }\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n            currentLinePos = 0;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (modulus == 0) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                buf[pos++] = encodeTable[x & MASK_6BITS];\n                currentLinePos += 4;\n                if (lineLength > 0 && currentLinePos >= lineLength) {\n                    if (buf == null || buf.length - pos < lineSeparator.length) {\n                        resizeBuf();\n                    }\n                    System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                    pos += lineSeparator.length;\n                    currentLinePos = 0;\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}