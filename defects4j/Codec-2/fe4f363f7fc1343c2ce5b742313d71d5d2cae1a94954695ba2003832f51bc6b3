{
    "generation": "    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n     * Must be called at least twice:  once with the data to encode, and once\n     * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n     * so flush last remaining bytes (if not multiple of 3).\n     * </p><p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n     * and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in byte[] array of binary data to base64 encode.\n     * @param inPos Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     */\n    @Override // Ensure this matches the original signature, might not have @Override\n    void encode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        // inAvail < 0 is how we're informed of EOF in the underlying data we're\n        // encoding.\n        if (inAvail < 0) {\n            eof = true;\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            switch (modulus) { // 0-2\n                case 1: // Only 1 byte of data modulus -> 2 bytes of base64 is needed + 2 pad chars\n                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; // First 6 bits\n                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; // Last 2 bits + 4 zeros\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                        buf[pos++] = PAD;\n                    }\n                    break;\n\n                case 2: // Only 2 bytes of data modulus -> 3 bytes of base64 is needed + 1 pad char\n                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; // First 6 bits\n                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];  // Middle 6 bits\n                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; // Last 4 bits + 2 zeros\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                    }\n                    break;\n                // case 0: No remaining bytes to encode. Do nothing.\n            }\n\n            // Add mandatory line separator if specified line length, but not\n            // if this call represents absolutely empty input (no data carried over\n            // from previous calls, modulus == 0, and no data written to current line yet, currentLinePos == 0).\n            if (lineLength > 0 && !(modulus == 0 && currentLinePos == 0)) {\n                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                pos += lineSeparator.length;\n            }\n        } else { // Process inAvail bytes of input data\n            for (int i = 0; i < inAvail; i++) {\n                if (buf == null || buf.length - pos < encodeSize) {\n                    resizeBuf();\n                }\n                modulus = (++modulus) % 3;\n                int b = in[inPos++];\n                if (b < 0) {\n                    b += 256; // Ensure byte is treated as unsigned 0-255\n                }\n                x = (x << 8) + b; // Append byte to buffer\n                if (0 == modulus) { // 3 bytes = 24 bits = 4 * 6 bits; flush chunk\n                    buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                    buf[pos++] = encodeTable[x & MASK_6BITS];\n                    currentLinePos += 4;\n                    if (lineLength > 0 && lineLength <= currentLinePos) {\n                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                        pos += lineSeparator.length;\n                        currentLinePos = 0;\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}