{
    "generation": "private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n  ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types from the call\u2019s arguments.\n  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);\n\n  // Create a replacer that will substitute every template type, replacing any\n  // uninferred type with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  // Set the type on the function being called (the callee).\n  callTarget.setJSType(replacementFnType);\n  // Set the type of the call expression to be the function\u2019s return type.\n  n.setJSType(replacementFnType.getReturnType());\n\n  // Furthermore, propagate the inferred template types to the call\u2019s argument nodes.\n  // This is necessary so that if an argument is a function literal whose \u201cthis\u201d\n  // type (or other type annotations) depend on a template type, it will be\n  // properly specialized.\n  for (Node arg = callTarget.getNext(); arg != null; arg = arg.getNext()) {\n    JSType argType = arg.getJSType();\n    if (argType != null) {\n      arg.setJSType(argType.visit(replacer));\n    }\n  }\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}