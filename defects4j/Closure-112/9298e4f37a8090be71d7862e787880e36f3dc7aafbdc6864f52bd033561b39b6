{
    "generation": "private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types.\n  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);\n\n  // For any template type that could not be inferred, substitute UNKNOWN.\n  // (We build a complete mapping so that every key is replaced.)\n  Map<TemplateType, JSType> completeMapping = new HashMap<>(inferred);\n  for (TemplateType key : keys) {\n    if (!completeMapping.containsKey(key)) {\n      completeMapping.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n    }\n  }\n\n  // Replace all template types in the function type.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, completeMapping);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}