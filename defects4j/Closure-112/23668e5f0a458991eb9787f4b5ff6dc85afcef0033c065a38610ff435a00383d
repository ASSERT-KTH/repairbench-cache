{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    ImmutableList.Builder<TemplateType> keysBuilder = ImmutableList.builder();\n    keysBuilder.addAll(fnType.getTemplateTypeMap().getTemplateKeys());\n\n    // Add templates from the 'this' type, if the function is a method on a templated class.\n    // This is crucial for methods on templated classes, where the template is on the class\n    // rather than directly on the method function itself.\n    if (fnType.getThisType().isTemplatized()) {\n      keysBuilder.addAll(fnType.getThisType().getTemplateTypeMap().getTemplateKeys());\n    }\n\n    // Add templates from the 'new.target' type if the function is a constructor.\n    // This ensures templates used in constructor return types (e.g., `new <T> Class<T>()`)\n    // are also considered for inference.\n    if (fnType.isConstructor() && fnType.getNewTargetType().isTemplatized()) {\n      keysBuilder.addAll(fnType.getNewTargetType().getTemplateTypeMap().getTemplateKeys());\n    }\n\n    final ImmutableList<TemplateType> keys = keysBuilder.build();\n\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}