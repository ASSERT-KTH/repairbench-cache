{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    // Update the 'this' type for a templated function type, if necessary.\n    // The 'this' type of the function type itself is not visited by the\n    // TemplateTypeReplacer, so we have to do it manually here.\n    if (fnType.getThisType().isTemplatedType()) {\n      // The 'this' type on the original function type is templated.\n      // This means the 'this' type is something like `Foo<T>`.\n      // We need to apply the replacements to this type as well.\n      // The 'this' type for the *actual* call target\n      // (e.g., `new Foo<number>().method`) is\n      // `Foo<number>`.\n      // The `callTarget` node represents `new Foo<number>().method`.\n      // Its inferred 'this' type (from the `GETPROP` or `GETELEM` node)\n      // should be `new Foo<number>()`.\n      // That is: `callTarget.getThisType()`.\n      JSType actualCallTargetThisType = callTarget.getThisType();\n\n      if (actualCallTargetThisType != null && actualCallTargetThisType.isTemplatedType()) {\n        // If the actual 'this' type from the call target is also templated,\n        // apply the replacer to it.\n        // This covers cases where `T` (on `Foo<T>`) is inferred from other places.\n        actualCallTargetThisType = actualCallTargetThisType.visit(replacer);\n      }\n      // Now, update the 'this' type of the replacementFnType.\n      replacementFnType = replacementFnType.withThisType(actualCallTargetThisType);\n    }\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}