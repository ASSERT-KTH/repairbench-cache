{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys =\n      fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);\n\n  // Replace all template types. If we couldn't find a replacement, we\n  // replace it with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n\n  // If we could not infer some template variables on the *return* type, leave them alone.\n  JSType retType = fnType.getReturnType();\n  if (!retType.isUnknownType() && retType.isTemplatizedType()) {\n    TemplateTypeMap retTypeMap = retType.getTemplateTypeMap();\n    Map<TemplateType, JSType> inferredReturns = new HashMap<>();\n    for (TemplateType key : retTypeMap.getTemplateKeys()) {\n      JSType inferredType = inferred.get(key);\n      // Keep the original template variable if there was no inference.\n      if (inferredType == null) {\n        inferredReturns.put(key, key);\n      } else {\n        inferredReturns.put(key, inferredType);\n      }\n    }\n    TemplateTypeReplacer returnReplacer = new TemplateTypeReplacer(registry, inferredReturns);\n    JSType replacedRetType = retType.visit(returnReplacer);\n    n.setJSType(replacedRetType);\n  } else {\n    n.setJSType(replacementFnType.getReturnType());\n  }\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}