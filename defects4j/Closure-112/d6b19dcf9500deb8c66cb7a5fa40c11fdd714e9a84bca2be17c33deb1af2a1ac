{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // Fix for Issue 1058 and similar scenarios:\n    // If a template type was inferred as UNKNOWN, but it was originally\n    // part of the 'this' type of the function being called (fnType),\n    // and this 'UNKNOWN' inference was likely caused by an improper\n    // unification with an UNKNOWN 'this' type of a function literal argument,\n    // we should override this specific UNKNOWN inference.\n    // Instead of resolving the template type to UNKNOWN, we keep it as\n    // the template type itself. This prevents scenarios like 'Class<UNKNOWN>'\n    // when it should remain 'Class<CLASS>' or resolve to a more precise type\n    // from other parts of the signature.\n    JSType originalFnThisType = fnType.getThisType();\n    if (originalFnThisType != null && originalFnThisType.isTemplatedType()) {\n      for (TemplateType templateInThis : originalFnThisType.getTemplateTypes()) {\n        if (inferred.containsKey(templateInThis) && inferred.get(templateInThis).isUnknownType()) {\n          // If a template type within the 'this' type of fnType was inferred to UNKNOWN,\n          // revert this inference to the template type itself.\n          inferred.put(templateInThis, templateInThis);\n        }\n      }\n    }\n\n    // Replace all template types. If we couldn't find a replacement (e.g.,\n    // after the above patch), we typically replace it with UNKNOWN.\n    // However, if we put the TemplateType itself into 'inferred' as its mapping,\n    // the replacer will preserve it as a TemplateType.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}