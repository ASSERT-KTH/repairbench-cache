{
    "generation": "/**\n * For calls to templated functions, infer and specialize their types,\n * then skip the usual call-site type checking.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  // If the callee has no function-level type parameters, nothing to do.\n  final ImmutableList<TemplateType> keys =\n      fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Infer mapping from template variables to concrete types.\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Substitute the inferred types (or UNKNOWN for any we couldn't infer).\n  TemplateTypeReplacer replacer =\n      new TemplateTypeReplacer(registry, inferred);\n  Node callTarget = n.getFirstChild();\n  FunctionType replacementFnType =\n      fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  // Attach the specialized function type to the callee node,\n  // and the specialized return type to the call node.\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  // Always skip the downstream type-checking for calls to templated functions.\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}