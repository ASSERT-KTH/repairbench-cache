{
    "generation": "  private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n    ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Only perform templated inference on function\u2010literal calls.\n    Node callTarget = n.getFirstChild();\n    if (!callTarget.isFunction()) {\n      return false;\n    }\n\n    // Try to infer the template types.\n    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}