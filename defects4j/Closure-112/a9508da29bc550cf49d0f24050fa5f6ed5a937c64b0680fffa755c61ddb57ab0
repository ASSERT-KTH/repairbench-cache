{
    "generation": "private boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  // If there are no template parameters, nothing to infer.\n  final ImmutableList<TemplateType> keys =\n      fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // First, infer whatever template\u2010to\u2010JSType mappings we can get from the\n  // actual arguments.\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Make sure every declared template appears in our mapping.\n  // If we couldn't infer one, default it to UNKNOWN.\n  Map<TemplateType, JSType> fullMapping = new LinkedHashMap<>();\n  for (TemplateType key : keys) {\n    JSType t = inferred.get(key);\n    if (t == null) {\n      t = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    fullMapping.put(key, t);\n  }\n\n  // Replace all template types in the function's signature.\n  TemplateTypeReplacer replacer =\n      new TemplateTypeReplacer(registry, fullMapping);\n  Node callTarget = n.getFirstChild();\n  FunctionType replacementFnType =\n      fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  // Update the call\u2010target and the call node with the specialized types.\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}