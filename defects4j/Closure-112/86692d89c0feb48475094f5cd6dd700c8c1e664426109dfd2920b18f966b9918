{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // We must preserve the original invariant: do *not* infer/replace template types\n  // if we couldn't fully infer all (non-optional) template types in the context of the call.\n  // Otherwise, we might set template types in the function itself to unknown, which breaks\n  // the propagation of the template constraints (see issue 1058 and testTemplatized11).\n\n  // Check if we have values for all template keys\n  boolean anyInferred = false;\n  boolean allInferred = true;\n  for (TemplateType key : keys) {\n    if (inferred.containsKey(key)) {\n      anyInferred = true;\n    } else {\n      allInferred = false;\n      break;\n    }\n  }\n\n  // Only replace templates if all were inferred (partial inference is wrong for call sites).\n  if (!allInferred) {\n    return anyInferred; // Return true if we inferred at least one template for downstream logic.\n  }\n\n  // Replace all template types.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}