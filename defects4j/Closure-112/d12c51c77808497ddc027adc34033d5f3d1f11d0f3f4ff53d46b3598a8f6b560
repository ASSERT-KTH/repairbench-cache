{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // This map will store all inferred template types throughout the process.\n    Map<TemplateType, JSType> inferred = new LinkedHashMap<>();\n\n    Node callTarget = n.getFirstChild();\n    \n    // Step 1: Infer template types from the 'this' context of the call.\n    // The callTarget's JSType (e.g., the function `method` in `obj.method()`)\n    // might already have its 'this' type (e.g., `obj`'s type) partially or fully\n    // specialized, which can provide initial inferences for templates on the\n    // function's 'this' type.\n    JSType actualCallTargetType = callTarget.getJSType();\n    if (actualCallTargetType != null && actualCallTargetType.isFunctionType()) {\n      FunctionType actualFnType = actualCallTargetType.toMaybeFunctionType();\n      JSType actualThisType = actualFnType.getThisType();\n      JSType genericThisType = fnType.getThisType();\n      \n      // If the generic function has a templated 'this' type, attempt to unify it\n      // with the actual 'this' type derived from the call context.\n      if (genericThisType != null && genericThisType.isTemplatedType()) {\n         registry.getTemplateTypeReplacer().unify(genericThisType, actualThisType, inferred);\n      }\n    }\n\n    // Step 2: Infer template types from the function's parameters.\n    // We pass the original generic fnType, as `inferTemplateTypesFromParameters`\n    // is designed to work with generic types and can unify template variables\n    // based on parameter assignments.\n    Map<TemplateType, JSType> inferredFromParameters =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // Step 3: Combine all inferences.\n    // Merge the parameter-based inferences into the overall `inferred` map.\n    // This allows parameter inferences (which are often more specific) to\n    // potentially override or refine template types already inferred from the\n    // 'this' context. `putAll` handles this by overriding existing keys.\n    inferred.putAll(inferredFromParameters);\n\n    // Step 4: Apply the combined inferences.\n    // Create a replacer with the comprehensive map of all inferred template types.\n    // If a template type couldn't be inferred, it defaults to UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    \n    // Visit the original generic fnType with the comprehensive replacer\n    // to get the fully specialized function type for this specific call.\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    // Set the specialized function type on the call target node (the function being called).\n    callTarget.setJSType(replacementFnType);\n    // Set the specialized return type on the call expression node itself.\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}