{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    // Only set the JSType of the call target if it's a NAME or FUNCTION.\n    // If it's a GETPROP or GETELEM, its type will be inferred by the type checker\n    // based on its receiver's type, which often correctly handles templates\n    // derived from the receiver's type (e.g., new C<T>()).\n    // Setting the JSType here for GETPROP/GETELEM nodes can sometimes\n    // override or interfere with a more precise inference that happens\n    // later during normal type checking of the property access.\n    if (callTarget.isName() || callTarget.isFunction()) {\n      callTarget.setJSType(replacementFnType);\n    }\n\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}