{
    "generation": "private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n  ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types.\n  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);\n\n  // Replace all template types. If no actual replacement is made, then don\u2019t update\n  // the types on the call node.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  if (!replacer.madeChanges) {\n    return false;\n  }\n\n  Node callTarget = n.getFirstChild();\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}