{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Fill in missing keys with unknown to avoid propagating template types to callers.\n  if (inferred.size() < keys.size()) {\n    Map<TemplateType, JSType> completedInferred =\n        new LinkedHashMap<>();\n    completedInferred.putAll(inferred);\n    for (TemplateType key : keys) {\n      if (!completedInferred.containsKey(key)) {\n        completedInferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n    }\n    inferred = completedInferred;\n  }\n\n  // Replace all template types with the inferred types (or unknown).\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}