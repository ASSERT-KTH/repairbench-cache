{
    "generation": "private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n  ImmutableList<TemplateType> keys =\n      fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types from the call\u2019s arguments.\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Use the TemplateTypeReplacer to substitute template types.\n  // Any template type for which no inference was obtained will be replaced with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType inferredFnType = fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(inferredFnType);\n\n  // If the call target already has a function type (for example, if it was written\n  // as a function literal with an explicit JSDoc), we want to update only its \u201cthis\u201d type.\n  // This preserves the originally declared parameter and return types.\n  JSType existingType = callTarget.getJSType();\n  if (existingType != null && existingType.isFunctionType()) {\n    FunctionType originalFnType = existingType.toMaybeFunctionType();\n    // Create a new function type that is identical except that its \"this\" type is replaced.\n    FunctionType updatedFnType = originalFnType.withThisType(\n        inferredFnType.getTypeOfThis());\n    callTarget.setJSType(updatedFnType);\n  } else {\n    // Otherwise, simply replace the entire type.\n    callTarget.setJSType(inferredFnType);\n  }\n\n  // The call expression's type is determined by the function's return type.\n  n.setJSType(inferredFnType.getReturnType());\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}