{
    "generation": "  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // Build replacements for all template keys, using inferred types or UNKNOWN\n    ImmutableMap.Builder<TemplateType, JSType> replacementsBuilder =\n        ImmutableMap.builder();\n    for (TemplateType key : keys) {\n      JSType replacement = inferred.get(key);\n      if (replacement == null) {\n        replacement = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n      }\n      replacementsBuilder.put(key, replacement);\n    }\n    Map<TemplateType, JSType> replacements = replacementsBuilder.build();\n\n    // Replace template types using the constructed replacements\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, replacements);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}