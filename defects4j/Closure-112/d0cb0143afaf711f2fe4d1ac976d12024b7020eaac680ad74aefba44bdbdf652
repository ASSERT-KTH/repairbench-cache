{
    "generation": "private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n  // If the function has no type\u2010params, there's nothing to infer.\n  ImmutableList<TemplateType> keys =\n      fnType.getTemplateTypeMap().getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types from the actual arguments.\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // If we couldn't infer any of the function's own type\u2010params, don't\n  // replace at all (to avoid masking foo() in testIssue1058).\n  if (inferred.isEmpty()) {\n    return false;\n  }\n\n  // Otherwise we do the usual replace\u2010all (unmapped templates become UNKNOWN).\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType =\n      fnType.visit(replacer).toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}