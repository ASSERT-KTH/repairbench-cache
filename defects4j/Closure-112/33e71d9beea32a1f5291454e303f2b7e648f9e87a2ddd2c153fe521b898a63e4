{
    "generation": "  private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    // Ensure that the inferred types are correctly applied to the call target\n    if (replacer.madeChanges) {\n      callTarget.setJSType(replacementFnType);\n      n.setJSType(replacementFnType.getReturnType());\n    }\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}