{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * the actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types from parameters\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // Additionally infer template types from the 'this' type\n    Node callTarget = n.getFirstChild();\n    if (callTarget.isGetProp()) {\n      Node receiver = callTarget.getFirstChild();\n      JSType receiverType = receiver.getJSType();\n      JSType thisType = fnType.getTypeOfThis();\n      if (receiverType != null && thisType != null) {\n        Map<TemplateType, JSType> thisInferred = new HashMap<>();\n        // Use the same logic as parameter inference for 'this' type\n        TypeInference.InferJSType(thisType, receiverType, thisInferred);\n        // Merge inferences, giving priority to existing entries\n        for (Map.Entry<TemplateType, JSType> entry : thisInferred.entrySet()) {\n          if (!inferred.containsKey(entry.getKey())) {\n            inferred.put(entry.getKey(), entry.getValue());\n          }\n        }\n      }\n    }\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}