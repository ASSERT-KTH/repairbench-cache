{
    "generation": "  /**\n   * ContextTypeExpression := BasicTypeExpression | '?' | '*'\n   * For expressions on the right hand side of a this: or new:\n   */\n  private Node parseContextTypeExpression(JsDocToken token) {\n    // Check the token at the current stream position, which should be the start of the type.\n    JsDocToken currentToken = stream.peek();\n    Node node; // Node to return\n\n    if (currentToken == JsDocToken.QMARK) {\n      // Record position before consuming\n      int lineno = stream.getLineno();\n      int startCharno = stream.getCharno();\n      stream.next(); // Consume '?'\n\n      node = IR.string(\"?\"); // Create Node for unknown type '?'\n      // Set source information\n      node.setStaticSourceFile(getSourceFile());\n      node.setLineno(lineno);\n      node.setCharno(startCharno);\n      return node;\n\n    } else if (currentToken == JsDocToken.STAR) {\n      // Record position before consuming\n      int lineno = stream.getLineno();\n      int startCharno = stream.getCharno();\n      stream.next(); // Consume '*'\n\n      node = IR.string(\"*\"); // Create Node for all type '*'\n      // Set source information\n      node.setStaticSourceFile(getSourceFile());\n      node.setLineno(lineno);\n      node.setCharno(startCharno);\n      return node;\n\n    } else {\n      // It's expected to be a BasicTypeExpression.\n      // Pass the current token (which starts the type name) to parseTypeName.\n      // The 'token' parameter originally passed to this function refers to 'new' or 'this',\n      // not the start of the type name itself.\n      return parseTypeName(currentToken);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}