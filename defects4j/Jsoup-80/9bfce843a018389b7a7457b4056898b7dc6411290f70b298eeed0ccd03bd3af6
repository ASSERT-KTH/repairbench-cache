{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment; // Default node to insert is the comment itself\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                try {\n                    // Attempt to parse the content as an XML fragment\n                    // Substring data excluding the first and last character (`!` or `?` and potentially `>`)\n                    String declarationContent = data.substring(1);\n                    // Ensure we don't pass an empty string to parse, which can lead to issues.\n                    // Also, check if the content looks like a valid tag name start.\n                    if (declarationContent.length() > 0 && !Character.isWhitespace(declarationContent.charAt(0))) {\n                        // Wrap in < > to make it look like an XML tag for parsing\n                        // Use data.substring(1) assuming the token data includes the ?, but not necessarily the >.\n                        // Example: <?xml version=\"1.0\"> token data might be \"?xml version=\"1.0\"\" or \"?xml version=\"1.0\">\"\n                        // Parsing <xml version=\"1.0\"> should work.\n                        // Let's refine substring logic: remove first char, assume rest is content ending optionally with >\n                        // If it ends with '>', remove it for parsing.\n                        if (declarationContent.endsWith(\">\")) {\n                            declarationContent = declarationContent.substring(0, declarationContent.length() - 1);\n                        }\n\n                        // Ensure the string to parse is not empty after potentially removing '>'\n                        if (!declarationContent.isEmpty()) {\n                             Document doc = Jsoup.parse(\"<\" + declarationContent + \">\", baseUri, Parser.xmlParser());\n                             if (doc.childNodeSize() > 0) { // Check if parsing produced any nodes\n                                 Node child = doc.childNode(0);\n                                 // Check if the first node is an Element (expected for declarations like <?xml...>)\n                                 if (child instanceof Element) {\n                                     Element el = (Element) child;\n                                     // Create XmlDeclaration from the parsed element\n                                     insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                                     insert.attributes().addAll(el.attributes());\n                                 }\n                                 // If child(0) is not an Element (e.g., <?...> contained only text), 'insert' remains the original Comment (fallback)\n                             }\n                             // If parsing produced no nodes (e.g., <? >), 'insert' remains the original Comment (fallback)\n                        }\n                    }\n                } catch (Exception e) {\n                    // If any error occurs during parsing (e.g., invalid XML fragment),\n                    // fall back to inserting the original comment.\n                    // Log error? For now, just fallback.\n                    // insert = comment; // already the default\n                }\n            }\n        }\n        insertNode(insert); // Insert either XmlDeclaration or the original Comment\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}