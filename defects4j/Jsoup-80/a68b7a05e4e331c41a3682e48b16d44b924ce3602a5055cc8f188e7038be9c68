{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = commentToken.getData();\n            // This check is slightly redundant if `bogus` implies `data.startsWith(\"!\") || data.startsWith(\"?\")`\n            // but keeps the intent clear and safe in case `bogus` flag logic changes.\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                // The original approach of parsing \"<\" + data.substring(1, data.length() - 1) + \">\"\n                // into a Jsoup Document and then extracting its child Element fails for malformed\n                // XML declarations (e.g., missing closing '?>') because the XML parser is strict\n                // and might not create a child Element for such input.\n                // Instead, we manually parse the tag name and attributes from the raw data string.\n\n                String declContent = data.substring(1); // Remove the leading '?' or '!'\n\n                int firstSpace = declContent.indexOf(' ');\n                String tagName;\n                String attrString = null;\n\n                if (firstSpace > 0) {\n                    tagName = settings.normalizeTag(declContent.substring(0, firstSpace));\n                    attrString = declContent.substring(firstSpace + 1);\n                } else {\n                    tagName = settings.normalizeTag(declContent);\n                }\n\n                // Determine if it's a Processing Instruction (starts with '?') or a DTD-like declaration (starts with '!').\n                // XmlDeclaration node is used for both in Jsoup's internal representation.\n                boolean isProcessingInstruction = data.startsWith(\"?\");\n\n                XmlDeclaration declNode = new XmlDeclaration(tagName, isProcessingInstruction);\n\n                if (attrString != null) {\n                    // Attributes.createFromDelimited is suitable for parsing attribute strings like \"version='1.0'\".\n                    // The `settings` object from the TreeBuilder (usually ParseSettings.preserveCase for XML)\n                    // is used to handle attribute case normalization.\n                    declNode.attributes().addAll(org.jsoup.nodes.Attributes.createFromDelimited(attrString, settings));\n                }\n                insert = declNode;\n            }\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}