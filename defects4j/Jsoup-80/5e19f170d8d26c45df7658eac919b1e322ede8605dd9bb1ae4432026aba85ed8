{
    "generation": "import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Comment;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Token;\n\n// Assumes 'settings' and 'baseUri' are available as member variables.\n// And 'insertNode' is a helper method available in the class.\n// This example relies on the context of org.jsoup.parser.XmlTreeBuilder\n\nclass XmlTreeBuilder { // (Contextual class name for clarity, not part of the required output)\n    private org.jsoup.internal.StringUtil settings; // Assuming this is present in the class context\n    private String baseUri; // Assuming this is present in the class context\n\n    void insertNode(Node node) { /* placeholder */ }\n\n    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment; // Default: treat as a simple Comment node\n\n        if (commentToken.bogus) { // xml declarations and some other processing instructions are emitted as bogus comments\n            String data = commentToken.getData(); // The content of the bogus comment\n\n            // Case 1: XML Declaration (e.g., <?xml version=\"1.0\" encoding=\"UTF-8\"?>)\n            // For XML declarations, the tokeniser typically provides `data` as `xml version=\"1.0\"`,\n            // NOT including the leading `?`.\n            if (data.regionMatches(true, 0, \"xml\", 0, 3) && // Check for \"xml\" case-insensitive\n                (data.length() == 3 || Character.isWhitespace(data.charAt(3)) || data.charAt(3) == '/')) { // Followed by whitespace, end, or '/' for self-closing\n                try {\n                    // To extract attributes and tag name, we parse it as a dummy element.\n                    // For `data = \"xml version='1.0'\"`, we parse `<xml version='1.0'>`.\n                    Document doc = Jsoup.parse(\"<\" + data + \">\", baseUri, Parser.xmlParser());\n                    // Check if an element was successfully parsed. `doc.child(0)` throws if no element.\n                    if (!doc.children().isEmpty()) {\n                        Element el = doc.child(0);\n                        // Create an XmlDeclaration node. `isXmlDecl` is true for actual XML declarations.\n                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), true);\n                        insert.attributes().addAll(el.attributes());\n                    }\n                } catch (Exception e) {\n                    // If parsing as an element fails (e.g., malformed `data`),\n                    // fall back to the default `Comment` node.\n                    // `insert` is already initialized to `comment`, so no explicit action needed.\n                }\n            }\n            // Case 2: CDATA Section (e.g., <![CDATA[foo]]>)\n            // While XmlTokeniser typically emits `Token.CData` for `CDATA` sections,\n            // sometimes they might be tokenized as bogus comments, with `data` as `[CDATA[foo]]`.\n            else if (data.length() >= 7 && data.startsWith(\"[CDATA[\") && data.endsWith(\"]]\")) {\n                // Extract the content by stripping `[CDATA[` (7 chars) and `]]` (2 chars).\n                insert = new org.jsoup.nodes.CDataSection(data.substring(7, data.length() - 2));\n            }\n            // Case 3: Other \"dodgy\" bogus comments that happen to start with '!' or '?'\n            // (e.g., `<!DOCTYPE html>`, `<?php ... ?>`) where `data` *includes* the leading `!` or `?`.\n            else if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                try {\n                    // Extract a potential tag name by stripping the first character ('!' or '?')\n                    // and the last character (assuming it's a `>`).\n                    // This is less robust than the XML declaration parsing but matches original intent.\n                    String tag = data.substring(1, data.length() - 1);\n                    \n                    // Parse as a dummy element to extract attributes.\n                    Document doc = Jsoup.parse(\"<\" + tag + \">\", baseUri, Parser.xmlParser());\n                    if (!doc.children().isEmpty()) {\n                        Element el = doc.child(0);\n                        // `isXmlDecl` is true if it started with `?` (like `<?php`).\n                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"?\"));\n                        insert.attributes().addAll(el.attributes());\n                    }\n                } catch (Exception e) {\n                    // If parsing as an element fails, fall back to `Comment`.\n                }\n            }\n        }\n        insertNode(insert);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}