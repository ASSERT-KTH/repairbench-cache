{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            String data = comment.getData();\n            // Jsoup's lexer strips the leading '!' or '?' from bogus comments,\n            // so we check the actual content for \"xml\" or \"DOCTYPE\".\n            // The previous condition `data.startsWith(\"!\") || data.startsWith(\"?\")` would never be true.\n            if (data.length() > 1 && (data.toLowerCase().startsWith(\"xml\") || data.toLowerCase().startsWith(\"doctype\"))) {\n                // Manually extract the tag name (e.g., \"xml\", \"doctype\")\n                String tagName = data.split(\"\\\\s\", 2)[0];\n                Attributes attributes;\n\n                // If there's more data after the tag name, it should contain attributes.\n                if (data.length() > tagName.length()) {\n                    // Construct a dummy XML element string (e.g., \"<xml version='1.0'>\")\n                    // and use Jsoup's XML parser to extract the attributes from it.\n                    // The XML parser is robust enough to parse this as a valid element.\n                    String attributeXml = \"<\" + tagName + data.substring(tagName.length()) + \">\";\n                    Document doc = Jsoup.parse(attributeXml, baseUri, Parser.xmlParser());\n                    attributes = doc.child(0).attributes();\n                } else {\n                    attributes = new Attributes();\n                }\n\n                // Create an XmlDeclaration node.\n                // It is an XmlDeclaration if its tag name is \"xml\". Otherwise, it's a processing instruction (like a doctype).\n                insert = new XmlDeclaration(settings.normalizeTag(tagName), tagName.toLowerCase().equals(\"xml\"));\n                insert.attributes().addAll(attributes);\n            }\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}