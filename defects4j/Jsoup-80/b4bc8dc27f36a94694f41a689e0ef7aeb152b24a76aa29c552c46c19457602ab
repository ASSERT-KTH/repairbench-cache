{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = commentToken.getData();\n\n            // Try to parse the comment's data as a standalone XML element to extract its name and attributes.\n            // For example, if data is \"xml version='1.0'\", this will parse \"<xml version='1.0'>\".\n            // This is safer than the original substring logic which was flawed because Token.Comment.data already stripped leading '?' or '!'.\n            Document doc = Jsoup.parse(\"<\" + data + \">\", baseUri, Parser.xmlParser());\n\n            // Check if parsing the data yielded at least one element.\n            // If data was something like \"DOCTYPE html\" (and it somehow reached here as bogus comment),\n            // parsing \"<DOCTYPE html>\" in XML parser might result in a DocumentType node but no element children,\n            // or if the data was completely malformed as an element, doc.children() would be empty.\n            if (doc.children().size() > 0) {\n                Element el = doc.child(0);\n                String tagName = settings.normalizeTag(el.tagName());\n\n                // Determine if it's a processing instruction (like <?xml ...?>).\n                // The 'isProcessingInstruction' flag depends on the original leading character ('?' for PI, '!' for others).\n                // Since commentToken.getData() doesn't preserve this, we infer based on common tag names.\n                // \"xml\" is the most common processing instruction target.\n                boolean isProcessingInstruction = tagName.equalsIgnoreCase(\"xml\"); \n                // Add other common PIs if needed (e.g., || tagName.equalsIgnoreCase(\"php\")).\n\n                insert = new XmlDeclaration(tagName, isProcessingInstruction);\n                insert.attributes().addAll(el.attributes());\n            }\n            // If doc.children() is empty, 'insert' remains the original Comment node,\n            // which prevents IndexOutOfBoundsException and handles cases where the bogus comment\n            // content is not a valid XML element structure.\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}