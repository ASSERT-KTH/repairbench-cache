{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                // For xml declarations/doctypes, the comment data typically contains the leading '!' or '?'\n                // e.g., for \"<?xml version='1.0'?>\", data is \"?xml version='1.0'\"\n                // e.g., for \"<!DOCTYPE html>\", data is \"!DOCTYPE html\"\n                // So, we strip the leading character to form a valid XML element tag.\n                String decl = data.substring(1);\n                Document doc = Jsoup.parse(\"<\" + decl + \">\", baseUri, Parser.xmlParser());\n                // Check if parsing resulted in a child element before attempting to access it.\n                // This prevents IndexOutOfBoundsException for malformed declarations (e.g. empty string from substring, or invalid XML).\n                if (doc.children().size() > 0) {\n                    Element el = doc.child(0);\n                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                    insert.attributes().addAll(el.attributes());\n                }\n            }\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}