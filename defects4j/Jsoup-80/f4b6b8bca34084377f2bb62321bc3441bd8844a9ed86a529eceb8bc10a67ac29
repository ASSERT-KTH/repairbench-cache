{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment; // Default node to insert is the original comment\n\n        if (commentToken.bogus) {\n            String data = comment.getData();\n\n            // Handle <?xml... ?> declarations or other PIs mis-tokenized as bogus comments\n            if (data.length() > 1 && data.startsWith(\"?\")) {\n                // data likely looks like \"?xml version='1.0'\" or similar\n                String coreData = data.substring(1); // Remove leading '?'\n\n                // XML Processing Instructions should end with \"?>\" but tokenizer might miss it / parse differently\n                // Cleanup potential trailing '?' or '>'\n                if (coreData.endsWith(\"?>\")) {\n                    coreData = coreData.substring(0, coreData.length() - 2);\n                } else if (coreData.endsWith(\"?\") || coreData.endsWith(\">\")) {\n                    coreData = coreData.substring(0, coreData.length() - 1);\n                }\n                coreData = coreData.trim(); // Trim whitespace\n\n                try {\n                    // Extract the name and attribute payload\n                    int nameEndIdx = coreData.indexOf(' ');\n                    String name;\n                    String attributesPayload;\n\n                    if (nameEndIdx == -1) { // No attributes, e.g., <?xml?>\n                        name = coreData;\n                        attributesPayload = \"\";\n                    } else {\n                        name = coreData.substring(0, nameEndIdx);\n                        attributesPayload = coreData.substring(nameEndIdx).trim();\n                    }\n\n                    if (!name.isEmpty()) {\n                        // Create the XmlDeclaration node\n                        XmlDeclaration decl = new XmlDeclaration(settings.normalizeTag(name), true); // true because it's a PI <?...>\n\n                        if (!attributesPayload.isEmpty()) {\n                            // Use a dummy element parsed by the XML parser to extract attributes robustly\n                            String dummyTag = \"<dummy \" + attributesPayload + \" />\";\n                            // Use a fresh parser instance to avoid interfering with current parse state\n                            Document tempDoc = Jsoup.parse(dummyTag, baseUri, Parser.xmlParser());\n                            Element dummyEl = tempDoc.selectFirst(\"dummy\"); // Find the dummy element\n\n                            if (dummyEl != null) {\n                                // Copy attributes from dummy element to the XmlDeclaration\n                                decl.attributes().addAll(dummyEl.attributes());\n                            }\n                            // If dummy parse failed, decl will have no attributes, which is acceptable fallback\n                        }\n                        insert = decl; // Set the node to insert as the parsed XmlDeclaration\n                    }\n                    // If name is empty after processing, insert remains the original comment.\n\n                } catch (Exception e) {\n                    // On any parsing error, fallback to inserting the original comment node\n                    insert = comment;\n                }\n\n            } else if (data.length() > 1 && data.startsWith(\"!\")) {\n                // Handle <!...> bogus comments (e.g., mis-parsed DOCTYPE)\n                // This section preserves the original logic's intent but adds safety checks\n                // Note: Creating XmlDeclaration for <!DOCTYPE> is semantically incorrect, but\n                // preserves the original code's behavior pattern beyond fixing the specific crash.\n                try {\n                    String coreData = data.substring(1); // Remove leading '!'\n                    // Remove potential trailing '>'\n                    if (coreData.endsWith(\">\")) {\n                       coreData = coreData.substring(0, coreData.length() -1);\n                    }\n                    coreData = coreData.trim();\n\n                    if (!coreData.isEmpty()) {\n                         // Try parsing the content within a tag, similar to original logic\n                         Document doc = Jsoup.parse(\"<\" + coreData + \">\", baseUri, Parser.xmlParser());\n                         // Check that parsing produced at least one child element\n                         if (doc.childNodeSize() > 0 && doc.child(0) instanceof Element) {\n                             Element el = doc.child(0);\n                             // Create XmlDeclaration (potentially incorrect type, but matches original logic pattern)\n                             Node newNode = new XmlDeclaration(settings.normalizeTag(el.tagName()), false); // false for isProcessingInstruction for <!...>\n                             newNode.attributes().addAll(el.attributes());\n                             insert = newNode; // Set the node to insert\n                         }\n                         // If parsing fails or yields no element, insert remains the original comment.\n                    }\n                    // If coreData is empty, insert remains the original comment.\n                 } catch (Exception e) {\n                     // On any parsing error, fallback to inserting the original comment node\n                     insert = comment;\n                 }\n            }\n        }\n        insertNode(insert); // Insert the determined node (either parsed node or original comment)\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}