{
    "generation": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData());\n    Node insert = comment;\n    if (commentToken.bogus) { // XML declarations are emitted as bogus comments (fine for HTML but not for XML)\n        // hack: try to parse the comment\u2019s data as if it were an element to pull out attributes\n        String data = comment.getData();\n        String trimmed = data.trim();\n        String fragment = null;\n\n        // If the data is wrapped with matching '!' or '?' then remove those boundaries.\n        if (trimmed.length() > 1 && \n            ((trimmed.charAt(0) == '!' || trimmed.charAt(0) == '?') && trimmed.charAt(trimmed.length() - 1) == trimmed.charAt(0))) {\n            fragment = trimmed.substring(1, trimmed.length() - 1);\n        } \n        // Otherwise, if the data starts with \"xml\" (ignoring case), use it as-is.\n        else if (trimmed.toLowerCase().startsWith(\"xml\")) {\n            fragment = trimmed;\n        }\n        \n        if (fragment != null && !fragment.isEmpty()) {\n            // Wrap the fragment in a self-closing element tag so that the XML parser can extract attributes.\n            Document doc = Jsoup.parse(\"<\" + fragment + \" />\", baseUri, Parser.xmlParser());\n            Elements elements = doc.children();\n            if (!elements.isEmpty()) {\n                Element el = elements.first();\n                // Determine if it\u2019s a declaration (if originally it had a leading '!') else treat as a processing instruction.\n                boolean isDeclaration = trimmed.charAt(0) == '!';\n                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), isDeclaration);\n                insert.attributes().addAll(el.attributes());\n            }\n        }\n    }\n    insertNode(insert);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}