{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment; // Default node to insert\n\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            String data = comment.getData(); // E.g., \"?xml version='1.0'\" or \"!DOCTYPE html\"\n\n            // Basic validation: must start with ? or ! and have content after it.\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                // Extract content: \"xml version='1.0'\" or \"DOCTYPE html\"\n                // data.substring(1) is safe due to data.length() > 1 check\n                String content = data.substring(1);\n\n                // Ensure content is not empty or just whitespace before attempting parse\n                // trim() is important to handle cases like \"? \" or \"! \"\n                if (!content.trim().isEmpty()) {\n                    // Attempt to parse the content as an element to extract tag name and attributes\n                    // We wrap the content in \"<...>\" to parse it as a tag.\n                    String parseInput = \"<\" + content + \">\";\n                    Document doc = Jsoup.parse(parseInput, baseUri, Parser.xmlParser());\n\n                    // Check if parsing produced at least one element child.\n                    // This prevents IndexOutOfBoundsException if parse fails or yields unexpected structure (e.g., empty doc).\n                    if (!doc.children().isEmpty()) {\n                        Element el = doc.child(0); // Get the first element child\n                        // Create an XmlDeclaration node. The second arg indicates if it started with '!' (like <!DOCTYPE>)\n                        // The original code used XmlDeclaration for both <?xml...> and <!DOCTYPE...>, so we retain that logic.\n                        // Normalizing the tag name using settings is crucial.\n                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                        // Copy attributes from the parsed element to the new node\n                        insert.attributes().addAll(el.attributes());\n                    }\n                    // If parsing failed or resulted in no children (e.g., invalid XML fragment in `content`),\n                    // 'insert' remains the original Comment node, providing a safe fallback.\n                }\n                // If content is empty or whitespace, 'insert' remains the original Comment node.\n            }\n        }\n        // Insert the determined node (either XmlDeclaration or the original Comment)\n        insertNode(insert);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}