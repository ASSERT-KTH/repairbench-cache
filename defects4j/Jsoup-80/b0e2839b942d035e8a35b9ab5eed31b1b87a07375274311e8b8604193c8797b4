{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment; // default to a regular comment\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = commentToken.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                // Determine the actual content of the XML declaration/PI for parsing.\n                // Example: for \"<?xml version='1.0'?>\", data is \"?xml version='1.0'?\".\n                // We want to extract \"xml version='1.0'\".\n\n                String coreData = data.substring(1); // remove leading '!' or '?'\n                \n                // If there's a trailing '?' or '!' (common in actual XML declarations like `<?xml ...?>` where `getData()` includes the final `?`)\n                // remove it. This also handles cases where `<?...?>` becomes `?...?` in data.\n                if (coreData.length() > 0 && (coreData.endsWith(\"?\") || coreData.endsWith(\"!\"))) {\n                    coreData = coreData.substring(0, coreData.length() - 1); \n                }\n                \n                // Trim leading/trailing whitespace, as the inner parser expects clean element name/attributes\n                coreData = coreData.trim();\n\n                if (!coreData.isEmpty()) {\n                    // This hack assumes the content inside the <?...?> is a valid XML element structure.\n                    // For example, \"xml version='1.0'\" is parsed as an element with tag \"xml\" and attribute \"version\".\n                    Document doc = Jsoup.parse(\"<\" + coreData + \">\", baseUri, Parser.xmlParser());\n                    \n                    // The parsing of arbitrary bogus comment content might fail to produce a valid element\n                    // (e.g., if coreData is malformed or just whitespace).\n                    // If no child element is found, it's not a parsable XML Declaration/PI in this context,\n                    // so it should remain a Comment node (which is the default 'insert' value).\n                    if (!doc.children().isEmpty()) {\n                        Element el = doc.child(0);\n                        // The 'isXmlDecl' flag for XmlDeclaration should be true only if the processing instruction target is \"xml\" (case-insensitive).\n                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), el.tagName().equalsIgnoreCase(\"xml\"));\n                        insert.attributes().addAll(el.attributes());\n                    }\n                }\n            }\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}