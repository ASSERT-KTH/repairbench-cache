{
    "generation": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData());\n    Node insert = comment;\n    if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\") || data.toLowerCase().startsWith(\"xml\"))) {\n            String declData;\n            // When the data begins with '!' or '?' and also ends with the same char, strip both ends.\n            // Otherwise, just strip the first char. For declarations that don\u2019t have a leading delimiter\n            // (eg, \"xml version='1.0'\") leave the data unaltered.\n            if (data.startsWith(\"!\") || data.startsWith(\"?\")) {\n                if (data.charAt(0) == data.charAt(data.length() - 1))\n                    declData = data.substring(1, data.length() - 1);\n                else\n                    declData = data.substring(1);\n            } else {\n                declData = data;\n            }\n            Document doc = Jsoup.parse(\"<\" + declData + \">\", baseUri, Parser.xmlParser());\n            if (!doc.children().isEmpty()) {\n                Element el = doc.child(0);\n                // When the original data started with '?' or (in its absence) if it begins with \"xml\", consider it a processing instruction.\n                boolean isProcessingInstruction = data.startsWith(\"?\") || data.toLowerCase().startsWith(\"xml\");\n                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), isProcessingInstruction);\n                insert.attributes().addAll(el.attributes());\n            }\n        }\n    }\n    insertNode(insert);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}