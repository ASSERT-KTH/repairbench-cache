{
    "generation": "void insert(Token.Comment commentToken) {\n    // Create a normal comment node by default\n    Comment comment = new Comment(commentToken.getData());\n    Node insert = comment;\n\n    if (commentToken.bogus) {\n        // In XML mode, <?\u2026?> and <!\u2026> declarations come through as bogus comments.\n        // We detect XML declarations (<?xml \u2026?>) and DOCTYPEs (<!DOCTYPE \u2026>) here,\n        // re-parse them as a dummy element to pull out the tag name and attributes,\n        // then build a proper XmlDeclaration node.\n        String data = commentToken.getData();\n\n        // 1) XML declaration: starts with \"xml\" (case-insensitive)\n        if (data.toLowerCase().startsWith(\"xml\")) {\n            // strip a trailing '?' if present (data may be \"xml version='1.0'?\")\n            String decl = data.endsWith(\"?\")\n                ? data.substring(0, data.length() - 1)\n                : data;\n            // re-parse as a one-off element\n            Document doc = Jsoup.parse(\"<\" + decl + \">\", baseUri, Parser.xmlParser());\n            if (doc.childNodeSize() > 0) {\n                Element el = doc.child(0);\n                XmlDeclaration xd = new XmlDeclaration(\n                    settings.normalizeTag(el.tagName()),  // name (xml)\n                    true                                  // is processing instruction\n                );\n                xd.attributes().addAll(el.attributes());\n                insert = xd;\n            }\n        }\n        // 2) DOCTYPE or other \"!\" declarations: starts with \"!\"\n        else if (data.startsWith(\"!\") && data.length() > 1) {\n            // strip leading '!' and optional trailing '?'\n            String decl = data;\n            if (decl.endsWith(\"?\")) decl = decl.substring(0, decl.length() - 1);\n            decl = decl.substring(1);\n            Document doc = Jsoup.parse(\"<\" + decl + \">\", baseUri, Parser.xmlParser());\n            if (doc.childNodeSize() > 0) {\n                Element el = doc.child(0);\n                XmlDeclaration xd = new XmlDeclaration(\n                    settings.normalizeTag(el.tagName()),  // e.g. \"DOCTYPE\"\n                    false                                 // not a processing instruction\n                );\n                xd.attributes().addAll(el.attributes());\n                insert = xd;\n            }\n        }\n    }\n\n    insertNode(insert);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}