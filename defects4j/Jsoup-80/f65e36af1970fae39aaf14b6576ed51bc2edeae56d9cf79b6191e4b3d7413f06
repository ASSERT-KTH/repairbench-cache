{
    "generation": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData());\n    Node insert = comment;\n    if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        String data = comment.getData().trim();\n        // Check if this bogus comment is really an XML declaration:\n        // It may either start with \"!\" or \"?\" or (in dodgy cases) simply start with \"xml\".\n        if (data.length() > 0 &&\n                (data.startsWith(\"!\") || data.startsWith(\"?\") || data.toLowerCase().startsWith(\"xml\"))) {\n            String decl;\n            // If the string starts with '!' or '?', strip it.\n            // Only strip the trailing punctuation if it matches the leading one.\n            if (data.charAt(0) == '!' || data.charAt(0) == '?') {\n                if (data.length() > 1 && data.charAt(data.length() - 1) == data.charAt(0))\n                    decl = data.substring(1, data.length() - 1).trim();\n                else\n                    decl = data.substring(1).trim();\n            } else {\n                decl = data;\n            }\n            // Wrap into a self-closing tag so the XML parser can extract attributes.\n            Document doc = Jsoup.parse(\"<\" + decl + \"/>\", baseUri, Parser.xmlParser());\n            if (!doc.children().isEmpty()) {\n                Element el = doc.child(0);\n                // The second argument is set to true if the XML declaration starts with '!' (as in <!xml ...>) \n                // and false if it starts with '?' (as in <?xml ...>).\n                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                insert.attributes().addAll(el.attributes());\n            }\n        }\n    }\n    insertNode(insert);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}