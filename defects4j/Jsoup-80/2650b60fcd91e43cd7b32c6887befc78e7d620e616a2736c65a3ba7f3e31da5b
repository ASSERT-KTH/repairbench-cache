{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            // Ensure data is long enough, starts with ! or ?, and has content after the ! or ?\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                String declarationBody = data.substring(1); // Extract content after ? or !\n                // Avoid parsing empty strings like \"<>\" which can lead to errors.\n                if (!declarationBody.isEmpty()) {\n                    // Parse the declaration content as a standalone XML tag\n                    // Use the baseUri and the XML parser settings inherited from the current parse.\n                    Document doc = Jsoup.parse(\"<\" + declarationBody + \">\", baseUri, Parser.xmlParser());\n                    // Check if the parse resulted in a document with at least one child element\n                    if (doc.childrenSize() > 0) { // Use childrenSize() to count Element children\n                        Element el = doc.child(0); // Get the first element child\n                        // Create an XmlDeclaration node (which is a subtype of Node)\n                        // Pass the normalized tag name and whether it started with !\n                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                        // Copy the attributes from the parsed element to the XmlDeclaration node\n                        insert.attributes().addAll(el.attributes());\n                    }\n                    // If parsing failed to produce an element (e.g., <? > or malformed content),\n                    // the 'insert' node remains the original Comment, providing fallback behavior.\n                }\n            }\n        }\n        // Insert the determined node (either the original Comment or the created XmlDeclaration)\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}