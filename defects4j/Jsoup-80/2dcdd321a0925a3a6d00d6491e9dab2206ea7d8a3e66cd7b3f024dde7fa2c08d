{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                // grab markup content, may fail if not end >\n                // Example: data = \"?xml version='1.0'\" -> parseContent = \"xml version='1.0\"\n                String parseContent = data.substring(1, data.length() - 1);\n                // Avoid parsing empty strings like \"<>\" which result in doc with no children\n                if (!parseContent.trim().isEmpty()) {\n                    // Use the current document's base uri but a fresh parser.\n                    // Disable error tracking during this hypothetical parse to avoid polluting main parse errors.\n                    Parser parser = Parser.xmlParser().setTrackErrors(0);\n                    Document doc = parser.parseInput(\"<\" + parseContent + \">\", baseUri);\n\n                    // Check if parsing produced a root element. It might not if content is invalid,\n                    // e.g. parsing \"<>\" results in an empty doc.children list.\n                    if (!doc.children().isEmpty()) {\n                        Element el = doc.child(0); // Safely access the first element child\n                        // Create XmlDeclaration with normalized name and attributes extracted from the parsed element\n                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                        insert.attributes().addAll(el.attributes());\n                    }\n                    // else: parsing failed to produce an element (e.g., from \"<>\"),\n                    // keep 'insert' as the original Comment node.\n                }\n                // else: parseContent was empty or whitespace, keep 'insert' as the original Comment node.\n            }\n        }\n        insertNode(insert);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}