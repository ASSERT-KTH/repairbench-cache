{
    "generation": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  Class<?> value = annotation.value();\n  Object instance;\n  if (TypeAdapter.class.isAssignableFrom(value)) {\n    Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n    instance = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    // Use as-is; will add .nullSafe() below if non-null\n  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n    Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n    TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();\n    instance = factory.create(gson, fieldType);\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n  TypeAdapter<?> typeAdapter = (TypeAdapter<?>) instance;\n  if (typeAdapter != null && annotation.nullSafe()) {\n    typeAdapter = typeAdapter.nullSafe();\n  }\n  return typeAdapter;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}