{
    "generation": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  Class<?> value = annotation.value();\n  Object instance;\n  if (TypeAdapter.class.isAssignableFrom(value)) {\n    Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n    instance = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    if (!(instance instanceof TypeAdapter)) {\n      throw new IllegalArgumentException(\"@JsonAdapter value must be a TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    TypeAdapter<?> typeAdapter = (TypeAdapter<?>) instance;\n    return annotation.nullSafe() ? typeAdapter.nullSafe() : typeAdapter;\n  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n    Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n    instance = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();\n    if (!(instance instanceof TypeAdapterFactory)) {\n      throw new IllegalArgumentException(\"@JsonAdapter value must be a TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    TypeAdapter<?> typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);\n    if (typeAdapter != null && annotation.nullSafe()) {\n      return typeAdapter.nullSafe();\n    }\n    return typeAdapter;\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}