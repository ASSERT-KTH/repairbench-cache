{
    "generation": "@SuppressWarnings(\"unchecked\")\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  Class<?> value = annotation.value();\n  if (TypeAdapter.class.isAssignableFrom(value)) {\n    Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n    TypeAdapter<?> typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    return typeAdapter.nullSafe();\n  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n    Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n    TypeAdapter<?> typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n        .construct()\n        .create(gson, fieldType);\n    if (typeAdapter != null) {\n      return typeAdapter;\n    }\n  }\n  throw new IllegalArgumentException(\n      \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}