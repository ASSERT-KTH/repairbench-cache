{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      // Get the factory instance and create the TypeAdapter.\n      // The create() method can return null if the factory does not support the type.\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n          .construct()\n          .create(gson, fieldType);\n    } else {\n      // Consider throwing a more specific error if value is JsonSerializer or JsonDeserializer,\n      // depending on the Gson version and features supported.\n      // Based on the provided snippet, only TypeAdapter and TypeAdapterFactory are checked.\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n\n    // Add a null check before calling nullSafe().\n    // If the factory's create() method returned null, typeAdapter will be null here.\n    // In that case, we should return null, indicating that the @JsonAdapter did not provide an adapter.\n    if (typeAdapter != null) {\n      // Apply the nullSafe wrapper unless the user specified nullSafe=false (if supported by the JsonAdapter annotation version)\n      // Assuming the original behavior (always apply nullSafe) or nullSafe=true is default.\n      typeAdapter = typeAdapter.nullSafe();\n    }\n    return typeAdapter;\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}