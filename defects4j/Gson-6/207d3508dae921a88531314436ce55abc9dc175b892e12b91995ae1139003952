{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      // Attempt to construct the TypeAdapter instance.\n      // ConstructorConstructor.construct() generally throws an exception if construction fails,\n      // but if it somehow returns null, we must handle it to prevent NullPointerException later.\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n      if (typeAdapter == null) {\n        throw new IllegalArgumentException(\"'\" + value.getName() + \"' specified in @JsonAdapter is a TypeAdapter but its constructor returned null.\");\n      }\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactoryClass = (Class<TypeAdapterFactory>) value;\n      // Attempt to construct the TypeAdapterFactory instance.\n      // Similar to TypeAdapter construction, if construct() returns null, it's an issue.\n      TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactoryClass)).construct();\n      if (factory == null) {\n        throw new IllegalArgumentException(\"'\" + value.getName() + \"' specified in @JsonAdapter is a TypeAdapterFactory but its constructor returned null.\");\n      }\n      // Attempt to create the TypeAdapter using the factory.\n      // TypeAdapterFactory.create() can legitimately return null if it doesn't support the type.\n      // However, if a factory is explicitly specified via @JsonAdapter, it is expected to provide\n      // an adapter for the annotated type/field. If it returns null, it's a configuration error.\n      typeAdapter = factory.create(gson, fieldType);\n      if (typeAdapter == null) {\n        throw new IllegalArgumentException(\n            \"'\" + value.getName() + \"' specified in @JsonAdapter is a TypeAdapterFactory, but it did not create a TypeAdapter for \" + fieldType + \". Ensure the factory supports this type.\");\n      }\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    \n    // At this point, 'typeAdapter' is guaranteed to be non-null if no exceptions were thrown above.\n    // So, it's safe to call nullSafe() on it.\n    typeAdapter = typeAdapter.nullSafe();\n    return typeAdapter;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}