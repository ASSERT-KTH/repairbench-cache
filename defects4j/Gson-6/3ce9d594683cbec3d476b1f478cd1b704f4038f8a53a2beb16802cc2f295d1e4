{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n          .construct()\n          .create(gson, fieldType);\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    // The @JsonAdapter annotation has a 'nullSafe' field (defaulting to true)\n    // which indicates whether Gson should automatically handle nulls.\n    // If 'nullSafe' is false, the user's adapter is responsible for nulls.\n    // Therefore, typeAdapter.nullSafe() should only be called if annotation.nullSafe() is true.\n    if (annotation.nullSafe()) {\n      typeAdapter = typeAdapter.nullSafe();\n    }\n    return typeAdapter;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}