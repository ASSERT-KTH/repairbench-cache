{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactoryClass = (Class<TypeAdapterFactory>) value;\n      TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactoryClass)).construct();\n      typeAdapter = factory.create(gson, fieldType);\n      // If the TypeAdapterFactory specified by @JsonAdapter returns null,\n      // it means this factory could not provide an adapter for the given fieldType.\n      // This is a configuration error when the factory is explicitly chosen via @JsonAdapter.\n      if (typeAdapter == null) {\n        throw new IllegalArgumentException(\n            \"'\" + typeAdapterFactoryClass.getName() + \"' failed to create a TypeAdapter for '\" + fieldType + \"'. \"\n            + \"This indicates a configuration issue with the @JsonAdapter annotation.\");\n      }\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n\n    // The @JsonAdapter annotation has a 'nullSafe' member which defaults to true.\n    // We should only call typeAdapter.nullSafe() if this flag is true.\n    // The original code unconditionally called nullSafe(), which is incorrect\n    // if annotation.nullSafe() was false, and could lead to NullPointerException\n    // if typeAdapter was null from TypeAdapterFactory.create().\n    if (annotation.nullSafe()) {\n      typeAdapter = typeAdapter.nullSafe();\n    }\n    return typeAdapter;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}