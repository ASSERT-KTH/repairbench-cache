{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();\n      typeAdapter = factory.create(gson, fieldType);\n      // If a TypeAdapterFactory specified by @JsonAdapter returns null,\n      // it indicates that the factory cannot handle the given fieldType.\n      // Since @JsonAdapter explicitly requests this factory, this situation\n      // should be treated as an error, not a fallback, as Gson expects the\n      // annotated factory to provide an adapter.\n      if (typeAdapter == null) {\n        throw new IllegalArgumentException(\n            \"'\" + value.getName() + \"' specified in @JsonAdapter \"\n                + \"cannot handle type '\" + fieldType + \"'. Consider using a custom TypeAdapter \"\n                + \"or TypeAdapterFactory that supports the field type.\");\n      }\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    // The NullPointerException occurs when typeAdapter is null at this point,\n    // which is now prevented by the check above for TypeAdapterFactory,\n    // or by constructorConstructor throwing an exception if construction fails\n    // for a direct TypeAdapter.\n    typeAdapter = typeAdapter.nullSafe();\n    return typeAdapter;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}