{
    "generation": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  Class<?> value = annotation.value();\n  TypeAdapter<?> typeAdapter;\n\n  // Instantiate the user\u2010supplied class (either a TypeAdapter or a TypeAdapterFactory)\n  Object instance = constructorConstructor\n      .get(TypeToken.get((Class<?>) value))\n      .construct();\n\n  if (instance instanceof TypeAdapter) {\n    typeAdapter = (TypeAdapter<?>) instance;\n  } else if (instance instanceof TypeAdapterFactory) {\n    typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n\n  // If the factory returned null, skip this adapter and let Gson fall back\n  if (typeAdapter == null) {\n    return null;\n  }\n\n  // Honor the nullSafe flag on the annotation\n  return annotation.nullSafe() ? typeAdapter.nullSafe() : typeAdapter;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}