{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n          .construct()\n          .create(gson, fieldType);\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n\n    // The NullPointerException likely occurs here if 'typeAdapter' is null,\n    // which can happen if 'constructorConstructor.get(...).construct()' or\n    // 'TypeAdapterFactory.create()' returns null.\n    // While TypeAdapterFactory.create() can legitimately return null to indicate\n    // it doesn't handle a type, for an adapter specified via @JsonAdapter,\n    // it is expected to provide a concrete TypeAdapter.\n    // If it returns null, it indicates a misconfiguration or an issue with the\n    // provided TypeAdapter/TypeAdapterFactory.\n    if (typeAdapter == null) {\n      throw new IllegalStateException(\n          \"TypeAdapter or TypeAdapterFactory specified by @JsonAdapter \"\n          + \"for \" + fieldType + \" returned null. \"\n          + \"This is not supported; you must return a non-null TypeAdapter.\");\n    }\n\n    typeAdapter = typeAdapter.nullSafe();\n    return typeAdapter;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}