{
    "generation": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(\n    ConstructorConstructor constructorConstructor,\n    Gson gson,\n    TypeToken<?> fieldType,\n    JsonAdapter annotation) {\n\n  Class<?> value = annotation.value();\n  TypeAdapter<?> typeAdapter;\n\n  if (TypeAdapter.class.isAssignableFrom(value)) {\n    // annotation specifies a TypeAdapter\n    Class<? extends TypeAdapter<?>> adapterClass =\n        (Class<? extends TypeAdapter<?>>) value;\n    typeAdapter = constructorConstructor\n        .get(TypeToken.get(adapterClass))\n        .construct();\n  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n    // annotation specifies a TypeAdapterFactory\n    Class<? extends TypeAdapterFactory> factoryClass =\n        (Class<? extends TypeAdapterFactory>) value;\n    TypeAdapterFactory factory = constructorConstructor\n        .get(TypeToken.get(factoryClass))\n        .construct();\n    typeAdapter = factory.create(gson, fieldType);\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n\n  // If the factory returned null, let Gson fall back to its default adapter\n  if (typeAdapter == null) {\n    return null;\n  }\n\n  // Honor the annotation's nullSafe flag\n  return annotation.nullSafe()\n      ? typeAdapter.nullSafe()\n      : typeAdapter;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}