{
    "generation": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  // Instantiate the adapter or factory\n  Object instance = constructorConstructor\n      .get(TypeToken.get((Class<?>) annotation.value()))\n      .construct();\n\n  // Figure out if it's a TypeAdapter or a TypeAdapterFactory\n  TypeAdapter<?> typeAdapter;\n  if (instance instanceof TypeAdapter) {\n    typeAdapter = (TypeAdapter<?>) instance;\n  } else if (instance instanceof TypeAdapterFactory) {\n    typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n\n  // Honor the nullSafe flag on the annotation\n  return annotation.nullSafe() ? typeAdapter.nullSafe() : typeAdapter;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}