{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactoryClass = (Class<TypeAdapterFactory>) value;\n      TypeAdapterFactory factory = constructorConstructor.get(TypeToken.get(typeAdapterFactoryClass))\n          .construct();\n      typeAdapter = factory.create(gson, fieldType);\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    // TypeAdapter.nullSafe() can only be called on a non-null TypeAdapter instance.\n    // If `typeAdapter` is null at this point (e.g., if the TypeAdapterFactory.create method\n    // returned null, or if the constructorConstructor failed to instantiate the adapter/factory),\n    // calling `nullSafe()` would result in a NullPointerException.\n    // The explicit @JsonAdapter annotation implies that an adapter should be found.\n    // However, to prevent the NPE, we must check for null. If typeAdapter is null,\n    // it signifies that the specified TypeAdapter or TypeAdapterFactory could not\n    // produce a TypeAdapter for the given fieldType. In such cases, Gson's calling context\n    // typically handles `null` by falling back to other adapter discovery mechanisms.\n    if (typeAdapter != null) {\n      typeAdapter = typeAdapter.nullSafe();\n    }\n    return typeAdapter;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}