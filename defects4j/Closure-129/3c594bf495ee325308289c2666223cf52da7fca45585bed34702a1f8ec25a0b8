{
    "generation": "    /**\n     * There are two types of calls we are interested in: calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct calls to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      Node first = n.getFirstChild(); // This is the callee node (e.g., GETPROP, GETELEM, NAME, CAST, COMMA).\n\n      // Unwrap cast nodes to find the true callee.\n      // The \"this\" context and directness of eval calls depend on the expression\n      // *inside* the cast, not the cast itself.\n      Node callee = first;\n      if (callee.isCast()) {\n        callee = callee.getFirstChild();\n      }\n\n      // Keep track of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      // Free calls are those where the callee is not a GETPROP or GETELEM.\n      // This applies to calls like \"foo()\" or \"(0,foo)()\" but not \"obj.foo()\" or \"obj['foo']()\".\n      if (!NodeUtil.isGet(callee)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // We are interested in \"direct\" calls to eval, which means the callee\n      // itself is the 'eval' name, potentially wrapped in a cast.\n      if (callee.isName() && \"eval\".equals(callee.getString())) {\n        callee.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}