{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of the \"this\" context of a call. A call without an\n      // explicit \"this\" is a free call.\n      // We need to look through cast nodes to find the actual function expression.\n      Node first = n.getFirstChild();\n      Node functionExpression = NodeUtil.skipCasts(first);\n\n      // A free call is when the function being called is not a GETPROP or GETELEM.\n      // For example, `foo()` is a free call, but `obj.foo()` or `obj['foo']()` are not.\n      // The `FREE_CALL` property should be set on the CALL node itself.\n      if (!NodeUtil.isGet(functionExpression)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // The `DIRECT_EVAL` property should be set on the NAME node 'eval'.\n      if (functionExpression.isName() &&\n          \"eval\".equals(functionExpression.getString())) {\n        functionExpression.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}