{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // The comment \"ignore cast nodes\" implies that when determining the \"this\"\n      // context for a call, we should look through CAST nodes, as they only\n      // provide type information and do not alter the 'this' context of the\n      // underlying expression.\n      Node callTargetForThisCheck = first;\n      while (callTargetForThisCheck.isCast()) {\n        callTargetForThisCheck = callTargetForThisCheck.getFirstChild();\n      }\n\n      // If the effective call target is not a GETPROP or GETELEM, it's a free call.\n      // For example, `foo()`, `(0, foo)()`, `(/** @type {function()} */ foo)()`.\n      // It's not a free call if it's like `obj.foo()` or `obj['foo']()`.\n      if (!NodeUtil.isGet(callTargetForThisCheck)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A \"direct eval\" specifically refers to the call `eval()`.\n      // If the function being called is not simply the name \"eval\" (e.g., it's a\n      // casted expression like `(/** @type {function()} */ eval)()`, or a\n      // comma expression `(0, eval)()`), it's not a direct eval.\n      // Therefore, we check `first` directly without looking through CAST nodes\n      // for the `DIRECT_EVAL` property.\n      if (first.isName() && \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}