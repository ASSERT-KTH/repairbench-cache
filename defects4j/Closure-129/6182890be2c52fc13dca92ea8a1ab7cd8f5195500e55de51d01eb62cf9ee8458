{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // Find the real function node. Skip casts.\n      Node callee = first;\n      while (callee.isCast()) {\n        callee = callee.getFirstChild();\n      }\n\n      // A call is a free call if the function expression is not a property\n      // access node.\n      // Examples:\n      //   foo()\n      //   (0, foo)()\n      //   (function () {})();\n      // Cases that are not free calls:\n      //   obj.foo()\n      //   obj['foo']()\n      //   (new Foo).bar()\n      if (!NodeUtil.isGet(callee)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct call to eval is needed to trigger the direct eval warning.\n      // Note: Calls like \"foo.eval()\" are not direct calls.\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}