{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of the \"this\" context of a call. A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      Node callTarget = first;\n\n      // Unpack the call target if it's a CAST node. A CAST node does not\n      // change the \"this\" context of the call; the 'this' value is determined\n      // by the expression being cast.\n      if (first.isCast()) {\n        callTarget = first.getFirstChild();\n      }\n\n      // A call is considered \"free\" if the expression representing the function\n      // being called is not a GETPROP (obj.method) or GETELEM (obj['method']).\n      // In such cases, the 'this' context is not explicitly bound to an object.\n      if (!NodeUtil.isGet(callTarget)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // This check also needs to consider the unwrapped callTarget.\n      if (callTarget.isName() &&\n          \"eval\".equals(callTarget.getString())) {\n        // The DIRECT_EVAL flag is applied to the 'eval' NAME node itself,\n        // not the CALL node, to distinguish it from indirect eval calls\n        // like (0, eval)().\n        callTarget.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}