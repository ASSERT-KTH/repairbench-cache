{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // If the function expression is enclosed in a cast, look inside the cast\n      // to determine the nature of the function expression.\n      Node functionExpr = first;\n      if (functionExpr.isCast()) {\n        functionExpr = functionExpr.getFirstChild();\n      }\n\n      // A call is a free call if the function expression is not a property access\n      // (i.e., not foo.bar() or foo['bar']()). Casts have already been unwrapped.\n      if (!NodeUtil.isGet(functionExpr)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct eval call is the NAME 'eval' itself, potentially after unwrapping casts.\n      if (functionExpr.isName() &&\n          \"eval\".equals(functionExpr.getString())) {\n        // Mark the NAME node as a direct eval reference.\n        functionExpr.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}