{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // The \"this\" context depends on the actual function expression being called.\n      // We need to look through nodes that merely wrap this expression,\n      // such as CAST nodes, to determine if it's a GET_PROP or GETELEM.\n      Node contextDeterminingTarget = first;\n      while (contextDeterminingTarget.isCast()) {\n          contextDeterminingTarget = contextDetermisingTarget.getFirstChild();\n      }\n\n      if (!NodeUtil.isGet(contextDeterminingTarget)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // The DIRECT_EVAL property is specific to the direct syntax of the call.\n      // For instance, a cast around 'eval' makes it an indirect call.\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}