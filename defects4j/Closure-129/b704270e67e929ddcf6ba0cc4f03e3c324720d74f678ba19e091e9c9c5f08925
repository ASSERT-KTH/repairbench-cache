{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // ignore cast nodes.\n      boolean isFreeCall = true;\n      Node target = first;\n\n      // Skip through cast nodes\n      while (target.isCast()) {\n        target = target.getFirstChild();\n      }\n\n      // If it's a GET node (property access), it's not a free call\n      if (NodeUtil.isGet(target) || target.isGetProp() || target.isGetElem()) {\n        isFreeCall = false;\n      } else if (target.isName()) {\n        // For simple names, we need to check if it's actually a free call\n        isFreeCall = true;\n      } else {\n        isFreeCall = false;\n      }\n\n      n.putBooleanProp(Node.FREE_CALL, isFreeCall);\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}