{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // The first child of a CALL node is the function being called.\n      Node first = n.getFirstChild();\n\n      // We need to look through CAST nodes to find the actual function being called\n      // to correctly determine if it's a free call or a direct eval call.\n      // The comment \"ignore cast nodes\" implies this.\n      Node targetCall = first;\n      while (targetCall.isCast()) {\n        targetCall = targetCall.getFirstChild();\n      }\n\n      // Keep track of the \"this\" context of a call. A call without an\n      // explicit \"this\" is a free call.\n      // A call is free if the target function is not a GET_PROP or GET_ELEM,\n      // meaning it's not a method call with an explicit 'this' context.\n      if (!NodeUtil.isGet(targetCall)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct eval call is when 'eval' is called directly by its name.\n      if (targetCall.isName() &&\n          \"eval\".equals(targetCall.getString())) {\n        targetCall.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}