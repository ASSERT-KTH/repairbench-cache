{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node firstChild = n.getFirstChild();\n      Node functionExpr = firstChild;\n\n      // ignore cast nodes. Find the real function expression.\n      while (functionExpr.isCast()) {\n        functionExpr = functionExpr.getFirstChild();\n      }\n\n      // A call without an explicit \"this\" is a free call.\n      // A call on a GETPROP or GETELEM has an explicit this.\n      if (!NodeUtil.isGet(functionExpr)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct call to eval is calligraphy of the form eval(...).\n      // Check the unwrapped function expression.\n      if (functionExpr.isName() &&\n          \"eval\".equals(functionExpr.getString())) {\n        // Mark the actual NAME node as a direct eval call.\n        functionExpr.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}