{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // The first child of a CALL node is the function expression.\n      Node functionExpression = n.getFirstChild();\n\n      // Look through cast nodes to find the actual function being called.\n      // For example, if the call is `(/** @type {function()} */ (foo))()`,\n      // `functionExpression` would be the CAST node. We need to look inside it\n      // to find `foo`.\n      Node callTarget = functionExpression;\n      while (callTarget.isCast()) {\n        callTarget = callTarget.getFirstChild();\n      }\n\n      // Keep track of the \"this\" context of a call. A call without an\n      // explicit \"this\" is a free call.\n      // A call is \"free\" if its target is not a GETPROP or GETELEM.\n      // For instance, `foo()` is free, but `obj.foo()` or `obj['foo']()` are not.\n      if (!NodeUtil.isGet(callTarget)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct eval call is when the function being called is a simple `eval` name.\n      if (callTarget.isName() && \"eval\".equals(callTarget.getString())) {\n        // Mark the 'eval' name node itself as a direct eval call target.\n        callTarget.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}