{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // A call is free if the callee is not a GETPROP or GETELEM.\n      // This correctly identifies obj.foo() and obj['foo']() as non-free calls.\n      // NOTE: This may incorrectly classify calls like (obj.foo)() as non-free\n      // if the AST structure for parenthesized expressions is identical to\n      // direct member calls. Also, calls where the callee is determined by\n      // operators like comma (e.g., (0, obj.foo)()) are correctly marked as free\n      // because the first child is COMMA, not GETPROP. Casts might also affect\n      // this if they introduce wrapper nodes. If CAST nodes wrap GETPROP/GETELEM,\n      // this logic correctly marks the call as free because first child is CAST.\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n      // If the first child is a GETPROP or GETELEM, FREE_CALL remains\n      // false (the default), indicating a non-free call.\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // NOTE: This check also might not distinguish eval() from (eval)() if\n      // the AST structure is identical. It correctly marks eval() as direct\n      // and (0, eval)() as indirect (because first child is COMMA).\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        // Annotate the NAME node 'eval' to indicate it represents a direct call\n        // target. Checking code relies on the NAME node having this property.\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}