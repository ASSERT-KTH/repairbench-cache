{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      Node functionExpr = first;\n\n      // Ignore cast nodes when determining the call type. A cast represents a type annotation,\n      // not a change in the function expression itself for determining 'this'.\n      // For example, /** @type {function()} */ (foo.bar)() should not be a free call.\n      if (functionExpr.isCast()) {\n          functionExpr = functionExpr.getFirstChild();\n      }\n\n      // A call is a free call if the function expression is not a GETPROP or GETELEM.\n      // Examples of non-free calls:\n      // obj.method() -> first child is GETPROP\n      // obj['method']() -> first child is GETELEM\n      // (expr).method() -> first child is GETPROP\n      // (/** @type {function()} */ (obj.method))() -> functionExpr is GETPROP after skipping CAST\n      //\n      // Examples of free calls:\n      // foo() -> first child is NAME\n      // (function() {})() -> first child is FUNCTION\n      // (0, foo)() -> first child is COMMA\n      if (!NodeUtil.isGet(functionExpr)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct eval call is needed for determining the scope of variables declared\n      // within the eval'd code. Only direct calls to the global eval function modify\n      // the local scope. Calls like x.eval(), (0, eval)(), etc., are indirect and\n      // execute in the global scope.\n      // We only annotate the NAME node \"eval\" if it appears directly as the function\n      // to be called (the first child of CALL). Casts are not ignored here, as\n      // (/** @type {function()} */ eval)() is not considered a direct eval call by EcmaScript spec.\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}