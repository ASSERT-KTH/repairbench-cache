{
    "generation": "    /**\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     */\n    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // Unwrap cast nodes to find the actual function being called.\n      // For example, in `(/** @type {function()} */ (foo))()`, the function\n      // being called is 'foo', not the CAST node itself.\n      Node functionNode = first;\n      while (functionNode.isCast()) {\n        functionNode = functionNode.getFirstChild();\n      }\n\n      // If the function being called is not a GETPROP (obj.method) or GETELEM (obj['method']),\n      // then it's considered a free call.\n      if (!NodeUtil.isGet(functionNode)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      // A direct eval call is when 'eval' is the name node directly being called,\n      // not accessed via a property or through a comma expression.\n      if (functionNode.isName() &&\n          \"eval\".equals(functionNode.getString())) {\n        functionNode.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}