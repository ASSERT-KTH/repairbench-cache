{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        // The original problem is that text nodes found outside the body (e.g., in the root Document)\n        // are moved to the *end* of the body using appendChild.\n        // The tests, and Jsoup's expected behavior, require these nodes to be moved to the *beginning*\n        // of the body, while preserving their original relative order.\n        //\n        // To move elements to the beginning while preserving order, iterate the list in reverse\n        // and use prependChild.\n\n        for (int i = toMove.size() - 1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            element.removeChild(node);\n\n            // The original code added a space TextNode *before* appending the actual node.\n            // If we are prepending, and we want the space to appear *after* the moved node\n            // in the flow (i.e., node space existing_content), we first prepend the node,\n            // then prepend the space. This will result in [space, node, existing_content].\n            // This setup makes 'node' effectively first, followed by a space.\n            // doc.text() normalises whitespace, so `foo  bar` becomes `foo bar`.\n            body().prependChild(new TextNode(\" \", \"\")); // Add space before (in final order, after) the moved node.\n            body().prependChild(node); // Prepend the actual text node.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}