{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        // Iterate in reverse order because we are prepending.\n        // Prepending A then B results in B A.\n        // To achieve A B, we must prepend B first, then A.\n        // So if collected nodes are [n1, n2, n3], we prepend n3, then n2, then n1.\n        for (int i = toMove.size() - 1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            element.removeChild(node); // Remove the node from its current parent (e.g., the Document root)\n            // The original code added a space before appending. This is not desired when\n            // prepending content to the start of the body; Jsoup's text() method handles\n            // natural spacing between block and inline elements.\n            body().prependChild(node); // Add the node to the start of the body\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}