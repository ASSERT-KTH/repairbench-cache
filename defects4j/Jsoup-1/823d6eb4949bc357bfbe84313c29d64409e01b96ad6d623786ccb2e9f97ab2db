{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        // 1. Find non-blank text nodes to move.\n        // We iterate over a copy of the child nodes list, so removing nodes during iteration is safe.\n        for (Node node: element.childNodes()) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                // Check if the text node contains non-whitespace characters.\n                if (!tn.isBlank())\n                    toMove.add(node); // Add the node to the list of nodes to be moved.\n            }\n            // Note: This implementation only considers TextNodes for moving.\n            // Depending on the broader context, other node types (e.g., comments)\n            // found outside the body might also need normalization.\n        }\n\n        // 2. Move the collected nodes to the start of the body element.\n        // Iterate backwards through the list of nodes to move. This ensures that\n        // when prepended one by one, they end up in their original relative order\n        // at the beginning of the body.\n        // E.g., if toMove is [\"foo\", \"bar\"], first \"bar\" is prepended, then \"foo\"\n        // is prepended, resulting in body children starting with [\"foo\", \"bar\"].\n        for (int i = toMove.size() - 1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            // Remove the node from its original parent ('element').\n            element.removeChild(node);\n            // Prepend the node to the beginning of the document's body element.\n            // body() is assumed to return the correct body element.\n            body().prependChild(node);\n            // The original buggy code appended a space and then the node to the *end*\n            // of the body. This fix moves the node to the *beginning* and omits\n            // the questionable space addition, as the primary issue was the location.\n            // Spacing around the moved nodes should ideally be handled by the\n            // structure or later processing like text extraction.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}