{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        // The test `createsStructureFromBodySnippet` indicates that root-level text nodes\n        // (like \"foo\" in \"foo <b>bar</b> baz\") need to be moved to the *start* of the body.\n        // The original code appended these nodes, leading to an incorrect order.\n        //\n        // To move nodes to the start of the list while preserving their original order,\n        // it's necessary to process them in reverse order when prepending.\n        Collections.reverse(toMove);\n\n        for (Node node: toMove) {\n            element.removeChild(node);\n            // The original code appended a space TextNode before appending the actual node.\n            // When moving to the *start* of the body, this explicit space is often unnecessary\n            // as Jsoup's .text() method typically handles inter-element spacing correctly\n            // (e.g., between a prepended text node and an existing element).\n            // Removing this line simplifies the logic and matches the expected output for the failing test.\n            // body().appendChild(new TextNode(\" \", \"\")); // Removed problematic space insertion\n            body().prependChild(node); // Move to the start of the body\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}