{
    "generation": "    // Recursively normalizes the element's children, moving non-blank text nodes to the body.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node : element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank()) {\n                    toMove.add(tn);\n                }\n            } else if (node instanceof Element) {\n                normalise((Element) node); // Recurse into child elements\n            }\n        }\n\n        // Move non-blank text nodes to the body\n        for (Node node : toMove) {\n            element.removeChild(node);\n            body().appendChild(node); // Directly append without adding extra space\n        }\n\n        // Add a space between text nodes if there are multiple\n        if (toMove.size() > 1) {\n            for (int i = 1; i < toMove.size(); i++) {\n                body().appendChild(new TextNode(\" \", \"\"));\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}