{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        // Create a new list containing both text nodes and document type nodes (if any)\n        // because document type nodes should also be moved to the body if present\n        List<Node> allToMove = new ArrayList<Node>();\n        for (Node node : element.childNodes) {\n            if (node instanceof TextNode || node.nodeName().equals(\"#doctype\")) {\n                allToMove.add(node);\n            }\n        }\n\n        if (!allToMove.isEmpty()) {\n            for (Node node : allToMove) {\n                element.removeChild(node);\n            }\n            // Add all nodes to the body in their original order\n            for (Node node : allToMove) {\n                if (node instanceof TextNode || node.nodeName().equals(\"#doctype\")) {\n                    body().insertChildren(0, Collections.singletonList(node));\n                }\n            }\n            // Add a space if needed (for textarea-like normalization)\n            if (!allToMove.isEmpty()) {\n                body().insertChildren(0, Collections.singletonList(new TextNode(\" \", \"\")));\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}