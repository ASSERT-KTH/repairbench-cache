{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        // The problem is that the original code moves text nodes to the end of the body\n        // and adds an extra space.\n        // The test case requires these nodes to be moved to the *start* of the body,\n        // and the output \"foo bar baz\" indicates no additional spaces should be introduced\n        // by this normalisation process.\n\n        // To move nodes to the start of the body while preserving their original order,\n        // we need to iterate the 'toMove' list in reverse order when prepending them.\n        // This ensures that the first node collected ends up as the first child in the body,\n        // the second as the second, and so on.\n        for (int i = toMove.size() - 1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            element.removeChild(node);\n            // The original code added a space before appending, which is not desired\n            // when prepending to the body's existing content or as the first content.\n            // body().appendChild(new TextNode(\" \", \"\")); // Removed\n            body().prependChild(node); // Changed from appendChild to prependChild\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}