{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> children = new ArrayList<Node>(element.childNodes()); // copy to avoid concurrent modification\n        for (int i = 0; i < children.size(); i++) {\n            Node node = children.get(i);\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank()) {\n                    element.removeChild(node);\n                    if (i > 0) {\n                        Node prevNode = children.get(i-1);\n                        element.insertChildren(element.childNodeIndex(prevNode) + 1, Collections.singletonList(tn));\n                    } else {\n                        element.prependChild(tn);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}