{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.internal.StringUtil;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport javax.annotation.Nullable;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Note: This is the containing class `FormElement`. Only the `formData` method needs to be fixed.\n// Assume other necessary methods and fields exist as in the original `FormElement` class.\n\npublic class FormElement extends Element {\n    // Assume necessary constructor and other fields/methods exist\n    // e.g., protected FormElement(Tag tag, String baseUri, Attributes attributes) { super(tag, baseUri, attributes); }\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the list will not\n     * be reflected in the DOM.\n     * <p>Uses the {@code data()} method on the {@link Connection} interface which is useful for simplified cases. For\n     * example, if you want to create a Connection from a form, you can just call {@link Connection#data(java.util.Collection)} using\n     * the form data.</p>\n     * <p>\n     * A side effect of calling this method is that and {@code input type=hidden} elements in the form will be implicitly\n     * added as key/value pairs.\n     * </p>\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // Select all descendant elements from the current DOM state within this form.\n        Elements els = this.select(\"*\");\n\n        for (Element el : els) {\n            if (!el.tag().isFormSubmittable()) continue; // Must be a form submittable element (input, select, textarea, button, object)\n            if (el.hasAttr(\"disabled\")) continue; // Skip disabled elements\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue; // Skip elements without a name\n\n            // Check if the element belongs to this form element, and not a nested form\n            // This check ensures that if the DOM is manipulated (e.g., element removed),\n            // we query the element's current parent form.\n            FormElement form = el.form();\n            if (form != null && form.equals(this)) {\n\n                String type = el.attr(\"type\");\n\n                if (\"select\".equals(el.tagName())) {\n                    Elements options = el.select(\"option[selected]\");\n                    boolean set = false;\n                    for (Element option : options) {\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                        set = true;\n                    }\n                    // No selected options, choose first option if exists, per spec\n                    if (!set) {\n                        Element option = el.selectFirst(\"option\");\n                        if (option != null)\n                            data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    }\n                } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                    // Only add checked checkboxes and radios\n                    if (el.hasAttr(\"checked\")) {\n                        // Use \"on\" if value attr is not present, per spec\n                        final String val = el.val().length() > 0 ? el.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                } else if (\"file\".equalsIgnoreCase(type)) {\n                    // Don't submit file input values (as the value is the filename, not content)\n                    // Keep behavior consistent with previous jsoup versions / browser behavior for form data collection.\n                    continue;\n                } else {\n                    // Handles input types: text, password, hidden, submit, image, etc.\n                    // Also handles button elements.\n\n                    // Exclude input type=button, button elements with type=button or type=reset\n                    final String tagName = el.tagName();\n                    if (tagName.equals(\"input\") && type.equalsIgnoreCase(\"button\")) {\n                        continue; // Skip input type=button\n                    }\n                    if (tagName.equals(\"button\")) {\n                         String buttonType = el.attr(\"type\").toLowerCase();\n                         // Buttons default to type=submit\n                         if (buttonType.equals(\"button\") || buttonType.equals(\"reset\")) {\n                             continue; // Skip button type=button and type=reset\n                         }\n                    }\n\n                    // Add all other valid inputs, including submit buttons with names\n                    data.add(HttpConnection.KeyVal.create(name, el.val()));\n                }\n            }\n        }\n        return data;\n    }\n\n    // Dummy HttpConnection class and KeyVal interface for compilation if needed standalone.\n    // In the actual jsoup library, these would be imported.\n    private static class HttpConnection {\n        static class KeyVal implements Connection.KeyVal {\n            private String key;\n            private String value;\n\n            static KeyVal create(String key, String value) {\n                KeyVal kv = new KeyVal();\n                kv.key = key;\n                kv.value = value;\n                return kv;\n            }\n            @Override public KeyVal key(String key) { this.key = key; return this; }\n            @Override public String key() { return key; }\n            @Override public KeyVal value(String value) { this.value = value; return this; }\n            @Override public String value() { return value; }\n            @Override public Connection.KeyVal inputStream(java.io.InputStream inputStream) { return this; /* Not implemented */ }\n            @Override public java.io.InputStream inputStream() { return null; /* Not implemented */ }\n            @Override public boolean hasInputStream() { return false; }\n            @Override public Connection.KeyVal contentType(String contentType) { return this; /* Not implemented */ }\n            @Override public String contentType() { return null; /* Not implemented */ }\n            @Override public String toString() { return key + \"=\" + value; }\n        }\n    }\n\n    // Assume base Element, Attributes, Tag classes exist or are imported.\n    // This is just to make the provided function syntactically plausible.\n    public FormElement(Tag tag, String baseUri, Attributes attributes) { super(tag, baseUri, attributes); }\n\n}\n\n// Assume base Element class provides select(String), form(), tag(), hasAttr(), attr(), val(), tagName(), selectFirst()\n// Assume Tag class provides isFormSubmittable()\n// Assume Attributes class exists\n// Assume Elements class exists and is iterable",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}