{
    "generation": "public class FormElement extends Element {\n    // ... existing code ...\n\n    public List<Element> elements() {\n        // Dynamically select form elements each time to reflect current DOM state\n        return select(\"input, select, textarea, button, fieldset\");\n    }\n\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // Iterate through the dynamically selected form elements\n        for (Element el : elements()) {\n            if (!el.tag().isFormSubmittable()) continue; // skip non-submittable elements\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled elements\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option : options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.selectFirst(\"option\");\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                if (el.hasAttr(\"checked\")) {\n                    data.add(HttpConnection.KeyVal.create(name, el.val().length() > 0 ? el.val() : \"on\"));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n\n    // ... rest of the class ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}