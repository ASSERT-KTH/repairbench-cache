{
    "generation": "@Override\npublic List<Connection.KeyVal> formData() {\n    // Remove invalid elements and update elements list before returning form data.\n    elements().removeIf(el -> !el.hasParent() || !el.parents().contains(this));\n    List<Connection.KeyVal> data = new ArrayList<>();\n    for (Element el : elements()) {\n        if (el.tag().isFormSubmittable() && !el.hasAttr(\"disabled\")) {\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option : options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.selectFirst(\"option\");\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (!\"radio\".equalsIgnoreCase(type) && !\"checkbox\".equalsIgnoreCase(type)) {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            } else if (el.hasAttr(\"checked\")) {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n    }\n    return data;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}