{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.HttpConnection; // Assuming KeyVal impl is here or similar static factory method exists\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Assuming this method is part of the org.jsoup.nodes.FormElement class\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the list will not\n     * be reflected in the DOM.\n     * @return a list of key val pairs, corresponding to controls on the form.\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // Select the form controls that are descendants of this form element in the current DOM.\n        // This ensures that elements removed from the DOM are not included, fixing the bug.\n        Elements controls = select(\"input, select, textarea, button\"); // Select only relevant form controls\n\n        for (Element el: controls) {\n            // Basic validation: must have a name and not be disabled.\n            if (!el.hasAttr(\"name\")) continue;\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            if (el.hasAttr(\"disabled\")) continue;\n\n            String tagName = el.tagName();\n            String type = el.attr(\"type\");\n\n            // Handle different control types according to HTML form submission rules:\n            if (\"button\".equals(tagName)) {\n                 // Buttons are submitted only if type=submit (default) or type=image.\n                 // type=button and type=reset are not submitted.\n                if (type.equalsIgnoreCase(\"button\") || type.equalsIgnoreCase(\"reset\")) {\n                    continue;\n                }\n                // Create a KeyVal for the button's name and value (text content).\n                // If type=image, coordinates would also be sent in a real submission,\n                // but formData() typically represents the static data. We can add name=value.\n                // If type=image, also add coordinates (defaulting to 0,0 as Jsoup doesn't simulate clicks)\n                if (type.equalsIgnoreCase(\"image\")) {\n                     if (el.hasAttr(\"value\")) // Add name=value if value attribute is present\n                        data.add(HttpConnection.KeyVal.create(name, el.attr(\"value\")));\n                     data.add(HttpConnection.KeyVal.create(name + \".x\", \"0\"));\n                     data.add(HttpConnection.KeyVal.create(name + \".y\", \"0\"));\n                 } else { // type=submit or missing/invalid type\n                    data.add(HttpConnection.KeyVal.create(name, el.val())); // Use val() which gets text content for button\n                }\n\n            } else if (\"select\".equals(tagName)) {\n                boolean multiple = el.hasAttr(\"multiple\");\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                // If no option selected and not a multi-select, submit the first option's value per HTML spec\n                if (!set && !multiple) {\n                    Element firstOption = el.selectFirst(\"option\");\n                    if (firstOption != null) {\n                        data.add(HttpConnection.KeyVal.create(name, firstOption.val()));\n                    }\n                }\n\n            } else if (\"input\".equals(tagName)) {\n                // Handle various input types\n                if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                    // Only submit if checked\n                    if (el.hasAttr(\"checked\")) {\n                        String val = el.val().length() > 0 ? el.val() : \"on\"; // Default value is \"on\" if value attribute omitted\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                } else if (\"file\".equalsIgnoreCase(type)) {\n                    // Submit filename if value is set, otherwise empty string.\n                    // Actual file content requires Connection#data(KeyVal) with InputStream.\n                    data.add(HttpConnection.KeyVal.create(name, el.val()));\n                } else if (\"submit\".equalsIgnoreCase(type)) {\n                    // Include submit button's name=value if it has a non-empty value.\n                    // In real submission, only the clicked button is sent. formData() often includes all.\n                    if (el.val().length() > 0)\n                      data.add(HttpConnection.KeyVal.create(name, el.val()));\n                } else if (\"image\".equalsIgnoreCase(type)) {\n                    // input type=\"image\" sends name=value (if value attr present) and coordinates x, y\n                     if (el.hasAttr(\"value\"))\n                        data.add(HttpConnection.KeyVal.create(name, el.attr(\"value\")));\n                    // Add coordinates, defaulting to 0,0\n                    data.add(HttpConnection.KeyVal.create(name + \".x\", \"0\"));\n                    data.add(HttpConnection.KeyVal.create(name + \".y\", \"0\"));\n                } else if (\"reset\".equalsIgnoreCase(type) || \"button\".equalsIgnoreCase(type)) {\n                    // input type=reset and type=button are not submitted\n                    continue;\n                }\n                else {\n                    // Includes text, password, hidden, email, number, date, etc.\n                    data.add(HttpConnection.KeyVal.create(name, el.val()));\n                }\n\n            } else if (\"textarea\".equals(tagName)) {\n                // Textareas value is its content\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n            // Other tags (like object, keygen - though deprecated/unsupported) are ignored.\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}