{
    "generation": "@Override\npublic List<Connection.KeyVal> formData() {\n    List<Connection.KeyVal> formData = new ArrayList<>();\n\n    for (Element el : this.children()) {\n        if (!el.hasAttr(\"disabled\")) {\n            if (el.tag() instanceof FormElement) {\n                // recurse children if a form element (i.e. inputs within nested forms)\n                for (Connection.KeyVal subData : ((FormElement) el).formData()) {\n                    formData.add(subData);\n                }\n            } else if (el instanceof FormElement) {\n                // pass on non-disabled children elements that are not nested in a form (i.e. elements within this form)\n                formData.addAll(((FormElement) el).formData());\n            } else {\n                if (el.hasAttr(\"name\")) {\n                    String name = el.attr(\"name\");\n                    if (name.length() == 0) continue;\n                    String value = el.hasAttr(\"value\") ? el.attr(\"value\") : \"\";\n                    if (el.tag().getName().equals(\"select\")) {\n                        Elements options = el.select(\"option[selected]\");\n                        boolean set = false;\n                        for (Element option : options) {\n                            String val = option.attr(\"value\");\n                            if (val.isEmpty()) val = option.text();\n                            formData.add(Connection.KeyVal.create(name, val));\n                            set = true;\n                        }\n                        if (!set && options.size() == 0) { // the form spec requires that the first unset option be used\n                            Element option = el.select(\"option\").first();\n                            if (option != null) {\n                                String val = option.attr(\"value\");\n                                if (val.isEmpty()) val = option.text();\n                                formData.add(Connection.KeyVal.create(name, val));\n                            }\n                        }\n                    } else if (el.tag().getName().equals(\"input\") && el.attr(\"type\").equalsIgnoreCase(\"checkbox\")) {\n                        if (el.hasAttr(\"checked\")) {\n                            formData.add(Connection.KeyVal.create(name, value.isEmpty() ? \"on\" : value));\n                        }\n                    } else if (el.tag().getName().equals(\"input\") && el.attr(\"type\").equalsIgnoreCase(\"radio\")) {\n                        if (el.hasAttr(\"checked\")) {\n                            formData.add(Connection.KeyVal.create(name, value));\n                        }\n                    } else {\n                        formData.add(Connection.KeyVal.create(name, value));\n                    }\n                }\n            }\n        }\n    }\n\n    return formData;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}