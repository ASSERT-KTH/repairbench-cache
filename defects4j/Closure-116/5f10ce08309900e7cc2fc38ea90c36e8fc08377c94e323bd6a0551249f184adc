{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  // First, ensure the function is the simple single-return form\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Next, for direct call\u2010site replacement we only allow a pure return\n  // expression (no side\u2010effects in the returned expression).\n  Node block = fnNode.getLastChild();  // the function body\n  Node firstStmt = block.getFirstChild();\n  if (firstStmt != null && firstStmt.isReturn()) {\n    Node returnExpr = firstStmt.getFirstChild();\n    if (returnExpr != null\n        && NodeUtil.mayHaveSideEffects(returnExpr, compiler)) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // Now check the call arguments.\n  // CALL NODE shape: [ FUN, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Handle calls via .call or .apply (skip the 'this' argument)\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // only allow if the first arg is 'this', otherwise bail\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Walk through parameters and arguments in tandem.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        // If the argument can mutate state and the parameter is referenced\n        // more than once in the function, we cannot inline.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(\n                   block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n    }\n\n    // If the argument itself has side\u2010effects, we cannot inline it here.\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}