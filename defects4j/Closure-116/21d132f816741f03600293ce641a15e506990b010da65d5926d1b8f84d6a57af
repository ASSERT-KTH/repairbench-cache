{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    Node tmpCArg = cArg;\n    Node tmpFnParam = fnParam;\n\n    // Check arguments with respect to parameters\n    while (tmpCArg != null && tmpFnParam != null) {\n      // If the parameter is used more than once and the argument expression can affect mutable state,\n      // inlining is not safe.\n      if (NodeUtil.mayEffectMutableState(tmpCArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, tmpFnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      // If the parameter is used only once, any argument is fine,\n      // but if the parameter is not used at all, just continue.\n      tmpCArg = tmpCArg.getNext();\n      tmpFnParam = tmpFnParam.getNext();\n    }\n\n    // If there are more parameters than arguments, skip extra parameters -- those are fine.\n    // If there are more arguments than parameters, e.g. extra arguments passed to rest parameterless functions,\n    // these extra arguments cannot have side effects, as they are not referenced,\n    // so conservatively forbid side-effecting expressions here.\n    while (tmpCArg != null) {\n      if (NodeUtil.mayHaveSideEffects(tmpCArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      tmpCArg = tmpCArg.getNext();\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}