{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParam != null) {\n      if (cArg != null) {\n\n        // For each named parameter check if a mutable argument use more than one.\n        // If the parameter is assigned to in the body, then the passed-in argument\n        // is not actually mutated by the function body, so it's ok.\n        boolean paramAssigned = NodeUtil.isNameAssigned(block, fnParam.getString());\n\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && !paramAssigned\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n\n        // If the argument has side effects and the parameter is used at all\n        // (even once) in a way that can observe the side effect, and the\n        // argument is an expression with side effects (e.g. x.prop)\n        // and the parameter is not assigned, we must not inline.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n            && !paramAssigned\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0) {\n          return CanInlineResult.NO;\n        }\n\n        cArg = cArg.getNext();\n      } else {\n        // There are more parameters than arguments - safe to inline\n      }\n\n      fnParam = fnParam.getNext();\n    }\n\n    // For extra arguments passed to the call, that aren't matched to any params,\n    // ensure that they don't have side effects, as they'll be evaluated anyway,\n    // but will be dropped in the inlining.\n    while (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}