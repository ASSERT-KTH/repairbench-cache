{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  // Only simple single-return functions are candidates.\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // We only allow *direct* inlining of truly side\u2010effect-free return\n  // expressions.  If the body\u2019s return expression does any calls,\n  // assignments, etc., inlining it directly at the call site would\n  // reorder those side-effects relative to argument evaluation.\n  Node block = fnNode.getLastChild();  // the BLOCK node\n  Node stmt = block.getFirstChild();\n  if (stmt != null && stmt.isReturn()) {\n    Node retExpr = stmt.getFirstChild();\n    if (retExpr != null && NodeUtil.mayHaveSideEffects(retExpr, compiler)) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // Now fall back to our existing checks on arguments and parameters.\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Handle a .call() special case.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION PARAM LIST -> [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        // If the actual argument can mutate state, ensure\n        // the corresponding parameter is only used once.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n    }\n    if (cArg != null) {\n      // Even pure references could have side-effects (e.g. getters),\n      // so we bail if the argument itself isn't side-effect-free.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}