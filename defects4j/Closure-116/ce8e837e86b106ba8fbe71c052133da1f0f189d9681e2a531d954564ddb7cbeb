{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects or references mutable state,\n   * the corresponding argument in the function must only be referenced once.\n   * 2) If the function body has side-effects, arguments that could be modified\n   * by those side-effects cannot be inlined. (See Issue 1101)\n   * 3) Arguments with side-effects must not be dropped.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * Nor will this:\n   * <pre>\n   *     function foo(a) { modifiyX(); return a; }\n   *     y = foo(x); // Inlining would change order of modifyX() and possible side effects of evaluating x\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    boolean bodyMayHaveSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list. \".apply\" is not supported.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO; // Cannot inline if 'this' is complex/missing\n        }\n        cArg = cArg.getNext(); // Skip 'this' argument\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // Check parameters and corresponding arguments\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Rule 1: Check if mutable arguments are used more than once.\n          int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n          if (NodeUtil.mayEffectMutableState(cArg, compiler) && refCount > 1) {\n            return CanInlineResult.NO;\n          }\n\n          // Rule 1 (cont.): Check if arguments with side effects are used more than once.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler) && refCount > 1) {\n             return CanInlineResult.NO;\n          }\n\n          // Rule 2 (Issue 1101): If the function body has side effects,\n          // don't inline if the argument is used (refCount > 0) and could be\n          // affected by the function body's side effects. This prevents\n          // reordering of side effects between argument evaluation and function body execution.\n          if (bodyMayHaveSideEffects && refCount > 0 && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n\n        }\n        // Move to the next parameter.\n        fnParam = fnParam.getNext();\n      }\n\n      // Check arguments (including those without parameters)\n      if (cArg != null) {\n        // Rule 3: An argument with side effects must not be dropped.\n        // If fnParam is null here, it means the argument has no corresponding\n        // parameter and would be dropped by inlining if it were allowed.\n        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n        }\n\n        // Move to the next argument.\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}