{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // We only support \"direct\" inlining of trivially\u2010shaped functions whose\n  // body is a single return of a simple expression.\n  Node block = fnNode.getLastChild();\n  Node firstStmt = block.getFirstChild();\n  if (firstStmt != null && firstStmt.isReturn()) {\n    Node retExpr = firstStmt.getFirstChild();\n    if (retExpr != null\n        && !(retExpr.isName()\n             || retExpr.isGetProp()\n             || retExpr.isGetElem()\n             || retExpr.isCall()\n             || retExpr.isNew()\n             || retExpr.isAssign()\n             || retExpr.isInc()\n             || retExpr.isDec())) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // Prepare to walk the call site args against the function params.\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // If this is a .call() form, skip the \"this\" argument.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" calls are filtered out earlier.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Walk parameters vs. call arguments.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        // If the ARG expression might mutate state, we only allow\n        // it if the corresponding parameter is only referenced once.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(\n                block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n    }\n\n    // Even if there's no matching parameter, we must ensure\n    // each CALL argument is side\u2010effect\u2010free in a direct inline.\n    if (cArg != null) {\n      // Treat arbitrary property or element accesses as\n      // side\u2010effective for direct inlining, and also catch\n      // any other side\u2010effects.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n          || cArg.isGetProp()\n          || cArg.isGetElem()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}