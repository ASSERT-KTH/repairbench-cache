{
    "generation": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Process parameters and their corresponding arguments.\n    Node currentParam = fnParam;\n    Node currentArg = cArg;\n    while (currentParam != null && currentArg != null) {\n      // Check for arguments that are evaluated more than once.\n      if (NodeUtil.mayHaveSideEffects(currentArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, currentParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      currentParam = currentParam.getNext();\n      currentArg = currentArg.getNext();\n    }\n\n    // Check remaining arguments for side effects.\n    while (currentArg != null) {\n      if (NodeUtil.mayHaveSideEffects(currentArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      currentArg = currentArg.getNext();\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}