{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanIn`lineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check for arguments that are evaluated more than once.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n          // Additional check: if the parameter is reassigned in the function body,\n          // we cannot inline if the argument has potential side effects\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            // Search in the function body if the parameter is being modified\n            boolean isParamModified = false;\n            Node traversal = block.getFirstChild();\n            while (traversal != null) {\n              if (traversal.isAssign() && traversal.getFirstChild().matchesQualifiedName(fnParam.getString())) {\n                isParamModified = true;\n                break;\n              }\n              if (NodeUtil.isModificationOperator(traversal)\n                  && traversal.getLastChild().matchesQualifiedName(fnParam.getString())) {\n                isParamModified = true;\n                break;\n              }\n              traversal = NodeUtil.getNextStatementBody(traversal);\n            }\n            if (isParamModified) {\n              return CanInlineResult.NO;\n            }\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          // Additional check: look for object mutation in the function body\n          // that might affect this argument\n          if (NodeUtil.isGetOrModifySet(cArg)) {\n            // The parameter is not modified in the function body,\n            // so it might be ok to inline (handled by same-argument case)\n          } else if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n            // Since this argument might have side effects, we check if\n            // it's used a single time or not in the function\n            String paramName = \"\";\n            if (fnParam != null) {\n              paramName = fnParam.getString();\n            }\n            int useCount = NodeUtil.getNameReferenceCount(block, paramName);\n            if (useCount > 1) {\n              return CanInlineResult.NO;\n            }\n          } else {\n            // normal side effects\n            return CanInlineResult.NO;\n          }\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}