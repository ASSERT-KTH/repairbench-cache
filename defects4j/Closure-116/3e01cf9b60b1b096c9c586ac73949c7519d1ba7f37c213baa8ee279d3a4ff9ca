{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * 2) If the function body has side effects, arguments must be simple\n   *    constants or variables, unless the side effects are \"safe\" (e.g. assignments\n   *    to locals or properties of parameters). Calls with side-effects are typically\n   *    not safe to inline if arguments are passed.\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    // Store this check result, as it is used multiple times.\n    boolean functionHasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // Check arguments and parameters in pairs.\n      if (fnParam != null && cArg != null) {\n\n          int paramUseCount = NodeUtil.getNameReferenceCount(\n              block, fnParam.getString());\n\n          // Check 1: Check for arguments that are evaluated more than once.\n          // Example: f(i++) where f(a) { return a + a; }\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && paramUseCount > 1) {\n            return CanInlineResult.NO;\n          }\n\n          // Check 3: If the function possibly has side effects, check for potential\n          // conflicts between the side effects and the arguments.\n          // Example: f(x.prop) where f(a) { x.prop = 2; return a; }\n          // Example: f(x) where f(a) { mightModifyXGlobally(); return a; }\n          if (paramUseCount > 0 && functionHasSideEffects) {\n            // If the argument is complex (not a literal or simple name),\n            // and the function has side effects, we assume that the side effects\n            // might interact with the argument evaluation order or value.\n            boolean argIsComplex = !(NodeUtil.isLiteralValue(cArg, true) || cArg.isName());\n            if (argIsComplex) {\n              return CanInlineResult.NO;\n            } else {\n              // If the argument is simple (literal or name), it's generally safe unless\n              // the function's side effects could potentially modify the value referenced\n              // by the name (e.g., through calls to other functions that modify globals\n              // or closure variables). Assume any call with side effects might do this.\n              // Note: Assignments directly to parameter properties (param.x=1) are generally\n              // safe if the parameter is used once, and are not caught here.\n              boolean hasCallSideEffects = NodeUtil.has(\n                  block,\n                  node -> node.isCall() && NodeUtil.mayHaveSideEffects(node, compiler),\n                  // Avoid infinite recursion: don't check function nodes defined inside the block.\n                  node -> !node.isFunction());\n              if (hasCallSideEffects) {\n                return CanInlineResult.NO;\n              }\n            }\n          }\n      }\n\n      // Move to the next parameter.\n      if (fnParam != null) {\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match. This handles unused arguments\n      // with side effects, e.g. f(1, i++) where f(a){}.\n      if (cArg != null) {\n        // Check 2: Argument evaluation itself has side-effects.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}