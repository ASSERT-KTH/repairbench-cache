{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * 2) If the function body has side-effects, arguments must be side-effect\n   * free and not cause surprising changes in behavior.\n   * <pre>\n   *     function foo(a) { x=1; return a; }\n   *     y = foo(x); // change in value of x observed too early.\n   * </pre>\n   * <pre>\n   *     function foo(a) { x=1; return a; }\n   *     y = foo(x++); // x++ has side-effects.\n   * </pre>\n   *\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    // Compute property once before the loop.\n    boolean blockHasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument is used more than once.\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          // Check #1b: Inline arguments that are complex expressions? Or simple variables? Or mutable args?\n          // Example: function foo(a){return a+a} foo(i++) // NO\n          // This check handles the \"i++\" case by seeing if the argument\n          // expression evaluation itself has side-effects and the parameter is used more than once.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n\n          // Check #1c: If the function body has side effects, don't inline\n          // non-literal arguments if the parameter is used, as the side effect\n          // might change the argument value before use.\n          // Example: function foo(a){global=1;return a;} foo(x) // NO\n          // Example: function foo(a){global=1;return a;} foo(1) // YES\n          if (blockHasSideEffects &&\n               !NodeUtil.isImmutableValue(cArg) && // Argument value might change\n               NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0) { // Parameter is used\n             // This prevents inlining when a function body's side effects\n             // might alter the state referenced by a non-immutable argument\n             // before that argument's value (via the parameter) is used.\n             // This fixes issues like #1101 but might be too strict in some cases\n             // without more sophisticated alias analysis.\n             return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next parameter.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match. Side effects must happen in order.\n      if (cArg != null) {\n        // Check #1a: Argument evaluation itself has side effects.\n        // Example: function foo(a){return 1} foo(i++) // NO\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}