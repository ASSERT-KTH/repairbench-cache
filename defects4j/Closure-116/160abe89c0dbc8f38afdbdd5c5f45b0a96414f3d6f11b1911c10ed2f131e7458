{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    // This cArg will be advanced to handle 'this' argument\n    // and then used as the starting point for the main loop.\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext(); // Advance cArg past 'this' for subsequent logic\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // --- START OF FIX ---\n    // Collect L-values from call arguments that are potentially affected by function body.\n    // If the function body modifies any of these, and the corresponding\n    // parameter is used, then inlining is unsafe. This addresses testIssue1101a and testIssue1101b.\n    Set<String> aliasedNames = new HashSet<>();\n    List<Node> aliasedProperties = new ArrayList<>(); // Store GETPROP/GETELEM for structural comparison\n\n    // Use a separate iterator for this pre-analysis pass to avoid disturbing 'cArg' for the main loop.\n    Node currentCargForAnalysis = callNode.getFirstChild().getNext();\n    if (!callNode.getFirstChild().isName() && NodeUtil.isFunctionObjectCall(callNode)) {\n        if (currentCargForAnalysis != null && currentCargForAnalysis.isThis()) {\n            currentCargForAnalysis = currentCargForAnalysis.getNext();\n        }\n    }\n\n    while (currentCargForAnalysis != null) {\n        if (currentCargForAnalysis.isName()) {\n            aliasedNames.add(currentCargForAnalysis.getString());\n        } else if (NodeUtil.isGet(currentCargForAnalysis)) { // GETPROP or GETELEM\n            aliasedProperties.add(currentCargForAnalysis);\n        }\n        currentCargForAnalysis = currentCargForAnalysis.getNext();\n    }\n\n    // Check if the function body modifies any of these aliased arguments.\n    // We iterate over all descendants of the function body block.\n    for (Node n : block.getDescendantsIterable()) {\n        if (NodeUtil.isAssignmentOp(n) || NodeUtil.isIncDec(n)) {\n            Node lvalue = NodeUtil.getLValue(n);\n            if (lvalue == null) {\n                // This shouldn't happen for valid assignment/inc/dec operations.\n                // If it does, it's safer to disallow inlining.\n                return CanInlineResult.NO;\n            }\n\n            if (lvalue.isName()) {\n                if (aliasedNames.contains(lvalue.getString())) {\n                    // Check if 'lvalue' is a free variable in fnNode's scope\n                    // (i.e., not a parameter of fnNode or a locally declared variable within fnNode).\n                    // If it is, and it's being modified in the function body,\n                    // and it was passed as an argument, then disallow.\n                    Scope s = compiler.getScope(fnNode);\n                    Var v = s.getVar(lvalue.getString());\n                    if (v == null || (!v.isLocal() && !v.isParam())) {\n                        return CanInlineResult.NO;\n                    }\n                }\n            } else if (NodeUtil.isGet(lvalue)) { // GETPROP or GETELEM\n                for (Node argProp : aliasedProperties) {\n                    // Check for structural equivalence (same object, same property/index).\n                    // This catches cases like `x.prop = 2` when `x.prop` was an argument.\n                    if (lvalue.isEquivalentTo(argProp)) {\n                        return CanInlineResult.NO;\n                    }\n                }\n            }\n        }\n        // NOTE: This fix does not explicitly check for indirect modifications by function calls\n        // inside the body (e.g., `modifiyX()`). The assumption is that `testIssue1101a`\n        // implies an explicit modification of 'x' or it gets covered by the global variable check\n        // if `modifiyX()` itself contains an assignment to a global `x`.\n        // A full alias analysis for function calls is outside the scope of this\n        // relatively simple function.\n    }\n    // --- END OF FIX ---\n\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // The 'cArg' variable was already set correctly after 'this' handling,\n    // so no reset is needed here, it points to the first actual argument.\n    // The previous analysis loop used a separate variable 'currentCargForAnalysis'.\n\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}