{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // First check if the function modifies any parameter that has side effects\n    for (Node param : NodeUtil.getFunctionParameters(fnNode).children()) {\n      String paramName = param.getString();\n      if (NodeUtil.isNameReferencesModified(block, paramName)) {\n        // If the parameter is modified in the function body, we need to check\n        // all arguments for side effects\n        Node arg = callNode.getFirstChild().getNext();\n        // Skip the 'this' parameter if present\n        if (!callNode.getFirstChild().isName() &&\n            NodeUtil.isFunctionObjectCall(callNode)) {\n          arg = arg.getNext();\n        }\n        // Check corresponding argument for side effects\n        for (Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n             fnParam != null && arg != null;\n             fnParam = fnParam.getNext(), arg = arg.getNext()) {\n          if (fnParam.getString().equals(paramName) &&\n              NodeUtil.mayHaveSideEffects(arg, compiler)) {\n            return CanInlineResult.NO;\n          }\n        }\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check for arguments that are evaluated more than once.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Check if the parameter is modified in the function body\n        if (NodeUtil.isNameReferencesModified(block, fnParam.getString())) {\n          if (cArg != null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          // Check if the parameter is modified in the function body\n          boolean paramModified = false;\n          Node currentParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n          while (currentParam != null) {\n            if (currentParam.getString().equals(cArg.getString())) {\n              paramModified = NodeUtil.isNameReferencesModified(block, currentParam.getString());\n              break;\n            }\n            currentParam = currentParam.getNext();\n          }\n          if (!paramModified) {\n            // Only fail if the parameter isn't modified in the function body\n            // since the behavior might change\n            return CanInlineResult.NO;\n          }\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}