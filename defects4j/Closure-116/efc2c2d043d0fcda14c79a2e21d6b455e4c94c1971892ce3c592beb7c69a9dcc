{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Grab the sole return\u2010expression (we know by\n  // isDirectCallNodeReplacementPossible that there is exactly one).\n  Node block = fnNode.getLastChild();\n  Node returnStmt = block.getFirstChild();\n  Node returnExpr = (returnStmt != null && returnStmt.isReturn())\n      ? returnStmt.getFirstChild() : null;\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // 'call' and 'apply' invade the arg list with a 'this' value.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // We don't support rewriting 'this' yet.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Now walk the formal parameters vs. the actuals.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        // 1) If the actual has mutating side effects, the\n        //    corresponding parameter must be referenced at most once.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        // 2) Even if the actual is pure, we must not\n        //    reorder a side\u2010effect in the function return\n        //    past the evaluation of the parameter.  In\n        //    a simple binary ADD or COMMA expression, the\n        //    left side is evaluated before the right.\n        if (!NodeUtil.mayEffectMutableState(cArg, compiler)\n            && returnExpr != null\n            && (returnExpr.isAdd() || returnExpr.isComma())) {\n          Node lhs = returnExpr.getFirstChild();\n          Node rhs = lhs.getNext();\n          // If the parameter lives in the right subtree but the\n          // left subtree has side effects, inlining would\n          // invert the order.\n          if (NodeUtil.getNameReferenceCount(\n                  rhs, fnParam.getString()) > 0\n              && NodeUtil.mayHaveSideEffects(lhs, compiler)) {\n            return CanInlineResult.NO;\n          }\n        }\n      }\n      fnParam = fnParam.getNext();\n    }\n\n    // 3) Finally, no actual argument may itself have side effects\n    //    if there's no matching formal.\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}