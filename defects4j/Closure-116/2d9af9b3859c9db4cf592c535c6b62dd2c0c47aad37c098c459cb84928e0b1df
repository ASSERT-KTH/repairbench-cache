{
    "generation": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check for arguments that are evaluated more than once.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n\n          // Also check if the parameter is modified in the function body\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && isParameterModifiedInBody(fnParam, block)) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  // Helper method to check if a parameter is modified in the function body\n  private boolean isParameterModifiedInBody(Node param, Node block) {\n    String paramName = param.getString();\n    // Walk through the function body to see if the parameter is modified\n    Node current = block.getFirstChild();\n    while (current != null) {\n      if (current.isAssign()) {\n        Node lhs = current.getFirstChild();\n        if (lhs.isName() && lhs.getString().equals(paramName)) {\n          return true;\n        }\n        // Check for property assignments like param.prop = value\n        if (lhs.isGetProp()) {\n          Node target = lhs.getFirstChild();\n          if (target.isName() && target.getString().equals(paramName)) {\n            return true;\n          }\n        }\n        // Check for array assignments like param[index] = value\n        if (lhs.isGetElem()) {\n          Node target = lhs.getFirstChild();\n          if (target.isName() && target.getString().equals(paramName)) {\n            return true;\n          }\n        }\n      }\n      // Check for increment/decrement operators\n      if (current.isInc() || current.isDec()) {\n        Node operand = current.getFirstChild();\n        if (operand.isName() && operand.getString().equals(paramName)) {\n          return true;\n        }\n      }\n      current = current.getNext();\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}