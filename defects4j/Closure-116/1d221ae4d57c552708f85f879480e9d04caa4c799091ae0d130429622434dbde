{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Check if any function parameters are modified within the function.\n    if (NodeUtil.functionParamsModified(fnNode, compiler)) {\n        return CanInlineResult.NO;\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            // Check if 'this' argument is present\n            if (cArg == null || !cArg.isThis()) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        } else {\n            // \".apply\" call should be filtered before this.\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n    Node fnParam = fnParams.getFirstChild();\n    Node cArg_DISABLED = cArg;\n\n    while (cArg != null || fnParam != null) {\n        // For each named parameter check if a mutable argument is referenced more than once.\n        if (fnParam != null) {\n            if (cArg != null) {\n\n                // Check if the argument has side effects and is used multiple times\n                if (NodeUtil.mayHaveSideEffects(cArg, compiler) &&\n                        NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n                    return CanInlineResult.NO;\n                }\n\n                // Check if the function parameter is modified within the function\n                if (NodeUtil.parameterModifiedInFunction(fnNode, fnParam, compiler)) {\n                    return CanInlineResult.NO;\n                }\n            }\n\n            // Move to the next parameter\n            fnParam = fnParam.getNext();\n        }\n\n        // Check if any call argument has side effects without a matching parameter\n        if (cArg != null) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        }\n    }\n\n    return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}