{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // Check if the function body modifies any mutable state that could affect arguments\n    if (NodeUtil.mayEffectMutableState(block, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check for arguments that are evaluated more than once.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          // Check if the function body modifies any parameters\n          if (mayModifyParameter(block, fnNode)) {\n            return CanInlineResult.NO;\n          }\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  private boolean mayModifyParameter(Node block, Node fnNode) {\n    // Check if the function body contains any assignments or operations\n    // that might modify parameters\n    for (Node child = block.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isAssign()) {\n        // Check if the left-hand side of the assignment is a parameter\n        if (isParameterReference(child.getFirstChild(), fnNode)) {\n          return true;\n        }\n      } else if (child.isExprResult()) {\n        // For expression results, check the underlying expression\n        Node expr = child.getFirstChild();\n        if (expr.isAssign()) {\n          if (isParameterReference(expr.getFirstChild(), fnNode)) {\n            return true;\n          }\n        } else if (expr.isCall()) {\n          // Check if any part of the call modifies parameters\n          if (mayModifyParametersInCall(expr, fnNode)) {\n            return true;\n          }\n        } else if (expr.isIncDec()) {\n          // Increment/decrement operations might modify parameters\n          if (isParameterReference(expr.getFirstChild(), fnNode)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private boolean isParameterReference(Node node, Node fnNode) {\n    if (node.isName() || node.isGetProp() || node.isGetElem()) {\n      // Get the parameter names from the function\n      Node paramList = NodeUtil.getFunctionParameters(fnNode);\n      for (Node param = paramList.getFirstChild();\n           param != null;\n           param = param.getNext()) {\n        String paramName = param.getString();\n        // Check if the node (or its base in case of GetProp/GetElem) refers to the parameter\n        if (node.isName() && node.getString().equals(paramName)) {\n          return true;\n        } else if ((node.isGetProp() || node.isGetElem()) &&\n                  node.getFirstChild().getString().equals(paramName)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private boolean mayModifyParametersInCall(Node callNode, Node fnNode) {\n    // Check if the call might modify any of the parameters\n    // (e.g., by passing them to functions that modify them)\n    for (Node arg = callNode.getFirstChild().getNext();\n         arg != null;\n         arg = arg.getNext()) {\n      if (isParameterReference(arg, fnNode)) {\n        // If an argument is a parameter reference and the function we're calling\n        // might modify its arguments, then we should not inline\n        if (callNode.getFirstChild().isName()) {\n          String calledFunctionName = callNode.getFirstChild().getString();\n          // In a real implementation, you would check if this function modifies its arguments\n          // For now, we'll assume any function call might modify its arguments\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}