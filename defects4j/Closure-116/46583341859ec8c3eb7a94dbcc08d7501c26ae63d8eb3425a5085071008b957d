{
    "generation": "/**\n * Determines whether a function can be inlined at a particular call site.\n * There are several criteria that the function and reference must hold in\n * order for the functions to be inlined:\n * 1) If a call's arguments have side effects,\n * the corresponding argument in the function must only be referenced once.\n * For instance, this will not be inlined:\n * <pre>\n *     function foo(a) { return a + a }\n *     x = foo(i++);\n * </pre>\n */\nprivate CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  // Check if any parameter is modified in the function body\n  Map<String, Boolean> modified = new HashMap<>();\n  for (Node param : NodeUtil.getFunctionParameters(fnNode).children()) {\n    String paramName = param.getString();\n    if (isParameterModified(block, paramName)) {\n      modified.put(paramName, true);\n    }\n  }\n\n  while (cArg != null || fnParam != null) {\n    // Check for arguments that are evaluated more than once or have side effects\n    if (fnParam != null) {\n      if (cArg != null) {\n        // If the function's parameter is modified, inlining is not allowed\n        if (modified.containsKey(fnParam.getString())) {\n          return CanInlineResult.NO;\n        }\n\n        // Check if the argument has side effects and is referenced multiple times\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n    }\n\n    // For every call argument, check for side-effects even if no matching parameter\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}\n\n// Helper method to check if a parameter is modified in the function body\nprivate boolean isParameterModified(Node block, String paramName) {\n  for (Node node = block.getFirstChild(); node != null; node = node.getNext()) {\n    if (node.isAssign() && node.getFirstChild().isName() && node.getFirstChild().getString().equals(paramName)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}