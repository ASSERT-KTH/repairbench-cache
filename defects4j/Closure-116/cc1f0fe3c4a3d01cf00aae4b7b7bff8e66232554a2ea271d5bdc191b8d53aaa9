{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   *\n   * 2) If the function body has side effects (that are not just from\n   * parameter references), and any of the call arguments are not simple\n   * literals or names, or have side effects themselves. This prevents\n   * reordering of side effects and aliasing issues. For instance:\n   * <pre>\n   *     function foo(a) { return modifyX() + a; }\n   *     x = foo(y);       // y could be modified by modifyX(). `y` is not immutable.\n   *     x = foo(y.prop);  // y.prop read before modifyX(), but after inlining, after modifyX(). `y.prop` is not immutable.\n   *     x = foo(y++);     // side effects reordered. `y++` has side effects.\n   * </pre>\n   *\n   * 3) If there are more arguments than parameters, and the extra arguments\n   * have side effects.\n   *\n   * NOTE: \"this\" is currently not supported for direct replacement with arbitrary values.\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    Preconditions.checkState(block.isBlock());\n\n    // Compute this once outside the loop.\n    boolean hasBodySideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        // If the 'this' argument is not simply 'this', 'null', or 'undefined',\n        // direct inlining is not supported.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null) { // We have a parameter in the function definition\n        int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n\n        if (cArg != null) { // We have a corresponding argument in the call\n          // Rule 1: Argument has side effects, and parameter is used more than once.\n          // This prevents issues like `foo(i++)` where `foo` uses `a` twice,\n          // resulting in `i++` being evaluated multiple times.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler) && refCount > 1) {\n            return CanInlineResult.NO;\n          }\n\n          // Rule 2a: Function body has side effects, AND argument itself has side effects.\n          // This prevents reordering of side effects.\n          // E.g., `function f(a){modifyX()} f(y++)`.\n          // Original: `y++` then `modifyX()`. Inlined: `modifyX()` then `y++`.\n          if (hasBodySideEffects && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n\n          // Rule 2b: Function body has side effects, AND the argument is not an immutable value.\n          // This handles cases where a variable or property might be modified by the\n          // function's body side effects, leading to the inlined version reading\n          // a different value than the original.\n          // E.g., `function foo(a){return modifyX() + a;} foo(x);` (x is not immutable)\n          // If `modifyX()` modifies `x`, the original call effectively reads `x` before `modifyX()`,\n          // while the inlined code reads `x` after `modifyX()`.\n          if (hasBodySideEffects && !NodeUtil.isImmutableValue(cArg)) {\n            return CanInlineResult.NO;\n          }\n        }\n        // Move to the next parameter.\n        fnParam = fnParam.getNext();\n      }\n\n      if (cArg != null) { // We have an argument in the call (possibly extra or no matching parameter yet)\n        // Rule 3: If an argument has side effects, and there is no corresponding parameter.\n        // E.g., `function f(){} f(i++);`\n        // Original: `i++` is evaluated for its side effect, value discarded.\n        // Inlined: `noop`. `i++` does not execute, changing semantics.\n        // This check applies if `fnParam` is null (more arguments than parameters)\n        // or if `fnParam` was already consumed (e.g., from a previous iteration and cArg is still present).\n        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}