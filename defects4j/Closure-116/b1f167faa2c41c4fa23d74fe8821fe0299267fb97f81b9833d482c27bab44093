{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          // Check: If an argument may effect mutable state,\n          // it must be only referenced once *and must only be referenced as a LHS*.\n          // However, it's safe to inline *if* this parameter is only ever written to,\n          // i.e., the argument is only assigned within the function (not read nor returned).\n          // But for the direct inlining, if the parameter is used in a way that could\n          // be visibly changed by argument evaluation order or side effects,\n          // and the argument mutates state, reject.\n\n          // Fix: For bug #1101, do NOT inline if the argument may affect mutable state (including assignments and property writes)\n          // and more than one reference, *or* if the argument may have side effects and is referenced anywhere in the function\n          // outside of simple assignment to itself.\n          String paramName = fnParam.getString();\n          int refCount = NodeUtil.getNameReferenceCount(block, paramName);\n\n          // If the argument mutates state and is referenced more than once, NO.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && refCount > 1) {\n            return CanInlineResult.NO;\n          }\n          // If the argument has side effects, and is referenced (for any use), NO.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n              && refCount > 0) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        // Only check for extra arguments (args w/o corresponding param)\n        // If we have extra arguments (cArg != null && fnParam == null),\n        // and the argument has side effects, reject.\n        if (fnParam == null) {\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}