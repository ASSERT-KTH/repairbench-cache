{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Collect parameter names for side-effect checking within the function body.\n    // Side effects on these parameters (e.g., a.prop = 2, a++) are often handled\n    // by specific argument checks later, or are deemed safe for inlining if they\n    // only affect the parameter itself. This set helps to identify side effects\n    // not related to parameters.\n    Set<String> fnParamNames = new HashSet<>();\n    Node fnParamCollector = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParamCollector != null) {\n      fnParamNames.add(fnParamCollector.getString());\n      fnParamCollector = fnParamCollector.getNext();\n    }\n\n    // Check for side effects in the function body that are not just on parameters.\n    // If the function body has side effects that are not tied to parameter usage\n    // (e.g., modifying a global variable, calling an external function that\n    // is not annotated @nosideeffects), then inlining might change observable behavior.\n    // This addresses cases like \"function foo(a){ return modifiyX() + a; }\" or\n    // \"function foo(a){ return (x.prop = 2),a; }\" where modifiyX() and x.prop=2\n    // are side effects unrelated to parameter 'a'.\n    if (NodeUtil.mayHaveSideEffects(block, compiler, fnParamNames)) {\n      return CanInlineResult.NO;\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    // Reset fnParam to the first formal parameter for the main loop\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}