{
    "generation": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    \n    // Build a set of all the arguments that have side effects.\n    Set<String> sideEffectArgs = new HashSet<>();\n    Node argToCheck = cArg;\n    Node nameToCheck = fnParam;\n    while (argToCheck != null && nameToCheck != null) {\n      if (NodeUtil.mayEffectMutableState(argToCheck, compiler) ||\n          NodeUtil.mayHaveSideEffects(argToCheck, compiler)) {\n        sideEffectArgs.add(nameToCheck.getString());\n      }\n      argToCheck = argToCheck.getNext();\n      nameToCheck = nameToCheck.getNext();\n    }\n    \n    // Function body cannot have side-effects that might modify any of the function\n    // arguments with side-effects, or access the modified value.\n    if (!sideEffectArgs.isEmpty()) {\n      // Check if the function body modifies any of the side effect args\n      for (String argName : sideEffectArgs) {\n        if (NodeUtil.getNameReferenceCount(block, argName) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n      \n      // Check if the function body has any side effects that might conflict with the arguments\n      if (NodeUtil.mayEffectMutableState(block, compiler)) {\n        for (String argName : sideEffectArgs) {\n          return CanInlineResult.NO;\n        }\n      }\n    }\n\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}