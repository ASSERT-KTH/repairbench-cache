{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (cArg != null) { // We have a call argument\n        boolean argHasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);\n\n        if (fnParam != null) { // We have a corresponding function parameter\n          int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n          if (argHasSideEffects) {\n            // Rule 1: If argument has side effects, parameter must be referenced exactly once.\n            if (refCount != 1) {\n              return CanInlineResult.NO;\n            }\n          }\n          // If arg has no side effects, or refCount == 1, continue.\n        } else { // No corresponding function parameter (extra argument passed)\n          if (argHasSideEffects) {\n            // Rule: If extra argument has side effects, and is not consumed by a parameter,\n            // then its side effects would be lost (or changed in evaluation context) if inlined.\n            return CanInlineResult.NO;\n          }\n          // If extra argument has no side effects, it's fine (it's simply ignored).\n        }\n        // Move to the next call argument.\n        cArg = cArg.getNext();\n      } else { // cArg is null, but fnParam is not (too many function parameters for arguments provided).\n        // This is generally fine. The parameter will either be undefined or take a default value.\n        // No side effect concern for missing arguments here.\n      }\n\n      // Move to the next function parameter.\n      if (fnParam != null) {\n        fnParam = fnParam.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}