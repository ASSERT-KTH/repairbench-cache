{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          int paramReferenceCount = NodeUtil.getNameReferenceCount(\n              block, fnParam.getString());\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            // If the argument has any side effects, we can't inline if the parameter is referenced more than once\n            if (paramReferenceCount > 1) {\n              return CanInlineResult.NO;\n            }\n          } else if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n            // If the argument mutates state (like assigning to a variable or property),\n            // we can't inline if the parameter is referenced at all elsewhere,\n            // except when it is used as a left-hand value of its own modification.\n            if (paramReferenceCount > 1) {\n              return CanInlineResult.NO;\n            } else if (paramReferenceCount == 1) {\n              // If the parameter is referenced once, we still shouldn't inline if it is being read as a value,\n              // but we should allow it if it's just being assigned to (i.e. parameter modified)\n              if (!NodeUtil.isParameterAssignedOnly(fnParam.getString(), block)) {\n                return CanInlineResult.NO;\n              }\n            }\n          }\n\n        }\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        // Don't need this check here if argument has a corresponding fnParam (already checked above)\n        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}