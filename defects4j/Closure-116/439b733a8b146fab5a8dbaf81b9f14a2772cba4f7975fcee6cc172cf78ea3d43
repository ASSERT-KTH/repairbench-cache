{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  boolean hasSideEffects = false;\n  while (cArg != null || fnParam != null) {\n    // For each named parameter check if a mutable argument use more than one.\n    if (fnParam != null) {\n      if (cArg != null) {\n        // Check for arguments that are evaluated more than once.\n        // Note: Unlike block inlining, there it is not possible that a\n        // parameter reference will be in a loop.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(\n                block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        // If the argument has side effects, we need to check if the function\n        // body has more than one reference to the parameter.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          hasSideEffects = true;\n        }\n      }\n\n      // Move to the next name.\n      fnParam = fnParam.getNext();\n    }\n\n    // For every call argument check for side-effects, even if there\n    // isn't a named parameter to match.\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        hasSideEffects = true;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  // If there are side effects in the arguments and the function body has more\n  // than one reference to any parameter, we cannot inline.\n  if (hasSideEffects && hasMultipleParameterReferences(block)) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}\n\nprivate boolean hasMultipleParameterReferences(Node block) {\n  Set<String> paramNames = new HashSet<>();\n  Node param = NodeUtil.getFunctionParameters(block.getParent()).getFirstChild();\n  while (param != null) {\n    paramNames.add(param.getString());\n    param = param.getNext();\n  }\n\n  for (String paramName : paramNames) {\n    if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}