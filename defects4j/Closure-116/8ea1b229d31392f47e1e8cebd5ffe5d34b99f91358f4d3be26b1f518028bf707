{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // New check: if the function body has side effects that are NOT solely\n    // on its formal parameters or their properties, and the function has\n    // parameters, it cannot be inlined. This prevents unintended interactions\n    // with global state or other aliased values.\n    // This addresses failures like testIssue1101a and testIssue1101b.\n    if (NodeUtil.mayHaveSideEffects(block, compiler)\n        && NodeUtil.getFunctionParameters(fnNode).hasChildren()) {\n\n      Set<String> paramNames = new HashSet<>();\n      Node fnParamNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n      while (fnParamNode != null) {\n        paramNames.add(fnParamNode.getString());\n        fnParamNode = fnParamNode.getNext();\n      }\n\n      // Check all side-effecting nodes in the function body.\n      for (Node node : block.getDescendantsIterable()) {\n        if (NodeUtil.mayHaveSideEffects(node, compiler)) {\n          boolean isSideEffectOnParameter = false;\n          // Check if the side effect is an assignment or increment/decrement\n          // targeting a formal parameter or a property/element of a formal parameter.\n          if (node.isAssign() || node.isInc() || node.isDec()) {\n            Node target = node.isAssign() ? node.getFirstChild() : node.getLastChild();\n            // Case 1: Direct assignment to a parameter (e.g., 'a = 1')\n            if (target.isName() && paramNames.contains(target.getString())) {\n              isSideEffectOnParameter = true;\n            } else if (NodeUtil.isGet(target)) { // Case 2: Assignment to a property/element of a parameter (e.g., 'a.x = 2', 'a[0] = 2')\n              Node owner = target.getFirstChild();\n              // Check if the owner of the property/element access is a parameter.\n              if (owner.isName() && paramNames.contains(owner.getString())) {\n                isSideEffectOnParameter = true;\n              }\n            }\n          }\n          // If the side effect is not a direct assignment/modification on a parameter\n          // or its property, then it's a problematic side effect (e.g., a call like modifiyX()\n          // or an assignment to a global variable like x.prop = 2 where x is not a parameter).\n          if (!isSideEffectOnParameter) {\n            return CanInlineResult.NO;\n          }\n        }\n      }\n    }\n\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          // Check for arguments that are evaluated more than once.\n          // Rule 1: If a call's arguments have side effects,\n          // the corresponding argument in the function must only be referenced once.\n          // Using NodeUtil.mayHaveSideEffects covers all types of side effects,\n          // aligning better with the JSDoc description.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      // If a call argument has side effects and there is no formal parameter\n      // to bind it to, inlining would eliminate the side effect.\n      // E.g., `function foo() {} foo(alert(1));` if inlined to just nothing,\n      // would lose the `alert(1)` side effect.\n      if (cArg != null) {\n        if (fnParam == null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}