{
    "generation": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.exc.MismatchedInputException;\n\nimport static org.junit.Assert.fail;\n// Assuming assertApproximateEquals, assertNull, etc. are available in the test context.\n\n// Note: This assumes the context of a Jackson test class (like TestSimpleTypes)\n// and that `BaseMapTest` or similar provides utilities like `assertApproximateEquals`.\n// The fix is specifically for the content of these two helper methods.\n\n// This is likely the public method directly called by other tests,\n// which delegates to the more specific one.\nprotected void _testEmptyToNullCoercion(Class<?> type, Object expValue) throws Exception {\n    _testEmptyToNullCoercion(type, expValue, true);\n}\n\n// This is the actual helper method that configures the ObjectMapper and performs tests.\n// This is where the bug was located.\nprotected void _testEmptyToNullCoercion(Class<?> type, Object expValue, boolean allowEmptyString) throws Exception {\n    final ObjectMapper mapper = new ObjectMapper();\n\n    // The problematic line was:\n    // mapper.disable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES);\n    // This line caused `null` (and thus empty string mapped to null) to be coerced\n    // to default primitive values (0, 0.0 etc.), leading the test to \"pass\" when it\n    // was expecting an exception for primitives.\n    // By removing this line, `FAIL_ON_NULL_FOR_PRIMITIVES` remains enabled (its default state),\n    // which correctly throws `MismatchedInputException` for null input to primitives.\n\n    if (!allowEmptyString) {\n        mapper.disable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n    } else {\n        mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n    }\n\n    Object value;\n\n    // 1. Test with \"null\" token\n    try {\n        value = mapper.readValue(\"null\", type);\n        // For primitive types (int.class, long.class etc.), `expValue` is not null (e.g., 0).\n        // The test `testEmptyToNullCoercionForPrimitives` expects `MismatchedInputException`\n        // for primitives here. So if it reaches this block, it means it passed when it shouldn't.\n        if (expValue != null) {\n            fail(\"Should not have passed\");\n        } else {\n            // For non-primitive types expecting null, this path is correct.\n            // assertNull(value); // Example assertion for objects expecting null\n        }\n    } catch (MismatchedInputException e) {\n        // This is the expected path for primitive types after the fix.\n        // For primitives, `expValue` is not null (e.g., 0).\n        if (expValue != null) {\n            // This is desired behavior: an exception was thrown. Do nothing (test passes this sub-case).\n        } else {\n            // For non-primitive types where null should be accepted, an exception is unexpected.\n            fail(\"Should have passed: \" + e.getMessage());\n        }\n    }\n\n    // 2. Test with empty string \"\"\n    try {\n        value = mapper.readValue(\"\\\"\\\"\", type);\n        // Similar logic as for \"null\" token.\n        // For primitive types, this path means it passed when it shouldn't have.\n        if (expValue != null) {\n            fail(\"Should not have passed\");\n        } else {\n            // For non-primitive types expecting null (via ACCEPT_EMPTY_STRING_AS_NULL_OBJECT), this is correct.\n            // assertNull(value); // Example assertion for objects expecting null\n        }\n    } catch (MismatchedInputException e) {\n        // This is the expected path for primitive types after the fix.\n        // For primitives, `expValue` is not null (e.g., 0).\n        if (expValue != null) {\n            // This is desired behavior: an exception was thrown.\n        } else {\n            // For non-primitive types where empty string should be accepted, an exception is unexpected.\n            fail(\"Should have passed: \" + e.getMessage());\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}