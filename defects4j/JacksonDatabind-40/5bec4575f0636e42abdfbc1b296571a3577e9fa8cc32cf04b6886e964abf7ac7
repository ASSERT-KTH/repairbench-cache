{
    "generation": "    private void _testEmptyToNullCoercion(Class<?> type, Object expectedValue) throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // This feature enables treating empty String (\"\") as null.\n        // When deserializing to a primitive type, if this results in `null`,\n        // it should ideally throw an exception unless ACCEPT_NULL_FOR_PRIMITIVES is enabled.\n        mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n\n        // The bug likely originated from an incorrect or accidental enabling of\n        // DeserializationFeature.ACCEPT_NULL_FOR_PRIMITIVES within this method or globally.\n        // If ACCEPT_NULL_FOR_PRIMITIVES is enabled, `null` (which `\"\"` becomes) would be\n        // coerced to the primitive's default value (e.g., 0 for int, 0.0 for double)\n        // without throwing an exception.\n        // The test \"testEmptyToNullCoercionForPrimitives\" and its error \"Should not have passed\"\n        // indicate that such a successful coercion for primitives is considered a failure.\n        // Therefore, DeserializationFeature.ACCEPT_NULL_FOR_PRIMITIVES must NOT be enabled\n        // for these test cases to correctly throw an exception.\n\n        boolean isPrimitive = type.isPrimitive();\n\n        try {\n            // Attempt to read an empty string. `q(\"\")` is a common helper in Jackson tests\n            // to represent a quoted empty string, i.e., `\"\"`.\n            Object actual = mapper.readValue(q(\"\"), type);\n\n            if (isPrimitive) {\n                // If we reach this point for a primitive type, it means deserialization\n                // succeeded without throwing an exception. This is contrary to the\n                // expected behavior for coercing null (from empty string) to a primitive\n                // when ACCEPT_NULL_FOR_PRIMITIVES is disabled.\n                // Thus, this execution path indicates a test failure.\n                fail(\"Should not have passed (expected exception for primitive type \" + type.getName() + \" when coercing empty string)\");\n            } else {\n                // For non-primitive (wrapper) types, if ACCEPT_EMPTY_STRING_AS_NULL_OBJECT\n                // is enabled, an empty string should successfully coerce to `null`.\n                // The `expectedValue` for such cases (e.g., Integer.class) would typically be `null`.\n                assertEquals(expectedValue, actual);\n            }\n        } catch (MismatchedInputException e) {\n            // This is the expected outcome for primitive types when `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`\n            // is enabled (converting `\"\"` to `null`), and `null` cannot be assigned to a primitive.\n            if (isPrimitive) {\n                // Test passed (exception was correctly thrown for primitive type)\n                return;\n            } else {\n                // For non-primitive types, an MismatchedInputException indicates a failure,\n                // as they should have successfully coerced to null.\n                fail(\"Should have coerced to null for wrapper type \" + type.getName() + \" but threw MismatchedInputException: \" + e.getMessage());\n            }\n        } catch (Exception e) {\n            // Catch any other unexpected exceptions.\n            fail(\"Caught unexpected exception of type \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}