{
    "generation": "private Object coerceEmptyString(String value, Class<?> targetType) {\n    // Only \"coerce\" if input is actually empty\n    if (value != null && value.isEmpty()) {\n        if (targetType.isPrimitive()) {\n            // Convert empty string into the default value for the primitive type:\n            if (targetType == int.class) {\n                return 0;\n            } else if (targetType == long.class) {\n                return 0L;\n            } else if (targetType == double.class) {\n                return 0.0;\n            } else if (targetType == float.class) {\n                return 0.0f;\n            } else if (targetType == boolean.class) {\n                return false;\n            } else if (targetType == byte.class) {\n                return (byte) 0;\n            } else if (targetType == short.class) {\n                return (short) 0;\n            } else if (targetType == char.class) {\n                return '\\u0000';\n            } else {\n                // Should not occur; all primitives should be handled above.\n                throw new IllegalArgumentException(\"Unsupported primitive type: \" + targetType.getName());\n            }\n        }\n        // For non-primitive types, default empty value to null.\n        return null;\n    }\n    // For non-empty values, defer to normal processing (or throw if this utility is only meant for empty string coercion).\n    throw new IllegalArgumentException(\"Expected empty string for coercion, got: \" + value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}