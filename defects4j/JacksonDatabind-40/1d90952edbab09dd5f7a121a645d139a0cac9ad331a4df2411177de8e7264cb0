{
    "generation": "    protected Object _deserializeFromEmptyString() throws IOException {\n        // 24-May-2016, tatu: UGH. As per [databind#1228], must consider\n        //   ACCEPT_EMPTY_STRING_AS_NULL_OBJECT. If that's enabled, we'll\n        //   just use 'null' as value, which then may or may not be coerced\n        //   into a default for scalar types.\n\n        // 27-Nov-2020, tatu: For [databind#2756] must actually check explicitly for primitives here,\n        //    as `getNullValue()` won't necessarily know about `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`.\n        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n            if (handledType().isPrimitive()) {\n                // 27-Nov-2020, tatu: for primitives, this is a special case:\n                // must also enable `ACCEPT_NULL_FOR_PRIMITIVES`\n                if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_NULL_FOR_PRIMITIVES)) {\n                    throw ctxt.mappingException(handledType());\n                }\n            }\n            return getNullValue(ctxt);\n        }\n        // 03-Dec-2010, tatu: Should we try to coerce to a numeric zero?\n        //   Not for now; that's what we have ACCEPT_EMPTY_STRING_AS_NULL_OBJECT for\n        //   (which then maps to 0 for primitives)\n        //  ... actually, if this were to occur for primitives, exception should be thrown\n        if (handledType().isPrimitive()) {\n            throw ctxt.mappingException(handledType(), JsonToken.VALUE_STRING);\n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}