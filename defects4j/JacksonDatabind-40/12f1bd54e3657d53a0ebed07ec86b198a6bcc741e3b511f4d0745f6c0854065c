{
    "generation": "public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    if (p.currentToken() == JsonToken.VALUE_STRING) {\n        String text = p.getText().trim();\n        if (text.isEmpty()) {\n            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                if (_primitive) {\n                    throw ctxt.mappingException(\"Cannot coerce empty String to primitive %s\", _valueClass.getName());\n                }\n                return _nullValue;\n            }\n            throw ctxt.mappingException(\"Cannot coerce empty String (\\\"\\\") to %s (enable %s to allow)\", _valueClass.getName(),\n                    DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n        }\n        try {\n            return Integer.valueOf(_parseInt(text, ctxt));\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(text, _valueClass, \"not a valid integer value\");\n        }\n    } else if (p.currentToken() == JsonToken.VALUE_NUMBER_INT) {\n        return p.getIntValue();\n    }\n    return _parseInteger(p, ctxt);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}