{
    "generation": "// This function is intended to be part of `com.fasterxml.jackson.databind.deser.std.StdDeserializer`.\n// The bug addresses an issue where an empty string (`\"\"`) would be implicitly\n// coerced to the default value (e.g., `0` for `int`) for primitive types\n// by default, instead of throwing an exception, when `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`\n// was not enabled.\nprotected final Object _coerceEmptyString(com.fasterxml.jackson.core.JsonParser p,\n        com.fasterxml.jackson.databind.DeserializationContext ctxt,\n        Class<?> rawTargetType,\n        com.fasterxml.jackson.databind.MapperFeature.CoercionAction action) throws java.io.IOException\n{\n    // First, handle explicit coercion actions if set\n    if (action == com.fasterxml.jackson.databind.MapperFeature.CoercionAction.AsNull) {\n        return getNullValue(ctxt);\n    }\n    if (action == com.fasterxml.jackson.databind.MapperFeature.CoercionAction.Fail) {\n        _reportInputMismatch(p, \"Cannot deserialize value of type %s from empty String (explicit `CoercionAction.Fail` configured)\",\n                _coercedTypeDesc());\n        return null; // Unreachable, as _reportInputMismatch throws\n    }\n    // Note: CoercionAction.AsEmpty is not directly relevant to this specific bug scenario,\n    // which concerns default handling of empty string to primitive.\n\n    // Second, check DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT\n    if (ctxt.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n        // If this feature is enabled, empty string should be treated as null.\n        // For primitives, null will be coerced to their default (e.g., 0 for int).\n        return getNullValue(ctxt);\n    }\n\n    // Third, default fallback logic for cases where no explicit action or feature is set.\n    // For primitive types (int, long, double, float, boolean, etc.), the default behavior\n    // should be to throw an exception if an empty string is encountered.\n    if (rawTargetType.isPrimitive()) {\n        // FIX: Previously, this path might have incorrectly returned `getNullValue(ctxt)`,\n        // leading to silent coercion of empty string to 0 for primitives.\n        // The correct default behavior is to throw an exception.\n        _reportInputMismatch(p, \"Cannot deserialize value of type %s from empty String (enable `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` to allow)\",\n                _coercedTypeDesc());\n        return null; // Unreachable, as _reportInputMismatch throws\n    }\n\n    // For non-primitive types (Objects), default to null if not explicitly handled above.\n    return getNullValue(ctxt);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}