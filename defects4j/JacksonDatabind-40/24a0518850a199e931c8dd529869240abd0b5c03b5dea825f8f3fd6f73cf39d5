{
    "generation": "    protected final Integer _parseInteger(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        JsonToken t = p.getCurrentToken();\n\n        // Direct number tokens\n        if (t == JsonToken.VALUE_NUMBER_INT) {\n            return p.getIntValue();\n        }\n        if (t == JsonToken.VALUE_STRING) {\n            String text = p.getText().trim();\n            if (text.isEmpty()) {\n                // [databind#1283]: for primitives, empty String is never coerced to '0', always fails\n                CoercionAction act = ctxt.findCoercionAction(CoercionInputShape.EmptyString, _numberType);\n                if (act == CoercionAction.Fail || _primitive) {\n                    return (Integer) ctxt.handleUnexpectedToken(_numberType, p);\n                }\n                // For non-primitives, if AsNull/AsEmpty, return null\n                if (act == CoercionAction.AsNull || act == CoercionAction.AsEmpty) {\n                    return null; // For Integer wrapper, this is correct\n                }\n                // CoercionAction.TryConvert: fall through to actual parsing\n            }\n            return _parseIntegerFromStr(p, ctxt, text);\n        }\n        if (t == JsonToken.VALUE_NULL) {\n            // [databind#1283]: for primitives, `null` is never coerced to '0', always fails\n            CoercionAction act = ctxt.findCoercionAction(CoercionInputShape.Null, _numberType);\n            if (act == CoercionAction.Fail || _primitive) {\n                return (Integer) ctxt.handleUnexpectedToken(_numberType, p);\n            }\n            // For non-primitives, if AsNull/AsEmpty, return null\n            if (act == CoercionAction.AsNull || act == CoercionAction.AsEmpty) {\n                return null; // For Integer wrapper, this is correct\n            }\n        }\n        // General coercion for other scalar types:\n        if (t == JsonToken.VALUE_TRUE) {\n            _verifyBooleanForScalarCoercion(ctxt, Boolean.class);\n            return 1;\n        }\n        if (t == JsonToken.VALUE_FALSE) {\n            _verifyBooleanForScalarCoercion(ctxt, Boolean.class);\n            return 0;\n        }\n        // Fallback for unhandled token types\n        return (Integer) ctxt.handleUnexpectedToken(_numberType, p);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}