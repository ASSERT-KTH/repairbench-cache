{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        return isArray(o2) && areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean isArray(Object o) {\n    return o.getClass().isArray();\n}\n\nprivate static boolean areArraysEqual(Object array1, Object array2) {\n    if (array1.getClass() != array2.getClass()) {\n        return false;\n    }\n\n    if (array1 instanceof Object[]) {\n        return java.util.Arrays.deepEquals((Object[]) array1, (Object[]) array2);\n    } else if (array1 instanceof int[]) {\n        return java.util.Arrays.equals((int[]) array1, (int[]) array2);\n    } else if (array1 instanceof long[]) {\n        return java.util.Arrays.equals((long[]) array1, (long[]) array2);\n    } else if (array1 instanceof short[]) {\n        return java.util.Arrays.equals((short[]) array1, (short[]) array2);\n    } else if (array1 instanceof char[]) {\n        return java.util.Arrays.equals((char[]) array1, (char[]) array2);\n    } else if (array1 instanceof byte[]) {\n        return java.util.Arrays.equals((byte[]) array1, (byte[]) array2);\n    } else if (array1 instanceof double[]) {\n        return java.util.Arrays.equals((double[]) array1, (double[]) array2);\n    } else if (array1 instanceof float[]) {\n        return java.util.Arrays.equals((float[]) array1, (float[]) array2);\n    } else if (array1 instanceof boolean[]) {\n        return java.util.Arrays.equals((boolean[]) array1, (boolean[]) array2);\n    } else {\n        throw new UnsupportedOperationException(\"Unsupported array type: \" + array1.getClass().getName());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}