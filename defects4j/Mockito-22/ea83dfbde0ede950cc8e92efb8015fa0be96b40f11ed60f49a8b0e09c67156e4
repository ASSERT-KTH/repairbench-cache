{
    "generation": "    public static boolean areEqual(Object o1, Object o2) {\n        if (o1 == o2) { // If both objects are the same instance (or both null), they are equal.\n            return true;\n        }\n        // At this point, o1 and o2 are not the same instance.\n        // So if one is null, the other is definitely not null, meaning they are not equal.\n        if (o1 == null || o2 == null) {\n            return false;\n        }\n        // At this point, neither o1 nor o2 is null, and they are not the same instance.\n        if (isArray(o1)) {\n            // If o1 is an array, o2 must also be an array and their contents must be equal.\n            // This relies on `isArray` correctly identifying array types and `areArraysEqual`\n            // handling different primitive/wrapper array types and recursive element comparison.\n            return isArray(o2) && areArraysEqual(o1, o2);\n        } else {\n            // For non-array objects, use their custom equals method.\n            // The o1 == o2 check above protects against problematic equals() implementations\n            // that throw exceptions on self-comparison.\n            return o1.equals(o2);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}