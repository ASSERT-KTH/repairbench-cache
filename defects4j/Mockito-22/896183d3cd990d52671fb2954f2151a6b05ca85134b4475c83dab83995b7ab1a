{
    "generation": "    public static boolean areEqual(Object o1, Object o2) {\n        if (o1 == null || o2 == null) {\n            return o1 == null && o2 == null;\n        } else if (isArray(o1)) {\n            if (!isArray(o2)) {\n                return false;\n            }\n            // Handle primitive vs wrapper array cases\n            if (o1.getClass() != o2.getClass()) {\n                Object[] arr1 = toObjectArray(o1);\n                Object[] arr2 = toObjectArray(o2);\n                return Arrays.equals(arr1, arr2);\n            }\n            return areArraysEqual(o1, o2);\n        } else {\n            return o1.equals(o2);\n        }\n    }\n\n    private static Object[] toObjectArray(Object array) {\n        if (array instanceof int[]) {\n            return Arrays.stream((int[]) array).boxed().toArray();\n        } else if (array instanceof double[]) {\n            return Arrays.stream((double[]) array).boxed().toArray();\n        } else if (array instanceof long[]) {\n            return Arrays.stream((long[]) array).boxed().toArray();\n        } else if (array instanceof boolean[]) {\n            return Arrays.stream((boolean[]) array).boxed().toArray();\n        } else if (array instanceof byte[]) {\n            return Arrays.stream((byte[]) array).boxed().toArray();\n        } else if (array instanceof char[]) {\n            return Arrays.stream((char[]) array).boxed().toArray();\n        } else if (array instanceof short[]) {\n            return Arrays.stream((short[]) array).boxed().toArray();\n        } else if (array instanceof float[]) {\n            return Arrays.stream((float[]) array).boxed().toArray();\n        }\n        return (Object[]) array;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}