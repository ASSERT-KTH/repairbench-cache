{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        return isArray(o2) && areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean isArray(Object obj) {\n    return obj.getClass().isArray();\n}\n\nprivate static boolean areArraysEqual(Object arr1, Object arr2) {\n    if (arr1.getClass() != arr2.getClass()) {\n        return false;\n    }\n\n    if (arr1 instanceof int[]) {\n        return java.util.Arrays.equals((int[]) arr1, (int[]) arr2);\n    } else if (arr1 instanceof long[]) {\n        return java.util.Arrays.equals((long[]) arr1, (long[]) arr2);\n    } else if (arr1 instanceof short[]) {\n        return java.util.Arrays.equals((short[]) arr1, (short[]) arr2);\n    } else if (arr1 instanceof byte[]) {\n        return java.util.Arrays.equals((byte[]) arr1, (byte[]) arr2);\n    } else if (arr1 instanceof char[]) {\n        return java.util.Arrays.equals((char[]) arr1, (char[]) arr2);\n    } else if (arr1 instanceof float[]) {\n        return java.util.Arrays.equals((float[]) arr1, (float[]) arr2);\n    } else if (arr1 instanceof double[]) {\n        return java.util.Arrays.equals((double[]) arr1, (double[]) arr2);\n    } else if (arr1 instanceof boolean[]) {\n        return java.util.Arrays.equals((boolean[]) arr1, (boolean[]) arr2);\n    } else {\n        return java.util.Arrays.deepEquals((Object[]) arr1, (Object[]) arr2);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}