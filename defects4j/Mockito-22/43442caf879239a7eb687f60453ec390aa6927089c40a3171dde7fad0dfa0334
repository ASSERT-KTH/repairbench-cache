{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        if (!isArray(o2) || arrayLength(o1) != arrayLength(o2)) {\n            return false;\n        }\n        if (o1.getClass() != o2.getClass()) {\n            if (!(o1 instanceof Object[] && o2 instanceof Object[])) {\n                return arrayEquals(o1, o2);\n            }\n        }\n        for (int i = 0; i < arrayLength(o1); i++) {\n            if (!areEqual(arrayGet(o1, i), arrayGet(o2, i))) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean isArray(Object obj) {\n    return obj != null && obj.getClass().isArray();\n}\n\nprivate static int arrayLength(Object array) {\n    if (array instanceof Object[]) {\n        return ((Object[]) array).length;\n    } else if (array instanceof boolean[]) {\n        return ((boolean[]) array).length;\n    } else if (array instanceof byte[]) {\n        return ((byte[]) array).length;\n    } else if (array instanceof char[]) {\n        return ((char[]) array).length;\n    } else if (array instanceof double[]) {\n        return ((double[]) array).length;\n    } else if (array instanceof float[]) {\n        return ((float[]) array).length;\n    } else if (array instanceof int[]) {\n        return ((int[]) array).length;\n    } else if (array instanceof long[]) {\n        return ((long[]) array).length;\n    } else if (array instanceof short[]) {\n        return ((short[]) array).length;\n    }\n    throw new RuntimeException(\"Unsupported array type\");\n}\n\nprivate static Object arrayGet(Object array, int index) {\n    if (array instanceof Object[]) {\n        return ((Object[]) array)[index];\n    } else if (array instanceof boolean[]) {\n        return ((boolean[]) array)[index] ? Boolean.TRUE : Boolean.FALSE;\n    } else if (array instanceof byte[]) {\n        return ((byte[]) array)[index];\n    } else if (array instanceof char[]) {\n        return ((char[]) array)[index];\n    } else if (array instanceof double[]) {\n        return ((double[]) array)[index];\n    } else if (array instanceof float[]) {\n        return ((float[]) array)[index];\n    } else if (array instanceof int[]) {\n        return ((int[]) array)[index];\n    } else if (array instanceof long[]) {\n        return ((long[]) array)[index];\n    } else if (array instanceof short[]) {\n        return ((short[]) array)[index];\n    }\n    throw new RuntimeException(\"Unsupported array type\");\n}\n\nprivate static boolean arrayEquals(Object o1, Object o2) {\n    if (o1 instanceof boolean[] && o2 instanceof boolean[]) {\n        return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n    } else if (o1 instanceof byte[] && o2 instanceof byte[]) {\n        return Arrays.equals((byte[]) o1, (byte[]) o2);\n    } else if (o1 instanceof char[] && o2 instanceof char[]) {\n        return Arrays.equals((char[]) o1, (char[]) o2);\n    } else if (o1 instanceof double[] && o2 instanceof double[]) {\n        return Arrays.equals((double[]) o1, (double[]) o2);\n    } else if (o1 instanceof float[] && o2 instanceof float[]) {\n        return Arrays.equals((float[]) o1, (float[]) o2);\n    } else if (o1 instanceof int[] && o2 instanceof int[]) {\n        return Arrays.equals((int[]) o1, (int[]) o2);\n    } else if (o1 instanceof long[] && o2 instanceof long[]) {\n        return Arrays.equals((long[]) o1, (long[]) o2);\n    } else if (o1 instanceof short[] && o2 instanceof short[]) {\n        return Arrays.equals((short[]) o1, (short[]) o2);\n    }\n    throw new RuntimeException(\"Unsupported array type\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}