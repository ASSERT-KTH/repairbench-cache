{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        if (!isArray(o2)) {\n            return false;\n        }\n        return areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean isArray(Object obj) {\n    return obj.getClass().isArray();\n}\n\nprivate static boolean areArraysEqual(Object arr1, Object arr2) {\n    if (arr1.getClass() != arr2.getClass()) {\n        return false;\n    }\n\n    if (arr1 instanceof Object[]) {\n        Object[] o1 = (Object[]) arr1;\n        Object[] o2 = (Object[]) arr2;\n        if (o1.length != o2.length) {\n            return false;\n        }\n        for (int i = 0; i < o1.length; i++) {\n            if (!areEqual(o1[i], o2[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if (arr1 instanceof int[]) {\n        return Arrays.equals((int[]) arr1, (int[]) arr2);\n    } else if (arr1 instanceof long[]) {\n        return Arrays.equals((long[]) arr1, (long[]) arr2);\n    } else if (arr1 instanceof double[]) {\n        return Arrays.equals((double[]) arr1, (double[]) arr2);\n    } else if (arr1 instanceof float[]) {\n        return Arrays.equals((float[]) arr1, (float[]) arr2);\n    } else if (arr1 instanceof boolean[]) {\n        return Arrays.equals((boolean[]) arr1, (boolean[]) arr2);\n    } else if (arr1 instanceof char[]) {\n        return Arrays.equals((char[]) arr1, (char[]) arr2);\n    } else if (arr1 instanceof byte[]) {\n        return Arrays.equals((byte[]) arr1, (byte[]) arr2);\n    } else if (arr1 instanceof short[]) {\n        return Arrays.equals((short[]) arr1, (short[]) arr2);\n    }\n\n    throw new UnsupportedOperationException(\"Unsupported array type: \" + arr1.getClass().getName());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}