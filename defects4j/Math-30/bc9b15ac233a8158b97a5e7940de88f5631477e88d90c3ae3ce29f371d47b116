{
    "generation": "import org.apache.commons.math3.distribution.NormalDistribution;\nimport org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.util.FastMath;\n\n// Assume the containing class exists\n\n    /**\n     * Calculates the asymptotic p-value for the Mann-Whitney U test using the normal approximation.\n     * Includes continuity correction and uses long arithmetic to avoid overflow for large sample sizes.\n     *\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error (thrown by NormalDistribution)\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded (thrown by NormalDistribution)\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        // Use long to avoid potential intermediate overflow Handles n1*n2 > Integer.MAX_VALUE\n        final long n1n2prod = (long) n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n\n        // Calculate variance using long arithmetic to prevent overflow\n        // Var(U) = n1 * n2 * (n1 + n2 + 1) / 12\n        final double VarU = n1n2prod * (long)(n1 + n2 + 1) / 12.0;\n\n        // Add continuity correction: Umin is corrected by +0.5 towards the mean EU\n        // The z-score is calculated for Umin corrected by +0.5\n        // This is equivalent to using |Umin - EU| - 0.5 in the numerator for the absolute z-score.\n        final double z = (Umin + 0.5 - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        // The two-sided p-value is 2 * P(Z <= -|z|) where Z is standard normal.\n        // This handles both left and right tails symmetrically.\n        return 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}