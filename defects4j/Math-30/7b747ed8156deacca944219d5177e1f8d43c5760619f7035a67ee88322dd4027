{
    "generation": "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n\n    final int n1n2prod = n1 * n2;\n\n    // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n    // For a two-sided p-value, we want 2 * min(P(Z <= z), P(Z >= z))\n    // That is, 2 * min(CDF(z), 1-CDF(z)), but for symmetry use survival function.\n    double p = 2 * Math.min(standardNormal.cumulativeProbability(z), 1.0 - standardNormal.cumulativeProbability(z));\n    // Clamp between [0,1] due to possible small numerical errors\n    if (p > 1.0) {\n        p = 1.0;\n    } else if (p < 0.0) {\n        p = 0.0;\n    }\n    return p;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}