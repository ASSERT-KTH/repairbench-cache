{
    "generation": "import org.apache.commons.math3.distribution.NormalDistribution;\nimport org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.util.FastMath;\n\nclass MannWhitneyUTest {\n    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final int n1n2prod = n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n        // The z-score calculation.\n        // A continuity correction (e.g., subtracting 0.5) is sometimes applied,\n        // but the current Commons Math implementation typically does not include it\n        // at this level for the basic normal approximation.\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        // For a two-sided test, the p-value is P(Z <= -|z|) + P(Z >= |z|) = 2 * P(Z <= -|z|)\n        // This ensures the p-value is symmetrical and always between 0 and 1.\n        // Given that Umin is the \"smallest U value\", z should be <= 0,\n        // making -FastMath.abs(z) equivalent to z. However, using FastMath.abs(z)\n        // makes the calculation robust to any z-score sign.\n        return 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}