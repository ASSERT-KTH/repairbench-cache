{
    "generation": "    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        // Use long to avoid intermediate overflow in n1*n2\n        final long n1n2prod = (long) n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n\n        // Calculate variance using double intermediate values to avoid integer overflow\n        // VarU = (n1 * n2 * (n1 + n2 + 1)) / 12\n        final double VarU = (n1n2prod / 12.0) * (n1 + n2 + 1.0);\n\n        // If variance is zero (e.g., n1=0 or n2=0), return 1.0 (non-significant)\n        // This also avoids potential division by zero later.\n        if (VarU == 0) {\n            return 1.0;\n        }\n\n        // Continuity correction: Adjust the difference |Umin - EU| towards zero by 0.5\n        final double T = FastMath.abs(Umin - EU);\n        // Threshold for continuity correction is 0.5\n        final double P_VAL_THRESHOLD = 0.5;\n\n        final double z;\n        // If |Umin - EU| is less than or equal to 0.5, the corrected z-score is 0.\n        // This results in a p-value of 1.0.\n        if (T <= P_VAL_THRESHOLD) {\n            z = 0.0;\n        } else {\n            // Calculate the z-score with continuity correction: (|Umin - EU| - 0.5) / sqrt(VarU)\n            // Note: This z value will be non-negative.\n            z = (T - P_VAL_THRESHOLD) / FastMath.sqrt(VarU);\n        }\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        // Calculate the two-sided p-value: 2 * P(Z >= z)\n        // Since Z is standard normal and z >= 0, this is 2 * P(Z <= -z)\n        return 2 * standardNormal.cumulativeProbability(-z);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}