{
    "generation": "    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final int n1n2prod = n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        // Correct two-sided p-value calculation:\n        // For a two-sided test, the p-value is 2 * P(Z > |z|).\n        // This is equivalent to 2 * (1 - P(Z <= |z|)).\n        // The original code was 2 * standardNormal.cumulativeProbability(z),\n        // which is incorrect if z > 0 (it would yield a p-value > 1).\n        // For z < 0, standardNormal.cumulativeProbability(z) is P(Z <= z).\n        // By symmetry, P(Z <= z) = P(Z >= -z) = 1 - P(Z <= -z).\n        // So, 2 * P(Z <= z) = 2 * (1 - P(Z <= -z)) = 2 * P(Z >= -z).\n        // Using FastMath.abs(z) makes the formula robust for both positive and negative z.\n        return 2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)));\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}