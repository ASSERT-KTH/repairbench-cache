{
    "generation": "import org.apache.commons.math3.distribution.NormalDistribution;\nimport org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.util.FastMath;\n\n// Note: The surrounding class definition is omitted as requested.\n// Only the fixed function is provided below.\n\n    /**\n     * Calculates the asymptotic p-value for the Mann-Whitney U test using the normal approximation.\n     * Includes continuity correction.\n     *\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error (from NormalDistribution)\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded (from NormalDistribution)\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        // Prevent division by zero or negative results if n1 or n2 are invalid.\n        // Behavior for n1=0 or n2=0 is somewhat undefined for U test.\n        // Returning NaN or 1.0 might be options. Let's assume n1, n2 > 0 based on typical usage.\n        // If n1*n2 = 0, VarU will be 0.\n\n        // Use long for product to prevent intermediate integer overflow\n        final long n1n2prod = (long) n1 * n2;\n\n        // Avoid division by zero if n1 or n2 is 0\n        if (n1n2prod == 0) {\n             // If samples are empty, p-value is arguably 1 or undefined. Return 1.0 for consistency.\n             return 1.0;\n        }\n\n\n        // Calculate the expected value of U\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n\n        // Calculate the variance of U. Use double arithmetic throughout to prevent overflow.\n        // The variance formula used assumes no ties. If ties are present, the variance\n        // should be adjusted by the calling method, or this method adapted.\n        final double VarU = (n1n2prod / 12.0) * ((double)n1 + n2 + 1);\n\n        // If variance is zero (e.g., degenerate case n1+n2+1 <= 0, which is impossible for positive n1, n2),\n        // handle appropriately. This check mainly covers VarU being exactly 0.0 due to n1 or n2 being 0,\n        // already handled by the n1n2prod check. Adding safety check for sd.\n        final double sd = FastMath.sqrt(VarU);\n        if (sd == 0) {\n            // Variance is zero, comparison is exact. P-value is 1 if Umin == EU, 0 otherwise?\n            // Or treat as undefined/1.0. Let's return 1.0 as no variance means no deviation.\n            return 1.0;\n        }\n\n\n        // Calculate the z-score using continuity correction: (|Umin - EU| - 0.5) / sd\n        // This corrected z-score represents the deviation for a one-sided test in the upper tail.\n        final double absDiff = FastMath.abs(Umin - EU);\n        final double zCorrected;\n\n        // If Umin is very close to the mean (difference <= 0.5), the continuity correction\n        // results in a non-positive numerator. The z-score is effectively 0.\n        if (absDiff <= 0.5) {\n            zCorrected = 0.0;\n        } else {\n            zCorrected = (absDiff - 0.5) / sd;\n        }\n\n        // Use standard normal distribution (mean=0, sd=1)\n        // Using the default constructor is fine as it implies N(0,1)\n        final NormalDistribution standardNormal = new NormalDistribution(null, 0, 1, NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n\n        // Calculate the two-sided p-value: 2 * P(Z >= zCorrected) where Z ~ N(0,1)\n        // Since zCorrected >= 0, P(Z >= zCorrected) = P(Z <= -zCorrected) by symmetry.\n        return 2 * standardNormal.cumulativeProbability(-zCorrected);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}