{
    "generation": "    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        // The product n1 * n2 * (n1 + n2 + 1) can overflow if n1 and n2 are large ints.\n        // Cast to double early to prevent this intermediate integer overflow.\n        final double EU = (double)n1 * n2 / 2.0;\n        final double VarU = (double)n1 * n2 * (n1 + n2 + 1) / 12.0;\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        // For a two-sided test, the p-value is 2 * P(Z <= -|z|).\n        // Since Umin is chosen as the smaller of the two U values,\n        // (Umin - EU) will always be less than or equal to 0,\n        // so z will always be less than or equal to 0.\n        // Therefore, standardNormal.cumulativeProbability(z) correctly gives P(Z <= z)\n        // which is equivalent to P(Z <= -|z|).\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}