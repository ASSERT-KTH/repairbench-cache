{
    "generation": "    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final int n1n2prod = n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        // For a two-sided test, the p-value is the probability of observing a Z-score\n        // as extreme or more extreme than the calculated 'z' in either direction.\n        // This is given by P(|Z| >= |z|), which is 2 * P(Z > |z|) or 2 * (1 - P(Z <= |z|)).\n        //\n        // In the Mann-Whitney U test, when Umin is chosen as the smaller of the two U statistics,\n        // it holds that Umin <= EU. Consequently, 'z' will always be less than or equal to 0.\n        // In this specific case, FastMath.abs(z) is equal to -z.\n        //\n        // Therefore, the original code `2 * standardNormal.cumulativeProbability(z)` is\n        // theoretically equivalent to `2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)))`\n        // due to the symmetry of the normal distribution: P(Z <= x) = 1 - P(Z <= -x).\n        // For z <= 0, P(Z <= z) = 1 - P(Z <= -z) = 1 - P(Z <= |z|).\n        //\n        // However, using the form `2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)))`\n        // is generally more robust for calculating two-sided p-values from a Z-score,\n        // as it handles both positive and negative 'z' values correctly without conditional logic.\n        // It can also sometimes offer better numerical stability for 'z' values very close to zero.\n        return 2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}