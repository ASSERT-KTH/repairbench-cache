{
    "generation": "    /**\n     * @param Umin smallest Mann-Whitney U value\n     * @param n1 number of subjects in first sample\n     * @param n2 number of subjects in second sample\n     * @return two-sided asymptotic p-value\n     * @throws ConvergenceException if the p-value can not be computed\n     * due to a convergence error\n     * @throws MaxCountExceededException if the maximum number of\n     * iterations is exceeded\n     */\n    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        // Calculate n1 * n2 using long to prevent overflow for large n1, n2\n        final long n1n2prod = (long)n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n\n        // Calculate variance: VarU = n1 * n2 * (n1 + n2 + 1) / 12.0\n        // Use long for intermediate calculations to prevent overflow\n        // The sum (n1 + n2 + 1) can overflow int, cast needed.\n        // The product n1n2prod * nSum can overflow long, so use double arithmetic carefully.\n        final long nSum = (long)n1 + n2 + 1;\n        final double VarU = n1n2prod / 12.0 * nSum; // Calculate N1*N2 / 12.0 first to prevent long overflow\n\n        // Ensure VarU is positive to avoid issues with sqrt.\n        // Variance should theoretically be positive unless n1 or n2 is 0,\n        // or in degenerate cases, but floating point issues could arise.\n        // If VarU is non-positive, the normal approximation is likely invalid.\n        // However, proceeding might lead to NaN or errors. The original code\n        // didn't explicitly handle this, so we follow suit but are aware.\n        // A VarU of 0 would imply Umin = EU, z = 0/0 (NaN) or (non-zero)/0 (Inf).\n        // If Umin=EU, p should be 1. If Umin!=EU and VarU=0, p should be 0? Needs clarification.\n        // For now, assume VarU > 0 for valid inputs.\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        // Use standard normal distribution to calculate tail probability\n        // TODO: Reuse standardNormal instance if performance critical\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        // Two-sided p-value is 2 * P(Z <= z), since Umin is used, z <= 0.\n        return 2 * standardNormal.cumulativeProbability(z);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}