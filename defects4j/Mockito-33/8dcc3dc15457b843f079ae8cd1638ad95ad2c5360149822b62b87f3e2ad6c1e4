{
    "generation": "    public boolean hasSameMethod(Invocation candidate) {        \n        //not using method.equals() for 1 good reason:\n        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n        \n        // The original comment indicates that Method.equals() is too strict for Mockito's purpose,\n        // especially when dealing with generics, inherited methods, and JVM-generated bridge/forwarding methods.\n        // Method.equals() considers the declaring class, which can differ for logically the same method\n        // (e.g., an interface method vs. its implementation, or a superclass method vs. its override in a subclass).\n        // For Mockito to correctly match invocations for stubbing and verification, methods\n        // are considered \"the same\" if they have the same name and the same parameter types,\n        // regardless of their declaring class or whether one is a synthetic bridge method.\n\n        // Compare method names\n        if (!m1.getName().equals(m2.getName())) {\n            return false;\n        }\n\n        // Compare parameter types\n        Class<?>[] params1 = m1.getParameterTypes();\n        Class<?>[] params2 = m2.getParameterTypes();\n\n        if (params1.length != params2.length) {\n            return false;\n        }\n\n        for (int i = 0; i < params1.length; i++) {\n            if (!params1[i].equals(params2[i])) {\n                return false;\n            }\n        }\n\n        // If names and parameter types match, they are considered the same logical method\n        // for the purpose of matching invocations in Mockito.\n        // This handles cases where Method.equals() would fail due to differing declaring classes\n        // or other subtle differences related to generics and inheritance that Mockito needs to ignore.\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}