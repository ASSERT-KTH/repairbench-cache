{
    "generation": "public boolean hasSameMethod(Invocation candidate) {        \n    // not using method.equals() for 1 good reason:\n    // sometimes java generates forwarding methods when generics are in play, see JavaGenericsForwardingMethodsTest\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n\n    // Two methods are considered equivalent if they have the same name and parameter types and declaring class is assignable from one another\n    if (m1.equals(m2)) {\n        return true;\n    }\n    if (m1.getName().equals(m2.getName())) {\n        Class<?>[] paramTypes1 = m1.getParameterTypes();\n        Class<?>[] paramTypes2 = m2.getParameterTypes();\n        if (Arrays.equals(paramTypes1, paramTypes2)) {\n            // Accept if one method is declared in a superclass/interface of the other method's declaring class\n            if (m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass()) ||\n                m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}