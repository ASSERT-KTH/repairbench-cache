{
    "generation": "    public boolean hasSameMethod(Invocation candidate) {\n        //not using method.equals() for 1 good reason:\n        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n\n        /* Avoid unnecessary cloning */\n        if (m1 == m2) {\n            return true;\n        }\n\n        // Check if the methods are equal, accounting for generics forwarding\n        if (!m1.getName().equals(m2.getName())) {\n            return false;\n        }\n        if (!Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {\n            return false;\n        }\n        // Check return type which can differ in generic cases\n        if (!m1.getReturnType().equals(m2.getReturnType())) {\n            return false;\n        }\n        // Check declaring class which might differ due to generics\n        if (!m1.getDeclaringClass().equals(m2.getDeclaringClass())) {\n            // But we need to allow cases where one is a bridge method generated by the compiler\n            if (!isBridgeMethod(m1) || !isBridgeMethod(m2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private boolean isBridgeMethod(Method method) {\n        return method.isBridge();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}