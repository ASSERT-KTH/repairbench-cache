{
    "generation": "    public boolean hasSameMethod(Invocation candidate) {        \n        // The original comment states:\n        // \"not using method.equals() for 1 good reason:\n        // sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\"\n        // However, the original code used `return m1.equals(m2);`, which directly contradicted this comment.\n        //\n        // Method.equals() is too strict for Mockito's needs because it considers the declaring class.\n        // In polymorphic scenarios (e.g., method overriding or interface implementation),\n        // a method invoked through a supertype or interface might yield a `Method` object\n        // with a different declaring class than the method stubbed on the concrete type,\n        // even if they represent the same logical operation.\n        //\n        // To correctly handle these cases (including those involving bridge methods\n        // where parameter types are not affected by type erasure, like `iterator()`),\n        // we need a comparison that focuses on the method's signature: its name and parameter types.\n\n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n        \n        // 1. Compare method names\n        if (!m1.getName().equals(m2.getName())) {\n            return false;\n        }\n\n        // 2. Compare parameter types\n        Class<?>[] params1 = m1.getParameterTypes();\n        Class<?>[] params2 = m2.getParameterTypes();\n\n        if (params1.length != params2.length) {\n            return false;\n        }\n\n        // Iterate and compare each parameter type\n        for (int i = 0; i < params1.length; i++) {\n            // Class.equals() correctly compares Class objects\n            if (!params1[i].equals(params2[i])) {\n                return false;\n            }\n        }\n        \n        // If both the method name and all parameter types match,\n        // the methods are considered the same for the purpose of invocation matching\n        // within Mockito, resolving the issue of `Method.equals()` being too strict.\n        return true;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}