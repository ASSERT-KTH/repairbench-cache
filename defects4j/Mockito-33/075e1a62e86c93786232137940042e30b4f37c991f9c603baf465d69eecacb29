{
    "generation": "    public boolean hasSameMethod(Invocation candidate) {\n        // not using method.equals() for 1 good reason:\n        // sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n\n        // Check for direct equality first (performance optimization)\n        if (m1.equals(m2)) {\n            return true;\n        }\n\n        // Bridge methods have the same name and parameter types (after erasure)\n        // but potentially different declaring class or return type.\n        // We need to compare the methods based on their signature relevant for invocation matching.\n\n        // Compare method names\n        if (!m1.getName().equals(m2.getName())) {\n            return false;\n        }\n\n        // Compare parameter types (erased types)\n        Class<?>[] params1 = m1.getParameterTypes();\n        Class<?>[] params2 = m2.getParameterTypes();\n        if (params1.length != params2.length) {\n            return false;\n        }\n        for (int i = 0; i < params1.length; i++) {\n            if (!params1[i].equals(params2[i])) {\n                return false;\n            }\n        }\n\n        // If name and parameter types match, consider them the same for mocking purposes.\n        // This handles scenarios with bridge methods where Method.equals() would return false\n        // due to differing declaring classes or return types (due to covariance).\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}