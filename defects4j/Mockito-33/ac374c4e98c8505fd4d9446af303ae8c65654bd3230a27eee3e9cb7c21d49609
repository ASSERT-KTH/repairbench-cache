{
    "generation": "public boolean hasSameMethod(Invocation candidate) {        \n    //not using method.equals() for 1 good reason:\n    //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n    \n    // Bridge methods are generated by the compiler when dealing with type parameters and generics.\n    // For our purposes, these methods should be considered equal to the original method.\n    if (m1.isBridge() != m2.isBridge()) {\n        // If one is a bridge method and the other is not, we need to compare the original methods.\n        if (m1.isBridge()) {\n            m1 = getOriginalMethod(m1);\n        } else {\n            m2 = getOriginalMethod(m2);\n        }\n    }\n    \n    /* Avoid unnecessary cloning */\n    return m1.equals(m2);\n}\n\n// Helper method to get the original method if the given method is a bridge method.\nprivate Method getOriginalMethod(Method method) {\n    Method originalMethod = null;\n    for (Method m : method.getDeclaringClass().getMethods()) {\n        if (m.getName().equals(method.getName()) \n                && Arrays.equals(m.getParameterTypes(), method.getParameterTypes()) \n                && !m.isBridge()) {\n            originalMethod = m;\n            break;\n        }\n    }\n    return originalMethod != null ? originalMethod : method;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}