{
    "generation": "public boolean hasSameMethod(Invocation candidate) {        \n    //not using method.equals() for 1 good reason:\n    //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n\n    if (m1.equals(m2)) {\n        return true;\n    }\n\n    // check if methods have the same name and are declared in interfaces implemented by the same class hierarchy\n    if (!m1.getName().equals(m2.getName())) {\n        return false;\n    }\n\n    if (!Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {\n        return false;\n    }\n\n    // One method might be a bridge (generated by the compiler)\n    // Accept methods with same signature name and params, even if declared in different classes/interfaces\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}