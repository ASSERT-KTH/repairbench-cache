{
    "generation": "public boolean hasSameMethod(Invocation candidate) {        \n    // Sometimes Java generates forwarding methods when generics are in play,\n    // so equals() may fail even if they are considered the same in practice.\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n\n    if (m1.equals(m2)) {\n        return true;\n    }\n\n    // compare by name and parameter types (and declaring class compatibility)\n    if (m1.getName().equals(m2.getName())) {\n        Class<?>[] params1 = m1.getParameterTypes();\n        Class<?>[] params2 = m2.getParameterTypes();\n        if (params1.length == params2.length) {\n            boolean sameParams = true;\n            for (int i = 0; i < params1.length; i++) {\n                if (!params1[i].equals(params2[i])) {\n                    sameParams = false;\n                    break;\n                }\n            }\n            if (sameParams) {\n                // check if one method can be seen as overriding the other (declaring classes)\n                if (m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass()) ||\n                        m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass())) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}