{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize() {\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n        final double lo = getMin();\n        final double mid = getStartValue();\n        final double hi = getMax();\n\n        // Optional additional convergence criteria.\n        final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();\n\n        double a;\n        double b;\n        if (lo < hi) {\n            a = lo;\n            b = hi;\n        } else {\n            a = hi;\n            b = lo;\n        }\n\n        double x = mid; // Current best point's abscissa for Brent's internal state\n        double v = x;   // Second best point's abscissa for Brent's internal state\n        double w = x;   // Third best point's abscissa for Brent's internal state\n        double d = 0;   // Distance for parabolic step\n        double e = 0;   // Previous distance for parabolic step\n\n        // Evaluate the objective function at the initial guess 'x' (mid).\n        // This is the original objective value of f(x).\n        final double fxOrig = computeObjectiveValue(x);\n        // fx will be transformed for internal use (minimization logic of Brent's).\n        double fx = fxOrig;\n        if (!isMinim) {\n            fx = -fx; // Transform for internal minimization (negate for maximization goal)\n        }\n        // Initialize other function values with the transformed fx\n        double fv = fx;\n        double fw = fx;\n\n        // Initialize the overall best point found so far.\n        // This MUST store the ORIGINAL objective value.\n        UnivariatePointValuePair optimum = new UnivariatePointValuePair(x, fxOrig);\n\n        // Variables for the convergence checker. They also store ORIGINAL objective values.\n        // 'current' starts as the initial optimum. 'previous' will be set in the first iteration.\n        UnivariatePointValuePair previous = null;\n        UnivariatePointValuePair current = optimum;\n\n        int iter = 0;\n        while (true) {\n            final double m = 0.5 * (a + b);\n            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\n            final double tol2 = 2 * tol1;\n\n            // Default stopping criterion.\n            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\n            if (!stop) {\n                double p = 0;\n                double q = 0;\n                double r = 0;\n                double u = 0; // Candidate point for next evaluation\n\n                if (FastMath.abs(e) > tol1) { // Fit parabola.\n                    r = (x - w) * (fx - fv);\n                    q = (x - v) * (fx - fw);\n                    p = (x - v) * q - (x - w) * r;\n                    q = 2 * (q - r);\n\n                    if (q > 0) {\n                        p = -p;\n                    } else {\n                        q = -q;\n                    }\n\n                    r = e;\n                    e = d;\n\n                    if (p > q * (a - x) &&\n                        p < q * (b - x) &&\n                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {\n                        // Parabolic interpolation step.\n                        d = p / q;\n                        u = x + d;\n\n                        // f must not be evaluated too close to a or b.\n                        if (u - a < tol2 || b - u < tol2) {\n                            if (x <= m) {\n                                d = tol1;\n                            } else {\n                                d = -tol1;\n                            }\n                        }\n                    } else {\n                        // Golden section step.\n                        if (x < m) {\n                            e = b - x;\n                        } else {\n                            e = a - x;\n                        }\n                        d = GOLDEN_SECTION * e;\n                    }\n                } else {\n                    // Golden section step.\n                    if (x < m) {\n                        e = b - x;\n                    } else {\n                        e = a - x;\n                    }\n                    d = GOLDEN_SECTION * e;\n                }\n\n                // Update by at least \"tol1\".\n                if (FastMath.abs(d) < tol1) {\n                    if (d >= 0) {\n                        u = x + tol1;\n                    } else {\n                        u = x - tol1;\n                    }\n                } else {\n                    u = x + d;\n                }\n\n                // Evaluate the objective function at the new candidate point 'u'.\n                // This is the original objective value of f(u).\n                final double fuOrig = computeObjectiveValue(u);\n                // fu will be transformed for internal use.\n                double fu = fuOrig;\n                if (!isMinim) {\n                    fu = -fu; // Transform for internal minimization\n                }\n\n                // Update 'previous' and 'current' for the user-defined convergence checker.\n                // These points store ORIGINAL objective values.\n                previous = current;\n                current = new UnivariatePointValuePair(u, fuOrig);\n\n                // Update the overall best point encountered so far.\n                // Comparison is based on the ORIGINAL objective values.\n                if (isMinim) {\n                    if (current.getValue() < optimum.getValue()) {\n                        optimum = current;\n                    }\n                } else { // Maximization\n                    if (current.getValue() > optimum.getValue()) {\n                        optimum = current;\n                    }\n                }\n\n                if (checker != null) {\n                    if (checker.converged(iter, previous, current)) {\n                        // If convergence is met, return the overall best point found.\n                        return optimum;\n                    }\n                }\n\n                // Update a, b, v, w and x for Brent's algorithm's internal state.\n                // These variables (fx, fv, fw, fu) hold the TRANSFORMED function values.\n                if (fu <= fx) { // fu is better than fx (transformed values)\n                    if (u < x) {\n                        b = x;\n                    } else {\n                        a = x;\n                    }\n                    v = w;\n                    fv = fw;\n                    w = x;\n                    fw = fx;\n                    x = u;\n                    fx = fu;\n                } else { // fu is NOT better than fx\n                    if (u < x) {\n                        a = u;\n                    } else {\n                        b = u;\n                    }\n                    // Update v, w if u is better than them (transformed values)\n                    if (fu <= fw || Precision.equals(w, x)) {\n                        v = w;\n                        fv = fw;\n                        w = u;\n                        fw = fu;\n                    } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {\n                        v = u;\n                        fv = fu;\n                    }\n                }\n            } else { // Default termination (Brent's criterion).\n                // If default termination is met, return the overall best point found.\n                return optimum;\n            }\n            ++iter;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}