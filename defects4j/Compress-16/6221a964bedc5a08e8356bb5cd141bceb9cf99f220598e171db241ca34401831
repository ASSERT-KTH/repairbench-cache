{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    try {\n        // 1) ZIP, JAR, AR, CPIO signatures\n        byte[] signature = new byte[12];\n        in.mark(signature.length);\n        int signatureLength = in.read(signature);\n        in.reset();\n\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        // 2) Dump signature (needs 32 bytes)\n        byte[] dumpsig = new byte[32];\n        in.mark(dumpsig.length);\n        signatureLength = in.read(dumpsig);\n        in.reset();\n        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        // 3) TAR signature (ustar)\n        byte[] tarheader = new byte[512];\n        in.mark(tarheader.length);\n        signatureLength = in.read(tarheader);\n        in.reset();\n        if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n            return new TarArchiveInputStream(in);\n        }\n\n        // 4) Fallback for old-style TAR: verify the header checksum\n        if (signatureLength >= tarheader.length) {\n            final int checksumOffset = 148;\n            final int checksumLength = 8;\n            int idx = checksumOffset;\n            // skip leading spaces & NULs\n            while (idx < checksumOffset + checksumLength\n                   && (tarheader[idx] == 0 || tarheader[idx] == ' ')) {\n                idx++;\n            }\n            long recorded = 0;\n            boolean hasDigits = false;\n            // parse octal digits\n            while (idx < checksumOffset + checksumLength\n                   && tarheader[idx] >= '0' && tarheader[idx] <= '7') {\n                hasDigits = true;\n                recorded = (recorded << 3) + (tarheader[idx] - '0');\n                idx++;\n            }\n            if (hasDigits) {\n                long computed = 0;\n                for (int i = 0; i < tarheader.length; i++) {\n                    // treat the checksum field as spaces\n                    if (i >= checksumOffset && i < checksumOffset + checksumLength) {\n                        computed += ' ';\n                    } else {\n                        computed += tarheader[i] & 0xFF;\n                    }\n                }\n                // allow exact match or off by one (GNU tar)\n                if (recorded == computed\n                        || (recorded >= computed - 1 && recorded <= computed + 1)) {\n                    return new TarArchiveInputStream(in);\n                }\n            }\n        }\n\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}