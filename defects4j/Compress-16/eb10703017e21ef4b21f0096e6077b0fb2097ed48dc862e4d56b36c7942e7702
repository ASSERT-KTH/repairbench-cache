{
    "generation": "import java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.commons.compress.archivers.ArchiveException;\nimport org.apache.commons.compress.archivers.ArchiveInputStream;\nimport org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\nimport org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\nimport org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;\nimport org.apache.commons.compress.archivers.jar.JarArchiveInputStream;\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\nimport org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n\n// Note: This is the context required for the function to compile.\n// The fix is only within the createArchiveInputStream method itself.\npublic class ArchiveStreamFactory {\n\n    /**\n     * Create an archive input stream from an input stream, autodetecting\n     * the archive type from the first few bytes of the stream. The InputStream\n     * must support marks, like BufferedInputStream.\n     *\n     * @param in the input stream\n     * @return the archive input stream\n     * @throws ArchiveException if the archiver name is not known or reading the signature fails\n     * @throws IllegalArgumentException if the stream is null or does not support mark\n     */\n    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException {\n        if (in == null) {\n            throw new IllegalArgumentException(\"Stream must not be null.\");\n        }\n\n        if (!in.markSupported()) {\n            throw new IllegalArgumentException(\"Mark is not supported.\");\n        }\n\n        final byte[] signature = new byte[12];\n        in.mark(signature.length);\n        int signatureLength = -1; // Initialize with a value that cannot be valid\n        try {\n            signatureLength = in.read(signature);\n            in.reset();\n\n            if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                return new ZipArchiveInputStream(in);\n            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                return new JarArchiveInputStream(in);\n            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n                return new ArArchiveInputStream(in);\n            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n                return new CpioArchiveInputStream(in);\n            }\n\n            // Dump needs a bigger buffer to check the signature;\n            final byte[] dumpsig = new byte[32];\n            in.mark(dumpsig.length);\n            // Re-assign signatureLength, previous value is not used anymore\n            signatureLength = in.read(dumpsig);\n            in.reset();\n            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n                return new DumpArchiveInputStream(in);\n            }\n\n            // Tar needs an even bigger buffer to check the signature; read the first block\n            final byte[] tarheader = new byte[512];\n            in.mark(tarheader.length);\n            // Re-assign signatureLength, previous value is not used anymore\n            signatureLength = in.read(tarheader);\n            in.reset();\n\n            // First check based on signature only\n            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n                 return new TarArchiveInputStream(in);\n            }\n\n            // COMPRESS-117/-191: If signature match failed, try stronger check by parsing header\n            // This needs the full 512 byte block.\n            if (signatureLength >= 512) {\n                TarArchiveInputStream tais = null;\n                try {\n                    // We create a temporary stream to read the header block\n                    // to verify the checksum calculation.\n                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                    // COMPRESS-191 - verify the header checksum by trying to read the first entry\n                    if (tais.getNextEntry() != null) {\n                        // Checksum calculation successful, and found an entry, this is likely a TAR archive.\n                        // Return the stream for the original input, not the temporary stream\n                        return new TarArchiveInputStream(in);\n                    }\n                    // else: getNextEntry() returned null. This might mean an empty archive.\n                    // However, TarArchiveInputStream.matches should have identified it\n                    // if it had a valid header for an empty archive. If we are here,\n                    // it is likely not a TAR archive -> do not return a TAR stream.\n                } catch (Exception e) { // NOPMD\n                    // IllegalArgumentException or IOException: Header is not valid (e.g., checksum error)\n                    // This indicates it is not a TAR archive.\n                    // Ignore the exception, and proceed to the final exception throw.\n                } finally {\n                    // Close the temporary stream used for header validation\n                    if (tais != null) {\n                        try {\n                            tais.close();\n                        } catch (IOException ignored) { // NOPMD\n                            // Closing ByteArrayInputStream should not throw, ignore anyway\n                        }\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n\n        throw new ArchiveException(\"No Archiver found for the stream signature\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}