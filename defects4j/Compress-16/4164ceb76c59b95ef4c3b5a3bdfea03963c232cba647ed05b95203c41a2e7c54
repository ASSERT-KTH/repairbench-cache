{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[12];\n    in.mark(signature.length);\n    int signatureLength;\n    try {\n        signatureLength = in.read(signature);\n        in.reset();\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n    if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n        return new ZipArchiveInputStream(in);\n    } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n        return new JarArchiveInputStream(in);\n    } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n        return new ArArchiveInputStream(in);\n    } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n        return new CpioArchiveInputStream(in);\n    }\n\n    final byte[] dumpsig = new byte[32];\n    in.mark(dumpsig.length);\n    try {\n        signatureLength = in.read(dumpsig);\n        in.reset();\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n    if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n        return new DumpArchiveInputStream(in);\n    }\n\n    /*\n     * Instead of relying solely on TarArchiveInputStream.matches (which can be too lenient and\n     * mistakenly match an AIFF file, for example), we now verify the tar header by reading the\n     * first 512 bytes and trying to extract an entry. Only if an entry is found do we return a\n     * TarArchiveInputStream.\n     */\n    final byte[] tarheader = new byte[512];\n    in.mark(tarheader.length);\n    try {\n        signatureLength = in.read(tarheader);\n        in.reset();\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n    if (signatureLength >= tarheader.length) {\n        try (ByteArrayInputStream bais = new ByteArrayInputStream(tarheader)) {\n            TarArchiveInputStream tais = new TarArchiveInputStream(bais);\n            ArchiveEntry entry = tais.getNextEntry();\n            if (entry != null) {\n                return new TarArchiveInputStream(in);\n            }\n        } catch (Exception e) {\n            // Not a valid TAR archive; fall through.\n        }\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}