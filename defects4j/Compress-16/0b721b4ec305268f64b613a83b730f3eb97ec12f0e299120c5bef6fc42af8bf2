{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[12];\n    in.mark(signature.length);\n    try {\n        int signatureLength = in.read(signature);\n        in.reset();\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        // Check for Dump archive (needs a bigger buffer).\n        final byte[] dumpsig = new byte[32];\n        in.mark(dumpsig.length);\n        signatureLength = in.read(dumpsig);\n        in.reset();\n        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        // Tar archives require a full 512-byte block to reliably check the header.\n        final byte[] tarHeader = new byte[512];\n        in.mark(tarHeader.length);\n        signatureLength = in.read(tarHeader);\n        in.reset();\n        if (signatureLength < tarHeader.length) {\n            throw new ArchiveException(\"No Archiver found for the stream signature\");\n        }\n        // Instead of immediately accepting a match (which may be too lenient),\n        // we verify the tar header checksum by attempting to read the first entry.\n        try {\n            TarArchiveInputStream tarTester = new TarArchiveInputStream(\n                    new ByteArrayInputStream(tarHeader));\n            if (tarTester.getNextEntry() != null) {\n                return new TarArchiveInputStream(in);\n            }\n        } catch (Exception e) { // NOPMD: Exception indicates it's not a valid TAR\n            // Not a TAR archive; fall through.\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}