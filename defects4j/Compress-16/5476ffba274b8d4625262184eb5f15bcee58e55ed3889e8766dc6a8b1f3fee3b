{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final int tarHeaderSize = 512;\n    byte[] signature = new byte[tarHeaderSize];\n    in.mark(tarHeaderSize);\n    try {\n        int bytesRead = in.read(signature);\n        in.reset();\n\n        if (ZipArchiveInputStream.matches(signature, bytesRead)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, bytesRead)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, bytesRead)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, bytesRead)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        if (bytesRead >= 32 && DumpArchiveInputStream.matches(signature, bytesRead)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        if (bytesRead >= tarHeaderSize) {\n            // Check for Tar file with proper header validation\n            if (TarArchiveInputStream.matches(signature, bytesRead)) {\n                return new TarArchiveInputStream(in);\n            }\n            // Additional checks for specific Tar variations if necessary\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}