{
    "generation": "    /**\n     * Create an archive input stream from an input stream, autodetecting\n     * the archive type from the first few bytes of the stream. The InputStream\n     * must support marks, like BufferedInputStream.\n     *\n     * @param in the input stream\n     * @return the archive input stream\n     * @throws ArchiveException if the archiver name is not known\n     * @throws IllegalArgumentException if the stream is null or does not support mark\n     */\n    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException {\n        if (in == null) {\n            throw new IllegalArgumentException(\"Stream must not be null.\");\n        }\n\n        if (!in.markSupported()) {\n            throw new IllegalArgumentException(\"Mark is not supported.\");\n        }\n\n        final byte[] signature = new byte[12];\n        in.mark(signature.length);\n        int signatureLength = -1; // Ensure signatureLength is initialized\n        try {\n            signatureLength = in.read(signature); // Reads up to 12 bytes\n            in.reset();\n        } catch (IOException e) {\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n\n        // Check EOF or error reading signature\n        if (signatureLength == -1) {\n             throw new ArchiveException(\"Could not read signature.\");\n        }\n\n        // Standard signature checks based on the first few bytes read\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        // Dump needs a bigger buffer (32 bytes)\n        final byte[] dumpsig = new byte[32];\n        in.mark(dumpsig.length);\n        int dumpSigLen = -1; // Ensure initialized\n        try {\n            // Re-read, potentially getting more data than the initial 12 bytes\n            dumpSigLen = in.read(dumpsig); // Reads up to 32 bytes\n            in.reset();\n        } catch (IOException e) {\n             // Propagate IOExceptions related to mark/reset/read\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n        // Let DumpArchiveInputStream.matches decide if dumpSigLen is sufficient\n        if (DumpArchiveInputStream.matches(dumpsig, dumpSigLen)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        // Tar needs an even bigger buffer (512 bytes for the header block)\n        final byte[] tarHeader = new byte[512];\n        in.mark(tarHeader.length);\n        int tarHeaderLen = -1; // Ensure initialized\n        try {\n            // Re-read again, attempting to get the full 512 bytes\n            tarHeaderLen = in.read(tarHeader); // Reads up to 512 bytes\n            in.reset();\n        } catch (IOException e) {\n             // Propagate IOExceptions related to mark/reset/read\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n        // Let TarArchiveInputStream.matches decide if tarHeaderLen is sufficient for standard magic check\n        if (TarArchiveInputStream.matches(tarHeader, tarHeaderLen)) {\n            return new TarArchiveInputStream(in);\n        }\n\n        // COMPRESS-117/-191: Improved TAR detection fallback.\n        // This part tries to parse the first 512 bytes as a TAR header\n        // even if the standard 'ustar' magic is missing.\n        // Check if we actually read enough bytes for a potential TAR header block.\n        if (tarHeaderLen >= 512) {\n            TarArchiveInputStream tais = null;\n            try {\n                // Create a temporary TAR stream based on the read header bytes\n                tais = new TarArchiveInputStream(new ByteArrayInputStream(tarHeader));\n                // COMPRESS-191: Verify header checksum and structure by trying to read the first entry.\n                // To avoid false positives (like identifying AIFF as TAR),\n                // check if getNextEntry() actually returns a non-null entry.\n                if (tais.getNextEntry() != null) {\n                    // Success: It parsed like a TAR header and found an entry.\n                    // Return a new Tar stream based on the original input stream.\n                    return new TarArchiveInputStream(in);\n                }\n                // Else: getNextEntry() returned null (e.g., empty TAR, or end of stream reached unexpectedly)\n                // or succeeded strangely without finding an entry.\n                // We don't consider it a match here to avoid false positives. Fall through.\n            } catch (Exception e) { // NOPMD\n                // Catches IOException, IllegalArgumentException etc. from the TarArchiveInputStream constructor\n                // or getNextEntry() attempt (e.g., invalid checksum, bad header format).\n                // Indicates it's not a valid TAR header.\n                // Autodetection: simply not a TAR, ignored. Fall through.\n            } finally {\n                 // Ensure the temporary stream is closed (though for ByteArrayInputStream it's a no-op)\n                 if (tais != null) {\n                     try { tais.close(); } catch (IOException ignored) {} // NOPMD\n                 }\n            }\n        }\n\n        // If all signature checks and fallbacks fail\n        throw new ArchiveException(\"No Archiver found for the stream signature\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}