{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[12];\n    in.mark(signature.length);\n    try {\n        int signatureLength = in.read(signature);\n        in.reset();\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        final byte[] dumpsig = new byte[32];\n        in.mark(dumpsig.length);\n        signatureLength = in.read(dumpsig);\n        in.reset();\n        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        // Tar needs an even bigger buffer to check the signature; read the first block\n        final byte[] tarheader = new byte[512];\n        in.mark(tarheader.length);\n        signatureLength = in.read(tarheader);\n        in.reset();\n        if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n            return new TarArchiveInputStream(in);\n        }\n\n        // COMPRESS-117 - improve auto-recognition: detect old (V7) tar by header checksum\n        if (signatureLength >= 512) {\n            // parse the stored checksum (octal) from header[148..155]\n            long stored = 0;\n            boolean foundDigit = false;\n            for (int i = 148; i < 156; i++) {\n                byte b = tarheader[i];\n                if (b >= '0' && b <= '7') {\n                    foundDigit = true;\n                    stored = (stored << 3) + (b - '0');\n                } else if (foundDigit) {\n                    break;\n                }\n            }\n            if (foundDigit) {\n                // compute the checksum by treating the checksum field as spaces (0x20)\n                long sum = 0;\n                for (int i = 0; i < tarheader.length; i++) {\n                    if (i >= 148 && i < 156) {\n                        sum += 0x20;\n                    } else {\n                        sum += tarheader[i] & 0xFF;\n                    }\n                }\n                if (sum == stored) {\n                    return new TarArchiveInputStream(in);\n                }\n            }\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}