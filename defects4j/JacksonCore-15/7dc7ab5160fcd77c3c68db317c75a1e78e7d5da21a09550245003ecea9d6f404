{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // If only a single match is allowed and we've already returned one,\n    // with no buffered tokens to flush, terminate immediately:\n    if (!_allowMultipleMatches && _matchCount > 0 && _exposedContext == null) {\n        return (_currToken = null);\n    }\n\n    // Anything buffered?\n    TokenFilterContext ctxt = _exposedContext;\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                // else break out to continue normal parsing\n                break;\n            }\n            // If not, traverse down the context chain\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // No buffered context, read next from the delegate\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        return (_currToken = t);\n    }\n\n    TokenFilter f;\n    switch (t.id()) {\n    case ID_START_ARRAY:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            ++_matchCount;\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            ++_matchCount;\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n        if (_includePath) {\n            JsonToken t2 = _nextTokenWithBuffering(_headContext);\n            if (t2 != null) {\n                _currToken = t2;\n                return t2;\n            }\n        }\n        break;\n\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            ++_matchCount;\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            ++_matchCount;\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n        if (_includePath) {\n            JsonToken t2 = _nextTokenWithBuffering(_headContext);\n            if (t2 != null) {\n                _currToken = t2;\n                return t2;\n            }\n        }\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        {\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if (f != null && f != TokenFilter.INCLUDE_ALL) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            if (returnEnd) {\n                return (_currToken = t);\n            }\n        }\n        break;\n\n    case ID_FIELD_NAME:\n        {\n            final String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        JsonToken t2 = _headContext.nextTokenToRead();\n                        _exposedContext = _headContext;\n                    }\n                }\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n            }\n            if (_includePath) {\n                JsonToken t2 = _nextTokenWithBuffering(_headContext);\n                if (t2 != null) {\n                    _currToken = t2;\n                    return t2;\n                }\n            }\n        }\n        break;\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            ++_matchCount;\n            return (_currToken = t);\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL) || (f != null && f.includeValue(delegate))) {\n                ++_matchCount;\n                return (_currToken = t);\n            }\n        }\n        break;\n    }\n\n    // No token to return yet: continue off-lined handling\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}