{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // Track if a match has been found\n    if (_matchFound) {\n        // Skip until we can return END or no more tokens\n        // This part may need more precise handling depending on nested structures\n        JsonToken t = delegate.nextToken();\n        if (t == null || t.isStructural() && t != JsonToken.FIELD_NAME) {\n            _matchFound = false;\n        }\n        return (_currToken = t);\n    }\n\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                if (t.isFieldName()) {\n                    if (delegate.getCurrentName().equals(\"value\") && !_allowMultipleMatches) {\n                        _matchFound = true;\n                    }\n                } else if (t.isValueToken()) {\n                    _matchFound = true;\n                }\n                return t;\n            }\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { \n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        return (_currToken = t);\n    }\n\n    switch (t.id()) {\n    case ID_START_ARRAY:\n        // ... existing code remains unchanged ...\n    case ID_START_OBJECT:\n        // ... existing code remains unchanged ...\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        // ... existing code remains unchanged ...\n    case ID_FIELD_NAME:\n        {\n            final String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead();\n                        _exposedContext = _headContext;\n                    }\n                }\n                if (name.equals(\"value\") && !_allowMultipleMatches) {\n                    _matchFound = true;\n                }\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                if (name.equals(\"value\") && !_allowMultipleMatches) {\n                    _matchFound = true;\n                }\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n            }\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    if (t.isFieldName() && delegate.getCurrentName().equals(\"value\") && !_allowMultipleMatches) {\n                        _matchFound = true;\n                    } else if (t.isValueToken() && !_allowMultipleMatches) {\n                        _matchFound = true;\n                    }\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n        }\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            if (!_matchFound) {\n                return (_currToken = t);\n            } else {\n                delegate.nextToken();\n                break;\n            }\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL) || (f.includeValue(delegate))) {\n                if (!_matchFound) {\n                    _matchFound = true;\n                    return (_currToken = t);\n                } else {\n                    delegate.nextToken();\n                    break;\n                }\n            }\n        }\n        break;\n    }\n\n    if (_matchFound) {\n        t = delegate.nextToken();\n        if (t == null || t.isStructural()) {\n            _matchFound = false;\n        }\n        return (_currToken = t);\n    }\n\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}