{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // If in 'single match' mode and the match has already been returned,\n        // stop processing and return null.\n        if (_singleMatchAlreadyReturned) {\n            return null;\n        }\n\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    // If in single match mode, check if this token completes the match\n                    if (!_allowMultipleMatches) {\n                        if (t.isScalarValue()) {\n                            // If a scalar value is returned from buffered content,\n                            // and its surrounding context's START token was not handled,\n                            // then this scalar is the final part of a single match.\n                            if (!ctxt.isStartHandled()) {\n                                _singleMatchAlreadyReturned = true;\n                            }\n                        } else if (t.isStructEnd()) {\n                            // If an END token is returned from buffered content,\n                            // and its START was handled, and the context filter was INCLUDE_ALL,\n                            // then this structure is the final part of a single match.\n                            if (ctxt.isStartHandled() && (ctxt.getFilter() == TokenFilter.INCLUDE_ALL)) {\n                                _singleMatchAlreadyReturned = true;\n                            }\n                        }\n                    }\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n                        _currToken = t;\n                        // If this is an END_ARRAY completing a single match\n                        if (!_allowMultipleMatches && ctxt.isStartHandled() && (ctxt.getFilter() == TokenFilter.INCLUDE_ALL)) {\n                            _singleMatchAlreadyReturned = true;\n                        }\n                        return t;\n                    }\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                TokenFilter closingContextFilter = _headContext.getFilter(); // Get filter before changing context\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n\n                if (returnEnd) {\n                    _currToken = t;\n                    // If in single match mode and this END token completes an INCLUDE_ALL context\n                    if (!_allowMultipleMatches && (closingContextFilter == TokenFilter.INCLUDE_ALL)) {\n                        _singleMatchAlreadyReturned = true;\n                    }\n                    return t;\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _currToken = t;\n                // If in single match mode and this scalar value is the final part of a match\n                // (i.e., its containing structure's START token was not explicitly handled/emitted)\n                if (!_allowMultipleMatches && !_headContext.isStartHandled()) {\n                    _singleMatchAlreadyReturned = true;\n                }\n                return t;\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    _currToken = t;\n                    // If in single match mode and this scalar value is the final part of a match\n                    if (!_allowMultipleMatches && !_headContext.isStartHandled()) {\n                        _singleMatchAlreadyReturned = true;\n                    }\n                    return t;\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}