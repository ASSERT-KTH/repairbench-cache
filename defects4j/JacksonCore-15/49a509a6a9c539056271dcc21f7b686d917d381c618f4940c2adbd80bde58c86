{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // Check for buffered context\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // All done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n                        _currToken = t;\n                        return t;\n                    }\n                    break;\n                }\n                // Traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) {\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // Read the next token\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            return (_currToken = t);\n        }\n\n        // Determine handling based on token type\n        switch (t.id()) {\n            case ID_START_ARRAY:\n                handleStartArray(t);\n                break;\n            case ID_START_OBJECT:\n                handleStartObject(t);\n                break;\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                handleEndStructure(t);\n                break;\n            case ID_FIELD_NAME:\n                handleFieldName(t);\n                break;\n            default:\n                handleScalar(t);\n                break;\n        }\n\n        return _nextToken2();\n    }\n\n    private void handleStartArray(JsonToken t) throws IOException {\n        // Implementation specific to starting an array\n        TokenFilter f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            _currToken = t;\n            return;\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            return;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            return;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            _currToken = t;\n            return;\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n        if (_includePath) {\n            JsonToken buffered = _nextTokenWithBuffering(_headContext);\n            if (buffered != null) {\n                _currToken = buffered;\n            }\n        }\n    }\n\n    private void handleStartObject(JsonToken t) throws IOException {\n        // Implementation specific to starting an object\n        TokenFilter f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            _currToken = t;\n            return;\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            return;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            return;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            _currToken = t;\n            return;\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n        if (_includePath) {\n            JsonToken buffered = _nextTokenWithBuffering(_headContext);\n            if (buffered != null) {\n                _currToken = buffered;\n            }\n        }\n    }\n\n    private void handleEndStructure(JsonToken t) throws IOException {\n        // Implementation specific to ending structures (array/object)\n        boolean returnEnd = _headContext.isStartHandled();\n        TokenFilter f = _headContext.getFilter();\n        if (f != null && f != TokenFilter.INCLUDE_ALL) {\n            if (t.id() == ID_END_ARRAY) {\n                f.filterFinishArray();\n            } else {\n                f.filterFinishObject();\n            }\n        }\n        _headContext = _headContext.getParent();\n        _itemFilter = _headContext.getFilter();\n        if (returnEnd) {\n            _currToken = t;\n        }\n    }\n\n    private void handleFieldName(JsonToken t) throws IOException {\n        // Implementation specific to field names\n        final String name = delegate.getCurrentName();\n        TokenFilter f = _headContext.setFieldName(name);\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _itemFilter = f;\n            if (!_includePath && !_headContext.isStartHandled()) {\n                t = _headContext.nextTokenToRead();\n                _exposedContext = _headContext;\n            }\n            _currToken = t;\n            return;\n        }\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            return;\n        }\n        f = f.includeProperty(name);\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            return;\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            if (_includePath) {\n                _currToken = t;\n            }\n            return;\n        }\n        if (_includePath) {\n            JsonToken buffered = _nextTokenWithBuffering(_headContext);\n            if (buffered != null) {\n                _currToken = buffered;\n            }\n        }\n    }\n\n    private void handleScalar(JsonToken t) throws IOException {\n        // Implementation specific to scalar values\n        TokenFilter f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _currToken = t;\n            return;\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if (f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(delegate))) {\n                _currToken = t;\n                return;\n            }\n        }\n        // Token not included\n        _currToken = null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}