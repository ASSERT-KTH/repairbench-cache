{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // Check for buffered context first\n        TokenFilterContext ctxt = _exposedContext;\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n                        _currToken = t;\n                        return t;\n                    }\n                    break;\n                }\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) {\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            return (_currToken = t);\n        }\n\n        TokenFilter filter;\n        switch (t.id()) {\n        case ID_START_ARRAY:\n            filter = _itemFilter;\n            if (filter == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(filter, true);\n                return (_currToken = t);\n            }\n            if (filter == null) {\n                delegate.skipChildren();\n                break;\n            }\n            filter = _headContext.checkValue(filter);\n            if (filter == null) {\n                delegate.skipChildren();\n                break;\n            }\n            filter = filter.filterStartArray();\n            _itemFilter = filter;\n            if (filter == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(filter, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(filter, false);\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            filter = _itemFilter;\n            if (filter == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(filter, true);\n                return (_currToken = t);\n            }\n            if (filter == null) {\n                delegate.skipChildren();\n                break;\n            }\n            filter = _headContext.checkValue(filter);\n            if (filter == null) {\n                delegate.skipChildren();\n                break;\n            }\n            filter = filter.filterStartObject();\n            _itemFilter = filter;\n            if (filter == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(filter, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(filter, false);\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            boolean returnEnd = _headContext.isStartHandled();\n            filter = _headContext.getFilter();\n            if ((filter != null) && (filter != TokenFilter.INCLUDE_ALL)) {\n                filter.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            if (returnEnd) {\n                return (_currToken = t);\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            final String name = delegate.getCurrentName();\n            filter = _headContext.setFieldName(name);\n            if (filter == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    return (_currToken = t);\n                } else if (!_headContext.isStartHandled()) {\n                    t = _headContext.nextTokenToRead();\n                    if (t != null) {\n                        _exposedContext = _headContext;\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                return (_currToken = t);\n            }\n            if (filter == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            filter = filter.includeProperty(name);\n            if (filter == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = filter;\n            if (filter == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n            }\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        default: // scalar value\n            filter = _itemFilter;\n            if (filter == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (filter != null) {\n                filter = _headContext.checkValue(filter);\n                if ((filter == TokenFilter.INCLUDE_ALL) || (filter.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n        }\n\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}