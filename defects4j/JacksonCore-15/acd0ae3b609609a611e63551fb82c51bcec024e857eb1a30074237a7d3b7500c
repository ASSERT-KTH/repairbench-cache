{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // Add a field to the class: protected boolean _matchFound = false;\n        // This field should be initialized to 'false' in the constructor of FilteringParserDelegate.\n\n        // Check for _allowMultipleMatches condition.\n        // If we are not allowing multiple matches, and a match has already been found,\n        // AND there are no more buffered tokens associated with that match (_exposedContext is null),\n        // then we should stop.\n        if (!_allowMultipleMatches && _matchFound && _exposedContext == null) {\n            return null;\n        }\n\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n                        _currToken = t;\n                        return t;\n                    }\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                _currToken = t;\n                // If _includePath is false, this START_ARRAY is the actual match, not just a path token.\n                if (!_includePath) {\n                    _matchFound = true;\n                }\n                return t;\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                _currToken = t;\n                // If _includePath is false, this START_ARRAY is the actual match, not just a path token.\n                if (!_includePath) {\n                    _matchFound = true;\n                }\n                return t;\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                _currToken = t;\n                // If _includePath is false, this START_OBJECT is the actual match, not just a path token.\n                if (!_includePath) {\n                    _matchFound = true;\n                }\n                return t;\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                _currToken = t;\n                // If _includePath is false, this START_OBJECT is the actual match, not just a path token.\n                if (!_includePath) {\n                    _matchFound = true;\n                }\n                return t;\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    JsonToken nextToken = null;\n                    if (!_includePath) {\n                        // When _includePath is false, and FIELD_NAME matched, we want the VALUE.\n                        // _nextTokenWithBuffering will find the actual value token and buffer it.\n                        nextToken = _nextTokenWithBuffering(_headContext);\n                    } else {\n                        // When _includePath is true, FIELD_NAME itself is part of the path.\n                        // No buffering needed for the value here, just return current FIELD_NAME.\n                        nextToken = t;\n                        // _matchFound is NOT set here, as this is a path token.\n                    }\n\n                    if (nextToken != null) {\n                        _currToken = nextToken;\n                        // Mark as found, as this is a successful filtered token being returned.\n                        // Only set if this token is actually a 'value' and not just a path element.\n                        // For FIELD_NAME when _includePath is true, it's a path.\n                        // For _nextTokenWithBuffering result (when _includePath is false), it's the value.\n                        if (!_includePath || nextToken.isScalarValue() || nextToken.isStructStart()) {\n                            _matchFound = true;\n                        }\n                        return nextToken;\n                    }\n                    // If nextToken was null from buffering, it means nothing found under this branch.\n                    break; // Continue to _nextToken2\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t); // Path token, do not set _matchFound\n                    }\n                    // If _includePath is false, it should have gone through the _nextTokenWithBuffering path above.\n                    // This branch should ideally not be reached if it's a value match.\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _currToken = t;\n                _matchFound = true; // Direct scalar match\n                return t;\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    _currToken = t;\n                    _matchFound = true; // Direct scalar match\n                    return t;\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}