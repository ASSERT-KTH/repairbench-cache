{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // [FILTERING] Check if we already found a match for 'allowMultipleMatches=false'\n        // Need to add '&& _currToken != null' check? (may not be needed)\n        if (!_allowMultipleMatches && _matchFound) {\n            // If we already found a match, and multiple not allowed,\n            // indicate end-of-input by returning null.\n            // Consumer must recognize this and stop processing.\n            // Note: might leave underlying delegate parser in incomplete state.\n            _currToken = null;\n            return null;\n        }\n\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    // Do not set _matchFound here: these are tokens decided earlier,\n                    // possibly structural tokens needed due to includePath=true\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        // We get here if we were processing buffered contents of an array\n                        // and ran out. We should verify that the array indeed ends (or figure\n                        // out what to do if not -- error?), and pop context.\n                        // Getting the current token is probably not quite right... FIXME?\n                        t = delegate.getCurrentToken();\n                        // Related to [core#185], START_ARRAY not handled well. Let's see if this helps:\n                        if (t != JsonToken.END_ARRAY) {\n                            // 13-Apr-2015, tatu: May need better check... but for now this should work\n                           _currToken = t;\n                           // Do not set _matchFound here: processing state, not a new match\n                           return t;\n                        }\n                        // Otherwise, if END_ARRAY, need to pop context etc: fall through to main END_ARRAY handling\n                    } else if (ctxt.inObject()) {\n                        // Similarly, if we were buffering Object contents, may need to handle END_OBJECT.\n                        t = delegate.getCurrentToken();\n                        if (t != JsonToken.END_OBJECT) {\n                            _currToken = t;\n                            // Do not set _matchFound here: processing state, not a new match\n                            return t;\n                        }\n                         // Otherwise, if END_OBJECT, need to pop context etc: fall through to main END_OBJECT handling\n                    }\n                    // If not in array/object (can this happen?), just fall through\n                    break; // Break inner loop, let main logic read next token\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more.\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            _currToken = t;\n            return t;\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n\n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree\n                _headContext = _headContext.createChildArrayContext(f, true);\n                _updateMatchFound(); // Match found\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip completely\n                delegate.skipChildren();\n                break; // continue processing by reading next token\n            }\n            // Otherwise unsure, need to check ACTIVE filter\n            f = _headContext.checkValue(f);\n            if (f == null) { // filter indicates skip completely\n                delegate.skipChildren();\n                break;\n            }\n            // If not INCLUDE_ALL, need to check for array specifically\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f; // resulting filter for items\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                _updateMatchFound(); // Match found\n                return (_currToken = t);\n            }\n            // Need to create context, but possibly buffer\n            _headContext = _headContext.createChildArrayContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                // May need to buffer current token:\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                     _updateMatchFound(); // Match found (via buffering)\n                    return t;\n                }\n                // If null, fall through; will call _nextToken2()\n            }\n            // If t not returned (no buffering, or buffering skipped?), need to proceed using '_nextToken2()'\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) { // include the whole sub-tree\n                _headContext = _headContext.createChildObjectContext(f, true);\n                _updateMatchFound(); // Match found\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip completely\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise unsure, need to check ACTIVE filter\n            f = _headContext.checkValue(f);\n            if (f == null) { // filter indicates skip completely\n                delegate.skipChildren();\n                break;\n            }\n            // If not INCLUDE_ALL, need to check for object specifically\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f; // resulting filter for properties\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                _updateMatchFound(); // Match found\n                return (_currToken = t);\n            }\n             // Need to create context, but possibly buffer\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                 if (t != null) {\n                    _currToken = t;\n                    _updateMatchFound(); // Match found (via buffering)\n                    return t;\n                }\n                // If null, fall through\n            }\n             // If t not returned (no buffering, or buffering skipped?), need to proceed using '_nextToken2()'\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    // Call the correct filter finish method based on the token type\n                    if (t == JsonToken.END_ARRAY) {\n                        f.filterFinishArray();\n                    } else {\n                        f.filterFinishObject();\n                    }\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                     // Do not set _matchFound for end markers\n                    return (_currToken = t);\n                }\n            }\n            // If not returned, need to proceed using '_nextToken2()'\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    // If field name 't' is to be returned...\n                    // it is if:\n                    // 1. includePath is true OR\n                    // 2. includeImmediateParent is true AND parent START_OBJECT has not been output\n                    // But we only return START_OBJECT in buffer case (2), then FIELD_NAME is next.\n                    if (_includePath || (_includeImmediateParent && !_headContext.isStartHandled())) {\n                        // In second case need to inject START_OBJECT first\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                             // Do not set flag for buffered START_OBJECT\n                             return (_currToken = t);\n                        }\n                         // Otherwise return the FIELD_NAME token 't' itself\n                        _updateMatchFound(); // Field name included\n                         return (_currToken = t);\n                    }\n                    // If neither _includePath nor special _includeImmediateParent case,\n                    // filter INCLUDE_ALL means property included, but FIELD_NAME token itself\n                    // is not returned, value will be. So, just break to let _nextToken2 handle.\n                    break;\n                }\n                if (f == null) { // filter indicates skip this property\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                // Ok, property potentially included, check name\n                f = f.includeProperty(name);\n                if (f == null) { // skip\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                // Property included: assign filter to use for value, return FieldName if needed\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                     // Property included. If _includePath, return FIELD_NAME token 't'.\n                     // If not _includePath, value is included, but not FIELD_NAME token t.\n                    if (_includePath) {\n                        _updateMatchFound(); // Field name included\n                        return (_currToken = t);\n                    }\n                    // Need to inject START_OBJECT?\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead(); // START_OBJECT\n                        _exposedContext = _headContext;\n                        // Do not set flag for buffered START_OBJECT\n                        return (_currToken = t);\n                    }\n                    // If !includePath and filter is INCLUDE_ALL, proceed to value.\n                    break; // Value check will handle flag. Let _nextToken2 handle.\n                }\n                 // Filter is not INCLUDE_ALL. Buffering might be needed if _includePath\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        _updateMatchFound(); // Token returned due to filter via buffering\n                        return t;\n                    }\n                    // If null, fall through\n                 }\n                 // If t not returned (no buffering, or buffering skipped?), need to proceed using '_nextToken2()'\n                break;\n            } // end of ID_FIELD_NAME processing\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                 _updateMatchFound(); // Match found\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    _updateMatchFound(); // Match found\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not matched; let's try next one\n        return _nextToken2();\n    }\n\n    /*\n    NOTE: The following are assumed to be added/present in the class definition:\n\n    // Field to track if a match was already found when allowMultipleMatches is false\n    protected boolean _matchFound = false;\n\n    // Helper method to update the match found flag if multiple matches are not allowed\n    protected final void _updateMatchFound() {\n        if (!_allowMultipleMatches) {\n            _matchFound = true;\n        }\n    }\n    */",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}