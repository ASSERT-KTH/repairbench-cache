{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // same as before up to this point ...\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // If not, need to read more. If we got any:\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        return (_currToken = t);\n    }\n\n    // Check _allowMultipleMatches for filtered match completion\n    if (!_allowMultipleMatches\n            && _currToken != null\n            && _matchCount > 0\n            && _exposedContext == null) {\n        // Only allow one match:\n        TokenFilter f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            if (!t.isStructStart() && !t.isStructEnd()) {\n                // Only allow single scalar match\n                return (_currToken = null);\n            }\n            // For containers, if included and ended successfully, stop\n            if ((t == JsonToken.END_OBJECT || t == JsonToken.END_ARRAY) && _headContext.isStartHandled()) {\n                return (_currToken = null);\n            }\n        } else if (f == null) {\n            return (_currToken = null);\n        }\n    }\n\n    TokenFilter f;\n    switch (t.id()) {\n    case ID_START_ARRAY:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n    {\n        boolean returnEnd = _headContext.isStartHandled();\n        f = _headContext.getFilter();\n        if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n            f.filterFinishArray();\n        }\n        _headContext = _headContext.getParent();\n        _itemFilter = _headContext.getFilter();\n        if (returnEnd) {\n            return (_currToken = t);\n        }\n    }\n        break;\n\n    case ID_FIELD_NAME:\n    {\n        final String name = delegate.getCurrentName();\n        f = _headContext.setFieldName(name);\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _itemFilter = f;\n            if (!_includePath) {\n                if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                    t = _headContext.nextTokenToRead();\n                    _exposedContext = _headContext;\n                }\n            }\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            break;\n        }\n        f = f.includeProperty(name);\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            break;\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            if (_includePath) {\n                return (_currToken = t);\n            }\n        }\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n    }\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            ++_matchCount;\n            return (_currToken = t);\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL)\n                    || ((f != null) && f.includeValue(delegate))) {\n                ++_matchCount;\n                return (_currToken = t);\n            }\n        }\n        break;\n    }\n\n    // We get here if token was not yet found; offlined handling\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}