{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    //Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n    // check for no buffered context _exposedContext - null\n    //If all the conditions matches then check for scalar / non-scalar property\n        //if not scalar and ended successfully, then return null\n        //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n        // then return null \n    // Anything buffered?\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            // If not, traverse down the context chain\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // If not, need to read more. If we got any:\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        return (_currToken = t);\n    }\n\n    // ==== BEGIN FIX: Handle allowMultipleMatches ====\n    if (!_allowMultipleMatches && _currToken != null && _exposedContext == null) {\n        // Only return first match, per Jackson FilteredParserDelegate contract.\n        // Check if we already matched with TOKEN_FILTER_INCLUDE_ALL, and could suppress subsequent values.\n        // This covers case when not including path, only scalar value(s).\n        // Only allow _currToken to be set once on value to match behaviour.\n        // The exclusion must be as soon as the second scalar tries to be returned (t is scalar or value)\n        TokenFilter f0 = _itemFilter;\n        boolean scalar =\n            (t == JsonToken.VALUE_STRING) ||\n            (t == JsonToken.VALUE_NUMBER_INT) ||\n            (t == JsonToken.VALUE_NUMBER_FLOAT) ||\n            (t == JsonToken.VALUE_TRUE) ||\n            (t == JsonToken.VALUE_FALSE) ||\n            (t == JsonToken.VALUE_NULL);\n\n        // Note: As per test case, include only first scalar value matched.\n        if (scalar) {\n            return null;\n        }\n    }\n    // ==== END FIX ====\n\n    // otherwise... to include or not?\n    TokenFilter f;\n\n    switch (t.id()) {\n    case ID_START_ARRAY:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartArray();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildArrayContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildArrayContext(f, false);\n\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        if (f != TokenFilter.INCLUDE_ALL) {\n            f = f.filterStartObject();\n        }\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _headContext = _headContext.createChildObjectContext(f, true);\n            return (_currToken = t);\n        }\n        _headContext = _headContext.createChildObjectContext(f, false);\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        {\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            if (returnEnd) {\n                return (_currToken = t);\n            }\n        }\n        break;\n\n    case ID_FIELD_NAME:\n        {\n            final String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead();\n                        _exposedContext = _headContext;\n                    }\n                }\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n            }\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n        }\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL)\n                    || ((f != null) && f.includeValue(delegate))) {\n                return (_currToken = t);\n            }\n        }\n        break;\n    }\n\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}