{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n    \t//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken\n    \t// check for no buffered context _exposedContext - null\n    \t//If all the conditions matches then check for scalar / non-scalar property\n    \tif (!_allowMultipleMatches && _currToken != null) {\n    \t\treturn _currToken;\n    \t}\n    \tif (_exposedContext != null) {\n    \t\tJsonToken t = _exposedContext.nextTokenToRead();\n    \t\tif (t != null) {\n    \t\t\t_currToken = t;\n    \t\t\treturn t;\n    \t\t}\n    \t\t// all done with buffered stuff?\n    \t\tif (_exposedContext == _headContext) {\n    \t\t\t_exposedContext = null;\n    \t\t\tif (_headContext.inArray()) {\n    \t\t\t\tt = delegate.getCurrentToken();\n    \t\t\t\tif (t != JsonToken.START_ARRAY) {\n    \t\t\t\t\t_currToken = t;\n    \t\t\t\t\treturn t;\n    \t\t\t\t}\n    \t\t\t} else {\n    \t\t\t\tt = delegate.getCurrentToken();\n    \t\t\t\tif (t != JsonToken.START_OBJECT) {\n    \t\t\t\t\t_currToken = t;\n    \t\t\t\t\treturn t;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\t// If not, traverse down the context chain\n    \t\tTokenFilterContext ctxt = _headContext.findChildOf(_exposedContext);\n    \t\t_exposedContext = ctxt;\n    \t\tif (ctxt == null) { // should never occur\n    \t\t\tthrow _constructError(\"Unexpected problem: chain of filtered context broken\");\n    \t\t}\n    \t}\n    \t// If not, need to read more. If we got any:\n    \tJsonToken t = delegate.nextToken();\n    \tif (t == null) {\n    \t\t// no strict need to close, since we have no state here\n    \t\treturn (_currToken = t);\n    \t}\n    \t// otherwise... to include or not?\n    \tTokenFilter f;\n    \tswitch (t.id()) {\n    \tcase ID_START_ARRAY:\n    \t\tf = _itemFilter;\n    \t\tif (f == TokenFilter.INCLUDE_ALL) {\n    \t\t\t_headContext = _headContext.createChildArrayContext(f, true);\n    \t\t\treturn (_currToken = t);\n    \t\t}\n    \t\tif (f == null) { // does this occur?\n    \t\t\tdelegate.skipChildren();\n    \t\t\tbreak;\n    \t\t}\n    \t\t// Otherwise still iffy, need to check\n    \t\tf = _headContext.checkValue(f);\n    \t\tif (f == null) {\n    \t\t\tdelegate.skipChildren();\n    \t\t\tbreak;\n    \t\t}\n    \t\tif (f != TokenFilter.INCLUDE_ALL) {\n    \t\t\tf = f.filterStartArray();\n    \t\t}\n    \t\t_itemFilter = f;\n    \t\tif (f == TokenFilter.INCLUDE_ALL) {\n    \t\t\t_headContext = _headContext.createChildArrayContext(f, true);\n    \t\t\treturn (_currToken = t);\n    \t\t}\n    \t\t_headContext = _headContext.createChildArrayContext(f, false);\n    \t\t// Also: only need buffering if parent path to be included\n    \t\tif (_includePath) {\n    \t\t\tt = _nextTokenWithBuffering(_headContext);\n    \t\t\tif (t != null) {\n    \t\t\t\t_currToken = t;\n    \t\t\t\treturn t;\n    \t\t\t}\n    \t\t}\n    \t\tbreak;\n    \tcase ID_START_OBJECT:\n    \t\tf = _itemFilter;\n    \t\tif (f == TokenFilter.INCLUDE_ALL) {\n    \t\t\t_headContext = _headContext.createChildObjectContext(f, true);\n    \t\t\treturn (_currToken = t);\n    \t\t}\n    \t\tif (f == null) { // does this occur?\n    \t\t\tdelegate.skipChildren();\n    \t\t\tbreak;\n    \t\t}\n    \t\t// Otherwise still iffy, need to check\n    \t\tf = _headContext.checkValue(f);\n    \t\tif (f == null) {\n    \t\t\tdelegate.skipChildren();\n    \t\t\tbreak;\n    \t\t}\n    \t\tif (f != TokenFilter.INCLUDE_ALL) {\n    \t\t\tf = f.filterStartObject();\n    \t\t}\n    \t\t_itemFilter = f;\n    \t\tif (f == TokenFilter.INCLUDE_ALL) {\n    \t\t\t_headContext = _headContext.createChildObjectContext(f, true);\n    \t\t\treturn (_currToken = t);\n    \t\t}\n    \t\t_headContext = _headContext.createChildObjectContext(f, false);\n    \t\t// Also: only need buffering if parent path to be included\n    \t\tif (_includePath) {\n    \t\t\tt = _nextTokenWithBuffering(_headContext);\n    \t\t\tif (t != null) {\n    \t\t\t\t_currToken = t;\n    \t\t\t\treturn t;\n    \t\t\t}\n    \t\t}\n    \t\t// note: inclusion of surrounding Object handled separately via\n    \t\t// FIELD_NAME\n    \t\tbreak;\n    \tcase ID_END_ARRAY:\n    \tcase ID_END_OBJECT:\n    \t\t{\n    \t\t\tboolean returnEnd = _headContext.isStartHandled();\n    \t\t\tf = _headContext.getFilter();\n    \t\t\tif ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n    \t\t\t\tf.filterFinishArray();\n    \t\t\t}\n    \t\t\t_headContext = _headContext.getParent();\n    \t\t\t_itemFilter = _headContext.getFilter();\n    \t\t\tif (returnEnd) {\n    \t\t\t\treturn (_currToken = t);\n    \t\t\t}\n    \t\t}\n    \t\tbreak;\n    \tcase ID_FIELD_NAME:\n    \t\t{\n    \t\t\tfinal String name = delegate.getCurrentName();\n    \t\t\t// note: this will also set 'needToHandleName'\n    \t\t\tf = _headContext.setFieldName(name);\n    \t\t\tif (f == TokenFilter.INCLUDE_ALL) {\n    \t\t\t\t_itemFilter = f;\n    \t\t\t\tif (!_includePath) {\n    \t\t\t\t\t// Minor twist here: if parent NOT included, may need to induce output of\n    \t\t\t\t\t// surrounding START_OBJECT/END_OBJECT\n    \t\t\t\t\tif (_includeImmediateParent && !_headContext.isStartHandled()) {\n    \t\t\t\t\t\tt = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n    \t\t\t\t\t\t_exposedContext = _headContext;\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\treturn (_currToken = t);\n    \t\t\t}\n    \t\t\tif (f == null) {\n    \t\t\t\tdelegate.nextToken();\n    \t\t\t\tdelegate.skipChildren();\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t\tf = f.includeProperty(name);\n    \t\t\tif (f == null) {\n    \t\t\t\tdelegate.nextToken();\n    \t\t\t\tdelegate.skipChildren();\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t\t_itemFilter = f;\n    \t\t\tif (f == TokenFilter.INCLUDE_ALL) {\n    \t\t\t\tif (_includePath) {\n    \t\t\t\t\treturn (_currToken = t);\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\tif (_includePath) {\n    \t\t\t\tt = _nextTokenWithBuffering(_headContext);\n    \t\t\t\tif (t != null) {\n    \t\t\t\t\t_currToken = t;\n    \t\t\t\t\treturn t;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\tbreak;\n    \t\t}\n    \tdefault: // scalar value\n    \t\tf = _itemFilter;\n    \t\tif (f == TokenFilter.INCLUDE_ALL) {\n    \t\t\treturn (_currToken = t);\n    \t\t}\n    \t\tif (f != null) {\n    \t\t\tf = _headContext.checkValue(f);\n    \t\t\tif ((f == TokenFilter.INCLUDE_ALL)\n    \t\t\t\t\t|| ((f != null) && f.includeValue(delegate))) {\n    \t\t\t\treturn (_currToken = t);\n    \t\t\t}\n    \t\t}\n    \t\t// Otherwise not included (leaves must be explicitly included)\n    \t\tbreak;\n    \t}\n    \t// We get here if token was not yet found; offlined handling\n    \treturn _nextToken2();\n    }\n    \n    private JsonToken _nextToken2() throws IOException\n    {\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of \n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n        // otherwise... to include or not?\n        TokenFilter f;\n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}