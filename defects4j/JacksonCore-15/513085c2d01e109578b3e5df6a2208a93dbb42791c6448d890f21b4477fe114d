{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // Add this check at the beginning\n        // If we don't allow multiple matches, and the first match was completed\n        // (which implies includePath was false), return null.\n        if (!_allowMultipleMatches && _matchComplete) {\n            return null;\n        }\n\n        // [Original comment block - retained for context]\n        //Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken\n        // check for no buffered context _exposedContext - null\n        //If all the conditions matches then check for scalar / non-scalar property\n            //if not scalar and ended successfully, then return null\n            //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n            // then return null\n\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks? Or maybe it should be current token of delegate?\n                        _currToken = t;\n                        return t;\n                    }\n                    // Context fully processed.\n                    break; // Break loop to read next token from delegate\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not buffered, need to read more.\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // reached end-of-input\n            return (_currToken = t);\n        }\n\n        // otherwise... apply filter logic\n        TokenFilter f;\n\n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break; // Need to fetch next token\n            }\n            // Filter defined, apply it to the context\n            f = _headContext.checkValue(f);\n            if (f == null) { // context filter indicates skip\n                delegate.skipChildren();\n                break; // Need to fetch next token\n            }\n            // Check specific filter for START_ARRAY\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f; // Update filter for items within this array\n            if (f == TokenFilter.INCLUDE_ALL) {\n                // Array included, create context and return START_ARRAY\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filterStartArray decided to exclude\n                delegate.skipChildren();\n                break; // Need to fetch next token\n            }\n            // Array possibly included (f != null), but needs filtering\n            _headContext = _headContext.createChildArrayContext(f, false); // Not fully included yet\n            if (_includePath) {\n                // If path included, try buffering this START_ARRAY\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // If !_includePath or buffering skipped START_ARRAY, break loop to fetch next token (first element or END_ARRAY)\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filter indicates skip\n                delegate.skipChildren();\n                break; // Need to fetch next token\n            }\n            // Filter defined, apply it to the context\n            f = _headContext.checkValue(f);\n            if (f == null) { // context filter indicates skip\n                delegate.skipChildren();\n                break; // Need to fetch next token\n            }\n            // Check specific filter for START_OBJECT\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f; // Update filter for items within this object\n            if (f == TokenFilter.INCLUDE_ALL) {\n                 // Object included, create context and return START_OBJECT\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // filterStartObject decided to exclude\n                delegate.skipChildren();\n                break; // Need to fetch next token\n            }\n            // Object possibly included (f != null), but needs filtering\n            _headContext = _headContext.createChildObjectContext(f, false); // Not fully included yet\n            if (_includePath) {\n                 // If path included, try buffering this START_OBJECT\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n             // If !_includePath or buffering skipped START_OBJECT, break loop to fetch next token (first field or END_OBJECT)\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    // Fixed: call correct finish method based on context\n                    if (_headContext.inArray()) {\n                        f.filterFinishArray();\n                    } else {\n                        f.filterFinishObject();\n                    }\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    // Return END token only if corresponding START was returned\n                    return (_currToken = t);\n                }\n            }\n            // If START wasn't returned, END shouldn't be either. Break to fetch next token.\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                f = _headContext.setFieldName(name); // Get filter from context for this field name\n                if (f == TokenFilter.INCLUDE_ALL) { // Context includes all fields\n                    _itemFilter = f; // Value filter is also INCLUDE_ALL\n                    if (_includePath) {\n                        // Return FIELD_NAME, value will be handled by subsequent calls\n                        return (_currToken = t);\n                    }\n                    // If !_includePath, skip FIELD_NAME, fall through to handle value\n                    // (need to advance delegate below)\n                } else if (f == null) { // Context filter excludes this field name\n                    delegate.nextToken(); // Consume field name from delegate\n                    delegate.skipChildren(); // Skip value\n                    break; // Fetch next token\n                } else { // Context provides a specific filter 'f'\n                    TokenFilter valueFilter = f.includeProperty(name); // Check if this specific property is included\n                    if (valueFilter == null) { // Property explicitly excluded\n                        delegate.nextToken(); // Consume field name\n                        delegate.skipChildren(); // Skip value\n                        break; // Fetch next token\n                    }\n                    // Property included, 'valueFilter' applies to the value\n                    _itemFilter = valueFilter;\n                    if (valueFilter == TokenFilter.INCLUDE_ALL) { // Value to be fully included\n                        if (_includePath) {\n                            // Return FIELD_NAME now, value handled later\n                            return (_currToken = t);\n                        }\n                        // If !_includePath, skip FIELD_NAME, fall through to handle value\n                    } else { // Value needs filtering based on 'valueFilter'\n                        if (_includePath) {\n                            // Try buffering, may return FIELD_NAME or START_OBJECT/ARRAY for value\n                            JsonToken buffered = _nextTokenWithBuffering(_headContext);\n                            if (buffered != null) {\n                                _currToken = buffered;\n                                return buffered;\n                            }\n                            // Buffering indicates value is fully filtered out, break to fetch next token\n                            break;\n                        }\n                        // If !_includePath, skip FIELD_NAME, fall through to handle value\n                    }\n                }\n                // Fall-through for cases where !includePath:\n                // Need to advance delegate past FIELD_NAME to get value token for 'default' case\n                t = delegate.nextToken();\n                if (t == null) { // Should not happen normally unless invalid JSON\n                    return (_currToken = t);\n                }\n                // Now 't' holds the value token, fall through to 'default'\n            }\n            // FALL THROUGH intended\n\n        default: // scalar value, or START/END token for the value after FIELD_NAME when !includePath\n            f = _itemFilter; // Get the filter determined by context or FIELD_NAME match\n            if (f == TokenFilter.INCLUDE_ALL) {\n                // Value is included without further checks\n                return (_currToken = t);\n            }\n            if (f != null) {\n                // Check if the current token 't' should be included based on filter 'f'\n                f = _headContext.checkValue(f); // Apply context check too\n                boolean include = false;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    include = true;\n                } else if (f != null) {\n                    // Check based on token type (scalar or structure start)\n                    if (t.isScalarValue()) {\n                        include = f.includeValue(delegate); // Use delegate for value access\n                    } else if (t == JsonToken.START_ARRAY) {\n                         include = (f.filterStartArray() != null);\n                    } else if (t == JsonToken.START_OBJECT) {\n                         include = (f.filterStartObject() != null);\n                    }\n                    // Other tokens (END_ARRAY, END_OBJECT, FIELD_NAME) shouldn't normally be checked here\n                    // due to logic in other cases.\n                }\n\n                if (include) {\n                    // Value token 't' is included.\n                    // Add this logic for _allowMultipleMatches=false and _includePath=false\n                    if (!_allowMultipleMatches && !_includePath && t.isScalarValue()) {\n                        // If this is a scalar value, it's the only token for this match.\n                        // The check at the beginning of the method ensures this only happens once.\n                        _matchComplete = true;\n                    }\n                    // End of added logic\n                    return (_currToken = t);\n                }\n            }\n            // Value token 't' is not included, break to fetch next token\n            break;\n        } // end switch\n\n        // If we reach here, the token 't' was filtered out or was a structural token\n        // that required further processing (like START_ARRAY/OBJECT without includePath).\n        // Need to fetch the next token from the delegate by looping.\n        // Calling _nextToken2() is assumed to handle this looping or recursion.\n        return _nextToken2();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}