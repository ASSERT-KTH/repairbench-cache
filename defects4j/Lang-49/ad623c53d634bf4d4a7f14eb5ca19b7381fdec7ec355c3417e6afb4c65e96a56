{
    "generation": "public Fraction reduce() {\n    // If numerator is 0, then the canonical value is 0/1, i.e. Fraction.ZERO.\n    if (numerator == 0) {\n        return Fraction.ZERO;\n    }\n\n    // Use the absolute values for both numerator and denominator to compute the GCD.\n    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n    int num = numerator / gcd;\n    int den = denominator / gcd;\n\n    // Ensure the denominator is positive.\n    if (den < 0) {\n        num = -num;\n        den = -den;\n    }\n\n    // If the fraction is already in reduced canonical form, return this instance.\n    if (num == numerator && den == denominator) {\n        return this;\n    }\n    \n    // Otherwise, return a new fraction (which for 0/1 will be Fraction.ZERO as required).\n    return Fraction.getFraction(num, den);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}