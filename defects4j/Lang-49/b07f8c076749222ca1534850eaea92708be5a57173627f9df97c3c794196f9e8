{
    "generation": "public Fraction reduce() {\n    // If the numerator is zero, return Fraction.ZERO if the denominator isn\u2019t already 1.\n    if (numerator == 0) {\n        return (denominator == 1) ? this : Fraction.ZERO;\n    }\n    \n    // Start with the current numerator and denominator.\n    int num = numerator;\n    int den = denominator;\n    \n    // Normalize the fraction so that the denominator is always positive.\n    if (den < 0) {\n        num = -num;\n        den = -den;\n    }\n    \n    // Compute the greatest common divisor using absolute values.\n    int gcd = greatestCommonDivisor(Math.abs(num), den);\n    \n    // Reduce the numerator and denominator.\n    num /= gcd;\n    den /= gcd;\n    \n    // If the normalized values match the current ones, return this instance.\n    if (num == numerator && den == denominator) {\n        return this;\n    }\n    \n    // Otherwise, return a new Fraction instance with the reduced values.\n    return Fraction.getFraction(num, den);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}