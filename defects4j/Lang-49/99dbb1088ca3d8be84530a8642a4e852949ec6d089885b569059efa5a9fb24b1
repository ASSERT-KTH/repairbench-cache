{
    "generation": "/**\n * <p>Reduce the fraction to the smallest values for the numerator and\n * denominator, returning the result.</p>\n * \n * <p>For example, if this fraction represents 2/4, then the result\n * will be 1/2.</p>\n *\n * @return a new reduced fraction instance, or this if no simplification possible\n */\npublic Fraction reduce() {\n    // handle zero numerator specially to ensure 0/x always becomes 0/1 (the ZERO constant)\n    if (numerator == 0) {\n        return ZERO;\n    }\n    // compute gcd on absolute values\n    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n    // if already in lowest terms, return this\n    if (gcd == 1) {\n        return this;\n    }\n    // otherwise return a new reduced fraction (getFraction will normalize the sign and\n    // return ZERO/ONE constants where appropriate)\n    return Fraction.getFraction(numerator / gcd, denominator / gcd);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}