{
    "generation": "    /**\n     * <p>Reduce the fraction to the smallest values for the numerator and\n     * denominator, returning the result.</p>\n     * \n     * <p>For example, if this fraction represents 2/4, then the result\n     * will be 1/2.</p>\n     *\n     * @return a new reduced fraction instance, or this if no simplification possible\n     */\n    public Fraction reduce() {\n        // Handle numerator = 0 case directly\n        if (numerator == 0) {\n            // Check if the denominator is already 1 (already the standard ZERO form)\n            // The equals method considers Fraction(0, k) == Fraction(0, 1)\n            return equals(Fraction.ZERO) ? this : Fraction.ZERO;\n        }\n\n        int n = numerator;\n        int d = denominator;\n        \n        // Normalize sign: ensure denominator is positive.\n        // Keep track if the sign representation was changed.\n        boolean signChanged = false;\n        if (d < 0) {\n            // Check for potential overflow on negation\n            if (n == Integer.MIN_VALUE || d == Integer.MIN_VALUE) {\n                 throw new ArithmeticException(\"overflow: can't negate\");\n            }\n            n = -n;\n            d = -d;\n            signChanged = true; // Sign normalization occurred\n        }\n\n        // Calculate GCD of absolute values.\n        // d is guaranteed positive here. Use Math.abs(n) for the numerator.\n        int gcd = greatestCommonDivisor(Math.abs(n), d);\n\n        // If GCD is 1, no division is needed for reduction.\n        if (gcd == 1) {\n            // If the sign was normalized (original denominator was negative),\n            // we must return a new fraction with the normalized sign.\n            // Otherwise (gcd is 1 and sign was already correct), return this instance.\n            return signChanged ? Fraction.getFraction(n, d) : this;\n        }\n\n        // GCD > 1, so reduction by division is required.\n        // Divide the sign-normalized numerator and denominator by the GCD.\n        n = n / gcd;\n        d = d / gcd;\n\n        // Return the new, reduced, and sign-normalized fraction instance.\n        return Fraction.getFraction(n, d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}