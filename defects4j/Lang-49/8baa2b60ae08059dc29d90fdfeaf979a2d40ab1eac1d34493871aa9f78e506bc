{
    "generation": "public Fraction reduce() {\n    // Handle the special case of zero.\n    if (numerator == 0) {\n        return (denominator == 1) ? this : Fraction.ZERO;\n    }\n    \n    // Normalize the sign so that the denominator is positive.\n    int normNumerator = numerator;\n    int normDenom = denominator;\n    if (normDenom < 0) {\n        normNumerator = -normNumerator;\n        normDenom = -normDenom;\n    }\n    \n    // Compute the greatest common divisor using positive values.\n    int gcd = greatestCommonDivisor(Math.abs(normNumerator), normDenom);\n    \n    // If already in lowest terms and properly normalized, return this instance.\n    if (gcd == 1) {\n        if (normNumerator == numerator && normDenom == denominator) {\n            return this;\n        } else {\n            return Fraction.getFraction(normNumerator, normDenom);\n        }\n    }\n    \n    return Fraction.getFraction(normNumerator / gcd, normDenom / gcd);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}