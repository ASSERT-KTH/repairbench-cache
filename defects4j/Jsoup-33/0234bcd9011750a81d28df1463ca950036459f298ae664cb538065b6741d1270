{
    "generation": "    Element insert(Token.StartTag startTag) {\n        Tag tag = Tag.valueOf(startTag.name());\n\n        if (startTag.isSelfClosing()) {\n            Element el = insertEmpty(startTag); // Create element, add node.\n            // If the tag is void, we are done. If non-void, add to stack and then immediately pop (emit end tag).\n            if (!tag.isVoid()) {\n                stack.add(el);\n                tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing\n            } else {\n                // Store a self-closing flag for void tags, consistent with behavior for non-void tags like <div />,\n                // to align with XML/foreign content handling. Acknowledge the flag ensures this is done.\n                tokeniser.acknowledgeSelfClosingFlag();\n            }\n            return el;\n        }\n        \n        Element el = new Element(tag, baseUri, startTag.attributes);\n        insert(el); // Standard insertion: Add element to parent, push onto stack if not void.\n        return el;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}