{
    "generation": "    Element insert(Token.StartTag startTag) {\n        // handle empty unknown tags\n        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.\n        if (startTag.isSelfClosing()) {\n            Tag tag = Tag.valueOf(startTag.name());\n\n            // Case 1: HTML void elements (e.g., <img/>, <hr/>)\n            // These are handled by insertEmpty() and are not pushed onto the stack.\n            if (tag.isSelfClosing()) {\n                return insertEmpty(startTag);\n            }\n            // Case 2: Known non-void HTML elements (e.g., <div/>, <script/>, <a/>, <i/>)\n            // These should be treated as immediately closed (<div></div>).\n            // Push the element onto the stack, then immediately pop it.\n            else if (tag.isKnownTag()) {\n                Element el = new Element(tag, baseUri, startTag.attributes);\n                insert(el); // This pushes `el` onto the stack and appends it to the current element.\n                pop();      // Pop `el` immediately to simulate closure.\n                return el;\n            }\n            // Case 3: Unknown tags (e.g., <foo/>)\n            // These are generally treated as self-closing in the XML sense in Jsoup output,\n            // similar to void elements; they are inserted but not pushed to the stack.\n            else {\n                return insertEmpty(startTag);\n            }\n        }\n\n        // Default case for non-self-closing start tags (e.g., <div>)\n        // Create the element, add it to the current element, and push it onto the stack.\n        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n        insert(el);\n        return el;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}