{
    "generation": "    Element insert(Token.StartTag startTag) {\n        Tag tag = Tag.valueOf(startTag.name()); // Get tag settings (knows if block, void, etc.)\n\n        // Handle void tags (e.g., <img />, <br />, <hr />) according to spec. Includes <hr> - treat as implicit <hr />.\n        if (tag.isEmpty()) {\n            Element el = insertEmpty(startTag); // Creates element, adds to parent, acknowledges token. Does not push to stack.\n            return el;\n        }\n\n        // Handle non-void tags\n        if (startTag.isSelfClosing()) {\n            // Self-closing tags for non-void elements are treated differently based on whether the tag is known or unknown.\n            if (tag.isKnownTag()) {\n                // Known non-void tag like <div /> or <a />. Allow it but force an end tag.\n                // Create the element, push it onto the stack, and immediately emit the end tag token.\n                Element el = new Element(tag, baseUri, startTag.attributes);\n                insert(el); // Inserts the node, and pushes onto the stack (as tag is not empty).\n                tokeniser.emit(new Token.EndTag(el.tagName())); // Emit the end tag token to immediately close the element.\n                return el;\n            } else {\n                // Unknown tag like <foo />. Treat it as fully self-closing.\n                // Use insertEmpty, which creates the element, inserts it, acknowledges the flag, but does not push to stack.\n                Element el = insertEmpty(startTag);\n                return el;\n            }\n        } else {\n            // Normal start tag like <a>, <div>, <foo>. Create element, insert node, push onto stack.\n            Element el = new Element(tag, baseUri, startTag.attributes);\n            insert(el); // Inserts the node, and pushes onto the stack.\n            return el;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}