{
    "generation": "Element insert(Token.StartTag startTag) {\n    // handle empty unknown tags\n    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.\n    if (startTag.isSelfClosing()) {\n        // For known non-empty tags, treat as start + end\n        Tag tag = Tag.valueOf(startTag.name());\n        Element el = new Element(tag, baseUri, startTag.attributes);\n        insert(el);\n        if (tag.isSelfClosing()) {\n            // known empty (void) tags -- don't add to stack or emit end tag\n            return el;\n        } else {\n            // known non-empty tag written as self-closing: add to stack, then fake end tag to close it immediately\n            stack.add(el);\n            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing\n            return el;\n        }\n    }\n\n    Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n    insert(el);\n    return el;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}