{
    "generation": "    Element insert(Token.StartTag startTag) {\n        Tag tag = Tag.valueOf(startTag.name());\n\n        // Case 1: The start tag token is self-closing (e.g., <div />, <img />, <foo />)\n        if (startTag.isSelfClosing()) {\n            // Special handling for unknown tags that are self-closing (e.g., <foo />).\n            // The test expects these to remain self-closed, meaning they should not be pushed to the stack\n            // and immediately closed like block-level elements.\n            if (!tag.isKnownTag()) {\n                Element el = new Element(tag, baseUri, startTag.attributes);\n                insertNode(el); // Add to the parent, but do not push to the stack.\n                return el;\n            }\n\n            // For known tags that are self-closing in the input (e.g., <img />, <div />, <script />):\n            // The `insertEmpty` method correctly handles both known HTML empty elements (like img, hr - no stack push)\n            // and known non-empty elements that are self-closed (like div, a, script - pushes to stack and immediately pops to close).\n            Element el = insertEmpty(startTag);\n            // The original code had `stack.add(el);` and `tokeniser.emit(new Token.EndTag(el.tagName()));` here.\n            // These lines were incorrect/redundant because `insertEmpty` already performs the necessary stack manipulation\n            // or lack thereof, and implicitly handles the closing of self-closed tags as per spec/quirks.\n            return el;\n        }\n\n        // Case 2: The start tag token is NOT self-closing (e.g., <div>, <img>, <hr>, <foo>)\n        // Check if it's a known HTML empty element (e.g., <img> or <hr>, even without `/>` syntax).\n        if (tag.isSelfClosing()) {\n            // These are semantic empty tags (e.g., <img>, <hr>).\n            // `insertEmpty` handles these correctly by simply adding them to the parent and not pushing to the stack.\n            // The internal logic of `insertEmpty` correctly bypasses stack operations if `startTag.isSelfClosing()` is false.\n            return insertEmpty(startTag);\n        }\n\n        // Case 3: Standard block-level elements or unknown tags that can contain content\n        // (e.g., <div>, <p>, <a>, or <foo> when not self-closed)\n        Element el = new Element(tag, baseUri, startTag.attributes);\n        insert(el); // This correctly adds the element to the stack, expecting content.\n        return el;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}