{
    "generation": "    Element insert(Token.StartTag startTag) {\n        // handle empty unknown tags\n        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.\n        if (startTag.isSelfClosing()) {\n            // insertEmpty handles:\n            // 1. Known void (empty) tags (e.g., <img/>, <br/>, <hr/>) with a self-closing slash.\n            //    It appends the element to the current parent and returns the element.\n            //    These elements are \"self-closed\" by definition and should not go on the stack.\n            // 2. Unknown tags (e.g., <foo/>) with a self-closing slash.\n            //    It appends the element to the current parent and returns the element.\n            //    These are treated as self-closing in XML, and Jsoup also treats them this way if they are self-closed in input.\n            // 3. Known non-void elements (e.g., <div/>, <p/>, <a/>) with a self-closing slash.\n            //    It inserts the element, then immediately pops it from the stack, effectively treating it as `<div></div>`.\n            //    In this case, it returns null, indicating the element has been fully handled and no new open element\n            //    remains on the stack from this operation.\n            Element el = insertEmpty(startTag);\n\n            // If el is null, it means insertEmpty handled the element by opening and immediately closing it\n            // (e.g., <div/> -> <div></div>). No new open element was created for this method to return.\n            if (el == null) {\n                return null;\n            }\n\n            // If el is not null, it's either a void element (like <img>, <hr>) or an unknown self-closing tag (<foo/>).\n            // These elements are already properly appended to the current parent in insertEmpty,\n            // and they do not create a new \"open\" scope on the stack.\n            // Therefore, the original `stack.add(el)` and `tokeniser.emit` lines were incorrect for these cases\n            // as they would wrongly put a non-container on the stack or generate unnecessary tokens.\n            return el;\n        }\n        \n        // This path is for regular, non-self-closing start tags (e.g., <div>, <p>, <span>)\n        // or for known void tags that do not have a self-closing slash in the token (e.g., <hr>).\n        // For the latter case, `insert(el)` (the HtmlTreeBuilder method that takes an Element)\n        // correctly handles it by appending the element and not pushing it onto the stack,\n        // because its `tag.isSelfClosing()` is true.\n        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n        insert(el); // Calls HtmlTreeBuilder.insert(Element el)\n        return el;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}