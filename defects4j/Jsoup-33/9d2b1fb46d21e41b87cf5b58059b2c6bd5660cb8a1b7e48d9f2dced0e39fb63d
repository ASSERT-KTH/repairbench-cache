{
    "generation": "    Element insert(Token.StartTag startTag) {\n        // Get the Tag object for the start tag name. This 'tag' object contains HTML spec information\n        // like whether it's a known empty tag or a known HTML tag.\n        Tag tag = Tag.valueOf(startTag.name());\n\n        // If the token itself indicates it's self-closing (e.g., <img />, <div />, <foo />)\n        if (startTag.isSelfClosing()) {\n            // Case 1: The Tag is a known HTML-spec defined empty tag (e.g., <img>, <br>, <hr>).\n            // For these, the self-closing slash is part of their normal syntax, and they do not require a separate closing tag.\n            // They should be handled by `insertEmpty` and not pushed onto the stack.\n            if (tag.isSelfClosing()) {\n                return insertEmpty(startTag); // Creates and appends the element. The stack is not affected.\n            }\n\n            // Case 2: The Tag is a known HTML tag, but NOT a spec-defined empty tag (e.g., <div />, <a />, <script />).\n            // According to HTML5 spec, the self-closing slash is ignored for these tags.\n            // They are treated as if they were a regular start tag (e.g., <div>).\n            // Therefore, they must be pushed onto the stack and then immediately popped by emitting a fake end tag.\n            if (tag.isKnownTag()) {\n                Element el = new Element(tag, baseUri, startTag.attributes);\n                insert(el); // Pushes the element onto the stack and appends it to the current element.\n                tokeniser.emit(new Token.EndTag(el.tagName())); // Emits a synthetic end tag to pop the element off the stack.\n                return el;\n            } else {\n                // Case 3: The Tag is an unknown tag that is self-closed (e.g., <foo />).\n                // Jsoup's convention (and desired by tests) is to treat these as empty elements,\n                // similar to XML self-closing tags. They should not be pushed onto the stack.\n                return insertEmpty(startTag); // Creates and appends the element. The stack is not affected.\n            }\n        }\n        \n        // Case 4: Standard start tag (not self-closing, e.g., <div>, <p>).\n        // Create the element and push it onto the stack as it expects a closing tag.\n        Element el = new Element(tag, baseUri, startTag.attributes);\n        insert(el); // Pushes the element onto the stack and appends it to the current element.\n        return el;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}