{
    "generation": "    Element insert(Token.StartTag startTag) {\n        // Get the Tag object upfront to determine its properties.\n        Tag tag = Tag.valueOf(startTag.name());\n\n        // Handle tags that were self-closed in the input (e.g., <img /> or <div />).\n        if (startTag.isSelfClosing()) {\n            // insertEmpty() creates the element and appends it to the current element in the DOM.\n            // It does NOT add the element to the stack, nor does it emit a separate end tag.\n            Element el = insertEmpty(startTag);\n\n            // If it's a known HTML empty tag (e.g., <img>, <hr>), its processing is complete.\n            // These tags should not be added to the stack, and no end tag should be generated.\n            if (tag.isKnownEmpty()) {\n                return el;\n            } else {\n                // If it's a non-empty tag that was self-closed (e.g., <div /> or <script />),\n                // HTML5 parsing rules dictate they are treated as a start tag immediately followed by their end tag.\n                // So, they must be added to the stack and then immediately closed by emitting an end tag.\n                stack.add(el);\n                tokeniser.emit(new Token.EndTag(el.tagName()));\n                return el;\n            }\n        }\n\n        // This block handles non-self-closing start tags (e.g., <div>, <p>, or <img> without '/>').\n\n        // If it's a known HTML empty tag (e.g., <img>, <hr>) even without a self-closing slash,\n        // it should still be treated as an empty element and not be added to the stack.\n        // We reuse insertEmpty for consistent handling of all known empty tags.\n        if (tag.isKnownEmpty()) {\n            return insertEmpty(startTag);\n        }\n\n        // For all other standard (non-empty) start tags (e.g., <div>, <p>),\n        // create the element and insert it normally, which adds it to the stack.\n        Element el = new Element(tag, baseUri, startTag.attributes);\n        insert(el); // Calls the overloaded insert(Element el) method, which handles adding to stack.\n        return el;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}