{
    "generation": "    Element insert(Token.StartTag startTag) {\n        Tag tag = Tag.valueOf(startTag.name()); // Get tag info\n\n        // handle self closing tags\n        if (startTag.isSelfClosing()) {\n            // if known, non-empty tag like <div> or <a>, spec says treat element as start tag only (treat as <tag>)\n            // whereas Jsoup aims to be flexible and parse this as <tag></tag>\n            if (!tag.isUnknown() && !tag.isEmpty()) {\n                // So we create the element **normally**, insert it (which pushes to stack),\n                // and then immediately act as if we saw the end tag (emit & pop).\n                Element el = new Element(tag, baseUri, startTag.attributes);\n                insert(el); // Insert normally (adds to parent, pushes to stack)\n                // Now immediately close it by emitting an end tag token.\n                // This lets the parser know the tag is closed, to avoid issues like </ CData> breaking out of script tags.\n                tokeniser.emit(new Token.EndTag(el.tagName()));\n                return el;\n            } else {\n                // else (known empty like <hr>, or unknown like <foo>) treat as self-closing\n                // Use insertEmpty, assuming it correctly creates/adds the element without pushing and marks appropriately.\n                Element el = insertEmpty(startTag);\n                // We don't push onto the stack or emit an end tag, as implicitly closed.\n                return el;\n            }\n        } else {\n            // normal open tag '<tag>'\n            Element el = new Element(tag, baseUri, startTag.attributes);\n            insert(el); // Standard insertion adds to parent and pushes to stack\n            return el;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}