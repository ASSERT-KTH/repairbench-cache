{
    "generation": "    Element insert(Token.StartTag startTag) {\n        // handle empty unknown tags\n        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.\n        if (startTag.isSelfClosing()) {\n            Tag tag = Tag.valueOf(startTag.name());\n            if (tag.isEmpty()) { // Check if the tag is a void element\n                Element el = insertEmpty(startTag);\n                tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing\n                return el;\n            } else {\n                // For non-void tags, treat as normal element and emit end tag\n                Element el = new Element(tag, baseUri, startTag.attributes);\n                insert(el);\n                tokeniser.emit(new Token.EndTag(el.tagName()));\n                return el;\n            }\n        }\n        \n        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n        insert(el);\n        return el;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}