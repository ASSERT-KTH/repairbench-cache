{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors, interfaces or have the @this, @interface,\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride() ||\n           jsDoc.isInterface())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n\n      // Don't traverse functions assigned to prototype subproperties (e.g. a.prototype.b.c = ...)\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n          // If the assigned property chain contains .prototype. (not just ends with .prototype), do not traverse\n          String qName = lhs.getQualifiedName();\n          if (qName != null && qName.contains(\".prototype.\")) {\n            return false;\n          }\n          // Also handle computed property (e.g., a.prototype['x' + 'y'])\n          Node obj = lhs;\n          while (obj.getType() == Token.GETPROP || obj.getType() == Token.GETELEM) {\n            if (obj.getType() == Token.GETPROP) {\n              if (\"prototype\".equals(obj.getLastChild().getString()) && obj != lhs) {\n                return false;\n              }\n            }\n            obj = obj.getFirstChild();\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n        // For computed property assignments: do not traverse if a.prototype[...]\n        if (lhs.getType() == Token.GETELEM) {\n          Node obj = lhs.getFirstChild();\n          if (obj != null && obj.getType() == Token.GETPROP &&\n              \"prototype\".equals(obj.getLastChild().getString())) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}