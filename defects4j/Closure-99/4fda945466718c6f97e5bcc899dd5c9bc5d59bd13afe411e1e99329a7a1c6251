{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Do not traverse functions that are constructors, have an explicit\n    // @this type, are marked @override, or are declared as an interface.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Only traverse functions if they normally can have a @this annotation.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  // When we see an assignment, only traverse the right-hand side if this\n  // is not an assignment to a prototype property.\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    \n    if (n == lhs) {\n      // Always traverse the left side.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // For assignments like a.prototype.foo = ... or a[\"prototype\"].foo = ...,\n      // do not traverse the right side.\n      if (lhs.getType() == Token.GETPROP) {\n        // e.g. a.prototype.foo = ... (the last child is \"foo\").\n        // If the full qualified name contains \".prototype.\", it is a method.\n        if (\"prototype\".equals(lhs.getLastChild().getString())) {\n          return false;\n        }\n        if (lhs.getQualifiedName() != null &&\n            lhs.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n      }\n      if (lhs.getType() == Token.GETELEM) {\n        // e.g. a.prototype['x' + 'y'] = ...\n        Node target = lhs.getFirstChild();\n        if (target != null) {\n          if (target.getType() == Token.GETPROP &&\n              \"prototype\".equals(target.getLastChild().getString())) {\n            return false;\n          }\n          if (target.getQualifiedName() != null &&\n              target.getQualifiedName().contains(\".prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}