{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces, or have the @this or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() || // fix: also skip if @interface\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      // FIX: For prototype property assignments, allow *method* assignments even if property is computed.\n      if (lhs.getType() == Token.GETPROP) {\n        Node prop = lhs.getLastChild();\n        if (prop.isString() && prop.getString().equals(\"prototype\")) {\n          return false;\n        }\n        String qName = lhs.getQualifiedName();\n        if (qName != null && qName.endsWith(\".prototype\")) {\n          return false;\n        }\n        // Don't block prototype property methods at this point.\n      } else if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n        // Only return false when assigning to a property directly on prototype, not its subproperties for method assignments\n        // So, allow assignments like a.prototype.b.c = function() {}\n        // Block only if directly assigning to prototype (a.prototype = ...), which ALREADY handled above.\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}