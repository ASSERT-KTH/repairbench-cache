{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override or @interface annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n\n    // Special case for prototype assignments:\n    // If parent is ASSIGN, check if LHS is a prototype property assignment,\n    // only skip if it's an exact assignment to \"prototype\" (not subproperty).\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      // Only skip traversing the function if lhs is exactly \"a.prototype.b\",\n      // not if it's a property of prototype (like a.prototype.b.c)\n      if (lhs.getType() == Token.GETPROP) {\n        Node target = lhs;\n        boolean isPrototypeAssignment = false;\n        // Check if assigning directly to a property of \"prototype\"\n        if (target.getChildCount() == 3) {\n          // a.prototype.b  ==> GETPROP(GETPROP(NAME(a), STRING(\"prototype\")), STRING(\"b\"))\n          Node maybePrototype = target.getFirstChild().getNext();\n          if (maybePrototype != null &&\n              maybePrototype.isString() &&\n              maybePrototype.getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n        } else if (target.getChildCount() == 2) {\n          // a.prototype  ==> GETPROP(NAME(a), STRING(\"prototype\"))\n          Node last = target.getLastChild();\n          if (last.isString() && last.getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n        }\n        if (isPrototypeAssignment) {\n          return true; // traverse function assigned to prototype property\n        }\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      // Fix: Only skip traversing if assigning directly to a prototype,\n      // NOT if it's a property of prototype or a property of a property of prototype, etc.\n      if (lhs.getType() == Token.GETPROP) {\n        Node propNode = lhs.getLastChild();\n        if (propNode.isString() && propNode.getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}