{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  @Override // Assuming this overrides a TraversalCallback method\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    // This field needs to be defined in the class containing this method.\n    // It's used later in the method.\n    // private Node assignLhsChild = null; // Declaration should be in the class\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors, interfaces, or have the @this\n      // or @override annotation.\n      // Assumes getFunctionJsDocInfo is a method available in this class/context.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() || // FIX: Added check for @interface\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      // This check restricts traversal to functions that are statements or\n      // RHS of assignments/variable declarations.\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        // Check if assignLhsChild is declared and accessible as a class member.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else { // n == rhs\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        // FIX: Handle GETPROP and GETELEM, check recursively for '.prototype'.\n        Node current = lhs;\n        boolean isPrototypeAssign = false;\n        // Check if the LHS is of the form \"something.prototype...\"\n        // or \"something['prototype']...\"\n        while (current != null && (current.isGetProp() || current.isGetElem())) {\n            if (current.isGetProp() && current.getLastChild().getString().equals(\"prototype\")) {\n                isPrototypeAssign = true;\n                break; // Found '.prototype' in the chain\n            }\n            // For GETELEM, we cannot statically determine if it's accessing 'prototype'\n            // e.g., a[p] = function(){...}; where p = 'prototype'.\n            // The original check also didn't handle this. We'll stick to checking\n            // GETPROP with a string literal \"prototype\".\n            current = current.getFirstChild(); // Go up the chain (e.g., from a.b.c to a.b)\n        }\n\n        if (isPrototypeAssign) {\n             return false; // Don't traverse RHS if assigned to prototype chain\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // NOTE: The helper method getFunctionJsDocInfo(Node n) and the field assignLhsChild\n  // must be defined and accessible within the class where this method resides.\n  // Example (these should exist in the surrounding class):\n  // private Node assignLhsChild = null;\n  // private JSDocInfo getFunctionJsDocInfo(Node n) { /* implementation */ }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}