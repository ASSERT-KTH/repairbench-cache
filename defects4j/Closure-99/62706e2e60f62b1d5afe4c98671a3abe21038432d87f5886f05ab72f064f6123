{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            return false;\n        }\n\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN)) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (lhs.getType() == Token.GETPROP) {\n                Node getter = lhs.getFirstChild();\n                if (getter.getType() == Token.OBJECT_LITERAL ||\n                    getter.getType() == Token.NAME) {\n                    String propName = NodeUtil.getPropertyName(lhs);\n                    if (propName != null && (propName.equals(\"prototype\") ||\n                                           NodeUtil.isPrototypePropertyAccess(lhs))) {\n                        return false;\n                    }\n                }\n            } else if (lhs.getType() == Token.GETELEM) {\n                NodeGbElement gbElement = lhs.cast();\n                if (NodeUtil.isPrototypeElement(gbElement)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}