{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation, or are interfaces.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride() ||\n           jsDoc.isInterface())) { // Added check for @interface\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else { // n == rhs\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        // We traverse the LHS chain to check if any part of it is a '.prototype' access.\n        Node currentLhsNode = lhs;\n        while (currentLhsNode != null) {\n            if (currentLhsNode.isGetProp()) {\n                Node prop = currentLhsNode.getLastChild();\n                if (prop != null && prop.isString() && \"prototype\".equals(prop.getString())) {\n                    return false; // Found 'obj.prototype' in the chain\n                }\n                currentLhsNode = currentLhsNode.getFirstChild(); // Move to the object of the GETPROP\n            } else if (currentLhsNode.isGetElem()) {\n                Node index = currentLhsNode.getLastChild();\n                // Check if the computed property is the string \"prototype\" (e.g., a['prototype'])\n                if (index != null && index.isString() && \"prototype\".equals(index.getString())) {\n                    return false; // Found 'obj['prototype']' in the chain\n                }\n                currentLhsNode = currentLhsNode.getFirstChild(); // Move to the object of the GETELEM\n            } else {\n                // Not a property access, so stop traversing up the chain\n                break;\n            }\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}