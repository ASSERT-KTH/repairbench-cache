{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces, or have the @this or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Only traverse functions that could normally have a @this annotation.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n\n    if (n == lhs) {\n      // Always traverse the left-hand side. This is needed for handling\n      // nested assignments correctly.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Do not traverse if the assignment is to a prototype property.\n      // First, catch assignments that use normal (dot) notation.\n      if (lhs.getType() == Token.GETPROP &&\n          \"prototype\".equals(lhs.getLastChild().getString())) {\n        return false;\n      }\n      if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n        return false;\n      }\n      // Next, handle computed property assignments, e.g. a.prototype['xy'] = function() { ... }\n      if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        if (obj != null && obj.getType() == Token.GETPROP &&\n            obj.getLastChild() != null &&\n            \"prototype\".equals(obj.getLastChild().getString())) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}