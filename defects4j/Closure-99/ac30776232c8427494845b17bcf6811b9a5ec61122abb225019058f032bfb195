{
    "generation": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  // Skip any function that is known to bind `this` safely.\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null\n        && (jsDoc.isConstructor()\n            || jsDoc.hasThisType()\n            || jsDoc.isOverride()\n            || jsDoc.isInterface())) {\n      return false;\n    }\n    int pType = parent.getType();\n    // Only traverse top\u2010level functions or functions assigned at top\u2010level.\n    if (!(pType == Token.BLOCK\n          || pType == Token.SCRIPT\n          || pType == Token.NAME\n          || pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  // Handle assignments specially: we only skip RHS functions when\n  // they are methods on `prototype` itself or its *immediate* properties.\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (n == lhs) {\n      // Always traverse the LHS so we can track nested assignments.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // 1) a.prototype = ...\n      if (lhs.getType() == Token.GETPROP\n          && lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      // 2) a.prototype.x = ...  or  a.prototype[x] = ...\n      if (lhs.getType() == Token.GETPROP\n          || lhs.getType() == Token.GETELEM) {\n        Node qualifier = lhs.getFirstChild();\n        if (qualifier != null\n            && qualifier.getType() == Token.GETPROP\n            && qualifier.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}