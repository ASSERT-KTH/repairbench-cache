{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override or @interface annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride() ||\n           jsDoc.isInterface())) { // Added check for @interface\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (isPrototypePropertyAccess(lhs)) {\n            return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks if the given node represents a property access that is part of\n   * a prototype chain (e.g., `Foo.prototype`, `Foo.prototype.bar`, `Foo['prototype'].baz`).\n   * This is a recursive helper method.\n   *\n   * @param n The node to check (typically the left-hand side of an assignment).\n   * @return true if the node is a property access on a prototype chain, false otherwise.\n   */\n  private boolean isPrototypePropertyAccess(Node n) {\n    if (n == null) {\n      return false;\n    }\n\n    switch (n.getType()) {\n      case Token.GETPROP:\n        // Check if this GETPROP node itself is `something.prototype`\n        // The last child of a GETPROP is the property name (e.g., 'prototype' in 'obj.prototype').\n        if (n.getLastChild().isStringLit() && n.getLastChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n        // If not 'prototype' itself, check the object expression (first child) recursively.\n        // This covers cases like `obj.prototype.method` or `obj.sub.prototype.method`.\n        return isPrototypePropertyAccess(n.getFirstChild());\n\n      case Token.GETELEM:\n        // Check if this GETELEM node itself is `something['prototype']`\n        // The last child of a GETELEM is the property expression (e.g., the string literal 'prototype').\n        if (n.getLastChild().isStringLit() && n.getLastChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n        // If not 'prototype' itself, check the object expression (first child) recursively.\n        // This covers cases like `obj['prototype'].method` or `obj.sub['prototype'].method`.\n        return isPrototypePropertyAccess(n.getFirstChild());\n\n      case Token.NAME:\n        // Base case: If we reach a simple NAME node (e.g., 'a' in 'a.prototype.x')\n        // and haven't found 'prototype' yet, it means this chain does not involve 'prototype'.\n        return false;\n\n      default:\n        // For any other node type (e.g., CALL, NEW, etc.) that might appear as an LHS,\n        // it's not a direct property access leading to a prototype chain we care about.\n        return false;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}