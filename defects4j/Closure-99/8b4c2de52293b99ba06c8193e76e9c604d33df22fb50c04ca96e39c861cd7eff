{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n        // Skip traversal for function nodes that are constructors or have certain annotations\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                        jsDoc.hasThisType() ||\n                        jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Check if the parent is a prototype property assignment\n        int pType = parent.getType();\n        if (parent != null) {\n            if (parent.getType() == Token.ASSIGN) {\n                Node lhs = parent.getFirstChild();\n                if (lhs.getType() == Token.GETPROP && \"prototype\".equals(lhs.getLastChild().getString())) {\n                    return false;\n                }\n                if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                    return false;\n                }\n            } else if (parent.getType() == Token.RESET) { // For cases like a.prototype['x'] = function(){...}\n                return false;\n            }\n        }\n\n        // Only allow traversal for functions that can have a @this annotation\n        if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.NAME ||\n                pType == Token.ASSIGN)) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (lhs.getType() == Token.GETPROP &&\n                    lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}