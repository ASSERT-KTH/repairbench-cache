{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces (fix), or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||    // Fix: also skip interfaces\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (lhs.getType() == Token.GETPROP) {\n        // Fix: Check for *any* .prototype assignment, not just direct property,\n        // and allow traversal for prototype subproperty assignments (method definitions).\n        Node prop = lhs.getLastChild();\n        if (prop != null && prop.isString() && prop.getString().equals(\"prototype\")) {\n          // Assigning to .prototype directly, e.g. a.prototype = ...\n          return false;\n        }\n        // For patterns like a.prototype.b = ...\n        Node maybePrototype = lhs.getSecondChild();\n        if (maybePrototype != null && maybePrototype.isString() &&\n            maybePrototype.getString().equals(\"prototype\") &&\n            lhs.getChildCount() >= 3) {\n          // a.prototype.b = ... - this is a method/property assignment, should allow traversal\n          // so do not return false here\n        } else if (lhs.getQualifiedName() != null &&\n                   lhs.getQualifiedName().contains(\".prototype.\") &&\n                   lhs.getChildCount() < 3) {\n          // Defensive: If it's something weird, potentially block (conservative)\n          return false;\n        }\n      } else if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\") &&\n                 !(lhs instanceof com.google.javascript.rhino.Node.PropertyGet && lhs.getChildCount() >= 3)) {\n        // Defensive for non-standard cases\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}