{
    "generation": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  // Skip any function that is a constructor, interface, or has an explicit\n  // @this or @override annotation.\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n    // Only traverse function expressions/declarations in BLOCK, SCRIPT, NAME or ASSIGN\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  // If this function is the right\u2010hand side of an assignment to a\n  // prototype or a sub\u2010property of a prototype, skip it.\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (n == lhs) {\n      // Always traverse the left\u2010hand side to handle nested assignments.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Case 1: direct prototype assignment: a.prototype = \u2026\n      if (lhs.getType() == Token.GETPROP &&\n          lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      // Case 2: dot\u2010chained prototype subproperty: a.prototype.foo = \u2026\n      String qname = lhs.getQualifiedName();\n      if (qname != null && qname.contains(\".prototype.\")) {\n        return false;\n      }\n      // Case 3: computed prototype assignment: a.prototype['x'] = \u2026 or deeper.\n      if (lhs.getType() == Token.GETELEM) {\n        Node target = lhs.getFirstChild();\n        if (target.getType() == Token.GETPROP &&\n            target.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        String targetName = target.getQualifiedName();\n        if (targetName != null && targetName.contains(\".prototype.\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}