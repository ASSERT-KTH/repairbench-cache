{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override or @interface annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride() ||\n           jsDoc.isInterface())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n      // Special case: skip prototype property assignments, e.g.\n      // a.prototype.b = function() { ... }\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n          // Skip direct prototype property assignments: a.prototype.b = ...\n          if (lhs.getFirstChild() != null &&\n              lhs.getLastChild() != null &&\n              \"prototype\".equals(lhs.getFirstChild().getNext() != null\n                                     ? lhs.getFirstChild().getNext().getString()\n                                     : null)) {\n            return false;\n          }\n          // Skip prototype subproperty assignments, e.g. a.prototype.b.c = ...\n          String qName = lhs.getQualifiedName();\n          if (qName != null && qName.contains(\".prototype.\")) {\n            return false;\n          }\n          // Additionally, skip computed property assignments, e.g.\n          // a.prototype['x' + 'y'] = ...\n          Node prop = lhs.getChildCount() >= 2 ? lhs.getSecondChild() : null;\n          if (prop != null && !prop.isString()) {\n            Node maybeProto = lhs.getFirstChild().getNext();\n            if (maybeProto != null && \"prototype\".equals(maybeProto.getString())) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}