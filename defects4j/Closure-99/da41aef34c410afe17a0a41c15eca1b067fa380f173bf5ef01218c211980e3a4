{
    "generation": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse constructors, @this/@override-annotated functions, or @interface.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor()\n         || jsDoc.hasThisType()\n         || jsDoc.isOverride()\n         || jsDoc.isInterface())) {\n      return false;\n    }\n    // Only top\u2010level or simple assignments get checked.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK\n          || pType == Token.SCRIPT\n          || pType == Token.NAME\n          || pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (n == lhs) {\n      // Always traverse the LHS to handle nested assignments.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Skip methods assigned directly on a prototype:\n      //   a.prototype.foo = function() { \u2026 }\n      //   a.prototype['foo'] = function() { \u2026 }\n      if (lhs.getType() == Token.GETPROP || lhs.getType() == Token.GETELEM) {\n        Node qualifier = lhs.getFirstChild();\n        if (qualifier.getType() == Token.GETPROP\n            && qualifier.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}