{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces,\n    // or that have the @this or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Only traverse functions that could normally have a @this annotation.\n    // e.g., var a = function() { }, function a() {} or a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    // For nested assignments, always traverse the left-hand side.\n    if (n == lhs) {\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // When the function is the right-hand side, do not traverse if it is\n      // being assigned as a property of a prototype.\n      boolean isPrototypeAssignment = false;\n      if (lhs.getType() == Token.GETPROP) {\n        // e.g., a.prototype.b.c -> getQualifiedName() will detect \".prototype.\"\n        if (\"prototype\".equals(lhs.getLastChild().getString())) {\n          isPrototypeAssignment = true;\n        }\n      } else if (lhs.getType() == Token.GETELEM) {\n        // e.g., a.prototype['x' + 'y'] = function() { ... };\n        Node obj = lhs.getFirstChild();\n        if (obj != null && obj.getType() == Token.GETPROP &&\n            \"prototype\".equals(obj.getLastChild().getString())) {\n          isPrototypeAssignment = true;\n        }\n      }\n      String qName = lhs.getQualifiedName();\n      if (qName != null && qName.contains(\".prototype.\")) {\n        isPrototypeAssignment = true;\n      }\n      if (isPrototypeAssignment) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}