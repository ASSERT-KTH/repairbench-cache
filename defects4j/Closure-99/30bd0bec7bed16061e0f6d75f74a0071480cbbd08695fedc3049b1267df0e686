{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, have the @this or @override annotation,\n    // or are marked as an interface.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Only traverse functions that normally could have a @this annotation.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    \n    if (n == lhs) {\n      // Always traverse the left-hand side of an assignment.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Skip traversing the right side if the assignment is to a prototype property.\n      // This check covers both dot notation and computed (element) accesses.\n      if ((lhs.getType() == Token.GETPROP &&\n           \"prototype\".equals(lhs.getLastChild().getString())) ||\n          (lhs.getType() == Token.GETELEM &&\n           lhs.getFirstChild() != null &&\n           lhs.getFirstChild().getType() == Token.GETPROP &&\n           \"prototype\".equals(lhs.getFirstChild().getLastChild().getString())) ||\n          (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\"))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}