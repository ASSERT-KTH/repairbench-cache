{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override or @interface annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride() ||\n           jsDoc.isInterface())) { // Added jsDoc.isInterface()\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        // Replaced specific GETPROP/getQualifiedName checks with a general helper.\n        if (isPrototypeProperty(lhs)) {\n            return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks if a node represents a property access chain that includes\n   * \".prototype\" or \"['prototype']\" anywhere in its structure.\n   * This is used to identify method assignments to prototype chains.\n   *\n   * @param n The node to check (typically the LHS of an assignment, a GETPROP or GETELEM).\n   * @return true if 'n' or any of its ancestors in the property access chain\n   *         is a direct \"prototype\" property, false otherwise.\n   */\n  private boolean isPrototypeProperty(Node n) {\n    if (n == null) {\n        return false;\n    }\n    Node current = n;\n    // Traverse up the property access chain (e.g., from 'c' in 'a.b.prototype.c')\n    while (current != null && (current.isGetProp() || current.isGetElem())) {\n      Node property = current.getLastChild(); // The property name part (e.g., 'c', 'b', 'prototype')\n      Node object = current.getFirstChild();   // The object part (e.g., 'a.b.prototype', 'a.b', 'a')\n\n      // Check if the current property access is directly to 'prototype'\n      if (current.isGetProp() && \"prototype\".equals(property.getString())) {\n        return true;\n      }\n      // Handle bracket access: e.g., obj['prototype']\n      if (current.isGetElem() && property.isString() && \"prototype\".equals(property.getString())) {\n        return true;\n      }\n\n      current = object; // Move up to the object of the current access and continue checking\n    }\n    return false;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}