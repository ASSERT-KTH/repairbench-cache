{
    "generation": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  // Skip certain function contexts entirely.\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    // Don't traverse constructors, @this/@override annotated functions, or @interface.\n    if (jsDoc != null &&\n        (jsDoc.isConstructor()\n         || jsDoc.hasThisType()\n         || jsDoc.isOverride()\n         || jsDoc.isInterface())) {\n      return false;\n    }\n    // Only traverse \"global\" function contexts:\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK\n          || pType == Token.SCRIPT\n          || pType == Token.NAME\n          || pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  // Handle assignments specially: only traverse the RHS when it is *not*\n  // a direct prototype definition or a direct method on a prototype.\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n    if (n == lhs) {\n      // Always traverse into the LHS so we can handle nested assignments.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Skip RHS if it's \"X.prototype = ...\" \n      if (lhs.getType() == Token.GETPROP\n          && lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      // Skip RHS if it's \"X.prototype.foo = ...\" (direct property of prototype).\n      if (lhs.getType() == Token.GETPROP) {\n        String qn = lhs.getQualifiedName();\n        if (qn != null) {\n          int idx = qn.indexOf(\".prototype.\");\n          if (idx != -1) {\n            String after = qn.substring(idx + \".prototype.\".length());\n            // if there's no further '.' then it's a direct method on the prototype\n            if (after.indexOf('.') == -1) {\n              return false;\n            }\n          }\n        }\n      }\n      // Skip RHS if it's \"X.prototype['foo'] = ...\" (direct dynamic prop on prototype).\n      if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        if (obj.getType() == Token.GETPROP\n            && obj.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}