{
    "generation": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse constructors or functions with @this, @override, or @interface.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n    // Only traverse top\u2010level or direct assignment contexts.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (n == lhs) {\n      // Always traverse the left side to handle nested assignments.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Skip functions assigned as a direct property of a prototype:\n      //   Foo.prototype.x = function() { \u2026 }\n      // or\n      //   Foo.prototype[expr] = function() { \u2026 }\n      if (lhs.getType() == Token.GETPROP) {\n        Node obj = lhs.getFirstChild();\n        if (obj.getType() == Token.GETPROP\n            && obj.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      } else if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        if (obj.getType() == Token.GETPROP\n            && obj.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}