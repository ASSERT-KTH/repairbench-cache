{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else { // n is rhs (the value being assigned)\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        Node assignTarget = lhs;\n\n        boolean isPrototypePropertyAssignment = false;\n\n        // Check for direct assignment to a prototype property (e.g., Foo.prototype = ...)\n        if (assignTarget.isGetProp() && assignTarget.getLastChild().getString().equals(\"prototype\")) {\n          isPrototypePropertyAssignment = true;\n        }\n\n        // Check for assignments to properties on a prototype (e.g., Foo.prototype.bar = ..., Foo.prototype.b.c = ...)\n        // This covers qualified names containing \".prototype.\".\n        if (!isPrototypePropertyAssignment && assignTarget.getQualifiedName() != null && assignTarget.getQualifiedName().contains(\".prototype.\")) {\n            isPrototypePropertyAssignment = true;\n        }\n\n        // Check for assignments to dynamic properties on a prototype (e.g., Foo.prototype['bar'] = ...)\n        // or on a sub-property of a prototype (e.g., Foo.prototype.b['c'] = ...).\n        // This handles Token.GETELEM nodes.\n        if (!isPrototypePropertyAssignment && assignTarget.isGetElem()) {\n            Node objectNode = assignTarget.getFirstChild(); // The object being indexed (e.g., Foo.prototype)\n            if (objectNode.isGetProp() && objectNode.getLastChild().getString().equals(\"prototype\")) {\n                isPrototypePropertyAssignment = true;\n            } else if (objectNode.getQualifiedName() != null && objectNode.getQualifiedName().contains(\".prototype.\")) {\n                isPrototypePropertyAssignment = true;\n            }\n        }\n\n        if (isPrototypePropertyAssignment) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}