{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this,\n    // @override, or @interface annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (lhs.getType() == Token.GETPROP) {\n        // Check if the assignment is directly to a prototype property,\n        // i.e., a.prototype or a.prototype.X\n        Node target = lhs;\n        boolean isPrototype = false;\n\n        // Check for a.prototype (direct prototype assignment)\n        if (\"prototype\".equals(target.getLastChild().getString())) {\n          isPrototype = true;\n        } else {\n          // Check for a.prototype.* assignment\n          Node last = target;\n          // Traverse GETPROP chain backwards looking for 'prototype'\n          while (last != null && last.getType() == Token.GETPROP) {\n            if (\"prototype\".equals(last.getLastChild().getString())) {\n              isPrototype = true;\n              break;\n            }\n            last = last.getFirstChild();\n          }\n        }\n\n        if (isPrototype) {\n          return false;\n        }\n      }\n\n      // Also block for non-static, e.g., strings with \".prototype.\" anywhere\n      if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}