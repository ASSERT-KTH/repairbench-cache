{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces,\n    // or have the @this or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    // If we're traversing the left side then record it but always traverse.\n    if (n == lhs) {\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it is not an assignment to a prototype\n      // property or subproperty.\n      if (lhs.getType() == Token.GETPROP &&\n          \"prototype\".equals(lhs.getLastChild().getString())) {\n        return false;\n      }\n      // For computed property accesses (GETELEM) the qualified name is null.\n      // Check if the base of the property access is a prototype.\n      if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        if (obj != null) {\n          if (obj.getType() == Token.GETPROP &&\n              \"prototype\".equals(obj.getLastChild().getString())) {\n            return false;\n          }\n          String qName = obj.getQualifiedName();\n          if (qName != null && qName.contains(\".prototype.\")) {\n            return false;\n          }\n        }\n      }\n      if (lhs.getQualifiedName() != null &&\n          lhs.getQualifiedName().contains(\".prototype.\")) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}