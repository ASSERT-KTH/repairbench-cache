{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces, or have\n    // the @this or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n\n    // For assignments, skip traversal if assigning to a prototype property or subproperty,\n    // including computed property assignments (i.e., bracket notation).\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n\n      if (isPrototypeProperty(lhs)) {\n        return false;\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty, including bracket notation.\n      if (isPrototypeProperty(lhs)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Helper to determine whether the given node corresponds to a prototype\n * property or subproperty assignment, including bracket notation.\n */\nprivate boolean isPrototypeProperty(Node lhs) {\n  if (lhs == null) {\n    return false;\n  }\n  if (lhs.isGetProp()) {\n    Node pname = lhs.getLastChild();\n    if (pname != null && pname.getString().equals(\"prototype\")) {\n      return true;\n    }\n    String qualifiedName = lhs.getQualifiedName();\n    return qualifiedName != null && qualifiedName.contains(\".prototype.\");\n  } else if (lhs.isGetElem()) {\n    // Handle bracket notation on prototype or its subproperties\n    Node target = lhs.getFirstChild();\n    if (target != null) {\n      String targetName = target.getQualifiedName();\n      if (targetName != null && (targetName.endsWith(\".prototype\") || targetName.contains(\".prototype.\"))) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}