{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces, or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally be able\n    // to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle nested assignments\n      // properly (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype property\n      // or subproperty.\n      //\n      // For a GETPROP node (non computed property access), check if the property chain\n      // involves \"prototype\".\n      if (lhs.getType() == Token.GETPROP) {\n        if (\"prototype\".equals(lhs.getLastChild().getString())) {\n          return false;\n        }\n        String qname = lhs.getQualifiedName();\n        if (qname != null && qname.contains(\".prototype.\")) {\n          return false;\n        }\n      }\n      // For a GETELEM node (computed property access), inspect its object part.\n      else if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        if (obj != null) {\n          // If the object is a GETPROP, then check similarly.\n          if (obj.getType() == Token.GETPROP) {\n            if (\"prototype\".equals(obj.getLastChild().getString())) {\n              return false;\n            }\n            String qname = obj.getQualifiedName();\n            if (qname != null && (qname.contains(\".prototype\") || qname.endsWith(\"prototype\"))) {\n              return false;\n            }\n          }\n          // Fallback: if the object has a qualified name that indicates it's a prototype,\n          // skip the right-hand side.\n          String qname = obj.getQualifiedName();\n          if (qname != null && (qname.contains(\".prototype\") || qname.endsWith(\"prototype\"))) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}