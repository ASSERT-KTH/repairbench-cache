{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors, interfaces or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        boolean isPrototypeAssignment = false;\n        if (lhs.getType() == Token.GETPROP) {\n          // Check for a direct \".prototype\"\n          if (lhs.getLastChild().isString() && lhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n          // Check if \"prototype\" is a property in the chain, e.g., a.prototype.b, a.prototype['b'], etc.\n          Node current = lhs;\n          while (current != null) {\n            if ((current.isGetProp() || current.isGetElem()) &&\n                current.getFirstChild() != null &&\n                ((current.isGetProp() && current.getLastChild().isString() && current.getLastChild().getString().equals(\"prototype\")) ||\n                 (current.isGetElem() && current.getLastChild().isString() && current.getLastChild().getString().equals(\"prototype\")))) {\n              isPrototypeAssignment = true;\n              break;\n            }\n            if (current.isGetProp() || current.isGetElem()) {\n              current = current.getFirstChild();\n            } else {\n              break;\n            }\n          }\n        }\n\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          isPrototypeAssignment = true;\n        }\n\n        if (isPrototypeAssignment) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}