{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this,\n    // @override, or @interface annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    // For nested assignments, always traverse the left-hand side.\n    if (n == lhs) {\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // For the right-hand side, do not traverse functions that are part of\n      // a prototype property assignment.\n      if (lhs.getType() == Token.GETPROP) {\n        if (\"prototype\".equals(lhs.getLastChild().getString())) {\n          return false;\n        }\n      } else if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        if (obj != null && obj.getType() == Token.GETPROP) {\n          if (\"prototype\".equals(obj.getLastChild().getString())) {\n            return false;\n          }\n          String objQualifiedName = obj.getQualifiedName();\n          if (objQualifiedName != null && objQualifiedName.contains(\".prototype.\")) {\n            return false;\n          }\n        }\n      }\n      String lhsQName = lhs.getQualifiedName();\n      if (lhsQName != null && lhsQName.contains(\".prototype.\")) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}