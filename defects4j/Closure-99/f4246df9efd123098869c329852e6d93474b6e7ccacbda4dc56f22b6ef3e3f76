{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this,\n    // @override, or @interface annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride() ||\n         jsDoc.isInterface())) {\n      return false;\n    }\n\n    // Only traverse functions if they are in a context where a @this annotation\n    // would normally be allowed. For example, these contexts are:\n    //   - var a = function() { };\n    //   - function a() { }\n    //   - a.x = function() { }\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    // Always traverse the left side of the assignment.\n    if (n == lhs) {\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // For the right side, check if the assignment is to a prototype method.\n      // In the case of a GETPROP, check both the final property and the full qualified name.\n      if (lhs.getType() == Token.GETPROP) {\n        if (lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n      } else if (lhs.getType() == Token.GETELEM) {\n        // For computed properties, try to get the receiver.\n        Node receiver = lhs.getFirstChild();\n        if (receiver != null && receiver.getQualifiedName() != null &&\n            receiver.getQualifiedName().endsWith(\".prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}