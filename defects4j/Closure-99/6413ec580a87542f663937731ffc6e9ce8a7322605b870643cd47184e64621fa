{
    "generation": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse constructors, @this or @override annotations,\n    // or @interface functions.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor()\n         || jsDoc.hasThisType()\n         || jsDoc.isOverride()\n         || jsDoc.isInterface())) {\n      return false;\n    }\n    // Only top\u2010level functions and functions on assignments/names.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK\n          || pType == Token.SCRIPT\n          || pType == Token.NAME\n          || pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (n == lhs) {\n      // Remember the LHS in case of nested assignments, e.g.\n      // (a = this).prop = \u2026\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only skip the RHS when it's a direct prototype assignment\n      // or a direct property of the prototype, e.g.:\n      //   a.prototype = \u2026\n      //   a.prototype.foo = \u2026\n      //   a.prototype['bar'] = \u2026\n      if (lhs.getType() == Token.GETPROP\n          && lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      if ((lhs.getType() == Token.GETPROP || lhs.getType() == Token.GETELEM)) {\n        Node obj = lhs.getFirstChild();\n        if (obj != null\n            && obj.getType() == Token.GETPROP\n            && obj.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}