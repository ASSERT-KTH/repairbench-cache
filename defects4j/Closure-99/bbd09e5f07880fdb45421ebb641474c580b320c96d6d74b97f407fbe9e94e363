{
    "generation": "@Override\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  // Since this pass reports errors only when a global `this` keyword\n  // is encountered, there is no reason to traverse non-global contexts.\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors, interfaces,\n    // or have the @this or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor()\n         || jsDoc.isInterface()\n         || jsDoc.hasThisType()\n         || jsDoc.isOverride())) {\n      return false;\n    }\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK\n          || pType == Token.SCRIPT\n          || pType == Token.NAME\n          || pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  // Handle methods assigned to prototype chains.\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    // Always traverse the left side of the assignment.\n    if (n == lhs) {\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Don't traverse the right side (the function) if the LHS\n      // is assigning to a prototype property or any subproperty.\n      // e.g. a.prototype = \u2026; a.prototype.foo = \u2026; a.prototype['bar'] = \u2026;\n      if (lhs.getType() == Token.GETPROP &&\n          lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      if (lhs.getQualifiedName() != null &&\n          lhs.getQualifiedName().contains(\".prototype.\")) {\n        return false;\n      }\n      if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        if (obj.getType() == Token.GETPROP &&\n            obj.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        String objQName = obj.getQualifiedName();\n        if (objQName != null && objQName.contains(\".prototype.\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}