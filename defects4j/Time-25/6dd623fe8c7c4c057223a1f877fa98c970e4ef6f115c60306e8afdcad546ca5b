{
    "generation": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        long instant = instantLocal - offsetLocal;\n        long bestAdjusted = instantAdjusted;\n        int bestOffset = offsetAdjusted;\n\n        // try both possible offsets to see which one is correct\n        int offset1 = offsetLocal;\n        int offset2 = offsetAdjusted;\n        long instantAdjusted1 = instantLocal - offset1;\n        long instantAdjusted2 = instantLocal - offset2;\n\n        // find which adjusted instant is in a valid local time range\n        // (i.e., not in the gap)\n        if (offset1 > offset2) {\n            // going into DST: the gap is at the start of the DST period\n            // we want the later offset (summer time)\n            if (getOffset(instantAdjusted1) == offset1) {\n                return offset1;\n            }\n            return offset2;\n        } else {\n            // going out of DST: the gap is at the end of the DST period\n            // we want the earlier offset (summer time)\n            if (getOffset(instantAdjusted2) == offset2) {\n                return offset2;\n            }\n            return offset1;\n        }\n    }\n    return offsetAdjusted;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}