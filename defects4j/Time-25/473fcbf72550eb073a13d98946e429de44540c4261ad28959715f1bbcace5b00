{
    "generation": "    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the later instant. The combination of these two rules is to always favour\n     * standard (winter) time over daylight (summer) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure consistency with Joda-Time's standard\n            // behavior of preferring standard (winter) time during overlaps\n            long diff = offsetLocal - offsetAdjusted;\n            if (diff < 0) {\n                // We crossed a DST gap backward (fall transition)\n                // Try with the adjusted offset to see if it works better\n                final long instantAdjusted2 = instantLocal - offsetAdjusted;\n                final int offsetAdjusted2 = getOffset(instantAdjusted2);\n                if (offsetAdjusted == offsetAdjusted2) {\n                    return offsetAdjusted;\n                }\n                // If we're still ambiguous, prefer the standard time offset (which comes first)\n                // So we need to return the smaller offset\n                return Math.min(offsetLocal, offsetAdjusted);\n            } else if (diff > 0) {\n                // We crossed into DST (spring transition gap)\n                // According to the method contract, we should always map to after the gap\n                return offsetLocal;\n            }\n        }\n        return offsetAdjusted;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}