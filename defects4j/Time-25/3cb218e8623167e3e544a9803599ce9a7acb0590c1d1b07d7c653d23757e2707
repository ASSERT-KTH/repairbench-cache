{
    "generation": "    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) { // Gap (spring forward): offsetLocal < offsetAdjusted (e.g., +03:00 to +04:00)\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else { // Overlap (fall back): offsetLocal > offsetAdjusted (e.g., +04:00 to +03:00)\n                // During overlap, favour daylight (summer) time, which corresponds to offsetLocal.\n                return offsetLocal;\n            }\n        }\n\n        // If offsetLocal == offsetAdjusted, it's either unambiguous, or it's an overlap\n        // where the initial getOffset(instantLocal) already defaulted to the standard offset.\n        // We need to check if the daylight offset is also a valid mapping.\n        // This is done by testing an offset one hour greater than the resolved offset.\n        // The one-hour adjustment covers most common DST transitions.\n        final int offsetOneHourForward = getOffset(instantAdjustAdjusted + 3600000L); // Check offset an hour ahead (UTC)\n        if (getOffset(instantLocal - offsetOneHourForward) == offsetOneHourForward) {\n            // If the time local - offsetOneHourForward results in an actual offset that matches offsetOneHourForward,\n            // it means this is a valid mapping for instantLocal.\n            // If offsetOneHourForward is greater than offsetAdjusted, it implies it's a daylight offset.\n            // We favor daylight in ambiguous cases.\n            if (offsetOneHourForward > offsetAdjusted) {\n                return offsetOneHourForward;\n            }\n        }\n        \n        return offsetAdjusted;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}