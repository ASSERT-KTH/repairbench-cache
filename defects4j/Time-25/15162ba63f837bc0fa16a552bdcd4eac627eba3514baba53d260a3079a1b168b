{
    "generation": "    /**\n     * Gets the millisecond offset to subtract from local time to get UTC time.\n     * This offset can be used to undo adding the offset obtained by getOffset.\n     *\n     * <pre>\n     * millisLocal == millisUTC   + getOffset(millisUTC)\n     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)\n     * </pre>\n     *\n     * NOTE: After calculating millisLocal, some error may be introduced. At\n     * offset transitions (due to DST or other historical changes), ranges of\n     * local times may map to different UTC times.\n     * <p>\n     * This method will return an offset suitable for calculating an instant\n     * after any DST gap. For example, consider a zone with a cutover\n     * from 01:00 to 01:59:<br />\n     * Input: 00:00  Output: 00:00<br />\n     * Input: 00:30  Output: 00:30<br />\n     * Input: 01:00  Output: 02:00<br />\n     * Input: 01:30  Output: 02:30<br />\n     * Input: 02:00  Output: 02:00<br />\n     * Input: 02:30  Output: 02:30<br />\n     * <p>\n     * During a DST overlap (where the local time is ambiguous) this method will return\n     * the earlier instant. The combination of these two rules is to always favour\n     * daylight (summer) time over standard (winter) time.\n     * <p>\n     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.\n     * Prior to v1.5, the DST gap behaviour was also not defined.\n     *\n     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n     * @return the millisecond offset to subtract from local time to get UTC time\n     */\n    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // We have two candidate offsets, offsetLocal and offsetAdjusted.\n            // According to the Javadoc, we should always favour daylight (summer) time.\n            // This means we need to determine which of the two offsets is the daylight one\n            // and return it.\n\n            // If (offsetLocal - offsetAdjusted) < 0, it means offsetLocal is smaller than offsetAdjusted.\n            // This implies offsetLocal is likely the standard/winter offset and offsetAdjusted is the daylight/summer offset.\n            // (e.g., +03:00 vs +04:00, or +01:00 vs +02:00 in certain interpretations of local vs adjusted times).\n            // In this case, offsetAdjusted is the daylight offset.\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                return offsetAdjusted;\n            } else { // (offsetLocal - offsetAdjusted) > 0, meaning offsetLocal is larger than offsetAdjusted.\n                // This implies offsetLocal is likely the daylight/summer offset and offsetAdjusted is the standard/winter offset.\n                // (e.g., +02:00 vs +01:00).\n                // In this case, offsetLocal is the daylight offset.\n                return offsetLocal;\n            }\n        }\n        return offsetAdjusted;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}