{
    "generation": "public int getOffsetFromLocal(long instantLocal) {\n    // First estimate: treat instantLocal as UTC to get an initial offset\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    // 1) Handle DST\u2010overlap (fall\u2010back) where a local time repeats.\n    //    We find the last transition before our adjusted instant,\n    //    compute the two local times just before/after the transition,\n    //    and if instantLocal lies in the overlap interval we choose\n    //    the larger offset (i.e. daylight time).\n    long prevTrans = previousTransition(instantAdjusted);\n    if (prevTrans != instantAdjusted) {\n        int offsetBefore = getOffset(prevTrans - 1);\n        int offsetAfter = getOffset(prevTrans);\n        if (offsetAfter < offsetBefore) {\n            long localAfter = prevTrans + offsetAfter;\n            long localBefore = prevTrans + offsetBefore;\n            if (instantLocal >= localAfter && instantLocal < localBefore) {\n                // ambiguous \u2013 favour daylight (summer) time\n                return Math.max(offsetBefore, offsetAfter);\n            }\n        }\n    }\n\n    // 2) Handle DST\u2010gap (spring\u2010forward) using the original logic.\n    if (offsetLocal != offsetAdjusted) {\n        if (offsetLocal < offsetAdjusted) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                // in the gap, return the original estimate\n                return offsetLocal;\n            }\n        }\n    }\n\n    // 3) Normal case\n    return offsetAdjusted;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}