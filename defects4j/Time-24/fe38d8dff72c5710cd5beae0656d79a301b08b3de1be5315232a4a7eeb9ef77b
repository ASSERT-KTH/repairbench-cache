{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // For fields whose duration falls between months and days, we need a default\n        // \u201cyear\u2010anchor\u201d value. However, if the parsed input already produced a\n        // calendar year or a weekyear then no default is necessary.\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            boolean foundYear = false;\n            boolean foundWeekyear = false;\n            boolean foundWeekOfWeekyear = false;\n            for (int i = 0; i < count; i++) {\n                DateTimeFieldType type = savedFields[i].iField.getType();\n                if (type == DateTimeFieldType.year()) {\n                    foundYear = true;\n                } else if (type == DateTimeFieldType.weekyear()) {\n                    foundWeekyear = true;\n                } else if (type == DateTimeFieldType.weekOfWeekyear()) {\n                    foundWeekOfWeekyear = true;\n                }\n            }\n            // Only add a default if no year or weekyear field was explicitly parsed.\n            if (!foundYear && !foundWeekyear) {\n                // If the format includes a week-of-weekyear token then use a weekyear default.\n                if (foundWeekOfWeekyear) {\n                    saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n                } else {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                }\n            }\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < iSavedFieldsCount; i++) {\n            millis = iSavedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}