{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0 && isWeekOrWeekDay(count, savedFields)) {\n            if (count > 1) {\n                // if there are any other fields, except weekyear & week or weekday,\n                // recompute after saving them (JODA-629)\n                int weeky = -1, week = -1, day = -1;\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {\n                        weeky = i;\n                    } else if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekOfWeekyear())) {\n                        week = i;\n                    } else if (savedFields[i].iField.getType().equals(DateTimeFieldType.dayOfWeek())) {\n                        day = i;\n                    }\n                }\n                if (weeky != -1) {\n                    if (week != -1) {\n                        // keep weekyear and week, and set them later,\n                        // so that other fields (i.e. month, day) are not ignored (JODA-524)\n                        long instant = iMillis;\n                        for (int i = 0; i < count; i++) {\n                            if (i != weeky && i != week) {\n                                instant = savedFields[i].set(instant, resetFields);\n                            }\n                        }\n                        long weekyear = savedFields[weeky].iField.set(instant, savedFields[weeky].iValue);\n                        long weekOfWeekyear = savedFields[week].iField.set(weekyear, savedFields[week].iValue);\n                        return weekOfWeekyear;\n                    } else if (day != -1) {\n                        long instant = iMillis;\n                        for (int i = 0; i < count; i++) {\n                            if (i != weeky && i != day) {\n                                instant = savedFields[i].set(instant, resetFields);\n                            }\n                        }\n                        long weekyear = savedFields[weeky].iField.set(instant, savedFields[weeky].iValue);\n                        long dayOfWeek = savedFields[day].iField.set(weekyear, savedFields[day].iValue);\n                        return dayOfWeek;\n                    }\n                }\n            }\n        }\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }\n\n    private boolean isWeekOrWeekDay(int count, SavedField[] savedFields) {\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if (type.equals(DateTimeFieldType.weekyear()) || type.equals(DateTimeFieldType.weekOfWeekyear()) || type.equals(DateTimeFieldType.dayOfWeek())) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}