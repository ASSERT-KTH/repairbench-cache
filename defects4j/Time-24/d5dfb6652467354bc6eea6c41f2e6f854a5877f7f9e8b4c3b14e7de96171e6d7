{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        // --- START FIX FOR WEEKYEAR/YEAR + MONTH + WEEK parsing ---\n        if (count > 0) {\n            // If pattern of fields is: (weekyear|year), monthOfYear, weekOfWeekyear\n            DateTimeFieldType t0 = savedFields[0].iFieldType;\n            if ((t0 == DateTimeFieldType.weekyear() || t0 == DateTimeFieldType.year()) && count >= 3) {\n                DateTimeFieldType t1 = savedFields[1].iFieldType;\n                DateTimeFieldType t2 = savedFields[2].iFieldType;\n                if (t1 == DateTimeFieldType.monthOfYear() && t2 == DateTimeFieldType.weekOfWeekyear()) {\n                    // Find correct year\n                    int year = savedFields[0].iValue;\n                    int month = savedFields[1].iValue;\n                    int week = savedFields[2].iValue;\n\n                    // The parsed week belongs to the week-based year (iso), given by year in the string,\n                    // but parsed DateTime constructs from calendar fields. We must find the actual\n                    // local date corresponding to that weekOfWeekyear of that weekyear.\n                    // The LocalDate constructor LocalDate(weekyear, weekOfWeekyear, 1) gives\n                    // the first day of that week in that weekyear, but our string has a month field,\n                    // so user expects the result that matches that month for that string, which is\n                    // the first day of the weekOfWeekyear in that month for that weekyear.\n                    // However, as per ISO, Jan 1 may belong to another weekyear.\n\n                    // Instead, for correct behavior, we should set the default year to the parsed year.\n                    iDefaultYear = year;\n                }\n            }\n        }\n        // --- END FIX FOR WEEKYEAR/YEAR + MONTH + WEEK parsing ---\n\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}