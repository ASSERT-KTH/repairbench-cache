{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        long initialMillis = iMillis; // This is the value from the constructor, potentially with iDefaultYear\n\n        boolean containsYearLikeField = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n            if (fieldType == DateTimeFieldType.year() ||\n                fieldType == DateTimeFieldType.yearOfEra() ||\n                fieldType == DateTimeFieldType.yearOfCentury() ||\n                fieldType == DateTimeFieldType.weekyear()) {\n                containsYearLikeField = true;\n                break;\n            }\n        }\n\n        // If a year-like field (e.g., year, weekyear) was explicitly parsed,\n        // override the initial millis value which might have been set using iDefaultYear.\n        // Instead, start from a neutral year (1970) to allow the parsed year/weekyear field\n        // to properly set the year without interference from the default year.\n        // iDefaultMonth, iDefaultDay, etc. ensure that if month/day are not\n        // specified in the text, they still default to 1 as per bucket configuration.\n        if (containsYearLikeField) {\n            initialMillis = iChrono.getDateTimeMillis(\n                1970, // A neutral year (epoch year for most common chronologies)\n                iDefaultMonth, \n                iDefaultDay,\n                iDefaultHour, \n                iDefaultMinute,\n                iDefaultSecond,\n                iDefaultMillis\n            );\n        }\n\n        long millis = initialMillis;\n\n        // This block handles cases where no explicit year-like field was provided in the text\n        // (i.e., containsYearLikeField is false), and the first field parsed is a month or day.\n        // In such cases, the iDefaultYear must be explicitly applied.\n        if (count > 0) {\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                // The current implementation of compareReverse makes this condition true\n                // if 'first' is a duration field between 'days' and 'months' (inclusive).\n                // If this condition is met and no year field was parsed, explicitly save\n                // the default year and recompute to ensure it's applied correctly.\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}