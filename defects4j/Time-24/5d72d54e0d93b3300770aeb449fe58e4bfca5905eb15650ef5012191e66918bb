{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // This recursive call is okay, the fix below works on the potentially updated savedFields\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                long currentMillis = millis; // Store millis before applying this field\n\n                // Special handling for weekOfWeekyear when year or weekyear is also present.\n                // This addresses issues where applying monthOfYear before weekOfWeekyear\n                // causes weekOfWeekyear to be computed in the wrong weekyear context.\n                if (savedField.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                    // Find if an explicit year or weekyear field was parsed\n                    SavedField yearContextSavedField = null;\n                    for (int j = 0; j < count; j++) { // Check all saved fields\n                        DateTimeFieldType type = savedFields[j].iField.getType();\n                        // Use the first year or weekyear field found as the context\n                        if (type == DateTimeFieldType.year() || type == DateTimeFieldType.weekyear()) {\n                            yearContextSavedField = savedFields[j];\n                            break; \n                        }\n                    }\n\n                    if (yearContextSavedField != null) {\n                         // If we have weekOfWeekyear ('ww') and an explicit year ('yyyy') or weekyear ('xxxx'),\n                         // ensure 'ww' is interpreted within that explicitly given year/weekyear.\n                         int yearToUse = yearContextSavedField.iValue;\n                         \n                         // Get the weekyear field from the chronology. We need this to set the weekyear context.\n                         DateTimeField weekyearDateTimeField = iChrono.weekyear();\n                         \n                         // Adjust the instant (currentMillis) to be within the correct weekyear\n                         // *before* calling set() for the weekOfWeekyear field.\n                         // This ensures that the weekOfWeekyear field calculation uses the intended weekyear.\n                         currentMillis = weekyearDateTimeField.set(currentMillis, yearToUse);\n                         \n                         // Now call the original set method for weekOfWeekyear, but pass the\n                         // millis that has the correct weekyear context.\n                         millis = savedField.set(currentMillis, resetFields);\n                         \n                         // Skip the default application logic below for this field as we've handled it.\n                         continue; \n                    }\n                    // else: No explicit year/weekyear found. Let weekOfWeekyear be applied normally\n                    // using the intermediate millis calculated so far. Falls through to default logic.\n                }\n                \n                // Apply field normally if it wasn't the special weekOfWeekyear case handled above.\n                millis = savedField.set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        // Zone adjustment logic remains the same\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            // Check for issues caused by time zone transitions (e.g., DST)\n            // Note: Later Joda-Time versions throw IllegalInstantException here.\n            // Keeping IllegalArgumentException consistent with the original provided code.\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}