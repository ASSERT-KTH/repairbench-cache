{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    // Handle week year and week of year fields\n    if (count > 1) {\n        DateTimeFieldType weekYearType = DateTimeFieldType.weekyear();\n        DateTimeFieldType weekOfYearType = DateTimeFieldType.weekOfWeekyear();\n        int weekYear = -1;\n        int weekOfYear = -1;\n\n        for (int i = 0; i < count; i++) {\n            if (weekYearType.equals(savedFields[i].iField)) {\n                weekYear = savedFields[i].iValue;\n            } else if (weekOfYearType.equals(savedFields[i].iField)) {\n                weekOfYear = savedFields[i].iValue;\n            }\n        }\n\n        if (weekYear != -1 && weekOfYear != -1) {\n            DateTimeField weekYearField = weekYearType.getField(iChrono);\n            DateTimeField weekOfYearField = weekOfYearType.getField(iChrono);\n            int year = weekYearField.getValue(millis);\n            int week = weekOfYearField.getValue(millis);\n\n            if (year != weekYear || week != weekOfYear) {\n                millis = weekYearField.set(millis, weekYear);\n                millis = weekOfYearField.set(millis, weekOfYear);\n            }\n        }\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}