{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        \n        // Joda-Time bug fix: When parsing patterns like \"yyyy-MM-ww\" or \"xxxx-MM-ww\",\n        // the interaction between 'year' (calendar year) and 'weekOfWeekyear'\n        // can lead to incorrect results. 'weekOfWeekyear' fields depend on the\n        // ISO week-year, but 'year' is a calendar year.\n        // If a week-based field (like weekOfWeekyear or dayOfWeek) is present,\n        // and a calendar 'year' was parsed, but no explicit 'weekyear' (xxxx) was parsed,\n        // then the calendar year should be interpreted as the ISO 'weekyear' for proper calculation.\n        \n        SavedField yearField = null; // Stores the SavedField object for DateTimeFieldType.year()\n        boolean hasWeekYearField = false; // True if DateTimeFieldType.weekyear() is present\n        boolean hasWeekBasedField = false; // True if DateTimeFieldType.weekOfWeekyear() or dayOfWeek() is present\n\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n            if (fieldType == DateTimeFieldType.year()) {\n                yearField = savedFields[i];\n            } else if (fieldType == DateTimeFieldType.weekyear()) {\n                hasWeekYearField = true;\n            } else if (fieldType == DateTimeFieldType.weekOfWeekyear() ||\n                       fieldType == DateTimeFieldType.dayOfWeek()) {\n                hasWeekBasedField = true;\n            }\n        }\n\n        // If a week-based field is present AND a calendar year was specified,\n        // BUT no explicit weekyear was specified (xxxx),\n        // then replace the calendar year field with a weekyear field using the same value.\n        // This forces week-based calculations to use the provided year as an ISO week-year.\n        if (hasWeekBasedField && yearField != null && !hasWeekYearField) {\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i] == yearField) {\n                    // Replace the calendar year field with an ISO weekyear field\n                    savedFields[i] = new SavedField(\n                        DateTimeFieldType.weekyear().getField(iChrono),\n                        yearField.iValue\n                    );\n                    break; // Found and replaced, exit loop\n                }\n            }\n        }\n\n        sort(savedFields, count); // Re-sort the fields after potential modification, to ensure correct order\n        \n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            // This block handles cases where no year/weekyear was specified in the pattern,\n            // defaulting the year. The logic above handles cases where a year IS specified.\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // Recursive call to reprocess with the default year now saved.\n                // This will re-sort and apply fields again.\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}