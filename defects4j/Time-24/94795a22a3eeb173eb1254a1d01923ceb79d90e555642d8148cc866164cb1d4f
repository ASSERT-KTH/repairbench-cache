{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    // Fix: Only save default year if a year field is not present, or if the earliest saved field has duration \n    // less than year. This allows correct LocalDate construction in cases involving weekyear-related parse patterns.\n    if (count > 0) {\n        DurationField first = savedFields[0].iField.getDurationField();\n\n        // Check if a year-related field is present\n        boolean hasYearField = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iFieldType;\n            if (type == DateTimeFieldType.year() ||\n                type == DateTimeFieldType.yearOfEra() ||\n                type == DateTimeFieldType.weekyear()) {\n                hasYearField = true;\n                break;\n            }\n        }\n\n        // Only insert default year if no year-type field is present and a precision > months (i.e. month or day)\n        // appears first\n        if (!hasYearField) {\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            // In original code: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0)\n            // However, this assumes saved fields only for months and days, which is wrong when a year is specified.\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}