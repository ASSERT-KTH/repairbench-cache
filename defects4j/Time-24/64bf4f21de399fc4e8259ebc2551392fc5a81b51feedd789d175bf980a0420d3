{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    \n    // Handle week-based parsing specially to avoid incorrect results\n    if (count > 0 && savedFields[0].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n        return computeMillisWithWeekAdjust(resetFields, text, savedFields, count);\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}\n\nprivate long computeMillisWithWeekAdjust(boolean resetFields, String text, SavedField[] savedFields, int count) {\n    // Extract relevant fields\n    int weekYear = iDefaultYear;\n    int week = 0;\n    int month = 0;\n    for (int i = 0; i < count; i++) {\n        DateTimeField field = savedFields[i].iField;\n        if (field.getType() == DateTimeFieldType.weekyear()) {\n            weekYear = savedFields[i].get(iMillis, resetFields);\n        } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n            week = savedFields[i].get(iMillis, resetFields);\n        } else if (field.getType() == DateTimeFieldType.monthOfYear()) {\n            month = savedFields[i].get(iMillis, resetFields);\n        }\n    }\n\n    // Adjust for the first week of the year possibly starting in the previous year\n    LocalDate firstWeek = new LocalDate(weekYear, 1, 1, iChrono);\n    int firstWeekWeekYear = firstWeek.weekyear().get();\n    int firstWeekOfWeekYear = firstWeek.weekOfWeekyear().get();\n\n    if (week == 1 && firstWeekOfWeekYear > 1) {\n        weekYear = firstWeekWeekYear - 1;\n        int weeksInPreviousYear = iChrono.year().getMaximumValue(weekYear) - firstWeekOfWeekYear + 1;\n        if (week > weeksInPreviousYear) {\n            week -= weeksInPreviousYear;\n        }\n    }\n\n    // Compute the date based on week and weekYear\n    LocalDate date = new LocalDate(weekYear, 1, 1, iChrono).withWeekOfWeekyear(week);\n\n    // Adjust for month if necessary\n    if (month != 0) {\n        date = date.withMonthOfYear(month);\n    }\n\n    return date.toDateTimeAtStartOfDay(iZone).getMillis();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}