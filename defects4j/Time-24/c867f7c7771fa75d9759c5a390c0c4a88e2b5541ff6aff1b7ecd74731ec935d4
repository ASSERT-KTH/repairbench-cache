{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        // Handle weekyear field specially if it exists\n        int weekYearIndex = -1;\n        int monthIndex = -1;\n        int weekIndex = -1;\n        for (int i = 0; i < count; i++) {\n            SavedField field = savedFields[i];\n            if (field.iField.getType() == DateTimeFieldType.weekyear()) {\n                weekYearIndex = i;\n            } else if (field.iField.getType() == DateTimeFieldType.monthOfYear()) {\n                monthIndex = i;\n            } else if (field.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                weekIndex = i;\n            }\n        }\n\n        if (weekYearIndex != -1 && monthIndex != -1 && weekIndex != -1) {\n            // Handle weekyear-month-week combination\n            // Need to process these fields in the right order (weekyear, week, month would be wrong)\n            // Let's reorder the fields to ensure correct processing\n            SavedField weekYearField = savedFields[weekYearIndex];\n            SavedField monthField = savedFields[monthIndex];\n            SavedField weekField = savedFields[weekIndex];\n\n            // Create a temporary array for the special processing\n            SavedField[] tempFields = new SavedField[3];\n            tempFields[0] = weekYearField;\n            tempFields[1] = monthField;\n            tempFields[2] = weekField;\n\n            // Set millis based on weekyear and week first\n            long millis = iMillis;\n            try {\n                // First set weekyear and week to get a base date\n                millis = tempFields[0].set(millis, resetFields); // weekyear\n                millis = tempFields[2].set(millis, resetFields); // week\n                // Then adjust for month\n                millis = tempFields[1].set(millis, resetFields); // month\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n\n            // Process the remaining fields if any\n            for (int i = 0; i < count; i++) {\n                if (i == weekYearIndex || i == monthIndex || i == weekIndex) {\n                    continue;\n                }\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } else if (count > 0) {\n            // Original logic for other cases\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n\n            long millis = iMillis;\n            try {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n        } else {\n            long millis = iMillis;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}