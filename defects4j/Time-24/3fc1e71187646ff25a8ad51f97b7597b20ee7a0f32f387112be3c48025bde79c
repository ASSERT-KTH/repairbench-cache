{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    if (count > 0) {\n        // First, if we have a week\u2010of\u2010weekyear but no weekyear, and we did parse a calendar year,\n        // inject the weekyear so that 'w' is interpreted against the correct year.\n        boolean haveWoW = false;\n        boolean haveWy  = false;\n        boolean haveY   = false;\n        int yearVal     = iDefaultYear;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if (type == DateTimeFieldType.weekOfWeekyear()) {\n                haveWoW = true;\n            } else if (type == DateTimeFieldType.weekyear()) {\n                haveWy = true;\n            } else if (type == DateTimeFieldType.year()) {\n                haveY = true;\n                yearVal = savedFields[i].iValue;\n            }\n        }\n        if (haveWoW && !haveWy && haveY) {\n            saveField(DateTimeFieldType.weekyear(), yearVal);\n            return computeMillis(resetFields, text);\n        }\n\n        // Next, if we now have both weekyear and week\u2010of\u2010weekyear, do a special\n        // two\u2010step set (weekyear then week\u2010of\u2010weekyear) and ignore any calendar\n        // year/month fields, which would corrupt the week\u2010year context.\n        if (haveWoW && haveWy) {\n            SavedField wyField = null;\n            SavedField wwField = null;\n            for (int i = 0; i < count; i++) {\n                DateTimeFieldType type = savedFields[i].iField.getType();\n                if (type == DateTimeFieldType.weekyear()) {\n                    wyField = savedFields[i];\n                } else if (type == DateTimeFieldType.weekOfWeekyear()) {\n                    wwField = savedFields[i];\n                }\n            }\n            long millis = iMillis;\n            try {\n                millis = wyField.set(millis, resetFields);\n                millis = wwField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            if (iZone == null) {\n                millis -= iOffset;\n            } else {\n                int offset = iZone.getOffsetFromLocal(millis);\n                millis -= offset;\n                if (offset != iZone.getOffset(millis)) {\n                    String msg = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                    if (text != null) {\n                        msg = \"Cannot parse \\\"\" + text + \"\\\": \" + msg;\n                    }\n                    throw new IllegalArgumentException(msg);\n                }\n            }\n            return millis;\n        }\n\n        // Original logic for defaulting a base year when the first field is\n        // month, week, or day.\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days   = DurationFieldType.days().getField(iChrono);\n        DurationField first  = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    // Fallback to the standard loop\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String msg = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                msg = \"Cannot parse \\\"\" + text + \"\\\": \" + msg;\n            }\n            throw new IllegalArgumentException(msg);\n        }\n    }\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}