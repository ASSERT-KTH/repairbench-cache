{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        // Check for problematic combination of year and weekOfWeekyear without weekyear\n        // If found, add weekyear based on year and restart computation.\n        // This logic mirrors a fix applied in DateTimeFormatterBuilder, ensuring\n        // week-based fields are handled correctly relative to the year.\n        if (count > 0) {\n            SavedField yearSaved = null;\n            SavedField weekOfWeekyearSaved = null;\n            boolean hasWeekyear = false;\n            for (int i = 0; i < count; i++) {\n                DateTimeField field = savedFields[i].iField;\n                if (field.getType() == DateTimeFieldType.year()) {\n                    yearSaved = savedFields[i];\n                } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                    weekOfWeekyearSaved = savedFields[i];\n                } else if (field.getType() == DateTimeFieldType.weekyear()) {\n                    hasWeekyear = true;\n                }\n            }\n\n            if (yearSaved != null && weekOfWeekyearSaved != null && !hasWeekyear) {\n                // Add weekyear field derived from the year field's value.\n                // saveField potentially modifies bucket state (count, fields array).\n                saveField(DateTimeFieldType.weekyear(), yearSaved.iValue);\n                // Restart computation to ensure fields are re-sorted and applied correctly.\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // Restart computation if default year was added.\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        } catch (IllegalArgumentException e) {\n            // Preserve original exception type for compatibility, even if IllegalFieldValueException is more specific sometimes\n             if (text != null) {\n                 // Build a message consistent with IllegalFieldValueException handling\n                 throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n             }\n             throw e;\n        }\n        \n        // Zone adjustment logic\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            // If the local time is ambiguous or invalid due to DST transition,\n            // check if the applied offset matches the instant's actual offset.\n            if (offset != iZone.getOffset(millis)) {\n                // Use IllegalInstantException for DST overlap/gap issues if available,\n                // otherwise stick to IllegalArgumentException for broader compatibility.\n                // For safety and consistency with original code, use IllegalArgumentException.\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}