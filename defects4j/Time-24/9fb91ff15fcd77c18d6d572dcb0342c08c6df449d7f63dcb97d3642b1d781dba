{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    // Custom sort to handle week-based fields before months\n    java.util.Arrays.sort(savedFields, 0, count, new java.util.Comparator<SavedField>() {\n        private boolean isWeekBased(DateTimeFieldType type) {\n            return type == DateTimeFieldType.weekOfWeekyear() ||\n                   type == DateTimeFieldType.weekyear() ||\n                   type == DateTimeFieldType.weekyearOfCentury();\n        }\n\n        public int compare(SavedField a, SavedField b) {\n            DateTimeFieldType aType = a.iField.getType();\n            DateTimeFieldType bType = b.iField.getType();\n            boolean aWeek = isWeekBased(aType);\n            boolean bWeek = isWeekBased(bType);\n            boolean aMonth = aType == DateTimeFieldType.monthOfYear();\n            boolean bMonth = bType == DateTimeFieldType.monthOfYear();\n\n            if (aWeek && bMonth) return -1;\n            if (bWeek && aMonth) return 1;\n\n            int result = compareReverse(a.iField.getDurationField(), b.iField.getDurationField());\n            return result;\n        }\n    });\n\n    if (count > 0) {\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}