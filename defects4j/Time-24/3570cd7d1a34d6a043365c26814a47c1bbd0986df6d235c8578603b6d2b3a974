{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationFieldType firstType = savedFields[0].iField.getType();\n            if (firstType == DurationFieldType.monthOfYear() || firstType == DurationFieldType.dayOfMonth() || firstType == DurationFieldType.dayOfWeek()) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n            // if any of the year or week fields is present, make sure year is set\n            boolean hasYear = false;\n            for (int i = 0; i < count; i++) {\n                DurationFieldType type = savedFields[i].iField.getType();\n                if (type == DurationFieldType.year() || type == DurationFieldType.weekyear()) {\n                    hasYear = true;\n                    break;\n                }\n            }\n            if (hasYear) {\n                for (int i = 0; i < count; i++) {\n                    DurationFieldType type = savedFields[i].iField.getType();\n                    if (type == DurationFieldType.weekOfWeekyear() || type == DurationFieldType.monthOfYear() || type == DurationFieldType.dayOfMonth() || type == DurationFieldType.dayOfWeek()) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                }\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}