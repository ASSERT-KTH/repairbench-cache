{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        // The original Joda-Time 1.x code had a 'first field is month or day' check here,\n        // which caused issues with week-year parsing (e.g., 'xxxx-MM-ww').\n        // This block is replaced by the more robust handling below,\n        // which was introduced in Joda-Time 2.0 to properly reconcile 'year' and 'weekyear' fields.\n        // if (count > 0) {\n        //     // alter base year for parsing if first field is month or day\n        //     DurationField months = DurationFieldType.months().getField(iChrono);\n        //     DurationField days = DurationFieldType.days().getField(iChrono);\n        //     DurationField first = savedFields[0].iField.getDurationField();\n        //     if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n        //         saveField(DateTimeFieldType.year(), iDefaultYear);\n        //         return computeMillis(resetFields, text);\n        //     }\n        // }\n\n        // Search for the year, weekyear, month, day, and day of year fields.\n        // The parsing code ensures that only one of year/weekyear and monthOfYear/dayOfYear\n        // is chosen via pattern, but we need to handle their interaction if both are present\n        // (e.g., from different parts of a composite pattern or default values).\n        SavedField savedWeekyear = null;\n        SavedField savedYear = null;\n        SavedField savedMonth = null;\n        SavedField savedDay = null;\n        SavedField savedDayOfYear = null;\n\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DateTimeFieldType type = savedField.iField.getType();\n            if (type == DateTimeFieldType.weekyear()) {\n                savedWeekyear = savedField;\n            } else if (type == DateTimeFieldType.year()) {\n                savedYear = savedField;\n            } else if (type == DateTimeFieldType.monthOfYear()) {\n                savedMonth = savedField;\n            } else if (type == DateTimeFieldType.dayOfMonth()) {\n                savedDay = savedField;\n            } else if (type == DateTimeFieldType.dayOfYear()) {\n                savedDayOfYear = savedField;\n            }\n        }\n\n        if (savedWeekyear != null && savedYear == null) {\n            // Weekyear is specified, but not year.\n            // The year field must be set in order to handle\n            // week of weekyear or day of year correctly within chronologies.\n            // Set the year to the weekyear value, and effectively clear the weekyear\n            // by removing it from the saved fields and replacing with a 'year' field.\n            // This is the common case, where 'x' is used instead of 'y'.\n            savedYear = new SavedField(DateTimeFieldType.year(), savedWeekyear.iValue);\n            \n            // Remove savedWeekyear from the array and add the new savedYear.\n            // The size remains 'count' as one field is removed and one is added.\n            SavedField[] newSavedFields = new SavedField[count];\n            int newCount = 0;\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i] != savedWeekyear) { // Copy all but the original weekyear\n                    newSavedFields[newCount++] = savedFields[i];\n                }\n            }\n            newSavedFields[newCount++] = savedYear; // Add the new year field\n            savedFields = newSavedFields; // Update local reference\n            iSavedFields = savedFields;   // Update instance reference\n            iSavedFieldsCount = newCount; // Update instance count\n            count = newCount;             // Update local count\n            sort(savedFields, count);     // Re-sort, as the new year field might change its order\n        } else if (savedYear == null && (savedMonth != null || savedDayOfYear != null)) {\n            // No year, but month or day of year.\n            // Apply default year, and re-compute to ensure correct ordering and interaction.\n            // saveField handles array resizing if necessary.\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}