{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        // Check if a year (yyyy) or weekyear (xxxx) field has been explicitly provided in the pattern.\n        boolean hasYear = false;\n        boolean hasWeekyear = false;\n        for (int i = 0; i < count; i++) {\n            if (savedFields[i].iField.getFieldType() == DateTimeFieldType.year()) {\n                hasYear = true;\n            }\n            if (savedFields[i].iField.getFieldType() == DateTimeFieldType.weekyear()) {\n                hasWeekyear = true;\n            }\n        }\n\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            // This block is intended to provide a default year when the year field is\n            // not explicitly specified, but fields like month or day of month are.\n            // If 'year' or 'weekyear' has already been parsed, we should not\n            // apply the default year to avoid incorrect year calculations.\n            if (!hasYear && !hasWeekyear) { // Added condition to prevent default year when year/weekyear is present\n                DurationField months = DurationFieldType.months().getField(iChrono);\n                DurationField days = DurationFieldType.days().getField(iChrono);\n                DurationField first = savedFields[0].iField.getDurationField();\n                // Check if the first (smallest duration) field is 'day-like' or 'month-like'.\n                // (e.g., dayOfMonth, dayOfWeek, weekOfWeekyear, monthOfYear)\n                if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                    return computeMillis(resetFields, text);\n                }\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}