{
    "generation": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count); // Sorts fields, typically year/weekyear > month > week\n\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                // This recursive call might be problematic if saveField modifies count/order\n                // but assuming it works or is handled by saveField internal logic.\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n\n        // Check if both weekOfWeekyear and monthOfYear fields are present.\n        // These fields have conflicting calculation contexts (weekyear vs year).\n        boolean hasWeekOfWeekyear = false;\n        boolean hasMonthOfYear = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if (type == DateTimeFieldType.weekOfWeekyear()) {\n                hasWeekOfWeekyear = true;\n            } else if (type == DateTimeFieldType.monthOfYear()) {\n                hasMonthOfYear = true;\n            }\n            if (hasWeekOfWeekyear && hasMonthOfYear) {\n                break; // Found both relevant fields\n            }\n        }\n\n        try {\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                // If both weekOfWeekyear and monthOfYear are present,\n                // prioritize the week definition by skipping the month field application.\n                // This resolves ambiguity where MM and ww are specified together.\n                // The week field (ww) inherently defines a position within the weekyear,\n                // making the month field (MM) potentially contradictory or redundant.\n                if (hasWeekOfWeekyear && hasMonthOfYear && savedField.iField.getType() == DateTimeFieldType.monthOfYear()) {\n                    continue; // Skip applying monthOfYear when weekOfWeekyear is also specified\n                }\n                millis = savedField.set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        // Zone adjustment logic (remains the same as original)\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}