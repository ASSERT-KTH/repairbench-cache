{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // default\u2010year hack for patterns starting with month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days   = DurationFieldType.days().getField(iChrono);\n        DurationField first  = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n        // week\u2010of\u2010weekyear hack: ensure a weekyear and a day\u2010of\u2010week when 'w' appears\n        boolean sawW    = false;\n        boolean sawDOW  = false;\n        boolean sawWY   = false;\n        boolean sawY    = false;\n        int     yearVal = iDefaultYear;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if      (type == DateTimeFieldType.weekOfWeekyear())   sawW   = true;\n            else if (type == DateTimeFieldType.dayOfWeek())        sawDOW= true;\n            else if (type == DateTimeFieldType.weekyear())         sawWY = true;\n            else if (type == DateTimeFieldType.year()) {\n                sawY = true;\n                yearVal = savedFields[i].iValue;\n            }\n        }\n        if (sawW && (!sawWY || !sawDOW)) {\n            // inject weekyear if none\n            if (!sawWY) {\n                saveField(DateTimeFieldType.weekyear(), sawY ? yearVal : iDefaultYear);\n            }\n            // inject day-of-week = first day of week\n            if (!sawDOW) {\n                saveField(DateTimeFieldType.dayOfWeek(),\n                          iChrono.dayOfWeek().getMinimumValue());\n            }\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}