{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    // Handle week year and week of the year correctly\n    for (int i = 0; i < count; i++) {\n        DateTimeField field = savedFields[i].iField;\n        if (field.getType() == DateTimeFieldType.weekyear()) {\n            int weekYear = field.getValue(millis);\n            int weekOfYear = savedFields[i + 1].iField.getValue(millis);\n            millis = setWeekYear(millis, weekYear, weekOfYear);\n        }\n    }\n\n    return millis;\n}\n\nprivate long setWeekYear(long millis, int weekYear, int weekOfYear) {\n    DateTime dt = new DateTime(millis, iChrono);\n    DateTime newDt = dt.withWeekyear(weekYear).withWeekOfWeekyear(weekOfYear);\n    return newDt.getMillis();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}