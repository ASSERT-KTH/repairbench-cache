{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // Ensure field order is correctly handled when week is involved\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (first.equals(DurationFieldType.weeks()) || first.equals(DurationFieldType.week())) {\n            // Handle week-based parsing by setting the year after setting week and month\n            return computeWeekBasedFields(resetFields, text, savedFields, count);\n        }\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}\n\nprivate long computeWeekBasedFields(boolean resetFields, String text, SavedField[] savedFields, int count) throws IllegalArgumentException {\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n        if (savedFields[0].iField.getDurationField().equals(DurationFieldType.weeks())) {\n            // Adjust the year if the week is part of the first week of the next year\n            int week = ((WeekOfYearField) savedFields[0].iField).get(millis);\n            if (week == 1) {\n                int year = ((YearOfEraField) savedFields[1].iField).get(millis);\n                // Check if the first day of the week is in the next year\n                LocalDate date = new LocalDate(millis, iChrono);\n                LocalDate firstDayOfYear = date.plusYears(year).weekOfWeekYear().getStart();\n                if (date.isBefore(firstDayOfYear)) {\n                    saveField(DateTimeFieldType.year(), year + 1);\n                    millis = savedFields[1].set(millis, resetFields);\n                }\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}