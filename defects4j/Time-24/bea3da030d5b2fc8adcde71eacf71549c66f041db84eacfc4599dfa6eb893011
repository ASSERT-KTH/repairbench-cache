{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    // Only add a default year if no year\u2010related (year or weekyear) field has been parsed.\n    boolean hasYear = false;\n    for (int i = 0; i < count; i++) {\n        DateTimeFieldType type = savedFields[i].iField.getType();\n        if (type == DateTimeFieldType.year() || type == DateTimeFieldType.weekyear()) {\n            hasYear = true;\n            break;\n        }\n    }\n    if (!hasYear && count > 0) {\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            // If any saved field is week-based, then we want to use weekyear.\n            boolean useWeekyear = false;\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                    useWeekyear = true;\n                    break;\n                }\n            }\n            if (useWeekyear) {\n                saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n            } else {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n            }\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}