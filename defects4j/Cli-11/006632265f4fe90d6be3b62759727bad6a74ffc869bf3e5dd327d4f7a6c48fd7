{
    "generation": "    /**\n     * Appends the usage clause for an Option to a StringBuffer.\n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     */\n    private static void appendOption(final StringBuffer buff,\n                                     final Option option,\n                                     final boolean required)\n    {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n\n        // if the Option has a value\n        if (option.hasArg())\n        {\n            final String argName = option.getArgName();\n            // Append the arg name if it is specified and not empty\n            if (argName != null && argName.length() > 0)\n            {\n                buff.append(\" <\").append(argName).append(\">\");\n            }\n            // Else if the arg name is null (not specified), append the default name\n            else if (argName == null)\n            {\n                 buff.append(\" <\").append(HelpFormatter.DEFAULT_ARG_NAME).append(\">\");\n            }\n            // Else the arg name is present but empty (\"\"), do not append anything for the argument\n        }\n\n        // if the Option is not a required option\n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}