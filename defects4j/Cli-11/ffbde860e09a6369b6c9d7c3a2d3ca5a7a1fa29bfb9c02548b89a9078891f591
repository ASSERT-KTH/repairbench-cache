{
    "generation": "    /**\n     * Appends the usage clause for an Option to a StringBuffer.\n     *\n     * @param buff the StringBuffer to append to\n     * @param option the Option to append\n     * @param required whether the Option is required or not\n     */\n    private static void appendOption(final StringBuffer buff,\n                                     final Option option,\n                                     final boolean required)\n    {\n        if (!required)\n        {\n            buff.append(\"[\");\n        }\n\n        if (option.getOpt() != null)\n        {\n            buff.append(\"-\").append(option.getOpt());\n        }\n        else\n        {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n\n        // if the Option has a value and has a non-empty arg name or no arg name at all\n        if (option.hasArg() && (option.getArgName() == null || !option.getArgName().isEmpty()))\n        {\n            if (option.getArgName() != null) {\n                buff.append(\" <\").append(option.getArgName()).append(\">\");\n            }\n        }\n        // but if argName is empty but we still need to show we expect an argument\n        else if (option.hasArg() && option.getArgName() != null && option.getArgName().isEmpty())\n        {\n            buff.append(\" <>\");\n        }\n\n        // if the Option is not a required option\n        if (!required)\n        {\n            buff.append(\"]\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}