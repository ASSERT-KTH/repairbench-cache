{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Find the return expression (if any)\n    Node returnExpr = null;\n    if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        returnExpr = stmt.getFirstChild();\n      }\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null) {\n        if (cArg != null) {\n          // If the corresponding argument is used as the LHS of an assignment in the return,\n          // it's OK to inline, otherwise check for usual side effects.\n          boolean paramAssignedInReturn = false;\n          if (returnExpr != null) {\n            // Look for assignment of the parameter in the return expression\n            if (returnExpr.isAssign()) {\n              Node lhs = returnExpr.getFirstChild();\n              if (lhs.isName() && lhs.getString().equals(fnParam.getString())) {\n                paramAssignedInReturn = true;\n              }\n              // For property assignments: a.x=2 or a[2]=2\n              if (lhs.isGetProp() || lhs.isGetElem()) {\n                Node maybeName = lhs.getFirstChild();\n                if (maybeName.isName() && maybeName.getString().equals(fnParam.getString())) {\n                  paramAssignedInReturn = true;\n                }\n              }\n            }\n          }\n          if (!paramAssignedInReturn) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler) &&\n                NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n              return CanInlineResult.NO;\n            }\n          }\n        }\n        // Move to the next parameter\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}