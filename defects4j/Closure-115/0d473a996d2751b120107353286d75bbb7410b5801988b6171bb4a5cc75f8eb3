{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  // Only simple, direct calls can be replaced\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Get the single-statement body of the function\n  Node block = fnNode.getLastChild();\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n  }\n\n  // Walk the call arguments\n  // CALL NODE: [ callee, arg1, arg2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Handle foo.call(thisArg, ...) style calls\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // must pass a `this` for the synthetic first parameter\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // .apply should have been filtered out earlier\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Walk parameters vs. arguments\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (fnParam != null || cArg != null) {\n    if (fnParam != null) {\n      String name = fnParam.getString();\n      if (cArg != null) {\n        // If the argument has side\u2010effects and the parameter\n        // is referenced more than once in the body, we cannot inline.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, name) > 1) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n      fnParam = fnParam.getNext();\n    } else {\n      // Extra arguments beyond the declared parameters\n      // must themselves have no side\u2010effects.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}