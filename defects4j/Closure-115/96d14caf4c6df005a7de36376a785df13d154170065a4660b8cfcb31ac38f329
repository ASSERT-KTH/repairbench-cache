{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // The first child of a CALL is the function, the rest are the args.\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Handle fn.call(this, ...) specially: skip the implicit \"this\" argument.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" calls are filtered out earlier.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Walk the formal parameters alongside the call arguments.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (fnParam != null) {\n    if (cArg != null) {\n      // If the call-arg has side-effects and the corresponding\n      // parameter is referenced more than once in the body, we cannot inline.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n    fnParam = fnParam.getNext();\n  }\n\n  // Any extra arguments (beyond the declared parameters) must be pure,\n  // since they would otherwise be dropped by the inline.\n  while (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}