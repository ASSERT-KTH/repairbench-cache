{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // We only support direct inlining of single-return functions.\n  Node block = fnNode.getLastChild();\n  Node stmt = null;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    stmt = block.getFirstChild();\n    if (!stmt.isReturn()) {\n      return CanInlineResult.NO;\n    }\n    // Disallow direct assignment to the parameter itself (e.g. f(a){return a=2;}).\n    Node returnExpr = stmt.getFirstChild();\n    if (returnExpr != null && returnExpr.isAssign()) {\n      Node lhs = returnExpr.getFirstChild();\n      if (lhs.isName()) {\n        return CanInlineResult.NO;\n      }\n    }\n  }\n\n  // Prepare to walk through call arguments and function parameters.\n  Node cArg = callNode.getFirstChild().getNext();\n  // Handle .call / .apply style where \"this\" is implicit.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // We should never see `.apply` here.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (fnParam != null || cArg != null) {\n    if (fnParam != null && cArg != null) {\n      // If an argument has side-effects, the corresponding parameter\n      // may only be referenced once inside the function.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();\n    } else if (fnParam != null) {\n      // Missing argument => undefined, that's safe.\n      fnParam = fnParam.getNext();\n    } else {\n      // Extra arguments beyond the parameter list must be side-effect free.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}