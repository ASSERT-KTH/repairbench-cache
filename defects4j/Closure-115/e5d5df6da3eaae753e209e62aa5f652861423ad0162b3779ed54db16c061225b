{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Check whether the function body\u2019s return expression has side effects.\n  Node block = fnNode.getLastChild();\n  boolean bodyHasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      Node returnValue = stmt.getFirstChild();\n      if (returnValue != null) {\n        bodyHasSideEffects = NodeUtil.mayHaveSideEffects(returnValue, compiler);\n      }\n    }\n  }\n\n  // First argument of the CALL node.\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Handle .call(this, ...) form.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // must pass a \"this\" for the this-parameter\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // .apply should have been filtered out\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // The formal parameters of the function.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  // Pair up parameters and arguments.\n  while (fnParam != null && cArg != null) {\n    // If the function body can mutate state, we can't inline it into\n    // an argument expression that itself might be side-effected.\n    if (bodyHasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n      return CanInlineResult.NO;\n    }\n    // If the argument has side effects and the parameter is referenced\n    // more than once, we must not duplicate that side effect.\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n        && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n    fnParam = fnParam.getNext();\n    cArg = cArg.getNext();\n  }\n\n  // Any extra arguments beyond the last formal parameter\n  // would be dropped by inlining.  They must be side-effect free.\n  while (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}