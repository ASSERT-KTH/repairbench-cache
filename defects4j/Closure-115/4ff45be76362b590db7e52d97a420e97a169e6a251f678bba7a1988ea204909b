{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // Check if any statement in the function body may have side effects\n  boolean hasSideEffects = block != null && NodeUtil.mayHaveSideEffect(block, compiler);\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    // Check for argument count mismatch\n    if ((cArg == null) != (fnParam == null)) {\n      return CanInlineResult.NO;\n    }\n\n    if (fnParam != null && cArg != null) {\n      // Check if argument has side effects that we can't handle\n      if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n        return CanInlineResult.NO;\n      }\n\n      // Check if the parameter is referenced more than once when the argument has side effects\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n        if (refCount > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n    }\n\n    // Move to the next position\n    if (fnParam != null) {\n      fnParam = fnParam.getNext();\n    }\n    if (cArg != null) {\n      // Check if the argument might have side effects\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        if (!fnParam.isEmpty()) { // Only care if there's a corresponding parameter\n          // We allow this if we've already checked above (when fnParam != null && cArg != null)\n          // But for case where parameters and arguments count mismatch\n          return CanInlineResult.NO;\n        }\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}