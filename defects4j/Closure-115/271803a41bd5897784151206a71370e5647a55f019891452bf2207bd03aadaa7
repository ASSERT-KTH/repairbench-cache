{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Get the function body; we require that it has exactly one statement,\n  // namely a return.\n  Node block = fnNode.getLastChild();\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    Preconditions.checkState(stmt.isReturn());\n  }\n\n  // Start with the call\u2019s argument list. The call node is of the form:\n  // [ callee, arg1, arg2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // If the call isn\u2019t a simple NAME call,\n  // then it may be a function-object \u201ccall\u201d (where the first parameter is the\n  // implicit 'this'). For those, require that the first argument is a \"this\"\n  // reference, and then skip it.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // The \u201c.apply\u201d case should have been ruled out earlier.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Get the formal parameter list.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  // For each parameter that is receiving an argument, ensure that if the\n  // function body uses that parameter more than once then the corresponding\n  // call argument is free of side effects (and mutations) so that duplicating\n  // it is safe.\n  while (fnParam != null && cArg != null) {\n    int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n    if (refCount > 1\n        && (NodeUtil.mayHaveSideEffects(cArg, compiler)\n            || NodeUtil.mayEffectMutableState(cArg, compiler))) {\n      return CanInlineResult.NO;\n    }\n    fnParam = fnParam.getNext();\n    cArg = cArg.getNext();\n  }\n\n  // If there are extra arguments (i.e. more arguments than formal parameters),\n  // then they would be evaluated at the call site. Inlining is only safe if\n  // those extra arguments have no side effects.\n  while (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n\n  // Any extra formal parameters (with no corresponding argument) will be undefined,\n  // which is safe.\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}