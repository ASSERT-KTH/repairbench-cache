{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Handle calls via .call or .apply: skip the this-arg.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" calls should already have been filtered out.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Match up formal parameters and call arguments.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (fnParam != null && cArg != null) {\n    // If the argument has side-effects and the function references\n    // this parameter more than once, do not inline.\n    int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler) && refCount > 1) {\n      return CanInlineResult.NO;\n    }\n    fnParam = fnParam.getNext();\n    cArg = cArg.getNext();\n  }\n\n  // Any extra call arguments (beyond the named parameters)\n  // must be side\u2010effect\u2010free.\n  while (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}