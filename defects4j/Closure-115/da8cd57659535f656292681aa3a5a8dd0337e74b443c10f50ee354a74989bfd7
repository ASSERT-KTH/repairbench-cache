{
    "generation": "/**\n * Determines whether a function can be inlined at a particular call site.\n * There are several criteria that the function and reference must hold in\n * order for the functions to be inlined:\n * 1) If a call's arguments have side effects,\n * the corresponding argument in the function must only be referenced once.\n * For instance, this will not be inlined:\n * <pre>\n *     function foo(a) { return a + a }\n *     x = foo(i++);\n * </pre>\n */\nprivate CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  boolean hasSideEffects = false;\n  // Determine if function body has side effects (e.g., in return statement).\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    // For each named parameter check if a mutable argument use more than one.\n    if (fnParam != null) {\n      if (cArg != null) {\n        // Reject: If the corresponding argument may have side effects,\n        // and the parameter is referenced more than once in the function body,\n        // inlining could duplicate side effects.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        // Accept: If the parameter is written to (assigned, increment, etc.),\n        // do NOT forbid inlining. (fix: DO allow inlining when the parameter is written)\n        // No special check needed here: assignment to param is acceptable.\n        // Check: If the argument mutates state, and is referenced more than once,\n        // this is already handled by the previous block.\n      }\n      // Move to the next parameter.\n      fnParam = fnParam.getNext();\n    }\n\n    // For every call argument (even extra ones not matched to parameters), check for\n    // side-effects, but only if function body does not access them safely.\n    if (cArg != null) {\n      // If there are *extra* arguments without corresponding function parameters:\n      // These may be evaluated for side effects only, but are not used in body,\n      // so only reject if argument has side effects AND body is empty (could cause eval order bugs).\n      if (fnParam == null) {\n        // If the function does not use extra arguments,\n        // they are safe unless they have side effects (but body is empty).\n        // No body = length == 0, so block.hasChildren() false.\n        // This is a conservative check; retain original behavior.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler) && !block.hasChildren()) {\n          return CanInlineResult.NO;\n        }\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}