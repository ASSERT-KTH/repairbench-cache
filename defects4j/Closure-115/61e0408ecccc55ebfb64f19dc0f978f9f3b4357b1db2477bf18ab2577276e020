{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    // The function body must be exactly one \"return\" statement.\n    Node block = fnNode.getLastChild();\n    Preconditions.checkState(block.hasOneChild(),\n        \"Direct-call inlining requires exactly one statement\");\n    Node stmt = block.getFirstChild();\n    Preconditions.checkState(stmt.isReturn(),\n        \"Direct-call inlining requires a return\");\n\n    // Prepare to walk the call arguments.\n    // CALL NODE: [ FUNC, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Handle Function.prototype.call(thisArg, ...) by skipping the \"this\"\n    // if necessary.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" should have been filtered out already.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // Walk through parameters and corresponding arguments.\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParam != null || cArg != null) {\n      if (fnParam != null) {\n        if (cArg != null) {\n          // If the call-argument has side effects and the parameter\n          // is referenced more than once in the function body,\n          // we cannot inline safely.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n        fnParam = fnParam.getNext();\n      }\n      if (cArg != null) {\n        // Any extra arguments (beyond declared parameters) must be\n        // side\u2010effect\u2010free.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}