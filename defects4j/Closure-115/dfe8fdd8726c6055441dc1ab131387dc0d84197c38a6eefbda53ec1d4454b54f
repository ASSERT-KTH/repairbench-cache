{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  // Only very simple one\u2010statement functions can be inlined here.\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // The body/block of the function we're trying to inline.\n  Node block = fnNode.getLastChild();\n\n  // First real argument to the call.\n  Node arg = callNode.getFirstChild().getNext();\n\n  // Handle Function.prototype.call(\u2026) which has an implicit \"this\" argument.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // The first argument must literally be \"this\"\n      if (arg == null || !arg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      arg = arg.getNext();\n    } else {\n      // We never expect a raw .apply here.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Walk through the matched parameter list vs. argument list.\n  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (param != null && arg != null) {\n    // If this argument can modify mutable state AND the function\n    // references that parameter more than once, inlining would\n    // duplicate the side effect.  Bail out.\n    if (NodeUtil.mayEffectMutableState(arg, compiler)\n        && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n    param = param.getNext();\n    arg = arg.getNext();\n  }\n\n  // Any extra arguments beyond the defined parameters must be\n  // side\u2010effect free, otherwise we\u2019d lose them.\n  while (arg != null) {\n    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    arg = arg.getNext();\n  }\n\n  // If there are parameters with no corresponding argument,\n  // they must not actually be referenced inside the function.\n  while (param != null) {\n    if (NodeUtil.getNameReferenceCount(block, param.getString()) > 0) {\n      return CanInlineResult.NO;\n    }\n    param = param.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}