{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Determine if the function's body contains a return statement with side effects.\n    boolean returnHasSideEffects = false;\n    Node returnValueNode = null;\n    if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        returnValueNode = stmt.getFirstChild();\n        returnHasSideEffects = NodeUtil.mayHaveSideEffects(returnValueNode, compiler);\n      }\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    Node fnParamIter = fnParam;\n    Node cArgIter = cArg;\n\n    while (fnParamIter != null || cArgIter != null) {\n      if (fnParamIter != null && cArgIter != null) {\n        // If the function returns the first parameter, allow expressions like a.x=2.\n        boolean paramIsModifiedOnce =\n            (returnValueNode != null && NodeUtil.isAssignmentToName(returnValueNode, fnParamIter.getString()));\n\n        // Prevent inlining if the argument can be side-effected and the parameter is referenced more than once,\n        // except for the special case when the parameter is assigned in a return (e.g. a.x=2, a[2]=2).\n        if (NodeUtil.mayEffectMutableState(cArgIter, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParamIter.getString()) > 1\n            && !paramIsModifiedOnce) {\n          return CanInlineResult.NO;\n        }\n\n        // If the function's return expression has side effects (e.g. calls a method), then don't inline if the corresponding argument can be side-effected.\n        if (returnHasSideEffects && NodeUtil.canBeSideEffected(cArgIter)) {\n          return CanInlineResult.NO;\n        }\n\n        fnParamIter = fnParamIter.getNext();\n        cArgIter = cArgIter.getNext();\n      } else if (fnParamIter != null) {\n        // No argument is passed for this parameter, move to next parameter.\n        fnParamIter = fnParamIter.getNext();\n      } else if (cArgIter != null) {\n        // If there are more arguments than parameters, ensure that extra arguments don't cause side effects.\n        if (NodeUtil.mayHaveSideEffects(cArgIter, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArgIter = cArgIter.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}