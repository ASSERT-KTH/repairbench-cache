{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  // Don\u2019t try to inline functions that aren\u2019t \u201cdirect\u2010call\u2010inlinable.\u201d\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Instead of insisting that the function body have exactly one child,\n  // simply use the body (block) for reference\u2010count analysis.\n  Node block = fnNode.getLastChild();\n\n  // Get the call\u2019s arguments. For a normal call node, the first child is the\n  // callee followed by the argument list.\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // For calls using the function object call syntax (e.g. f.call(...)),\n  // the \u201cthis\u201d parameter is passed in first and isn\u2019t part of the formal params.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // .apply calls should be filtered earlier.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // Walk through the formal parameters and their corresponding call arguments.\n  // The inlining criteria is: if a formal parameter is referenced more than once\n  // in the function body then the corresponding call argument must be free of side effects.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (fnParam != null && cArg != null) {\n    int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n    if (refCount > 1 &&\n        (NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n         NodeUtil.mayEffectMutableState(cArg, compiler))) {\n      return CanInlineResult.NO;\n    }\n    fnParam = fnParam.getNext();\n    cArg = cArg.getNext();\n  }\n\n  // Any extra call arguments (or missing ones for that matter) do not affect the replacement.\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}