{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this\u2010object as the first\n  // parameter, but this is not part of the called function\u2019s parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replacing 'this' with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node params = NodeUtil.getFunctionParameters(fnNode);\n  Node fnParam = (params != null) ? params.getFirstChild() : null;\n\n  // For each parameter/argument pair, if the call argument may have side effects\n  // (or may effect mutable state) and the parameter is referenced more than once\n  // in the function body, inlining is unsafe.\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n        if (refCount > 1 &&\n            (NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n             NodeUtil.mayEffectMutableState(cArg, compiler))) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n    }\n\n    // For every call argument\u2014even if there isn\u2019t a corresponding parameter\u2014\n    // check for side-effects.\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}