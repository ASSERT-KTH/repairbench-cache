{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Check if the function modifies its parameters\n    List<String> modifiedParams = getModifiedParameters(fnNode);\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n    Node param = fnParams.getFirstChild();\n    while (param != null) {\n      String paramName = param.getString();\n      if (modifiedParams.contains(paramName)) {\n        return CanInlineResult.NO;\n      }\n      param = param.getNext();\n    }\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            // Check if the parameter is used more than once in the function\n            if (NodeUtil.getNameReferenceCount(\n                block, fnParam.getString()) > 1) {\n              return CanInlineResult.NO;\n            }\n          }\n          // Check for arguments that are evaluated more than once.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n            if (NodeUtil.getNameReferenceCount(\n                block, fnParam.getString()) > 1) {\n              return CanInlineResult.NO;\n            }\n          }\n        }\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  // Helper method to detect modified parameters\n  private List<String> getModifiedParameters(Node fnNode) {\n    List<String> modifiedParams = new ArrayList<>();\n    Node block = fnNode.getLastChild();\n    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n\n    // Collect all parameter names\n    Set<String> paramNames = new HashSet<>();\n    Node param = paramList.getFirstChild();\n    while (param != null) {\n      paramNames.add(param.getString());\n      param = param.getNext();\n    }\n\n    // Check for assignments to parameters in the function body\n    NodeVisitor visitor = new NodeVisitor() {\n      @Override\n      public void visit(NodeTraversal t, Node n) {\n        if (n.isAssign()) {\n          Node lhs = n.getFirstChild();\n          if (lhs.isQualifiedName()) {\n            String name = lhs.getQualifiedName();\n            if (paramNames.contains(name)) {\n              modifiedParams.add(name);\n            }\n          } else if (lhs.isName()) {\n            String name = lhs.getString();\n            if (paramNames.contains(name)) {\n              modifiedParams.add(name);\n            }\n          } else if (lhs.isBracketAccess()) {\n            // Handle array/object modifications\n            // This is a simplified check - in real implementation we'd need to\n            // analyze if the base object is a parameter\n          }\n        }\n      }\n    };\n    NodeTraversal.traverse(compiler, block, visitor);\n    return modifiedParams;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}