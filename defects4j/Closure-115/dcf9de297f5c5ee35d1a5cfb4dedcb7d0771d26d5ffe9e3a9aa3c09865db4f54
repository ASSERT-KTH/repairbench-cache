{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        // This check is a conservative restriction for .call() methods.\n        // It prevents inlining if the 'this' argument is not simply 'this' or missing.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext(); // Skip 'this' argument as it's not a formal parameter.\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (cArg != null) { // We have a call argument\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          // If the call argument has side effects:\n          if (fnParam == null) {\n            // Case: More actual arguments than formal parameters, and the extra argument has side effects.\n            // Inlining would lose these side effects.\n            return CanInlineResult.NO;\n          } else {\n            // Case: Call argument with side effects, matched with a formal parameter.\n            // Rule 1: The corresponding parameter must be referenced exactly once.\n            String paramName = fnParam.getString();\n            int referenceCount = NodeUtil.getNameReferenceCount(block, paramName);\n\n            if (referenceCount == 0 || referenceCount > 1) {\n              // If referenceCount is 0, side effects are lost.\n              // If referenceCount > 1, side effects are duplicated.\n              return CanInlineResult.NO;\n            }\n            // If referenceCount is 1, it's allowed.\n          }\n        }\n        cArg = cArg.getNext(); // Move to the next call argument\n      }\n\n      if (fnParam != null) { // We have a formal parameter\n        // If cArg was null, it means fewer arguments than parameters (missing argument).\n        // This is generally fine as the parameter would be undefined.\n        fnParam = fnParam.getNext(); // Move to the next formal parameter\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}