{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   * 2) If a call's arguments reflect object literals or other mutable values\n   * the corresponding argument in the function must only be referenced once.\n   * <pre>\n   *    function foo(a) { return a.x + a.x; }\n   *    x = foo({x:0});\n   * </pre>\n   * 3) If a call has arguments that may not be evaluated (e.g. because the\n   * corresponding parameter is unused), the arguments must not have side effects.\n   * <pre>\n   *    function foo(a) { return 1; }\n   *    x = foo(i++); // 'i++' would be dropped.\n   * </pre>\n   * 4) If a function has arguments that are not modeled by the parameter list\n   * (e.g. var_args or arguments object access), the arguments must not have side\n   * effects.\n   * <pre>\n   *    function foo(a) { return arguments[1]; }\n   *    x = foo(1, i++); // 'i++' would be dropped if inlined directly.\n   * </pre>\n   * Note: The current implementation does not handle var_args or arguments object access well.\n   *       See `isDirectCallNodeReplacementPossible`.\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    Node cArg = callNode.getFirstChild().getNext();\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          // The first argument must be 'this'.\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext(); // Skip 'this' argument, does not match any formal parameter.\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // Check arguments against parameters.\n    while (cArg != null && fnParam != null) {\n      int paramRefCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n\n      // Check 1: Argument side effects + multiple parameter references or unused parameter\n      // If the argument calculation has side effects, and the parameter is\n      // used more than once or not at all, inlining can change behavior.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler) && paramRefCount != 1) {\n         // Example: f(i++) where param 'a' is used twice (side effect duplicated).\n         // Example: f(i++) where param 'a' is unused (side effect dropped).\n         return CanInlineResult.NO;\n      }\n\n      // Check 2: Mutable argument + multiple parameter references\n      // If the argument is potentially mutable (e.g., object/array literal)\n      // and the parameter is used more than once, inlining might duplicate\n      // the mutable object or lead to unexpected behavior if modified.\n      if (NodeUtil.mayEffectMutableState(cArg, compiler) && paramRefCount > 1) {\n         // Example: f({}) where param 'a' is used twice.\n         return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n      fnParam = fnParam.getNext();\n    }\n\n    // Check remaining arguments (extra arguments passed to the function).\n    // If any extra argument has side-effects, it's unsafe to inline directly\n    // as the side effect would be dropped (since there's no parameter).\n    // This also covers the case where the function uses 'arguments'. Although\n    // isDirectCallNodeReplacementPossible checks for simple 'arguments' usage,\n    // this provides an additional safeguard.\n    while (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        // Example: f() called as f(i++). Direct replacement would drop i++.\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n\n    // If fnParam is not null here, it means the call had fewer arguments than parameters.\n    // This is generally safe for direct replacement.\n\n    // If we reach here, all checks passed.\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}