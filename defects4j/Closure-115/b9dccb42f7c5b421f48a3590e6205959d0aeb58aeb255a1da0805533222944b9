{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n  \n  Node cArg = callNode.getFirstChild().getNext();\n\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  Node argDecl = fnParam;\n  \n  // Check if any parameter is modified in the function body\n  Map<String, Boolean> paramModified = new HashMap<>();\n  for (Node param = argDecl; param != null; param = param.getNext()) {\n    if (NodeUtil.isParameterModified(block, param.getString())) {\n      paramModified.put(param.getString(), Boolean.TRUE);\n    }\n  }\n\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      String paramName = fnParam.getString();\n      Boolean isParamModified = paramModified.get(paramName);\n      if (cArg != null) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n        // Check for arguments that are evaluated more than once\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n          return CanInlineResult.NO;\n        }\n        // If the parameter is modified and the argument is mutable, prevent inlining\n        if (isParamModified && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      fnParam = fnParam.getNext();\n    }\n\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}