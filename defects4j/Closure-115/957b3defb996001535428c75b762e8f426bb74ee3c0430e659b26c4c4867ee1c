{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ CALLEE, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this\u2010object as the first parameter.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n  Node fnParam = fnParams != null ? fnParams.getFirstChild() : null;\n\n  // For each formal parameter with a corresponding call argument, check that if the argument\n  // might produce side effects or affect mutable state when evaluated, it is only substituted once.\n  while (fnParam != null && cArg != null) {\n    int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n    if ((NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n         NodeUtil.mayEffectMutableState(cArg, compiler))\n        && refCount > 1) {\n      return CanInlineResult.NO;\n    }\n    fnParam = fnParam.getNext();\n    cArg = cArg.getNext();\n  }\n\n  // Any extra actual arguments (which do not correspond to a formal parameter)\n  // must be side-effect free, so that their removal during inlining doesn\u2019t change\n  // the evaluation order or observable behavior.\n  while (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}