{
    "generation": "  /**\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   */\n  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // The original code had a problematic 'hasSideEffects' calculation and\n    // a 'Preconditions.checkState(block.hasOneChild())' that was too restrictive.\n    // Functions can have multiple statements in their body, and the 'hasSideEffects'\n    // flag, as it was calculated (only considering the return expression for single-statement\n    // function bodies), was not correctly aligned with the stated inlining rule or\n    // general side-effect analysis for inlining.\n    // The key rule for arguments with side effects is already explicitly handled below.\n    // Other types of side effects within the function body (e.g., modifying global variables)\n    // are expected to be handled correctly by the inliner's mechanism for direct substitution,\n    // as long as they are not duplicated or suppressed.\n    // Therefore, the specific 'hasSideEffects' variable and its related checks are removed.\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        // This check ensures that the 'this' argument is a simple reference that\n        // doesn't prevent inlining.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument is used more than once.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Rule 1: If a call's argument has side effects (e.g., `i++`),\n          // the corresponding argument in the function (`a` in `a+a`)\n          // must only be referenced once within the function body.\n          // `NodeUtil.mayEffectMutableState` checks if the argument expression itself\n          // has side effects (e.g., increment/decrement, function call).\n          // `NodeUtil.getNameReferenceCount` checks how many times the formal\n          // parameter name is used within the function's body.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next function parameter.\n        fnParam = fnParam.getNext();\n      }\n\n      // Advance to the next call argument.\n      // The original code had a strict check here that would return NO if\n      // any argument (even those without corresponding parameters, or those\n      // that correspond to a parameter used only once) had side effects.\n      // This was too strict, as the inliner can correctly handle side-effecting\n      // arguments (e.g., `foo(i++)` for `function foo() {}` should inline to `i++;`).\n      // The core rule is about *multiple* references of a side-effecting argument.\n      if (cArg != null) {\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}