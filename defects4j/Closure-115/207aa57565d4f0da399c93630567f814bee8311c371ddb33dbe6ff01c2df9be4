{
    "generation": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // The first child of the CALL is the function name, so the first argument is the next node.\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Handle the special \".call(thisArg, ...)\" case by skipping the `this` argument.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // We should never see \".apply\" here.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // Iterate over the function's declared parameters and the call-site arguments.\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParam != null || cArg != null) {\n      if (fnParam != null && cArg != null) {\n        // Count how many times this parameter is referenced in the function body.\n        int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n        if (refCount > 1) {\n          // If we would duplicate the argument, it must be side\u2010effect free\n          // and must not itself mutate state.\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)\n              || NodeUtil.mayEffectMutableState(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n        }\n      } else if (cArg != null) {\n        // Extra arguments beyond the declared parameters must be side\u2010effect free.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      if (fnParam != null) {\n        fnParam = fnParam.getNext();\n      }\n      if (cArg != null) {\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}