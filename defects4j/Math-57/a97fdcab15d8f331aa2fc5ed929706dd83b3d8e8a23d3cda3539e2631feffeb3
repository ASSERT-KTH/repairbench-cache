{
    "generation": "/**\n * Use K-means++ to choose the initial centers.\n *\n * @param <T> type of the points to cluster\n * @param points the points to choose the initial centers from\n * @param k the number of centers to choose\n * @param random random generator to use\n * @return the initial centers\n */\nprivate static <T extends Clusterable<T>>\nList<Cluster<T>> chooseInitialCenters(final Collection<T> points,\n                                      final int k,\n                                      final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    while (resultSet.size() < k) {\n        final int size = pointSet.size();\n        final double[] dx2 = new double[size];\n        double sum = 0;\n\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center already chosen.\n        for (int i = 0; i < size; i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        // Pick a new center with probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        for (int i = 0; i < size; i++) {\n            if (dx2[i] >= r) {\n                resultSet.add(new Cluster<T>(pointSet.remove(i)));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}