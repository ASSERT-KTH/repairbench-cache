{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(k);\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    // Choose the remaining k-1 centers.\n    for (int i = 1; i < k; i++) {\n        // Compute squared distances to the nearest existing center.\n        final double[] dx2 = new double[pointSet.size()];\n        double sum = 0;\n        for (int j = 0; j < pointSet.size(); j++) {\n            final T p = pointSet.get(j);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            final double d2 = d * d;\n            dx2[j] = d2;\n            sum += d2;\n        }\n\n        // Pick a new center weighted by squared distance.\n        final double r = random.nextDouble() * sum;\n        double cumsum = 0;\n        int selected = -1;\n        for (int j = 0; j < dx2.length; j++) {\n            cumsum += dx2[j];\n            if (cumsum >= r) {\n                selected = j;\n                break;\n            }\n        }\n        // Guard against rounding errors: pick last if none selected.\n        if (selected < 0) {\n            selected = dx2.length - 1;\n        }\n\n        final T nextPoint = pointSet.remove(selected);\n        resultSet.add(new Cluster<T>(nextPoint));\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}