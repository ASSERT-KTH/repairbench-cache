{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Handle edge cases for input k or points.\n        // If k is 0 or less, no clusters are needed.\n        // If points is empty, no centers can be chosen.\n        if (k <= 0 || points.isEmpty()) {\n            return resultSet;\n        }\n\n        // Choose one center uniformly at random from among the data points.\n        // pointSet.size() > 0 guaranteed by points.isEmpty() check above.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        while (resultSet.size() < k) {\n            // If there are no more points to choose from, break the loop.\n            // This can happen if k is greater than the number of unique points\n            // in the original collection.\n            if (pointSet.isEmpty()) {\n                break;\n            }\n\n            // For each data point x in the remaining pointSet, compute D(x)^2,\n            // the squared distance between x and the nearest center that has already been chosen.\n            // Store cumulative sums for roulette wheel selection.\n            // This list must be re-populated in each iteration for the current pointSet.\n            List<Double> dx2CumulativeSums = new ArrayList<>(pointSet.size());\n            double sumOfDx2 = 0.0; // Use double for sum of squared distances\n\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                // getNearestCluster is an assumed helper function not part of the bug fix.\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sumOfDx2 += d * d; // Accumulate total sum of squared distances\n                dx2CumulativeSums.add(sumOfDx2); // Store cumulative sum for point at index i\n            }\n\n            // If the sum of squared distances is zero, it means all remaining points\n            // are duplicates of existing centers. In this case, select a random point\n            // from the remaining pointSet to continue adding centers until k is reached.\n            if (sumOfDx2 == 0.0) {\n                 final T p = pointSet.remove(random.nextInt(pointSet.size()));\n                 resultSet.add(new Cluster<T>(p));\n                 continue; // Proceed to the next iteration to check size or find next center\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2.\n            final double r = random.nextDouble() * sumOfDx2; // random value in [0.0, sumOfDx2)\n\n            int chosenIndex = -1;\n            // Find the first point whose cumulative sum of D(x)^2 is strictly greater than r.\n            // This ensures that points with D(x)^2 = 0 are not chosen unless r is also 0\n            // AND there are no points with D(x)^2 > 0 (handled by sumOfDx2 == 0.0 case).\n            // If r is 0, this loop will pick the first point with a non-zero D(x)^2.\n            for (int i = 0 ; i < dx2CumulativeSums.size(); i++) {\n                if (dx2CumulativeSums.get(i) > r) { // Changed from >= to > for correct probability selection\n                    chosenIndex = i;\n                    break;\n                }\n            }\n\n            // Fallback for floating-point precision issues or if r is exactly sumOfDx2 - epsilon.\n            // In theory, chosenIndex should always be found if sumOfDx2 > 0.\n            if (chosenIndex == -1) {\n                // This means r was effectively >= sumOfDx2 (due to precision). Pick the last point.\n                chosenIndex = dx2CumulativeSums.size() - 1;\n            }\n\n            // Remove the chosen point from the candidate set and add it as a new center.\n            final T p = pointSet.remove(chosenIndex);\n            resultSet.add(new Cluster<T>(p));\n        }\n\n        return resultSet;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}