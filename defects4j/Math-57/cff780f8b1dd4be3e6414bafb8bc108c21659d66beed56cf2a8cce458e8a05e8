{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>>\nchooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    while (resultSet.size() < k && !pointSet.isEmpty()) {\n        // For each data point x, compute D(x), the distance between x and the nearest\n        // center that has already been chosen. Compute cumulative weights, so that each\n        // point is weighted by the square of its distance.\n        double[] cumulativeWeights = new double[pointSet.size()];\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            cumulativeWeights[i] = sum;\n        }\n\n        // Add one new data point as a center. Each point is chosen with probability\n        // proportional to D(x)\u00b2.\n        final double r = random.nextDouble() * sum;\n        for (int i = 0; i < pointSet.size(); i++) {\n            if (cumulativeWeights[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}