{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        // Convert to list for indexed access. Make it mutable.\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        // Loop to choose the remaining k-1 centers\n        while (resultSet.size() < k) {\n            // Handle case where no points are left (e.g., k > points.size())\n            // This should not happen if k <= points.size() is enforced elsewhere.\n            if (pointSet.isEmpty()) {\n                 break;\n            }\n\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            // Allocate dx2 array here, based on current pointSet size, as it changes each iteration.\n            final double[] dx2 = new double[pointSet.size()];\n            double sum = 0.0; // FIX: Use double for sum to avoid potential truncation/overflow.\n\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                // Find the nearest cluster center (getNearestCluster is assumed to be available and correct)\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                // Compute square distance\n                final double d = p.distanceFrom(nearest.getCenter());\n                final double dSquared = d * d;\n                sum += dSquared;\n                dx2[i] = sum; // Store cumulative sum of squared distances\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2. Sample using cumulative distribution.\n            final double r = random.nextDouble() * sum;\n\n            // Find the point index corresponding to the sampled value r\n            // The pointSet index i is selected if r falls into the interval associated with i,\n            // which is [dx2[i-1], dx2[i]) (with dx2[-1]=0).\n            // This is equivalent to finding the first i where dx2[i] >= r.\n            for (int i = 0 ; i < dx2.length; i++) {\n                // If the cumulative sum up to this point is >= the random value, choose this point.\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i); // Remove the chosen point from the candidate set\n                    resultSet.add(new Cluster<T>(p)); // Add it as a new center\n                    break; // Exit the inner loop once a center is chosen\n                }\n            }\n            // Note: If sum == 0 (all remaining points have zero distance to the nearest center),\n            // r will be 0. The loop condition dx2[i] >= r becomes 0 >= 0, which is true for i=0.\n            // So, if sum=0, the point at index 0 is chosen. This is a valid choice in this edge case.\n        }\n\n        return resultSet;\n\n    }\n\n    // Helper method assumed available (e.g., static in the same class or a utility class)\n    // Not included in the fix block as per instructions.\n    /*\n    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n        double minDistance = Double.POSITIVE_INFINITY;\n        Cluster<T> nearest = null;\n        for (final Cluster<T> c : clusters) {\n            final double distance = point.distanceFrom(c.getCenter());\n            if (distance < minDistance) {\n                minDistance = distance;\n                nearest = c;\n            }\n        }\n        return nearest;\n    }\n    */",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}