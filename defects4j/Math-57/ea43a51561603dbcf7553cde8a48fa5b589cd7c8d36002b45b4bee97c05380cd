{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        // Convert to list for easy index-based random selection and removal\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        // Array to store the minimum distance squared for each point\n        double[] dx2 = null;\n\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n\n            // Allocate or reallocate dx2 based on the current size of pointSet\n            int N = pointSet.size();\n            dx2 = new double[N]; // Stores cumulative sums of squared distances\n\n            double sum = 0.0; // Sum of minimum distances squared\n\n            for (int i = 0; i < N; i++) {\n                final T p = pointSet.get(i);\n                // Find the nearest center to point p\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                final double d2 = d * d;\n                sum += d2; // Add squared distance to sum\n                dx2[i] = sum; // Store cumulative sum\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2.\n            // Sample using the cumulative probability distribution dx2.\n            final double r = random.nextDouble() * sum; // Random number in [0, sum)\n\n            // Find the first point's cumulative distance squared greater than or equal to r\n            for (int i = 0 ; i < N; i++) { // Iterate up to current size (N)\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i); // Remove chosen point from candidate list\n                    resultSet.add(new Cluster<T>(p)); // Add it as a new center\n                    // dx2 array is now invalid for the modified pointSet, will be recomputed in next iteration\n                    break; // Exit the inner loop once a center is chosen\n                }\n            }\n            // If sum == 0.0 (all remaining points are duplicates of existing centers),\n            // r will be 0.0. The loop will select the first point (index 0),\n            // as dx2[0] will also be 0.0, and 0.0 >= 0.0 is true. This is acceptable.\n        }\n\n        return resultSet;\n\n    }\n\n    /**\n     * Get the nearest {@link Cluster} to the given point.\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to search\n     * @param point the point to find the nearest cluster for\n     * @return the nearest {@link Cluster} to the point\n     */\n    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n         double minDistance = Double.MAX_VALUE;\n         Cluster<T> nearest = null;\n         for (final Cluster<T> cluster : clusters) {\n             final double distance = point.distanceFrom(cluster.getCenter());\n             if (distance < minDistance) {\n                 minDistance = distance;\n                 nearest = cluster;\n             }\n         }\n         return nearest;\n     }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}