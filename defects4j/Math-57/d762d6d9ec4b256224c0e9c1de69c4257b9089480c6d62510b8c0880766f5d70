{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    // Choose the remaining k-1 centers.\n    while (resultSet.size() < k) {\n        final int n = pointSet.size();\n        final double[] dx2 = new double[n];\n        double sum = 0.0;\n\n        // For each data point x, compute D(x)^2 = squared distance to nearest center.\n        for (int i = 0; i < n; i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        final T next;\n        if (sum <= 0) {\n            // All points coincident with existing centers: pick uniformly at random.\n            next = pointSet.remove(random.nextInt(n));\n        } else {\n            // Pick a new center with probability proportional to D(x)^2.\n            final double r = random.nextDouble() * sum;\n            int idx = 0;\n            while (idx < n && dx2[idx] < r) {\n                idx++;\n            }\n            // idx < n because dx2[n-1] == sum >= r\n            next = pointSet.remove(idx);\n        }\n        resultSet.add(new Cluster<T>(next));\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}