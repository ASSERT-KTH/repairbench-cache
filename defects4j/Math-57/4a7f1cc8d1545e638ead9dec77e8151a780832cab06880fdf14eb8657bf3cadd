{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        // The dx2 array should be re-calculated and re-sized in each iteration of the while loop\n        // because the pointSet shrinks and the distances to centers change.\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n\n            // BUG FIX 1: 'sum' must be a double to avoid truncation of d*d,\n            // especially for small squared distances (< 1.0).\n            double sum = 0;\n            // BUG FIX 2: dx2 array must be re-initialized for the current size of pointSet.\n            // If declared outside, its length becomes stale as pointSet shrinks,\n            // potentially leading to IndexOutOfBoundsException or incorrect behavior.\n            final double[] dx2 = new double[pointSet.size()];\n\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum; // Stores cumulative sum of squared distances\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    // Remove the chosen point from the pointSet\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break; // Only one point is chosen per iteration\n                }\n            }\n        }\n\n        return resultSet;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}