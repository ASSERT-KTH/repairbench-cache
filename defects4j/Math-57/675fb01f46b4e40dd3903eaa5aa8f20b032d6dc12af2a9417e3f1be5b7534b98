{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(\n        final Collection<T> points, final int k, final Random random) {\n\n    // Copy the input so we can remove elements\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // 1) Choose one center uniformly at random\n    final T first = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(first));\n\n    // 2) Choose the remaining k-1 centers\n    while (resultSet.size() < k) {\n        final int size = pointSet.size();\n        // dx2[i] will hold the cumulative sum of squared distances up to i\n        final double[] dx2 = new double[size];\n        double sum = 0;\n\n        // For each point, compute its distance to the nearest chosen center\n        for (int i = 0; i < size; i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        if (sum <= 0) {\n            // All points are identical (or at zero distance); pick one at random\n            final T p = pointSet.remove(random.nextInt(size));\n            resultSet.add(new Cluster<T>(p));\n        } else {\n            // Choose a new center with probability proportional to D(x)^2\n            final double r = random.nextDouble() * sum;\n            int index = 0;\n            while (index < size && dx2[index] < r) {\n                index++;\n            }\n            final T p = pointSet.remove(index);\n            resultSet.add(new Cluster<T>(p));\n        }\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}