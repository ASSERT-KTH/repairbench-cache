{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points,\n                                                                                 final int k,\n                                                                                 final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    // Allocate the dx2 array. We will only use the part corresponding to the current size of pointSet.\n    final double[] dx2 = new double[pointSet.size()];\n\n    while (resultSet.size() < k) {\n        double sum = 0.0;\n        // For each data point x, compute D(x), the squared distance from the nearest center\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            final double d2 = d * d;\n            sum += d2;\n            dx2[i] = sum;\n        }\n\n        // Pick a random value in [0, sum)\n        final double r = random.nextDouble() * sum;\n        int selectedIndex = -1;\n        // Choose the first index for which the cumulative sum exceeds r\n        for (int i = 0; i < pointSet.size(); i++) {\n            if (r < dx2[i]) {\n                selectedIndex = i;\n                break;\n            }\n        }\n        // Fallback: in case due to rounding r was not less than any dx2[i],\n        // choose the last element.\n        if (selectedIndex < 0) {\n            selectedIndex = pointSet.size() - 1;\n        }\n\n        final T p = pointSet.remove(selectedIndex);\n        resultSet.add(new Cluster<T>(p));\n    }\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}