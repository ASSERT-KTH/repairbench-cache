{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k && !pointSet.isEmpty()) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            double sum = 0.0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                final double d2 = d * d;\n                dx2[i] = d2;\n                sum += d2;\n            }\n\n            // If all distances are zero (e.g. identical points), select any random point\n            if (sum == 0.0) {\n                final T p = pointSet.remove(random.nextInt(pointSet.size()));\n                resultSet.add(new Cluster<T>(p));\n                continue;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2\n            final double r = random.nextDouble() * sum;\n            double cumulative = 0.0;\n            int nextPointIndex = -1;\n            for (int i = 0; i < dx2.length; i++) {\n                cumulative += dx2[i];\n                if (cumulative >= r) {\n                    nextPointIndex = i;\n                    break;\n                }\n            }\n            // robustness: if for some reason cumulative never exceeds r due to rounding, pick last\n            if (nextPointIndex == -1) {\n                nextPointIndex = dx2.length - 1;\n            }\n            final T p = pointSet.remove(nextPointIndex);\n            resultSet.add(new Cluster<T>(p));\n        }\n\n        return resultSet;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}