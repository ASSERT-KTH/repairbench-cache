{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        // Convert to list for indexed access. Make a copy, so the caller's list is not modified.\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        // Handle empty input collection.\n        if (pointSet.isEmpty()) {\n            return resultSet;\n        }\n\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        // Keep track of the squared distances D(x)^2.\n        // dx2 array will store cumulative sums of squared distances.\n\n        while (resultSet.size() < k) {\n            // If pointSet becomes empty (e.g., k > initial number of points), we cannot choose more centers.\n            if (pointSet.isEmpty()) {\n                 break;\n            }\n\n            // Create the array for storing the cumulative sums of squared distances.\n            // Must be created inside the loop because pointSet size changes.\n            final double[] dx2 = new double[pointSet.size()];\n\n            // Store the sum of squared distances, required for weights. Use double.\n            double sum = 0.0;\n\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                final double d2 = d * d; // Calculate squared distance\n                sum += d2;               // Add to sum\n                dx2[i] = sum;            // Store cumulative sum\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2\n\n            // Choose a random value proportional to the total sum of squared distances.\n            final double r = random.nextDouble() * sum;\n\n            // Find the index of the point to choose, using the cumulative sums.\n            int nextPointIndex = -1;\n            // Loop over the cumulative sums array (which has the current pointSet size).\n            for (int i = 0; i < dx2.length; i++) {\n                // Select the first point whose cumulative interval includes 'r'.\n                // This handles the boundary case r=0 correctly by selecting index 0\n                // if dx2[0] is 0 (meaning the first point has 0 distance).\n                if (dx2[i] >= r) {\n                    nextPointIndex = i;\n                    break;\n                }\n            }\n\n            // If sum=0, all points are duplicates of existing centers.\n            // The loop above will select index 0 because r=0 and dx2[0]=0.\n            // If sum > 0, the loop is guaranteed to find an index because r < sum = dx2[last].\n\n            // Handle the theoretical case where pointSet is non-empty but index is not found\n            // (e.g., due to extreme floating-point issues where r might be ~= sum).\n            // If nextPointIndex is still -1, it means r >= dx2[last] (where dx2[last] == sum).\n            // This should not happen with random.nextDouble() being < 1.0, but as a fallback,\n            // we can assign the last point.\n            if (nextPointIndex == -1) {\n                 // This implies pointSet was empty, but we checked for that.\n                 // Or potential floating point issue (r >= sum). Select last point.\n                 if (!pointSet.isEmpty()) {\n                     nextPointIndex = dx2.length - 1;\n                 } else {\n                     // Should not be reachable. Break loop if it occurs.\n                     break;\n                 }\n            }\n\n            // Retrieve the chosen point and remove it from the available points.\n            // The index must be valid for the current pointSet size.\n            final T p = pointSet.remove(nextPointIndex);\n\n            // Add the chosen point as a cluster center.\n            resultSet.add(new Cluster<T>(p));\n\n        } // end while\n\n        return resultSet;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}