{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        while (resultSet.size() < k) {\n            // The dx2 array stores the cumulative sum of D(x)^2 for the remaining points.\n            // It must be re-initialized in each iteration because pointSet.size() changes.\n            final double[] dx2 = new double[pointSet.size()];\n\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            double currentSumOfSqDistances = 0.0; // Changed from int to double\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                currentSumOfSqDistances += d * d; // Accumulate sum of squared distances\n                dx2[i] = currentSumOfSqDistances; // dx2[i] stores the cumulative sum up to index i\n            }\n\n            final double sum = currentSumOfSqDistances;\n\n            T newCenter;\n            if (sum == 0.0) {\n                // All remaining points are at distance 0 from existing centers.\n                // In this case, choose one uniformly at random from the remaining points.\n                newCenter = pointSet.remove(random.nextInt(pointSet.size()));\n            } else {\n                // Add one new data point as a center. Each point x is chosen with\n                // probability proportional to D(x)2\n                // The random value 'r' is between 0 (inclusive) and 'sum' (exclusive).\n                final double r = random.nextDouble() * sum;\n\n                int chosenIdx = -1; // This index will be found if sum > 0.0\n                for (int i = 0 ; i < dx2.length; i++) {\n                    // Find the first point whose cumulative D(x)^2 is strictly greater than r.\n                    // Using '>' instead of '>=' ensures that points with D(x)^2 = 0 are not chosen\n                    // unless r is such that no point has a non-zero D(x)^2 contribution.\n                    if (dx2[i] > r) {\n                        chosenIdx = i;\n                        break;\n                    }\n                }\n                newCenter = pointSet.remove(chosenIdx);\n            }\n            resultSet.add(new Cluster<T>(newCenter));\n        }\n\n        return resultSet;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}