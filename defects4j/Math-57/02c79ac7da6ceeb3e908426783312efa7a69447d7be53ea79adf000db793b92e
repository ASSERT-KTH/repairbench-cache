{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    // Choose the remaining centers.\n    while (resultSet.size() < k) {\n\n        final int ps = pointSet.size();\n        // dx2[i] will hold the cumulative sum of squared distances up to index i.\n        final double[] dx2 = new double[ps];\n        double sum = 0.0;\n\n        // For each data point x, compute D(x)^2, where D(x) is the distance to the\n        // nearest center already chosen, and accumulate.\n        for (int i = 0; i < ps; i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            final double d2 = d * d;\n            sum += d2;\n            dx2[i] = sum;\n        }\n\n        final T nextPoint;\n        // If all distances are zero, pick a center uniformly at random.\n        if (sum == 0.0) {\n            nextPoint = pointSet.remove(random.nextInt(ps));\n        } else {\n            // Otherwise choose a new center with probability proportional to D(x)^2.\n            final double r = random.nextDouble() * sum;\n            int index = 0;\n            // find the first index where the cumulative sum exceeds r\n            while (index < ps - 1 && dx2[index] < r) {\n                index++;\n            }\n            nextPoint = pointSet.remove(index);\n        }\n\n        resultSet.add(new Cluster<T>(nextPoint));\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}