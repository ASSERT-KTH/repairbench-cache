{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    // Copy the input so we can remove selected centers\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // 1) Pick one center uniformly at random\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    // 2) Pick the remaining k-1 centers\n    while (resultSet.size() < k) {\n        final int size = pointSet.size();\n        double[] dx2 = new double[size];\n        double sum = 0.0;\n\n        // Compute the cumulative probability distribution\n        for (int i = 0; i < size; i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n\n        // Draw a random value in [0, sum)\n        double r = random.nextDouble() * sum;\n\n        // Find the index i with dx2[i] >= r\n        int nextIndex = 0;\n        for (int i = 0; i < size; i++) {\n            if (dx2[i] >= r) {\n                nextIndex = i;\n                break;\n            }\n        }\n\n        // Remove that point from the set and add it as a new center\n        T p = pointSet.remove(nextIndex);\n        resultSet.add(new Cluster<T>(p));\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}