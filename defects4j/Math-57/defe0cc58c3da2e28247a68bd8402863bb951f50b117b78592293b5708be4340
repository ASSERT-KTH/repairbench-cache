{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        // The calling cluster() function handles cases where points.size() is 0 or k is 0.\n        // Assuming pointSet is not empty at this stage for k > 0.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            double sum = 0; // BUG FIX: Changed 'int' to 'double' to prevent truncation of d*d\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            if (sum == 0) {\n                // All remaining points are at distance 0 from existing centers.\n                // In this case, choose one uniformly at random from the remaining points.\n                // This prevents infinite loop if k is greater than the number of unique points\n                // or if all remaining points are duplicates of existing centers.\n                if (pointSet.isEmpty()) {\n                    // This can happen if k is greater than the total number of initial points.\n                    // No more points to choose, so break.\n                    break;\n                }\n                final T p = pointSet.remove(random.nextInt(pointSet.size()));\n                resultSet.add(new Cluster<T>(p));\n            } else {\n                final double r = random.nextDouble() * sum;\n                for (int i = 0 ; i < dx2.length; i++) {\n                    // BUG FIX: Changed '>=' to '>' to ensure points with D(x)^2 = 0\n                    // are not chosen when the total sum of D(x)^2 is non-zero.\n                    // This ensures points with zero probability are not picked.\n                    if (dx2[i] > r) {\n                        final T p = pointSet.remove(i);\n                        resultSet.add(new Cluster<T>(p));\n                        break;\n                    }\n                }\n            }\n        }\n\n        return resultSet;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}