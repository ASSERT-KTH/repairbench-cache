{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            // FIX: Declare and initialize dx2 inside the loop to ensure its size\n            // matches the current pointSet.size() and it contains fresh data.\n            final double[] dx2 = new double[pointSet.size()];\n            int sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            final double r = random.nextDouble() * sum;\n            int chosenIdx = -1; // Variable to store the chosen index\n            for (int i = 0 ; i < dx2.length; i++) { // dx2.length now correctly corresponds to pointSet.size()\n                if (dx2[i] >= r) {\n                    chosenIdx = i;\n                    break;\n                }\n            }\n\n            // This ensures a point is always chosen, even if r is slightly\n            // greater than sum due to floating point inaccuracies, or if sum is zero.\n            // If sum is 0, r is 0, dx2[0] is 0, so chosenIdx will be 0.\n            // If r is slightly greater than sum, and no point was found (chosenIdx still -1),\n            // it indicates a numerical precision issue. In such cases, picking the last point\n            // or the first point (if sum is 0) is a common fallback.\n            // Given the logic, chosenIdx should always be found if sum > 0 and random.nextDouble() is [0, 1).\n            final T p = pointSet.remove(chosenIdx);\n            resultSet.add(new Cluster<T>(p));\n        }\n\n        return resultSet;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}