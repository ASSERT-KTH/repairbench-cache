{
    "generation": "    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Handle empty input gracefully. If k > 0 and points is empty, no centers can be chosen.\n        if (pointSet.isEmpty()) {\n            return resultSet;\n        }\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            // Bug fix 1: 'sum' must be a double to avoid precision loss from d*d.\n            double sum = 0.0;\n            // Bug fix 2: 'dx2' array must be re-initialized in each iteration\n            // to reflect the current size of 'pointSet' after removals.\n            final double[] dx2 = new double[pointSet.size()];\n\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)^2.\n            if (sum == 0.0) {\n                // All remaining points are at 0 distance from existing clusters.\n                // This means they are effectively duplicates of existing centers or\n                // already covered. We can just pick the next available point.\n                if (!pointSet.isEmpty()) {\n                    final T p = pointSet.remove(0); // Pick the first remaining point\n                    resultSet.add(new Cluster<T>(p));\n                } else {\n                    // No more points to choose from, even if k centers haven't been selected.\n                    // This can happen if k is larger than the number of unique points available.\n                    break;\n                }\n            } else {\n                final double r = random.nextDouble() * sum;\n                int chosenIdx = -1;\n\n                // Bug fix 3: Handle the edge case where random.nextDouble() returns 0.0.\n                // If r is 0.0 and sum > 0, we must select a point that has a non-zero D(x)^2.\n                // The standard 'dx2[i] >= r' would incorrectly pick the first point if dx2[0] is 0.0.\n                if (r == 0.0) {\n                    // Find the first point that actually contributed to the sum (i.e., has D(x)^2 > 0).\n                    for (int i = 0 ; i < dx2.length; i++) {\n                        if (dx2[i] > 0.0) {\n                            chosenIdx = i;\n                            break;\n                        }\n                    }\n                } else {\n                    // Normal case: find the first index where the cumulative sum >= r.\n                    for (int i = 0 ; i < dx2.length; i++) {\n                        if (dx2[i] >= r) {\n                            chosenIdx = i;\n                            break;\n                        }\n                    }\n                }\n\n                // A point should always be found if sum > 0.\n                // dx2[dx2.length - 1] is equal to sum, and r < sum.\n                // So, chosenIdx will always be set here.\n                final T p = pointSet.remove(chosenIdx);\n                resultSet.add(new Cluster<T>(p));\n            }\n        }\n\n        return resultSet;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}