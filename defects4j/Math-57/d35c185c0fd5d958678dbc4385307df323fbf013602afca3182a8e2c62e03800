{
    "generation": "/**\n * Use K-means++ to choose the initial centers.\n *\n * @param <T> type of the points to cluster\n * @param points the points to choose the initial centers from\n * @param k the number of centers to choose\n * @param random random generator to use\n * @return the initial centers\n */\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k && !pointSet.isEmpty()) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0; // Use double for accuracy with distances\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            dx2[i] = d * d;\n            sum += dx2[i];\n        }\n\n        if (sum == 0.0) {\n            // All points are at the same location as centers, pick any remaining point arbitrarily\n            final T p = pointSet.remove(random.nextInt(pointSet.size()));\n            resultSet.add(new Cluster<T>(p));\n            continue;\n        }\n\n        // Pick a random value in [0, sum)\n        final double r = random.nextDouble() * sum;\n        double cumulative = 0.0;\n        int selected = -1;\n        for (int i = 0; i < dx2.length; i++) {\n            cumulative += dx2[i];\n            if (cumulative >= r) {\n                selected = i;\n                break;\n            }\n        }\n        // If not selected due to rounding errors, choose last index\n        if (selected == -1) {\n            selected = dx2.length - 1;\n        }\n\n        final T p = pointSet.remove(selected);\n        resultSet.add(new Cluster<T>(p));\n    }\n\n    return resultSet;\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}