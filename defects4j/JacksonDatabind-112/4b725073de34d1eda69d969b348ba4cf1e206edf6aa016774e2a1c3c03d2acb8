{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // 1) May need to resolve types for delegate\u2010based creators:\n    JsonDeserializer<Object> delegate = null;\n    if (_valueInstantiator != null) {\n        // [databind#2324]: check both array\u2010delegating and normal delegating creators\n        AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n        JavaType delegateType = null;\n        if (delegateCreator == null) {\n            // try array\u2010delegating creator\n            delegateCreator = _valueInstantiator.getArrayDelegateCreator();\n            if (delegateCreator != null) {\n                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n            }\n        }\n        if (delegateCreator != null) {\n            // if we didn't pick up an array delegate type, fall back on the regular one\n            if (delegateType == null) {\n                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            }\n            // find (and contextualize) the deserializer for that delegate\n            delegate = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n\n    // 2) Then handle element (content) deserializer:\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    final JavaType valueType = _containerType.getContentType();\n    if (valueDeser == null) {\n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, null);\n        if (valueDeser == null) {\n            // And if none, ask for a contextual deserializer for the element type\n            valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n        }\n    } else {\n        // if already assigned, probably needs secondary contextualization\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n    }\n\n    // 3) Handle format features (e.g. ACCEPT_SINGLE_VALUE_AS_ARRAY) and nulls:\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n    if (isDefaultDeserializer(valueDeser)) {\n        valueDeser = null;\n    }\n\n    // 4) Return a new instance with resolved delegate and value deserializer\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}