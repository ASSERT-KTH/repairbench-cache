{
    "generation": "    /*\n    /**********************************************************\n    /* Validation, post-processing\n    /**********************************************************\n     */\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegate = null;\n        if (_valueInstantiator != null) {\n            // [databind#2324]: check both array-delegating and delegating\n            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n            if (delegateCreator != null) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                // When a delegate creator is present, it means the entire collection instance\n                // is constructed by delegating to another deserializer.\n                // This 'delegate' deserializer will be responsible for deserializing the\n                // type expected by the delegate creator (e.g., Collection<String>).\n                // It will, in turn, handle its own content deserialization.\n                delegate = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        \n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        final JavaType valueType = _containerType.getContentType();\n\n        // If a delegate creator is used for the entire collection,\n        // this CollectionDeserializer's own _valueDeserializer (for elements)\n        // is not directly used to deserialize individual elements.\n        // The responsibility shifts entirely to the 'delegate' deserializer.\n        if (delegate == null) {\n            // Only resolve and contextualize _valueDeserializer if no delegate creator is used\n            // for the collection itself.\n            if (valueDeser == null) {\n                // [databind#125]: May have a content converter\n                valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n                if (valueDeser == null) {\n                // And we may also need to get deserializer for String\n                    valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n                }\n            } else { // if directly assigned, probably not yet contextual, so:\n                valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n            }\n        } else {\n            // If a delegate is present, this CollectionDeserializer will use it to instantiate\n            // the collection. Its own _valueDeserializer field for individual elements\n            // is not needed in this mode.\n            valueDeser = null;\n        }\n\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n        \n        // This check should only apply if valueDeser is actually being used by this deserializer,\n        // which it is not if a delegate is present. If valueDeser is null, isDefaultDeserializer(null)\n        // returns false, so it correctly remains null.\n        if (isDefaultDeserializer(valueDeser)) {\n            valueDeser = null;\n        }\n        return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}