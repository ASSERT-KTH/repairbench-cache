{
    "generation": "    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        JsonDeserializer<Object> delegate = null;\n        if (_valueInstantiator != null) {\n            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n            if (delegateCreator != null) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                delegate = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        JavaType valueType = null;\n        NullValueProvider nuller = null;\n\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n        if (delegate == null) {\n            valueType = _containerType.getContentType();\n            if (valueDeser == null) {\n                valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n                if (valueDeser == null) {\n                    valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n                }\n            } else {\n                valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n            }\n            nuller = findContentNullProvider(ctxt, property, valueDeser);\n            if (isDefaultDeserializer(valueDeser)) {\n                valueDeser = null;\n            }\n        } else {\n            valueDeser = null;\n            nuller = findContentNullProvider(ctxt, property, null);\n        }\n\n        return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}