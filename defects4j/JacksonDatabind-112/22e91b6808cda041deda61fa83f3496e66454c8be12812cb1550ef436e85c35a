{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate\u2010based creators (both normal and array\u2010delegating)\n    JsonDeserializer<Object> delegate = null;\n    if (_valueInstantiator != null) {\n        AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n        boolean arrayCreator = false;\n        if (delegateCreator == null) {\n            // fall back to array\u2010delegate creator if one was registered\n            delegateCreator = _valueInstantiator.getArrayDelegateCreator();\n            arrayCreator = true;\n        }\n        if (delegateCreator != null) {\n            JavaType dt = arrayCreator\n                ? _valueInstantiator.getArrayDelegateType(ctxt.getConfig())\n                : _valueInstantiator.getDelegateType(ctxt.getConfig());\n            delegate = findDeserializer(ctxt, dt, property);\n        }\n    }\n\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    final JavaType valueType = _containerType.getContentType();\n    if (valueDeser == null) {\n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        if (valueDeser == null) {\n            // And we may also need to get deserializer for element type\n            valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n        }\n    } else {\n        // if directly assigned, probably not yet contextual\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n    }\n\n    // Single\u2010value\u2010as\u2010array setting\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    // null\u2010element handling\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n    // by default we drop default value deserializers\n    if (isDefaultDeserializer(valueDeser)) {\n        valueDeser = null;\n    }\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}