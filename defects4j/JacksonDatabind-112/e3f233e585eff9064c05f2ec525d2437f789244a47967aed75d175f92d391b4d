{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate\u2010based creators (including array\u2010delegating):\n    JsonDeserializer<Object> delegate = null;\n    if (_valueInstantiator != null) {\n        // [databind#2324]: check both array\u2010delegating and regular delegate creator\n        AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();\n        JavaType delegateType = null;\n        if (delegateCreator != null) {\n            delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n        } else {\n            delegateCreator = _valueInstantiator.getDelegateCreator();\n            if (delegateCreator != null) {\n                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            }\n        }\n        if (delegateCreator != null) {\n            delegate = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    final JavaType valueType = _containerType.getContentType();\n    if (valueDeser == null) {\n        // [databind#125]: May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        if (valueDeser == null) {\n            // And we may also need to get deserializer for element type\n            valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n        }\n    } else {\n        // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n    }\n\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined?\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n\n    if (isDefaultDeserializer(valueDeser)) {\n        valueDeser = null;\n    }\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}