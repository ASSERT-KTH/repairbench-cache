{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException {\n    JsonDeserializer<Object> delegate = null;\n    if (_valueInstantiator != null) {\n        // [databind#2324]: if a delegate creator exists, use it to find a deserializer for the delegate type\n        AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n        if (delegateCreator != null) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            delegate = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    if (delegate == null) {\n        // No delegate means using element-by-element deserialization for container contents.\n        final JavaType valueType = _containerType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n            if (valueDeser == null) {\n                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n            }\n        } else {\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n        }\n        if (isDefaultDeserializer(valueDeser)) {\n            valueDeser = null;\n        }\n    } else {\n        // When delegate-based instantiation is in use, we ignore element deserialization.\n        valueDeser = null;\n    }\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}