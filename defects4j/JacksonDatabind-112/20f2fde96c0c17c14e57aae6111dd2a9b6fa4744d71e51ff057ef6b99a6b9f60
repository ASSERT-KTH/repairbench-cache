{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException {\n    // If we have a delegate-creator, we must use delegate-based deserialization.\n    if (_valueInstantiator != null && _valueInstantiator.getDelegateCreator() != null) {\n        JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n        JsonDeserializer<?> delegate = ctxt.findContextualValueDeserializer(delegateType, property);\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // In delegate mode the element (content) deserializer is not used.\n        return withResolved(delegate, _valueDeserializer,\n                findContentNullProvider(ctxt, property, _valueDeserializer), unwrapSingle);\n    }\n    // Otherwise, resolve the deserializer for contained values.\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    final JavaType valueType = _containerType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n        }\n    } else {\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n    }\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n    if (isDefaultDeserializer(valueDeser)) {\n        valueDeser = null;\n    }\n    return withResolved(null, valueDeser, nuller, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}