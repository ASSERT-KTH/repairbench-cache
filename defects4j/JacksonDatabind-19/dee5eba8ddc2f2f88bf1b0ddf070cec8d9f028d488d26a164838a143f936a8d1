{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // 28-May-2015, tatu: Properties are special, as per [databind#810]\n        // If rawClass is Properties.class, we should explicitly treat it as Map<String, String>\n        if (rawClass == java.util.Properties.class) {\n            // Properties are special: always treated as Map<String,String> for conversion purposes.\n            // _stringType() is expected to be available in TypeFactory, where this method resides.\n            return MapType.construct(rawClass, _stringType(), _stringType());\n        }\n\n        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}