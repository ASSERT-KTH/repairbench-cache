{
    "generation": "private JavaType _mapType(Class<?> rawClass)\n{\n    // Special handling for Properties, which is a Map<String, String>\n    if (rawClass == Properties.class) {\n        return MapType.construct(rawClass, getTypeFactory().constructType(String.class), getTypeFactory().constructType(String.class));\n    }\n\n    // Find type parameters for Map interface\n    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n    if (typeParams == null) {\n        return MapType.construct(rawClass, _unknownType(), _unknownType());\n    }\n    // Ensure exactly two type parameters found\n    if (typeParams.length != 2) {\n        throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n    }\n    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}