{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // 28-May-2015, tatu: Properties are special, as per [databind#810]\n        //                   It is NOT a generic type that can be introspected\n        //                   to find its type parameters (as it declares them\n        //                   as <Object, Object>), but instead is fixed as\n        //                   <String, String> for most practical uses.\n        if (rawClass == java.util.Properties.class) {\n            // Assumes _stringType() is an accessible helper method within this class\n            // or its enclosing TypeFactory, returning JavaType for String.class\n            JavaType stringType = _stringType(); \n            return MapType.construct(rawClass, stringType, stringType);\n        }\n\n        JavaType[] typeParams = findTypeParameters(rawClass, java.util.Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}