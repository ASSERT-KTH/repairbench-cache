{
    "generation": "private JavaType _mapType(Class<?> rawClass)\n{\n    // 28-May-2015, tatu: Properties are special, as per [databind#810]\n    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n    // ok to have no types (\"raw\")\n    if (typeParams == null) {\n        // 28-May-2015, tatu: As per [databind#2527], let's actually try resolving 'raw'\n        //   type here, not just blindly return Map<Object,Object>\n        if (Properties.class.isAssignableFrom(rawClass)) {\n            return MapType.construct(rawClass, _fromClass(null, String.class), _fromClass(null, String.class));\n        }\n        return MapType.construct(rawClass, _unknownType(), _unknownType());\n    }\n    // but exactly 2 types if any found\n    if (typeParams.length != 2) {\n        throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n    }\n    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}