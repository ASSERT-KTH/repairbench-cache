{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // [databind#810]: Properties are special, as Map<String,String>\n        if (rawClass == Properties.class) {\n            // Properties is a non-generic type, but for type handling purposes,\n            // we should consider it <String,String> map.\n            // NOTE: must account for possible sub-classing (pass 'rawClass');\n            // or perhaps instead pass `Properties.class`? For now, use specified\n            // type.\n            return MapType.construct(rawClass, _stringType(), _stringType());\n        }\n        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            // Mismatched for sub-class of Properties? Seems unlikely but...\n            // For [databind#810], ensure that if we do get Properties descendant,\n            // we use <String,String>\n            /* 04-Jul-2016, tatu: Should probably check for this case earlier... but let it be\n             *   for now, logic gets simpler this way.\n             */\n            if (Properties.class.isAssignableFrom(rawClass)) {\n                return MapType.construct(rawClass, _stringType(), _stringType());\n            }\n            \n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            // Usually should not happen... but let's add a check\n            // One case: we might have a sub-class of Properties with other type parameters\n            // (if that is even allowed)\n            if (rawClass == Properties.class) { // shouldn't happen...\n                 return MapType.construct(rawClass, _stringType(), _stringType());\n            }\n\n            throw new IllegalArgumentException(String.format(\n                    \"Strange Map type %s: cannot determine type parameters\", rawClass.getName()));\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}