{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // [databind#810]: Properties are special, as <String,String>\n        if (rawClass == Properties.class) {\n            // Properties DOES implement `Map<Object, Object>` but for jackson purposes\n            // we want to treat it as Map<String, String>\n            //\n            // note: Churches comment is wrong here, Properties does not implement Map<Object, Object>\n            // but Hashtable<Object, Object>. Type parameters are resolved accordingly.\n            // But we want to force it to <String,String>\n             return MapType.construct(rawClass, _stringType(), _stringType());\n        }\n        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            // 18-Sep-2017, tatu: Should perhaps indicate legacy handling? For now, fine.\n            // 06-Mar-2019, tatu: As per [databind#2274], better be explicit & strict?\n            //    Need to reconsider...\n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            // nominally should specify type parameters found, for better error message;\n            // but would need toString() over JavaTypes etc. Not needed for now.\n            throw new IllegalArgumentException(String.format(\n                    \"Cannot construct MapType for class %s with %d type parameters: expected 2\",\n                    rawClass.getName(), typeParams.length));\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}