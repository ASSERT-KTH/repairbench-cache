{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // 28-May-2015, tatu: Properties are special, as per [databind#810]\n        JavaType[] typeParams;\n        if (rawClass == Properties.class) {\n            typeParams = new JavaType[] { _stringType(), _stringType() };\n        } else {\n            typeParams = findTypeParameters(rawClass, Map.class);\n            // ok to have no types (\"raw\")\n            if (typeParams == null) {\n                 // Even if declared as raw, we may know the type parameters through annotations\n                 // (think sub-classes of collections, declarations via interfaces)\n                 // 18-Jan-2018, tatu: Let's default to <Object,Object> for raw type\n                 //   (used to default to <String,Object>... why?)\n                 return MapType.construct(rawClass, _unknownType(), _unknownType());\n            }\n            // but exactly 2 types if any found\n            if (typeParams.length != 2) {\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}