{
    "generation": "    private JavaType _mapType(Class<?> rawClass)\n    {\n        // Special handling for Properties type which is always Map<String, String>\n        if (rawClass == Properties.class) {\n            return MapType.construct(rawClass, _unknownType(String.class), _unknownType(String.class));\n        }\n\n        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n        // ok to have no types (\"raw\")\n        if (typeParams == null) {\n            return MapType.construct(rawClass, _unknownType(), _unknownType());\n        }\n        // but exactly 2 types if any found\n        if (typeParams.length != 2) {\n            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n        }\n        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}