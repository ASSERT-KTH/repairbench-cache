{
    "generation": "/**\n * Checks dimensions and values of boundaries and inputSigma if defined.\n */\nprivate void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB   = getLowerBound();\n    final double[] uB   = getUpperBound();\n\n    // Checks whether there is at least one finite bound value.\n    boolean hasFiniteBounds = false;\n    for (int i = 0; i < lB.length; i++) {\n        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {\n            hasFiniteBounds = true;\n            break;\n        }\n    }\n\n    // If we have any finite bounds, we must not mix finite and infinite.\n    if (hasFiniteBounds) {\n        boolean hasInfiniteBounds = false;\n        for (int i = 0; i < lB.length; i++) {\n            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n                hasInfiniteBounds = true;\n                break;\n            }\n        }\n        if (hasInfiniteBounds) {\n            // mixed infinite/finite bounds not supported\n            throw new MathUnsupportedOperationException();\n        } else {\n            // store them for internal use\n            boundaries = new double[2][];\n            boundaries[0] = lB;\n            boundaries[1] = uB;\n            // Abort early if the normalization range will overflow\n            for (int i = 0; i < lB.length; i++) {\n                double diff = uB[i] - lB[i];\n                if (Double.isInfinite(diff)) {\n                    // range too large to normalize safely\n                    throw new NumberIsTooLargeException(diff, Double.MAX_VALUE, false);\n                }\n            }\n        }\n    } else {\n        boundaries = null;\n    }\n\n    // check sigma if provided\n    if (inputSigma != null) {\n        if (inputSigma.length != init.length) {\n            throw new DimensionMismatchException(inputSigma.length, init.length);\n        }\n        for (int i = 0; i < init.length; i++) {\n            if (inputSigma[i] < 0) {\n                throw new NotPositiveException(inputSigma[i]);\n            }\n            if (boundaries != null) {\n                double range = boundaries[1][i] - boundaries[0][i];\n                if (inputSigma[i] > range) {\n                    throw new OutOfRangeException(inputSigma[i], 0, range);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}