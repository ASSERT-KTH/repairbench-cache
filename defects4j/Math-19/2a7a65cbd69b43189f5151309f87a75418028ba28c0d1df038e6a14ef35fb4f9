{
    "generation": "    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        // Checks whether there is at least one finite bound value.\n        boolean hasFiniteBounds = false;\n        for (int i = 0; i < lB.length; i++) {\n            if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i])) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n        // Checks whether there is at least one infinite bound value.\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) {\n            for (int i = 0; i < lB.length; i++) {\n                if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new MathUnsupportedOperationException();\n            } else {\n                // All bounds are finite. Check if the range (uB[i] - lB[i]) overflows.\n                // This addresses an issue (similar to MATH-865) where the difference\n                // between finite upper and lower bounds can exceed Double.MAX_VALUE,\n                // resulting in Infinity. This Infinity then causes NaN during normalization,\n                // leading to MathIllegalStateException in the optimization loop.\n                for (int i = 0; i < lB.length; i++) {\n                    // If the difference between upper and lower bounds overflows to Infinity,\n                    // it means the range is too large to be handled correctly.\n                    if (uB[i] - lB[i] == Double.POSITIVE_INFINITY) {\n                        // Throw NumberIsTooLargeException as expected by the test.\n                        throw new org.apache.commons.math3.exception.NumberIsTooLargeException(\n                            uB[i] - lB[i], Double.MAX_VALUE, true\n                        );\n                    }\n                }\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n            }\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    // The range (boundaries[1][i] - boundaries[0][i]) is now guaranteed\n                    // to be a finite positive number by the check above.\n                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}