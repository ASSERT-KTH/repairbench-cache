{
    "generation": "import org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.exception.NumberIsTooSmallException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.MathUnsupportedOperationException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats; // Assuming this is available based on context\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n        final int dimension = init.length;\n\n        // Check basic consistency: lower bound must be less than or equal to upper bound.\n        for (int i = 0; i < dimension; i++) {\n            if (lB[i] > uB[i]) {\n                throw new NumberIsTooSmallException(LocalizedFormats.UPPER_BOUND_NOT_LARGER_THAN_LOWER_BOUND,\n                                                    uB[i], lB[i], true);\n            }\n        }\n\n        // Checks whether there is at least one finite bound value.\n        boolean hasFiniteBounds = false;\n        for (int i = 0; i < dimension; i++) {\n            if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i])) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n\n        // Checks whether there is at least one infinite bound value.\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) {\n            for (int i = 0; i < dimension; i++) {\n                if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, and at least one infinite bound,\n                // this is a mixed case, which is not supported by the current code.\n                // Use a more specific exception message if available.\n                throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);\n            } else {\n                // All bounds are finite.\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Check boundary consistency (require lB < uB), range overflow, and starting point.\n                for (int i = 0; i < dimension; i++) {\n                    // Ensure upper bound is strictly greater than lower bound for a valid range.\n                    if (boundaries[0][i] >= boundaries[1][i]) {\n                         throw new NumberIsTooSmallException(LocalizedFormats.UPPER_BOUND_NOT_LARGER_THAN_LOWER_BOUND,\n                                                             boundaries[1][i], boundaries[0][i], false);\n                    }\n                    // Abort early if the normalization range calculation will overflow.\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    if (Double.isInfinite(range)) { // Check for overflow\n                        // Throw the exception expected by the test when range calculation overflows.\n                        throw new NumberIsTooLargeException(range, Double.MAX_VALUE, false);\n                    }\n                    // Check if starting point is within the bounds.\n                    if (init[i] < boundaries[0][i] || init[i] > boundaries[1][i]) {\n                        throw new OutOfRangeException(LocalizedFormats.START_POINT_OUT_OF_BOUNDS, // Use specific format if available\n                                                    init[i], boundaries[0][i], boundaries[1][i]);\n                    }\n                }\n            }\n        } else {\n            // No finite bounds means all bounds are infinite.\n            // lB <= uB check was already performed earlier.\n            boundaries = null;\n        }\n\n        // Check inputSigma properties.\n        if (inputSigma != null) {\n            if (inputSigma.length != dimension) {\n                throw new DimensionMismatchException(inputSigma.length, dimension);\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                // Check sigma relative to bounds only if bounds are finite.\n                if (boundaries != null) {\n                     // The range uB[i] - lB[i] was already computed and checked for validity above.\n                     final double range = boundaries[1][i] - boundaries[0][i];\n                     if (inputSigma[i] > range) {\n                         // Check if sigma is larger than the feasible range.\n                         throw new OutOfRangeException(inputSigma[i], 0, range);\n                     }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}