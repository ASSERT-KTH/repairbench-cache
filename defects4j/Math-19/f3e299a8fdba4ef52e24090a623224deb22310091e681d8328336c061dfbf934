{
    "generation": "import org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.exception.NumberIsTooSmallException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.MathUnsupportedOperationException;\n\n// Assume other necessary imports are present\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n        final int dimension = init.length;\n\n        // Ensure bounds arrays, if provided, have correct dimension.\n        // Note: Constructor usually handles null vs non-null consistency and dimensions.\n        // Adding checks here for robustness based on potential usage patterns.\n        if (lB != null && lB.length != dimension) {\n            throw new DimensionMismatchException(lB.length, dimension);\n        }\n        if (uB != null && uB.length != dimension) {\n            throw new DimensionMismatchException(uB.length, dimension);\n        }\n\n        // Check boundary values consistency only if bounds are provided.\n        if (lB != null && uB != null) { // Both non-null implies bounds are active\n            // Checks whether there is at least one finite bound value.\n            boolean hasFiniteBounds = false;\n            for (int i = 0; i < dimension; i++) {\n                if (!Double.isInfinite(lB[i]) ||\n                    !Double.isInfinite(uB[i])) {\n                    hasFiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasFiniteBounds) {\n                // Checks whether there is at least one infinite bound value.\n                boolean hasInfiniteBounds = false;\n                for (int i = 0; i < dimension; i++) {\n                    if (Double.isInfinite(lB[i]) ||\n                        Double.isInfinite(uB[i])) {\n                        hasInfiniteBounds = true;\n                        break;\n                    }\n                }\n\n                if (hasInfiniteBounds) {\n                    // If there is at least one finite bound, none can be infinite,\n                    // because mixed cases are not supported by the current code.\n                    throw new MathUnsupportedOperationException();\n                } else {\n                    // All bounds are finite.\n                    // Convert API to internal handling of boundaries.\n                    boundaries = new double[2][];\n                    boundaries[0] = lB;\n                    boundaries[1] = uB;\n\n                    // Check for potential overflow when calculating the range\n                    // and ensure lower bound is not greater than upper bound.\n                    for (int i = 0; i < dimension; i++) {\n                        if (lB[i] > uB[i]) {\n                            // Check consistency: lower bound must be <= upper bound.\n                            throw new NumberIsTooSmallException(lB[i], uB[i], true);\n                        }\n                        // Abort early if the normalization will overflow (cf. \"encode\" method).\n                        final double range = uB[i] - lB[i];\n                        if (Double.isInfinite(range)) {\n                            // The difference between upper and lower bound is too large.\n                            throw new NumberIsTooLargeException(range, Double.MAX_VALUE, false);\n                        }\n                    }\n                }\n            } else {\n                // All bounds are infinite, treat as unbounded optimization.\n                boundaries = null;\n            }\n        } else {\n            // No bounds provided (either lB or uB or both are null).\n            boundaries = null;\n        }\n\n        // Check inputSigma properties.\n        if (inputSigma != null) {\n            if (inputSigma.length != dimension) {\n                throw new DimensionMismatchException(inputSigma.length, dimension);\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                // Check sigma consistency with bounds only if bounds are finite.\n                if (boundaries != null) {\n                    // The range calculation here is safe due to the check added above.\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    if (inputSigma[i] > range) {\n                        throw new OutOfRangeException(inputSigma[i], 0, range);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}