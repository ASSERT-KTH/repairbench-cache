{
    "generation": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    // Checks whether there is at least one finite bound value.\n    boolean hasFiniteBounds = false;\n    for (int i = 0; i < lB.length; i++) {\n        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {\n            hasFiniteBounds = true;\n            break;\n        }\n    }\n\n    // Checks whether there is at least one infinite bound value.\n    boolean hasInfiniteBounds = false;\n    if (hasFiniteBounds) {\n        for (int i = 0; i < lB.length; i++) {\n            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n                hasInfiniteBounds = true;\n                break;\n            }\n        }\n\n        if (hasInfiniteBounds) {\n            // If there is at least one finite bound, none can be infinite.\n            throw new MathUnsupportedOperationException();\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = new double[2][];\n            boundaries[0] = lB;\n            boundaries[1] = uB;\n\n            // Abort early if the normalization will overflow.\n            // (i.e. if the range (upper - lower) cannot be represented as a finite number)\n            for (int i = 0; i < lB.length; i++) {\n                double range = boundaries[1][i] - boundaries[0][i];\n                if (Double.isInfinite(range) || Double.isNaN(range)) {\n                    throw new NumberIsTooLargeException(range, Double.MAX_VALUE);\n                }\n            }\n        }\n    } else {\n        boundaries = null;\n    }\n\n    if (inputSigma != null) {\n        if (inputSigma.length != init.length) {\n            throw new DimensionMismatchException(inputSigma.length, init.length);\n        }\n        for (int i = 0; i < init.length; i++) {\n            if (inputSigma[i] < 0) {\n                throw new NotPositiveException(inputSigma[i]);\n            }\n            if (boundaries != null) {\n                double diff = boundaries[1][i] - boundaries[0][i];\n                if (inputSigma[i] > diff) {\n                    throw new OutOfRangeException(inputSigma[i], 0, diff);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}