{
    "generation": "    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n        final int N = init.length;\n\n        // Checks whether there is at least one finite bound value.\n        boolean hasFiniteBounds = false;\n        for (int i = 0; i < N; i++) {\n            if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i])) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n        // Checks whether there is at least one infinite bound value.\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) {\n            for (int i = 0; i < N; i++) {\n                if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new MathUnsupportedOperationException();\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                for (int i = 0; i < N; i++) {\n                    final double u = boundaries[1][i];\n                    final double l = boundaries[0][i];\n                    // Check that lower bound is strictly less than upper bound.\n                    if (l >= u) {\n                        throw new NumberIsTooSmallException(u, l, false);\n                    }\n                    // Check for overflow when calculating the range.\n                    final double range = u - l;\n                    if (Double.isInfinite(range)) {\n                        throw new NumberIsTooLargeException(LocalizedFormats.BOUNDARY_RANGE,\n                                                            range, Double.MAX_VALUE, false);\n                    }\n                }\n            }\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != N) {\n                throw new DimensionMismatchException(inputSigma.length, N);\n            }\n            for (int i = 0; i < N; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    // Note: range has been checked for overflow above.\n                    if (inputSigma[i] > range) {\n                        throw new OutOfRangeException(inputSigma[i], 0, range);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}