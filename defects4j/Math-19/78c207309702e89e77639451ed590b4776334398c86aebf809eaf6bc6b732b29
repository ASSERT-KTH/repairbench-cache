{
    "generation": "    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound(); // May be null\n        final double[] uB = getUpperBound(); // May be null\n        final int dimension = init.length;\n\n        // Check dimensions first\n        if (lB != null && lB.length != dimension) {\n            throw new DimensionMismatchException(lB.length, dimension);\n        }\n        if (uB != null && uB.length != dimension) {\n            throw new DimensionMismatchException(uB.length, dimension);\n        }\n        if (inputSigma != null && inputSigma.length != dimension) {\n            throw new DimensionMismatchException(inputSigma.length, dimension);\n        }\n\n        // Determine if bounds are active and validate them\n        if (lB != null && uB != null) {\n            boolean hasFinite = false;\n            boolean hasInfinite = false;\n            for (int i = 0; i < dimension; i++) {\n                // Check consistency lB < uB\n                if (lB[i] >= uB[i]) {\n                    throw new NumberIsTooSmallException(lB[i], uB[i], false);\n                }\n                // Classify bounds: are any finite? are any infinite?\n                boolean lFinite = !Double.isInfinite(lB[i]);\n                boolean uFinite = !Double.isInfinite(uB[i]);\n                if (lFinite || uFinite) {\n                    hasFinite = true;\n                }\n                // Check if this dimension involves infinite bounds.\n                // Note: A mix (e.g., lFinite=true, uFinite=false) counts as having an infinite bound.\n                if (!lFinite || !uFinite) {\n                    hasInfinite = true;\n                }\n            }\n\n            if (hasFinite && hasInfinite) {\n                // Mixed finite and infinite bounds are not supported\n                throw new MathUnsupportedOperationException();\n            }\n\n            if (hasFinite) { // Implies !hasInfinite, so all bounds are finite\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Check for normalization overflow (range becoming infinite)\n                for (int i = 0; i < dimension; i++) {\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    if (Double.isInfinite(range)) { // Check for overflow\n                        // Throw the exception expected by the test MATH-865\n                        throw new NumberIsTooLargeException(range, Double.MAX_VALUE, false);\n                    }\n                    // Range positivity check already done by lB[i] < uB[i]\n                }\n            } else {\n                // No finite bounds found (implies all are infinite, as mix is ruled out)\n                boundaries = null;\n            }\n        } else {\n            // One or both bounds arrays are null - treat as unbounded\n            boundaries = null;\n        }\n\n        // Check initial point feasibility only if bounds are active (finite)\n        // Note: Original code didn't check this here, might be checked elsewhere or assumed valid.\n        // Adding for completeness based on typical optimizer checks. If this causes issues, remove.\n        if (boundaries != null) {\n             for (int i = 0; i < dimension; i++) {\n                 if (init[i] < boundaries[0][i]) {\n                     throw new OutOfRangeException(init[i], boundaries[0][i], boundaries[1][i]);\n                 }\n                 if (init[i] > boundaries[1][i]) {\n                     throw new OutOfRangeException(init[i], boundaries[0][i], boundaries[1][i]);\n                 }\n             }\n        }\n\n\n        // Check inputSigma validity\n        if (inputSigma != null) {\n            for (int i = 0; i < dimension; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                // Check sigma vs range only if bounds are active (finite)\n                if (boundaries != null) {\n                    // Range calculation is safe now, known to be finite.\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    if (inputSigma[i] > range) {\n                        throw new OutOfRangeException(inputSigma[i], 0, range);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}