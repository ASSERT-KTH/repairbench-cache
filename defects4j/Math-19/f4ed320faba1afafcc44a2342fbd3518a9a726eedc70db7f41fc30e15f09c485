{
    "generation": "import org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.MathUnsupportedOperationException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\n\n// Assume necessary imports for CMAESOptimizer context, e.g., getStartPoint, getLowerBound, getUpperBound\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        // Checks whether there is at least one finite bound value.\n        boolean hasFiniteBounds = false;\n        for (int i = 0; i < lB.length; i++) {\n            if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i])) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n        // Checks whether there is at least one infinite bound value.\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) {\n            for (int i = 0; i < lB.length; i++) {\n                if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new MathUnsupportedOperationException();\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                for (int i = 0; i < lB.length; i++) {\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    // Check if the range computation resulted in infinity (overflow).\n                    if (Double.isInfinite(range)) {\n                        throw new NumberIsTooLargeException(Double.valueOf(range), Double.valueOf(Double.MAX_VALUE), false);\n                    }\n                    // Check for NaN results, which might indicate invalid inputs (e.g., NaN bounds)\n                    if (Double.isNaN(range)) {\n                         // Throwing an exception here is important as NaN range will break normalization.\n                        throw new MathIllegalStateException();\n                    }\n                }\n            }\n        } else {\n            // Convert API to internal handling of boundaries (all infinite).\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    // Recompute range or ensure it's available from the previous check.\n                    // Recomputing is safer to avoid storing potentially large arrays of ranges.\n                    final double range = boundaries[1][i] - boundaries[0][i];\n                    // We already checked for Infinite/NaN range earlier, so range should be finite here.\n                    if (inputSigma[i] > range) {\n                        throw new OutOfRangeException(inputSigma[i], 0, range);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}