{
    "generation": "    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        // Checks whether there is at least one finite bound value.\n        boolean hasFiniteBounds = false;\n        for (int i = 0; i < lB.length; i++) {\n            if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i])) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n        // Checks whether there is at least one infinite bound value.\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) {\n            for (int i = 0; i < lB.length; i++) {\n                if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new MathUnsupportedOperationException();\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                // This means checking if the range (uB[i] - lB[i]) is too large to be represented\n                // as a finite double, typically resulting in positive Infinity.\n                for (int i = 0; i < lB.length; i++) {\n                    final double lower = lB[i];\n                    final double upper = uB[i];\n\n                    // Check for potential positive overflow of (upper - lower).\n                    // This typically happens when 'upper' is a large positive number and\n                    // 'lower' is a large negative number, such that their difference\n                    // (which is equivalent to upper + |lower|) exceeds Double.MAX_VALUE.\n                    // The condition 'upper > Double.MAX_VALUE + lower' detects this scenario\n                    // without explicitly computing (upper - lower) first and risking an overflow\n                    // to Infinity before the check.\n                    if (upper > Double.MAX_VALUE + lower) {\n                        // Throw NumberIsTooLargeException, indicating that the calculated\n                        // range (upper - lower) would exceed Double.MAX_VALUE.\n                        // The value passed to the exception will be Infinity if computed,\n                        // which correctly indicates it's too large.\n                        throw new NumberIsTooLargeException(upper - lower, Double.MAX_VALUE, true);\n                    }\n                }\n            }\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    // This check ensures inputSigma[i] is not larger than the range (upper - lower).\n                    // The previous check ensures that (boundaries[1][i] - boundaries[0][i])\n                    // is a finite number, preventing this check from operating on Infinity.\n                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}