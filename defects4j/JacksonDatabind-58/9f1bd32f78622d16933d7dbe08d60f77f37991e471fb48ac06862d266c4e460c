{
    "generation": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanPropertyDefinition propDef,\n        JavaType propType0)\n    throws JsonMappingException\n{\n    AnnotatedMember mutator = propDef.getNonConstructorMutator();\n\n    if (ctxt.canOverrideAccessModifiers()) {\n        // Prevent fixing access on Throwable.cause to avoid security issues\n        boolean fixAccessNeeded = true;\n        if (mutator instanceof AnnotatedMethod) {\n            AnnotatedMethod method = (AnnotatedMethod) mutator;\n            if (method.getDeclaringClass() == Throwable.class && method.getName().equals(\"cause\")) {\n                fixAccessNeeded = false;\n            }\n        } else if (mutator instanceof AnnotatedField) {\n            AnnotatedField field = (AnnotatedField) mutator;\n            if (field.getDeclaringClass() == Throwable.class && field.getName().equals(\"cause\")) {\n                fixAccessNeeded = false;\n            }\n        }\n        if (fixAccessNeeded) {\n            mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n        }\n    }\n\n    BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),\n            propType0, propDef.getWrapperName(),\n            beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n    JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);\n    if (type != propType0) {\n        property = property.withType(type);\n    }\n\n    JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);\n    type = modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser = type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop = new MethodProperty(propDef, type, typeDeser,\n                beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop = new FieldProperty(propDef, type, typeDeser,\n                beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser != null) {\n        prop = prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();\n    if (ref != null && ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();\n    if(objectIdInfo != null){\n        prop.setObjectIdInfo(objectIdInfo);\n    }\n    return prop;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}