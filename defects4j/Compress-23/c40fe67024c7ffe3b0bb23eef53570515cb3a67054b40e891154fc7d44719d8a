{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            // LZMA properties are: 1 byte for props, 4 bytes for dictionary size (unsigned int)\n            if (coder.properties == null || coder.properties.length < 5) {\n                 throw new IOException(\"LZMA Coder properties missing or too short\");\n            }\n\n            byte propsByte = coder.properties[0];\n            long dictSize = 0;\n            // Dictionary size is a 32-bit unsigned integer in little-endian order\n            for (int i = 0; i < 4; i++) {\n                // Read bytes coder.properties[1] to coder.properties[4]\n                // Mask with 0xFFL to treat byte as unsigned, ensuring no sign extension\n                // Shift to the correct byte position (0, 8, 16, 24) and OR into dictSize\n                dictSize |= (coder.properties[i + 1] & 0xFFL) << (8 * i);\n            }\n\n            // The org.apache.commons.compress.compressors.lzma.LZMAInputStream constructor\n            // takes dictionary size as an int. Java's int is signed 32-bit.\n            // The underlying Tukaani XZ library also expects a non-negative int, typically <= Integer.MAX_VALUE.\n            // Therefore, we must check if the dictionary size exceeds the maximum positive value for an int.\n            if (dictSize > Integer.MAX_VALUE) {\n                 // Throw the same exception type observed in the failing test for consistency.\n                 throw new org.tukaani.xz.UnsupportedOptionsException(\n                     \"LZMA dictionary is too big for this implementation (\" + dictSize + \" bytes, max is \" + Integer.MAX_VALUE + \" bytes)\");\n            }\n\n            // The memory limit parameter (-1) indicates to use the default calculation based on dictionary size.\n            // Cast dictSize to int, which is now safe as we've checked it's within the valid range.\n            // Use the LZMAInputStream implementation from the 'compressors' package.\n            return new org.apache.commons.compress.compressors.lzma.LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}