{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // The dictionary size is a 4-byte little-endian integer stored in coder.properties[1] to coder.properties[4].\n            // Each byte must be treated as an unsigned value during the reconstruction.\n            long dictSize = coder.properties[1] & 0xFF; // Start with the least significant byte\n            for (int i = 1; i < 4; i++) {\n                // Shift subsequent bytes and OR them into dictSize, treating each byte as unsigned.\n                dictSize |= ((long)coder.properties[i + 1] & 0xFF) << (8 * i);\n            }\n            // The LZMAInputStream from org.tukaani.xz library has a strict maximum dictionary size limit\n            // (LZMAInputStream.DICT_SIZE_MAX is 64 MiB). The current code passes dictSize to it.\n            // The previous calculation could produce an incorrect, very large value due to sign extension\n            // when byte values were negative, causing it to exceed this limit prematurely.\n            if (dictSize > org.tukaani.xz.LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than \" + org.tukaani.xz.LZMAInputStream.DICT_SIZE_MAX + \" bytes\");\n            }\n            return new org.tukaani.xz.LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}