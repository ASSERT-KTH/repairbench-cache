{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // dictSize is a 4-byte little-endian value\n            // Ensure bytes are treated as unsigned before shifting and combining\n            long dictSize = coder.properties[1] & 0xFFL; // Start with the first byte, ensuring it's unsigned and a long\n            for (int i = 1; i < 4; i++) {\n                dictSize |= ((long) (coder.properties[i + 1] & 0xFF) << (8 * i));\n            }\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                // LZMAInputStream.DICT_SIZE_MAX from org.tukaani.xz is 1 << 30 (1GiB).\n                // The error message here refers to 4GiB, which is potentially the format's\n                // theoretical maximum or an outdated comment, but this check ensures\n                // the commons-compress layer throws an IOException if the dictionary\n                // size exceeds the underlying implementation's limit.\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}