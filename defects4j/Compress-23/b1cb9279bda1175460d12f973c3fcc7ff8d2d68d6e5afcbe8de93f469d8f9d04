{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // The dictionary size for LZMA/LZMA2 is a 4-byte little-endian unsigned integer.\n            // It is stored in coder.properties[1] through coder.properties[4].\n            // To correctly reconstruct this value into a long, each byte must be treated as unsigned\n            // and then properly shifted and OR-ed. Failing to mask with 0xFF (or 0xFFL) before\n            // shifting can lead to sign extension issues, especially if the byte value is \"negative\"\n            // (i.e., its most significant bit is set, like 0xFF), corrupting the final dictSize.\n\n            // Initialize dictSize with the first byte (LSB), ensuring it's treated as unsigned long.\n            long dictSize = (coder.properties[1] & 0xFFL);\n\n            // Iterate through the remaining 3 bytes (coder.properties[2] to coder.properties[4]).\n            for (int i = 1; i < 4; i++) {\n                // 1. Mask the byte with 0xFF to get its unsigned value (0-255).\n                // 2. Cast the result to a long *before* shifting. This is crucial to prevent\n                //    intermediate int overflow or sign extension issues during the shift operation\n                //    (e.g., (byte)0xFF << 24 would result in 0xFF000000 which is a negative int).\n                // 3. Shift the long value by the appropriate number of bits (8*i).\n                // 4. OR the shifted value with the accumulating dictSize.\n                dictSize |= ((long) (coder.properties[i + 1] & 0xFF) << (8 * i));\n            }\n\n            // Check if the calculated dictionary size exceeds the maximum allowed by Apache Commons Compress.\n            // LZMAInputStream.DICT_SIZE_MAX is 1GB (1 << 30).\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than \" + (LZMAInputStream.DICT_SIZE_MAX / (1024L * 1024L * 1024L)) + \"GiB maximum size\");\n            }\n\n            // The underlying tukaani.xz.LZMAInputStream constructor expects an int for dictionarySize.\n            // Since LZMAInputStream.DICT_SIZE_MAX (1GB) is less than Integer.MAX_VALUE (approx 2GB),\n            // any dictSize that passes the above check will safely fit into an int.\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}