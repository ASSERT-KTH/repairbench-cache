{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // Correctly calculate dictSize treating bytes as unsigned\n            // Use L suffix for long literal 0xFF to ensure promotion to long\n            // before potential sign extension issues arise with the initial byte.\n            long dictSize = coder.properties[1] & 0xFFL;\n            for (int i = 1; i < 4; i++) {\n                // Ensure subsequent bytes are also treated as unsigned by masking with 0xFFL\n                // Cast the result to long before shifting to prevent sign extension during shift.\n                dictSize |= ((coder.properties[i + 1] & 0xFFL) << (8 * i));\n            }\n\n            // Assuming LZMAInputStream refers to org.apache.commons.compress.compressors.lzma.LZMAInputStream\n            // Its DICT_SIZE_MAX is Integer.MAX_VALUE.\n            // The check prevents passing values > Integer.MAX_VALUE to the constructor where it's cast to int.\n            // Note: The error message mentions 4GiB, while the check is against ~2GiB (Integer.MAX_VALUE).\n            // This inconsistency might exist in the original code or surrounding context, but the check itself is against the constant.\n            if (dictSize > org.apache.commons.compress.compressors.lzma.LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n\n            // Use the fully qualified name for clarity, assuming this is the intended class.\n            // Pass -1 as memory limit (delegates to underlying XZ library's default or calculation).\n            // Pass the calculated properties and dictionary size (cast to int, which is safe due to the check above).\n            return new org.apache.commons.compress.compressors.lzma.LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}