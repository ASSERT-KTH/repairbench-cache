{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // The dictionary size is a 4-byte little-endian unsigned integer\n            // stored in coder.properties[1] through coder.properties[4].\n            // The original code has a bug where it performs sign-extension when\n            // converting bytes to long and shifting, leading to incorrect dictionary sizes\n            // (often negative values when interpreted as int), which then causes\n            // UnsupportedOptionsException from LZMAInputStream for values that are\n            // effectively outside its supported range (e.g., less than DICT_SIZE_MIN).\n\n            // Correctly read the 4 bytes as an unsigned 32-bit integer into a long.\n            long dictSize = coder.properties[1] & 0xFF; // LSB\n            for (int i = 1; i < 4; i++) {\n                // Mask with 0xFF to treat the byte as an unsigned value (0-255),\n                // then cast to long before shifting to prevent sign extension during shift\n                // and ensure the result of the shift is also a long.\n                dictSize |= ((long)(coder.properties[i + 1] & 0xFF)) << (8 * i);\n            }\n\n            // After correcting the calculation, if the dictionary size from the archive\n            // is indeed greater than LZMAInputStream.DICT_SIZE_MAX (approx. 2GiB),\n            // this check will now correctly trigger the IOException,\n            // which is the desired behavior for COMPRESS-256.\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}