{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // The dictionary size is stored as a 4-byte little-endian unsigned integer\n            // starting from coder.properties[1].\n            // It needs to be read into a long to prevent overflow and handled correctly\n            // by masking bytes to treat them as unsigned before shifting.\n            long dictSize = 0;\n            for (int i = 0; i < 4; i++) {\n                // Read each byte, mask with 0xFF to treat it as an unsigned value,\n                // then cast to long before shifting to prevent sign extension issues.\n                dictSize |= ((long) (coder.properties[i + 1] & 0xFF)) << (8 * i);\n            }\n\n            // Check if the calculated dictionary size exceeds the maximum supported by LZMAInputStream.\n            // LZMAInputStream.DICT_SIZE_MAX is approximately 2GiB (2147483632).\n            // The original error message \"Dictionary larger than 4GiB maximum size\"\n            // suggests a conceptual limit that might be different from the actual\n            // implementation limit of the LZMAInputStream used.\n            // This check ensures that if a dictionary size is valid in the 7z format\n            // but too large for the underlying LZMA decoder, an IOException is thrown.\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n            \n            // Pass the calculated dictionary size (which is now correctly parsed as a positive long\n            // and guaranteed to be within the int range accepted by LZMAInputStream)\n            // to the LZMAInputStream constructor.\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}