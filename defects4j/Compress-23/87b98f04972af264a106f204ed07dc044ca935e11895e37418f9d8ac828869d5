{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            // Correctly parse dictSize as an unsigned 32-bit integer from 4 bytes.\n            // The original code might have sign-extension issues for individual bytes\n            // when shifting, which could lead to incorrect or unexpectedly negative dictSize values.\n            long dictSize = (coder.properties[1] & 0xFFL);\n            for (int i = 1; i < 4; i++) {\n                dictSize |= ((long) (coder.properties[i + 1] & 0xFF) << (8 * i));\n            }\n\n            // The original code checked:\n            // if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n            //     throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            // }\n            // In Apache Commons Compress, LZMAInputStream.DICT_SIZE_MAX is typically 256 MiB.\n            // However, the test fails with \"org.tukaani.xz.UnsupportedOptionsException: LZMA dictionary is too big for this implementation\".\n            // This specific exception indicates that the underlying tukaani.xz library (if used for LZMA)\n            // has a stricter dictionary size limit than 256 MiB for plain LZMA.\n            // For plain LZMA, tukaani.xz typically limits the dictionary size to (2^27 - 1) bytes, which is ~128 MiB.\n            // For LZMA2, it's ~1 GiB.\n            // Given that this function handles LZMA_ID (not LZMA2_ID), the 128 MiB limit is relevant.\n\n            // To prevent the UnsupportedOptionsException, we should clamp the dictionary size\n            // to the maximum supported by the underlying tukaani.xz LZMA implementation.\n            final long TUKAANI_XZ_LZMA_DICT_SIZE_MAX = 1L << 27; // 128 MiB\n\n            if (dictSize > TUKAANI_XZ_LZMA_DICT_SIZE_MAX) {\n                // If the dictionary size from the archive is larger than what the\n                // specific LZMA implementation (likely tukaani.xz's plain LZMA) can handle,\n                // clamp it to the maximum supported value. This provides a best-effort\n                // decoding instead of failing the process.\n                dictSize = TUKAANI_XZ_LZMA_DICT_SIZE_MAX;\n            }\n\n            // The dictSize is now guaranteed to be positive and within a range that\n            // should be acceptable by the underlying LZMA decoder.\n            // The cast to int is safe as 128 MiB is well within Integer.MAX_VALUE.\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}