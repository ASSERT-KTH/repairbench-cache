{
    "generation": "        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            // Ensure properties array is not null and has the minimum required length (1 byte for props + 4 bytes for dict size)\n            final byte[] properties = coder.properties;\n            if (properties == null || properties.length < 5) {\n                 throw new IOException(\"LZMA coder properties are too short.\");\n            }\n\n            final byte propsByte = properties[0];\n\n            // Dictionary size is stored as a 32-bit unsigned little-endian integer\n            // in properties[1] through properties[4].\n            // We read it into a long to handle unsigned values up to 2^32-1.\n            // Mask with 0xFFL to prevent sign extension when converting byte to long.\n            long dictSize = properties[1] & 0xFFL;\n            dictSize |= (properties[2] & 0xFFL) << 8;\n            dictSize |= (properties[3] & 0xFFL) << 16;\n            dictSize |= (properties[4] & 0xFFL) << 24;\n\n            // The LZMAInputStream constructor used internally expects the dictionary size as an int.\n            // See org.tukaani.xz.LZMAInputStream(InputStream, long, byte, int).\n            // If the dictionary size read from the 7z file (dictSize as long) is\n            // greater than Integer.MAX_VALUE (2^31 - 1), casting it to int will result\n            // in a negative value. The underlying LZMAInputStream implementation\n            // checks if the int dictSize parameter is negative and throws an\n            // UnsupportedOptionsException if it is.\n            // Therefore, we must reject dictionary sizes that don't fit in a positive int.\n            if (dictSize > Integer.MAX_VALUE) {\n                throw new IOException(\"Dictionary size \" + dictSize + \" bytes is larger than the maximum supported size \" + Integer.MAX_VALUE);\n            }\n\n            // The original check against LZMAInputStream.DICT_SIZE_MAX (4GiB) is technically correct\n            // for the LZMA format itself, but too lenient for the underlying implementation's constraints.\n            // The check against Integer.MAX_VALUE above effectively replaces it.\n            // if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { // DICT_SIZE_MAX is (1L << 32) - 1\n            //     throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            // }\n\n            // Pass the dictionary size as int, now guaranteed to be non-negative.\n            // The memory limit is set to -1 (no limit).\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}