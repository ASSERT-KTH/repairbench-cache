{
    "generation": "        public String getDescription() {\n            if (_desc == null) {\n                StringBuilder sb = new StringBuilder();\n\n                if (_from == null) { // can this ever occur?\n                    sb.append(\"UNKNOWN\");\n                } else {\n                    Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass();\n                    // Original comment: \"06-Oct-2016, tatu: as per [databind#1403], `getSimpleName()` not so good\n                    //   as it drops enclosing class.\"\n                    // This is the root cause of the observed test failures.\n                    // The previous approach (combining `getPackageName` and `getSimpleName()`)\n                    // incorrectly dropped the enclosing class name for inner classes (e.g., `Outer$Inner` became `Inner`).\n                    //\n                    // Class.getName() provides the full canonical name including the package\n                    // and correctly handles inner classes (e.g., \"com.package.Outer$Inner\").\n                    // While Class.getName() can produce \"butt-ugly\" names for arrays (e.g., \"[I\" for `int[]`),\n                    // using it directly ensures the correct class name for inner classes, which is\n                    // what the failing tests require.\n                    sb.append(cls.getName());\n                }\n                sb.append('[');\n                if (_fieldName != null) {\n                    sb.append('\"');\n                    sb.append(_fieldName);\n                    sb.append('\"');\n                } else if (_index >= 0) {\n                    sb.append(_index);\n                } else {\n                    sb.append('?');\n                }\n                sb.append(']');\n                _desc = sb.toString();\n            }\n            return _desc;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}