{
    "generation": "        public String getDescription() {\n            if (_desc == null) {\n                StringBuilder sb = new StringBuilder();\n\n                if (_from == null) { // can this ever occur?\n                    sb.append(\"UNKNOWN\");\n                } else {\n                    Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass();\n                    // As per [databind#1403], `getSimpleName()` is not good as it drops enclosing class\n                    // for inner classes. `getName()` provides the full name including package and\n                    // '$'-separated enclosing class names (e.g., `com.example.Outer$Inner`).\n                    // However, `getName()` produces \"ugly\" names for arrays (e.g., `[Ljava.lang.String;`).\n                    // `getSimpleName()` on the other hand provides better names for arrays (e.g., `String[]`).\n                    // So, we use a conditional approach:\n                    if (cls.isArray()) {\n                        // For array types, simpleName gives a readable format (e.g., \"String[]\")\n                        // ClassUtil.getPackageName(cls) would typically be null for array types, so no package prefix.\n                        sb.append(cls.getSimpleName());\n                    } else {\n                        // For non-array types, getName() provides the complete class name, including\n                        // package and handling of inner classes correctly (e.g., \"com.example.Outer$Inner\").\n                        sb.append(cls.getName());\n                    }\n                }\n                sb.append('[');\n                if (_fieldName != null) {\n                    sb.append('\"');\n                    sb.append(_fieldName);\n                    sb.append('\"');\n                } else if (_index >= 0) {\n                    sb.append(_index);\n                } else {\n                    sb.append('?');\n                }\n                sb.append(']');\n                _desc = sb.toString();\n            }\n            return _desc;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}