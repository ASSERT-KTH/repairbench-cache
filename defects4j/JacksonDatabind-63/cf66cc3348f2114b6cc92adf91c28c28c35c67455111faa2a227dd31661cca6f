{
    "generation": "        public String getDescription() {\n            if (_desc == null) {\n                StringBuilder sb = new StringBuilder();\n\n                if (_from == null) { // can this ever occur?\n                    sb.append(\"UNKNOWN\");\n                } else {\n                    Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass();\n                    // Hmmh. Although Class.getName() is mostly ok, it does look\n                    // butt-ugly for arrays.\n                    // 06-Oct-2016, tatu: as per [databind#1403], `getSimpleName()` not so good\n                    //   as it drops enclosing class. So let's try bit different approach\n                    // The 'different approach' mentioned in the comment was implemented in\n                    // `com.fasterxml.jackson.databind.util.ClassUtil.getDisplayName(Class<?>)`.\n                    // This utility method now handles nested classes correctly (returning\n                    // their full internal name including the enclosing class) and provides\n                    // a more consistent display name for various types, including arrays\n                    // and primitive types, addressing the issues previously encountered.\n                    sb.append(com.fasterxml.jackson.databind.util.ClassUtil.getDisplayName(cls));\n                }\n                sb.append('[');\n                if (_fieldName != null) {\n                    sb.append('\"');\n                    sb.append(_fieldName);\n                    sb.append('\"');\n                } else if (_index >= 0) {\n                    sb.append(_index);\n                } else {\n                    sb.append('?');\n                }\n                sb.append(']');\n                _desc = sb.toString();\n            }\n            return _desc;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}