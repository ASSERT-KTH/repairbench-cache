{
    "generation": "  /**\n   * Handles a goog.require call.\n   */\n  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n\n      // Check if the namespace is provided.\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        // Record the unrecognized require. This will be reported later.\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        // Namespace is provided, perform cross-module dependency check.\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule, \"Explicitly provided name %s must have a module\", ns);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      // Add symbols to table. This might be necessary even if the require\n      // is bad, e.g., to handle 'goog'.\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Always remove the goog.require call after processing.\n      // This prevents VarCheck errors related to the require statement itself,\n      // especially when the provide is missing. The MISSING_PROVIDE_ERROR is reported\n      // based on the unrecognizedRequires list collected above.\n      // The original code preserved the node if the provide was missing,\n      // likely for multi-pass scenarios mentioned in the old comment.\n      // However, for standard single-pass checks or when VarCheck runs later,\n      // removing the node prevents spurious warnings like undeclared 'goog'.\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}