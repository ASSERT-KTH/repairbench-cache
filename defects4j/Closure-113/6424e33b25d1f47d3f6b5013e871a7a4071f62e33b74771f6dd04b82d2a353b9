{
    "generation": "/**\n * Handles a goog.require call.\n */\nprivate void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      // This must be non-null, because there was an explicit provide.\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n\n    // Add the base of the require call (e.g. \"goog\") to the symbol table\n    // so VarCheck won't report it as undeclared.\n    if (left.isGetProp()) {\n      Node root = left;\n      while (root.isGetProp()) {\n        root = root.getFirstChild();\n      }\n      if (root.isName()) {\n        maybeAddToSymbolTable(root);\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    // Requires should be removed before further processing.\n    if (provided != null) {\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}