{
    "generation": "/**\n * Handles a goog.require call.\n */\nprivate void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n        String ns = arg.getString();\n        ProvidedName provided = providedNames.get(ns);\n        if (provided == null || !provided.isExplicitlyProvided()) {\n            unrecognizedRequires.add(\n                new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else {\n            JSModule providedModule = provided.explicitModule;\n\n            // This must be non-null, because there was an explicit provide.\n            Preconditions.checkNotNull(providedModule);\n\n            JSModule module = t.getModule();\n            if (moduleGraph != null &&\n                module != providedModule &&\n                !moduleGraph.dependsOn(module, providedModule)) {\n                compiler.report(\n                    t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                        providedModule.getName(),\n                        module.getName()));\n            }\n        }\n\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n\n        // Requires should be removed before further processing, but only if\n        // the namespace is recognized and explicitly provided. This ensures\n        // that unrecognized requires are not removed, allowing them to be\n        // caught by subsequent checks.\n        if (provided != null && provided.isExplicitlyProvided()) {\n            parent.detachFromParent();\n            compiler.reportCodeChange();\n        }\n    } else {\n        // If the argument is not a string literal, do not remove the require\n        // statement. This ensures that the require is preserved for further\n        // processing or error reporting.\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}