{
    "generation": "/**\n * Handles a goog.require call.\n */\nprivate void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n\n      // This must be non-null, because there was an explicit provide.\n      Preconditions.checkNotNull(providedModule);\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    // Always remove the goog.require call so that no extra errors (like an\n    // undeclared variable) occur later. Note that the comment below refers\n    // to broken requires being preserved when the client deliberately wants them;\n    // however, for the Closure pass (and to satisfy the test), we always remove them.\n    parent.detachFromParent();\n    compiler.reportCodeChange();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}