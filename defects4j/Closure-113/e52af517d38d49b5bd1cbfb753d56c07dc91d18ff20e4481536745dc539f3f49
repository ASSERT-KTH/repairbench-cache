{
    "generation": "  /**\n   * Handles a goog.require call.\n   */\n  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        // Report error directly, respecting the configured level.\n        // This ensures the error is reported even during the preprocessorRun,\n        // fixing cases where the check is expected but wasn't reported previously\n        // because reporting was deferred and skipped when preprocessorRun = true.\n        // We no longer add to unrecognizedRequires as the error is reported here.\n        if (requiresLevel != CheckLevel.OFF) {\n          compiler.report(\n              t.makeError(n,\n                  requiresLevel == CheckLevel.ERROR ?\n                      MISSING_PROVIDE_ERROR : MISSING_PROVIDE_WARNING,\n                  ns));\n        }\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      // N.B. The correct condition for removal depends on preprocessorRun state,\n      // which is handled by maybeRemoveDeclaration. We only detach here if the\n      // namespace was successfully provided. If it was not provided,\n      // maybeRemoveDeclaration won't remove it during preprocessorRun=true,\n      // preserving it for later checks as intended by the comment.\n      if (provided != null) {\n         // TODO(nicksantos): Consider removing the call for unrecognized\n         // requires, too. There are some legacy projects that might be relying\n         // on this behavior, but we should probably make this consistent.\n         // NOTE(brad): This is problematic because we might want to run\n         // ProcessClosurePrimitives twice, first with a lower check level,\n         // and then with a higher check level.\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}