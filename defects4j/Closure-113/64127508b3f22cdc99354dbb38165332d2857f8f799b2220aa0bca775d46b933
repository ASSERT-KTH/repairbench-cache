{
    "generation": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n        String ns = arg.getString();\n        ProvidedName provided = providedNames.get(ns);\n        if (provided == null || !provided.isExplicitlyProvided()) {\n            unrecognizedRequires.add(\n                    new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else {\n            JSModule providedModule = provided.explicitModule;\n\n            Preconditions.checkNotNull(providedModule);\n\n            JSModule module = t.getModule();\n            if (moduleGraph != null &&\n                    module != providedModule &&\n                    !moduleGraph.dependsOn(module, providedModule)) {\n                compiler.report(\n                        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                                providedModule.getName(),\n                                module.getName()));\n            }\n        }\n\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n\n        // Ensure 'goog' is declared in the current scope\n        if (left.isId() && !t.getScope().isDeclared(left.getString())) {\n            t.getScope().declareSymbol(left.getString());\n        }\n\n        // Requires should be removed before further processing.\n        // Clients may run closure pass multiple times.\n        if (provided != null) {\n            parent.detachFromParent();\n            compiler.reportCodeChange();\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}