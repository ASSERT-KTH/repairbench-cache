{
    "generation": "  /**\n   * Handles a goog.require call.\n   */\n  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      boolean requireFound = provided != null && provided.isExplicitlyProvided();\n\n      if (!requireFound) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        // The namespace is provided. Check module dependencies.\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      // However, for the specific case VarCheckTest is testing,\n      // we need to remove the goog.require call even if it's broken\n      // to prevent VarCheck from complaining about 'goog'.\n      // The MISSING_PROVIDE_ERROR/LATE_PROVIDE_ERROR will be reported\n      // later based on the 'unrecognizedRequires' list.\n      // TODO(b/114484469): This removal logic might need further review\n      // regarding the multi-pass scenario mentioned in the comment.\n      // For now, always removing seems necessary to pass existing tests.\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}