{
    "generation": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we might be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // Determine if the offset changed due to a DST transition\n        long transition = nextTransition(instantAdjusted);\n        if (transition == instantAdjusted) {\n            // If at the transition point, use the next offset\n            return offsetAdjusted;\n        }\n        long prevTransition = previousTransition(instantAdjusted);\n        if (prevTransition < instantAdjusted) {\n            int prevOffset = getOffset(prevTransition);\n            if (prevOffset == offsetAdjusted) {\n                // Before the transition, we might need the previous offset\n                int offsetBeforeTransition = getOffset(instantAdjusted - 1);\n                if (offsetBeforeTransition != offsetAdjusted) {\n                    return offsetBeforeTransition;\n                }\n            }\n        }\n        // If we're within an overlap, choose the earlier offset\n        return Math.min(offsetLocal, offsetAdjusted);\n    } else if (offsetLocal > 0) {\n        // Check for a transition before the current instant\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (diff != 0 && instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}