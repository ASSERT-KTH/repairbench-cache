{
    "generation": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            boolean isAmbiguous = false;\n            long transition = nextTransition(instantAdjusted);\n            if (instantAdjusted < transition) {\n                transition = previousTransition(instantAdjusted);\n                isAmbiguous = true;\n            } else if (offsetLocal < offsetAdjusted) {\n                // during gap, always stay on daylight time\n                return offsetLocal;\n            }\n\n            if (isAmbiguous) {\n                // during overlap, we now choose the earliest time (standard time)\n                // this matches common practice, see\n                // http://www.timeanddate.com/library/common/dst-end-confusion.html\n                if (instantAdjusted - transition <= offsetLocal - offsetAdjusted) {\n                    return offsetAdjusted;\n                }\n            }\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}