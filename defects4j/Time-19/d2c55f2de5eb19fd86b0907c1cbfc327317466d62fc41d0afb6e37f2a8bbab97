{
    "generation": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap or in an overlap favoring the later offset\n        // this happens naturally for positive transitions (gaps, clocks go forward), but not for negative (overlaps, clocks go backwards)\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // DST gap: keep the later offset so that time appears after the transition\n            return offsetLocal;\n        }\n    } else if (offsetLocal > 0) {\n        // Handle overlap for positive offset (summer time), to prefer earlier instant (i.e., summertime)\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}