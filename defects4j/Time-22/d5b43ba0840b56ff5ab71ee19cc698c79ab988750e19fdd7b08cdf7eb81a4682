{
    "generation": "/**\n * Creates a period from the given millisecond duration with the standard period type\n * and ISO rules, ensuring that the calculation is performed with the time-only period type.\n * <p>\n * The calculation uses the hour, minute, second and millisecond fields.\n *\n * @param duration  the duration, in milliseconds\n */\nprotected BasePeriod(long duration) {\n    long remainder = duration;\n    // compute hours\n    int hours = FieldUtils.safeToInt(remainder / DateTimeConstants.MILLIS_PER_HOUR);\n    remainder -= (long) hours * DateTimeConstants.MILLIS_PER_HOUR;\n    // compute minutes\n    int minutes = FieldUtils.safeToInt(remainder / DateTimeConstants.MILLIS_PER_MINUTE);\n    remainder -= (long) minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n    // compute seconds\n    int seconds = FieldUtils.safeToInt(remainder / DateTimeConstants.MILLIS_PER_SECOND);\n    remainder -= (long) seconds * DateTimeConstants.MILLIS_PER_SECOND;\n    // remaining milliseconds\n    int millis = FieldUtils.safeToInt(remainder);\n    // values array is {years, months, weeks, days, hours, minutes, seconds, millis}\n    this(new int[] {0, 0, 0, 0, hours, minutes, seconds, millis}, PeriodType.standard());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}