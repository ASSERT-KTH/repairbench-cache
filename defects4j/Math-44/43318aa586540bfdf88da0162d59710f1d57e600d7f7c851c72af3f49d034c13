{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n            resetOccurred = false;\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                 // Check if the evaluation interval is valid before calling evaluateStep.\n                 // The error \"going backward in time\" occurs inside evaluateStep if t0 > t1 in forward\n                 // integration, or t0 < t1 in backward integration. This check aims to prevent such calls.\n                 final boolean isForward = interpolator.isForward();\n                 final double evalEndTime = interpolator.getCurrentTime(); // This is currentT for this call\n\n                 // state.t0 represents the time at the beginning of the interval being evaluated.\n                 // It should be before evalEndTime in forward integration and after in backward integration.\n                 boolean evaluate = true;\n                 if (isForward) {\n                     if (state.t0 > evalEndTime) {\n                         // This condition implies state.t0 > currentT which should not happen if state.t0\n                         // comes from the previous step end time (<= previousT) and previousT < currentT.\n                         // Log or handle this inconsistency if necessary. For now, skip evaluation.\n                         evaluate = false;\n                     }\n                 } else { // Backward integration\n                     if (state.t0 < evalEndTime) {\n                         // Similar inconsistency for backward integration.\n                         evaluate = false;\n                     }\n                 }\n\n                 if (evaluate && state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // trigger the event\n                interpolator.setInterpolatedTime(eventT);\n                //\u514b\u9686eventY\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u5728reset\u4e2d\u88ab\u4fee\u6539\n                final double[] eventY = interpolator.getInterpolatedState().clone();\n                currentEvent.stepAccepted(eventT, eventY);\n                isLastStep = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (isLastStep) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    return eventT;\n                }\n\n                if (currentEvent.reset(eventT, eventY)) {\n                    // some event handler has triggered changes that\n                    // invalidate the derivatives, we need to recompute them\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    computeDerivatives(eventT, y, yDot);\n                    resetOccurred = true;\n                    return eventT;\n                }\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT);\n\n                // check if the same event occurs again in the remaining part of the step\n                // No need for the extra interval check here, as t0 was just set to eventT\n                // and the interval end is currentT, satisfying t0 <= t1 (forward).\n                if (currentEvent.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(currentEvent);\n                }\n\n            }\n\n            // Last part of the step, after all events are handled (if any)\n            interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n            // handle the remaining part of the step, after all events if any\n            // Ensure interpolator interval is set correctly for the final segment.\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(currentT);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            return currentT;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}