{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MathIllegalStateException {\n\n    // save the full interpolation bounds so we can restore them before any return\n    final double globalPreviousTime = interpolator.getGlobalPreviousTime();\n    final double globalCurrentTime  = interpolator.getGlobalCurrentTime();\n\n    double previousT = globalPreviousTime;\n    final double currentT = globalCurrentTime;\n    resetOccurred = false;\n\n    // initialize the events states if needed\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n\n    for (EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            occuringEvents.add(state);\n        }\n    }\n\n    // process all events in chronological order\n    while (!occuringEvents.isEmpty()) {\n\n        // pick the earliest event\n        Iterator<EventState> iterator = occuringEvents.iterator();\n        EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        final double eventT = currentEvent.getEventTime();\n        // restrict interpolation to [previousT, eventT]\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // interpolate at the event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState();\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // let the step handlers handle this sub-step\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            // event requested stop\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            // restore full interpolation bounds\n            interpolator.setSoftPreviousTime(globalPreviousTime);\n            interpolator.setSoftCurrentTime(globalCurrentTime);\n            return eventT;\n        }\n\n        if (currentEvent.reset(eventT, eventY)) {\n            // event requested a state reset\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            // restore full interpolation bounds\n            interpolator.setSoftPreviousTime(globalPreviousTime);\n            interpolator.setSoftCurrentTime(globalCurrentTime);\n            return eventT;\n        }\n\n        // prepare for the remainder of the step\n        previousT = eventT;\n        interpolator.setSoftPreviousTime(eventT);\n        interpolator.setSoftCurrentTime(currentT);\n\n        // check if this same event fires again in the remainder\n        if (currentEvent.evaluateStep(interpolator)) {\n            occuringEvents.add(currentEvent);\n        }\n\n    }\n\n    // no more events, finish the step on [previousT, currentT]\n    interpolator.setSoftPreviousTime(previousT);\n    interpolator.setSoftCurrentTime(currentT);\n\n    interpolator.setInterpolatedTime(currentT);\n    final double[] currentY = interpolator.getInterpolatedState();\n    for (EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        isLastStep = isLastStep || state.stop();\n    }\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    // let the step handlers handle this final sub-step\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n\n    // restore full interpolation bounds before returning\n    interpolator.setSoftPreviousTime(globalPreviousTime);\n    interpolator.setSoftCurrentTime(globalCurrentTime);\n\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}