{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MathIllegalStateException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n    resetOccurred = false;\n\n    // initialize the events states if needed\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n\n    while (true) {\n        SortedSet<EventState> occuringEvents =\n                new TreeSet<EventState>(new Comparator<EventState>() {\n                    public int compare(EventState es0, EventState es1) {\n                        return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                    }\n                });\n\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                occuringEvents.add(state);\n            }\n        }\n\n        if (occuringEvents.isEmpty()) {\n            // no more events during this step\n            break;\n        }\n\n        // Handle the earliest event:\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        final double eventT = currentEvent.getEventTime();\n\n        // Restrict the interpolator to [previousT, eventT]\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // Locate state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState();\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // inform step handlers of the step up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            // integration stops at event\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            return eventT;\n        }\n\n        if (currentEvent.reset(eventT, eventY)) {\n            // derivatives reset needed at event\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            return eventT;\n        }\n\n        // update for remaining interval\n        previousT = eventT;\n\n        // prepare the interpolator to [eventT, currentT]\n        interpolator.setSoftPreviousTime(eventT);\n        interpolator.setSoftCurrentTime(currentT);\n        // loop will evaluate new events in this remaining interval\n    }\n\n    // No more events, accept whole remaining step\n    interpolator.setInterpolatedTime(currentT);\n    final double[] currentY = interpolator.getInterpolatedState();\n    for (final EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        isLastStep = isLastStep || state.stop();\n    }\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    for (final StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}