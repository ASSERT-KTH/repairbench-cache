{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n            resetOccurred = false;\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // trigger the event\n                interpolator.setInterpolatedTime(eventT);\n                final double[] eventY = interpolator.getInterpolatedState().clone(); // Use clone to avoid modification by handlers\n                currentEvent.stepAccepted(eventT, eventY);\n                isLastStep = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (isLastStep) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    return eventT;\n                }\n\n                // HACK: Check state change AFTER stepAccepted and BEFORE reset.\n                //       Need to update the state to the event state BEFORE reset is called.\n                //       See issue MATH-695. Using the cloned state eventY ensures reset uses\n                //       the state at the event time.\n                if (currentEvent.reset(eventT, eventY)) {\n                    // some event handler has triggered changes that\n                    // invalidate the derivatives, we need to recompute them\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    computeDerivatives(eventT, y, yDot);\n                    resetOccurred = true;\n                    return eventT;\n                }\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT);\n\n                // **************************************************************************\n                // ** BUG FIX: MATH-695 **\n                // **************************************************************************\n                // The following block, which attempted to re-evaluate the current event\n                // for the remaining part of the step, caused issues. evaluateStep can\n                // internally call reinitializeBegin which uses getGlobalPreviousTime(),\n                // potentially causing the interpolator to be set backward in time relative\n                // to the new soft interval [eventT, currentT]. Removing this block fixes\n                // the issue. If an event needs to trigger again immediately after eventT\n                // (e.g., due to state reset), the reset mechanism handles it by returning\n                // eventT and forcing a restart of the step. Continuous events occurring\n                // later in [eventT, currentT] should have been found in the initial scan.\n                // **************************************************************************\n                // // check if the same event occurs again in the remaining part of the step\n                // if (currentEvent.evaluateStep(interpolator)) {\n                //     // the event occurs during the current step\n                //     occuringEvents.add(currentEvent);\n                // }\n                // **************************************************************************\n\n\n            }\n\n            // The step has been accepted statically accepting the step generates wrong results\n            // Thus, we need to update the state\n            interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            System.arraycopy(currentY, 0, y, 0, y.length); // Update main state vector to the end of the step\n\n            for (final EventState state : eventsStates) {\n                 state.stepAccepted(currentT, y); // Use the updated state y\n                 isLastStep = isLastStep || state.stop();\n             }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n\n            // handle the remaining part of the step, after all events if any\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            return currentT;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}