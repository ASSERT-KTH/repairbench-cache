{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MathIllegalStateException {\n\n        double previousT = interpolator.getGlobalPreviousTime();\n        final double currentT = interpolator.getGlobalCurrentTime();\n        resetOccurred = false;\n\n        // initialize the events states if needed\n        if (!statesInitialized) {\n            for (EventState state : eventsStates) {\n                state.reinitializeBegin(interpolator);\n            }\n            statesInitialized = true;\n        }\n\n        // Determine the integration direction\n        final boolean forward = interpolator.isForward();\n\n        // search for next events that may occur during the step\n        SortedSet<EventState> occurringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n            public int compare(EventState es0, EventState es1) {\n                return Double.compare(forward ? es0.getEventTime() : es1.getEventTime(),\n                                     forward ? es1.getEventTime() : es0.getEventTime());\n            }\n\n        });\n\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                occurringEvents.add(state);\n            }\n        }\n\n        while (!occurringEvents.isEmpty()) {\n\n            final Iterator<EventState> iterator = occurringEvents.iterator();\n            final EventState currentEvent = iterator.next();\n            iterator.remove();\n\n            final double eventT = currentEvent.getEventTime();\n            if ((forward && eventT < previousT) || (!forward && eventT > previousT)) {\n                continue;\n            }\n\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(eventT);\n\n            interpolator.setInterpolatedTime(eventT);\n            final double[] eventY = interpolator.getInterpolatedState();\n            currentEvent.stepAccepted(eventT, eventY);\n            isLastStep = currentEvent.stop();\n\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            if (isLastStep) {\n                System.arraycopy(eventY, 0, y, 0, y.length);\n                return eventT;\n            }\n\n            if (currentEvent.reset(eventT, eventY)) {\n                System.arraycopy(eventY, 0, y, 0, y.length);\n                computeDerivatives(eventT, y, yDot);\n                resetOccurred = true;\n                interpolator.setInterpolatedTime(eventT);\n                return eventT;\n            }\n\n            previousT = eventT;\n\n            if (currentEvent.evaluateStep(interpolator)) {\n                occurringEvents.add(currentEvent);\n            }\n\n        }\n\n        interpolator.setInterpolatedTime(currentT);\n        final double[] currentY = interpolator.getInterpolatedState();\n        for (final EventState state : eventsStates) {\n            state.stepAccepted(currentT, currentY);\n            isLastStep = isLastStep || state.stop();\n        }\n        isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}