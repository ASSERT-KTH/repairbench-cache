{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n            resetOccurred = false;\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    // handle NaN event times correctly\n                    int sign = Double.isNaN(es0.getEventTime()) ? (Double.isNaN(es1.getEventTime()) ? 0 : +1) : (Double.isNaN(es1.getEventTime()) ? -1 : orderingSign);\n                    return sign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // trigger the event\n                interpolator.setInterpolatedTime(eventT);\n                // create copy of state vector for event handler evaluation\n                final double[] eventY = interpolator.getInterpolatedState().clone();\n                currentEvent.stepAccepted(eventT, eventY);\n                isLastStep = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (isLastStep) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    return eventT;\n                }\n\n                if (currentEvent.reset(eventT, eventY)) {\n                    // some event handler has triggered changes that\n                    // invalidate the derivatives, we need to recompute them\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    computeDerivatives(eventT, y, yDot);\n                    resetOccurred = true;\n                    return eventT;\n                }\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                // Prevent re-evaluation of the same event for the remaining part of the step.\n                // This was identified as a source of bugs (MATH-695).\n                // The original code had logic here to re-evaluate currentEvent and potentially\n                // add it back to occuringEvents, which is removed in this fix.\n\n            } // End while loop\n\n            // No event required stop or reset during the main part of the step.\n            // Finalize the step P[previousT, currentT]\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(currentT);\n            interpolator.setInterpolatedTime(currentT); // Set time to the end of the step\n\n            // Get state at the end of the step, considering all event effects handled so far.\n            // Need to use the state from the interpolator at final time.\n            final double[] currentY = interpolator.getInterpolatedState().clone();\n            // Notify all events that the step is accepted.\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY); // May set isLastStep for the next step check\n                isLastStep = isLastStep || state.stop(); // Check if any event requests stop now\n            }\n            // Final check if the end time is reached.\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n            // handle the full step for step handlers that require it\n            // Ensure the interpolator covers the full range intended by the step handlers.\n            interpolator.setSoftPreviousTime(interpolator.getGlobalPreviousTime());\n            interpolator.setSoftCurrentTime(interpolator.getGlobalCurrentTime());\n            interpolator.setInterpolatedTime(interpolator.getGlobalCurrentTime()); // Set time to end again just in case\n\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            return currentT; // Return the accepted end time of the step.\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}