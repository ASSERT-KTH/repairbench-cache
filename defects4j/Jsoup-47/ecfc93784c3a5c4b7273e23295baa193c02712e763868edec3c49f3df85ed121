{
    "generation": "    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n\n        boolean lastWasWhite = false;\n        boolean reachedNonWhite = false;\n        final EscapeMode escapeMode = out.escapeMode();\n        final CharsetEncoder encoder = out.encoder();\n        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n        // Note: In the original code, the map lookup was slightly different for base/xhtml/extended.\n        // Assuming the correct map is retrieved by escapeMode.getMap() based on the context.\n        // For the specific fix, we only need to adjust the logic for '<' and '>'.\n        final Map<Character, String> map = escapeMode.getMap(); // Used for character reference lookups\n        final int length = string.length();\n\n        int codePoint;\n        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n            codePoint = string.codePointAt(offset);\n\n            if (normaliseWhite) {\n                if (StringUtil.isWhitespace(codePoint)) {\n                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                        continue;\n                    accum.append(' ');\n                    lastWasWhite = true;\n                    continue;\n                } else {\n                    lastWasWhite = false;\n                    reachedNonWhite = true;\n                }\n            }\n            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                final char c = (char) codePoint;\n                // html specific and required escapes:\n                switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0: // nbsp\n                        // In xhtml mode, always entity encode nbsp to &#xa0;\n                        // In base mode, entity encode nbsp to &nbsp;\n                        if (escapeMode != EscapeMode.xhtml)\n                            accum.append(\"&nbsp;\");\n                        else\n                            accum.append(\"&#xa0;\");\n                        break;\n                    case '<':\n                        // escape '<' in character data & xml/xhtml attribute values; not in html attribute values\n                        if (!inAttribute || escapeMode == EscapeMode.xhtml)\n                            accum.append(\"&lt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '>':\n                        // escape '>' in character data & xml/xhtml attribute values; not in html attribute values\n                        if (!inAttribute || escapeMode == EscapeMode.xhtml)\n                            accum.append(\"&gt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '\"':\n                        // escape '\"' in attribute values\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        // check encoder can handle character directly, otherwise use constitutional entity\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else if (map.containsKey(c)) // Check if it has a named entity\n                            accum.append('&').append(map.get(c)).append(';');\n                        else // Fallback to numeric entity\n                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }\n            } else {\n                // Supplementary character (outside BMP)\n                final String c = new String(Character.toChars(codePoint));\n                // Check encoder. uses fallback for simplicity (and because we always escape supplementary unless derivable)\n                if (encoder.canEncode(c))\n                    accum.append(c);\n                else // Use numeric entity for unencoded supplementary characters\n                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}