{
    "generation": "public JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException {\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n    //    now-deprecated secondary methods; this because while\n    //    direct sub-class not yet retrofitted may only override\n    //    those methods. With 2.8 or later we may consider removal\n    //    of these methods\n\n    // First: refine the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            // 30-Nov-2015, tatu: allow forcing of static typing this way\n            type = type.withStaticTyping();\n        } else {\n            final Class<?> currRaw = type.getRawClass();\n            try {\n                // Use the same approach as for container types:\n                // if the annotated type is a super-type, we \"widen\" (generalize);\n                // if it is a sub-type, we \"narrow\" (specialize)\n                if (serClass.isAssignableFrom(currRaw)) {\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (currRaw.isAssignableFrom(serClass)) {\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to refine type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                        iae);\n            }\n        }\n    }\n\n    // Process container types further\n\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) { // common case: widen\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    // Then process content types for container-like types (collections, arrays, references)\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass != null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   if (contentClass.isAssignableFrom(currRaw)) { // common: widen\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialize\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) { // shouldn't really happen\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                           iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}