{
    "generation": "public JavaType refineSerializationType(MapperConfig<?> config, Annotated a, JavaType baseType) throws JsonMappingException {\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.getRawClass().isAssignableFrom(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                type = tf.constructSpecializedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(\n                        null,\n                        String.format(\n                                \"Failed to construct specialized type %s with annotation (value %s): %s\",\n                                type, serClass.getName(), iae.getMessage()),\n                        iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.getRawClass().isAssignableFrom(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                try {\n                    if (keyClass.isAssignableFrom(keyType.getRawClass())) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (keyType.getRawClass().isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(\n                                null,\n                                String.format(\n                                        \"Cannot refine key type %s to %s: types are not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(\n                            null,\n                            String.format(\n                                    \"Failed to widen key type %s with annotation (value %s): %s\",\n                                    type, keyClass.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.getRawClass().isAssignableFrom(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                try {\n                    if (contentClass.isAssignableFrom(contentType.getRawClass())) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (contentType.getRawClass().isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(\n                                null,\n                                String.format(\n                                        \"Cannot refine content type %s to %s: types are not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(\n                            null,\n                            String.format(\n                                    \"Failed to widen content type %s with annotation (value %s): %s\",\n                                    type, contentClass.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}