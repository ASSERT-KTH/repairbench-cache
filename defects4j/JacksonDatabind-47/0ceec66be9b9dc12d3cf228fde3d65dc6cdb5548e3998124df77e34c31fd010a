{
    "generation": "    public JavaType refineSerializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n        \n        // Start by refining the main type itself\n        Class<?> serClass = findSerializationType(a);\n        if (serClass != null) {\n            if (type.hasRawClass(serClass)) {\n                type = type.withStaticTyping();\n            } else {\n                try {\n                    if (serClass.isAssignableFrom(type.getRawClass())) {\n                        type = tf.constructGeneralizedType(type, serClass);\n                    } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                        type = tf.constructSpecializedType(type, serClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization main type %s with %s; types not related\",\n                                        type, serClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine main serialization type %s with %s; %s\",\n                                    type, serClass.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n        }\n        \n        // Refine key type for Map-like types\n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            Class<?> keyClass = findSerializationKeyType(a, keyType);\n            if (keyClass != null) {\n                if (keyType.hasRawClass(keyClass)) {\n                    keyType = keyType.withStaticTyping();\n                } else {\n                    try {\n                        Class<?> currentRaw = keyType.getRawClass();\n                        if (keyClass.isAssignableFrom(currentRaw)) {\n                            keyType = tf.constructGeneralizedType(keyType, keyClass);\n                        } else if (currentRaw.isAssignableFrom(keyClass)) {\n                            keyType = tf.constructSpecializedType(keyType, keyClass);\n                        } else {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Can not refine key type %s with %s; types not related\",\n                                            keyType, keyClass.getName()));\n                        }\n                    } catch (IllegalArgumentException iae) {\n                        throw new JsonMappingException(null,\n                                String.format(\"Failed to refine key type %s with %s; %s\",\n                                        keyType, keyClass.getName(), iae.getMessage()),\n                                        iae);\n                    }\n                }\n                type = ((MapLikeType) type).withKeyType(keyType);\n            }\n        }\n        \n        // Refine content type for container types\n        JavaType contentType = type.getContentType();\n        if (contentType != null) {\n            Class<?> contentClass = findSerializationContentType(a, contentType);\n            if (contentClass != null) {\n                if (contentType.hasRawClass(contentClass)) {\n                    contentType = contentType.withStaticTyping();\n                } else {\n                    try {\n                        Class<?> currentRaw = contentType.getRawClass();\n                        if (contentClass.isAssignableFrom(currentRaw)) {\n                            contentType = tf.constructGeneralizedType(contentType, contentClass);\n                        } else if (currentRaw.isAssignableFrom(contentClass)) {\n                            contentType = tf.constructSpecializedType(contentType, contentClass);\n                        } else {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Can not refine content type %s with %s; types not related\",\n                                            contentType, contentClass.getName()));\n                        }\n                    } catch (IllegalArgumentException iae) {\n                        throw new JsonMappingException(null,\n                                String.format(\"Failed to refine content type %s with %s; %s\",\n                                        contentType, contentClass.getName(), iae.getMessage()),\n                                        iae);\n                    }\n                }\n                type = type.withContentType(contentType);\n            }\n        }\n        \n        return type;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}