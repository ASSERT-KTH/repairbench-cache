{
    "generation": "public JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    // Check for serialization type annotation\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            Class<?> currRaw = type.getRawClass();\n            try {\n                if (serClass.isAssignableFrom(currRaw)) {\n                    // Target is a superclass: generalize type\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (currRaw.isAssignableFrom(serClass)) {\n                    // Target is a subclass: specialize type\n                    type = tf.constructSpecializedType(type, serClass);\n                } else if (currRaw.equals(serClass)) {\n                    // Target is same as current: use same type but with updated info\n                    type = tf.constructType(serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Cannot widen type %s to %s, as they are not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                        iae);\n            }\n        }\n    }\n\n    // Process key types for Map-like objects\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        // Target is a superclass: generalize key type\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        // Target is a subclass: specialize key type\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else if (currRaw.equals(keyClass)) {\n                        // Use same type with updated info\n                        keyType = tf.constructType(keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Cannot refine key type %s to %s, as they are not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    // Process content type for container objects\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        // Target is a superclass: generalize content type\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        // Target is a subclass: specialize content type\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else if (currRaw.equals(contentClass)) {\n                        // Use same type with updated info\n                        contentType = tf.constructType(contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Cannot refine content type %s to %s, as they are not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: Failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}