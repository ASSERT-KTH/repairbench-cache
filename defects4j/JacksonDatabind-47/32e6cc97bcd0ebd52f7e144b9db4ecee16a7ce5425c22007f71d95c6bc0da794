{
    "generation": "public JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    // Refine main type\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        Class<?> rawClass = type.getRawClass();\n        if (rawClass != null && rawClass.equals(serClass)) {\n            type = type.withStaticTyping();\n        } else if (rawClass != null) {\n            try {\n                if (serClass.isAssignableFrom(rawClass)) {\n                    // Current raw is a subclass of serClass; generalize\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (rawClass.isAssignableFrom(serClass)) {\n                    // Current raw is a superclass of serClass; specialize\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to refine serialization type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        } else {\n            // No raw class to compare against, treat as opaque\n            try {\n                type = tf.constructGeneralizedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    // Refine key type for Maps\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            Class<?> currRaw = keyType.getRawClass();\n            if (currRaw == null || currRaw.equals(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                try {\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    // Refine content type for containers\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            Class<?> currRaw = contentType.getRawClass();\n            if (currRaw == null || currRaw.equals(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}