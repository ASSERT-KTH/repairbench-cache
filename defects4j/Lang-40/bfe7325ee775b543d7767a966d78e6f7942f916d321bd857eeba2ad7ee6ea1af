{
    "generation": "    /**\n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     */\n    public static boolean containsIgnoreCase(String str, String searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        // An empty search string is considered to be contained in any (non-null) string.\n        if (searchStr.length() == 0) {\n            return true;\n        }\n\n        final int length = str.length();\n        final int searchLength = searchStr.length();\n\n        // If the search string is longer than the string to search within, it cannot be contained.\n        if (searchLength > length) {\n            return false;\n        }\n\n        // Iterate through all possible starting positions in 'str'.\n        // For each position, check if the substring of 'str' (of length searchLength)\n        // matches 'searchStr' case-insensitively using String.regionMatches.\n        // The 'ignoreCase' parameter of regionMatches uses the same logic as\n        // String.equalsIgnoreCase, providing locale-independent case comparison\n        // without the issues of full string uppercasing/lowercasing.\n        for (int i = 0; i <= length - searchLength; i++) {\n            if (str.regionMatches(true, i, searchStr, 0, searchLength)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}