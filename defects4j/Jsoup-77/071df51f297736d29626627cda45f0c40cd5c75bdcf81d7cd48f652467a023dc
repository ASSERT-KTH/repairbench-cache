{
    "generation": "import org.jsoup.nodes.Element;\nimport org.jsoup.parser.Token;\nimport java.util.ArrayList; // Assuming stack is an ArrayList or similar List\n// Import other necessary classes like ParseSettings if needed, though it should be a field in the containing class (TreeBuilder)\n\n    /**\n     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not\n     * found, skips.\n     *\n     * @param endTag tag to close\n     */\n    private void popStackToClose(Token.EndTag endTag) {\n        // Use the ParseSettings to normalize the tag name for comparison, ensuring it matches the normalized element names\n        String elName = settings.normalizeTag(endTag.name());\n        Element firstFound = null;\n\n        // Find the first element matching the normalized tag name, searching backwards.\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                firstFound = next;\n                break;\n            }\n        }\n        if (firstFound == null)\n            return; // not found, skip\n\n        // Pop the stack elements from the end, until and including the matched element.\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos);\n            // Check instance equality to ensure we stop after removing the specific element found earlier.\n            if (next == firstFound)\n                break;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}