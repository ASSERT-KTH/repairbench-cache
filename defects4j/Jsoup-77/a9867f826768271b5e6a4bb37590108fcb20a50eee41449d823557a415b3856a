{
    "generation": "    /**\n     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not\n     * found, skips.\n     *\n     * @param endTag tag to close\n     */\n    private void popStackToClose(Token.EndTag endTag) {\n        // In HTML, tag names are case-insensitive. The `nodeName()` of an Element is\n        // typically normalized (e.g., to lowercase for HTML). The `endTag.name()`\n        // comes directly from the input and may have a different casing (e.g., \"DIV\" for <div>).\n        // For a correct comparison, we should normalize the end tag name to lowercase.\n        String elNameLower = endTag.name().toLowerCase();\n        Element firstFound = null;\n\n        // Find the first occurrence of the element to be closed, scanning from the top of the stack downwards.\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            // Compare the normalized node name of the element on the stack with the normalized end tag name.\n            if (next.nodeName().equals(elNameLower)) {\n                firstFound = next;\n                break;\n            }\n        }\n        if (firstFound == null)\n            return; // not found, skip\n\n        // Pop elements from the stack until the `firstFound` element is reached (inclusive).\n        // This ensures all elements above the target closing tag are also removed (e.g., implicitly closed).\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos);\n            if (next == firstFound)\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}