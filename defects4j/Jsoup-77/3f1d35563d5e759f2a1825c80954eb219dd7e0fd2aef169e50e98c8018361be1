{
    "generation": "    /**\n     * If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not\n     * found, skips.\n     *\n     * @param endTag tag to close\n     */\n    private void popStackToClose(Token.EndTag endTag) {\n        String elName = endTag.name(); // Use the name from the token (should be normalized by Tokeniser)\n        Element firstFound = null;\n\n        // Find the first matching element by looping downwards from the stack top.\n        // Use case-insensitive comparison to be robust, particularly if combining XML parser\n        // with HTML settings (like ParseSettings.htmlDefault which normalizes to lowercase).\n        // This handles cases where the start tag case might differ from the end tag case\n        // despite normalization attempts upstream.\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            if (next.nodeName().equalsIgnoreCase(elName)) {\n                firstFound = next;\n                break;\n            }\n        }\n\n        if (firstFound == null)\n            return; // not found, skip\n\n        // Pop elements from stack top down until the firstFound element is removed.\n        // Loop downwards from the current top of the stack.\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos);\n            // Stop popping when the specific element instance found earlier is removed.\n            if (next == firstFound)\n                break;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}