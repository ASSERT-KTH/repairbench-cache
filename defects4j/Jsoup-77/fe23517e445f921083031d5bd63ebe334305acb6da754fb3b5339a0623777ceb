{
    "generation": "private void popStackToClose(Token.EndTag endTag) {\n    String elName = endTag.name();\n    int targetIdx = -1;\n    // Find the closest element in the stack whose tag name matches endTag.\n    for (int i = stack.size() - 1; i >= 0; i--) {\n        Element el = stack.get(i);\n        if (el.nodeName().equals(elName)) {\n            targetIdx = i;\n            break;\n        }\n    }\n    if (targetIdx == -1)\n        return; // Not found, nothing to do\n\n    // Identify the target element (the one to be closed)\n    Element target = stack.get(targetIdx);\n\n    // Collect any elements that were opened after the target \u2014 these are mis\u2010nested.\n    // They will be re\u2010parented (moved out of the target\u2019s children) so that they end up as siblings.\n    List<Element> misnested = new ArrayList<>();\n    // Note: the target itself is at index targetIdx. Everything above that is mis\u2010nested.\n    for (int i = targetIdx + 1; i < stack.size(); i++) {\n        misnested.add(stack.get(i));\n    }\n    // Remove the misnested elements from the stack.\n    for (int i = stack.size() - 1; i > targetIdx; i--) {\n        stack.remove(i);\n    }\n    // Now remove the target element itself (its closing tag is being handled).\n    stack.remove(targetIdx);\n\n    // Reparent misnested elements: if the target had a parent,\n    // then extract any misnested element that had been appended to target and move it to target\u2019s parent.\n    if (target.parent() != null) {\n        for (Element node : misnested) {\n            // Often a misnested node will have been inserted as a child of the element below it,\n            // which will be the target; if so, we remove it and re-append to target\u2019s parent.\n            if (node.parent() == target) {\n                node.remove(); // detach from the wrong parent\n                target.parent().appendChild(node); // append as a sibling following target\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}