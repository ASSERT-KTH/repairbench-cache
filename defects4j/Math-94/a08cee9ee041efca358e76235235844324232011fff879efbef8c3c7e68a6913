{
    "generation": "public static int gcd(int u, int v) {\n    if (u * v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // make u and v positive to avoid overflow issues with Integer.MIN_VALUE\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    // B1. Find power of 2\n    int k = 0;\n    while (((u | v) & 1) == 0 && k < 31) {\n        u >>= 1;\n        v >>= 1;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // Divide u by 2 until u is odd\n    while ((u & 1) == 0) {\n        u >>= 1;\n    }\n    // From here on, u is always odd\n    do {\n        // remove all factors of 2 in v -- v might become zero\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n        // Now u and v are both odd. Swap if necessary so u <= v, then set v = v - u (which is even)\n        if (u > v) {\n            int t = v;\n            v = u;\n            u = t;\n        }\n        v = v - u;\n    } while (v != 0);\n\n    return u << k;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}