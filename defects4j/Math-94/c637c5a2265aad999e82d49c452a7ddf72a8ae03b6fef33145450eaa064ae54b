{
    "generation": "public static int gcd(int u, int v) {\n    // Avoid overflow and also handle 0 properly.\n    if (u == 0 || v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // Work entirely in the negative domain to handle MIN_VALUE safely.\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    int k = 0;\n    // Remove common factors of 2 using arithmetic right\u2010shift.\n    while (((u & 1) == 0) && ((v & 1) == 0) && (k < 31)) {\n        u >>= 1;\n        v >>= 1;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // (Algorithm B, Knuth 4.5.2)\n    // Initialize t. Note: if u is odd then (u & 1) != 0, so set t = v;\n    // otherwise (u is even) set t = -(u/2). Using >> for division by 2 is exact\n    // because u is known to be even.\n    int t = ((u & 1) != 0) ? v : -(u >> 1);\n    do {\n        // Remove any factors of 2 in t.\n        while ((t & 1) == 0) {\n            t >>= 1;\n        }\n        // Update one of the two numbers.\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        // Set t to be half the difference.\n        t = (v - u) >> 1;\n    } while (t != 0);\n    // Reintroduce the common power of 2.\n    return -u << k;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}