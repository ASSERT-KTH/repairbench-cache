{
    "generation": "public static int gcd(int u, int v) {\n    if (u * v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // keep u and v negative, as negative integers range down to -2^31\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    // B1: Find power of 2 factor common to both\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2: At least one of u, v is odd\n    int t;\n    do {\n        // remove factors of 2 in u\n        while ((u & 1) == 0) {\n            u /= 2;\n        }\n        // remove factors of 2 in v\n        while ((v & 1) == 0) {\n            v /= 2;\n        }\n        // Both u, v odd: swap if necessary so u <= v, then set v := v - u\n        if (u > v) {\n            int tmp = u;\n            u = v;\n            v = tmp;\n        }\n        t = v - u;\n        v = t;\n    } while (t != 0);\n    return -u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}