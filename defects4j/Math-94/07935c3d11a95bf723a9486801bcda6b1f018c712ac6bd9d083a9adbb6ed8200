{
    "generation": "public static int gcd(int u, int v) {\n    // FIX: Instead of testing u*v==0 (which can overflow), test each one individually.\n    if (u == 0 || v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // keep u and v negative, as negative integers range down to -2^31,\n    // while positive numbers can only be as large as 2^31-1\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while both u and v are even...\n        u /= 2;\n        v /= 2;\n        k++; // cast out twos.\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    // B3. Loop until t becomes 0.\n    do {\n        while ((t & 1) == 0) { // cast out twos from t\n            t /= 2;\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    // Result is -u multiplied by 2^k (u is maintained as negative)\n    return -u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}