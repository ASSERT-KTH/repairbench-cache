{
    "generation": "public static int gcd(int u, int v) {\n    if (u * v == 0) {\n        return (Math.abs(u) + Math.abs(v));\n    }\n    // Keep u and v negative to avoid overflow (since Integer.MIN_VALUE cannot be negated)\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    // B1. Find the greatest common power of 2 dividing both u and v.\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    // After the above loop at least one of u or v is odd.\n    // Ensure that u is odd by dividing by 2 as needed.\n    while ((u & 1) == 0) {\n        u /= 2;\n    }\n    // B2. Initialize: u and v have been divided by 2^k and now u is odd.\n    // The original algorithm uses a clever trick: if u is odd then t is set to v,\n    // otherwise (if u were even) t would be set to \u2013(u/2). Now u is odd so:\n    int t = v;  // (equivalent to: ((u & 1) == 1) ? v : -(u / 2))\n    \n    // B3. Main loop: repeatedly cast out factors of 2 from t and adjust u and v.\n    do {\n        // Remove any factors of 2 from t.\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        // Depending on the sign of t, update one of the two numbers.\n        if (t > 0) {\n            u = -t;  // u remains negative, and |u| = t\n        } else {\n            v = t;\n        }\n        // At this point both u and v are odd.\n        t = (v - u) / 2;\n    } while (t != 0);\n    \n    // The GCD is -u (which is positive) times the common power of 2 we factored out.\n    return -u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}