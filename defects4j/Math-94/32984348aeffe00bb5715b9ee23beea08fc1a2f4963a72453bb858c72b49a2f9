{
    "generation": "public static int gcd(int u, int v) {\n    // Handle zero cases\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // Ensure u and v are negative\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    // B1. [Find power of 2]\n    int k = 0;\n    while (((u | v) & 1) == 0) { // while both u and v are even\n        u >>= 1;\n        v >>= 1;\n        k++;\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    while (u != v) {\n        // Ensure u is the smaller one\n        if (u > v) {\n            int temp = u;\n            u = v;\n            v = temp;\n        }\n\n        // B3: cast out twos from v\n        v -= u;\n        // B4: cast out twos from v\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n    }\n\n    return u << k; // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}