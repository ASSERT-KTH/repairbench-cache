{
    "generation": "public static int gcd(int u, int v) {\n    // Use explicit equality tests to avoid overflow in multiplication.\n    if (u == 0 || v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // Keep u and v negative \u2013 note that Integer.MIN_VALUE is handled correctly.\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    // B1. Extract common factors of 2.\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B3. Initialize t: if u is odd then use v, else use -(u/2)\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        // B4. Remove all factors of 2 in t.\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        // B5. Reset u or v:\n        // If t is positive then set u = -t (t will replace v next)\n        // If t is negative then set v = t (t will replace u next)\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        // B6. Set t for next iteration.\n        t = (v - u) / 2;\n    } while (t != 0);\n    // Restore common factors of 2.\n    return -u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}