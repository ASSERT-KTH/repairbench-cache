{
    "generation": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        // Check for non-zero inputs: the algorithm below relies on u!=0 and v!=0.\n        // However, gcd(a, 0) = |a|, gcd(0, b) = |b|, gcd(0, 0) = 0.\n        // Handle these cases explicitly. Check for u == 0 || v == 0 instead of u * v == 0 \n        // to avoid integer overflow with large inputs which could incorrectly evaluate to 0.\n        if (u == 0 || v == 0) {\n            // Math.abs(Integer.MIN_VALUE) returns Integer.MIN_VALUE - Handle this potential issue.\n            // If one number is 0 and the other is Integer.MIN_VALUE, the GCD is 2^31, which cannot be represented as a positive int.\n            // The addition |u| + |v| correctly returns Integer.MIN_VALUE in this case,\n            // which is the behavior expected from Math.abs and consistent with the tests.\n            return (Math.abs(u) + Math.abs(v));\n        }\n        \n        // From here on, u != 0 and v != 0\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            // This condition implies the gcd is 2^31, which is too large for a positive int.\n            // It occurs only if u = Integer.MIN_VALUE and v = Integer.MIN_VALUE.\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */ // This holds as u and v are updated with negative values\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            // After halving, t is odd. Assign it (negated if needed to keep u/v negative) to the correct variable (u or v).\n            if (t > 0) { // t is positive implies initial u was even, replace u.\n                u = -t;  // u remains negative.\n            } else { // t is negative implies initial u was odd, replace v.\n                v = t;   // v remains negative.\n            }\n            // B6/B3. at this point both u and v should be odd and negative.\n            // Calculate the difference for the next iteration.\n            t = (v - u) / 2;\n            // This division is safe because v and u are both odd, so v-u is even.\n        } while (t != 0);\n        // The loop terminates when u == v (and both are negative and odd).\n        // The gcd's odd part is |u| = |v| = -u.\n        // Restore the power of 2. The final result is -u * 2^k.\n        // The multiplication -u * (1 << k) will not overflow if the gcd is representable as a positive int,\n        // as the k=31 case handles the only unrepresentable possibility (2^31).\n        return -u * (1 << k); \n    }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}