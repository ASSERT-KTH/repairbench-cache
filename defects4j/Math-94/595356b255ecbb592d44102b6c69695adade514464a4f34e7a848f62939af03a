{
    "generation": "public static int gcd(int u, int v) {\n    // avoid overflow from u*v; test for zero arguments directly\n    if (u == 0 || v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // keep u and v negative, since negating Integer.MIN_VALUE would overflow\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    // B1: remove common factors of 2\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2/B3: initialize t\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    // B4\u2013B6: Stein's loop\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    // restore the common factors of 2\n    return -u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}