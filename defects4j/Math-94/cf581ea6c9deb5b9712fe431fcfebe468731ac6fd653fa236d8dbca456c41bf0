{
    "generation": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        // Original code had `if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); }`\n        // This check has two potential issues:\n        // 1. `u * v` can overflow if u and v are large non-zero numbers. While a non-zero product\n        //    would not typically become 0 due to overflow, it's safer to check for u==0 or v==0 explicitly.\n        // 2. `Math.abs(Integer.MIN_VALUE)` overflows, returning Integer.MIN_VALUE itself.\n        //    Since GCD must be positive, this needs special handling for cases like gcd(MIN_VALUE, 0).\n\n        // Handle cases where one or both numbers are 0.\n        // gcd(0, 0) is 0 according to the test case `assertEquals(0, MathUtils.gcd(0, 0))`.\n        // gcd(x, 0) or gcd(0, x) is abs(x).\n        // For Integer.MIN_VALUE, gcd(MIN_VALUE, 0) is 2^31, which overflows `int`.\n        // This is consistent with the `ArithmeticException` thrown later for `2^31`.\n        if (u == 0) {\n            if (v == 0) {\n                return 0; // gcd(0,0) is 0\n            }\n            if (v == Integer.MIN_VALUE) { // gcd(0, MIN_VALUE) = 2^31, which overflows int\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(v); // gcd(0, v) = abs(v)\n        } else if (v == 0) {\n            if (u == Integer.MIN_VALUE) { // gcd(MIN_VALUE, 0) = 2^31, which overflows int\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(u); // gcd(u, 0) = abs(u)\n        }\n\n        // The rest of the function handles u != 0 and v != 0.\n        // It keeps u and v negative to avoid overflow when negating Integer.MIN_VALUE.\n        // (i.e., we can't necessarily negate a negative number without overflow)\n        \n        /* assert u!=0 && v!=0; */ // This assertion is now guaranteed by the checks above.\n        if (u > 0) {\n            u = -u; // make u negative\n        }\n        if (v > 0) {\n            v = -v; // make v negative\n        }\n\n        // B1. [Find power of 2]\n        int k = 0;\n        // while u and v are both even...\n        // The condition `k < 31` prevents `1 << k` from overflowing `int` in the final return.\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { \n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            // gcd is 2^31. This would overflow if returned as int (as `abs(Integer.MIN_VALUE)`).\n            // So, throw an exception.\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n        // The value 't' is a temporary variable used to store the difference between the two numbers\n        // or half of one of them, ensuring one of the numbers becomes odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // If u was odd, t is set to v (t remains negative if v is negative).\n        // If u was even, t is set to -(u/2) (t becomes positive, corresponding to abs(u)/2).\n\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even...\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            // Knuth's algorithm has `t>0 => u_1 = t`, `t<0 => v_1 = -t`.\n            // Here, u and v are maintained as negative numbers.\n            if (t > 0) {\n                u = -t; // If t is positive (corresponds to abs(u)/2), u becomes its negative.\n            } else {\n                v = t; // If t is negative (corresponds to abs(v)), v takes its value.\n            }\n            // B6/B3. At this point both u and v should be odd (in magnitude).\n            // Calculate the new t, which is half the difference of the magnitudes of u and v.\n            // The sign of t indicates which number (u or v) has the larger magnitude.\n            t = (v - u) / 2;\n            // If |u| was larger, (v - u) will be positive, so t will be positive (replace u).\n            // If |v| was larger, (v - u) will be negative, so t will be negative (replace v).\n        } while (t != 0);\n\n        // The GCD is -u (which is abs(u)) multiplied by 2^k (the common factor of 2s removed earlier).\n        return -u * (1 << k); \n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}