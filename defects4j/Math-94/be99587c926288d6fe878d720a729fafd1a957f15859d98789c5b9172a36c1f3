{
    "generation": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @throws ArithmeticException if the gcd is 2^31, which cannot be represented as a positive int\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        // Check for zero inputs, handling potential overflow with Integer.MIN_VALUE\n        if (u == 0 || v == 0) {\n            // Ensure that the result fits in a positive int. If one argument is MIN_VALUE,\n            // the absolute value is 2^31, which is representable as MIN_VALUE only.\n            // The gcd(MIN_VALUE, 0) or gcd(0, MIN_VALUE) is 2^31.\n            // gcd(MIN_VALUE, MIN_VALUE) is also 2^31. Throw overflow exception for these cases.\n            if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n                 throw new ArithmeticException(\"overflow: gcd is 2^31\");\n             }\n             // If neither argument is MIN_VALUE, the sum of absolute values is correct.\n             // Math.abs(MIN_VALUE) returns MIN_VALUE, but this case is handled above.\n            return (Math.abs(u) + Math.abs(v));\n        }\n        \n        // Keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        // Make u and v negative, if they are positive\n        // Also check for MIN_VALUE which cannot be safely negated\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        \n        // B1. [Find power of 2]\n        int k = 0;\n        // While u and v are both even...\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { \n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        // If k reached 31, it means the gcd is >= 2^31 which overflows int\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        \n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        // Use the formula t = -(u / 2) if u is even, t = v if u is odd.\n        // Knuth's original algorithm uses t = u if u is even, t = -v if u is odd.\n        // This variation using negative numbers handles MIN_VALUE correctly.\n        int t = ((u & 1) == 1) ? v : -(u / 2);\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        \n        do {\n            /* assert u<0 && v<0; */ // u and v should remain negative\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            \n            // B5 [reset max(u,v)]\n            // Knuth: if t > 0 then u = t else v = -t\n            // With negative u,v: if t > 0 then u = -t else v = t\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            \n            // B6/B3. at this point both u and v should be odd.\n            // Calculate difference: t = (v - u) / 2\n            // Knuth: t = u - v. Here (v-u)/2 = (-V - (-U))/2 = (U - V)/2\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0); // Loop until t is zero (i.e., u == v)\n        \n        // gcd is |u| * 2^k. Since u is negative, |u| = -u.\n        // The result must fit in int, checked indirectly by k < 31 check.\n        return -u * (1 << k); \n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}