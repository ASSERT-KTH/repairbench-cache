{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * \n * @param u a non-zero number\n * @param v a non-zero number\n * @return the greatest common divisor, never zero\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    // Fix: Check each parameter against zero instead of multiplying (which may overflow)\n    if (u == 0 || v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // keep u and v negative, as negative integers range down to -2^31, while positive\n    // numbers can only be up to 2^31-1\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while both are even...\n        u /= 2;\n        v /= 2;\n        k++; // cast out common factors of 2.\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize:  at least one of u or v is now odd.\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    // B3. Main loop: repeatedly cast out factors of 2 and subtract.\n    do {\n        while ((t & 1) == 0) { // while t is even...\n            t /= 2;         // cast out factors of 2\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    return -u * (1 << k); // gcd is (-u) * 2^k\n}",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}