{
    "generation": "public static int gcd(int u, int v) {\n    if (u * v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // keep u and v negative to avoid overflow\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n\n    // bug was here: original code computed -u * (1 << k), but if k is large, left shift before multiplication overflows int.\n    // fix: compute -(u) first, then multiply by (1 << k) in long, and finally clamp result to int range\n    int gcdNeg = -u; // positive gcd without the power-of-two factors\n    if (k == 0) {\n        return gcdNeg;\n    } else {\n        // shift in long to avoid overflow, then cast back to int\n        long result = ((long) gcdNeg) << k;\n        if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: gcd exceeds int range\");\n        }\n        return (int) result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}