{
    "generation": "  /**\n   * Computes the subset of {@code this} and {@code that} types if inequality\n   * is observed. If a value {@code v1} of type {@code number} is not equal to a\n   * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n   * type of {@code v1} is {@code number} and the type of {@code v2} is\n   * {@code number} as well.\n   *\n   * @return a pair containing the restricted type of {@code this} as the first\n   *         component and the restricted type of {@code that} as the second\n   *         element. The returned pair is never {@code null} even though its\n   *         components may be {@code null}\n   */\n  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        // If types are definitely equal, then inequality implies the branch\n        // is unreachable. Return the bottom type (NO_TYPE).\n        // This handles cases like (undefined != undefined) which is impossible.\n        JSType noType = registry.getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);\n\n      case FALSE:\n        // If types are definitely not equal, then inequality provides no\n        // new information. Return the original types.\n        return new TypePair(this, that);\n\n      case UNKNOWN:\n        // If types might be equal or might not be equal, then inequality\n        // implies we are in the case where they are not equal.\n        // This *might* allow type restriction (e.g., see docstring example),\n        // but for now, we return the original types as a safe over-approximation.\n        // TODO(johnlenz): Implement stronger type inference here. For example,\n        // if number != (number|string), then the type should be restricted to\n        // number in the false branch.\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}