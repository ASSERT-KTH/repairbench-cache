{
    "generation": "  /**\n   * Computes the subset of {@code this} and {@code that} types if inequality\n   * is observed. If a value {@code v1} of type {@code number} is not equal to a\n   * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n   * type of {@code v1} is {@code number} and the type of {@code v2} is\n   * {@code number} as well.\n   *\n   * @return a pair containing the restricted type of {@code this} as the first\n   *         component and the restricted type of {@code that} as the second\n   *         element. The returned pair is never {@code null} even though its\n   *         components may be {@code null}\n   */\n  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        // If 'this' and 'that' are always equal, then the inequality condition\n        // ('this' != 'that') can never be true. Thus, the types under this\n        // condition are empty (NO_TYPE).\n        return new TypePair(this.getNoType(), that.getNoType());\n\n      case FALSE:\n        // If 'this' and 'that' are always unequal, then the inequality condition\n        // is always true. The types are not restricted further.\n        return new TypePair(this, that);\n\n      case UNKNOWN:\n        // If 'this' and 'that' can be equal or unequal, we restrict them to\n        // their common types. This is based on the doc comment's example:\n        // 'number' != '(undefined,number)' infers '(number, number)'.\n        // This effectively means we consider the types that could overlap\n        // and infer inequality within that overlap.\n        return new TypePair(this.getGreatestSubtype(that),\n            that.getGreatestSubtype(this));\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}