{
    "generation": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // If 'this' and 'that' are the same type, after eliminating equality the types are 'NO_TYPE'.\n    if (this.equals(that)) {\n      return new TypePair(getNativeType(JSTypeNative.NO_TYPE), getNativeType(JSTypeNative.NO_TYPE));\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}