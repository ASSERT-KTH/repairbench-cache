{
    "generation": "public TypePair getTypesUnderInequality(JSType that) {\n  // unions types\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n\n  // other types\n  switch (this.testForEquality(that)) {\n    case TRUE:\n      return new TypePair(null, null);\n\n    case FALSE:\n      return new TypePair(this, that);\n\n    case UNKNOWN:\n      // If the types are exactly equal and UNKNOWN, exclude the shared part\n      if (this.isEquivalentTo(that)) {\n        return new TypePair(null, null);\n      }\n      return new TypePair(this, that);\n  }\n\n  // switch case is exhaustive\n  throw new IllegalStateException();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}