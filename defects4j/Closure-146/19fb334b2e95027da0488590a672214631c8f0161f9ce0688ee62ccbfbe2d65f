{
    "generation": "  /**\n   * Computes the subset of {@code this} and {@code that} types if inequality\n   * is observed. If a value {@code v1} of type {@code number} is not equal to a\n   * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n   * type of {@code v1} is {@code number} and the type of {@code v2} is\n   * {@code number} as well.\n   *\n   * @return a pair containing the restricted type of {@code this} as the first\n   *         component and the restricted type of {@code that} as the second\n   *         element. The returned pair is never {@code null} even though its\n   *         components may be {@code null}\n   */\n  @Override\n  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        // If this and that are definitely equal, the condition 'this != that'\n        // is impossible. The types in this branch should be NO_TYPE.\n        JSType noType = getRegistry().getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);\n\n      case FALSE:\n        // If this and that are definitely not equal, then 'this != that' is\n        // always true. Knowing the condition is true does not restrict the types.\n        return new TypePair(this, that);\n      case UNKNOWN:\n        // If equality is unknown, then 'this != that' may be true.\n        // No restriction possible based only on this information for the base case.\n        // Subclasses (like UnionType) may provide better results.\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}