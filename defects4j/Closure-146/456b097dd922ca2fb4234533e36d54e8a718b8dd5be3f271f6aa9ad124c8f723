{
    "generation": "  /**\n   * Computes the subset of {@code this} and {@code that} types if inequality\n   * is observed. If a value {@code v1} of type {@code number} is not equal to a\n   * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n   * type of {@code v1} is {@code number} and the type of {@code v2} is\n   * {@code number} as well.\n   *\n   * @return a pair containing the restricted type of {@code this} as the first\n   *         component and the restricted type of {@code that} as the second\n   *         element. The returned pair is never {@code null} even though its\n   *         components may be {@code null}\n   */\n  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // Handle special cases where types are always equal if they are the exact same singleton instance.\n    // This is for types like VOID_TYPE and NULL_TYPE where `a == b` is always true\n    // if a and b are both that specific type. If they are unequal, it's a contradiction.\n    if (this == that) { // Check for same instance (true for singletons like VOID_TYPE, NULL_TYPE)\n      if (this.isVoidType() || this.isNullType()) {\n        // If 'this' and 'that' are identical and always equal, then under inequality,\n        // no values satisfy the condition. So both become NO_TYPE.\n        return new TypePair(null, null);\n      }\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        // If they are always equal, then under inequality, no values satisfy the condition.\n        return new TypePair(null, null);\n\n      case FALSE:\n      case UNKNOWN:\n        // If they are never equal, or might be equal/unequal,\n        // and inequality is observed, they retain their types.\n        // For UNKNOWN, more precise restriction might be needed based on specific type interactions,\n        // but for general cases, retaining types or further refinement is done by caller.\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}