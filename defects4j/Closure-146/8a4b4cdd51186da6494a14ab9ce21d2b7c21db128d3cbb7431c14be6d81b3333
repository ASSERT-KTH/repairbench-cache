{
    "generation": "  /**\n   * Computes the subset of {@code this} and {@code that} types if inequality\n   * is observed. If a value {@code v1} of type {@code number} is not equal to a\n   * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n   * type of {@code v1} is {@code number} and the type of {@code v2} is\n   * {@code number} as well.\n   *\n   * @return a pair containing the restricted type of {@code this} as the first\n   *         component and the restricted type of {@code that} as the second\n   *         element. The returned pair is never {@code null} even though its\n   *         components may be {@code null}\n   */\n  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        // If they are definitely equal, then under inequality,\n        // neither type is possible. Return NO_TYPE.\n        // Explicitly use JSType.getNoType() instead of null to avoid\n        // potential misinterpretation, especially with VOID_TYPE.\n        return new TypePair(JSType.getNoType(), JSType.getNoType());\n\n      case FALSE:\n      case UNKNOWN:\n        // If they are definitely not equal, or unknown,\n        // they retain their original types.\n        // TODO(johnlenz): The UNKNOWN case could be refined further for\n        // specific type combinations, as suggested by the Javadoc example.\n        // For example, if 'this' is number and 'that' is (undefined|number),\n        // and testForEquality returns UNKNOWN, we should infer that 'that'\n        // must be number if 'this' != 'that'. This implies 'that' is restricted\n        // to number, and 'this' remains number.\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}