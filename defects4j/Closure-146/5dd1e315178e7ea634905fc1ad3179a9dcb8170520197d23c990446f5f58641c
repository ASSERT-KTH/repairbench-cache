{
    "generation": "/**\n * Computes the subset of {@code this} and {@code that} types if inequality\n * is observed. If a value {@code v1} of type {@code number} is not equal to a\n * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n * type of {@code v1} is {@code number} and the type of {@code v2} is\n * {@code number} as well.\n *\n * @return a pair containing the restricted type of {@code this} as the first\n *         component and the restricted type of {@code that} as the second\n *         element. The returned pair is never {@code null} even though its\n *         components may be {@code null}\n */\n@Override\npublic TypePair getTypesUnderInequality(JSType that) {\n  // Handle unions by delegating and swapping the result.\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n\n  switch (this.testForEquality(that)) {\n    case TRUE:\n      // If the two types are always equal, the inequality-branch is unreachable.\n      JSType noType = registry.getNativeType(JSTypeNative.NO_TYPE);\n      return new TypePair(noType, noType);\n    case FALSE:\n    case UNKNOWN:\n      // Otherwise no further refinement beyond the original types.\n      return new TypePair(this, that);\n  }\n\n  // Should be exhaustive.\n  throw new IllegalStateException();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}