{
    "generation": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  StringBuilder builder = new StringBuilder();\n\n  // WhitespaceOption.PRESERVE means preserve formatting of all comment lines,\n  // including leading whitespace and blank lines; otherwise, strip each line.\n  boolean isFirstLine = true;\n  boolean ignoreStar = false;\n\n  do {\n    String line = stream.getRemainingJSDocLine();\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n        (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n      // Stop before EOC/EOF/ANNOTATION unless PRESERVE option is used.\n      if (option != WhitespaceOption.PRESERVE) {\n        String multilineText = builder.toString().trim();\n        int endLineno = stream.getLineno();\n        int endCharno = stream.getCharno();\n        if (multilineText.length() > 0) {\n          jsdocBuilder.markText(multilineText, startLineno, startCharno,\n              endLineno, endCharno);\n        }\n        return new ExtractionInfo(multilineText, token);\n      } else {\n        // For PRESERVE, end only at EOC or EOF.\n        if (token == JsDocToken.ANNOTATION) {\n          // Not terminal in PRESERVE, continue.\n        } else {\n          String multilineText = builder.toString();\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n      }\n    }\n\n    switch (token) {\n      case STAR:\n        // Handle case when parser splits leading '*'\n        // Don't add extra whitespace for purely decorative stars in PRESERVE mode.\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      case EOL:\n        // Preserve blank lines if PRESERVE, otherwise newlines only between lines with text.\n        if (option == WhitespaceOption.PRESERVE) {\n          builder.append('\\n');\n        } else if (builder.length() > 0 &&\n            // Avoid redundant trailing newlines for blank last line\n            !builder.toString().endsWith(\"\\n\")) {\n          builder.append('\\n');\n        }\n        ignoreStar = false;\n        token = next();\n        isFirstLine = false;\n        continue;\n\n      default:\n        // For PRESERVE, preserve line with whitespace and content as-is.\n        // For others, trim whitespace on each line (strip leading and trailing).\n        if (option == WhitespaceOption.PRESERVE) {\n          // Only add newline if not first and last wasn't a newline\n          if (!isFirstLine && builder.length() > 0 && !builder.toString().endsWith(\"\\n\")) {\n            builder.append('\\n');\n          }\n          builder.append(line);\n        } else {\n          String trimmed = trimEnd(line).trim();\n          if (!trimmed.isEmpty()) {\n            if (builder.length() > 0 && !builder.toString().endsWith(\"\\n\")) {\n              builder.append('\\n');\n            }\n            builder.append(trimmed);\n          }\n        }\n        token = next();\n        isFirstLine = false;\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}