{
    "generation": "  /**\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n    boolean ignoreStar = false;\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n// buggy code\n//    do {\n//      switch (token) {\n//        case STAR:\n//          if (ignoreStar) {\n//            // Mark the position after the star as the new start of the line.\n//          } else {\n//            // The star is part of the comment.\n//            if (builder.length() > 0) {\n//              builder.append(' ');\n//            }\n//            builder.append('*');\n//          }\n//          token = next();\n//          continue;\n//        case EOL:\n//          if (option != WhitespaceOption.SINGLE_LINE) {\n//            builder.append(\"\\n\");\n//          }\n//          ignoreStar = true;\n//          token = next();\n//          continue;\n//        default:\n//          ignoreStar = false;\n//          state = State.SEARCHING_ANNOTATION;\n//              // All tokens must be separated by a space.\n//          if (token == JsDocToken.EOC ||\n//              token == JsDocToken.EOF ||\n//              // When we're capturing a license block, annotations\n//              // in the block are ok.\n//              (token == JsDocToken.ANNOTATION &&\n//               option != WhitespaceOption.PRESERVE)) {\n//            String multilineText = builder.toString();\n//            if (option != WhitespaceOption.PRESERVE) {\n//              multilineText = multilineText.trim();\n//            }\n//            int endLineno = stream.getLineno();\n//            int endCharno = stream.getCharno();\n//            if (multilineText.length() > 0) {\n//              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n//                  endLineno, endCharno);\n//            }\n//            return new ExtractionInfo(multilineText, token);\n//          }\n//          if (builder.length() > 0) {\n//            builder.append(' ');\n//          }\n//          builder.append(\n          builder.append(toString(token));\n          line = stream.getRemainingJSDocLine();\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}