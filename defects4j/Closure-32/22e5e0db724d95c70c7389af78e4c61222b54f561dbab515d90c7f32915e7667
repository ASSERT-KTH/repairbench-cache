{
    "generation": "  /**\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n    boolean ignoreStar = false;\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n    while (true) {\n      switch (state) {\n        case SEARCHING_ANNOTATION:\n          if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n              token == JsDocToken.EOF) {\n            return new ExtractionInfo(builder.toString(), token);\n          }\n          if (token == JsDocToken.STAR) {\n            ignoreStar = true;\n          } else {\n            ignoreStar = false;\n          }\n          builder.append(toString(token));\n          token = next();\n          break;\n        case SEARCHING_END_OF_COMMENT:\n          if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n              token == JsDocToken.EOF) {\n            return new ExtractionInfo(builder.toString(), token);\n          }\n          if (token == JsDocToken.STAR) {\n            ignoreStar = true;\n          } else {\n            ignoreStar = false;\n          }\n          builder.append(toString(token));\n          line = stream.getRemainingJSDocLine();\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}