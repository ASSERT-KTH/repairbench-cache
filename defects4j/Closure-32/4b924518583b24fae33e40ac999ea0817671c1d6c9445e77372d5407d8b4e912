{
    "generation": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  StringBuilder builder = new StringBuilder();\n\n  // Read the content from the first line.\n  String line = stream.getRemainingJSDocLine();\n\n  if (option == WhitespaceOption.PRESERVE) {\n    // For PRESERVE, retain leading whitespace but do not trim.\n    builder.append(line);\n  } else {\n    // For LICENSE blocks, trim ONLY trailing whitespace for each line,\n    // so leading indentation is preserved (ASCII art, etc).\n    line = trimEnd(line);\n    builder.append(line.trim());\n  }\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  boolean ignoreStar = false;\n\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // Ignore leading '*' after a EOL\n        } else {\n          // The star is part of the comment.\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            // When we're capturing a license block, annotations\n            // in the block are ok.\n            (token == JsDocToken.ANNOTATION && \n             option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            // For LICENSE blocks, do not trim inner lines, just trailing newlines.\n            multilineText = trimEnd(multilineText);\n          }\n\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        line = stream.getRemainingJSDocLine();\n\n        if (option == WhitespaceOption.PRESERVE) {\n          // Just append as is\n          builder.append(line);\n        } else {\n          line = trimEnd(line);\n          builder.append(line);\n        }\n\n        token = next();\n    }\n  } while (true);\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}