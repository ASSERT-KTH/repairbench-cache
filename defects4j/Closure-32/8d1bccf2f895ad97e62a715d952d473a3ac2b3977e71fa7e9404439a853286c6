{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  // Mark the start position for jsdocBuilder.markText(...)\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Read the content from the first line.\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  boolean ignoreStar = false;\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          if (option == WhitespaceOption.PRESERVE) {\n            // Skip the leading '*' and pull in the raw rest of the line.\n            stream.update();\n            String raw = stream.getRemainingJSDocLine();\n            builder.append(raw);\n            token = next();\n            continue;\n          }\n          // otherwise (non\u2010preserve) we just skip the decorative star\n        } else {\n          // '*' is part of the text\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        // In PRESERVE mode, if we're at the start of a new line,\n        // grab the raw line in one shot (this preserves indentation).\n        if (option == WhitespaceOption.PRESERVE\n            && builder.length() > 0\n            && builder.charAt(builder.length() - 1) == '\\n') {\n          stream.update();\n          String raw = stream.getRemainingJSDocLine();\n          builder.append(raw);\n          token = next();\n          continue;\n        }\n\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        // Termination conditions\n        if (token == JsDocToken.EOC\n            || token == JsDocToken.EOF\n            || (token == JsDocToken.ANNOTATION\n                && option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n          if (!multilineText.isEmpty()) {\n            jsdocBuilder.markText(\n                multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        // Normal accumulation\n        if (option != WhitespaceOption.PRESERVE) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n        } else {\n          // PRESERVE mode: just append the token text\n          builder.append(toString(token));\n        }\n\n        line = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n        builder.append(line);\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}