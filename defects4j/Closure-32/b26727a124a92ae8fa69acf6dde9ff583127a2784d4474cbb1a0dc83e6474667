{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Read the content from the first line.\n  // Note: We only trim the end so that any intentional leading whitespace is preserved.\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = trimEnd(line);\n  }\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  boolean ignoreStar = false;\n\n  // Loop until we hit a terminator token.\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // (Intentionally left blank; we \u201cignore\u201d this star.)\n        } else {\n          // When the star is part of the text, only insert a separating space\n          // if the text so far didn\u2019t already end with a newline.\n          if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        // If we hit the end-of-comment (or a new annotation unless we're\n        // preserving whitespace) then we are done.\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                                  endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        // Only add a space if the builder does not already end with a newline.\n        if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        line = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n        builder.append(line);\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}