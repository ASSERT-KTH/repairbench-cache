{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // For the first line, obtain its remaining text.\n  // In non\u2010preserve mode we want to remove any trailing whitespace\n  // (but we intentionally leave any leading whitespace intact).\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = trimEnd(line);\n  }\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  boolean ignoreStar = false;\n\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // When a line begins with a decorative star, skip it.\n          // Also reset the flag so that subsequent tokens on this line\n          // get proper separation.\n          ignoreStar = false;\n          token = next();\n          continue;\n        } else {\n          // Append the star only if it isn\u2019t at the beginning of a line.\n          // Insert a separating space only when needed.\n          if (builder.length() > 0 &&\n              !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n            builder.append(' ');\n          }\n          builder.append('*');\n          token = next();\n          continue;\n        }\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        // Set this flag so that a star at the beginning of the next line\n        // (if present) is ignored.\n        ignoreStar = true;\n        token = next();\n        continue;\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n        // If we have reached the end of the comment (or an annotation token\n        // when we are not preserving whitespace) then finish.\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION &&\n             option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          // In non\u2010preserve mode, we remove trailing whitespace (but keep any\n          // intentional leading space that might follow the tag).\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = trimEnd(multilineText);\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                                  endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n        // In the default case, before outputting the token\u2019s text,\n        // ensure it\u2019s separated from what has already been captured\u2014but\n        // only add a space if the last character isn\u2019t already whitespace.\n        if (builder.length() > 0 &&\n            !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        line = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n        builder.append(line);\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}