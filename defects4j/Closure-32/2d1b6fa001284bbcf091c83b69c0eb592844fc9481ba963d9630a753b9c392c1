{
    "generation": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Read the content from the first line.\n  String line = stream.getRemainingJSDocLine();\n  // In SINGLE_LINE mode we collapse all whitespace.\n  // Otherwise, we only remove unwanted trailing spaces.\n  if (option == WhitespaceOption.SINGLE_LINE) {\n    line = line.trim();\n  } else {\n    line = trimEnd(line);\n  }\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  // This flag will be set after an EOL to indicate that if a STAR\n  // is the first token on the new line it should be skipped.\n  boolean ignoreStar = false;\n\n  while (true) {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // Skip a star token if it appears at the beginning of the line.\n          ignoreStar = false;\n        } else {\n          // In the rare event that a '*' is meant to be part of the text,\n          // only add a separator if we\u2019re not already at the start of a new line.\n          if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        // Mark that we are at the start of a new line.\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        // We reset the ignoreStar flag once real content is found.\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        // If we\u2019ve reached an end-comment, end-of-file,\n        // or an annotation (unless we\u2019re in preserve mode),\n        // finish up.\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          if (option == WhitespaceOption.SINGLE_LINE) {\n            multilineText = multilineText.trim();\n          } else if (option != WhitespaceOption.PRESERVE) {\n            multilineText = trimEnd(multilineText);\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        // If we're not at the start of a new line (i.e. the last char isn\u2019t a newline),\n        // separate tokens with a space.\n        if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        // Get any remaining text on the current line.\n        line = stream.getRemainingJSDocLine();\n        if (option == WhitespaceOption.SINGLE_LINE) {\n          line = line.trim();\n        } else if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n        builder.append(line);\n        token = next();\n        break;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}