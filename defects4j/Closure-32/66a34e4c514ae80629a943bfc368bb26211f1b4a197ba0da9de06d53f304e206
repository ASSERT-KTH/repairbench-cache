{
    "generation": "  /**\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    // Continue processing tokens until an end condition is met\n    while (true) {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Skip this star as it's part of the line continuation\n            token = next();\n          } else {\n            builder.append(' ');\n            builder.append('*');\n            token = next();\n          }\n          break;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = true;\n          token = next();\n          break;\n\n        case EOF:\n        case EOC:\n          // Reached the end of the comment, stop processing\n          token = next();\n          break;\n\n        case ANNOTATION:\n          if (option != WhitespaceOption.PRESERVE) {\n            // Stop processing at an annotation start\n            break;\n          }\n          // Fall through to append as part of the text\n\n        default:\n          if (builder.length() > 0 && !ignoreStar) {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n          if (token == JsDocToken.EOL) {\n            line = stream.getRemainingJSDocLine();\n            if (option != WhitespaceOption.PRESERVE) {\n              line = trimEnd(line);\n            }\n            builder.append(line);\n          }\n          token = next();\n          break;\n      }\n\n      // Check if we should stop processing\n      if (token == JsDocToken.EOC || token == JsDocToken.EOF || token == JsDocToken.ANNOTATION) {\n        break;\n      }\n    }\n\n    String multilineText = builder.toString();\n\n    if (option != WhitespaceOption.PRESERVE) {\n      multilineText = multilineText.trim();\n    }\n\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n\n    if (multilineText.length() > 0) {\n      jsdocBuilder.markText(multilineText, startLineno, startCharno,\n          endLineno, endCharno);\n    }\n\n    return new ExtractionInfo(multilineText, token);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}