{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Read the content from the first line.\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  // Special\u2010case PRESERVE: keep raw indentation.\n  if (option == WhitespaceOption.PRESERVE) {\n    while (true) {\n      if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n        break;\n      }\n      if (token == JsDocToken.EOL) {\n        builder.append('\\n');\n        String rawLine = stream.getRemainingJSDocLine();\n        // Strip a leading '*' if it's there, and one space after it.\n        if (!rawLine.isEmpty() && rawLine.charAt(0) == '*') {\n          rawLine = rawLine.substring(1);\n          if (!rawLine.isEmpty() && rawLine.charAt(0) == ' ') {\n            rawLine = rawLine.substring(1);\n          }\n        }\n        builder.append(rawLine);\n      } else {\n        // Any other token is part of the same line.\n        builder.append(toString(token));\n        String rest = stream.getRemainingJSDocLine();\n        builder.append(rest);\n      }\n      token = next();\n    }\n\n    String multilineText = builder.toString();\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (!multilineText.isEmpty()) {\n      jsdocBuilder.markText(\n          multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new ExtractionInfo(multilineText, token);\n  }\n\n  // Fallback for non\u2010PRESERVE (default / single line).\n  boolean ignoreStar = false;\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // We skip the leading '*' on a new line.\n        } else {\n          // A '*' within text.\n          if (builder.length() > 0 &&\n              builder.charAt(builder.length() - 1) != '\\n') {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append('\\n');\n        }\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        // Stop on end\u2010of\u2010comment, EOF, or a new annotation (unless PRESERVE).\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION &&\n             option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n          if (!multilineText.isEmpty()) {\n            jsdocBuilder.markText(\n                multilineText, startLineno, startCharno, endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        // Otherwise consume a token + the rest of its line.\n        if (builder.length() > 0 &&\n            builder.charAt(builder.length() - 1) != '\\n') {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n        line = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n        builder.append(line);\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}