{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  // Remember where the text starts.\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Grab the rest of the first line.\n  String firstLine = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    firstLine = firstLine.trim();\n  }\n\n  // --- Special case: PRESERVE mode must keep all spacing & newlines verbatim. ---\n  if (option == WhitespaceOption.PRESERVE) {\n    List<String> lines = new ArrayList<>();\n    lines.add(firstLine);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n    // Skip any leftover tokens on the same (first) line.\n    while (token != JsDocToken.EOL &&\n           token != JsDocToken.EOC &&\n           token != JsDocToken.EOF) {\n      token = next();\n    }\n    // Now read each subsequent line until we hit end\u2010of\u2010comment.\n    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n      // Consume the newline token if present.\n      if (token == JsDocToken.EOL) {\n        token = next();\n      }\n      if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n        break;\n      }\n      // Mark the start of this line and grab its raw contents.\n      stream.update();\n      String line = stream.getRemainingJSDocLine();\n      lines.add(line);\n      // Advance past any tokens on this line.\n      token = next();\n      while (token != JsDocToken.EOL &&\n             token != JsDocToken.EOC &&\n             token != JsDocToken.EOF) {\n        token = next();\n      }\n    }\n    // Reassemble the preserved lines.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lines.size(); i++) {\n      if (i > 0) {\n        sb.append(\"\\n\");\n      }\n      sb.append(lines.get(i));\n    }\n    String multilineText = sb.toString();\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n\n    if (!multilineText.isEmpty()) {\n      jsdocBuilder.markText(\n          multilineText,\n          startLineno, startCharno,\n          endLineno, endCharno);\n    }\n    return new ExtractionInfo(multilineText, token);\n  }\n\n  // --- Fallback: existing logic for non-PRESERVE cases. ---\n  StringBuilder builder = new StringBuilder();\n  builder.append(firstLine);\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  boolean ignoreStar = false;\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // Just update our notion of \"start of line\"\n        } else {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        // Terminate on end\u2010of\u2010comment, EOF, or a new annotation\n        // (unless we're in PRESERVE, which we already handled).\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION\n             && option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n          if (!multilineText.isEmpty()) {\n            jsdocBuilder.markText(\n                multilineText,\n                startLineno, startCharno,\n                endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        // Otherwise, append a space and the token text, then the rest of\n        // the line.\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        String tail = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          tail = trimEnd(tail);\n        }\n        builder.append(tail);\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}