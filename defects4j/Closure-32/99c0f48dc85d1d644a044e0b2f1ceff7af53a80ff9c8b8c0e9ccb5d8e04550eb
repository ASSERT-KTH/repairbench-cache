{
    "generation": "  /**\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim(); // Trim leading/trailing whitespace on the first line\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    // CRITICAL FIX: Set state according to WhitespaceOption.PRESERVE.\n    // In SEARCHING_TEXT state, `next()` will return WHITESPACE and STAR tokens,\n    // which is necessary for preserving exact text, including ASCII art.\n    if (option == WhitespaceOption.PRESERVE) {\n      state = State.SEARCHING_TEXT;\n    } else {\n      state = State.SEARCHING_ANNOTATION; // Default for non-PRESERVE (skips leading whitespace/stars)\n    }\n    token = next();\n\n    boolean ignoreStar = false; // Flag to indicate if the next STAR token should be ignored (e.g., \" * \")\n\n    do {\n      switch (token) {\n        case STAR:\n          // The 'ignoreStar' flag is set to true after EOL to handle the common JSDoc formatting \" * text\".\n          // If `ignoreStar` is true, it means we are at the start of a new line and this '*' is a formatting star.\n          // We consume it and do not append it to the builder.\n          if (ignoreStar) {\n            ignoreStar = false; // Consume this one formatting star, then reset the flag.\n          } else {\n            // If 'ignoreStar' is false, this '*' is part of the content (e.g., \"**\" or \"text * text\").\n            // Append it directly. No extra space needed, as we rely on `toString(WHITESPACE)`\n            // or `getRemainingJSDocLine()` for any necessary spacing.\n            builder.append('*');\n          }\n          token = next(); // Move to the next token\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = true; // After EOL, the next token might be a leading '*' that should be ignored.\n          token = next();\n          continue;\n\n        default:\n          // If the token is not STAR or EOL, we're inside the line content, so reset ignoreStar.\n          ignoreStar = false;\n\n          // Termination condition: end of comment, end of file, or another annotation.\n          // For PRESERVE option, annotations within the block are considered content,\n          // so we do not terminate on ANNOTATION if option is PRESERVE.\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              // Trim trailing whitespace from the final text for non-PRESERVE modes.\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          // Append the current token's value.\n          // In SEARCHING_TEXT mode (for PRESERVE), `toString(token)` will correctly include\n          // any whitespace captured as a WHITESPACE token.\n          // The previous `builder.append(' ');` which added an extra space is removed.\n          builder.append(toString(token));\n\n          // Append the remainder of the current JSDoc line after this token.\n          // This allows capturing multi-word lines or lines with specific formatting.\n          String remainingLine = stream.getRemainingJSDocLine();\n          if (option != WhitespaceOption.PRESERVE) {\n            remainingLine = trimEnd(remainingLine); // Trim trailing whitespace.\n          }\n          builder.append(remainingLine);\n\n          token = next(); // Move to the next token (which could be EOL, EOC, or next content token)\n      }\n    } while (true);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}