{
    "generation": "  /**\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    // BUG FIX 1: Removed `token == JsDocToken.EOL` from the initial return condition.\n    // For @preserve/@license tags, content can start on the next line (after an EOL).\n    if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    // This reads from the current stream position (which is at the start of `token`)\n    // to the end of the current line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    // After reading the first line content, advance to the next token, which\n    // is typically the first token on the *next* line, or EOC/EOF.\n    token = next();\n\n    boolean ignoreStar = false;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // BUG FIX 3: When a star is ignored (e.g., ` * Foo`), any whitespace between\n            // the `*` and `Foo` must be preserved for `PRESERVE` option.\n            // `stream.getRemainingJSDocLine()` gets content from the current stream\n            // position (after the '*') to the end of the line.\n            String remainingLineAfterStar = stream.getRemainingJSDocLine();\n            builder.append(remainingLineAfterStar);\n          } else {\n            // BUG FIX 2: Only append a space if not preserving whitespace\n            // and if builder is not empty.\n            if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n\n          token = next(); // Advance to the next token\n          continue;\n\n        case EOL:\n          // Append a newline character if not in single-line mode.\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true; // Set flag to ignore a leading star on the next line\n          token = next(); // Advance to the next token\n          continue;\n\n        default:\n          ignoreStar = false; // Reset flag as we are consuming a non-star token\n          state = State.SEARCHING_ANNOTATION; // Reset state for subsequent processing\n\n          // Check for termination conditions.\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are ok. But if not preserving whitespace,\n              // an ANNOTATION token should terminate the text block.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          // BUG FIX 2: Only append a space if not preserving whitespace\n          // and if builder has existing content.\n          if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n\n          // Append the remainder of the current JSDoc line after the current token.\n          // This captures any trailing whitespace or multiple words on the same line.\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            // Only trim trailing whitespace if not preserving.\n            line = trimEnd(line);\n          }\n          builder.append(line);\n\n          token = next(); // Advance to the next token\n      }\n    } while (true);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}