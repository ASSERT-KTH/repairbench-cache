{
    "generation": "  /**\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    StringBuilder builder = new StringBuilder();\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    // Always preserve leading whitespace on the first line,\n    // but remove trailing to avoid extra spaces.\n    line = trimEnd(line);\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    boolean firstLine = true;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0 && !endsWithNewline(builder)) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = true;\n          firstLine = false;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are ok.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n            // For license and @preserve, we want to preserve leading and intermediate whitespace,\n            // but trim trailing; for all others, we trim as before.\n            multilineText = trimEnd(multilineText);\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          String lineContent = toString(token);\n          // Only add a space if current builder does not end with a newline,\n          // i.e., we are on the same line.\n          if (builder.length() > 0 && !endsWithNewline(builder)) {\n            builder.append(' ');\n          }\n          builder.append(lineContent);\n\n          line = stream.getRemainingJSDocLine();\n          // Always trim only trailing whitespace for these blocks.\n          line = trimEnd(line);\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n\n  // Helper function to trim trailing whitespace\n  private static String trimEnd(String s) {\n    int len = s.length();\n    int st = 0;\n    while ((st < len) && (s.charAt(len - 1) <= ' ')) {\n      len--;\n    }\n    return s.substring(0, len);\n  }\n\n  // Helper function: does builder end with newline?\n  private static boolean endsWithNewline(StringBuilder sb) {\n    int len = sb.length();\n    return len > 0 && sb.charAt(len - 1) == '\\n';\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}