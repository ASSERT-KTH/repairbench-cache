{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  // If there's nothing to read, bail out immediately.\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  // Record the start position.\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Read the remainder of the first line.\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  // --- PRESERVE mode: copy each line raw (minus the comment-asterisk) ---\n  if (option == WhitespaceOption.PRESERVE) {\n    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n      if (token == JsDocToken.EOL) {\n        // Move the \"line start\" marker to just after this newline\n        stream.update();\n        // Grab the raw text of the next line\n        String rawLine = stream.getRemainingJSDocLine();\n        // Strip off a leading \"*\" (and any whitespace before it)\n        rawLine = rawLine.replaceFirst(\"^\\\\s*\\\\* ?\", \"\");\n        builder.append(\"\\n\").append(rawLine);\n      }\n      token = next();\n    }\n    String multilineText = builder.toString();\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (!multilineText.isEmpty()) {\n      jsdocBuilder.markText(\n          multilineText, startLineno, startCharno,\n          endLineno, endCharno);\n    }\n    return new ExtractionInfo(multilineText, token);\n  }\n\n  // --- non\u2010PRESERVE modes: the old token\u2010by\u2010token logic ---\n  boolean ignoreStar = false;\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // We've just seen an EOL, so this STAR is the comment prefix.\n          // Reset the \"line start\" to after it.\n          stream.update();\n        } else {\n          // A real '*' in the text.\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        ignoreStar = true;\n        // Update so that getRemainingJSDocLine() will start at the true new line.\n        stream.update();\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n        // Stop if we hit end\u2010of\u2010comment or (for non\u2010PRESERVE) another annotation.\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION\n             && option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n          if (!multilineText.isEmpty()) {\n            jsdocBuilder.markText(\n                multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        // Otherwise, consume one token and its remainder on the line.\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n        line = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n        builder.append(line);\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}