{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  StringBuilder builder = new StringBuilder();\n\n  state = State.SEARCHING_ANNOTATION;\n  boolean firstLine = true;\n  boolean ignoreStar = false;\n  // Here, the initial token has already been consumed and was NOT EOL/EOC/EOF,\n  // so handle accordingly.\n  do {\n    String line = \"\";\n    switch (token) {\n      case STAR:\n        if (!ignoreStar) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n        // Check for early exit.\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION &&\n             option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        // At this point, we have a content token at the start of the line.\n        if (builder.length() > 0) {\n          builder.append('\\n');\n        }\n\n        // Content token at start of line, so get the rest of the JsDoc line.\n        // Retain leading whitespace.\n        line = stream.getRemainingJSDocLineRaw(); // This must preserve whitespace and not trim.\n        // The current token is at the start of the line, so use line as-is.\n\n        // As per the original code, the first word in the line is represented by this token,\n        // unless this token is pure whitespace, but that can't happen here.\n        // The token string is at the front of the line for all non-STAR/ANNOTATION/EOL.\n        String tokenString = toString(token);\n\n        if (line.length() >= tokenString.length() &&\n            line.startsWith(tokenString)) {\n          builder.append(line);\n        } else {\n          // recovery for any inconsistency\n          builder.append(tokenString);\n          builder.append(line);\n        }\n\n        token = next();\n        continue;\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}