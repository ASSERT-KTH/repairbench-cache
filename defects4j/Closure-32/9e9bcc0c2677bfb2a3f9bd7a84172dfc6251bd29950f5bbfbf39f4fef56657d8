{
    "generation": "  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n    // If we immediately hit end-of-comment or newline, there's no text.\n    if (token == JsDocToken.EOC ||\n        token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    // Record starting position.\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Grab the rest of the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    // Advance into the block.\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    do {\n      switch (token) {\n        case STAR:\n          // Skip leading JSDoc \"*\" on a new line.\n          if (!ignoreStar) {\n            // A real star in the text should be preserved,\n            // but only with spacing in non-PRESERVE mode.\n            if (option != WhitespaceOption.PRESERVE) {\n              if (builder.length() > 0) {\n                builder.append(' ');\n              }\n            }\n            builder.append('*');\n          }\n          // Reset the star-skip flag and continue.\n          token = next();\n          ignoreStar = false;\n          continue;\n\n        case EOL:\n          // In SINGLE_LINE mode we stop at newlines; otherwise keep them.\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          // The next STAR (if any) is a comment prefix, not content.\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n          // Terminate on end-of-comment, end-of-file, or\n          // a nested annotation (unless we're in PRESERVE).\n          if (token == JsDocToken.EOC\n              || token == JsDocToken.EOF\n              || (token == JsDocToken.ANNOTATION\n                  && option != WhitespaceOption.PRESERVE)) {\n            String text = builder.toString();\n            if (option != WhitespaceOption.PRESERVE) {\n              text = text.trim();\n            }\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n            if (!text.isEmpty()) {\n              jsdocBuilder.markText(\n                  text, startLineno, startCharno, endLineno, endCharno);\n            }\n            return new ExtractionInfo(text, token);\n          }\n\n          // Otherwise consume the rest of this line.\n          if (option == WhitespaceOption.PRESERVE) {\n            // PRESERVE: take the raw rest of the line.\n            builder.append(stream.getRemainingJSDocLine());\n          } else {\n            // NORMAL: separate tokens with a space and trim line-end.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append(toString(token));\n            String rest = stream.getRemainingJSDocLine();\n            rest = trimEnd(rest);\n            builder.append(rest);\n          }\n\n          token = next();\n      }\n    } while (true);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}