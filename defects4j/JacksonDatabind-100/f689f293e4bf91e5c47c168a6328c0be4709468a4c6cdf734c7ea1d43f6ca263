{
    "generation": "@Override\npublic byte[] getBinaryValue(Base64Variant b64variant)\n    throws IOException, JsonParseException\n{\n    JsonNode n = currentNode();\n    if (n != null) {\n        // If the node is textual, decode it using the provided Base64 variant\n        if (n.isTextual()) {\n            String text = n.textValue();\n            com.fasterxml.jackson.core.util.ByteArrayBuilder builder = new com.fasterxml.jackson.core.util.ByteArrayBuilder();\n            try {\n                b64variant.decode(text, builder);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonParseException(\n                    \"Cannot access contents of TextNode as binary due to broken Base64 encoding: \" \n                    + iae.getMessage(), null, iae\n                );\n            }\n            return builder.toByteArray();\n        }\n        // Otherwise, try getting binary value (for BinaryNode or similar)\n        byte[] data = n.binaryValue();\n        if (data != null) {\n            return data;\n        }\n        // Finally, if it is a POJO wrapping a byte array, return it.\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}