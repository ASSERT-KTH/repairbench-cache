{
    "generation": "@Override\npublic byte[] getBinaryValue(Base64Variant b64variant)\n    throws IOException, JsonParseException\n{\n    // Walk the tree node and handle different kinds of binary content\n    JsonNode n = currentNode();\n    if (n != null) {\n        // 1) if it's textual, must decode with the passed-in variant\n        if (n.isTextual()) {\n            String text = n.textValue();\n            // Use parser's ByteArrayBuilder to accumulate decoded bytes\n            ByteArrayBuilder builder = _getByteArrayBuilder();\n            builder.reset();\n            try {\n                b64variant.decode(text, builder);\n            } catch (IllegalArgumentException e) {\n                // mimic core parser error for broken Base64\n                throw new JsonParseException(this,\n                    \"Cannot access contents of TextNode as binary due to broken Base64 encoding: \"\n                    + e.getMessage(), e);\n            }\n            return builder.toByteArray();\n        }\n        // 2) if it's a true binary node, just grab native bytes\n        byte[] data = n.binaryValue();\n        if (data != null) {\n            return data;\n        }\n        // 3) embedded POJO\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n    }\n    // no binary content here\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}