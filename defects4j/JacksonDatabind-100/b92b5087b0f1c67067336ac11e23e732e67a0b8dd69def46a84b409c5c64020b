{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        // Multiple possibilities...\n        JsonNode n = currentNode();\n        if (n != null) {\n            // [databind#2096]: If current node is a TextNode, we must use the provided\n            // Base64Variant to correctly decode the binary value.\n            // The default `n.binaryValue()` on TextNode does not take a variant,\n            // which can lead to decoding errors if the TextNode was encoded with a non-default variant.\n            if (n.isTextual()) {\n                return ((TextNode) n).getBinaryValue(b64variant);\n            }\n            // For other node types (e.g., BinaryNode), or if the TextNode handling somehow\n            // falls through (which it shouldn't for textual nodes), try the generic binaryValue().\n            // This will correctly return the data for BinaryNode or null for most others.\n            byte[] data = n.binaryValue();\n            if (data != null) {\n                return data;\n            }\n            // Finally, check if it's a POJONode wrapping a byte[] directly.\n            if (n.isPojo()) {\n                Object ob = ((POJONode) n).getPojo();\n                if (ob instanceof byte[]) {\n                    return (byte[]) ob;\n                }\n            }\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}