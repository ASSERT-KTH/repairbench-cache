{
    "generation": "@Override\npublic byte[] getBinaryValue(Base64Variant b64variant)\n    throws IOException, JsonParseException\n{\n    JsonNode n = currentNode();\n    if (n != null) {\n        // For proper binary nodes (or similar) use their native binary value:\n        if (n.isBinary()) {\n            return n.binaryValue();\n        }\n        // For textual nodes, decode using the provided Base64Variant\n        if (n.isTextual()) {\n            String base64 = n.asText();\n            try {\n                return b64variant.decode(base64);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonParseException(\"Cannot access contents of TextNode as binary due to broken Base64 encoding: \" \n                        + iae.getMessage(), this.getCurrentLocation(), iae);\n            }\n        }\n        // Fallback: if the node is a POJO holding a byte array\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n    }\n    // If no convertible binary content, return null.\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}