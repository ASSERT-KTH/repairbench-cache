{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        JsonNode n = currentNode();\n        if (n == null) {\n             return null;\n        }\n\n        // First: maybe we have base64 encoded textual content?\n        //  Need to use this variant\n        if (n.isTextual()) {\n            String str = n.textValue();\n            // If null, might be something odd, but follow API contract and return null\n            if (str == null) {\n                 return null;\n            }\n            // Otherwise, decode. Empty String is valid, results in empty byte array\n            try {\n                // [databind#2096] IMPORTANT: use given variant for decoding\n                return b64variant.decode(str);\n            } catch (IllegalArgumentException e) {\n                // 15-Aug-2018, tatu: Need to add more info like variant, message\n                throw _constructError(\"Cannot decode TextNode value as Base64 (\"+b64variant+\"): \"+e.getMessage(), e);\n            }\n        }\n\n        // Then: maybe it is plain binary node? Default `binaryValue()` works fine\n        byte[] data = n.binaryValue();\n        if (data != null) {\n            return data; // Will be non-null for BinaryNode\n        }\n        // Finally, maybe POJO that contains byte[]? (also handled by `binaryValue()`?)\n        // 15-Aug-2018, tatu: Looks like POJONode does not override `binaryValue()` so check separately:\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n        // Otherwise indicate we don't have binary content\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}