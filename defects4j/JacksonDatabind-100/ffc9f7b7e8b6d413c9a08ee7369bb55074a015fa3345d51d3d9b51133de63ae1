{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        JsonNode n = currentNode();\n        if (n == null) {\n            return null;\n        }\n\n        // First: maybe it's already binary? Allow this for BinaryNode / POJONode\n        // This call might also handle some coercions for other types\n        // (but need TextNode handling below)\n        byte[] data = n.binaryValue();\n        if (data != null) {\n            return data;\n        }\n        // Second: POJO Nodes that contain byte[] (but not recognized by binaryValue())\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n        // Third: Maybe String value that represents base64 encoded data?\n        // 15-Aug-2018, tatu: [databind#2096] Need to handle TextNode explicitly\n        if (n.isTextual()) {\n            final String str = n.textValue();\n            if (str != null) {\n                 try {\n                     return b64variant.decode(str);\n                 } catch (IllegalArgumentException e) {\n                     // Use the current parser instance ('this') for the exception\n                     throw new JsonParseException(this,\n                            String.format(\"Cannot access contents of %s as binary due to broken Base64 encoding: %s\",\n                                     n.getNodeType().name(), e.getMessage()), e);\n                 }\n            }\n        }\n        // Otherwise, no binary representation available\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}