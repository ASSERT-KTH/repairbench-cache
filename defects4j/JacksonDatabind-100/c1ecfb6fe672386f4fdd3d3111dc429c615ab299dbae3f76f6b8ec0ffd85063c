{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        JsonNode n = currentNode();\n        if (n == null) {\n            // 04-Jan-2018, tatu: Should this ever occur? Maybe if stream has ended?\n            //   Let's assume `null` is fine in this case.\n             return null;\n        }\n\n        // If it's TextNode, it has the String which needs to be decoded\n        // (NOTE: this check HAS to precede check for `isPojo()`, see [databind#2096] discussion)\n        if (n.isTextual()) {\n            // Use the specified variant for decoding, not the default\n            String str = n.textValue();\n            // 28-Sep-2017, tatu: Should be an error if textual node has null value...\n            // 15-Aug-2018, tatu: ... except it may be empty String, which is fine\n            if (str == null) {\n                 return null;\n            }\n            // 13-Oct-2018, tatu: Empty String is legitimate, means empty binary value\n            if (str.isEmpty()) {\n                return NO_BYTES; // Assuming NO_BYTES is a static final byte[0]\n            }\n             try {\n                 // Caller is expected to provide variant. For binary handling this is generally\n                 // true (unlike for textual representation)\n                 return b64variant.decode(str);\n             } catch (IllegalArgumentException e) {\n                 // It is possible that we could consider this an error condition for JSON...\n                 // but for now let's assume it's data problem\n                 throw _constructError(\"Cannot access contents of \"+n.getClass().getName()+\" as binary due to broken Base64 encoding: \"+e.getMessage(), e);\n             }\n        }\n\n        // Then: maybe node has actual binary value?\n        byte[] data = n.binaryValue();\n        if (data != null) {\n            return data;\n        }\n\n        // Second: perhaps embedded Object? But note: we MUST check `isTextual()` first\n        // because `POJONode`s with byte[] may be represented as Base64 Strings during\n        // serialization -- see [databind#2096]\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}