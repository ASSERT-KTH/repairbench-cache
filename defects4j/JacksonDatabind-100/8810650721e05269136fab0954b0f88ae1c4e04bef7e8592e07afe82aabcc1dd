{
    "generation": "@Override\npublic byte[] getBinaryValue(Base64Variant b64variant)\n    throws IOException, JsonParseException\n{\n    JsonNode n = currentNode();\n    if (n != null) {\n        // For non-textual nodes (eg, BinaryNode) we can use the regular binaryValue() if available:\n        if (!n.isTextual()) {\n            byte[] data = n.binaryValue();\n            if (data != null) {\n                return data;\n            }\n        }\n        // For textual nodes, decode the Base64 content using the provided variant\n        if (n.isTextual()) {\n            String text = n.textValue();\n            java.util.Base64.Decoder decoder;\n            if (b64variant == Base64Variants.MODIFIED_FOR_URL) {\n                decoder = java.util.Base64.getUrlDecoder();\n            } else if (b64variant == Base64Variants.MIME) {\n                decoder = java.util.Base64.getMimeDecoder();\n            } else if (b64variant == Base64Variants.MIME_NO_LINEFEEDS) {\n                // When line feeds are not expected, the basic decoder works\n                decoder = java.util.Base64.getDecoder();\n            } else if (b64variant == Base64Variants.PEM) {\n                // PEM is similar to MIME in terms of decoding\n                decoder = java.util.Base64.getMimeDecoder();\n            } else {\n                decoder = java.util.Base64.getDecoder();\n            }\n            try {\n                return decoder.decode(text);\n            } catch (IllegalArgumentException e) {\n                throw new JsonParseException(\"Cannot access contents of TextNode as binary due to broken Base64 encoding: \" + e.getMessage(), null, e);\n            }\n        }\n        // For POJO nodes, if the embedded value is a byte array, return it directly\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n    }\n    // If no binary content is available, return null\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}