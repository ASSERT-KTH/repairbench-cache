{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        JsonNode n = currentNode();\n        if (n != null) {\n            // [databind#2096]: coercion from TextNode requires variant.\n            // For BinaryNode, `binaryValue()` is fine as it returns actual bytes.\n            // For POJONode, we check explicitly.\n\n            // If the current node is a TextNode, we must use the provided Base64Variant\n            // to correctly decode its contents, as it might not be encoded with the default MIME variant.\n            if (n.isTextual()) {\n                return n.getBinaryValue(b64variant);\n            }\n            \n            // For other node types (like BinaryNode) or embedded binary values\n            // (e.g., POJONode wrapping byte[]), we can try the general binaryValue() method.\n            byte[] data = n.binaryValue();\n            if (data != null) {\n                return data;\n            }\n            \n            // As a fallback, or if binaryValue() didn't handle it for POJONode,\n            // check if it's a POJONode wrapping a byte array directly.\n            if (n.isPojo()) {\n                Object ob = ((POJONode) n).getPojo();\n                if (ob instanceof byte[]) {\n                    return (byte[]) ob;\n                }\n            }\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}