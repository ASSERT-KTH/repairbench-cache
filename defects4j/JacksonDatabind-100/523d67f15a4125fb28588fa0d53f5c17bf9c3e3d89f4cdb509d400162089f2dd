{
    "generation": "@Override\npublic byte[] getBinaryValue(Base64Variant b64variant)\n    throws IOException, JsonParseException\n{\n    JsonNode n = currentNode();\n    if (n != null) {\n        // First, if the node contains textual data, we decode it using the\n        // passed-in Base64Variant rather than relying on a default.\n        if (n.isTextual()) {\n            String text = n.asText();\n            try {\n                byte[] decoded;\n                String variantName = b64variant.getName();\n                if (\"MODIFIED-FOR-URL\".equals(variantName)) {\n                    decoded = java.util.Base64.getUrlDecoder().decode(text);\n                } else if (\"MIME-NO-LINEFEEDS\".equals(variantName)) {\n                    decoded = java.util.Base64.getDecoder().decode(text);\n                } else if (\"PEM\".equals(variantName) || \"MIME\".equals(variantName)) {\n                    decoded = java.util.Base64.getMimeDecoder().decode(text);\n                } else {\n                    decoded = java.util.Base64.getDecoder().decode(text);\n                }\n                return decoded;\n            } catch (IllegalArgumentException iae) {\n                throw new JsonParseException(null,\n                    \"Cannot access contents of TextNode as binary due to broken Base64 encoding: \" \n                    + iae.getMessage(), iae);\n            }\n        }\n        // For non-textual nodes (e.g. binary nodes), try the regular binaryValue()\n        byte[] data = n.binaryValue();\n        if (data != null) {\n            return data;\n        }\n        // Lastly, if node is a POJO node, see if it actually wraps a byte[]\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n    }\n    // No binary content found\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}