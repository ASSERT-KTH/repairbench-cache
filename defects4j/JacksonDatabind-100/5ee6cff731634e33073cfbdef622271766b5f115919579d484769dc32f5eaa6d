{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        JsonNode n = currentNode();\n        if (n == null) {\n            return null;\n        }\n\n        // First check: node might be explicitly binary\n        if (n.isBinary()) {\n            return n.binaryValue();\n        }\n\n        // Second check: textual node? decode using provided variant\n        if (n.isTextual()) {\n            final String str = n.textValue();\n            // [databind#2096]: Need to use the variant passed\n            try {\n                return b64variant.decode(str);\n            } catch (IllegalArgumentException e) {\n                // Provide better context for exception\n                 throw new JsonParseException(this, // parser\n                     String.format(\"Cannot access contents of %s as binary due to broken Base64 encoding: %s\",\n                             n.getClass().getName(), e.getMessage()),\n                     currentLocation(), // parser location (more accurate)\n                     e); // include cause for diagnostics\n             }\n        }\n\n        // Third check: POJO node wrapping byte[]?\n        if (n.isPojo()) {\n            Object ob = ((POJONode) n).getPojo();\n            if (ob instanceof byte[]) {\n                return (byte[]) ob;\n            }\n        }\n\n        // Otherwise, no binary representation available\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}