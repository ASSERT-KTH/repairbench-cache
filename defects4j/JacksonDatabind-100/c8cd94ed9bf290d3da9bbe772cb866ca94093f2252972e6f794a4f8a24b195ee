{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        // Multiple possibilities...\n        JsonNode n = currentNode();\n        if (n != null) {\n            // If we have embedded byte[] directly, let's use it\n            byte[] data = n.binaryValue();\n            if (data != null) {\n                return data;\n            }\n            // Or if we have plain POJO, see if it's byte[]\n            if (n.isPojo()) {\n                Object ob = ((POJONode) n).getPojo();\n                if (ob instanceof byte[]) {\n                    return (byte[]) ob;\n                }\n            }\n            // As per [databind#2096], handle textual node too\n            if (n.isTextual()) {\n                final String str = n.asText();\n                // Either null or empty string is fine: missing binary is null;\n                // empty String is empty binary array\n                if (str == null) {\n                     return null;\n                }\n                if (str.isEmpty()) {\n                    // 15-Aug-2018, tatu: Assuming this is ok; aligns with `JsonNode.binaryValue()`\n                    return new byte[0];\n                }\n                try {\n                    return b64variant.decode(str);\n                } catch (IllegalArgumentException e) {\n                    // Provide location details if possible? (curr scope doesn't have)\n                    // 15-Aug-2018, tatu: We could try constructing `JsonParseException`\n                    //   with location, but for now let's not add complexity, depend on\n                    //   existing helper(s)\n                    throw _constructError(\"Cannot access contents of TextNode as binary value: \"+e.getMessage(), e);\n                }\n            }\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}