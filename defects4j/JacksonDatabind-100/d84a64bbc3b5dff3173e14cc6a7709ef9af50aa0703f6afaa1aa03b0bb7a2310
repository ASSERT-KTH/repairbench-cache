{
    "generation": "    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        JsonNode n = currentNode();\n        if (n != null) {\n            // [databind#2096]: If it's a TextNode, coercion requires the specific variant\n            // for proper decoding. Other node types can rely on their default binaryValue()\n            // or POJO handling.\n            if (n.isTextual()) {\n                return ((TextNode) n).getBinaryValue(b64variant);\n            }\n\n            // For other node types (BinaryNode, POJONode, etc.), try binaryValue() first.\n            // BinaryNode's binaryValue() returns its internal bytes, which is correct.\n            // POJONode's binaryValue() returns null, which will then trigger the POJO check below.\n            byte[] data = n.binaryValue();\n            if (data != null) {\n                return data;\n            }\n\n            // Fallback for POJO node if binaryValue() didn't return byte[]\n            // (e.g., if it's a POJO containing byte[] that isn't directly exposed by binaryValue())\n            if (n.isPojo()) {\n                Object ob = ((POJONode) n).getPojo();\n                if (ob instanceof byte[]) {\n                    return (byte[]) ob;\n                }\n            }\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}