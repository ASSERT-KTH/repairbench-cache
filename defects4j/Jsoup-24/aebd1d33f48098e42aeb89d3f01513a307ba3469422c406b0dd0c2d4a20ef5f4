{
    "generation": "        void read(Tokeniser t, CharacterReader r) {\n            // HTML5 Spec: Tag Name state\n            // \"If the character is an ASCII upper alpha or ASCII lower alpha:\n            //  Append the lowercase version of the current input character to the current tag token's tag name.\"\n            // Jsoup's CharacterReader.consumeLetterSequence() handles consuming all consecutive letters at once.\n            if (r.matchesLetter()) {\n                t.tagPending.appendTagName(r.consumeLetterSequence().toLowerCase());\n                // After consuming letters, the reader is positioned at the first non-letter character.\n                // We then fall through to handle that non-letter character without returning.\n            }\n\n            // Now, process the current character. This character is either:\n            // 1. The first non-letter character found after consuming a letter sequence.\n            // 2. The initial character if the tag name did not start with a letter.\n            char c = r.current(); // Peek the character without consuming it yet.\n\n            switch (c) {\n                case '\\t': // Tab\n                case '\\n': // Line Feed\n                case '\\f': // Form Feed\n                case ' ':  // Space\n                    t.transition(BeforeAttributeName);\n                    r.advance(); // Consume the whitespace character.\n                    break;\n                case '/': // Solidus\n                    t.transition(SelfClosingStartTag);\n                    r.advance(); // Consume the '/' character.\n                    break;\n                case '>': // Greater-than sign\n                    t.emitTagPending(); // Emit the completed tag token.\n                    t.transition(Data); // Transition to Data state.\n                    r.advance(); // Consume the '>' character.\n                    break;\n                case Tokeniser.EOF: // End of File\n                    t.error(this); // Emit a parse error for unexpected EOF.\n                    t.emitTagPending(); // Emit the current (possibly incomplete) tag token.\n                    t.transition(Data); // Reconsume the character (which is EOF) in the Data state.\n                    // No advance needed as it's EOF.\n                    break;\n                case '\\0': // Null character\n                    t.error(this); // Emit a parse error for null character.\n                    r.advance(); // Consume the null character.\n                    t.tagPending.appendTagName(Tokeniser.replacementChar); // Append replacement character.\n                    // Remain in TagName state per spec.\n                    break;\n                default:\n                    // \"Otherwise\" case in HTML5 spec: Append the current input character to the current tag token's tag name.\n                    // This handles characters like hyphens, digits, colons, etc., which are part of the tag name but not letters.\n                    t.tagPending.appendTagName(r.consume()); // Consume and append the character to the tag name.\n                    // Remain in TagName state to continue building the tag name.\n                    break;\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}