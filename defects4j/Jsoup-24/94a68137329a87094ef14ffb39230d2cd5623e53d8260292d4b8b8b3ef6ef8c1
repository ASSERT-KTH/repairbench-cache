{
    "generation": "        void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name = r.consumeLetterSequence();\n                t.tagPending.appendTagName(name.toLowerCase());\n                // The `r.advance()` call here is redundant as `consumeLetterSequence()` already advances the reader.\n                // The `t.dataBuffer.append(name)` call is incorrect here. The tag name is built in `tagPending.tagName`.\n                // `dataBuffer` is typically used for accumulating character data for CharacterTokens, not for tag names.\n                return;\n            }\n\n            // This block handles characters that are not letters, signaling the end of a tag name\n            // or a malformed tag name.\n            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n                char c = r.consume();\n                switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        // According to the HTML5 spec for \"Tag name state\" and \"Script data end tag name state\":\n                        // If an unexpected character terminates the tag name, it should not be appended to the tag name\n                        // or data buffer. Instead, it should be re-consumed by the next state (usually Data or ScriptData).\n                        // The `anythingElse` method of the current state handles this logic (emitting the incomplete tag,\n                        // transitioning, and unconsuming the character).\n                        // Therefore, `t.dataBuffer.append(c)` is incorrect here.\n                        anythingElse(t, r);\n                        break;\n                }\n            } else {\n                // This path is taken if the current token is not an \"appropriate\" end tag\n                // (e.g., in <script> tags, if </scr doesn't match </script>).\n                // `anythingElse` correctly handles the fallback to emitting the tag as data and reconsuming.\n                anythingElse(t, r);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}