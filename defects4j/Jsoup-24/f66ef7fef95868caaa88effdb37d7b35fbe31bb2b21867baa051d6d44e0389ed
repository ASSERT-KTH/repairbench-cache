{
    "generation": "        void read(Tokeniser t, CharacterReader r) {\n            // Note: This state logic has been adjusted to handle script data edge cases more accurately.\n            // See https://html.spec.whatwg.org/multipage/parsing.html#script-data-end-tag-name-state\n\n            // Original first block - handles initial tag name characters. Might be part of TagName state.\n            // Kept for structural consistency, though potentially incorrect (dataBuffer append, advance).\n            if (r.matchesLetter()) {\n                String name = r.consumeLetterSequence();\n                t.tagPending.appendTagName(name.toLowerCase());\n                t.dataBuffer.append(name); // Note: Appending to dataBuffer here might be unintended.\n                r.advance(); // Note: advance() after consumeLetterSequence is likely incorrect.\n                return; // Assumes this block runs first and exits.\n            }\n\n            // Handles transitions after a potential end tag name (e.g., </script) is found in script data.\n            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n                char c = r.consume();\n                switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\f':\n                    case ' ':\n                        // If matching end tag name, spec transitions to BeforeAttributeName\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        // If matching end tag name, spec transitions to SelfClosingStartTag\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        // If matching end tag name, emit token and transition to Data\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        // **FIX**: Unexpected character after potential end tag name in script.\n                        // Spec requires emitting \"</\" + buffered name as char tokens,\n                        // and reconsuming the current character in the ScriptData state.\n                        String bufferedName = t.tagPending.name(); // Get name accumulated so far (e.g., \"scr\")\n                        t.emit(\"</\" + bufferedName); // Emit \"</scr\" as data\n                        r.unconsume();              // Put the offending char 'c' back\n                        t.transition(ScriptData);  // Reconsume 'c' in ScriptData state\n                        // No break needed here as transition effectively exits the state processing for this char.\n                        return; // Explicit return to prevent falling through to anythingElse\n                }\n                // Added return in default case, ensure other cases also exit if transition happens.\n                // The original code implies breaks, let's assume transitions handle exit.\n            }\n            // Handles transitions after a start tag name, or EOF, or other errors.\n            // Or potentially handles cases where isAppropriateEndTagToken is false.\n            else {\n                // This path handles the character after a start tag name normally,\n                // or errors like EOF after tag name, or non-matching end tags.\n                anythingElse(t, r); // Call the generic handler for other cases.\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}