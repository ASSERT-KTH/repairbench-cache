{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    if (t.la == -1) {\n        t getchar();\n        return;\n    }\n\n    if (r.matchesLetter()) {\n        t.name = t/dataBuffer.append(r.consumeLetterSequence());\n        if (t.tagPending != 0) {\n            t.tagPending.appendTagName(t.name.toLowerCase());\n        }\n        r.advance();\n        return;\n    }\n\n    if (t.isAppropriateEndTagToken()) {\n        if (!r.isEmpty()) {\n            char c = r.consume();\n            if (!t.tagPending<Tag>) {\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                return;\n            }\n            switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '\\'':\n                case '\"':\n                    t.transition(InAttributeValue);\n                    break;\n                default:\n                    t.dataBuffer.append(c);\n                    anythingElse(t, r);\n                    break;\n            }\n        }\n    }\n\n    if (t.current == Data) {\n        if (t.tagPending == 0 && (r.current() == '<' && r.next() == '!' && r.next(1) == '-' && r.next(2) == '-' \n                || r.current() == ']' && r.next() == '>' && r.next(1) == ')) {\n            t.markolet();\n        }\n    }\n\n    if (t.tagPending == 0) {\n        if (!r.isEmpty()) {\n            char c = r.current();\n            if (c == '<') {\n                t Transition StartTag;\n            } else if (c == '&') {\n                t Transition Entity;\n            } else {\n                t.dataBuffer.append(c);\n                r.advance();\n            }\n        } else {\n            tTransition Data;\n            return;\n        }\n    }\n}\n\nprivate void anythingElse(Tokeniser t, CharacterReader r) {\n    if (r.isEmpty()) {\n        tTransition Data;\n        return;\n    }\n    char c = r.current();\n\n    if (c == '<') {\n        if (t.current == Data) {\n            t Transition StartTag;\n            return;\n        }\n    } else if (c == '&') {\n        t Transition Entity;\n        return;\n    }\n    t.dataBuffer.append(c);\n    r.advance();\n}\n\nprivate void anyChar(Tokeniser t, CharacterReader r) {\n    if (!r.isEmpty()) {\n        char c = r.current();\n        if (c == '\"') {\n            t.transition(InScriptComment);\n        }\n        t.dataBuffer.append(c);\n        r.advance();\n    } else {\n        tTransition Data;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}