{
    "generation": "        boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n            // Perform search/comparison case-insensitively, but use original node name for pops/implied.\n            String endTagLower = t.asEndTag().name(); // Use token's lowercase name (e.g. \"x\")\n            ArrayList<Element> stack = tb.getStack();\n            for (int pos = stack.size() -1; pos >= 0; pos--) {\n                Element node = stack.get(pos);\n                String nodeNameOriginal = node.nodeName(); // Get node's original case name (e.g. \"X\")\n                String nodeNameLower = ParseSettings.normalName(nodeNameOriginal); // Lowercase the node name for comparison\n\n                if (nodeNameLower.equals(endTagLower)) {\n                    // Match found based on lowercase comparison.\n                    // Use the node's original case name for downstream ops.\n                    tb.generateImpliedEndTags(nodeNameOriginal);\n                    if (!node.nodeName().equals(tb.currentElement().nodeName())) // Check if match != current node\n                        tb.error(this);\n                    tb.popStackToClose(nodeNameOriginal); // Pop using the node's original case name\n                    break; // Found, break loop\n                } else {\n                    // Check if node is special, case-insensitively\n                    if (StringUtil.inSorted(nodeNameLower, Constants.SpecialTags)) {\n                        tb.error(this);\n                        return false; // Fail processing this tag\n                    }\n                    // otherwise continue searching up stack\n                }\n            }\n            // If loop completes, tag was not found on stack (or stack was empty) - ignore tag\n            return true; // Handled (ignored)\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}