{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous (literal) types.\n  if (!isAnonymousType()) {\n    return;\n  }\n  // Handle the case where the constraint object is a record type.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      // Only infer props that weren't explicitly declared in the literal.\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        // If the literal doesn't even have the prop, allow undefined.\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}