{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match contraints on anonymous types.\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking any each property on the record and trying to match\n  // properties on this object.\n  if (constraintObj.isRecordType()) {\n    // This map will be used to avoid adding the same property twice.\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        if (hasProperty(prop)) {\n          // The property exists but has no declared type.\n          defineInferredProperty(prop, propType, null);\n        } else {\n          // The property does not exist, so declare it with an optional type.\n          JSType optionalType = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          defineInferredProperty(prop, optionalType, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}