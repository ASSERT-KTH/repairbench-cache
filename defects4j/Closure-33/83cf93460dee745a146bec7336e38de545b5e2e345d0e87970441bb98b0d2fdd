{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n\n  // Handle the case where the constraint object is a record type.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      // Only add properties that do not already exist on this object, to avoid polluting\n      // non-empty object literals with record type constraints.\n      if (!hasProperty(prop)) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n            .getLeastSupertype(propType);\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}