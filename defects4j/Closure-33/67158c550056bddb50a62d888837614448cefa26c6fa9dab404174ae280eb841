{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      JSType voidType = getNativeType(JSTypeNative.VOID_TYPE);\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          if (!hasProperty(prop)) {\n            // Check if the constraint's property type includes undefined\n            boolean isOptional = false;\n            if (propType.isUnionType()) {\n              UnionType unionPropType = (UnionType) propType;\n              isOptional = unionPropType.getAlternates().contains(voidType);\n            } else {\n              isOptional = propType.isEquivalentTo(voidType);\n            }\n            if (isOptional) {\n              JSType typeToInfer = voidType.getLeastSupertype(propType);\n              defineInferredProperty(prop, typeToInfer, null);\n            }\n            // If not optional, do not add the property\n          } else {\n            // Property exists, infer the type as the constraint's type\n            defineInferredProperty(prop, propType, null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}