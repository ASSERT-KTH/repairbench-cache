{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          // If the property is not explicitly declared on 'this' (meaning it's an inferred property).\n          if (hasProperty(prop)) {\n            // If 'this' already has the property (it's present in the object literal),\n            // then we infer its type to match the constraint's property type.\n            // Any potential type mismatch here will be caught by the caller during\n            // assignability checks.\n            defineInferredProperty(prop, propType, null);\n          } else {\n            // If 'this' does NOT have the property at all (it's missing from the object literal).\n            // We only infer this property if the constraint itself declares it as optional.\n            // If the constraint requires this property, and it's missing, then 'this'\n            // simply does not match the constraint, and we should not add it as an\n            // optional property to mask the error. The caller will report the mismatch.\n            if (constraintObj.isPropertyOptional(prop)) {\n              defineInferredProperty(prop, propType, null);\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}