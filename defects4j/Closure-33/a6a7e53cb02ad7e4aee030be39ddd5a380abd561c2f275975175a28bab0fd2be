{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        // If the property is not declared on this object type AND it doesn't\n        // have this property either, then declare it.\n        // We must check isPropertyTypeDeclared first, so that we don't\n        // add optional properties defined on super types.\n        if (!isPropertyTypeDeclared(prop) && !hasProperty(prop)) {\n          // Infer the property type from the constraint, making it optional\n          // (because it was missing on the object literal).\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n        // Do not define inferred properties if the property already exists\n        // on the object literal (even if not explicitly declared).\n        // This preserves the original inferred type of the literal.\n        // Compatibility checks will happen later during unification.\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}