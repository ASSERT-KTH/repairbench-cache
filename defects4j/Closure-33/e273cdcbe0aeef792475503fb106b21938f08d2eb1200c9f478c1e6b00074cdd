{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (hasProperty(prop)) {\n          JSType declaredType = getPropertyType(prop);\n          // When the declared type is undefined, we use the inferred type.\n          // Otherwise, take the greatest supertype to ensure compatibility.\n          typeToInfer = getMostSpecificType(declaredType, propType);\n        } else {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}