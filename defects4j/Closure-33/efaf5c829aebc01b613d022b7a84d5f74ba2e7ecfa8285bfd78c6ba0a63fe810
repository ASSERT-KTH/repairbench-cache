{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n    if (!isAnonymousType()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            // Ensure we handle nullable types correctly by using the least supertype with VOID_TYPE.\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          } else {\n            // If the property already exists, ensure the inferred type is compatible with the existing type.\n            JSType existingType = getPropertyType(prop);\n            typeToInfer = existingType.getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}