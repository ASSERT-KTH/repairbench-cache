{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  // If this object has a reference (i.e. a name), then don\u2019t try to add inferred\n  // properties since it isn\u2019t an anonymous object literal.\n  if (hasReferenceName()) {\n    return;\n  }\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          // For properties that are not present on this anonymous type,\n          // make them optional by unioning with the void type.\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}