{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  // When the constraint is a record type, we \u201cpatch in\u201d any missing property\n  // by inferring its type from the constraint. Previously, if the property was missing\n  // we unioned its type with VOID_TYPE, which made the property optional and caused\n  // spurious warnings. The fix is to simply use the constraint\u2019s property type.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      if (!isPropertyTypeDeclared(prop)) {\n        defineInferredProperty(prop, constraintObj.getPropertyType(prop), null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}