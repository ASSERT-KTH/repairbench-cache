{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n    // The generic 'Object' type (JSTypeNative.OBJECT_TYPE) should not have\n    // properties inferred onto it by constraints. If this object is the\n    // generic 'Object' type, we return early to prevent modifying it.\n    // This check prevents side-effects of modifying the global Object type.\n    if (this.isNativeObjectType() && this.equals(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}