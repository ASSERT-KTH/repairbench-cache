{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                            .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    }\n\n    // Also handle the case where the constraint object is a union type.\n    if (constraintObj.isUnionType()) {\n        for (JSType alternate : constraintObj.getUnionMembers()) {\n            if (alternate.isRecordType()) {\n                for (String prop : alternate.toMaybeObjectType().getOwnPropertyNames()) {\n                    JSType propType = alternate.toMaybeObjectType().getPropertyType(prop);\n                    if (!isPropertyTypeDeclared(prop)) {\n                        JSType typeToInfer = propType;\n                        if (!hasProperty(prop)) {\n                            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                                    .getLeastSupertype(propType);\n                        }\n                        defineInferredProperty(prop, typeToInfer, null);\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}