{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                JSType typeToInfer = propType;\n\n                // If the property doesn't exist on this object, determine the type to infer.\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n                }\n\n                // Define the inferred property type.\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}