{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          // If the property is not present on this object, and the constraint\n          // property is not UNKNOWN, then make the inferred type optional.\n          // This matches the behavior of properties being optional if not explicitly\n          // defined in an object literal, and allows for structural matching\n          // against partial record types.\n          // The check for !typeToInfer.isUnknownType() is crucial to prevent\n          // UNKNOWN|undefined types, which can lead to unwanted warnings.\n          if (!hasProperty(prop) && !typeToInfer.isUnknownType()) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}