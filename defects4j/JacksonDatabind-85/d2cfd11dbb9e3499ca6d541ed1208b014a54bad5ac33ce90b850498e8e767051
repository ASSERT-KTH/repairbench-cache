{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    // First, check for explicit JsonFormat overrides\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        // No annotation: use the global (configured) date format if possible\n        DateFormat df = serializers.getConfig().getDateFormat();\n        if (df instanceof SimpleDateFormat) {\n            return withFormat(Boolean.FALSE, (SimpleDateFormat) df.clone());\n        }\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    if ((shape == JsonFormat.Shape.STRING)\n            || format.hasPattern()\n            || format.hasLocale()\n            || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                ? format.getPattern()\n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // Fallback: if no explicit pattern was found in the annotation, try using\n    // the global DateFormat from the provider's configuration.\n    DateFormat df = serializers.getConfig().getDateFormat();\n    if (df instanceof SimpleDateFormat) {\n        return withFormat(Boolean.FALSE, (SimpleDateFormat) df.clone());\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}