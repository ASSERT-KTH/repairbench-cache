{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // [databind#1648]: contextual default format should be used when shape is STRING\n        // and no specific pattern, locale, or timezone is defined by @JsonFormat.\n        if ((shape == JsonFormat.Shape.STRING)\n                && !format.hasPattern() && !format.hasLocale() && !format.hasTimeZone()) {\n            // Use the DateFormat configured globally (via ObjectMapper)\n            return withFormat(Boolean.FALSE, serializers.getConfig().getDateFormat());\n        }\n\n        // If a specific pattern, locale, or timezone is provided by @JsonFormat,\n        // or if shape is STRING and any of these are present,\n        // create a new SimpleDateFormat based on these overrides.\n        // (This also covers cases where shape is not STRING but overrides are present)\n        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise (e.g. shape is not numeric, not STRING with overrides, not STRING\n        // with implicit default, and no pattern/locale/timezone override),\n        // return the original serializer. This covers shapes like ARRAY, OBJECT etc.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}