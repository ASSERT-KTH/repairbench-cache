{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        \n        // Check if we need to use the serializer's default date format\n        if (format == null) {\n            DateFormat serializerDateFormat = serializers.getDateFormat();\n            if (serializerDateFormat instanceof SimpleDateFormat) {\n                SimpleDateFormat serializerSdf = (SimpleDateFormat) serializerDateFormat;\n                String pattern = serializerSdf.toPattern();\n                Locale locale = serializerSdf.getLocale();\n                TimeZone tz = serializerSdf.getTimeZone();\n                \n                // Create a new SimpleDateFormat with these settings\n                SimpleDateFormat df = new SimpleDateFormat(pattern, locale);\n                df.setTimeZone(tz);\n                \n                // Since we're using the serializer's format, which is not specific to the property,\n                // we proceed to set up the df and return it.\n                return withFormat(Boolean.FALSE, df);\n            } else {\n                // Can't handle non-SimpleDateFormat, return this\n                return this;\n            }\n        }\n        \n        // Proceed with the existing logic using 'format'\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                        || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                            ? format.getPattern()\n                            : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n\n\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n//            serializers.reportBadDefinition(handledType(), String.format(\n            // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}