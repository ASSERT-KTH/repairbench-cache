{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    // string\u2010based output: honor annotation overrides, but if no explicit pattern\n    // use provider's custom DateFormat (if it's a SimpleDateFormat) or fall back\n    // to ISO8601\n    if (shape == JsonFormat.Shape.STRING\n            || format.hasPattern()\n            || format.hasLocale()\n            || format.hasTimeZone()) {\n        DateFormat base = serializers.getConfig().getDateFormat();\n        final String pattern;\n        if (format.hasPattern()) {\n            pattern = format.getPattern();\n        } else if (base instanceof SimpleDateFormat) {\n            pattern = ((SimpleDateFormat) base).toPattern();\n        } else {\n            pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        }\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        TimeZone tz = format.getTimeZone();\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // otherwise no change\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}