{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    // Try to get any annotation-based override, if one exists\n    JsonFormat.Value format = (property == null) ? null : findFormatOverrides(serializers, property, handledType());\n    \n    // No explicit annotation: check for a custom default DateFormat from the provider\n    if (format == null) {\n        DateFormat df = serializers.getConfig().getDateFormat();\n        if (df instanceof SimpleDateFormat) {\n            // Use textual format (non-timestamp) with the custom default format\n            return withFormat(Boolean.FALSE, (SimpleDateFormat) df);\n        }\n        return this;\n    }\n    \n    // If annotation forces numeric (timestamp) shape, use that setting.\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    \n    // For String shape, or if any of pattern, locale or timezone is specified,\n    // create a SimpleDateFormat with the proper settings.\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() \n            || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern() \n                ? format.getPattern() \n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale() \n                ? format.getLocale() \n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    \n    // Otherwise, no customization needed; return as-is.\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}