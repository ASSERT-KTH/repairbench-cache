{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        // no annotation override: if user configured a non-StdDateFormat globally, use it\n        DateFormat df = serializers.getConfig().getDateFormat();\n        if (!(df instanceof StdDateFormat)) {\n            return withFormat(Boolean.FALSE, df);\n        }\n        return this;\n    }\n    // Simple case: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // Custom pattern/locale/timezone or forced STRING\n    if (shape == JsonFormat.Shape.STRING\n            || format.hasPattern()\n            || format.hasLocale()\n            || format.hasTimeZone()) {\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        String pattern = format.hasPattern() ? format.getPattern()\n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // no relevant override: default\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}