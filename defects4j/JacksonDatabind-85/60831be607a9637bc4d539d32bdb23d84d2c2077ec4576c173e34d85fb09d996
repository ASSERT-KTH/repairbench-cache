{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // Check if a pattern is provided; if not, use a default without timezone\n        if (shape == JsonFormat.Shape.STRING) {\n            if (!format.hasPattern() && !format.hasLocale() && !format.hasTimeZone()) {\n                // Use the default date format without timezone\n                SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'X'HH:mm:ss\");\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n\n        // Existing logic for handling custom patterns or additional format details\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                            ? format.getPattern()\n                            : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, no changes needed\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}