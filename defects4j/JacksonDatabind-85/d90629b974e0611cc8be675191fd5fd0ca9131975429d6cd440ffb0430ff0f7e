{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = (property == null)\n            ? null : findFormatOverrides(serializers, property, handledType());\n    // Determine whether we should use timestamps based on global settings.\n    boolean useTimestamp = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    SimpleDateFormat df = null;\n    \n    if (format != null) {\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(true, null);\n        }\n        // Either an explicit declaration of String, or existence of a pattern/locale/timezone overrides:\n        if (shape == JsonFormat.Shape.STRING\n                || format.hasPattern()\n                || format.hasLocale()\n                || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern() \n                    ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                    ? format.getLocale() : serializers.getLocale();\n            df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            useTimestamp = false;\n        }\n    } else {\n        // No format overrides: if global setting indicates textual dates, use the configured DateFormat.\n        if (!useTimestamp) {\n            DateFormat configFormat = serializers.getConfig().getDateFormat();\n            if (configFormat instanceof SimpleDateFormat) {\n                df = (SimpleDateFormat) configFormat.clone();\n            } else {\n                df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale());\n                df.setTimeZone(serializers.getTimeZone());\n            }\n        }\n    }\n    return withFormat(useTimestamp, df);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}