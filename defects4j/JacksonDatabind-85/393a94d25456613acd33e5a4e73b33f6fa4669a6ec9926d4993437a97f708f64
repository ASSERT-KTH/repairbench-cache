{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        // This can also be null if there's no annotation and it's using the default formatter\n        if (format == null) {\n            return this;\n        }\n        \n        // Check if the default format is a SimpleDateFormat\n        DateFormat df = serializers.getDateFormat();\n        if (df instanceof SimpleDateFormat && format.hasPattern()) {\n            return withFormat(Boolean.FALSE, df);\n        }\n        \n        // Continue with existing logic for numeric and string shapes\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                        || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                            ? format.getPattern()\n                            : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat sdf = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            sdf.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, sdf);\n        }\n\n        // Otherwise, return this\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}