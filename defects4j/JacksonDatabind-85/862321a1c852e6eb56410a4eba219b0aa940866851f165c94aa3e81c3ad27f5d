{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // Separate cases where explicit format properties are given vs. just shape.\n        // First: custom pattern, locale, or timezone will override things, forcing SimpleDateFormat\n        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601; // Default to ISO8601 if pattern not given but other format properties are\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, if only JsonFormat.Shape.STRING is specified (without pattern/locale/timezone),\n        // we should use the default DateFormat from ObjectMapper/SerializerProvider.\n        if (shape == JsonFormat.Shape.STRING) {\n            // Force string representation, but rely on ObjectMapper's DateFormat by passing null\n            return withFormat(Boolean.FALSE, null);\n        }\n        \n        // In other cases (e.g. Shape.ANY or unrecognized shapes, or no specific overrides\n        // beyond default behavior), return current instance.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}