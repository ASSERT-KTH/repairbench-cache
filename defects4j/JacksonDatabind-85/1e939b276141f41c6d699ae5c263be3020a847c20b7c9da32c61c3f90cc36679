{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // If not numeric, must be String compatible shape.\n        // Then, need to check if any overrides defined via annotation:\n        // logical OR means that if any of these are defined, will create\n        // new instance with specified configuration\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                || format.hasLocale() || format.hasTimeZone()) {\n\n            // Locale override takes precedence over pattern/timezone\n            final Locale loc = format.hasLocale()\n                    ? format.getLocale()\n                    : serializers.getLocale();\n\n            // Pattern override takes next precedence\n            String pattern;\n            if (format.hasPattern()) {\n                pattern = format.getPattern();\n            } else {\n                // If not specified via annotation, maybe we have specific default format?\n                DateFormat df = serializers.getDateFormat();\n                // If default is `SimpleDateFormat`, great; otherwise can not change easily\n                if (df instanceof SimpleDateFormat) {\n                    // TODO: Looks like we probably should clone, but could also\n                    // cache these variations? Let's clone for now.\n                    pattern = ((SimpleDateFormat) df).toPattern();\n                } else {\n                    // If not, default back to default\n                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                }\n            }\n\n            // Timezone override has lowest precedence\n            TimeZone tz = format.getTimeZone();\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            // Need to create a new SimpleDateFormat using specified pattern, locale, timezone\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, if no changes based on format, return original\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}