{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n    // First: custom pattern will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                    || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : null;\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        if (pattern != null) {\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        } else {\n            // [databind#1648] - Use contextual default format\n            DateFormat baseFormat = serializers.getConfig().getDateFormat();\n            if (baseFormat instanceof SimpleDateFormat) {\n                // Create a copy and set timezone/locale if needed\n                SimpleDateFormat sdf = (SimpleDateFormat) baseFormat.clone();\n                sdf.setLenient(false);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                sdf.setTimeZone(tz);\n                if (format.hasLocale()) {\n                    // Re-create format with locale\n                    sdf = new SimpleDateFormat(sdf.toPattern(), loc);\n                    sdf.setTimeZone(tz);\n                }\n                return withFormat(Boolean.FALSE, sdf);\n            }\n        }\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}