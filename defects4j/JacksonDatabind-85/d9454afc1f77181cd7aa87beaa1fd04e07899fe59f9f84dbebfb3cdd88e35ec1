{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    // If we are to serialize as a String (or custom formatting is requested)\n    if ((shape == JsonFormat.Shape.STRING)\n            || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n        SimpleDateFormat df;\n        // First, try to use the provider's default DateFormat if available:\n        DateFormat providerFormat = serializers.getConfig().getDateFormat();\n        if (!format.hasPattern() && (providerFormat instanceof SimpleDateFormat)) {\n            df = (SimpleDateFormat) ((SimpleDateFormat) providerFormat).clone();\n        } else {\n            // Determine the pattern:\n            String pattern;\n            if (format.hasPattern()) {\n                pattern = format.getPattern();\n            } else if (providerFormat instanceof SimpleDateFormat) {\n                pattern = ((SimpleDateFormat) providerFormat).toPattern();\n            } else {\n                pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            }\n            Locale locale = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n            df = new SimpleDateFormat(pattern, locale);\n        }\n        // Determine timezone: annotation override wins, otherwise provider\u2019s timezone:\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}