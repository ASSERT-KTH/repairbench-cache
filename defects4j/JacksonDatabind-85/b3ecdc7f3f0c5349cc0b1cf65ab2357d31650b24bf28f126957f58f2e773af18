{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                        || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                            ? format.getPattern()\n                            : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n        // If we have a default date format but no explicit pattern, use it\n        DateFormat df = serializers.getConfig().getDateFormat();\n        if (df != null && !(df instanceof SimpleDateFormat)) {\n            // Handle non-SimpleDateFormat case (like StdDateFormat)\n            if (df instanceof StdDateFormat) {\n                // Clone or create a new instance?\n                StdDateFormat stdFmt = (StdDateFormat)df;\n                stdFmt = stdFmt.clone(); // try cloning\n                stdFmt.setTimeZone(serializers.getTimeZone());\n                stdFmt.setLocale(serializers.getLocale());\n                // Not sure how to properly handle this case, but we'll try to use it\n                return withFormat(Boolean.FALSE, stdFmt);\n            }\n            // For other formats, we can't configure them, so we just use default\n            return this;\n        }\n\n        // Handle case where date format wasn't configured (default DF is ISO8601)\n        // but we might want to return a serial format using a simple format?\n        // Not sure, but let's return the df here\n        if (df != null && df instanceof SimpleDateFormat) {\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise return current with shape-based config:\n        return withFormat(null, null); // will force default handling\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}