{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    // first: if forced to use numeric timestamps\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    // next: explicit pattern override always wins\n    if (format.hasPattern()) {\n        String pattern = format.getPattern();\n        Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // then: locale/time\u2010zone overrides on the configured DateFormat\n    if (format.hasLocale() || format.hasTimeZone()) {\n        DateFormat base = serializers.getConfig().getDateFormat();\n        DateFormat df;\n        if (base instanceof SimpleDateFormat) {\n            // clone user\u2010configured SimpleDateFormat\n            df = (DateFormat) ((SimpleDateFormat) base).clone();\n        } else if (base instanceof StdDateFormat) {\n            // clone StdDateFormat with new locale/timezone\n            StdDateFormat std = (StdDateFormat) base;\n            Locale loc = format.hasLocale() ? format.getLocale() : std.getLocale();\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n            df = std.withLocale(loc).withTimeZone(tz);\n        } else {\n            // fallback to ISO\u20108601 if we can't clone\n            Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n            df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n            df.setTimeZone(tz);\n        }\n        // ensure timezone is set\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // finally: explicit STRING shape means \"use standard config dateFormat\"\n    if (shape == JsonFormat.Shape.STRING) {\n        return withFormat(Boolean.FALSE, null);\n    }\n    // otherwise no change\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}