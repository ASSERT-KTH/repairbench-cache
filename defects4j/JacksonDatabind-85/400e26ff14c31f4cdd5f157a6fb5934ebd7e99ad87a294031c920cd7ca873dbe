{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n    // First: custom pattern will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                    || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // 08-Jun-2017, tatu: The tricky case is here: format overrides exist\n    // (may specify timezone etc), but there's no explicit pattern, nor shape override.\n    // In this case, if provider has a DateFormat, and it's a SimpleDateFormat,\n    // and no explicit pattern override, clone it and override timezone.\n    DateFormat providerFormat = serializers.getConfig().getDateFormat();\n    if (providerFormat instanceof SimpleDateFormat) {\n        SimpleDateFormat base = (SimpleDateFormat) providerFormat;\n        SimpleDateFormat df = new SimpleDateFormat(base.toPattern(), base.getLocale());\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : base.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // Otherwise, leave as is\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}