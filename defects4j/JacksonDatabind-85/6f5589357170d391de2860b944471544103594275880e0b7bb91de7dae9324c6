{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // First: numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    // Custom pattern/locale/timezone or explicit STRING shape:\n    if (shape == JsonFormat.Shape.STRING\n            || format.hasPattern()\n            || format.hasLocale()\n            || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        String pattern = format.hasPattern()\n                ? format.getPattern()\n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // If user supplied a custom DateFormat on the ObjectMapper (not StdDateFormat),\n    // use that for string serialization\n    DateFormat custom = serializers.getConfig().getDateFormat();\n    if (custom != null && !(custom instanceof StdDateFormat)) {\n        // clone for thread-safety\n        DateFormat df = (DateFormat) custom.clone();\n        TimeZone tz = format.hasTimeZone()\n                ? format.getTimeZone()\n                : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // Otherwise, no changes: use default StdDateFormat or default handling\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}