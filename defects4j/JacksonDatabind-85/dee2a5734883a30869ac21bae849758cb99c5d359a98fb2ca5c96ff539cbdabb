{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // With [databind#1648], this gets bit tricky..\n    // First: custom pattern/locale/timezone will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                    || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : null;\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        if (pattern != null) {\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n        // [databind#1648]: If no pattern, must use default DateFormat from provider,\n        // contextualized with correct TimeZone and Locale if possible.\n        DateFormat base = serializers.getConfig().getDateFormat();\n        DateFormat df;\n        if (base instanceof SimpleDateFormat) {\n            // Must re-create for Locale/Timezone\n            SimpleDateFormat std = (SimpleDateFormat) base;\n            SimpleDateFormat sdf = new SimpleDateFormat(std.toPattern(), loc);\n            sdf.setTimeZone(tz);\n            df = sdf;\n        } else if (base instanceof StdDateFormat) {\n            // StdDateFormat is immutable, but it supports withLocale()/withTimeZone()\n            df = ((StdDateFormat) base)\n                    .withTimeZone(tz)\n                    .withLocale(loc);\n        } else {\n            // For other types, try to clone and set timezone, but nothing for locale\n            try {\n                df = (DateFormat) base.clone();\n                df.setTimeZone(tz);\n            } catch (Exception e) {\n                throw new IllegalArgumentException(\"Unable to clone DateFormat of type \" + base.getClass().getName(), e);\n            }\n        }\n        return withFormat(Boolean.FALSE, df);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}