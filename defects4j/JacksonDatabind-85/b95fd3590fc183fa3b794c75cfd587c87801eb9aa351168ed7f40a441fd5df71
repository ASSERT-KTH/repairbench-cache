{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format != null) {\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n        // If we have a String shape, or explicit formatting overrides, build\n        // a SimpleDateFormat with the given pattern, locale and timezone.\n        if ((shape == JsonFormat.Shape.STRING)\n                || format.hasPattern()\n                || format.hasLocale()\n                || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                    ? format.getPattern()\n                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                    ? format.getLocale()\n                    : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            // Use non-timestamp (i.e. textual) formatting with our builder:\n            return withFormat(Boolean.FALSE, df);\n        }\n    }\n    // No explicit format overrides found.\n    // Check if the global DateFormat is something other than the default StdDateFormat.\n    DateFormat df = serializers.getConfig().getDateFormat();\n    if (!(df instanceof StdDateFormat)) {\n        return withFormat(Boolean.FALSE, df);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}