{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n    // First: custom pattern will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                    || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // [databind#1648]: Support contextual DateFormat (from provider) when shape is STRING but no pattern/locale/tz specified\n    // If we are asked to output as STRING but no other format features are specified,\n    // we should honor the provider's DateFormat (including timezone/locale).\n    if (shape == JsonFormat.Shape.STRING) {\n        DateFormat df = serializers.getConfig().getDateFormat();\n        // Defensive: if default, leave as-is, otherwise wrap withFormat\n        if (df != null && !(df instanceof StdDateFormat && ((StdDateFormat) df).isDefault())) {\n            // Need to clone to prevent thread-safety issues with SimpleDateFormat, unless already handled\n            DateFormat clonedDf;\n            if (df instanceof SimpleDateFormat) {\n                clonedDf = (DateFormat) ((SimpleDateFormat) df).clone();\n            } else {\n                clonedDf = df;\n            }\n            return withFormat(Boolean.FALSE, clonedDf);\n        }\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}