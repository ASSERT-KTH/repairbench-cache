{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        // No annotation overrides: use global settings\n        if (serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n            return withFormat(Boolean.TRUE, null);\n        } else {\n            DateFormat df = serializers.getConfig().getDateFormat();\n            if (df instanceof SimpleDateFormat) {\n                return withFormat(Boolean.FALSE, (SimpleDateFormat) df.clone());\n            }\n            return this;\n        }\n    }\n    // If override indicates numeric shape, use timestamp.\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    // If textual (or if a custom pattern, locale, or timezone was provided),\n    // build a SimpleDateFormat based on annotation settings.\n    if ((shape == JsonFormat.Shape.STRING)\n            || format.hasPattern()\n            || format.hasLocale()\n            || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                ? format.getPattern()\n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // Otherwise, no changes are required.\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}