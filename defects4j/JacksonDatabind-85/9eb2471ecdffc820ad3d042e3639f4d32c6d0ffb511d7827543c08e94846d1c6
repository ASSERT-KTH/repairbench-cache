{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        // No per\u2010property overrides: if the user has supplied a custom DateFormat\n        // (i.e. not the default StdDateFormat), use it for bean\u2010property serialization\n        DateFormat df = serializers.getConfig().getDateFormat();\n        if (df != null && !(df instanceof StdDateFormat)) {\n            DateFormat dfClone;\n            try {\n                dfClone = (DateFormat) df.clone();\n            } catch (CloneNotSupportedException e) {\n                dfClone = df;\n            }\n            return withFormat(Boolean.FALSE, dfClone);\n        }\n        return this;\n    }\n    // If there _are_ overrides, honor shape & pattern/time\u2010zone/locale\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    if (format.hasPattern() || format.hasLocale()\n            || format.hasTimeZone() || shape == JsonFormat.Shape.STRING) {\n        TimeZone tz = format.getTimeZone();\n        String pattern = format.hasPattern()\n                ? format.getPattern()\n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df2 = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df2.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df2);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}