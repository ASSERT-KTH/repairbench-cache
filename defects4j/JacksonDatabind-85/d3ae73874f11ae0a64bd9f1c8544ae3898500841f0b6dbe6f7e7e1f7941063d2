{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // This section handles string-based date serialization, considering explicit\n        // @JsonFormat overrides and ObjectMapper's default DateFormat.\n\n        // We need to create a new serializer instance if any of these conditions are true:\n        // - An explicit pattern is specified via @JsonFormat.\n        // - An explicit locale or timezone is specified via @JsonFormat.\n        // - The shape is explicitly STRING (even without other overrides), which might require\n        //   using the ObjectMapper's default DateFormat if it's a SimpleDateFormat.\n        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone() || shape == JsonFormat.Shape.STRING)\n        {\n            TimeZone tz = format.getTimeZone();\n            Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n\n            String pattern;\n            \n            // Determine the pattern to use:\n            // 1. Explicit pattern from @JsonFormat annotation takes highest precedence.\n            if (format.hasPattern()) {\n                pattern = format.getPattern();\n            } else {\n                // 2. If no explicit pattern, try to use the pattern from ObjectMapper's default DateFormat,\n                //    but only if it's a SimpleDateFormat (as we need its pattern string).\n                DateFormat defaultDateFormat = serializers.getDateFormat();\n                if (defaultDateFormat instanceof SimpleDateFormat) {\n                    pattern = ((SimpleDateFormat) defaultDateFormat).toPattern();\n                } else {\n                    // 3. Fallback: If no explicit pattern and ObjectMapper's default is not SimpleDateFormat,\n                    //    use the standard ISO-8601 pattern.\n                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                }\n            }\n\n            // Create a new SimpleDateFormat with the determined pattern, locale, and timezone.\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, no specific contextual format determined that requires a new SimpleDateFormat.\n        // The existing serializer instance's configuration (e.g., using StdDateFormat implicitly,\n        // or a pre-configured _customFormat that still applies) should be sufficient.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}