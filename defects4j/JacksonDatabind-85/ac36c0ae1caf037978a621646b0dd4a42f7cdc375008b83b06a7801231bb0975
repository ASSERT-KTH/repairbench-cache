{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n\n        // `findFormatOverrides` retrieves JsonFormat annotation values\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        \n        // 1. Handle numeric timestamp serialization (highest priority if specified)\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n        }\n\n        // Determine effective Locale and TimeZone for contextualization,\n        // prioritizing annotation overrides, then serializers' context.\n        Locale loc = (format != null && format.hasLocale())\n                        ? format.getLocale() : serializers.getLocale();\n        TimeZone tz = (format != null && format.hasTimeZone())\n                        ? format.getTimeZone() : serializers.getTimeZone();\n\n        // 2. Handle explicit pattern override from JsonFormat annotation\n        if (format != null && format.hasPattern()) {\n            final String pattern = format.getPattern();\n            // Always use SimpleDateFormat for explicit patterns\n            SimpleDateFormat simpleDf = new SimpleDateFormat(pattern, loc);\n            if (tz != null) {\n                simpleDf.setTimeZone(tz);\n            }\n            // `withFormat` creates a new serializer instance with the specified format\n            return withFormat(Boolean.FALSE, simpleDf);\n        }\n\n        // 3. Adapt existing DateFormat for contextual locale/timezone if needed.\n        // This applies when:\n        //   a) format.hasLocale() or format.hasTimeZone() is true (annotation override for TZ/Locale)\n        //   b) Or, if no format overrides, but the current serializer's locale/timezone differs\n        //      from the serializers' provider context (default contextualization).\n\n        // Get the base DateFormat instance for this serializer.\n        // It could be from a global ObjectMapper.setDateFormat() (`_customDateFormat`)\n        // or the default StdDateFormat (`serializers.getConfig().getDateFormat()`).\n        DateFormat df = _customDateFormat;\n        if (df == null) {\n            df = serializers.getConfig().getDateFormat();\n        }\n\n        // Check if current DateFormat needs to be adapted for timezone or locale differences.\n        // This is crucial for handling [databind#1648] where only TZ/Locale is specified.\n        boolean timezoneDiffers = (tz != null && !tz.equals(df.getTimeZone()));\n        boolean localeDiffers = (loc != null && !loc.equals(df.getLocale()));\n\n        if (timezoneDiffers || localeDiffers) {\n            if (df instanceof SimpleDateFormat) {\n                // SimpleDateFormat needs cloning and re-setting properties\n                SimpleDateFormat simpleDf = (SimpleDateFormat) df.clone();\n                if (tz != null) {\n                    simpleDf.setTimeZone(tz);\n                }\n                if (loc != null && !loc.equals(simpleDf.getLocale())) {\n                    // SimpleDateFormat's locale is immutable, must reconstruct if it changes\n                    simpleDf = new SimpleDateFormat(simpleDf.toPattern(), loc);\n                    if (tz != null) { // Re-apply timezone if reconstructed\n                        simpleDf.setTimeZone(tz);\n                    }\n                }\n                return withFormat(Boolean.FALSE, simpleDf);\n            } else if (df instanceof StdDateFormat) {\n                // StdDateFormat has fluent methods for contextualization\n                StdDateFormat stdDf = (StdDateFormat) df;\n                if (tz != null) {\n                    stdDf = stdDf.withTimeZone(tz);\n                }\n                if (loc != null) {\n                    stdDf = stdDf.withLocale(loc);\n                }\n                return withFormat(Boolean.FALSE, stdDf);\n            }\n            // For other `DateFormat` types, or if `df` is null (shouldn't happen here),\n            // we cannot reliably adapt it. Fall through to return `this`.\n        }\n\n        // 4. If current serializer produces numeric timestamp, but context indicates string output.\n        // This happens if JsonFormat.Shape.STRING is implied (e.g., default), and `_useTimestamp` is true.\n        if (_useTimestamp == Boolean.TRUE) {\n            // Switch to default string format (which will then be resolved via `df` above if needed)\n            return withFormat(Boolean.FALSE, null);\n        }\n\n        // 5. No specific format changes are needed. Return current serializer instance.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}