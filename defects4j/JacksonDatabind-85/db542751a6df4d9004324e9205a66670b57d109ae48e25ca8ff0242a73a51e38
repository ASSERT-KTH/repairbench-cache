{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, use the default date format from the ObjectMapper\n        DateFormat df = serializers.getConfig().getDateFormat();\n        if (df instanceof SimpleDateFormat) {\n            // If it's already a SimpleDateFormat, we can use it directly\n            return withFormat(Boolean.FALSE, (SimpleDateFormat) df);\n        } else if (df != null) {\n            // For other DateFormat types, we create a new SimpleDateFormat with the same pattern\n            if (df instanceof java.text.SimpleDateFormat) {\n                java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;\n                SimpleDateFormat newDf = new SimpleDateFormat(sdf.toPattern(), sdf.getDateFormatSymbols().getLocale());\n                newDf.setTimeZone(sdf.getTimeZone());\n                return withFormat(Boolean.FALSE, newDf);\n            }\n        }\n\n        // Fall back to ISO-8601 if no specific format is configured\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}