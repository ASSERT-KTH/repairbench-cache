{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property)\n        throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        // No annotation override; honor the mapper\u2019s default date format if dates are to be serialized as text\n        if (!serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n            DateFormat df = serializers.getConfig().getDateFormat();\n            if (df instanceof SimpleDateFormat) {\n                // Clone to avoid thread-safety issues\n                return withFormat(Boolean.FALSE, (SimpleDateFormat) ((SimpleDateFormat) df).clone());\n            }\n        }\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    if ((shape == JsonFormat.Shape.STRING)\n            || format.hasPattern()\n            || format.hasLocale()\n            || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern;\n        if (format.hasPattern()) {\n            pattern = format.getPattern();\n        } else {\n            // Use the default mapper date format's pattern if available,\n            // otherwise fall-back to ISO8601 formatting.\n            DateFormat df = serializers.getConfig().getDateFormat();\n            if (df instanceof SimpleDateFormat) {\n                pattern = ((SimpleDateFormat) df).toPattern();\n            } else {\n                pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            }\n        }\n        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        SimpleDateFormat sdf = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        sdf.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, sdf);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}