{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // Handle cases where custom pattern, locale, or timezone override the default\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            String pattern;\n            if (format.hasPattern()) {\n                pattern = format.getPattern();\n            } else {\n                DateFormat providerFormat = serializers.getDateFormat();\n                if (providerFormat instanceof SimpleDateFormat) {\n                    pattern = ((SimpleDateFormat) providerFormat).toPattern();\n                } else {\n                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                }\n            }\n\n            Locale loc;\n            if (format.hasLocale()) {\n                loc = format.getLocale();\n            } else {\n                loc = serializers.getLocale();\n            }\n\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, use the default formatter without changes\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}