{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // Handle pattern/timezone/locale overrides\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n            || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n\n        String pattern;\n        if (format.hasPattern()) {\n            pattern = format.getPattern();\n        } else {\n            // [databind#1648]: Use contextual default DateFormat if set and no explicit pattern\n            DateFormat defaultFormat = serializers.getConfig().getDateFormat();\n            if (defaultFormat instanceof SimpleDateFormat) {\n                pattern = ((SimpleDateFormat) defaultFormat).toPattern();\n            } else {\n                pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601; // Fallback\n            }\n        }\n\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}