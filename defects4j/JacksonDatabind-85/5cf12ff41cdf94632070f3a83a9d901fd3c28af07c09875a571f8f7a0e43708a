{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n    // First: custom pattern will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                    || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern;\n        if (format.hasPattern()) {\n            pattern = format.getPattern();\n            final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        } else {\n            // [databind#1648]: If no pattern specified, use global DateFormat as base\n            DateFormat base = serializers.getConfig().getDateFormat();\n            DateFormat df;\n            if (base instanceof SimpleDateFormat) {\n                SimpleDateFormat std = (SimpleDateFormat) base;\n                // Must make a clone to avoid mutating shared default\n                SimpleDateFormat newDf = (SimpleDateFormat) std.clone();\n                Locale loc = format.hasLocale() ? format.getLocale() : std.getLocale();\n                if (format.hasLocale() && !format.getLocale().equals(std.getLocale())) {\n                    // Need to re-create with new locale\n                    newDf = new SimpleDateFormat(std.toPattern(), loc);\n                }\n                df = newDf;\n            } else if (base instanceof StdDateFormat) {\n                // For StdDateFormat, clone and set pattern/locale if necessary\n                df = ((StdDateFormat) base).clone();\n            } else if (base != null) {\n                // Best effort for unknown DateFormat\n                df = (DateFormat) base.clone();\n            } else {\n                // Fallback, construct default\n                df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale());\n            }\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}