{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n    // First: custom pattern will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n            || format.hasLocale() || format.hasTimeZone()) {\n\n        TimeZone tz = format.getTimeZone();\n        final DateFormat defaultDf = serializers.getConfig().getDateFormat();\n\n        SimpleDateFormat df = null;\n        String pattern = null;\n        Locale loc = null;\n\n        if (format.hasPattern()) {\n            pattern = format.getPattern();\n        } else if (defaultDf instanceof SimpleDateFormat) {\n            pattern = ((SimpleDateFormat) defaultDf).toPattern();\n        } else {\n            pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        }\n\n        if (format.hasLocale()) {\n            loc = format.getLocale();\n        } else if (defaultDf instanceof SimpleDateFormat) {\n            loc = ((SimpleDateFormat) defaultDf).getLocale();\n        } else {\n            loc = serializers.getLocale();\n        }\n\n        df = new SimpleDateFormat(pattern, loc);\n\n        if (tz == null) {\n            if (defaultDf.getTimeZone() != null) {\n                tz = defaultDf.getTimeZone();\n            } else {\n                tz = serializers.getTimeZone();\n            }\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}