{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n\n        // 1. Find explicit @JsonFormat overrides for this property\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        \n        // 2. Check for numeric timestamp serialization preference from @JsonFormat\n        if (format != null && format.getShape().isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 3. Prepare properties for building a SimpleDateFormat (if needed)\n        // These will be sourced from @JsonFormat, or from ObjectMapper's defaults, or hardcoded fallbacks.\n        String pattern = null;\n        Locale loc = null;\n        TimeZone tz = null;\n        \n        // Flags to determine if a SimpleDateFormat is explicitly requested\n        boolean explicitFormatRequestsSimpleDateFormat = false;\n\n        if (format != null) {\n            // Extract properties from @JsonFormat\n            if (format.hasPattern()) {\n                pattern = format.getPattern();\n            }\n            if (format.hasLocale()) {\n                loc = format.getLocale();\n            }\n            if (format.hasTimeZone()) {\n                tz = format.getTimeZone();\n            }\n            // If @JsonFormat specifies STRING shape, it implicitly means a date format string\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                explicitFormatRequestsSimpleDateFormat = true;\n                // If shape is STRING but no pattern specified, use ISO8601 default\n                if (pattern == null) {\n                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                }\n            } else if (pattern != null || loc != null || tz != null) {\n                // Any specific pattern, locale, or timezone implies a SimpleDateFormat\n                explicitFormatRequestsSimpleDateFormat = true;\n            }\n        }\n\n        // Get default format related settings from the serializer provider (ObjectMapper's configuration)\n        Locale defaultLocale = serializers.getLocale();\n        TimeZone defaultTimeZone = serializers.getTimeZone();\n        DateFormat defaultDateFormat = serializers.getDateFormat();\n\n        // Case A: Explicit @JsonFormat annotation provided enough details to build a SimpleDateFormat\n        if (explicitFormatRequestsSimpleDateFormat) {\n            // Ensure all required components are available, falling back to defaults\n            if (pattern == null) {\n                // This case should ideally not be hit if `explicitFormatRequestsSimpleDateFormat` is true\n                // and pattern was derived from `format.getShape() == JsonFormat.Shape.STRING`\n                // But for safety, if pattern is still null, try from default DateFormat or fallback\n                if (defaultDateFormat instanceof SimpleDateFormat) {\n                    pattern = ((SimpleDateFormat) defaultDateFormat).toPattern();\n                } else {\n                    pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                }\n            }\n            if (loc == null) {\n                loc = defaultLocale;\n            }\n            if (tz == null) {\n                tz = defaultTimeZone;\n            }\n            \n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz != null) {\n                df.setTimeZone(tz);\n            }\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Case B: No explicit @JsonFormat details, but ObjectMapper has a custom SimpleDateFormat set\n        // (This is crucial for [databind#1648] and testFormatWithoutPattern)\n        if (defaultDateFormat instanceof SimpleDateFormat) {\n            SimpleDateFormat sdf = (SimpleDateFormat) defaultDateFormat;\n            \n            // Reconstruct SimpleDateFormat using its original pattern, and contextual locale/timezone.\n            // This ensures thread-safety and applies contextual overrides.\n            String actualPattern = sdf.toPattern();\n            Locale actualLocale = defaultLocale; // Use contextual locale\n            TimeZone actualTimeZone = defaultTimeZone; // Use contextual timezone from serializers\n\n            SimpleDateFormat newSdf = new SimpleDateFormat(actualPattern, actualLocale);\n            \n            // Set timezone explicitly if one was determined (contextual or from sdf itself)\n            if (actualTimeZone != null) {\n                newSdf.setTimeZone(actualTimeZone);\n            } else {\n                // If no contextual timezone, use the one from the default SimpleDateFormat itself\n                // (it might have been set explicitly when ObjectMapper's DateFormat was created)\n                newSdf.setTimeZone(sdf.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, newSdf);\n        }\n\n        // Case C: Fallback to default serialization\n        // This happens if:\n        // - `format` was null, and `defaultDateFormat` is not a `SimpleDateFormat` (e.g., `StdDateFormat`).\n        // - `format` was present but did not specify numeric, or sufficient string-based details.\n        // In this case, `this` serializer (often using `StdDateFormat` internally) is appropriate.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}