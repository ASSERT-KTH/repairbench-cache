{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n                                         BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // Determine the appropriate pattern and time zone to use\n    TimeZone timeZone = serializers.getTimeZone();\n    String pattern;\n    if (format.hasPattern()) {\n        pattern = format.getPattern();\n    } else {\n        // Use default pattern from the serializer\n        DateFormat df = serializers.getDateFormat();\n        if (df instanceof SimpleDateFormat) {\n            pattern = ((SimpleDateFormat) df).toPattern();\n        } else {\n            // Fallback to ISO8601 if the default isn't a SimpleDateFormat\n            pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        }\n    }\n\n    // Determine locale and time zone\n    Locale locale = (format.hasLocale()) ? format.getLocale() : serializers.getLocale();\n    if (!format.hasTimeZone()) {\n        timeZone = serializers.getTimeZone();\n    }\n\n    SimpleDateFormat df = new SimpleDateFormat(pattern, locale);\n    df.setTimeZone(timeZone);\n    return withFormat(Boolean.FALSE, df);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}