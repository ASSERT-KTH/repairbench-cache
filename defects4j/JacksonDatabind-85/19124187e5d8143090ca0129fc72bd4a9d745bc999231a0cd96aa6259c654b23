{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df;\n            if (format.hasPattern()) {\n                df = new SimpleDateFormat(format.getPattern(), loc);\n            } else {\n                df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, loc);\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, use the default DateFormat from the ObjectMapper\n        DateFormat defaultDateFormat = serializers.getConfig().getDateFormat();\n        if (defaultDateFormat instanceof SimpleDateFormat) {\n            return withFormat(Boolean.FALSE, (SimpleDateFormat) defaultDateFormat);\n        }\n\n        // If the default DateFormat is not a SimpleDateFormat, we cannot use it\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}