{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // Custom pattern or specific format settings take precedence\n        if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.getPattern();\n            final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern != null ? pattern : \"yyyy-MM-dd'X'HH:mm:ss\", loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // If no custom settings, check if default format is applicable\n        if (shape == JsonFormat.Shape.STRING) {\n            // Use default format from serializer\n            SimpleDateFormat df = new SimpleDateFormat(serializers.getDateFormat().toPattern());\n            df.setTimeZone(serializers.getTimeZone());\n            df.setLocale(serializers.getLocale());\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}