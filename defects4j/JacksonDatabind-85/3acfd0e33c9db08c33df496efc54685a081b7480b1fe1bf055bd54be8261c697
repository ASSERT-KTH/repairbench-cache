{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n    // First: custom pattern will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n            || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                ? format.getPattern()\n                : null;\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n\n        DateFormat base = serializers.getConfig().getDateFormat();\n        DateFormat df;\n\n        if (pattern != null) { // if we have explicit pattern, use it\n            SimpleDateFormat sdf = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            sdf.setTimeZone(tz);\n            df = sdf;\n        } else if (base instanceof SimpleDateFormat) { // clone existing one with possible locale & timezone override\n            SimpleDateFormat sdf = (SimpleDateFormat) base;\n            String basePattern = sdf.toPattern();\n            SimpleDateFormat copy = new SimpleDateFormat(basePattern, loc);\n            TimeZone tzToUse = (tz == null) ? sdf.getTimeZone() : tz;\n            copy.setTimeZone(tzToUse);\n            df = copy;\n        } else {\n            // fall back to re-use as is (cannot clone), may be incorrect format or timezone\n            df = base;\n        }\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}