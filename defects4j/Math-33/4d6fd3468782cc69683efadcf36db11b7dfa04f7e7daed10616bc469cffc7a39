{
    "generation": "    /**\n     * Removes the phase 1 objective function, positive cost non-artificial variables,\n     * and the non-basic artificial variables from this tableau.\n     */\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        // BUG FIX: The line 'columnsToDrop.add(0);' was incorrectly dropping the RHS column (column 0).\n        // This column should be preserved as it contains critical information (basic variable values).\n        // Removed the problematic line here.\n\n        // positive cost non-artificial variables\n        // This loop identifies non-artificial variables (main, slack, surplus) that might need to be dropped.\n        // It checks their coefficients in the original objective function (row 0).\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // non-basic artificial variables\n        // This loop identifies artificial variables that are non-basic (their column has no associated basic row)\n        // and adds their columns to the list of columns to be dropped.\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n          int col = i + getArtificialVariableOffset();\n          if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n          }\n        }\n\n        // BUG FIX: The previous row copying logic incorrectly dropped the original objective row (row 0)\n        // and kept the phase 1 objective row (row 1).\n        // This revised logic correctly drops the phase 1 objective row (row 1)\n        // and preserves the original objective row (row 0) and all constraint rows (from row 2 onwards).\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        int newRowIndex = 0; // Index for the new matrix\n        for (int i = 0; i < getHeight(); i++) { // Iterate through original tableau rows\n            if (i == 1) { // If it's the phase 1 objective row (index 1), skip it\n                continue;\n            }\n            int newColIndex = 0; // Index for columns in the new row\n            for (int j = 0; j < getWidth(); j++) { // Iterate through original tableau columns\n                if (!columnsToDrop.contains(j)) { // If the column is not marked for dropping\n                    matrix[newRowIndex][newColIndex++] = tableau.getEntry(i, j); // Copy the entry\n                }\n            }\n            newRowIndex++; // Move to the next row in the new matrix\n        }\n\n        // Remove the corresponding column labels, iterating backwards to avoid index shifting issues\n        // (columnsToDrop is populated in ascending order, so removing from largest index first is correct).\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n          columnLabels.remove((int) columnsToDrop.get(i));\n        }\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}