{
    "generation": "    /**\n     * Removes the phase 1 objective function, positive cost non-artificial variables,\n     * and the non-basic artificial variables from this tableau.\n     */\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        // DO NOT DROP COLUMN 0 - it's the RHS column. The phase 1 objective *row* (row 0)\n        // is dropped later by starting the matrix copy from row 1.\n        // columnsToDrop.add(0); // Buggy line removed\n\n        // Identify columns corresponding to positive cost non-artificial variables in the phase 1 objective function (row 0).\n        // These variables are typically between the objective function columns and the artificial variable columns.\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            final double entry = tableau.getEntry(0, i);\n            // Use Precision.compareTo with maxUlps for robust comparison against 0\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // Identify columns corresponding to non-basic artificial variables.\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n          int col = i + getArtificialVariableOffset();\n          // If getBasicRow(col) returns null, the artificial variable in column 'col' is non-basic.\n          if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n          }\n        }\n\n        // Create the new tableau matrix, excluding row 0 and the identified columns.\n        // New dimensions: height - 1, width - columnsToDrop.size()\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n\n        // Copy data from the old tableau to the new matrix.\n        for (int i = 1; i < getHeight(); i++) { // Start from row 1 to skip the phase 1 objective row (row 0).\n          int newMatrixColumn = 0; // Index for the columns in the new matrix.\n          for (int j = 0; j < getWidth(); j++) { // Iterate through columns of the old tableau.\n            if (!columnsToDrop.contains(j)) { // If the column should not be dropped...\n              // Copy the entry to the new matrix.\n              // Row index in the new matrix is i - 1.\n              matrix[i - 1][newMatrixColumn++] = tableau.getEntry(i, j);\n            }\n          }\n        }\n\n        // Remove the labels for the dropped columns.\n        // Iterate backwards through the list of indices to avoid issues with shifting indices upon removal.\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n          // Ensure columnLabels is not null and index is valid before removing\n          if (columnLabels != null) {\n              int colIndexToRemove = columnsToDrop.get(i);\n              // Basic bounds check, although index should be valid if logic is correct\n              if (colIndexToRemove >= 0 && colIndexToRemove < columnLabels.size()) {\n                  // Cast is important to call remove(int index) not remove(Object o)\n                  columnLabels.remove(colIndexToRemove);\n              }\n          }\n        }\n\n        // Replace the old tableau with the new, smaller tableau.\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        // All artificial variables are either removed or effectively zero, so reset the count.\n        this.numArtificialVariables = 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}