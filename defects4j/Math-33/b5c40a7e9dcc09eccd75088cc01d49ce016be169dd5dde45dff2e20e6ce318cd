{
    "generation": "/**\n * Removes the phase 1 objective function, positive cost non\u2010artificial variables,\n * and all artificial variables (by pivoting out any basic artificial variables)\n * from this tableau.\n */\nprotected void dropPhase1Objective() {\n    // if only one objective function, nothing to drop\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    // list of column indices to drop\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    // The first column (used for the phase 1 constant) is removed.\n    columnsToDrop.add(0);\n\n    // Drop any non-artificial columns that have a positive cost in the phase 1 row.\n    // These are the columns between the phase 1 and artificial variable regions.\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // Process artificial variables: whether basic or non-basic, we want to drop their columns.\n    // However, if an artificial variable is basic, we first try to pivot it out.\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int artCol = i + getArtificialVariableOffset();\n        Integer basicRow = getBasicRow(artCol);\n        if (basicRow != null) {\n            // Try to pick a candidate pivot column among the original columns (i.e. before the artificial variables)\n            int pivotCol = -1;\n            for (int j = 0; j < getArtificialVariableOffset(); j++) {\n                // Only consider columns not already marked to drop and with a nonzero coefficient.\n                if (!columnsToDrop.contains(j) &&\n                    Precision.compareTo(tableau.getEntry(basicRow, j), 0d, maxUlps) != 0) {\n                    pivotCol = j;\n                    break;\n                }\n            }\n            if (pivotCol != -1) {\n                // Perform a classical pivot on (basicRow, pivotCol).\n                double pivotVal = tableau.getEntry(basicRow, pivotCol);\n                // Normalize the pivot row.\n                for (int j = 0; j < getWidth(); j++) {\n                    tableau.setEntry(basicRow, j, tableau.getEntry(basicRow, j) / pivotVal);\n                }\n                // Eliminate the pivot column entries in every other row.\n                for (int r = 0; r < getHeight(); r++) {\n                    if (r != basicRow) {\n                        double factor = tableau.getEntry(r, pivotCol);\n                        for (int j = 0; j < getWidth(); j++) {\n                            double updated = tableau.getEntry(r, j) - factor * tableau.getEntry(basicRow, j);\n                            tableau.setEntry(r, j, updated);\n                        }\n                    }\n                }\n            }\n            // Whether or not a pivot was possible, drop the artificial variable.\n            columnsToDrop.add(artCol);\n        } else {\n            // Non-basic artificial variable: simply mark its column for deletion.\n            columnsToDrop.add(artCol);\n        }\n    }\n\n    // Create a new matrix that omits the dropped columns.\n    int newWidth = getWidth() - columnsToDrop.size();\n    int newHeight = getHeight() - 1; // drop the phase 1 objective row (row 0)\n    double[][] matrix = new double[newHeight][newWidth];\n    for (int i = 1; i < getHeight(); i++) {\n        int newCol = 0;\n        for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n                matrix[i - 1][newCol++] = tableau.getEntry(i, j);\n            }\n        }\n    }\n\n    // Remove the dropped columns from the list of column labels.\n    // It is important to remove from highest index to lowest so that indices remain valid.\n    Collections.sort(columnsToDrop, Collections.reverseOrder());\n    for (int col : columnsToDrop) {\n        columnLabels.remove(col);\n    }\n\n    // Replace the tableau with the new reduced matrix and reset the artificial variable count.\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}