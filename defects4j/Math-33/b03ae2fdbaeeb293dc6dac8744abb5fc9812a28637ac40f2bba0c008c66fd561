{
    "generation": "    /**\n     * Removes the phase 1 objective function, positive cost non-artificial variables,\n     * and the non-basic artificial variables from this tableau.\n     */\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        columnsToDrop.add(0); // Column 0 typically represents the phase 1 objective value/variable.\n\n        // The following block was identified as a source of errors (e.g., MATH-781).\n        // It incorrectly removes \"positive cost non-artificial variables\" from the tableau.\n        // Standard two-phase simplex does not require dropping these variables after phase 1.\n        // for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        //    final double entry = tableau.getEntry(0, i);\n        //    if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        //        columnsToDrop.add(i);\n        //    }\n        // }\n\n        // non-basic artificial variables\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n          int col = i + getArtificialVariableOffset();\n          if (getBasicRow(col) == null) { // If the artificial variable is non-basic\n            columnsToDrop.add(col);\n          }\n        }\n\n        // Create the new tableau matrix with the reduced dimensions.\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) { // Skip the phase 1 objective row (original row 0)\n          int col = 0;\n          for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) { // If the column is not marked for dropping\n              matrix[i - 1][col++] = tableau.getEntry(i, j); // Copy to the new matrix\n            }\n          }\n        }\n\n        // Update columnLabels.\n        // The columnsToDrop list contains indices in ascending order.\n        // Removing elements from columnLabels in reverse order of their indices ensures\n        // that earlier removals do not affect the indices of elements yet to be removed.\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n          columnLabels.remove((int) columnsToDrop.get(i));\n        }\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0; // All artificial variables are either dropped or their phase 1 purpose is complete.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}