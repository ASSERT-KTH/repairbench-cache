{
    "generation": "    /**\n     * Removes the phase 1 objective function, positive cost non-artificial variables,\n     * and the non-basic artificial variables from this tableau.\n     */\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        // BUG FIX: Column 0 represents the right-hand side / objective value.\n        // It should not be dropped, as it's not a variable.\n        // The phase 1 objective function (row 0) is dropped separately below.\n        // columnsToDrop.add(0); // This line is removed.\n\n        // positive cost non-artificial variables\n        // Iterate through columns that represent non-artificial variables\n        // (decision variables, slack/surplus variables)\n        // starting from the first variable column after any potential extra objective columns\n        // up to the offset of artificial variables.\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            // If the coefficient in the phase 1 objective row (row 0) is positive,\n            // this variable column should be dropped.\n            final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // non-basic artificial variables\n        // Iterate through all artificial variable columns.\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n          int col = i + getArtificialVariableOffset();\n          // If the artificial variable is non-basic (i.e., its value is 0),\n          // its column should be dropped.\n          if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n          }\n        }\n\n        // Create a new matrix for the tableau.\n        // The height is reduced by 1 to remove the phase 1 objective row.\n        // The width is reduced by the number of columns identified for dropping.\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        // Copy rows from the original tableau to the new matrix.\n        // Start from row 1 (skipping the phase 1 objective row at index 0).\n        for (int i = 1; i < getHeight(); i++) {\n          int col = 0; // Current column index for the new matrix.\n          // Iterate through all columns of the original tableau.\n          for (int j = 0; j < getWidth(); j++) {\n            // If the current original column 'j' is NOT in the list of columns to drop,\n            // copy its entry to the new matrix.\n            if (!columnsToDrop.contains(j)) {\n              matrix[i - 1][col++] = tableau.getEntry(i, j);\n            }\n          }\n        }\n\n        // Update the column labels to reflect the dropped columns.\n        // Iterate backwards to avoid issues with index shifts during removal from the list.\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n          columnLabels.remove((int) columnsToDrop.get(i));\n        }\n\n        // Set the new tableau and reset the artificial variable count.\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}