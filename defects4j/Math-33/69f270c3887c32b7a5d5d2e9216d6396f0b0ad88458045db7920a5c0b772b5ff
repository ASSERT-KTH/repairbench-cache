{
    "generation": "    /**\n     * Removes the phase 1 objective function, positive cost non-artificial variables,\n     * and the non-basic artificial variables from this tableau.\n     */\n    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        columnsToDrop.add(0); // Phase 1 objective function value column (column 0)\n\n        // positive cost non-artificial variables (original and slack variables)\n        // These are columns from index getNumObjectiveFunctions() up to getArtificialVariableOffset() - 1\n        // If getNumObjectiveFunctions() is 2 (Phase 1 active), this means columns from index 2 onwards.\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            final double entry = tableau.getEntry(0, i); // Check coefficients in Phase 1 objective row\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // non-basic artificial variables\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n          int col = i + getArtificialVariableOffset();\n          // Check if artificial variable is non-basic (getBasicRow returns null)\n          if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n          }\n        }\n\n        // Create the new matrix, excluding the dropped columns and the phase 1 objective row\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) { // Start from row 1 (original objective or constraints)\n          int col = 0;\n          for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n              matrix[i - 1][col++] = tableau.getEntry(i, j);\n            }\n          }\n        }\n\n        // Update column labels based on the columns that are kept\n        List<String> newColumnLabels = new ArrayList<String>();\n        for (int k = 0; k < columnLabels.size(); k++) { // k is index in columnLabels\n            int tableauColIdx;\n            if (k == columnLabels.size() - 1) { // This is the RHS label\n                tableauColIdx = getWidth() - 1;\n            } else { // This is a variable label (x, s, a)\n                // Tableau column index is 1 greater than columnLabels index because tableau column 0\n                // is the objective function value and doesn't have a label in columnLabels.\n                tableauColIdx = k + 1;\n            }\n\n            if (!columnsToDrop.contains(tableauColIdx)) {\n                newColumnLabels.add(columnLabels.get(k));\n            }\n        }\n        this.columnLabels = newColumnLabels;\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}