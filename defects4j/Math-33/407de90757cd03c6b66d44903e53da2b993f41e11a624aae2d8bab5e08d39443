{
    "generation": "/**\n * Removes the phase 1 objective function, positive cost non\u2010artificial variables\n * (w.r.t. the phase 2 objective), and the non\u2010basic artificial variables from this tableau.\n */\n@Override\nprotected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        // no phase\u20101 in use\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    // always drop the column used to carry the phase\u20101 objective\n    columnsToDrop.add(0);\n\n    // drop any non\u2010artificial variable whose cost in the phase\u20102 objective is positive\n    int phase2Row = getNumObjectiveFunctions() - 1;\n    for (int j = getNumObjectiveFunctions(); j < getArtificialVariableOffset(); j++) {\n        double cost = tableau.getEntry(phase2Row, j);\n        if (Precision.compareTo(cost, 0d, maxUlps) > 0) {\n            columnsToDrop.add(j);\n        }\n    }\n\n    // drop all non\u2010basic artificial variable columns\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n        }\n    }\n\n    // build the new matrix without the dropped row/columns\n    int newRows = getHeight() - 1;\n    int newCols = getWidth()  - columnsToDrop.size();\n    double[][] newData = new double[newRows][newCols];\n    for (int i = 1; i < getHeight(); i++) {\n        int destCol = 0;\n        for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n                newData[i - 1][destCol++] = tableau.getEntry(i, j);\n            }\n        }\n    }\n\n    // remove the matching column labels (in reverse index order)\n    for (int k = columnsToDrop.size() - 1; k >= 0; k--) {\n        columnLabels.remove((int) columnsToDrop.get(k));\n    }\n\n    // install the new tableau and clear out artificial\u2010variable count\n    this.tableau = new Array2DRowRealMatrix(newData, false);\n    this.numArtificialVariables = 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}