{
    "generation": "/**\n * Removes the phase 1 objective function, positive cost non-artificial variables,\n * and the non-basic artificial variables from this tableau.\n */\nprotected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive cost non-artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non-basic artificial variables\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n        }\n    }\n\n    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n    for (int i = 1; i < getHeight(); i++) {\n        int col = 0;\n        for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n                matrix[i - 1][col++] = tableau.getEntry(i, j);\n            }\n        }\n    }\n\n    // Remove from column labels in descending order to avoid misalignment\n    for (int idx = columnsToDrop.size() - 1; idx >= 0; idx--) {\n        columnLabels.remove((int) columnsToDrop.get(idx));\n    }\n\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n\n    // remove the discarded columns from basic variables list that referred to phase 1 info\n    Set<Integer> colSet = new HashSet<>(columnsToDrop);\n    Map<Integer, Integer> newBasicVariables = new HashMap<>();\n    for (Map.Entry<Integer, Integer> entry : basicVariables.entrySet()) {\n        int column = entry.getKey();\n        int row = entry.getValue();\n        if (!colSet.contains(column)) {\n            // compute the new column index after dropping columns to the left of it\n            int numDroppedBefore = 0;\n            for (Integer colToDrop : columnsToDrop) {\n                if (colToDrop < column) {\n                    numDroppedBefore++;\n                }\n            }\n            int newColumn = column - numDroppedBefore;\n            newBasicVariables.put(newColumn, row - 1); // shift row index as first row is removed\n        }\n    }\n    this.basicVariables = newBasicVariables;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}