{
    "generation": "/**\n * Removes the phase 1 objective function, positive cost non\u2010artificial variables,\n * and the non\u2010basic artificial variables from this tableau.\n */\nprotected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        // already in phase 2\n        return;\n    }\n\n    // collect the column indices to drop:\n    //   0 = the phase\u20101 objective column,\n    //   any non\u2010artificial with positive cost in row 0,\n    //   any artificial that is non\u2010basic.\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive\u2010cost non\u2010artificial\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        double cost = tableau.getEntry(0, i);\n        if (Precision.compareTo(cost, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non\u2010basic artificial\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n        }\n    }\n\n    // build the new matrix: drop row 0 and the collected columns\n    int newH = getHeight() - 1;\n    int newW = getWidth() - columnsToDrop.size();\n    double[][] newData = new double[newH][newW];\n    for (int i = 1; i < getHeight(); i++) {\n        int destCol = 0;\n        for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n                newData[i - 1][destCol++] = tableau.getEntry(i, j);\n            }\n        }\n    }\n\n    // remove the column labels in reverse order\n    Collections.sort(columnsToDrop, Collections.reverseOrder());\n    for (int col : columnsToDrop) {\n        columnLabels.remove(col);\n    }\n\n    // install the reduced tableau and reset counters:\n    this.tableau = new Array2DRowRealMatrix(newData);\n    this.numArtificialVariables = 0;\n    // <--- fix: after dropping phase\u20101 you only have one objective function left\n    this.numObjectiveFunctions = 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}