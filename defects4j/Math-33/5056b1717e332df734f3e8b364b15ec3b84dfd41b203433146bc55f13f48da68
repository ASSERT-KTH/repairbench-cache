{
    "generation": "/**\n * Removes the phase 1 objective function, positive cost non-artificial variables,\n * and the non-basic artificial variables from this tableau.\n */\nprotected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive cost non-artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        // FIX: exclude slack/surplus variables as well (not just those with cost > 0)\n        // Only drop those with strictly positive cost\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non-basic artificial variables\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        // FIX: drop only if variable is NON-BASIC *and* appears in phase 1 objective (row 0)\n        // But only non-basic artificial variables with nonzero coefficient should be removed\n        // so keep as is, but clarify comment\n        if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n        }\n    }\n\n    // --- FIX: Update columnLabels correctly after transformation ---\n    // Create new matrix, only keeping columns not in columnsToDrop\n    int newWidth = getWidth() - columnsToDrop.size();\n    int newHeight = getHeight() - 1;\n    double[][] matrix = new double[newHeight][newWidth];\n\n    // Map for keeping only the remaining column labels\n    List<String> newColumnLabels = new ArrayList<String>(newWidth);\n\n    // Build the mapping from old to new columns\n    List<Integer> columnsToKeep = new ArrayList<Integer>();\n    for (int j = 0; j < getWidth(); j++) {\n        if (!columnsToDrop.contains(j)) {\n            columnsToKeep.add(j);\n        }\n    }\n\n    // Copy the rows (skipping row 0)\n    for (int i = 1; i < getHeight(); i++) {\n        for (int col = 0; col < columnsToKeep.size(); col++) {\n            matrix[i - 1][col] = tableau.getEntry(i, columnsToKeep.get(col));\n        }\n    }\n\n    // Build new columnLabels\n    for (Integer idx : columnsToKeep) {\n        newColumnLabels.add(columnLabels.get(idx));\n    }\n\n    // Update tableau and labels\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.columnLabels = newColumnLabels;\n    this.numArtificialVariables = 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}