{
    "generation": "    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            // The original code had a problematic condition: \"if (charval != -1 || charval > 0xFFFF)\".\n            // The comment \"// out of range\" implied that `charval > 0xFFFF` should not be unescaped directly\n            // using `(char) charval` as it truncates supplementary characters.\n            // Additionally, `Matcher.appendReplacement` throws IllegalArgumentException if the replacement\n            // string contains '$' or '\\' without being quoted.\n\n            // Fix 1: Ensure replacement string is quoted using Matcher.quoteReplacement().\n            // Fix 2: Clarify handling of charval based on validity and BMP range.\n            // If charval is valid and within the Basic Multilingual Plane (BMP), unescape it.\n            // Otherwise (if invalid or outside BMP), append the original matched sequence.\n            if (charval != -1 && charval <= 0xFFFF) {\n                String c = Character.toString((char) charval);\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                // charval is either -1 (invalid entity) or > 0xFFFF (supplementary character).\n                // In these cases, we append the original matched string as is,\n                // implying that this unescape method doesn't fully handle\n                // supplementary characters or invalid entities, or that the original entity\n                // itself should be preserved.\n                // It's safe to quote m.group(0) defensively, though not strictly necessary for this pattern.\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}