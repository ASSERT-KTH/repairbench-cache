{
    "generation": "    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        // unescapePattern is a static field, likely defined as:\n        // private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n        Matcher m = unescapePattern.matcher(string);\n        StringBuffer accum = new StringBuffer(string.length()); \n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) { // numeric entity\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // group 2 is hex indicator 'x' or 'X'\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip if number format is bad\n            } else { // named entity\n                String name = m.group(1);\n                // full is a static map, likely `java.util.Map<String, Integer> full;`\n                // containing HTML entity name to code point mappings.\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            // If a valid character value was found from a numeric or named entity\n            if (charval != -1) {\n                String c;\n                // HTML5 spec: handle invalid code points by replacing with U+FFFD (REPLACEMENT CHARACTER)\n                // Invalid code points include surrogate range (U+D800 to U+DFFF) and\n                // code points beyond the maximum Unicode value (U+10FFFF).\n                if ((charval >= 0xD800 && charval <= 0xDFFF) || // Surrogate code points\n                    charval > 0x10FFFF) { // Code points outside valid Unicode range\n                    c = Character.toString(0xFFFD); // U+FFFD REPLACEMENT CHARACTER\n                } else {\n                    // Correctly convert int code point to String, handles supplementary characters\n                    c = Character.toString(charval); \n                }\n                // Fix: Matcher.appendReplacement requires the replacement string to be quoted\n                // if it contains special regex characters like '\\' or '$'.\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                // charval == -1 means no valid entity was found or conversion failed.\n                // In this case, preserve the original matched string (e.g., \"&#bad;\").\n                m.appendReplacement(accum, m.group(0));\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}