{
    "generation": "static String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string);\n    StringBuffer accum = new StringBuffer(string.length());\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = (m.group(2) != null) ? 16 : 10;\n                charval = Integer.parseInt(num, base);\n            } catch (NumberFormatException e) {\n                // invalid numeric, leave charval = -1\n            }\n        } else {\n            String name = m.group(1);\n            if (full.containsKey(name)) {\n                charval = full.get(name);\n            }\n        }\n\n        String replacement;\n        // only un\u2010escape if we got a valid code point\n        if (charval != -1 && charval <= 0xFFFF) {\n            replacement = Character.toString((char) charval);\n        } else if (charval > 0xFFFF) {\n            // non\u2010BMP code point \u2192 surrogate pair\n            replacement = new String(Character.toChars(charval));\n        } else {\n            // leave the original entity text\n            replacement = m.group(0);\n        }\n\n        // quote any $ or \\ in the replacement so appendReplacement won't choke\n        m.appendReplacement(accum, Matcher.quoteReplacement(replacement));\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}