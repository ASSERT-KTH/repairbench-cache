{
    "generation": "    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(4);\n            if (num != null) {\n                try {\n                    int base = (m.group(3) != null) ? 16 : 10; // 2 is hex indicator, now 3\n                    charval = Integer.parseInt(num, base);\n                } catch (NumberFormatException e) {\n                    // skip\n                }\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            if (charval != -1 && charval <= 0xFFFF) { // out of range // fixed: added charval != -1 &&\n                String c = String.valueOf((char) charval);\n                m.appendReplacement(accum, Matcher.quoteReplacement(c)); // fixed: use quoteReplacement\n            } else {\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // fixed: use quoteReplacement\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}