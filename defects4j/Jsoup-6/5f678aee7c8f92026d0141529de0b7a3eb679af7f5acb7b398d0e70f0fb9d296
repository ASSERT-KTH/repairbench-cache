{
    "generation": "static String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = m.group(2) != null ? 16 : 10; // group(2) indicates hex if present\n                charval = Integer.valueOf(num, base);\n            } catch (NumberFormatException e) {\n                // ignore parse errors; leave charval as -1 so the entity remains unchanged\n            }\n        } else {\n            String name = m.group(1);\n            if (full.containsKey(name))\n                charval = full.get(name);\n        }\n\n        // If we got a valid in-range char, unescape; otherwise, leave the match as-is.\n        if (charval == -1 || charval > 0xFFFF) {\n            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));\n        } else {\n            m.appendReplacement(accum, Matcher.quoteReplacement(Character.toString((char) charval)));\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}