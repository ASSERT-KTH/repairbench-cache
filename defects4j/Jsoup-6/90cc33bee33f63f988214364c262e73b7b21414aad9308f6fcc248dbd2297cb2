{
    "generation": "    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            // Unescape only if charval is a recognized entity AND its character value\n            // is within the Basic Multilingual Plane (0-0xFFFF).\n            // Entities that are unrecognized (charval == -1) or represent characters\n            // outside the BMP (charval > 0xFFFF) are left as their original string form.\n            // This behavior is consistent with the likely intent given the original `charval > 0xFFFF`\n            // condition and `Character.toString((char) charval)` usage.\n            if (charval != -1 && charval <= 0xFFFF) {\n                String c = Character.toString((char) charval);\n                // The replacement string 'c' might contain special regex characters ($ or \\).\n                // Matcher.appendReplacement expects these to be quoted if they are literal characters.\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                // If entity is not recognized (charval == -1) or out of BMP range (charval > 0xFFFF),\n                // append the original matched string without unescaping.\n                m.appendReplacement(accum, m.group(0));\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}