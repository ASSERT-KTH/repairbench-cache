{
    "generation": "    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3); // numerical entity: #decimal or #xhex\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // charval remains -1\n            } else { // named entity\n                String name = m.group(1);\n                // The 'full' map stores Character objects, which are 16-bit BMP characters.\n                // Numeric entities can represent characters beyond the BMP.\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            // Check if charval is a valid Unicode code point and not -1 (indicating failure to parse/find)\n            if (charval != -1 && Character.isValidCodePoint(charval)) {\n                // Character.toString(int) correctly handles both BMP and supplementary characters,\n                // returning a String of 1 or 2 chars as needed.\n                String c = Character.toString(charval); \n                // It is crucial to use Matcher.quoteReplacement() for the replacement string.\n                // This method escapes literal backslashes (\\) and dollar signs ($) in the\n                // replacement string to prevent them from being interpreted as special regex\n                // syntax (e.g., back-references or group references), which could lead to\n                // IllegalArgumentException.\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                // If charval is -1 (entity not found or parse error) or an invalid Unicode code point,\n                // retain the original entity string as found in the input.\n                // We must also quote m.group(0) because appendReplacement interprets its argument as a replacement string,\n                // meaning if the original entity contained '\\' or '$', it would cause the same error.\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}