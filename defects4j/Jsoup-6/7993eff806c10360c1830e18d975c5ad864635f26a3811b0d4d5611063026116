{
    "generation": "    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        // unescapePattern and full (Map for named entities) are assumed to be static fields.\n        Matcher m = unescapePattern.matcher(string);\n        StringBuffer accum = new StringBuffer(string.length());\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3); // Numeric entity value (e.g., \"92\" for &#92;)\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator (e.g., 'x' in &#x5C;)\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                    // charval remains -1, effectively skipping this entity conversion\n                }\n            } else {\n                String name = m.group(1); // Named entity (e.g., \"amp\" for &amp;)\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            String replacement;\n            // Determine the actual character(s) to replace the entity with\n            if (charval != -1) { // An entity was successfully parsed to a number or found in map\n                // Check if it's a valid Unicode code point (0 to 0x10FFFF)\n                if (charval >= Character.MIN_CODE_POINT && charval <= Character.MAX_CODE_POINT) {\n                    // HTML character references should not resolve to surrogate code points (0xD800-0xDFFF)\n                    if (charval < 0xD800 || charval > 0xDFFF) {\n                        if (charval <= 0xFFFF) { // Basic Multilingual Plane (BMP) character\n                            replacement = Character.toString((char) charval);\n                        } else { // Supplementary character (outside BMP, requires two char units)\n                            replacement = new String(Character.toChars(charval));\n                        }\n                    } else {\n                        // It's a surrogate code point (e.g., &#xD800;). HTML entities for these are generally invalid.\n                        // So, keep the original entity string as the replacement.\n                        replacement = m.group(0);\n                    }\n                } else {\n                    // The 'charval' parsed is outside the valid Unicode code point range (e.g., negative, or > 0x10FFFF).\n                    // Keep the original entity string as the replacement.\n                    replacement = m.group(0);\n                }\n            } else {\n                // The entity was not resolved (e.g., &unknown; or a numeric entity with bad format).\n                // Keep the original entity string as the replacement.\n                replacement = m.group(0);\n            }\n\n            // All replacement strings must be quoted for appendReplacement,\n            // as they may contain '\\' or '$' characters which have special meaning in regex replacements.\n            m.appendReplacement(accum, Matcher.quoteReplacement(replacement));\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}