{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n    // The logic here is:\n    // If 'type' represents a valid constructor or something we can attempt to construct (empty/unknown):\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      FunctionType fnType = type.toMaybeFunctionType(); // Try to get a FunctionType from 'type'\n\n      if (fnType != null) { // If 'type' was indeed a FunctionType (or contained one picked by UnionType.toMaybeFunctionType)\n        visitParameterList(t, n, fnType);\n\n        // We can only get an instance type if the function is actually a constructor.\n        // Otherwise, calling getInstanceType() on a non-constructor FunctionType throws IllegalStateException.\n        if (fnType.isConstructor()) {\n          ensureTyped(t, n, fnType.getInstanceType());\n        } else {\n          // If fnType is a function but not a constructor, it's an error.\n          // The result of `new X` where `X` is not a constructor is typically `unknown`\n          // or a warning is reported.\n          report(t, n, NOT_A_CONSTRUCTOR);\n          ensureTyped(t, n); // Default to unknown type for the NEW expression\n        }\n      } else {\n        // If fnType is null, it means 'type' was Empty or Unknown, or a UnionType that\n        // didn't contain a FunctionType or couldn't resolve to a single one.\n        // In these cases, we don't have a specific instance type from a constructor.\n        ensureTyped(t, n);\n      }\n    } else {\n      // If 'type' is definitely not a constructor, not empty, and not unknown,\n      // then it's an error to use it with 'new'.\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}