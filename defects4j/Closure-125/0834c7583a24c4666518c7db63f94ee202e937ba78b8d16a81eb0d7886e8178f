{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n  // If it's a real constructor, an empty type, or unknown, allow it.\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null) {\n      visitParameterList(t, n, fnType);\n      // For a real constructor we know its instance type.\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      // For empty or unknown we still have to assign a type to avoid an\n      // IllegalStateException in ensureTyped.\n      ensureTyped(t, n, type);\n    }\n  } else {\n    // Not a constructor at all: report and still assign the original type\n    // so that downstream checks don't blow up.\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n, type);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}