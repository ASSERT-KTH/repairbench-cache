{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  // Drop any null/undefined from the constructor type.\n  JSType targetType = getJSType(constructor).restrictByNotNullOrUndefined();\n  // See if it's really a FunctionType that we can new up.\n  FunctionType fnType = targetType.toMaybeFunctionType();\n  if (fnType != null && fnType.isConstructor()) {\n    // Good, it's a constructor \u2013 type\u2010check the arguments and record the\n    // instance type on the NEW node.\n    visitParameterList(t, n, fnType);\n    ensureTyped(t, n, fnType.getInstanceType());\n  } else if (targetType.isEmptyType() || targetType.isUnknownType()) {\n    // An empty or unknown type is \"harmless\" here \u2013 don't error, but give\n    // it an unknown result type.\n    ensureTyped(t, n);\n  } else {\n    // Definitely not a constructor \u2013 report it (and supply the missing\n    // name argument so we don't blow up in the error reporter).\n    String name = constructor.getQualifiedName();\n    report(t, n, NOT_A_CONSTRUCTOR,\n           name != null ? name : constructor.toString());\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}