{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  // Get the raw type of the constructor, then strip null/undefined for error cases\n  JSType rawType = getJSType(constructor);\n  JSType type = rawType.restrictByNotNullOrUndefined();\n\n  // If it's the empty (bottom) type or an unknown type, just give the NEW expression\n  // an unknown type (don't crash), and don't report a NOT_A_CONSTRUCTOR.\n  if (type.isEmptyType() || type.isUnknownType()) {\n    ensureTyped(t, n);\n    return;\n  }\n\n  // See if it's really a @constructor function.\n  // We look at the raw type, not at the restricted wrapper, to preserve\n  // the .isConstructor flag and toMaybeFunctionType behavior.\n  FunctionType fnType = rawType.toMaybeFunctionType();\n  if (fnType != null && fnType.isConstructor()) {\n    visitParameterList(t, n, fnType);\n    ensureTyped(t, n, fnType.getInstanceType());\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}