{
    "generation": "import java.util.function.Supplier; // Assuming Java 8+ and Supplier interface is available/used\n\n/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  // TODO(nicksantos): This is ESTIMATED_FUNCTIONALITY. This should be function(new:X).\n  // Let the type system handle this check.\n  // If this is not a constructor, check for the NOT_A_CONSTRUCTOR error.\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    // Check for the MISSING_ARGUMENTS or EXTRA_ARGUMENTS error.\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null) {\n      visitParameterList(t, n, fnType);\n      // If the constructor type is templated, computing the instance type depends\n      // on the arguments. We need to give ensureTyped a function that computes\n      // the instance type after the arguments have been resolved.\n      // Note: The original fix likely used Guava's Supplier or an anonymous class\n      // if the codebase predates Java 8's functional interfaces.\n      // Assuming ensureTyped is overloaded to accept a Supplier<JSType> or similar.\n      if (fnType.isTemplated()) {\n        // Use final variable for use in lambda/anonymous class\n        final FunctionType finalizedFnType = fnType;\n        // Defer instance type resolution using a Supplier\n        ensureTyped(t, n, (Supplier<JSType>) () -> finalizedFnType.getInstanceType());\n      } else {\n        // Not templated, resolve instance type immediately\n        ensureTyped(t, n, fnType.getInstanceType());\n      }\n    } else {\n      // If the type is empty or unknown, the constructor is unusable,\n      // but there is no need to report a warning because we already reported\n      // a warning for the unusable constructor type.\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}