{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n  // If the constructor type is the empty (bottom) type\u2014e.g. from an always-false equality\u2014\n  // just assign that type to avoid an IllegalStateException.\n  if (type.isEmptyType()) {\n    ensureTyped(t, n, type);\n\n  } else if (type.isConstructor() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null) {\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      // unknown or union constructor signature\n      ensureTyped(t, n);\n    }\n\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}