{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  // If the constructor has no attached type, just give the NEW an unknown type\n  // and skip further checking to avoid IllegalStateException.\n  JSType rawType = constructor.getJSType();\n  if (rawType == null) {\n    ensureTyped(t, n);\n    return;\n  }\n\n  // Exclude null or undefined from the constructor type.\n  JSType type = rawType.restrictByNotNullOrUndefined();\n\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null) {\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      // e.g., an unknown or bottom type with no function signature\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}