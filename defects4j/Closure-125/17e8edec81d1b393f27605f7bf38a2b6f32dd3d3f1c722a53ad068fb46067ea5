{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n    // Is the type potentially a constructor?\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      FunctionType fnType = type.toMaybeFunctionType();\n\n      if (fnType != null) {\n        visitParameterList(t, n, fnType);\n\n        // Now, determine the type of the result.\n        // Check if it's *actually* a constructor (not an interface).\n        if (fnType.isConstructor() && !fnType.isInterface()) {\n          // Check if the instance type is well-defined before using it.\n          // This guards against potential IllegalStateException for complex types\n          // derived from flow analysis (like intersections) where instance type\n          // might be ambiguous or problematic to compute.\n          if (fnType.hasInstanceType()) {\n             ensureTyped(t, n, fnType.getInstanceType());\n          } else {\n             // Fallback if instance type is missing or ill-defined.\n             ensureTyped(t, n);\n          }\n        } else {\n          // Report error: Tried to instantiate something that isn't a concrete constructor.\n          if (fnType.isInterface()) {\n             // Interfaces are constructors but cannot be instantiated.\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, fnType.toString());\n          } else {\n             // It was potentially a function, but not marked as a constructor.\n             report(t, n, NOT_A_CONSTRUCTOR);\n          }\n          ensureTyped(t, n);\n        }\n      } else {\n        // Type was empty or unknown, or couldn't be converted to FunctionType.\n        // Assign unknown type without reporting an error here,\n        // as the initial type check was lenient.\n        ensureTyped(t, n);\n      }\n    } else {\n      // Type is definitely not a constructor (e.g., number, string).\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}