{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n  // If it's really a constructor, check the args and give the new-expression its instance type.\n  if (type.isConstructor()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null) {\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      // Shouldn't normally happen, but fall back to the no\u2010arg path.\n      ensureTyped(t, n);\n    }\n\n  // If it's an empty type (e.g. unreachable branch) or totally unknown, propagate that\n  // rather than blowing up.\n  } else if (type.isEmptyType() || type.isUnknownType()) {\n    ensureTyped(t, n, type);\n\n  // Otherwise it's definitely not a constructor.\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}