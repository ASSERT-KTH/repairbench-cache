{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    // Get the type of the constructor expression.\n    JSType constructorType = getJSType(constructor).restrictByNotNullOrUndefined();\n\n    // Check if it's a function type that is a constructor or an interface.\n    FunctionType fnType = constructorType.toMaybeFunctionType();\n\n    // Interfaces are types but cannot be instantiated with 'new'.\n    // They are represented as FunctionTypes where isInterface() is true.\n    if (fnType != null && fnType.isInterface()) {\n      report(t, constructor, CANNOT_INSTANTIATE_INTERFACE, constructorType.toString());\n      // Assign an unknown type to the 'new' expression node.\n      ensureTyped(t, n);\n    } else if (fnType != null && fnType.isConstructor()) {\n      // Ideal case: The constructor type is a FunctionType marked as a constructor.\n      // Check parameters and assign the instance type to the 'new' expression.\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      // Not an interface and not a simple constructor FunctionType.\n      // This could be:\n      // 1. A union of constructors (e.g., due to flow typing like `if (cond) { C = A; } else { C = B; } new C()`).\n      //    - constructorType.isConstructor() might be true.\n      //    - fnType would be null.\n      // 2. An empty or unknown type.\n      //    - constructorType.isEmptyOrUnknown() is true.\n      //    - fnType would be null.\n      // 3. A type that is definitely not constructible (e.g., number, string, non-constructor function).\n      //    - constructorType.isConstructor() is false.\n      //    - fnType might be null or a non-constructor function.\n\n      // Report an error only if we are certain the type is not constructible.\n      // Avoid reporting errors for unknown, empty, or union types that might contain constructors.\n      // The check `!constructorType.isConstructor()` correctly identifies types like number or string.\n      // It might also be false for unions containing constructors, which is desired (no error).\n      if (!constructorType.isConstructor() &&\n          !constructorType.isUnknownType() &&\n          !constructorType.isEmptyType()) {\n        report(t, constructor, NOT_A_CONSTRUCTOR);\n      }\n\n      // In all these non-standard cases, assign a default type (likely Unknown)\n      // to the 'new' expression node. Parameter checking is generally skipped here.\n      // TODO(b/116442466): Handle unions of constructors more precisely by checking parameters\n      // against all alternatives and assigning the union of instance types.\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}