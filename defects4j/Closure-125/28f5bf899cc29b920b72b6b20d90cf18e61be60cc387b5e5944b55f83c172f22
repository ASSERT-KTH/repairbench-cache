{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n      } else if (type.isUnionType()) {\n        // Handle union types by ensuring the result is typed as the union of instance types\n        UnionType unionType = (UnionType) type;\n        JSType instanceType = unionType.getRestrictedUnion(\n            alternate -> alternate.toMaybeFunctionType() != null ? \n                alternate.toMaybeFunctionType().getInstanceType() : \n                null).restrictByNotNullOrUndefined();\n        ensureTyped(t, n, instanceType);\n      } else {\n        ensureTyped(t, n);\n      }\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}