{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n    // Check if the type is potentially a constructor or can be resolved to one.\n    // This includes interfaces, empty, and unknown types as potential valid cases or fallbacks.\n    if (type.isConstructor() || type.isInterface() || type.isEmptyType() || type.isUnknownType()) {\n      FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n        // Ensure that the resolved FunctionType itself is a constructor or interface.\n        // This guards against potential inconsistencies, e.g., where a UnionType\n        // reports isConstructor() as true, but toMaybeFunctionType() returns null,\n        // OR where type inference creates a FunctionType that unexpectedly isn't marked\n        // as a constructor/interface, which could cause fnType.getInstanceType() to fail.\n        // See https://github.com/google/closure-compiler/issues/1002\n        if (fnType.isConstructor() || fnType.isInterface()) {\n          visitParameterList(t, n, fnType);\n          ensureTyped(t, n, fnType.getInstanceType());\n        } else {\n          // If the resolved function type is not a constructor/interface, treat it as invalid.\n          // This might happen with complex types or inference issues. Fallback.\n          // We report the error because the original type suggested it might be a constructor.\n          report(t, n, NOT_A_CONSTRUCTOR);\n          ensureTyped(t, n);\n        }\n      } else {\n        // If toMaybeFunctionType is null, it means the original type (e.g., Union, Unknown, Empty)\n        // could not be resolved to a single FunctionType. Fallback using unknown type.\n        ensureTyped(t, n);\n      }\n    } else {\n      // The initial type check failed (not Constructor, Interface, Empty, or Unknown).\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}