{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n  // Fix: Handle the case where restrictByNotNullOrUndefined() returns an empty union type,\n  // which can happen for interfaces, so also check if original type is a function type.\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType() || getJSType(constructor).isFunctionType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType == null) {\n      fnType = getJSType(constructor).toMaybeFunctionType();\n    }\n    if (fnType != null) {\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}