{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n    // Fix: also check that the type is a FunctionType before using it.\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null && (type.isConstructor() || type.isEmptyType() || type.isUnknownType())) {\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else if (type.isEmptyType() || type.isUnknownType()) {\n      // Accept unknown/empty types but don't attempt to create FunctionType.\n      ensureTyped(t, n);\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}