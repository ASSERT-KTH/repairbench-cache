{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor);\n\n    // Ensure the type is not null or undefined before further processing\n    if (type == null || type.isUnknownType()) {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n      return;\n    }\n\n    // Restrict the type to non-null and non-undefined\n    type = type.restrictByNotNullOrUndefined();\n\n    if (type.isConstructor() || type.isEmptyType()) {\n      FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n      } else {\n        ensureTyped(t, n);\n      }\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}