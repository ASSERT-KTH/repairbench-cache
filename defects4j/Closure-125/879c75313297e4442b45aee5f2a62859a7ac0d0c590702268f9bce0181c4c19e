{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  FunctionType fnType = null;\n\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    // Defensive: avoid IllegalStateException if restrictByNotNullOrUndefined\n    // returns a union unrelated to FunctionType, i.e., avoid calling toMaybeFunctionType on non-function\n    fnType = type.toMaybeFunctionType();\n  }\n\n  if (fnType != null) {\n    visitParameterList(t, n, fnType);\n    ensureTyped(t, n, fnType.getInstanceType());\n  } else if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    // Might be missing constructor info, but do not throw\n    ensureTyped(t, n);\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}