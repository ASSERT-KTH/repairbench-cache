{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n  // Handle the simple case of a single constructor.\n  FunctionType fnType = type.toMaybeFunctionType();\n  if (fnType != null) {\n    visitParameterList(t, n, fnType);\n    ensureTyped(t, n, fnType.getInstanceType());\n    return;\n  }\n\n  // Handle the case where we have a union of constructors.\n  UnionType unionType = type.toMaybeUnionType();\n  if (unionType != null) {\n    JSTypeRegistry registry = compiler.getTypeRegistry();\n    List<JSType> instanceTypes = Lists.newArrayList();\n    for (JSType alt : unionType.getAlternates()) {\n      JSType altRestricted = alt.restrictByNotNullOrUndefined();\n      FunctionType altFn = altRestricted.toMaybeFunctionType();\n      if (altFn != null) {\n        visitParameterList(t, n, altFn);\n        instanceTypes.add(altFn.getInstanceType());\n      } else if (altRestricted.isEmptyType() || altRestricted.isUnknownType()) {\n        // skip empty or unknown arms\n      } else {\n        // one of the union members isn't a constructor \u2192 error\n        report(t, n, NOT_A_CONSTRUCTOR);\n        ensureTyped(t, n);\n        return;\n      }\n    }\n    if (!instanceTypes.isEmpty()) {\n      ensureTyped(t, n, registry.createUnionType(instanceTypes));\n    } else {\n      // all arms were empty/unknown\n      ensureTyped(t, n);\n    }\n    return;\n  }\n\n  // If it's empty or unknown, propagate; otherwise it's not a constructor.\n  if (type.isEmptyType() || type.isUnknownType()) {\n    ensureTyped(t, n);\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}