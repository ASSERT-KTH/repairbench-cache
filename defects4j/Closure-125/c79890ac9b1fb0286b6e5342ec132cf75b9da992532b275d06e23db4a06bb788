{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n\n  // Determine whether the type is acceptable as a constructor.\n  // We accept if it is already a constructor, if it is empty/unknown,\n  // or if it is a union type that contains at least one constructor.\n  boolean isCtor = type.isConstructor() || type.isEmptyType() || type.isUnknownType();\n  if (!isCtor && type.isUnionType()) {\n    UnionType union = type.toMaybeUnionType();\n    for (JSType alt : union.getAlternates()) {\n      if (alt.isConstructor()) {\n        isCtor = true;\n        break;\n      }\n    }\n  }\n\n  if (isCtor) {\n    // Try to get a single function type from the (possibly union) type.\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType != null) {\n      // When we have a unique function type we can check the parameters.\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else if (type.isUnionType()) {\n      // Handle the case where the constructor type is a union of function types.\n      UnionType union = type.toMaybeUnionType();\n      JSType instanceType = null;\n      for (JSType alt : union.getAlternates()) {\n        // Only look at alternates that are constructors.\n        if (alt.isConstructor()) {\n          FunctionType altFn = alt.toMaybeFunctionType();\n          if (altFn != null) {\n            JSType altInstance = altFn.getInstanceType();\n            instanceType = instanceType == null\n                ? altInstance\n                : instanceType.getUnionType(altInstance);\n          }\n        }\n      }\n      if (instanceType == null) {\n        instanceType = getNativeType(UNKNOWN_TYPE);\n      }\n      // For union types we forego parameter-list checking because it is ambiguous.\n      ensureTyped(t, n, instanceType);\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}