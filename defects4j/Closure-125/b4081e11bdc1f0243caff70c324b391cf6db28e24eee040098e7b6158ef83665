{
    "generation": "  /**\n   * Visits a NEW node.\n   */\n  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    FunctionType fnType = type.toMaybeFunctionType();\n\n    if (fnType != null) {\n      // If the type is a FunctionType, check if it's a valid constructor-like function.\n      // This includes explicitly marked constructors/interfaces, and nominal constructors\n      // (which are semantically constructors, even if their internal flags might be inconsistent due to type aliasing).\n      if (fnType.isConstructor() || fnType.isInterface() || fnType.isNominalConstructor()) {\n        visitParameterList(t, n, fnType);\n\n        JSType instanceTypeToUse;\n        // If the FunctionType is properly marked as a constructor or an interface,\n        // we can safely get its instance type.\n        if (fnType.isConstructor() || fnType.isInterface()) {\n          instanceTypeToUse = fnType.getInstanceType();\n        } else {\n          // This is the problematic case where fnType.isNominalConstructor() is true,\n          // but fnType.isConstructor() and fnType.isInterface() are false.\n          // This indicates an inconsistent type definition, likely from an alias or typedef.\n          // To prevent the IllegalStateException from getInstanceType(), we fall back\n          // to UNKNOWN_TYPE for the instance.\n          instanceTypeToUse = t.getCompiler().getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        ensureTyped(t, n, instanceTypeToUse);\n      } else {\n        // It's a FunctionType, but not a constructor, interface, or nominal constructor.\n        // E.g., an ordinary function, which cannot be 'new'd.\n        report(t, n, NOT_A_CONSTRUCTOR);\n        ensureTyped(t, n);\n      }\n    } else {\n      // If the type is not a FunctionType, check if it's an empty or unknown type.\n      // In these cases, we assume it *could* be a constructor due to incomplete type information.\n      if (type.isEmptyType() || type.isUnknownType()) {\n        ensureTyped(t, n);\n      } else {\n        // It's neither a FunctionType, nor empty/unknown. It's definitely not a constructor.\n        report(t, n, NOT_A_CONSTRUCTOR);\n        ensureTyped(t, n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}