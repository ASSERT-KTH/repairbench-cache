{
    "generation": "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    // If we couldn\u2019t get a function type directly,\n    // check union alternatives to see if one is a function type.\n    if (fnType == null && type.isUnionType()) {\n      for (JSType alt : type.getAlternates()) {\n        fnType = alt.toMaybeFunctionType();\n        if (fnType != null) {\n          break;\n        }\n      }\n    }\n    if (fnType != null) {\n      visitParameterList(t, n, fnType);\n      JSType instanceType = fnType.getInstanceType();\n      // Avoid passing a null instance type.\n      if (instanceType == null) {\n        instanceType = fnType;\n      }\n      ensureTyped(t, n, instanceType);\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}