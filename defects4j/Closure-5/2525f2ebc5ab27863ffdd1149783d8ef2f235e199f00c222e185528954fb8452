{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n    Set<String> validProperties = Sets.newHashSet();\n    boolean hasDelete = false;\n\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // If any reference is a delete operation, inlining is not allowed.\n        if (parent.isDeleteExpr() && gramps.isExprStmt() && (parent.getFirstChild() == name)) {\n            hasDelete = true;\n            return false;\n        }\n\n        // Existing checks for indirect references and assignment continues here...\n\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            if (gramps.isCall()\n                && gramps.getFirstChild() == parent) {\n                return false;\n            }\n\n            String propName = parent.getLastChild().getString();\n            if (!validProperties.contains(propName)) {\n                if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n                    validProperties.add(propName);\n                } else {\n                    return false;\n                }\n            }\n            continue;\n        }\n\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            continue;\n        }\n\n        if (!val.isObjectLit()) {\n            return false;\n        }\n\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n            if (child.isGetterDef() ||\n                child.isSetterDef()) {\n                return false;\n            }\n\n            validProperties.add(child.getString());\n\n            Node childVal = child.getFirstChild();\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        return false;\n                    }\n                    refNode = refNode.getParent();\n                }\n            }\n        }\n\n    }\n\n    return !hasDelete;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}