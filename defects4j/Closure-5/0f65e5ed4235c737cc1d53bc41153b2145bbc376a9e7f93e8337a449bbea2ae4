{
    "generation": "import com.google.common.base.Preconditions;\nimport com.google.common.collect.Sets;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.Normalize.ScopeTicklingCallback;\nimport com.google.javascript.jscomp.ReferenceCollectingCallback.Reference;\nimport java.util.List;\nimport java.util.Set;\n\n\n    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically, we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     * This function has been adapted to check inlinability conditions.\n     *\n     * @param refs The references to the object variable.\n     * @return Whether the object literal can be inlined.\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      // Keeps track of properties defined on the object literal.\n      // If we see a reference to a property that isn't defined\n      // on the object literal, we assume that it might be a\n      // reference to a property on the Object prototype.\n      Set<String> validProperties = Sets.newHashSet();\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore most indirect references, like x.y (but not x.y(),\n        // since the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target may be using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            // x.y()\n            return false;\n          }\n\n          // Deleting a property has different semantics from deleting\n          // a variable, so deleted properties should not be inlined.\n          if (gramps.isDelProp()) {\n            // delete x.y\n            return false;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          String propName = parent.getLastChild().getString();\n          if (!validProperties.contains(propName)) {\n            // We're seeing a reference to a property that we haven't seen\n            // before.\n\n            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              // Oh, this is the first time we've seen a definition of\n              // this property. Assume that it's safe, and validate the\n              // other definitions later.\n              validProperties.add(propName);\n            } else {\n              // We're seeing a reference to an unknown property. Bail.\n              return false;\n            }\n          }\n          // This is a direct reference to a property. Continue.\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          // TODO(nicksantos): Handle this case. This means that the var is\n          // assigned unconditionally in a sibling statement. If the var\n          // is assigned conditionally, then we should be able to inline\n          // the object literal into the locations where it's known to be\n          // an object literal, but that type information isn't available yet.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO(nicksantos): Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          validProperties.add(child.getString());\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            // Check self-referential assignment\n            // Assignment like x = {a: x.b}; is not safe to inline.\n            // TODO(johnlenz): Add AST helpers for this.\n            Node refNode = t.getNode().getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }\n\n    /**\n     * @param name The node that represents the variable name.\n     * @return Whether the name is the LHS of a var or assign statement.\n     */\n    private boolean isVarOrAssignExprLhs(Node name) {\n      Node parent = name.getParent();\n      return parent.isVar()\n          || (parent.isAssign() && parent.getFirstChild() == name);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}