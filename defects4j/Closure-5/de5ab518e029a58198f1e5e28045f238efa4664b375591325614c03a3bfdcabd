{
    "generation": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<String> validProperties = Sets.newHashSet();\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore direct and indirect references appropriately.\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // Check if the grandparent is a call or delete operation.\n          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n            return false;\n          }\n          if (gramps.isDelete()) {\n            return false;\n          }\n\n          // Deleting a property has different semantics, so inlining should be avoided.\n          // The code will check if the property exists in the valid set, but delete would affect behavior.\n\n          String propName = parent.getLastChild().getString();\n          if (!validProperties.contains(propName)) {\n            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              validProperties.add(propName);\n            } else {\n              return false;\n            }\n          }\n          continue;\n        }\n\n        // Only allow rewriting for VAR declarations or simple assignments.\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // Var with no assignment.\n          continue;\n        }\n\n        // Ensure the value is an object literal.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Check for self-referential assignments and ES5 features.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            return false;\n          }\n\n          validProperties.add(child.getString());\n\n          Node childVal = child.getFirstChild();\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // Consider the object literal as a candidate for inlining.\n        ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}