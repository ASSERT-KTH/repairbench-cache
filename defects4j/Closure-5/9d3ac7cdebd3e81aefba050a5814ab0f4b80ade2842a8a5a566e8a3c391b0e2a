{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // For a property access (x.y), check for special cases.\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n\n      // If this GETPROP is used in a delete operation, do not inline.\n      if (gramps != null && gramps.isDelProp()) {\n        return false;\n      }\n\n      // A call target may be using the object as a 'this' value.\n      if (gramps != null && gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // Deleting a property has different semantics from deleting\n      // a variable, so deleted properties should not be inlined.\n      String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements.\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Ensure that the value is not self-referential and that ES5 getters/setters\n    // are not used.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n      validProperties.add(child.getString());\n\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            // Self-referential assignment found\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    // We have found an acceptable object literal assignment.\n    ret = true;\n  }\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}