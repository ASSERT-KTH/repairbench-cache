{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  // Track deleted properties\n  Set<String> deletedProperties = Sets.newHashSet();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      String propName = parent.getLastChild().getString();\n      if (deletedProperties.contains(propName)) {\n        // If the property was deleted, inlining is not safe\n        return false;\n      }\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for deleted properties\n    Node current = parent;\n    while (!NodeUtil.isStatementBlock(current)) {\n      if (current.isAdmin() && current.getFirstChild().isName() && current.getFirstChild().getString().equals(\"delete\")) {\n        Node expr = current.getFirstChild().getNext();\n        if (expr.isGetProp() && expr.getLastChild().isString()) {\n          String deletedProp = expr.getLastChild().getString();\n          deletedProperties.add(deletedProp);\n        }\n      }\n      current = current.getParent();\n    }\n\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n\n      validProperties.add(child.getString());\n\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    if (deletedProperties.isEmpty()) {\n      ret = true;\n    } else {\n      ret = false;\n    }\n  }\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}