{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically, we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      // Keep track of properties that are known to be defined on the object.\n      // Initially, this includes properties defined in the object literal.\n      // It can be expanded by assignments to properties of the object.\n      Set<String> validProperties = Sets.newHashSet();\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore most indirect references, like x.y (but not x.y(),\n        // since the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target may be using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            // e.g. x.y()\n            return false;\n          }\n\n          // Deleting a property has different semantics from deleting\n          // a variable, so deleted properties should not be inlined.\n          if (gramps.isDelProp()) {\n             // e.g. delete x.y\n            return false;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal OR assigned\n          // later. This isn't a perfect algorithm, but it should catch most cases.\n          String propName = parent.getLastChild().getString();\n          if (!validProperties.contains(propName)) {\n            // The property is not known to be defined. Check if it's being\n            // assigned to in this reference. If so, add it to the known\n            // properties. Otherwise, bail out.\n            // e.g. x.y = 1; (gramps is ASSIGN, parent is GETPROP x.y)\n            // or var z = x.y = 1; (gramps is ASSIGN, parent is GETPROP x.y)\n            // or x.y += 1; (gramps is ASSIGN_*, parent is GETPROP x.y)\n            if (NodeUtil.isAssignmentOp(gramps) && gramps.getFirstChild() == parent) {\n              validProperties.add(propName);\n            } else if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              // This case handles var x = {a:1}; x.b = 2;\n              // Here parent=x.b, gramps=ASSIGN\n              validProperties.add(propName);\n            } else {\n              // Property is referenced but not defined/assigned in a way\n              // we can track.\n              // e.g. alert(x.y); where y was not in the original literal\n              // or assigned via x.y = ...;\n              return false;\n            }\n          }\n          // This reference is a property access that is safe to inline.\n          continue;\n        }\n\n        // If the reference is not part of a GETPROP, it must be a direct\n        // reference like `x` itself. We only allow these if they are the LHS\n        // of a VAR declaration or a simple assignment.\n        if (!isVarOrAssignExprLhs(name)) {\n           // e.g. alert(x); or x;\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var declaration with no assignment, e.g., var x;\n          // This is allowed, but doesn't contribute to making ret = true.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        // e.g. x = {a: 1, b: 2};\n        if (!val.isObjectLit()) {\n          // e.g. x = other_var; or x = 1;\n          return false;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO(b/116314996): Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          // Record the property defined in the object literal.\n          validProperties.add(child.getString());\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen. e.g. x = { a: x.b }\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            // Traverse up from the reference's parent to see if it's contained\n            // within the value expression of a property in the current object literal.\n            while (refNode != null && refNode != gramps && !NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments or disallowed references\n        // that mess things up, we can inline.\n        ret = true;\n      }\n      // The object is inlinable only if we found at least one valid\n      // object literal assignment (`ret = true`) and none of the references\n      // invalidated the possibility (returned false).\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}