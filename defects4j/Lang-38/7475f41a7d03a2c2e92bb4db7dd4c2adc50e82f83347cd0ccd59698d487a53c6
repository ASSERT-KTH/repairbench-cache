{
    "generation": "    /**\n     * <p>Formats a <code>Calendar</code> object into the\n     * supplied <code>StringBuffer</code>.</p>\n     * \n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            // LANG-538: The previous implementation cloned the calendar and then set its timezone.\n            // This was problematic because Calendar.setTimeZone() does not change the\n            // underlying millisecond value, only how it's interpreted. If the calendar's\n            // internal state (like its fields) was already computed based on a different\n            // timezone, just changing the timezone might not force a re-computation,\n            // leading to incorrect formatting (e.g., displaying 08:00 from GMT-8 as 08:00 GMT).\n            //\n            // The correct fix is to create a *new* Calendar instance initialized with the\n            // formatter's desired timezone, and then set its time using the original\n            // calendar's absolute time (milliseconds since epoch). This ensures that\n            // all field computations are done strictly relative to the formatter's timezone.\n            final Calendar c = new GregorianCalendar(mTimeZone, mLocale);\n            c.setTimeInMillis(calendar.getTimeInMillis());\n            return applyRules(c, buf);\n        }\n        return applyRules(calendar, buf);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}