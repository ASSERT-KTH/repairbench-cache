{
    "generation": "  /**\n   * Returns the remainder of the line.\n   */\n  private String getRemainingJSDocLine() {\n    // The `stream.getRemainingJSDocLine()` method (from JSDocStream)\n    // reads characters up to, but not including, the end-of-line (EOL)\n    // character(s) or the '*/' end-of-comment marker.\n    //\n    // For correct position tracking and to advance the stream to the beginning\n    // of the next logical line (if any), any EOL characters must be consumed\n    // by this wrapper function. If EOL is not consumed, subsequent parsing\n    // operations that rely on the stream's current position can record\n    // incorrect position information, leading to errors like `IllegalStateException`.\n    //\n    // The '*/' end-of-comment marker should NOT be consumed here, as that\n    // signifies the end of the entire JSDoc block and is handled by\n    // higher-level parsing logic.\n\n    String result = stream.getRemainingJSDocLine();\n\n    if (stream.isEOL()) {\n      // Consume the first character of the EOL sequence ('\\n' or '\\r').\n      stream.next();\n      // If it's a Windows-style EOL sequence ('\\r\\n'), consume the second character ('\\n').\n      if (stream.peek() == '\\n') {\n        stream.next();\n      }\n    }\n    // If `stream.isEOL()` is false, it means the `stream.getRemainingJSDocLine()`\n    // stopped because it encountered '*/' (end of comment). In that case,\n    // we leave '*/' unconsumed for the higher-level parser to handle.\n\n    return result;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}