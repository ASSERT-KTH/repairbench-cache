{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = ta;\n\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb = t0 + (i + 1) * h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            if (g0Positive ^ (gb >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                // check for very close root after step start\n                if (Math.abs(tb - ta) <= convergence) {\n                    // only accept if it's the first event or far enough from previous one\n                    if ((pendingEventTime != ta) && (Double.isNaN(previousEventTime) || \n                        Math.abs(ta - previousEventTime) > convergence)) {\n                        pendingEventTime = ta;\n                        pendingEvent = true;\n                        increasing = gb >= ga;\n                        return true;\n                    } else {\n                        // ignore spurious bracketing with no sign change\n                        ta = tb;\n                        ga = gb;\n                        continue;\n                    }\n                }\n\n                // variation direction, with respect to the integration direction\n                increasing = gb >= ga;\n\n                // Find the root\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n\n                double root;\n                try {\n                    root = forward ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                } catch (org.apache.commons.math.ConvergenceException cex) {\n                    // switch sides if bracketing fails when crossing multiple roots\n                    // or very close roots; fudge ga just enough to ensure bracketing\n                    double epsilon = 0.5 * convergence;\n                    if (ga >= 0) {\n                        ga = -epsilon;\n                    } else {\n                        ga = epsilon;\n                    }\n                    // re-try solve now that ga and gb have opposite signs\n                    root = forward ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                }\n\n                if ((Math.abs(root - ta) <= convergence) &&\n                     (Math.abs(root - previousEventTime) <= convergence)) {\n                    // found nothing or a repeated past event, ignore\n                    ta = tb;\n                    ga = gb;\n                    continue;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // waiting for this event from previous rejected step\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}