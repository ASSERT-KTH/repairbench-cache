{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb, gb;\n\n            for (int i = 0; i < n; ++i) {\n\n                // tb at the end of the substep\n                tb = t0 + (i + 1) * h;\n                // Don't step beyond t1 due to potential round-off\n                if (forward) {\n                    if (tb > t1) {\n                        tb = t1;\n                    }\n                } else {\n                    if (tb < t1) {\n                        tb = t1;\n                    }\n                }\n\n                interpolator.setInterpolatedTime(tb);\n                gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // Handle corner case: ga == 0\n                    if (Math.abs(ga) < convergence) {\n                        ga = (g0Positive ? -convergence : +convergence);\n                    }\n                    // Make sure gb != ga sign due to rare corner-case of double-root at exactly boundary\n                    if (Math.abs(gb) < convergence) {\n                        gb = (g0Positive ? +convergence : -convergence);\n                    }\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    final double left;\n                    final double right;\n                    final double leftG;\n                    final double rightG;\n                    if (forward) {\n                        left = ta;\n                        right = tb;\n                        leftG = ga;\n                        rightG = gb;\n                    } else {\n                        left = tb;\n                        right = ta;\n                        leftG = gb;\n                        rightG = ga;\n                    }\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n\n                    // Now ensure that root-finding is always bracketed, otherwise BrentSolver will throw\n                    // If the endpoint is 0, fudge by a bit in integration direction\n                    double bracketA = left;\n                    double bracketB = right;\n\n                    // If function is zero at endpoint, nudge by a bit to avoid BrentSolver error\n                    double fa = leftG;\n                    double fb = rightG;\n\n                    if (fa == 0.0) {\n                        final double epsilon = convergence * (forward ? 1.0 : -1.0);\n                        double newA = left + epsilon;\n                        if ((forward && newA > right) || (!forward && newA < right)) {\n                            newA = right;\n                        }\n                        interpolator.setInterpolatedTime(newA);\n                        fa = handler.g(newA, interpolator.getInterpolatedState());\n                        bracketA = newA;\n                    }\n                    if (fb == 0.0) {\n                        final double epsilon = convergence * (forward ? -1.0 : 1.0);\n                        double newB = right + epsilon;\n                        if ((forward && newB < left) || (!forward && newB > left)) {\n                            newB = left;\n                        }\n                        interpolator.setInterpolatedTime(newB);\n                        fb = handler.g(newB, interpolator.getInterpolatedState());\n                        bracketB = newB;\n                    }\n\n                    // Make sure bracketA and bracketB span a sign change (else, skip false event due to FP error)\n                    if ((fa > 0 && fb > 0) || (fa < 0 && fb < 0)) {\n                        // No sign change in this interval: false positive due to round-off near root\n                        ta = tb;\n                        ga = gb;\n                        continue;\n                    }\n\n                    final double root = solver.solve(f, bracketA, bracketB);\n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found a past event again, simply ignore it\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event, accept step\n                            return false;\n                        }\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}