{
    "generation": "    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // handle the corner case where events are very close\n                    if (Math.abs(ga) < convergence && Math.abs(gb) < convergence) {\n                        // both endpoints are very close to zero - this might indicate a double event\n                        // we'll take the midpoint as the event time\n                        pendingEventTime = 0.5 * (ta + tb);\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n\n                    // ensure we have proper bracketing\n                    if (Math.signum(ga) == Math.signum(gb)) {\n                        // if signs are the same, we might have missed the zero crossing\n                        // try with points shifted by convergence to ensure different signs\n                        double shiftedTa = ta < tb ? ta + convergence : ta - convergence;\n                        double shiftedTb = ta < tb ? tb - convergence : tb + convergence;\n\n                        // but we must ensure the shifted points are within the interval\n                        shiftedTa = Math.min(Math.max(shiftedTa, ta < tb ? ta : tb),\n                                           ta < tb ? tb : ta);\n                        shiftedTb = shiftedTa; // just take a point near the original endpoints\n\n                        // evaluate at shifted points\n                        interpolator.setInterpolatedTime(shiftedTa);\n                        double shiftedGa = handler.g(shiftedTa, interpolator.getInterpolatedState());\n                        interpolator.setInterpolatedTime(shiftedTb);\n                        double shiftedGb = handler.g(shiftedTb, interpolator.getInterpolatedState());\n\n                        // if we now have opposite signs, use these points instead\n                        if (Math.signum(shiftedGa) != Math.signum(shiftedGb)) {\n                            ta = shiftedTa;\n                            tb = shiftedTb;\n                            ga = shiftedGa;\n                            gb = shiftedGb;\n                        } else {\n                            // this is a problematic case where we cannot find a bracketing interval\n                            // we'll treat it as if there was an event at the midpoint\n                            pendingEventTime = 0.5 * (ta + tb);\n                            if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                                return false;\n                            }\n                            pendingEvent = true;\n                            return true;\n                        }\n                    }\n\n                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}