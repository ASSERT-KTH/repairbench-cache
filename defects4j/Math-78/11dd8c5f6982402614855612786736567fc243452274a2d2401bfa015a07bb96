{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        // prepare the loop\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        // start just beyond t0 by up to convergence to skip a past event\n        double tb = t0 + (forward ? convergence : -convergence);\n\n        for (int i = 0; i < n; ++i) {\n\n            // advance to the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // did the sign change?\n            if (g0Positive ^ (gb >= 0)) {\n                // yes --- there must be an event in (ta, tb)\n\n                // record the direction of crossing\n                increasing = gb >= ga;\n\n                // ensure that f(a) != 0 for the bracketing solver\n                double a  = ta;\n                double fa = ga;\n                if (Math.abs(fa) <= convergence) {\n                    // shift a by one convergence step into the interval\n                    final double shift = (forward ? convergence : -convergence);\n                    a = ta + shift;\n                    interpolator.setInterpolatedTime(a);\n                    fa = handler.g(a, interpolator.getInterpolatedState());\n                }\n\n                // build the function to find the root of g(t)\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n\n                // locate the root with a Brent solver\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = (a <= tb)\n                                  ? solver.solve(f, a, tb)\n                                  : solver.solve(f, tb, a);\n\n                // did we just re\u2010find the previous event?\n                if (Math.abs(root - ta) <= convergence &&\n                    Math.abs(root - previousEventTime) <= convergence) {\n                    // yes \u21d2 ignore it and continue\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           Math.abs(root - previousEventTime) > convergence) {\n                    // genuine new event\n                    pendingEventTime = root;\n                    if (pendingEvent && Math.abs(t1 - pendingEventTime) <= convergence) {\n                        // we were already waiting for this event and the step ends on it \u21d2 accept\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change \u21d2 no event in this substep\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event in the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException fee) {\n        final Throwable cause = fee.getCause();\n        if (cause instanceof DerivativeException) {\n            throw (DerivativeException) cause;\n        } else if (cause instanceof EventException) {\n            throw (EventException) cause;\n        }\n        throw new EventException(fee);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}