{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0;\n        for (int i = 0; i < n; ++i) {\n\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            if (g0Positive ^ (gb >= 0)) {\n                // ensure ga corresponds to true g at ta\n                interpolator.setInterpolatedTime(ta);\n                ga = handler.g(ta, interpolator.getInterpolatedState());\n\n                if ((ga >= 0) == (gb >= 0)) {\n\n                    // corner case: endpoints have the same sign due to convergence tightness (very close roots)\n                    // slightly shift ta backwards to enforce sign change\n                    final double epsilon = 0.5 * convergence;\n                    ta = ta + (forward ? -epsilon : epsilon);\n                    interpolator.setInterpolatedTime(ta);\n                    ga = handler.g(ta, interpolator.getInterpolatedState());\n                }\n\n                // proceed only if endpoints have opposite signs\n                if ((ga >= 0) ^ (gb >= 0)) {\n\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                    if ((Math.abs(root - ta) <= convergence) &&\n                        (Math.abs(root - previousEventTime) <= convergence)) {\n                        // ignoring spurious or duplicate event\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // accept step ends at event found previously\n                            return false;\n                        }\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change found after epsilon shift, ignore\n                    ta = tb;\n                    ga = gb;\n                }\n\n            } else {\n                // no sign change\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event found during whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}