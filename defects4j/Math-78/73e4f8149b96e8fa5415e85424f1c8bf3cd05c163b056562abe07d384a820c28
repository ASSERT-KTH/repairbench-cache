{
    "generation": "/** Evaluate the impact of the proposed step on the event handler.\n * @param interpolator step interpolator for the proposed step\n * @return true if the event handler triggers an event before\n * the end of the proposed step (this implies the step should be\n * rejected)\n * @exception DerivativeException if the interpolator fails to\n * compute the switching function somewhere within the step\n * @exception EventException if the switching function\n * cannot be evaluated\n * @exception ConvergenceException if an event cannot be located\n */\npublic boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        // start of subdivision\n        double ta = t0;\n        double ga = g0;\n        // if we're exactly at a root within tolerance, shift slightly\n        if (Math.abs(ga) <= convergence) {\n            ta = t0 + (forward ? convergence : -convergence);\n            interpolator.setInterpolatedTime(ta);\n            ga = handler.g(ta, interpolator.getInterpolatedState());\n        }\n\n        double tb = ta;\n        for (int i = 0; i < n; ++i) {\n\n            // end of this sub-interval\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check for a sign change between ga and gb\n            if ((ga >= 0 && gb < 0) || (ga < 0 && gb >= 0)) {\n\n                // direction of variation of the switching function\n                increasing = gb >= ga;\n\n                // isolate the root in [ta, tb]\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = solver.solve(f, ta, tb);\n\n                // ignore spurious root at the start of the interval / repeated event\n                if ((Math.abs(root - ta) <= convergence)\n                    && !Double.isNaN(previousEventTime)\n                    && (Math.abs(root - previousEventTime) <= convergence)) {\n                    // no new event here\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime)\n                           || (Math.abs(previousEventTime - root) > convergence)) {\n                    // a new event has been found\n                    pendingEventTime = root;\n                    if (pendingEvent\n                        && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // this event was already pending at the previous call\n                        // and it falls exactly at the end of the step\n                        // => accept the step\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change on this sub-interval\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event found in the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if (cause instanceof DerivativeException) {\n            throw (DerivativeException) cause;\n        } else if (cause instanceof EventException) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}