{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n\n            // FIX 1: If current time t0 is the previous event time and g0 is effectively zero,\n            // shift ta and ga slightly to step over the already handled event.\n            // This prevents the BrentSolver from being called with an endpoint that is exactly zero,\n            // which would violate its strict bracketing requirement (f(a)*f(b) < 0).\n            if (!Double.isNaN(previousEventTime) && Math.abs(g0) <= convergence &&\n                Math.abs(t0 - previousEventTime) <= convergence) {\n                \n                // Shift ta to be just past the event to look for the *next* event.\n                // This ensures ga is non-zero and has a proper sign for bracketing.\n                ta += (forward ? convergence : -convergence);\n                interpolator.setInterpolatedTime(ta);\n                ga = handler.g(ta, interpolator.getInterpolatedState());\n                // g0Positive instance field is based on g0 (at t0), so it's not updated here.\n                // The crucial fix below (using ga for the sign check) makes g0Positive less critical here.\n            }\n            \n            // The initial tb calculation in the original code starts with an offset, then increments by h.\n            // This creates substeps that are not uniform 'h' from 'ta' but from 't0' plus offset.\n            // Keeping it as is, to preserve the original logic's intent for tb increment.\n            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n\n\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // FIX 2: Check for sign change using ga (value at start of current substep) and gb (value at end of current substep).\n                // Original: if (g0Positive ^ (gb >= 0)) // Incorrectly used g0Positive (sign at overall step start t0)\n                if ((ga >= 0) ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}