{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t0; // Initialize tb\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb = t0 + (i + 1) * h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence using the sign change relative to the start of the step\n                // NOTE: This check (g0Positive ^ (gb >= 0)) is known to be potentially problematic\n                // for n>1 or when g0=0, but we fix the consequence (solver failure) here.\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    // Check if the event occurs exactly at the endpoint ta or tb\n                    // Use convergence to check for zero crossing\n                    final boolean zeroAtTa = Math.abs(ga) <= convergence;\n                    final boolean zeroAtTb = Math.abs(gb) <= convergence;\n\n                    if (zeroAtTa) {\n                        // g(ta) is zero. Check if ta is the previous event.\n                        if (Math.abs(ta - previousEventTime) <= convergence) {\n                           // ta is the previous event. We need to search for other events in (ta, tb].\n                           // If gb is also zero or has the same sign ga had 'just before' ta, no event in between.\n                           // The outer check g0Positive ^ (gb >= 0) implies a crossing between t0 and tb.\n                           // Since ta=previousEventTime, the crossing must be in (ta, tb] if gb has the expected sign.\n                           // We must adjust ta slightly to avoid solver failure if we proceed.\n                        } else {\n                           // g(ta) is zero, and ta is not the previous event. Event is at ta.\n                           pendingEventTime = ta;\n                           pendingEvent = true;\n                           return true; // Reject step\n                        }\n                    }\n\n                    if (zeroAtTb) {\n                         // g(tb) is zero. Check if tb is the previous event.\n                         if (Math.abs(tb - previousEventTime) <= convergence) {\n                             // tb is the previous event. Event is at tb.\n                             // No *new* event detected in [ta, tb) by crossing tb=previous.\n                             // Update ta, ga and continue to next sub-step.\n                             ta = tb;\n                             ga = gb;\n                             continue; // Skip root finding for this sub-step\n                         } else {\n                             // g(tb) is zero, and tb is not the previous event. Event is at tb.\n                             pendingEventTime = tb;\n                             if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                                 // This step ends exactly at the pending event. Accept it.\n                                 return false;\n                             }\n                             pendingEvent = true;\n                             return true; // Reject step\n                         }\n                    }\n\n                    // If we are here, event is not exactly at tb (unless tb=previousEventTime).\n                    // Event might be exactly at ta=previousEventTime.\n                    // We need to find the root in (ta, tb) or handle the ta=previousEventTime case.\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n\n                    double solveTa = ta;\n                    double solveTb = tb;\n\n                    if (zeroAtTa && (Math.abs(ta - previousEventTime) <= convergence)) {\n                        // Event possibly happens after ta=previousEventTime.\n                        // Adjust the interval start slightly *into* the interval [ta, tb]\n                        // to avoid the zero point ta for the solver.\n                        final double dt = (forward ? convergence : -convergence) * 0.5;\n                        solveTa = ta + dt;\n                        // Check that the adjustment is valid and preserves bracketing\n                        if ((forward && solveTa >= tb) || (!forward && solveTa <= tb)) {\n                            // Interval collapsed after shift, cannot solve.\n                            ta = tb; ga = gb; continue; // Skip sub-step\n                        }\n                        double shiftedGa = f.value(solveTa);\n                        if (shiftedGa * gb >= 0) {\n                            // Adjustment did not preserve bracketing. No root found here.\n                            ta = tb; ga = gb; continue; // Skip sub-step\n                        }\n                        // Use adjusted start point 'solveTa' for solver\n                    }\n\n                    // Call the solver with the (potentially adjusted) interval\n                    final double root = (solveTa <= solveTb) ? solver.solve(f, solveTa, solveTb) : solver.solve(f, solveTb, solveTa);\n\n                    // Process the found root (check against original ta and previousEventTime)\n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) the previous event near ta, we simply ignore it\n                        // Do NOT return, allow continuation to check further sub-steps if any.\n                        // Update ta, ga below.\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        // Found a new event, distinct from the previous one.\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false; // Accept step\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true; // Reject step\n                    }\n                    // else: root is close to previousEventTime but not close to ta. Ignore it. Update ta, ga below.\n\n                }\n                // Update ta, ga for the next sub-step or for exiting the loop\n                ta = tb;\n                ga = gb;\n\n            } // End for loop over sub-steps\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}