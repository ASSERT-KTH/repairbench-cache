{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            // The original initialization of tb was a bit unusual, starting with an offset.\n            // We maintain it to preserve existing behavior that passes other tests.\n            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence: a sign change between current sub-interval start (ga) and end (gb)\n                if ((ga >= 0) ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // Set up the interval for the solver\n                    double tLo = ta; // Lower bound for search\n                    double gLo = ga; // g-value at lower bound\n                    double tHi = tb; // Upper bound for search\n                    double gHi = gb; // g-value at upper bound\n\n                    // Ensure gLo and gHi have strictly opposite signs for the BrentSolver.\n                    // If one endpoint value is zero, slightly perturb it.\n                    // This is crucial as BrentSolver requires f(a)*f(b) < 0.\n                    if (gLo == 0.0) {\n                        tLo = forward ? (ta + convergence) : (ta - convergence);\n                        // Ensure tLo does not jump past tHi (e.g., if interval is very small)\n                        if (forward) {\n                            if (tLo > tHi) {\n                                tLo = tHi;\n                            }\n                        } else {\n                            if (tLo < tHi) {\n                                tLo = tHi;\n                            }\n                        }\n                        interpolator.setInterpolatedTime(tLo);\n                        gLo = handler.g(tLo, interpolator.getInterpolatedState());\n                    }\n                    if (gHi == 0.0) {\n                        tHi = forward ? (tb - convergence) : (tb + convergence);\n                        // Ensure tHi does not jump past tLo\n                        if (forward) {\n                            if (tHi < tLo) {\n                                tHi = tLo;\n                            }\n                        } else {\n                            if (tHi > tLo) {\n                                tHi = tLo;\n                            }\n                        }\n                        interpolator.setInterpolatedTime(tHi);\n                        gHi = handler.g(tHi, interpolator.getInterpolatedState());\n                    }\n\n                    // If after adjustments, signs are still not different (e.g., both became zero or same sign),\n                    // then no valid bracket for the solver. This implies no detectable event in this sub-interval.\n                    // We consider no event found and proceed to the next sub-interval.\n                    if (gLo * gHi >= 0) {\n                        ta = tb;\n                        ga = gb;\n                        continue; // No event detected for this sub-interval after all\n                    }\n\n                    // variation direction, with respect to the integration direction\n                    // This uses the original ga and gb, reflecting the overall trend in the sub-interval.\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    // Call solver with adjusted bounds (tLo, tHi) to ensure f(low)*f(high) < 0\n                    final double root = (tLo <= tHi) ? solver.solve(f, tLo, tHi) : solver.solve(f, tHi, tLo);\n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}