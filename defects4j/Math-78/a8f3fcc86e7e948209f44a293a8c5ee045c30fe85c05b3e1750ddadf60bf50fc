{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb;\n            double gb = g0;\n            for (int i = 0; i < n; ++i) {\n\n                tb = t0 + (i + 1) * h;\n                interpolator.setInterpolatedTime(tb);\n                gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // Ensure correct bracketing, adjust ta if ga == gb\n                    double adjustedTa = ta;\n                    double adjustedGa = ga;\n                    double adjustedTb = tb;\n                    double adjustedGb = gb;\n                    int k = 0;\n                    final int kMax = 50;\n                    while ((adjustedGa == adjustedGb) && (k < kMax)) {\n                        // Move adjustedTb slightly closer to adjustedTa\n                        final double dt = 0.5 * (adjustedTb - adjustedTa);\n                        adjustedTb = adjustedTa + dt;\n                        interpolator.setInterpolatedTime(adjustedTb);\n                        adjustedGb = handler.g(adjustedTb, interpolator.getInterpolatedState());\n                        k++;\n                    }\n                    // If still not bracketed, try to fudge adjustedTa a bit\n                    if (adjustedGa == adjustedGb) {\n                        final double epsilon = 1e-12 * Math.max(1.0, Math.abs(adjustedTa));\n                        adjustedTa += forward ? epsilon : -epsilon;\n                        interpolator.setInterpolatedTime(adjustedTa);\n                        adjustedGa = handler.g(adjustedTa, interpolator.getInterpolatedState());\n                    }\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    final double searchTa = adjustedTa;\n                    final double searchTb = adjustedTb;\n                    final double searchGa = adjustedGa;\n                    final double searchGb = adjustedGb;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    double root;\n                    try {\n                        if (searchTa <= searchTb) {\n                            root = solver.solve(f, searchTa, searchTb);\n                        } else {\n                            root = solver.solve(f, searchTb, searchTa);\n                        }\n                    } catch (org.apache.commons.math.FunctionEvaluationException fee) {\n                        // If failure, skip this substep and continue checking further intervals\n                        ta = tb;\n                        ga = gb;\n                        continue;\n                    } catch (org.apache.commons.math.ConvergenceException ce) {\n                        // Could not find root in substep: skip it and continue\n                        ta = tb;\n                        ga = gb;\n                        continue;\n                    }\n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}