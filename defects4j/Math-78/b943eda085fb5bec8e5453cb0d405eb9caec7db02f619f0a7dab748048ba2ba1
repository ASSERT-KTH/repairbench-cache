{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1,\n                                (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        // initialize the sub\u2010interval start\n        double ta = t0;\n        double ga = g0;\n        // if we start exactly on an event (|g0| \u2264 tol), shift ta slightly\n        // so we don't re\u2010detect the same event\n        if (Math.abs(ga) <= convergence) {\n            ta += (forward ? convergence : -convergence);\n            interpolator.setInterpolatedTime(ta);\n            ga = handler.g(ta, interpolator.getInterpolatedState());\n        }\n        double tb = ta;\n\n        for (int i = 0; i < n; ++i) {\n\n            // advance to the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // look for a sign change between ga and gb\n            if ((ga >= 0) ^ (gb >= 0)) {\n                // record the direction of the switch\n                increasing = gb >= ga;\n\n                // build the function for root finding\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t)\n                        throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException ex) {\n                            throw new FunctionEvaluationException(ex, t);\n                        } catch (EventException ex) {\n                            throw new FunctionEvaluationException(ex, t);\n                        }\n                    }\n                };\n                // find the root\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = (ta <= tb) ?\n                    solver.solve(f, ta, tb) :\n                    solver.solve(f, tb, ta);\n\n                // filter out trivial or already\u2010seen events\n                if ((Math.abs(root - ta) <= convergence) &&\n                    (Math.abs(root - previousEventTime) <= convergence)) {\n                    // ignore and continue searching\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(root - previousEventTime) > convergence)) {\n                    // a new, valid event\n                    pendingEventTime = root;\n                    if (pendingEvent &&\n                        (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // we were already pending at the end of the last step\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change in this substep\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // nothing found on the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if (cause instanceof DerivativeException) {\n            throw (DerivativeException) cause;\n        } else if (cause instanceof EventException) {\n            throw (EventException) cause;\n        } else {\n            throw new EventException(e);\n        }\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}