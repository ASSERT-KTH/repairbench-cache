{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n\n            // If the start of the current step (t0) is an event (g0 is zero),\n            // we should effectively shift our starting point to look for the *next* event.\n            // This handles cases where t0 is exactly an event (like r1 in closeEvents test)\n            // and we need to find subsequent events (like r2).\n            if (Math.abs(g0) <= convergence) {\n                ta += (forward ? convergence : -convergence);\n                // Re-evaluate ga at the slightly shifted ta\n                interpolator.setInterpolatedTime(ta);\n                ga = handler.g(ta, interpolator.getInterpolatedState());\n            }\n\n            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                // The condition `g0Positive ^ (gb >= 0)` checks for sign change between g(t0) and g(tb).\n                // This indicates that an event *might* have occurred between t0 and tb.\n                // The actual bracketing for the solver will use `ta` and `tb`.\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga; \n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n\n                    // Ensure bracketing for the solver. This is the crucial part from MATH-322.\n                    // Use temporary variables for solver interval to avoid modifying loop variables prematurely.\n                    double s_ta = ta; \n                    double s_ga = ga; \n                    double s_tb = tb; \n                    double s_gb = gb; \n\n                    // If the current interval [s_ta, s_tb] does not strictly bracket a root (i.e., s_ga and s_gb have same sign)\n                    if (s_ga * s_gb > 0) {\n                        // This implies an even number of roots, or a tangent, or no roots in (s_ta, s_tb).\n                        // If one end is very close to zero, perturb it slightly to try and establish a clear sign change.\n                        if (Math.abs(s_ga) < convergence) {\n                            s_ta += (forward ? convergence : -convergence);\n                            interpolator.setInterpolatedTime(s_ta);\n                            s_ga = handler.g(s_ta, interpolator.getInterpolatedState());\n                        } else if (Math.abs(s_gb) < convergence) {\n                            s_tb += (forward ? convergence : -convergence);\n                            interpolator.setInterpolatedTime(s_tb);\n                            s_gb = handler.g(s_tb, interpolator.getInterpolatedState());\n                        }\n                        // After potential perturbation, re-check bracketing.\n                        if (s_ga * s_gb > 0) {\n                            // If still not bracketing, it means there is no strict sign crossing for the solver.\n                            // In such a case, we consider no event found in this sub-interval.\n                            ta = tb;\n                            ga = gb;\n                            continue; // Skip the rest of this event handling block, move to next sub-interval.\n                        }\n                    }\n\n                    // Now, s_ta and s_tb should bracket a root.\n                    final double root = (s_ta <= s_tb) ? solver.solve(f, s_ta, s_tb) : solver.solve(f, s_tb, s_ta);\n\n                    // Refined logic for ignoring events that are already known or effectively at the start of the step.\n                    // This prevents re-detection of the same event or bouncing.\n                    if ((!Double.isNaN(previousEventTime) && Math.abs(root - previousEventTime) <= convergence) || \n                        (Math.abs(root - t0) <= convergence && Math.abs(g0) <= convergence)) { // if root is at t0 and g0 is zero\n                        \n                        interpolator.setInterpolatedTime(root);\n                        final double gr = handler.g(root, interpolator.getInterpolatedState());\n                        if (Math.abs(gr) <= convergence) {\n                            // The detected root is numerically zero, and it's either the previous event\n                            // or at the very beginning of the overall step (t0), with g(t0) being zero.\n                            // This indicates a \"bounce\" or re-detection of an already handled event.\n                            ta = tb;\n                            ga = gb;\n                            continue; // Ignore this event and proceed to the next sub-interval.\n                        }\n                    }\n                    \n                    // If we reach here, it's a significant event that needs to be handled.\n                    if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}