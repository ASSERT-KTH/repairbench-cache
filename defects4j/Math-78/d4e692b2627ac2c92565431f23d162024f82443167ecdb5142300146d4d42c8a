{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        /*\n         * If the switching function at the beginning of the step is nearly zero\n         * (i.e. an event has just been handled), we shift the starting time slightly\n         * to avoid re-detecting the past event.\n         */\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (forward ? convergence : -convergence);\n        if (Math.abs(ga) < convergence) {\n            ta = t0 + (forward ? convergence : -convergence);\n            interpolator.setInterpolatedTime(ta);\n            ga = handler.g(ta, interpolator.getInterpolatedState());\n            tb = ta;\n        }\n        // The initial sign is taken from the (possibly shifted) starting point.\n        final boolean initSign = (ga >= 0);\n\n        for (int i = 0; i < n; ++i) {\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // Look for a change with respect to the initial sign.\n            if (initSign ^ (gb >= 0)) {\n                increasing = gb >= ga;\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                if ((Math.abs(root - ta) <= convergence) &&\n                    (Math.abs(root - previousEventTime) <= convergence)) {\n                    // We have either found nothing new or are re-detecting the old event.\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // The event we were waiting for is now exactly at the end of the step.\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n            } else {\n                ta = tb;\n                ga = gb;\n            }\n        }\n\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}