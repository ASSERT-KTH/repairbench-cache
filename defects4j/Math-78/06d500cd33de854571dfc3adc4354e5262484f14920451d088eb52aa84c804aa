{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            // The original line initializing 'tb' here was buggy and has been removed.\n            // double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n\n            for (int i = 0; i < n; ++i) {\n\n                // Evaluate handler value at the end of the substep.\n                // The 'tb' calculation was buggy in the original code, now it's correctly derived.\n                final double tb = t0 + (i + 1) * h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // Check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // There is a sign change: an event is expected during this step\n\n                    // Handle numerical precision issues when endpoints are near roots.\n                    // Ensure the interval [ta, tb] (or [tb, ta]) is strictly bracketed for the solver.\n                    double solverTa = ta;\n                    double solverTb = tb;\n\n                    // Re-evaluate g(ta) and g(tb) to get the most accurate values for bracketing check.\n                    // This is crucial as initial 'ga' could be 0, and floating point errors might affect 'g(ta)'\n                    // evaluations during the solver's internal calls.\n                    interpolator.setInterpolatedTime(solverTa);\n                    double gAtSolverTa = handler.g(solverTa, interpolator.getInterpolatedState());\n                    interpolator.setInterpolatedTime(solverTb);\n                    double gAtSolverTb = handler.g(solverTb, interpolator.getInterpolatedState());\n\n                    if (gAtSolverTa * gAtSolverTb >= 0) {\n                        // The interval is not properly bracketed (e.g., one endpoint is zero or they have the same sign).\n                        // Since g0Positive ^ (gb >= 0) is true, we expect a root.\n                        // Perturb 'solverTa' to ensure bracketing.\n                        if (Math.abs(gAtSolverTa) < convergence) {\n                            // 'ta' is effectively a root. Perturb 'solverTa' to ensure bracketing.\n                            // The perturbation direction is chosen to ensure 'g(solverTa)' has the opposite sign to 'g(solverTb)'.\n                            // If moving forward and g(solverTb) is non-negative, or if moving backward and g(solverTb) is negative,\n                            // we need to move 'solverTa' against the integration direction. Otherwise, move in integration direction.\n                            solverTa += (interpolator.isForward() == (gAtSolverTb >= 0)) ? -convergence : convergence;\n                        } else {\n                            // Both 'gAtSolverTa' and 'gAtSolverTb' are non-zero but have the same sign.\n                            // This scenario implies a complex situation (e.g., multiple roots in a short interval)\n                            // or that the initial sign check was misleading due to precision.\n                            // In this case, perturb 'solverTa' backward (against integration direction)\n                            // to attempt to find an earlier root or clarify bracketing.\n                            solverTa += (interpolator.isForward() ? -convergence : convergence);\n                        }\n                    }\n                         \n                    // Determine variation direction for the event handler, based on current step values.\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    // Use the potentially perturbed solverTa and solverTb for the solver call.\n                    final double root = (solverTa <= solverTb) ? solver.solve(f, solverTa, solverTb) : solver.solve(f, solverTb, solverTa);\n                    \n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // We have either found nothing or found (again ?) a past event, we simply ignore it\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}