{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            // direction of integration\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            // number of subdivisions to respect max checking interval\n            final int    n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h = (t1 - t0) / n;\n\n            // initialize the bracket endpoints\n            double ta = t0;\n            double ga = g0;\n            double tb = t0 + (forward ? convergence : -convergence);\n\n            for (int i = 0; i < n; ++i) {\n\n                // move to the end of the i-th substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // detect a sign change between ga and gb\n                if ((ga >= 0) ^ (gb >= 0)) {\n\n                    // corner case: if ga is very close to zero, shift it\n                    if (Math.abs(ga) <= convergence) {\n                        ta += (forward ? convergence : -convergence);\n                        interpolator.setInterpolatedTime(ta);\n                        ga = handler.g(ta, interpolator.getInterpolatedState());\n                    }\n\n                    // record direction of g variation\n                    increasing = (gb >= ga);\n\n                    // build the function for root finding\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n\n                    // solve for the root within [ta, tb]\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    final double root = (ta <= tb)\n                                      ? solver.solve(f, ta, tb)\n                                      : solver.solve(f, tb, ta);\n\n                    // check if it's the same as a past event, ignore if so\n                    if (Math.abs(root - ta) <= convergence\n                        && Math.abs(root - previousEventTime) <= convergence) {\n                        // ignore this root, continue searching\n                        ta = tb;\n                        ga = gb;\n\n                    } else if (Double.isNaN(previousEventTime)\n                               || Math.abs(previousEventTime - root) > convergence) {\n                        // a new event has been found\n                        pendingEventTime = root;\n                        if (pendingEvent\n                            && Math.abs(t1 - pendingEventTime) <= convergence) {\n                            // we were already waiting for this event and now we land on it\n                            return false;\n                        }\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change on this substep, move on\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event in the entire step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException fee) {\n            final Throwable cause = fee.getCause();\n            if (cause instanceof DerivativeException) {\n                throw (DerivativeException) cause;\n            } else if (cause instanceof EventException) {\n                throw (EventException) cause;\n            }\n            throw new EventException(fee);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}