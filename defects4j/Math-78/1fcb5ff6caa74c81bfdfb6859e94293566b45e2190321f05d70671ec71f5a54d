{
    "generation": "/** Evaluate the impact of the proposed step on the event handler.\n * @param interpolator step interpolator for the proposed step\n * @return true if the event handler triggers an event before\n * the end of the proposed step (this implies the step should be\n * rejected)\n * @exception DerivativeException if the interpolator fails to\n * compute the switching function somewhere within the step\n * @exception EventException if the switching function\n * cannot be evaluated\n * @exception ConvergenceException if an event cannot be located\n */\npublic boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        // (FIX) - Ensure consistent initial tb\n        double tb;\n        if (interpolator.isForward()) {\n            tb = ta + Math.max(convergence, 0.5 * h);\n        } else {\n            tb = ta - Math.max(convergence, 0.5 * h);\n        }\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb = t0 + (i + 1) * h; // (FIX) tb updated to substep endpoint, avoids drift\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                // handle case where ga and gb has the same sign\n                // but when convergence was previously achieved on wrong side\n                double correctedTa = ta;\n                double correctedGa = ga;\n                if (gb * ga > 0) {\n                    // try to slightly shift ta so that ga and gb are bracketed\n                    double epsilon = 0.5 * convergence;\n                    correctedTa = forward ? ta + epsilon : ta - epsilon;\n                    interpolator.setInterpolatedTime(correctedTa);\n                    correctedGa = handler.g(correctedTa, interpolator.getInterpolatedState());\n                }\n\n                // variation direction, with respect to the integration direction\n                increasing = gb >= ga;\n\n                final double left = Math.min(correctedTa, tb);\n                final double right = Math.max(correctedTa, tb);\n\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                // Need to bracket the root; if f(left) and f(right) do not have different signs,\n                // do not try and catch the error but simply skip (no valid bracketing, so ignore event)\n                double fl, fr;\n                try {\n                    fl = f.value(left);\n                    fr = f.value(right);\n                } catch (FunctionEvaluationException e) {\n                    throw new EventException(e);\n                }\n                if (fl == 0.0) {\n                    // event exactly at left bound\n                    pendingEventTime = left;\n                    pendingEvent = true;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        return false;\n                    }\n                    return true;\n                } else if (fr == 0.0) {\n                    // event exactly at right bound\n                    pendingEventTime = right;\n                    pendingEvent = true;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        return false;\n                    }\n                    return true;\n                } else if (fl * fr > 0) {\n                    // endpoints have same sign, do not attempt to find root (fix for MATH-322)\n                    ta = tb;\n                    ga = gb;\n                    continue;\n                }\n\n                final double root = solver.solve(f, left, right);\n                if ((Math.abs(root - ta) <= convergence) &&\n                     (Math.abs(root - previousEventTime) <= convergence)) {\n                    // we have either found nothing or found (again ?) a past event, we simply ignore it\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // we were already waiting for this event which was\n                        // found during a previous call for a step that was\n                        // rejected, this step must now be accepted since it\n                        // properly ends exactly at the event occurrence\n                        return false;\n                    }\n                    // either we were not waiting for the event or it has\n                    // moved in such a way the step cannot be accepted\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event during the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}