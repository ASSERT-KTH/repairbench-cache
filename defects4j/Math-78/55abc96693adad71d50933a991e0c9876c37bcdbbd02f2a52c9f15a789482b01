{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t0;\n            for (int i = 0; i < n; ++i) {\n\n                // advance to the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // corner case: if the function is (nearly) zero at the start, shift it inward\n                if (i == 0 && Math.abs(ga) <= convergence) {\n                    ta += (forward ? convergence : -convergence);\n                    interpolator.setInterpolatedTime(ta);\n                    ga = handler.g(ta, interpolator.getInterpolatedState());\n                }\n\n                // check for a sign change between ta and tb\n                if ((ga >= 0) ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this substep\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException ex) {\n                                throw new FunctionEvaluationException(ex, t);\n                            } catch (EventException ex) {\n                                throw new FunctionEvaluationException(ex, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    final double root = (ta <= tb)\n                        ? solver.solve(f, ta, tb)\n                        : solver.solve(f, tb, ta);\n\n                    // ignore spurious roots at the very start or repeats of the same event\n                    if ((Math.abs(root - ta) <= convergence) &&\n                        (Math.abs(root - previousEventTime) <= convergence)) {\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // the step ends exactly at an already pending event\n                            return false;\n                        }\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change on this substep\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event detected over the entire step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if (cause instanceof DerivativeException) {\n                throw (DerivativeException) cause;\n            } else if (cause instanceof EventException) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}