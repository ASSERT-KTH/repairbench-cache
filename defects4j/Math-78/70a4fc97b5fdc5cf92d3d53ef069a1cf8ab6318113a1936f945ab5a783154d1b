{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final double dt = t1 - t0;\n            if (Math.abs(dt) < convergence) {\n                // we cannot do anything on such a small step, don't trigger any events\n                return false;\n            }\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(dt) / maxCheckInterval));\n            final double h  = dt / n;\n\n            double ta = t0;\n            double ga = g0;\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                final double tb = t0 + (i + 1) * h; // Corrected endpoint calculation\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if ((ga >= 0) ^ (gb >= 0)) { // Check sign change between ga and gb\n                    // there is a sign change: an event is expected during this step\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n\n                    double solverTa = ta;\n                    double solverTb = tb;\n                    // Adjust bracketing interval if one endpoint is zero, to avoid BrentSolver exception\n                    if (ga == 0.0 || gb == 0.0) {\n                         // Use a small relative increment to avoid numerical issues with convergence being too large/small\n                         final double epsilon = Math.ulp(ta) * 100; // A small nudge\n                         final double dtBracket = (forward) ? epsilon: -epsilon;\n\n                         if (ga == 0.0) {\n                            // Nudge ta slightly into the interval [ta, tb]\n                            solverTa = ta + dtBracket;\n                         }\n                         if (gb == 0.0) {\n                            // Nudge tb slightly into the interval [ta, tb]\n                            solverTb = tb - dtBracket;\n                         }\n                         // Check if the adjustment was valid (did not cross over)\n                         if ((forward && solverTa >= solverTb) || (!forward && solverTa <= solverTb)) {\n                            // Nudge failed or interval too small, revert to original interval\n                            // This might still fail in BrentSolver, but it's a fallback.\n                            solverTa = ta;\n                            solverTb = tb;\n                         }\n                         // Re-evaluate function values at nudged points to ensure sign change\n                         // This adds robustness but costs function evaluations\n                         try {\n                             double gaNudged = f.value(solverTa);\n                             double gbNudged = f.value(solverTb);\n                              if ((gaNudged >= 0) ^ (gbNudged >= 0)) {\n                                // Signs are different, use nudged interval\n                              } else {\n                                 // Nudging failed to maintain sign difference, revert\n                                 solverTa = ta;\n                                 solverTb = tb;\n                              }\n                         } catch (FunctionEvaluationException fee) {\n                             // If evaluation fails at nudged points, revert and hope original works\n                             solverTa = ta;\n                             solverTb = tb;\n                         }\n                    }\n\n\n                    final double root = (solverTa <= solverTb) ? solver.solve(f, solverTa, solverTb) : solver.solve(f, solverTb, solverTa);\n\n                    // Check if the root is too close to the previous event\n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing useful or found (again ?) a past event, we simply ignore it\n                        // proceed to next interval / step by updating ta, ga\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        // Found a new event\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false; // Accept the step\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true; // Reject the step, event occurs within\n                    }\n                     // If we got here, root is close to previous event but not ta -> ignore it\n                }\n\n                // No event detected in the sub-interval [ta, tb], or event was ignored\n                // Prepare for next sub-interval\n                ta = tb;\n                ga = gb;\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            // Wrap other FunctionEvaluationException (potentially from the nudge evaluation)\n            // or the original IllegalArgumentException from BrentSolver if nudge failed/was reverted\n            if (e.getCause() instanceof IllegalArgumentException) {\n                 // Provide more context if BrentSolver failed\n                 throw new ConvergenceException(\"Event detection failed: BrentSolver bracketing error after potential interval adjustment\", e);\n            }\n            throw new EventException(e);\n        } catch (IllegalArgumentException e) {\n            // Catch direct IllegalArgumentException from BrentSolver (if nudge was reverted/failed)\n            throw new ConvergenceException(\"Event detection failed: BrentSolver bracketing error\", e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}