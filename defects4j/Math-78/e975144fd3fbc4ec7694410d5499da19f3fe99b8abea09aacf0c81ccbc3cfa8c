{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        // start slightly inside the interval to avoid boundary zeros\n        final double dt = forward ? convergence : -convergence;\n        double ta = t0 + dt;\n        interpolator.setInterpolatedTime(ta);\n        double ga = handler.g(ta, interpolator.getInterpolatedState());\n\n        double tb = ta;\n        for (int i = 0; i < n; ++i) {\n\n            // end of substep, shifted by h\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // detect a sign change between ga and gb\n            if ((ga >= 0.0) ^ (gb >= 0.0)) {\n\n                // record monotonicity\n                increasing = gb >= ga;\n\n                // locate the root in [ta, tb]\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = (ta <= tb) ?\n                    solver.solve(f, ta, tb) :\n                    solver.solve(f, tb, ta);\n\n                // ignore spurious or repeated events\n                if ((Math.abs(root - ta) <= convergence) &&\n                    (Math.abs(root - previousEventTime) <= convergence)) {\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // this was the event we were already waiting for at the end\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // advance to next substep\n                ta = tb;\n                ga = gb;\n            }\n        }\n\n        // no events in this step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if (cause instanceof DerivativeException) {\n            throw (DerivativeException) cause;\n        } else if (cause instanceof EventException) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}