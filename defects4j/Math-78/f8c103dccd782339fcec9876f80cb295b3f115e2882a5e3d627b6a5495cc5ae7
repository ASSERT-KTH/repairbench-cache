{
    "generation": "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step (this implies the step should be\n     * rejected)\n     * @exception DerivativeException if the interpolator fails to\n     * compute the switching function somewhere within the step\n     * @exception EventException if the switching function\n     * cannot be evaluated\n     * @exception ConvergenceException if an event cannot be located\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // Setup search interval for the BrentSolver.\n                    // The solver requires that function values at endpoints have strictly different signs.\n                    // If 'ga' or 'gb' is exactly zero, it can cause the solver to fail.\n                    // We perturb the endpoint slightly to obtain a non-zero value and ensure a valid bracket.\n                    double tA = ta;\n                    double gA = ga;\n                    double tB = tb;\n                    double gB = gb;\n\n                    // If gA is exactly zero, shift tA slightly\n                    if (gA == 0) {\n                        tA += (forward ? 1.0 : -1.0) * convergence;\n                        // Ensure the perturbed tA does not cross tB or make the interval too small\n                        if (forward) {\n                            if (tA >= tB) { // If tA crosses or is equal to tB\n                                // Fallback to midpoint or slightly before tB to ensure a valid interval\n                                tA = (ta + tb) / 2.0;\n                                if (tA >= tB) tA = tB - 0.5 * convergence; // Ensure tA < tB\n                            }\n                        } else { // backward\n                            if (tA <= tB) { // If tA crosses or is equal to tB\n                                tA = (ta + tb) / 2.0;\n                                if (tA <= tB) tA = tB + 0.5 * convergence; // Ensure tA > tB\n                            }\n                        }\n                        interpolator.setInterpolatedTime(tA);\n                        gA = handler.g(tA, interpolator.getInterpolatedState());\n                    } \n                    // If gB is exactly zero, shift tB slightly. Else if because if both are zero, gA handles first.\n                    else if (gB == 0) {\n                        tB += (forward ? 1.0 : -1.0) * convergence;\n                        // Ensure the perturbed tB does not cross tA or make the interval too small\n                        if (forward) {\n                            if (tB <= tA) { // If tB crosses or is equal to tA\n                                tB = (ta + tb) / 2.0;\n                                if (tB <= tA) tB = tA + 0.5 * convergence; // Ensure tB > tA\n                            }\n                        } else { // backward\n                            if (tB >= tA) { // If tB crosses or is equal to tA\n                                tB = (ta + tb) / 2.0;\n                                if (tB >= tA) tB = tA - 0.5 * convergence; // Ensure tB < tA\n                            }\n                        }\n                        interpolator.setInterpolatedTime(tB);\n                        gB = handler.g(tB, interpolator.getInterpolatedState());\n                    }\n\n                    // The 'increasing' flag is used for eventOccurred callback and refers to the change from ga to gb.\n                    // It should typically reflect the function's trend across the original interval.\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    \n                    // Call the solver with the potentially adjusted interval [tA, tB]\n                    final double root = (tA <= tB) ? solver.solve(f, tA, tB) : solver.solve(f, tB, tA);\n                    \n                    if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}