{
    "generation": "    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n        try {\n\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n            final double h  = (t1 - t0) / n;\n\n            double ta = t0;\n            double ga = g0;\n            double tb = t0;\n            for (int i = 0; i < n; ++i) {\n\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check whether the sign has really changed -- handle corner cases like ga*gb >= 0 but close to zero\n                boolean signChange = false;\n                final double tolerance = 1.1 * convergence;\n                if (ga * gb < -tolerance * Math.abs(ga) || ga * gb < -tolerance * Math.abs(gb)) {\n                    signChange = true;\n                } else if (ga * gb == 0 || gb * ga == 0) {\n                    signChange = ga * gb < 0;\n                }\n\n                if (signChange) {\n\n                    increasing = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    double root;\n                    if ( (ta <= tb) && (ga * gb < 0) ) {\n                        root = solver.solve(f, ta, tb);\n                    } else if ( (ta > tb) && (ga * gb < 0) ) {\n                        root = solver.solve(f, tb, ta);\n                    } else {\n                        continue;\n                    }\n\n                    if (Double.isNaN(root)) {\n                        continue;\n                    }\n\n                    if ((Math.abs(root - ta) <= convergence) &&\n                        (Math.abs(root - tb) <= convergence)) {\n                        ta = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            return false;\n                        }\n                        pendingEvent = true;\n                        return true;\n                    }\n\n                } else {\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (FunctionEvaluationException e) {\n            final Throwable cause = e.getCause();\n            if ((cause != null) && (cause instanceof DerivativeException)) {\n                throw (DerivativeException) cause;\n            } else if ((cause != null) && (cause instanceof EventException)) {\n                throw (EventException) cause;\n            }\n            throw new EventException(e);\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}