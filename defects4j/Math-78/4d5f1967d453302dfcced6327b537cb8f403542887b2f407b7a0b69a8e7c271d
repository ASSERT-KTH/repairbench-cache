{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        // pick the start of the scan; if we are just at a previous event\n        // we shift slightly past it to recover the correct sign\n        double ta, ga;\n        if (!Double.isNaN(previousEventTime) &&\n            Math.abs(t0 - previousEventTime) <= convergence) {\n            ta = t0 + (forward ? convergence : -convergence);\n            interpolator.setInterpolatedTime(ta);\n            ga = handler.g(ta, interpolator.getInterpolatedState());\n        } else {\n            ta = t0;\n            ga = g0;\n        }\n\n        double tb = ta;\n        for (int i = 0; i < n; ++i) {\n\n            // advance to the end of the next sub-interval\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // did the function change sign on [ta, tb] ?\n            if ((ga >= 0) ^ (gb >= 0)) {\n\n                // record the direction of the change\n                increasing = (gb >= ga);\n\n                // locate the root in [ta, tb]\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = solver.solve(f, ta, tb);\n\n                // filter out spurious roots or repeats\n                if ((Math.abs(root - ta) <= convergence)\n                    && (Math.abs(root - previousEventTime) <= convergence)) {\n                    // nothing new here, continue scanning\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime)\n                           || (Math.abs(previousEventTime - root) > convergence)) {\n                    // a new event has been found\n                    pendingEventTime = root;\n                    if (pendingEvent\n                        && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // we already had this event pending at the end of the step\n                        // accept the step and do not reject\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change on this sub-interval\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event detected on the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n\n        final Throwable cause = e.getCause();\n        if (cause instanceof DerivativeException) {\n            throw (DerivativeException) cause;\n        }\n        if (cause instanceof EventException) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}