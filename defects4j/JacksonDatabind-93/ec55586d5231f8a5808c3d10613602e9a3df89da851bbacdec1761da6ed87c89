{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    // Allow JDK classes (bootstrap\u2010loaded) unless they are explicitly black\u2010listed\n    if (raw.getClassLoader() == null && !_cfgIllegalClassNames.contains(full)) {\n        return;\n    }\n\n    main_check:\n    do {\n        // 1) explicit class\u2010name blacklist\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 2) special Spring checks (only for actual classes, not interfaces)\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        // otherwise fine\n        return;\n    } while (false);\n\n    // if we get here, it was in the blacklist\n    throw JsonMappingException.from(ctxt,\n        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}