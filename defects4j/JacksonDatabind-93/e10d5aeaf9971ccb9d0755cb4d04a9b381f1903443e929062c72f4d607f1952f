{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // Defensive check: type or raw class may be null (although null type may be unlikely)\n    if (type == null) {\n        return;\n    }\n    final Class<?> raw;\n    try {\n        raw = type.getRawClass();\n    } catch (Throwable t) {\n        // Defensive: getRawClass() could throw, though unlikely; fail-safe\n        return;\n    }\n    if (raw == null) {\n        return;\n    }\n\n    String full;\n    try {\n        full = raw.getName();\n    } catch (Throwable t) {\n        // Defensive: unlikely, just in case\n        return;\n    }\n\n    main_check:\n    do {\n        // Defensive: _cfgIllegalClassNames could be null\n        if (_cfgIllegalClassNames != null && _cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name;\n                try {\n                    name = cls.getSimpleName();\n                } catch (Throwable t) {\n                    // Defensive\n                    continue;\n                }\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}