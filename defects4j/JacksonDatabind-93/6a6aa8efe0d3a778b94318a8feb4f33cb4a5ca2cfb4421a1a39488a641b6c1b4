{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        // first, explicit blacklist\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // spring\u2010special-cases only apply to concrete classes, never to interfaces\n        if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {\n            // walk up the class hierarchy, stopping at Object or null\n            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    // found one of the disallowed spring types: fall out to exception\n                    break main_check;\n                }\n            }\n        }\n        // if we get here without having broken to main_check, it's OK\n        return;\n    } while (false);\n\n    // otherwise we land here and throw\n    throw JsonMappingException.from(ctxt,\n        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}