{
    "generation": "    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n    {\n        // There are certain nasty classes that could cause problems, mostly\n        // via default typing -- catch them here.\n        final Class<?> raw = type.getRawClass();\n        // 28-Oct-2019, tatu: Let's catch this early; needed for other checks\n        //    too (like [databind#2511])\n        if (raw == null) {\n            // Or should we throw exception? Seems suboptimal, let caller handle\n            return;\n        }\n        \n        String full = raw.getName();\n\n        main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            // 18-Nov-2019, tatu: And not annotation types either\n            //    (who knows, maybe problem?)\n            if (raw.isInterface() || raw.isAnnotation()) {\n                 ; // is fine by default\n            } else if (full.startsWith(PREFIX_STRING)) {\n                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                    // 18-Nov-2019, tatu: Let's add null-check just in case; theoretically\n                    //    could only happen for interfaces, primitives, void, Annotation, BUT...\n                    if (cls == null) {\n                        break;\n                    }\n                    String name = cls.getSimpleName();\n                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                    if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name)) {\n                        break main_check;\n                    }\n                }\n            }\n            // Ok, fine so far?\n            return;\n        } while (false);\n\n        // If we get this far, type is illegal\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}