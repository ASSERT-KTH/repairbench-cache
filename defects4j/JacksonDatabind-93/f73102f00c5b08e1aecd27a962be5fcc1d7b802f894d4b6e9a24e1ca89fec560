{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // Check for illegal class names that are explicitly configured\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    if (_cfgIllegalClassNames.contains(full)) {\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: explicitly prohibited\", full));\n    }\n\n    main_check:\n    do {\n        // Additional checks for classes from specific packages\n        if (full.startsWith(PREFIX_STRING)) {\n            boolean foundAllowedSuperclass = false;\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // Check if any superclass is one of the allowed names\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    foundAllowedSuperclass = true;\n                    break;\n                }\n            }\n            if (foundAllowedSuperclass) {\n                return;\n            } else {\n                break main_check;\n            }\n        } else {\n            return;\n        }\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prohibited by security configuration\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}