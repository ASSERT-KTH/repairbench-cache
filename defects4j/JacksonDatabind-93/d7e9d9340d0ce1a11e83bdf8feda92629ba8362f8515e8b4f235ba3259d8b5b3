{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    if (type == null) {\n        return; // or potentially throw an exception indicating type is null\n    }\n    final Class<?> raw = type.getRawClass();\n    if (raw == null) {\n        return;\n    }\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames != null && _cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        if (full != null && full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}