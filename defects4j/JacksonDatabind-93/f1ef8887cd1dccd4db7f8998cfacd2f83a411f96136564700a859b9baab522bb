{
    "generation": "@Override\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    // [databind#1872] \u2013 allow any JDK\u2010provided types by default (unless explicitly banned)\n    if ((full.startsWith(\"java.\") || full.startsWith(\"javax.\"))\n            && !_cfgIllegalClassNames.contains(full)) {\n        return;\n    }\n\n    main_check:\n    do {\n        // explicit block\u2010list (exact names)\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // [databind#1855] \u2013 special handling for some Spring classes (only real classes, not interfaces)\n        if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // block the two nasties in Spring\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        // allowed\n        return;\n    } while (false);\n\n    // if we get here, the type was disallowed\n    throw JsonMappingException.from(ctxt,\n        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}