{
    "generation": "@Override\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        // first: explicit blacklist by full class name\n        if (_cfgIllegalClassNames != null && _cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // next: special\u2010case some Spring types; only applies to concrete classes\n        if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                    || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n\n        // otherwise OK\n        return;\n    } while (false);\n\n    // fell through => blocked\n    throw JsonMappingException.from(ctxt,\n        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}