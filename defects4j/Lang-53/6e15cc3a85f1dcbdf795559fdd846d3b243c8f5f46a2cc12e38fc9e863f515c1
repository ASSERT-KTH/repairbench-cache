{
    "generation": "/**\n * <p>Internal calculation method.</p>\n * \n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // If the lowest field is requested, there is nothing to do.\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // In order to avoid imprecision we manually zero out the fields lower than\n    // the field we are rounding to. In doing so we must also record whether\n    // the \u201cdiscarded\u201d part is at or above the halfway point so that appropriate\n    // rounding can take place later.\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean roundUp = false;\n\n    // Always clear milliseconds; they are the lowest order.\n    int millis = val.get(Calendar.MILLISECOND);\n    time -= millis; // truncate milliseconds\n\n    // Now decide what lower fields to clear depending on the field we are rounding.\n    if (field == Calendar.SECOND) {\n        // When rounding to seconds, the first dropped field is milliseconds.\n        if (round && millis >= 500) {\n            roundUp = true;\n        }\n        // No further fields are cleared.\n    }\n    else if (field == Calendar.MINUTE) {\n        // When rounding to minutes, clear seconds entirely.\n        int seconds = val.get(Calendar.SECOND);\n        if (round && seconds >= 30) {\n            roundUp = true;\n        }\n        time -= (seconds * 1000L);\n        // Do not clear the minute field itself.\n    }\n    else {\n        // For fields higher than MINUTE (e.g. HOUR, DATE, etc.), we clear both seconds and minutes.\n        int seconds = val.get(Calendar.SECOND);\n        // Discard seconds completely (the rounding decision for these larger fields is based on minutes)\n        time -= (seconds * 1000L);\n\n        int minutes = val.get(Calendar.MINUTE);\n        if (round && minutes >= 30) {\n            roundUp = true;\n        }\n        time -= (minutes * 60000L);\n    }\n\n    // Update the calendar time if any subtraction occurred.\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    // Now use the higher\u2013order truncations (and possible rounding) for the field.\n    // The \"fields\" array is assumed to be defined elsewhere and contains\n    // groups of Calendar fields in order of significance.\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // We've reached our target field; if rounding up, add one unit.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case for semi\u2013month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // Add one to the highest field in this group.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // For fields that require more subtle rounding adjustments\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // Special handling for semi-month.\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}