{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean roundUpFromSmallestFields = false; // Flag to carry rounding decision to main loop\n\n        // Adjust milliseconds (round up seconds or truncate millisecs)\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) { // If truncate OR round down\n            time = time - millisecs;\n        } else { // round up seconds\n            time = time + (1000L - millisecs);\n        }\n        val.setTime(new Date(time)); // Update calendar immediately to ensure subsequent val.get() calls are accurate\n\n        // If target field is SECOND, we are done here.\n        if (field == Calendar.SECOND) {\n            return;\n        }\n\n        // Adjust seconds (round up minutes or truncate seconds)\n        int seconds = val.get(Calendar.SECOND); // Read from updated val\n        if (!round || seconds < 30) { // If truncate OR round down\n            time = time - (seconds * 1000L);\n        } else { // round up minutes\n            time = time + (60000L - (seconds * 1000L));\n        }\n        val.setTime(new Date(time)); // Update calendar after seconds adjustment\n\n        // If target field is MINUTE, we are done here.\n        if (field == Calendar.MINUTE) {\n            return;\n        }\n\n        // Adjust minutes (round up hours or truncate minutes)\n        int minutes = val.get(Calendar.MINUTE); // Read from updated val\n        if (!round || minutes < 30) { // If truncate OR round down\n            time = time - (minutes * 60000L);\n        } else { // round up hours\n            time = time + (3600000L - (minutes * 60000L));\n            roundUpFromSmallestFields = true; // Propagate rounding decision for larger fields\n        }\n        val.setTime(new Date(time)); // Update calendar after minutes adjustment\n\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        // Initialize roundUp with the decision from minutes processing\n        boolean roundUp = roundUpFromSmallestFields; \n\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(fields[i][0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}