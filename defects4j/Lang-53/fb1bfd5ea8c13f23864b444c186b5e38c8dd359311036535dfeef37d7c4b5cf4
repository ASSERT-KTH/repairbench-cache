{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        if (millisecs != 0) {\n            time -= millisecs;\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n    } else {\n        time += (1000 - millisecs);\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n    }\n\n    if (!done) {\n        int seconds = val.get(Calendar.SECOND);\n        if (seconds > 0) {\n            if (!round || seconds < 30) {\n                time -= seconds * 1000L;\n                if (field == Calendar.MINUTE) {\n                    done = true;\n                }\n            } else {\n                time += (60 - seconds) * 1000L;\n                if (field == Calendar.MINUTE) {\n                    done = true;\n                }\n            }\n        }\n    }\n\n    if (!done) {\n        int minutes = val.get(Calendar.MINUTE);\n        if (minutes > 0) {\n            if (!round || minutes < 30) {\n                time -= minutes * 60000L;\n            } else {\n                time += (60 - minutes) * 60000L;\n            }\n        }\n    }\n\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n\n    if (round) {\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                    return;\n                }\n            }\n\n            int offset = 0;\n            boolean offsetSet = false;\n            int currentField = fields[i][0];\n\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                    break;\n                case Calendar.AM_PM:\n                    int hour = val.get(Calendar.HOUR_OF_DAY);\n                    offset = hour >= 12 ? hour - 12 : hour;\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                    break;\n            }\n\n            if (!offsetSet) {\n                int min = val.getActualMinimum(currentField);\n                int max = val.getActualMaximum(currentField);\n                offset = val.get(currentField) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n\n            if (offset != 0) {\n                val.set(currentField, val.get(currentField) - offset);\n            }\n\n            if (!round && !roundUp) {\n                return;\n            }\n\n            if (field == DateUtils.SEMI_MONTH) {\n                if (val.get(Calendar.DATE) == 1) {\n                    val.add(Calendar.DATE, 15);\n                } else {\n                    val.add(Calendar.DATE, -15);\n                    val.add(Calendar.MONTH, 1);\n                }\n            } else if (roundUp) {\n                val.add(currentField, 1);\n            }\n        }\n    }\n\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}