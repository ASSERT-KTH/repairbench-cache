{
    "generation": "/**\n * <p>Internal calculation method.</p>\n * \n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // We must \u201czero\u2010out\u201d all fields lower than the one being rounded.\n    // For example, when rounding to SECOND, only the milliseconds are affected;\n    // when rounding to MINUTE, we want to use the seconds (and milliseconds) to decide\n    // whether to round up or down but then leave the minutes intact.\n    //\n    // In the original code the lower \u201clevels\u201d were always processed, so for minute rounding\n    // the seconds block did not always set the done flag \u2013 causing the minutes block\n    // to run and accidentally subtract minutes.\n    \n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    \n    // Process milliseconds (always affected if field > MILLISECOND)\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        time = time - millisecs;\n    }\n    // For SECOND rounding the only lower field is milliseconds.\n    if (field == Calendar.SECOND) {\n        done = true;\n    }\n    \n    // Process seconds if the target is greater than SECOND.\n    if (!done) {\n        int seconds = val.get(Calendar.SECOND);\n        if (field == Calendar.MINUTE) {\n            // When rounding to MINUTE, use seconds for decision:\n            // subtract seconds when rounding down; if seconds >= 30 leave them intact.\n            if (!round || seconds < 30) {\n                time = time - (seconds * 1000L);\n            }\n            done = true;  // Do not process seconds again in the next block.\n        } else {\n            // For higher fields (e.g. HOUR) we always subtract seconds when they are low.\n            if (!round || seconds < 30) {\n                time = time - (seconds * 1000L);\n            }\n        }\n    }\n    \n    // Process minutes if the target is greater than MINUTE.\n    // For example, when rounding to HOUR we want to check the minutes.\n    if (!done) {\n        int minutes = val.get(Calendar.MINUTE);\n        if (!round || minutes < 30) {\n            time = time - (minutes * 60000L);\n        }\n        // For fields like HOUR (or HOUR_OF_DAY) we consider minutes the lowest level,\n        // so mark done afterwards.\n        if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {\n            done = true;\n        }\n    }\n    \n    // Update the calendar if anything changed.\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field \u2013 now round up if necessary.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case for semi-month rounding.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // For all other fields, add one to the most significant field.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        // Handle special fields that require their own rounding logic.\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}