{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    \n    // First, \u201cround/truncate\u201d the lower fields (milliseconds, seconds, minutes, hours)\n    Date date = val.getTime();\n    long time = date.getTime();\n    long newTime = time;\n    \n    // For SECOND\u2013rounding we only clear milliseconds.\n    if (field == Calendar.SECOND) {\n        int millis = val.get(Calendar.MILLISECOND);\n        long remainder = millis;\n        long unit = 1000L;\n        newTime = time - remainder;\n        if (round && remainder >= unit / 2) {\n            newTime += unit;\n        }\n    }\n    // For MINUTE\u2013rounding we clear seconds and milliseconds.\n    else if (field == Calendar.MINUTE) {\n        int seconds = val.get(Calendar.SECOND);\n        int millis = val.get(Calendar.MILLISECOND);\n        long remainder = seconds * 1000L + millis;\n        long unit = 60000L;\n        newTime = time - remainder;\n        if (round && remainder >= unit / 2) {\n            newTime += unit;\n        }\n    }\n    // For HOUR (or HOUR_OF_DAY)\u2013rounding we clear minutes, seconds and milliseconds.\n    else if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {\n        int minutes = val.get(Calendar.MINUTE);\n        int seconds = val.get(Calendar.SECOND);\n        int millis = val.get(Calendar.MILLISECOND);\n        long remainder = minutes * 60000L + seconds * 1000L + millis;\n        long unit = 3600000L;\n        newTime = time - remainder;\n        if (round && remainder >= unit / 2) {\n            newTime += unit;\n        }\n    }\n    // For fields higher than HOUR, simply clear out ms, seconds and minutes.\n    else {\n        int millis = val.get(Calendar.MILLISECOND);\n        int seconds = val.get(Calendar.SECOND);\n        int minutes = val.get(Calendar.MINUTE);\n        long remainder = minutes * 60000L + seconds * 1000L + millis;\n        newTime = time - remainder;\n    }\n    \n    if (date.getTime() != newTime) {\n        date.setTime(newTime);\n        val.setTime(date);\n    }\n    \n    // Now adjust the higher fields using the fields array.\n    // (This block \u201crounds up\u201d the target field if the cleared value was at least halfway.)\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // We've reached the target rounding field.\n                // The lower fields have already been removed and the proper adjustment applied.\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}