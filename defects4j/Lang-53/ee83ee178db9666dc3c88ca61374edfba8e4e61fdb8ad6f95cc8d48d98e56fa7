{
    "generation": "/**\n * <p>Internal calculation method.</p>\n * \n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    \n    // Convert Calendar.HOUR to Calendar.HOUR_OF_DAY so that our rounding logic finds the field \n    // in the fields array which uses HOUR_OF_DAY.\n    if (field == Calendar.HOUR) {\n        field = Calendar.HOUR_OF_DAY;\n    }\n    \n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // Instead of relying on Calendar\u2019s own truncation, we manually remove the\n    // lower fields (milliseconds, seconds and minutes) as appropriate.\n    Date date = val.getTime();\n    long time = date.getTime();\n    \n    // We only adjust fields lower than the one to be rounded.\n    // For rounding to SECOND: truncate only milliseconds.\n    // For rounding to MINUTE: truncate milliseconds and seconds.\n    // For any field larger than MINUTE (HOUR, DATE, etc.): truncate milliseconds, seconds and minutes.\n    switch (field) {\n        case Calendar.SECOND: {\n            int millis = val.get(Calendar.MILLISECOND);\n            if (!round || millis < 500) {\n                time -= millis;\n            }\n            break;\n        }\n        case Calendar.MINUTE: {\n            int millis = val.get(Calendar.MILLISECOND);\n            if (!round || millis < 500) {\n                time -= millis;\n            }\n            int seconds = val.get(Calendar.SECOND);\n            if (!round || seconds < 30) {\n                time -= seconds * 1000L;\n            }\n            break;\n        }\n        default: { // field is higher than MINUTE (e.g. HOUR_OF_DAY, DATE, etc.)\n            int millis = val.get(Calendar.MILLISECOND);\n            if (!round || millis < 500) {\n                time -= millis;\n            }\n            int seconds = val.get(Calendar.SECOND);\n            if (!round || seconds < 30) {\n                time -= seconds * 1000L;\n            }\n            int minutes = val.get(Calendar.MINUTE);\n            if (!round || minutes < 30) {\n                time -= minutes * 60000L;\n            }\n            break;\n        }\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n    \n    boolean roundUp = false;\n    // Loop over the preset field groups. These arrays are ordered from the smallest field\n    // (millisecond) upward so that we can remove (or later add) amounts from the higher order fields.\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is the target field. If the lower field(s) indicated a round-up then add one unit.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special rounding for semi-month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        // Some fields (like semi-month or AM/PM) have special rounding rules.\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}