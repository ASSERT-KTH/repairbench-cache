{
    "generation": "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        if (!round) {\n            // Truncate milliseconds\n            int millisecs = val.get(Calendar.MILLISECOND);\n            time = time - millisecs;\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n\n            // Truncate seconds\n            if (!done) {\n                int seconds = val.get(Calendar.SECOND);\n                time = time - (seconds * 1000L);\n                if (field == Calendar.MINUTE) {\n                    done = true;\n                }\n            }\n\n            // Truncate minutes\n            if (!done) {\n                int minutes = val.get(Calendar.MINUTE);\n                time = time - (minutes * 60000L);\n            }\n\n            if (date.getTime() != time) {\n                date.setTime(time);\n                val.setTime(date);\n            }\n        }\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            // Check if all fields in this group are higher than the target field\n            boolean allHigher = true;\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] >= field) {\n                    allHigher = false;\n                    break;\n                }\n            }\n            if (allHigher) {\n                continue;\n            }\n\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round) {\n                        long currentTime = val.getTimeInMillis();\n                        Calendar truncated = (Calendar) val.clone();\n                        switch (field) {\n                            case Calendar.MINUTE:\n                                truncated.set(Calendar.SECOND, 0);\n                                truncated.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.HOUR:\n                            case Calendar.HOUR_OF_DAY:\n                                truncated.set(Calendar.MINUTE, 0);\n                                truncated.set(Calendar.SECOND, 0);\n                                truncated.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.DATE:\n                            case Calendar.DAY_OF_MONTH:\n                                truncated.set(Calendar.HOUR_OF_DAY, 0);\n                                truncated.set(Calendar.MINUTE, 0);\n                                truncated.set(Calendar.SECOND, 0);\n                                truncated.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.MONTH:\n                                truncated.set(Calendar.DAY_OF_MONTH, 1);\n                                truncated.set(Calendar.HOUR_OF_DAY, 0);\n                                truncated.set(Calendar.MINUTE, 0);\n                                truncated.set(Calendar.SECOND, 0);\n                                truncated.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.YEAR:\n                                truncated.set(Calendar.MONTH, Calendar.JANUARY);\n                                truncated.set(Calendar.DAY_OF_MONTH, 1);\n                                truncated.set(Calendar.HOUR_OF_DAY, 0);\n                                truncated.set(Calendar.MINUTE, 0);\n                                truncated.set(Calendar.SECOND, 0);\n                                truncated.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.SECOND:\n                                truncated.set(Calendar.MILLISECOND, 0);\n                                break;\n                            default:\n                                break;\n                        }\n                        long truncatedTime = truncated.getTimeInMillis();\n                        long lowerSum = currentTime - truncatedTime;\n                        long halfDuration = 0;\n                        switch (field) {\n                            case Calendar.MILLISECOND:\n                                halfDuration = 0;\n                                break;\n                            case Calendar.SECOND:\n                                halfDuration = 500;\n                                break;\n                            case Calendar.MINUTE:\n                                halfDuration = 30 * 1000L;\n                                break;\n                            case Calendar.HOUR:\n                            case Calendar.HOUR_OF_DAY:\n                                halfDuration = 30 * 60 * 1000L;\n                                break;\n                            case Calendar.DATE:\n                            case Calendar.DAY_OF_MONTH:\n                                halfDuration = 12 * 60 * 60 * 1000L;\n                                break;\n                            case Calendar.MONTH:\n                                halfDuration = 15 * 24 * 60 * 60 * 1000L;\n                                break;\n                            case Calendar.YEAR:\n                                halfDuration = 6 * 30 * 24 * 60 * 60 * 1000L;\n                                break;\n                            default:\n                                halfDuration = 0;\n                                break;\n                        }\n                        roundUp = lowerSum >= halfDuration;\n                    }\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                        switch (field) {\n                            case Calendar.MINUTE:\n                                val.set(Calendar.SECOND, 0);\n                                val.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.HOUR:\n                            case Calendar.HOUR_OF_DAY:\n                                val.set(Calendar.MINUTE, 0);\n                                val.set(Calendar.SECOND, 0);\n                                val.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.DATE:\n                            case Calendar.DAY_OF_MONTH:\n                                val.set(Calendar.HOUR_OF_DAY, 0);\n                                val.set(Calendar.MINUTE, 0);\n                                val.set(Calendar.SECOND, 0);\n                                val.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.MONTH:\n                                val.set(Calendar.DAY_OF_MONTH, 1);\n                                val.set(Calendar.HOUR_OF_DAY, 0);\n                                val.set(Calendar.MINUTE, 0);\n                                val.set(Calendar.SECOND, 0);\n                                val.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.YEAR:\n                                val.set(Calendar.MONTH, Calendar.JANUARY);\n                                val.set(Calendar.DAY_OF_MONTH, 1);\n                                val.set(Calendar.HOUR_OF_DAY, 0);\n                                val.set(Calendar.MINUTE, 0);\n                                val.set(Calendar.SECOND, 0);\n                                val.set(Calendar.MILLISECOND, 0);\n                                break;\n                            case Calendar.SECOND:\n                                val.set(Calendar.MILLISECOND, 0);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    return;\n                }\n            }\n\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}