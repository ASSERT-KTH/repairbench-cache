{
    "generation": "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && field > Calendar.MINUTE && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round) {\n                        switch (field) {\n                            case Calendar.MINUTE:\n                                int sec = val.get(Calendar.SECOND);\n                                int ms = val.get(Calendar.MILLISECOND);\n                                roundUp = (sec * 1000 + ms) >= 30000;\n                                break;\n                            case Calendar.SECOND:\n                                int millis = val.get(Calendar.MILLISECOND);\n                                roundUp = millis >= 500;\n                                break;\n                            case Calendar.HOUR:\n                                int min = val.get(Calendar.MINUTE);\n                                int s = val.get(Calendar.SECOND);\n                                int mls = val.get(Calendar.MILLISECOND);\n                                roundUp = (min * 60000 + s * 1000 + mls) >= 1800000;\n                                break;\n                            default:\n                                int minVal = val.getActualMinimum(field);\n                                int maxVal = val.getActualMaximum(field);\n                                int offset = val.get(field) - minVal;\n                                roundUp = offset > ((maxVal - minVal) / 2);\n                        }\n                    }\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                            switch (field) {\n                                case Calendar.MINUTE:\n                                    val.set(Calendar.SECOND, 0);\n                                    val.set(Calendar.MILLISECOND, 0);\n                                    break;\n                                case Calendar.SECOND:\n                                    val.set(Calendar.MILLISECOND, 0);\n                                    break;\n                                case Calendar.HOUR:\n                                    val.set(Calendar.MINUTE, 0);\n                                    val.set(Calendar.SECOND, 0);\n                                    val.set(Calendar.MILLISECOND, 0);\n                                    break;\n                            }\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}