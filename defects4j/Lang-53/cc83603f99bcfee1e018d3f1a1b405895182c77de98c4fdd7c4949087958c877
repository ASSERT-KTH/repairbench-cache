{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean roundUp = false;\n\n    // For the lower fields we adjust only those below the field we are rounding.\n    if (field == Calendar.SECOND) {\n        // When rounding seconds, only milliseconds are truncated.\n        int millis = val.get(Calendar.MILLISECOND);\n        if (round && millis >= 500) {\n            roundUp = true;\n        }\n        time -= millis;\n    } else if (field == Calendar.MINUTE) {\n        // When rounding minutes, truncate seconds and milliseconds.\n        int sec = val.get(Calendar.SECOND);\n        int millis = val.get(Calendar.MILLISECOND);\n        long lower = sec * 1000L + millis;\n        if (round && lower >= 30000) {\n            roundUp = true;\n        }\n        time -= lower;\n    } else if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY || field == Calendar.AM_PM) {\n        // When rounding hours, truncate minutes, seconds and milliseconds.\n        int min = val.get(Calendar.MINUTE);\n        int sec = val.get(Calendar.SECOND);\n        int millis = val.get(Calendar.MILLISECOND);\n        long lower = min * 60000L + sec * 1000L + millis;\n        if (round && lower >= 30 * 60000L) {\n            roundUp = true;\n        }\n        time -= lower;\n    } else {\n        // For fields larger than hour (e.g. DATE, MONTH, etc.), use the original cascading truncation.\n        int millis = val.get(Calendar.MILLISECOND);\n        if (!round || millis < 500) {\n            time -= millis;\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!round || seconds < 30) {\n            time -= seconds * 1000L;\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!round || minutes < 30) {\n            time -= minutes * 60000L;\n        }\n    }\n\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n\n    // Now use the fields array to work upward. The computed roundUp flag will cause an increment\n    // of the target field if needed.\n    boolean roundUpLocal = roundUp;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // We have reached the field to be rounded.\n                if (round && roundUpLocal) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case: round semi-month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // Increment the highest field in this group.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        // These special cases have their own rounding rules.\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUpLocal = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUpLocal = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int minVal = val.getActualMinimum(fields[i][0]);\n            int maxVal = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - minVal;\n            roundUpLocal = offset > ((maxVal - minVal) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}