{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n        }\n        // 'if (field == Calendar.MILLISECOND)' is Mulligan as this is handled by early return.\n\n        // Check if we're done based on the target field\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n\n        // truncate seconds\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n\n        // Check if we're done based on the target field\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n\n        // truncate minutes\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n\n        // reset time\n        // NOTE: Tests show that calling val.setTime(date) is necessary even if\n        // time == date.getTime(). This is because the Calendar object's internal\n        // state can be invalid after using Calendar#add. (LANG-204)\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        // This is the main loop over the array of date fields {field value, ceiling value}.\n        // We iterate through the fields setting the smaller fields to their minimum value\n        // and determining if the field we are currently iterating over needs to be rounded up.\n        // For example, when rounding to the nearest minute, we iterate through\n        // milliseconds and seconds, setting them to zero and checking if seconds were >= 30\n        // to determine if minutes should be rounded up.\n        for (int i = 0; i < fields.length; i++) {\n            // Truncate fields below the specified field\n            for (int j = 0; j < fields[i].length; j++) {\n                // If we've found the field we're looking for, stop looping\n                // (and handle rounding if `round` is true).\n                if (fields[i][j] == field) {\n                    // If rounding is enabled and the lower field triggered a round-up,\n                    // then increment this field.\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            // This is a special case that's hard to generalize\n                            // If the date is 1, we round up to 16, otherwise\n                            // we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            // We need to add one to this field since the\n                            // last number causes us to round up.\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return; // We're done modifying the calendar\n                }\n            }\n            // We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            // These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    // We're looking to round/truncate the day of the month to the 1st or 16th.\n                    if (fields[i][0] == Calendar.DATE) {\n                        // If we're going to drop the DATE field's value,\n                        // we want to do this our own way.\n                        // We need to subtract 1 since the date has a minimum of 1.\n                        offset = val.get(Calendar.DATE) - 1;\n                        // If we're above 15 days adjustment, that means we're in the\n                        // bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        // Record whether we're in the top or bottom half of that range.\n                        // roundUp = true if day is > 15+7 = 22 or > 1+7 = 8.\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    // We're looking to round/truncate the hour of the day to AM or PM (0 or 12).\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        // If we're going to drop the HOUR field's value,\n                        // we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        // Determine if we should round up to the next AM/PM boundary (hour 12 or 0).\n                        // roundUp = true if hour is > 12+6 = 18 or > 0+6 = 6.\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            // If a special field rule wasn't applied, handle the general case.\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                // Calculate the offset from the minimum allowed value.\n                offset = val.get(fields[i][0]) - min;\n                // Set roundUp if this is more than halfway between the minimum and maximum.\n                roundUp = offset > ((max - min) / 2);\n            }\n            // We need to remove this field's value (set it to the minimum).\n            // If offset is 0, the field is already at its minimum value.\n            if (offset != 0) {\n                // Set the field to its minimum value by subtracting the offset.\n                // (For example, setting seconds to 0).\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        // This exception should not happen normally, as fields should contain all valid Calendar fields.\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}