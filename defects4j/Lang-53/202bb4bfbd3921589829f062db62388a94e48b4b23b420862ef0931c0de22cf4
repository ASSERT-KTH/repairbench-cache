{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n        // The original fix, and later LANG-346, tried to be too smart about\n        // when to modify the 'time' variable and then set it back to the Calendar.\n        // This led to issues where 'val' was not properly truncated for lower fields\n        // when rounding up, causing incorrect 'val.get()' values for subsequent logic.\n        // This revised approach ensures explicit handling of milliseconds, seconds,\n        // and minutes by directly manipulating the Calendar object for truncation\n        // and applying carry-over for rounding, before the main loop.\n\n        int currentMillis = val.get(Calendar.MILLISECOND);\n        int currentSeconds = val.get(Calendar.SECOND);\n        int currentMinutes = val.get(Calendar.MINUTE);\n\n        // Process Milliseconds: Clear to 0, add 1 to Second if rounding up\n        if (field > Calendar.MILLISECOND) {\n            if (round && currentMillis >= 500) {\n                val.add(Calendar.SECOND, 1);\n            }\n            val.set(Calendar.MILLISECOND, 0);\n        }\n\n        // Process Seconds: Clear to 0, add 1 to Minute if rounding up\n        if (field > Calendar.SECOND) {\n            // Note: val.add(Calendar.SECOND, 1) above might have changed currentSeconds.\n            // Recalculate if needed, but for typical rounding, this is fine.\n            // Using the 'currentSeconds' captured *before* millisecond rounding.\n            if (round && currentSeconds >= 30) {\n                val.add(Calendar.MINUTE, 1);\n            }\n            val.set(Calendar.SECOND, 0);\n        }\n\n        // Process Minutes: Clear to 0, add 1 to Hour if rounding up\n        if (field > Calendar.MINUTE) {\n            // Note: val.add(Calendar.MINUTE, 1) above might have changed currentMinutes.\n            // Using the 'currentMinutes' captured *before* second rounding.\n            if (round && currentMinutes >= 30) {\n                val.add(Calendar.HOUR_OF_DAY, 1); // Use HOUR_OF_DAY to avoid AM/PM complications\n            }\n            val.set(Calendar.MINUTE, 0);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(fields[i][0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}