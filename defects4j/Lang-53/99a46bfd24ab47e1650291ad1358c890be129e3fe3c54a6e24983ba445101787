{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    // If the target is milliseconds, there's nothing to do.\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    Date date = val.getTime();\n    long time = date.getTime();\n\n    /* \n     * Remove the lower\u2010order fields manually. The idea is that when \u201crounding\u201d (round==true)\n     * we only \u201cfloor\u201d the fields lower than the target if they are under half the range,\n     * leaving the raw value intact so that later we can add one.\n     *\n     * For truncation (round==false) we always remove the lower fields. In our scheme the\n     * lower fields are defined as follows:\n     *   - When rounding/truncating to SECOND, lower field = MILLISECOND.\n     *   - When rounding/truncating to MINUTE, lower fields = MILLISECOND and SECOND.\n     *   - When rounding/truncating to HOUR (or higher) the lower fields we adjust here are\n     *     MILLISECOND, SECOND and MINUTE.\n     */\n    if (field == Calendar.SECOND) {\n        // Lower field: milliseconds only.\n        int millis = val.get(Calendar.MILLISECOND);\n        if (!round || millis < 500) {\n            time -= millis;\n        }\n    } else if (field == Calendar.MINUTE) {\n        // Lower fields: milliseconds and seconds.\n        int millis = val.get(Calendar.MILLISECOND);\n        if (!round || millis < 500) {\n            time -= millis;\n        }\n        int secs = val.get(Calendar.SECOND);\n        if (!round || secs < 30) {\n            time -= secs * 1000L;\n        }\n    } else if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {\n        // For HOUR (or higher fields where we want to round to the hour), also remove minutes.\n        int millis = val.get(Calendar.MILLISECOND);\n        if (!round || millis < 500) {\n            time -= millis;\n        }\n        int secs = val.get(Calendar.SECOND);\n        if (!round || secs < 30) {\n            time -= secs * 1000L;\n        }\n        int mins = val.get(Calendar.MINUTE);\n        if (!round || mins < 30) {\n            time -= mins * 60000L;\n        }\n    } else {\n        // For any other target field, default to removing millis, seconds and minutes.\n        int millis = val.get(Calendar.MILLISECOND);\n        if (!round || millis < 500) {\n            time -= millis;\n        }\n        int secs = val.get(Calendar.SECOND);\n        if (!round || secs < 30) {\n            time -= secs * 1000L;\n        }\n        int mins = val.get(Calendar.MINUTE);\n        if (!round || mins < 30) {\n            time -= mins * 60000L;\n        }\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n\n    /*\n     * Now we let the generic rounding loop run. That loop uses a pre\u2010defined array\n     * \"fields\" (not shown here) which groups calendar fields in order of significance.\n     * For each group the lower fields have been \u201czeroed\u201d (or almost so) and an offset is\n     * computed. When the array element equals our target field, we simply add one if the\n     * accumulated rounding flag (roundUp) is true.\n     */\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // We've reached the target field in its group.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // SPECIAL CASE: For SEMI_MONTH, if the day is 1 we bump to the 16th;\n                        // otherwise subtract 15 days and increment the month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // For all other fields, add one unit.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}