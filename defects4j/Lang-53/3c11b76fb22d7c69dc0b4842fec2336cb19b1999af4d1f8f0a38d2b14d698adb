{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // see http://issues.apache.org/jira/browse/LANG-59\n    // Manually truncate milliseconds, seconds and minutes instead of using\n    // Calendar methods. Depending on what field is being rounded, only the\n    // immediate lower field is used to decide whether to round up.\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean roundUp = false;\n\n    switch (field) {\n        case Calendar.SECOND: {\n            // When rounding to SECOND, only examine milliseconds.\n            int millis = val.get(Calendar.MILLISECOND);\n            if (round && millis >= 500) {\n                roundUp = true;\n            }\n            time -= millis;\n            break;\n        }\n        case Calendar.MINUTE: {\n            // When rounding to MINUTE, use the seconds field.\n            int millis = val.get(Calendar.MILLISECOND);\n            time -= millis;\n            int secs = val.get(Calendar.SECOND);\n            if (round && secs >= 30) {\n                roundUp = true;\n            }\n            time -= (secs * 1000L);\n            break;\n        }\n        default: {\n            // For fields larger than MINUTE (e.g. HOUR, DATE, etc.),\n            // remove the complete millisecond, second and minute parts.\n            int millis = val.get(Calendar.MILLISECOND);\n            time -= millis;\n            int secs = val.get(Calendar.SECOND);\n            time -= (secs * 1000L);\n            int mins = val.get(Calendar.MINUTE);\n            time -= (mins * 60000L);\n            break;\n        }\n    }\n\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    // Proceed with the normal rounding procedure.\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // When we hit our target field, round up if needed.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case for SEMI_MONTH rounding.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // Add one unit of the current (topmost) field of this group.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // For fields that do not round in a trivial way, adjust the value.\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}