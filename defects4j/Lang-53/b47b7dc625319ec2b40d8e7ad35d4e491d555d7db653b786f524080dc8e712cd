{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    // Fix for LANG-59 and LANG-346\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n\n    // Handle milliseconds\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!done) {\n        if (!round || millisecs < 500) {\n            time -= millisecs;\n        } else {\n            // Round up by adding 1 second if milliseconds are >= 500\n            time += (1000 - millisecs);\n            if (field == Calendar.SECOND) {\n                done = true; // Rounds at the second level; no further action needed here\n            }\n        }\n    }\n\n    // Handle seconds\n    if (!done) {\n        int seconds = val.get(Calendar.SECOND);\n        if (!round || seconds < 30) {\n            time -= seconds * 1000L;\n        } else {\n            // Round up by adding 1 minute\n            time += ((60 - seconds) * 1000L);\n            if (field == Calendar.MINUTE) {\n                done = true;\n            }\n        }\n    }\n\n    // Reset time if changed\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n\n    // Rest of the method remains unchanged\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n\n        boolean offsetSet = false;\n        int offset = 0;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}