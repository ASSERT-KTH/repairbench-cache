{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        Date date = val.getTime();\n        long time = date.getTime();\n\n        boolean done = false;\n\n        // Correctly handle milliseconds truncation or rounding\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (millisecs > 0) {\n            if (round) {\n                if (millisecs >= 500) {\n                    val.add(Calendar.SECOND, 1);\n                }\n            } else {\n                val.set(Calendar.MILLISECOND, 0);\n            }\n            done = (field == Calendar.SECOND);\n        }\n\n        if (done) {\n            if (date.getTime() != val.getTime().getTime()) {\n                date = val.getTime();\n                val.setTime(date);\n            }\n            return;\n        }\n\n        // Truncate seconds if necessary\n        if (!done) {\n            int seconds = val.get(Calendar.SECOND);\n            if (seconds > 0) {\n                if (round) {\n                    if (seconds >= 30) {\n                        val.add(Calendar.MINUTE, 1);\n                    }\n                } else {\n                    val.set(Calendar.SECOND, 0);\n                    val.set(Calendar.MILLISECOND, 0);\n                }\n                done = (field == Calendar.MINUTE);\n            }\n        }\n\n        if (done) {\n            if (date.getTime() != val.getTime().getTime()) {\n                date = val.getTime();\n                val.setTime(date);\n            }\n            return;\n        }\n\n        // Truncate minutes if necessary\n        if (!done) {\n            int minutes = val.get(Calendar.MINUTE);\n            if (minutes > 0) {\n                if (round) {\n                    if (minutes >= 30) {\n                        val.add(Calendar.HOUR, 1);\n                    }\n                } else {\n                    val.set(Calendar.MINUTE, 0);\n                    val.set(Calendar.SECOND, 0);\n                    val.set(Calendar.MILLISECOND, 0);\n                }\n                done = (field == Calendar.HOUR);\n            }\n        }\n\n        if (done) {\n            if (date.getTime() != val.getTime().getTime()) {\n                date = val.getTime();\n                val.setTime(date);\n            }\n            return;\n        }\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            // Special handling\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        int offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        int hour = val.get(Calendar.HOUR_OF_DAY);\n                        hour %= 12;\n                        roundUp = hour > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                int offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (roundUp && round) {\n                val.add(fields[i][0], 1);\n            } else if (!round) {\n                int newValue = val.get(fields[i][0]) - (roundUp ? 1 : 0);\n                if (newValue < val.getActualMinimum(fields[i][0])) {\n                    val.add(fields[i][0], -1);\n                    newValue = val.getActualMaximum(fields[i][0]);\n                }\n                val.set(fields[i][0], newValue);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}