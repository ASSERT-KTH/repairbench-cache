{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          // 1. Process the RHS (the iterable expression) for reads.\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // 2. Process the LHS (the variable or expression being assigned to).\n          // This is an implicit assignment in each iteration.\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            // 'x' is the name being declared and assigned.\n            Node nameNode = lhs.getFirstChild();\n            // If the var has an initializer (e.g., 'var x = y'), process it.\n            // For-in var declarations typically don't have initializers,\n            // but the general `VAR` handling calls `computeGenKill` for initializers.\n            if (nameNode.hasChildren()) {\n              computeGenKill(nameNode.getFirstChild(), gen, kill, conditional);\n            }\n            // The variable 'x' is killed by the assignment in each iteration.\n            if (!conditional) {\n              addToSetIfLocal(nameNode, kill);\n            }\n            // 'x' is also \"generated\" because it becomes usable within the loop body.\n            // This matches the behavior of the original code for `var x`.\n            addToSetIfLocal(nameNode, gen);\n          } else if (NodeUtil.isName(lhs)) {\n            // for(x in y) {...} where 'x' is a simple name.\n            // 'x' is assigned to, so it is killed.\n            if (!conditional) {\n              addToSetIfLocal(lhs, kill);\n            }\n            // No explicit gen for 'x' itself, as it's a simple assignment (x = value),\n            // not a read-modify-write (x += value).\n          } else {\n            // for(a[1] in y) {...} or for(obj.prop in y) {...}\n            // The LHS is an expression (e.g., GETELEM, GETPROP).\n            // Evaluating this expression reads variables within it (e.g., 'a' in 'a[1]').\n            // Recursively compute gen/kill for the LHS expression.\n            computeGenKill(lhs, gen, kill, conditional);\n            // The assignment to 'a[1]' or 'obj.prop' does not kill the local variable 'a' or 'obj'.\n            // Therefore, no direct addToSetIfLocal(lhs, kill) for these cases.\n          }\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}