{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        // Scope boundaries, not actual instructions generating/killing locals here.\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Only the condition expression affects gen/kill for the control structure node itself.\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          // Regular FOR loop: for(init; cond; incr)\n          // Note: Original code only handled condition. This might be incomplete\n          // but we focus on the reported bug in for-in.\n           Node condition = NodeUtil.getConditionExpression(n);\n           if (condition != null) {\n               computeGenKill(condition, gen, kill, conditional);\n           }\n          // A more complete implementation would handle init and incr as well.\n          // e.g., computeGenKill(n.getFirstChild(), gen, kill, conditional); // Init\n          // e.g., computeGenKill(condition.getNext(), gen, kill, true); // Incr\n        } else {\n          // FOR-IN loop: for(lhs in rhs)\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext(); // The object being iterated over\n\n          // Process the RHS expression first (evaluated before loop).\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // Process the LHS expression to find reads within it.\n          // Handles cases like: for (a[i] in ...) reads 'a' and 'i'.\n          // This call is crucial for the test case: for(a[1] in ...) needs to gen 'a'.\n          computeGenKill(lhs, gen, kill, conditional);\n\n          // If the direct target of the assignment is a local variable name,\n          // it is killed (conditionally, as loop may not execute or rhs may be empty).\n          Node nameNode = null;\n          if (NodeUtil.isName(lhs)) {\n            // Case: for(x in ...)\n            nameNode = lhs;\n          } else if (NodeUtil.isVar(lhs) && lhs.hasOneChild() && NodeUtil.isName(lhs.getFirstChild())) {\n            // Case: for(var x in ...)\n            nameNode = lhs.getFirstChild();\n            // Note: computeGenKill(lhs...) above was called on VAR and returned immediately,\n            // so we must handle the kill explicitly here.\n          }\n          // Else: LHS is complex (e.g., a[1]), computeGenKill(lhs...) handled reads. No kill needed.\n\n          if (nameNode != null) {\n            // Assignment in loop is conditional on loop execution.\n            // Mark the variable as killed by this instruction.\n            // The 'conditional' argument to addToSetIfLocal isn't directly used here,\n            // but the assignment itself is inherently conditional within the loop flow.\n            addToSetIfLocal(nameNode, kill);\n            // No gen for nameNode itself - the for-in assigns, it doesn't read the target name.\n          }\n          // Removed original problematic lines that caused IllegalStateException for non-NAME lhs:\n          // addToSetIfLocal(lhs, kill);\n          // addToSetIfLocal(lhs, gen);\n        }\n        return;\n\n      case Token.VAR:\n        // VAR node represents declaration list: var x, y=1, z;\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { // c is the NAME node\n          if (c.hasChildren()) { // NAME node has an initializer (e.g., y=1)\n            // Process the initializer expression\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            // The assignment to the var happens here. Kill if var statement is unconditional.\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n          // No gen/kill for declaration without initializer (var x;) at this point.\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // The second operand is conditionally executed.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK: // Ternary operator: condition ? trueExpr : falseExpr\n        computeGenKill(n.getFirstChild(), gen, kill, conditional); // Process condition\n        // Both result branches are conditionally executed.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true); // True branch\n        computeGenKill(n.getLastChild(), gen, kill, true); // False branch\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          // Accessing 'arguments' makes all parameters potentially escaped.\n          markAllParametersEscaped();\n        } else {\n          // Reading a variable name adds it to the gen set.\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Handle assignments and other expressions.\n        if (NodeUtil.isAssignmentOp(n)) {\n           Node assignTarget = n.getFirstChild();\n           Node assignedValue = n.getLastChild(); // Use getLastChild for robustness\n\n           if (NodeUtil.isName(assignTarget)) {\n             // Simple assignment: x = ... or x += ...\n             Node lhsName = assignTarget;\n\n             // Process RHS first (its value is computed before assignment)\n             computeGenKill(assignedValue, gen, kill, conditional);\n\n             // Handle kill: Assignment kills the LHS variable if unconditional\n             if (!conditional) {\n               addToSetIfLocal(lhsName, kill);\n             }\n\n             // Handle gen: Compound assignments (e.g., +=) read the LHS variable\n             if (!NodeUtil.isAssign(n)) {\n               addToSetIfLocal(lhsName, gen);\n             }\n           } else {\n             // Complex assignment: a[i] = ..., obj.prop = ...\n             // Process LHS (for reads, e.g., 'a' and 'i' in a[i]=...)\n             computeGenKill(assignTarget, gen, kill, conditional);\n             // Process RHS\n             computeGenKill(assignedValue, gen, kill, conditional);\n             // No variable *kill* for complex assignments like a[i]=...\n             // (It modifies state but doesn't kill the local variable 'a' itself)\n           }\n        } else {\n          // Not an assignment, process all children recursively.\n          // E.g., function calls, arithmetic ops, comparison ops etc.\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}