{
    "generation": "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n    boolean conditional) {\n\n  switch (n.getType()) {\n    case Token.SCRIPT:\n    case Token.BLOCK:\n    case Token.FUNCTION:\n      return;\n\n    case Token.WHILE:\n    case Token.DO:\n    case Token.IF:\n      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n          conditional);\n      return;\n\n    case Token.FOR:\n      if (!NodeUtil.isForIn(n)) {\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n      } else {\n        // for (lhs in rhs) { ... }\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isVar(lhs)) {\n          // for (var x in y)\n          Node name = lhs.getLastChild();\n          if (!conditional) {\n            addToSetIfLocal(name, kill);\n          }\n        } else if (NodeUtil.isName(lhs)) {\n          // for (x in y)\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n        } else {\n          // for (obj.prop in y) or for (arr[idx] in y)\n          computeGenKill(lhs, gen, kill, conditional);\n        }\n        // always process the \"in\" expression\n        computeGenKill(rhs, gen, kill, conditional);\n      }\n      return;\n\n    case Token.VAR:\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (c.hasChildren()) {\n          computeGenKill(c.getFirstChild(), gen, kill, conditional);\n          if (!conditional) {\n            addToSetIfLocal(c, kill);\n          }\n        }\n      }\n      return;\n\n    case Token.AND:\n    case Token.OR:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      // May short\u2010circuit.\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n\n    case Token.HOOK:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      // Both arms are conditional.\n      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n\n    case Token.NAME:\n      if (isArgumentsName(n)) {\n        markAllParametersEscaped();\n      } else {\n        addToSetIfLocal(n, gen);\n      }\n      return;\n\n    default:\n      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n        // Simple or compound assignment to a local name.\n        Node aLhs = n.getFirstChild();\n        if (!conditional) {\n          addToSetIfLocal(aLhs, kill);\n        }\n        if (!NodeUtil.isAssign(n)) {\n          // e.g. a += 1 reads a.\n          addToSetIfLocal(aLhs, gen);\n        }\n        computeGenKill(aLhs.getNext(), gen, kill, conditional);\n      } else {\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeGenKill(c, gen, kill, conditional);\n        }\n      }\n      return;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}