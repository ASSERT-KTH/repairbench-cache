{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        // These nodes defines scopes, they don't generate or kill variables\n        // themselves. Instead, we need to traverse into them. But the caller\n        // (computeFollowNode) handles traversing into block-like structures\n        // appropriately. So, we should just return here.\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Only inspect the condition expression. The body/sub-blocks are handled\n        // by the dataflow framework automatically.\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          // Standard FOR loop: for(init; condition; increment) { body }\n          // Only inspect init, condition, and increment expressions. The body\n          // is handled by the dataflow framework.\n          Node init = n.getFirstChild();\n          Node condition = init.getNext();\n          Node increment = condition.getNext();\n          computeGenKill(init, gen, kill, conditional);\n          computeGenKill(condition, gen, kill, conditional);\n          computeGenKill(increment, gen, kill, conditional);\n        } else {\n          // FOR-IN loop: for(lhs in rhs) { body }\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          // Process the right-hand side (the object being iterated over) first.\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // Process the left-hand side (the iteration variable/expression).\n          if (NodeUtil.isVar(lhs)) {\n            // Case: for(var x in y)\n            // The VAR node itself doesn't generate/kill, but the declared variable\n            // is assigned to in the loop.\n            Node varName = lhs.getFirstChild();\n            if (varName != null && varName.isName()) {\n              // Kill the variable being declared and assigned.\n              // The assignment by the loop mechanism is definite if the loop runs.\n              // We follow the convention of other assignments: kill if the context\n              // is not conditional.\n              if (!conditional) {\n                   addToSetIfLocal(varName, kill);\n              }\n              // The assignment doesn't read the old value of varName, so no GEN.\n            } else {\n              // Unexpected VAR structure, traverse defensively.\n              computeGenKill(lhs, gen, kill, conditional);\n            }\n          } else if (NodeUtil.isName(lhs)) {\n            // Case: for(x in y)\n            // Kill the variable being assigned.\n            if (!conditional) {\n                addToSetIfLocal(lhs, kill);\n            }\n            // The assignment doesn't read the old value of lhs, so no GEN.\n          } else {\n            // Case: for(a[0] in y), for(obj.prop in y), etc.\n            // The LHS is an expression. Compute GEN/KILL for its sub-expressions.\n            // For example, in a[0], 'a' is read (GEN).\n            // The assignment modifies the property/element but doesn't kill the\n            // base variable ('a' or 'obj') in the sense of this analysis.\n            computeGenKill(lhs, gen, kill, conditional);\n          }\n        }\n        return;\n\n      case Token.VAR:\n        // Variable declarations: var name1 = init1, name2 = init2;\n        for (Node nameNode = n.getFirstChild(); nameNode != null; nameNode = nameNode.getNext()) {\n          // nameNode is the NAME node for the variable.\n          if (nameNode.hasChildren()) {\n            // Has initializer: var name = initializer;\n            Node initializer = nameNode.getFirstChild();\n            computeGenKill(initializer, gen, kill, conditional);\n            // The variable is killed by the assignment.\n            if (!conditional) {\n              addToSetIfLocal(nameNode, kill);\n            }\n            // The declaration+assignment does not read the variable being declared.\n          }\n          // If no initializer (var name;), it neither generates nor kills the variable\n          // at this point (it just declares it).\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        // Left operand is always executed.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Right operand is conditionally executed.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        // Condition is always executed.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Both branches are conditionally executed.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          // Accessing 'arguments' potentially reads all parameters.\n          markAllParametersEscaped();\n        } else {\n          // Reading a variable adds it to the GEN set.\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Handle assignments, increments, decrements, and other expressions.\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          // Assignment to a simple variable: NAME = rhs, NAME += rhs, etc.\n          Node lhs = n.getFirstChild();\n\n          // Process the right-hand side first.\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n\n          // Assignment kills the LHS variable if unconditional.\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n\n          // Compound assignments (+=, *=, etc.) also read the LHS variable.\n          // Simple assignment (=) does not.\n          if (!NodeUtil.isAssign(n)) {\n            addToSetIfLocal(lhs, gen);\n          }\n        } else {\n          // For other node types (like GETPROP, GETELEM, CALL, operators),\n          // simply traverse the children to find reads/writes within them.\n          // Assignment to properties (a.b = c, a[0] = c) falls into this case.\n          // The recursive calls will handle GEN sets correctly (e.g., reading 'a').\n          // This analysis doesn't track kills for properties, only local variables.\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}