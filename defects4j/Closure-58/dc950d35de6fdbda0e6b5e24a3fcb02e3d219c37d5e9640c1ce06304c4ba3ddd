{
    "generation": "  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        // Control flow structures - handled by the analysis framework's traversal.\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Process the condition expression.\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          // Regular FOR loop: for(init; condition; increment)\n          // Process the condition part for the node's gen/kill.\n          // Init and increment are handled separately by the framework's traversal.\n           Node condition = NodeUtil.getConditionExpression(n);\n           if (condition != null) {\n              computeGenKill(condition, gen, kill, conditional);\n           }\n        } else {\n          // FOR-IN loop: for(lhs in rhs)\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          // Process the right-hand-side expression first.\n          computeGenKill(rhs, gen, kill, conditional);\n\n          // Process the left-hand-side.\n          if (NodeUtil.isVar(lhs)) {\n            // Case: for(var x in rhs)\n            Node varNameNode = lhs.getFirstChild(); // Get the NAME node 'x'.\n            // VAR node should have a NAME child for for-in\n            if (varNameNode != null && varNameNode.isName()) {\n               // Assignment in loop header kills the declared variable.\n               if (!conditional) {\n                  addToSetIfLocal(varNameNode, kill);\n               }\n              // Declaration/assignment does not read 'x'.\n            }\n          } else if (NodeUtil.isName(lhs)) {\n            // Case: for(x in rhs) where 'x' is pre-declared.\n            // Assignment kills the variable 'x'.\n            if (!conditional) {\n              addToSetIfLocal(lhs, kill);\n            }\n            // Assignment does not read 'x'.\n          } else {\n            // Case: for(a[i] in rhs), for(obj.prop in rhs), etc.\n            // Evaluate the LHS expression involves reading variables (e.g., 'a' and 'i').\n            // This is handled by recursively calling computeGenKill on the LHS node.\n            computeGenKill(lhs, gen, kill, conditional);\n            // Assignment to property/element does not kill the base variable ('a').\n          }\n        }\n        return;\n\n      case Token.VAR:\n        // Variable declarations: var x = initializer, y;\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // 'c' is the NAME node (e.g., x)\n          if (c.hasChildren()) { // If there's an initializer\n            // Process the initializer expression first.\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            // Assignment kills the variable 'c'.\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        // Logical AND/OR: lhs && rhs, lhs || rhs\n        // Process LHS.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Process RHS, which is conditional due to short-circuiting.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        // Conditional operator: condition ? trueExpr : falseExpr\n        // Process condition.\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Process conditional branches.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          // Accessing 'arguments' escapes parameters.\n          markAllParametersEscaped();\n        } else {\n          // Reading a variable generates it.\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        // Handle assignments and other expressions.\n        if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {\n          // Simple assignment: x = rhs, x += rhs, ... (LHS is NAME)\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          // Process RHS first.\n          if (rhs != null) {\n            computeGenKill(rhs, gen, kill, conditional);\n          }\n\n          // Compound assignments (+=, *=, etc.) read the LHS.\n          if (!NodeUtil.isAssign(n)) {\n            addToSetIfLocal(lhs, gen);\n          }\n\n          // Assignment kills the LHS variable.\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n        } else {\n          // Includes complex assignments (a[i]=rhs) and other expressions.\n          // Recursively process children. For complex assignments like a[i]=rhs,\n          // this correctly computes gen for 'a' and 'i' when processing the\n          // GETELEM node, and gen for rhs. It correctly does not kill 'a' or 'i'.\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}