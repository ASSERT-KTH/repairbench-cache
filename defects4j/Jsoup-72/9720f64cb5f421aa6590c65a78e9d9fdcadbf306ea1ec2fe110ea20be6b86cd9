{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // Validate the string segment boundaries to prevent StringIndexOutOfBoundsException.\n        // This handles cases where:\n        // 1. `start` is negative.\n        // 2. `count` is negative or zero (for count=0, an empty string is typically desired and can be short-circuited).\n        // 3. `start + count` exceeds the `charBuf` length (attempting to read beyond buffer end).\n        // In such scenarios, returning an empty string aligns with common parsing behavior\n        // where no valid characters can be read or an empty string is expected.\n        if (start < 0 || count <= 0 || start + count > charBuf.length) {\n            return \"\";\n        }\n\n        // limit (no cache):\n        // This check is now robust because `start` and `count` are guaranteed to be valid\n        // for `new String(charBuf, start, count)` if this point is reached.\n        if (count > maxStringCacheLen)\n            return new String(charBuf, start, count);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        // Assuming stringCache is always initialized with a positive length to prevent ArrayIndexOutOfBoundsException.\n        final int index = hash & stringCache.length - 1;\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            // rangeEquals is assumed to handle valid `start` and `count` correctly.\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                // update the cache, as recently used strings are more likely to show up again\n                cached = new String(charBuf, start, count);\n                stringCache[index] = cached;\n            }\n        }\n        return cached;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}