{
    "generation": "    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // Clamp count to non-negative values\n        final int adjustedCount = count < 0 ? 0 : count;\n\n        // limit (no cache):\n        if (adjustedCount > maxStringCacheLen)\n            return new String(charBuf, start, adjustedCount);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < adjustedCount; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        final int index = hash & stringCache.length - 1;\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(charBuf, start, adjustedCount);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(charBuf, start, adjustedCount, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                cached = new String(charBuf, start, adjustedCount);\n                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}