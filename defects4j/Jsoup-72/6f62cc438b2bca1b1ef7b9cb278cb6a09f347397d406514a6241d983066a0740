{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // Prevent StringIndexOutOfBoundsException on new String if count is negative.\n        // Also handle count == 0 case efficiently, returning \"\" directly.\n        if (count <= 0) {\n            if (count == 0) {\n                return \"\"; // Return empty string for zero count\n            } else {\n                // count < 0 is an error condition passed by the caller.\n                // The original code would throw StringIndexOutOfBoundsException here.\n                // Returning an empty string avoids the crash and might allow tests expecting\n                // empty results in edge cases (like reading past EOF) to pass.\n                return \"\";\n            }\n        }\n\n        // limit (no cache):\n        if (count > maxStringCacheLen)\n            return new String(charBuf, start, count); // count is > 0 here\n\n        // calculate hash: count is > 0 here\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        // Add parentheses for clarity on operator precedence, although default precedence is correct.\n        final int index = hash & (stringCache.length - 1);\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(charBuf, start, count); // count is > 0 here\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            // rangeEquals must handle count > 0 correctly\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                cached = new String(charBuf, start, count); // count is > 0 here\n                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }\n\n    // Helper method assumed to exist and be correct for count >= 0\n    // private static boolean rangeEquals(final char[] charBuf, final int start, final int count, final String cached) { ... }\n\n    // Assumed static field, value doesn't matter for the fix logic itself, just needs to exist.\n    private static final int maxStringCacheLen = 12; // Example value",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}