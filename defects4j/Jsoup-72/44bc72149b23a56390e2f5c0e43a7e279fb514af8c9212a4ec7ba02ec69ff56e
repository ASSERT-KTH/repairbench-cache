{
    "generation": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // If no characters are requested, return the empty string.\n    if (count <= 0)\n        return \"\";\n\n    // For strings that are too long, don\u2019t cache.\n    if (count > maxStringCacheLen)\n        return new String(charBuf, start, count);\n\n    // calculate hash:\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // use bitmask to get cache index\n    final int index = hash & (stringCache.length - 1);\n    String cached = stringCache[index];\n\n    if (cached == null) { // miss, add\n        cached = new String(charBuf, start, count);\n        stringCache[index] = cached;\n    } else { // hashcode hit, check equality\n        if (rangeEquals(charBuf, start, count, cached)) { // hit\n            return cached;\n        } else { // hashcode conflict: replace with recently seen string\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        }\n    }\n    return cached;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}