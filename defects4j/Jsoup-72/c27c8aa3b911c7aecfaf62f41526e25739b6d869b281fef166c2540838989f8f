{
    "generation": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // handle empty or negative counts\n    if (count <= 0) {\n        return \"\";\n    }\n    // too long: skip cache\n    if (count > maxStringCacheLen) {\n        return new String(charBuf, start, count);\n    }\n\n    // calculate hash\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // map to cache slot\n    int index = hash & (stringCache.length - 1);\n    String cached = stringCache[index];\n\n    // if hit and equal, return cached\n    if (cached != null && rangeEquals(charBuf, start, count, cached)) {\n        return cached;\n    }\n\n    // miss or conflict: create new string and store\n    String result = new String(charBuf, start, count);\n    stringCache[index] = result;\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}