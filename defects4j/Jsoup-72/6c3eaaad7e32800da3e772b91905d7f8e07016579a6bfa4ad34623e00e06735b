{
    "generation": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    int available = charBuf.length - start;\n    if (available <= 0 || count <= 0) {\n        return \"\";\n    }\n    int actualCount = Math.min(count, available);\n    if (actualCount > maxStringCacheLen) {\n        return new String(charBuf, start, actualCount);\n    }\n\n    // calculate hash:\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < actualCount; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // get from cache\n    final int index = hash & (stringCache.length - 1);\n    String cached = stringCache[index];\n\n    if (cached == null) { // miss, add\n        cached = new String(charBuf, start, actualCount);\n        stringCache[index] = cached;\n    } else { // hashcode hit, check equality\n        if (rangeEquals(charBuf, start, actualCount, cached)) { // hit\n            return cached;\n        } else { // hashcode conflict\n            cached = new String(charBuf, start, actualCount);\n            stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n        }\n    }\n    return cached;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}