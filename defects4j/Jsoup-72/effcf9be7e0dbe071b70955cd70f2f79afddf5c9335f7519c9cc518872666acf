{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // Fix: A String cannot have a negative length. If 'count' is negative, it indicates an invalid input\n        // from the caller. Returning an empty string prevents StringIndexOutOfBoundsException with message\n        // \"String index out of range: -1\" which typically occurs when `count` is negative.\n        // This makes the function more robust to incorrect inputs from upstream.\n        if (count < 0) {\n            return \"\";\n        }\n\n        // limit (no cache):\n        if (count > maxStringCacheLen)\n            return new String(charBuf, start, count);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            // Note: This loop implicitly assumes start + count <= charBuf.length.\n            // If that assumption is violated, it would result in ArrayIndexOutOfBoundsException,\n            // but the reported error is specifically StringIndexOutOfBoundsException for count = -1.\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        // The stringCache.length is expected to be a power of 2 for this hash indexing to work as intended.\n        final int index = hash & stringCache.length - 1;\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                cached = new String(charBuf, start, count);\n                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}