{
    "generation": "/**\n * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n * <p />\n * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n * some more duplicates.\n */\nprivate static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // guard against negative or empty lengths\n    if (count <= 0) {\n        return \"\";\n    }\n\n    // if too long, don't cache\n    if (count > maxStringCacheLen) {\n        return new String(charBuf, start, count);\n    }\n\n    // compute a simple hash over the chars\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // mask into the cache array (length is power of two)\n    int index = hash & (stringCache.length - 1);\n    String cached = stringCache[index];\n\n    if (cached == null) {\n        // miss: create and store\n        cached = new String(charBuf, start, count);\n        stringCache[index] = cached;\n    } else {\n        // hit on hash: verify content\n        if (rangeEquals(charBuf, start, count, cached)) {\n            return cached;\n        } else {\n            // collision: overwrite with the new one\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        }\n    }\n\n    return cached;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}