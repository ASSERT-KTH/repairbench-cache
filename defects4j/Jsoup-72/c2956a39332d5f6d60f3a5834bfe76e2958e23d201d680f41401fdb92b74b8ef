{
    "generation": "/**\n * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n * <p/>\n * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n * some more duplicates.\n */\nprivate static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // limit (no cache):\n    if (count > maxStringCacheLen)\n        return new String(charBuf, start, count);\n\n    // calculate hash:\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // fix operator precedence: mask = stringCache.length - 1\n    final int index = hash & (stringCache.length - 1);\n    String cached = stringCache[index];\n\n    if (cached != null && rangeEquals(charBuf, start, count, cached)) {\n        // cache hit\n        return cached;\n    }\n\n    // miss or collision: create new and store\n    String result = new String(charBuf, start, count);\n    stringCache[index] = result;\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}