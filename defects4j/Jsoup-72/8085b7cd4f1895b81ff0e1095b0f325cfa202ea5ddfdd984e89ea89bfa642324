{
    "generation": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // If there\u2019s nothing to cache (or a negative count due to not found), return the empty string.\n    if (count <= 0)\n        return \"\";\n\n    // Only cache short strings.\n    if (count > maxStringCacheLen)\n        return new String(charBuf, start, count);\n\n    // Calculate hash using a simple polynomial rolling hash.\n    int hash = 0;\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[start + i];\n    }\n\n    // Use a bit mask on (stringCache.length - 1) to get a valid index.\n    final int index = hash & (stringCache.length - 1);\n    String cached = stringCache[index];\n\n    if (cached == null) { // Cache miss: create and store\n        cached = new String(charBuf, start, count);\n        stringCache[index] = cached;\n    } else { // Cache hit \u2013 check if it really equals the char[] region.\n        // Also check the length to avoid out-of-bound comparisons; \n        // rangeEquals is assumed to compare region of charBuf to the string.\n        if (cached.length() == count && rangeEquals(charBuf, start, count, cached)) {\n            return cached;\n        } else {\n            // In case of a hash collision, update the cache with the new string.\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        }\n    }\n    return cached;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}