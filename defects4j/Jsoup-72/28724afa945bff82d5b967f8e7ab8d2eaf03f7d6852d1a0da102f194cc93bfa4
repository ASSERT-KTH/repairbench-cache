{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // Add explicit bounds checks to prevent issues with invalid inputs from the caller.\n        // The String constructor would throw exceptions anyway, but checking upfront can\n        // avoid unexpected behavior or less clear exceptions in other parts of the method.\n        // Check count first as it's used in the start + count check.\n        if (count < 0) {\n             // Mimic the exception type that String constructor might throw for negative count/start.\n             throw new StringIndexOutOfBoundsException(\"Negative count: \" + count);\n        }\n        if (start < 0) {\n             // A negative start index is a likely cause for StringIndexOutOfBoundsException with index -1\n             // being thrown by the String constructor.\n             throw new StringIndexOutOfBoundsException(\"Negative start: \" + start);\n        }\n        // Use check that avoids potential start+count overflow\n        if (start > charBuf.length - count) {\n             throw new StringIndexOutOfBoundsException(\"offset \" + start + \", count \" + count + \", length \" + charBuf.length);\n        }\n        \n        // limit (no cache):\n        // This check must happen after bounds validation.\n        if (count > maxStringCacheLen)\n            // Bounds already checked, safe to create string.\n            return new String(charBuf, start, count);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        // Loop bounds are safe due to prior checks.\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        // Use parentheses for clarity, although precedence is correct without them.\n        // Assumes stringCache.length is a power of 2 and > 0. If not, caching is just suboptimal.\n        final int index = hash & (stringCache.length - 1);\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            // Bounds already checked, safe to create string.\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            // Assumes rangeEquals is robust and handles start/count correctly (bounds checked here).\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                // Bounds already checked, safe to create string.\n                cached = new String(charBuf, start, count);\n                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }\n\n    // Assuming rangeEquals and maxStringCacheLen are defined elsewhere appropriately.\n    // A plausible definition for rangeEquals (static version):\n    /*\n    private static boolean rangeEquals(final char[] charBuf, final int start, final int count, final String cached) {\n        if (count != cached.length())\n            return false;\n        for (int i = 0; i < count; i++) {\n            if (charBuf[start + i] != cached.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private static final int maxStringCacheLen = 30; // Example value\n    */",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}