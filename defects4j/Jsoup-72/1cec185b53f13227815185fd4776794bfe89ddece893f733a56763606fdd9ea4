{
    "generation": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // Calculate actual count considering the available characters in charBuf\n    int actualCount = count;\n    if (start >= 0 && start < charBuf.length) {\n        actualCount = Math.min(count, charBuf.length - start);\n    } else {\n        actualCount = 0;\n    }\n    if (actualCount < 0) {\n        actualCount = 0;\n    }\n\n    // Limit cache to maxStringCacheLen\n    if (actualCount > maxStringCacheLen) {\n        return new String(charBuf, start, actualCount);\n    }\n\n    // Calculate hash of the substring\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < actualCount; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // Get from cache\n    final int index = hash & stringCache.length - 1;\n    String cached = stringCache[index];\n\n    if (cached == null) { // Cache miss: add new string\n        cached = new String(charBuf, start, actualCount);\n        stringCache[index] = cached;\n    } else { // Hash collision: check equality\n        if (rangeEquals(charBuf, start, actualCount, cached)) { // Cache hit\n            return cached;\n        } else { // Collision: update cache\n            cached = new String(charBuf, start, actualCount);\n            stringCache[index] = cached;\n        }\n    }\n    return cached;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}