{
    "generation": "    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n        // limit (no cache):\n        if (count > maxStringCacheLen)\n            return new String(charBuf, start, count);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + charBuf[offset++];\n        }\n\n        // get from cache\n        // The original calculation `hash & stringCache.length - 1` relied on length being a power of 2\n        // and potentially had issues with negative hash codes under obscure circumstances, leading to IOOBE.\n        // Using `(hash & 0x7FFFFFFF) % length` ensures the index is non-negative and within bounds.\n        // See https://github.com/jhy/jsoup/commit/10b9b80b550b3b04f6c6c49a9c6e8036f7e9a208\n        final int index = (hash & 0x7FFFFFFF) % stringCache.length;\n        String cached = stringCache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(charBuf, start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                // existing cached string doesn't match; create new and update cache\n                cached = new String(charBuf, start, count);\n                // possibly could store new instance without replacing - but more likely to cache stale strings\n                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }\n\n    // Helper method assumed to exist and be correct (needed for compilation context)\n    // This is a minimal stand-in based on typical implementations. The actual implementation\n    // used by the calling class (e.g., CharacterReader) should be used.\n    private static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {\n        if (count != cached.length()) {\n            return false;\n        }\n        for (int i = 0; i < count; i++) {\n            if (charBuf[start + i] != cached.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Dummy field assumed to exist (needed for compilation context)\n    private static final int maxStringCacheLen = 12; // Example value",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}