{
    "generation": "    private static Set<Locale> cAvailableLocaleSet;\n    private static List<Locale> cAvailableLocaleList;\n\n    static {\n        Locale[] localeArray = Locale.getAvailableLocales();\n        cAvailableLocaleSet = new HashSet<Locale>(Arrays.asList(localeArray));\n        cAvailableLocaleList = new ArrayList<Locale>(cAvailableLocaleSet);\n        Collections.sort(cAvailableLocaleList, new Comparator<Locale>() {\n            public int compare(Locale locale1, Locale locale2) {\n                return locale1.toString().compareTo(locale2.toString());\n            }\n        });\n        cAvailableLocaleSet = Collections.unmodifiableSet(cAvailableLocaleSet);\n        cAvailableLocaleList = Collections.unmodifiableList(cAvailableLocaleList);\n    }\n\n    /**\n     * <p>Checks if the locale specified is in the list of available locales.</p>\n     *\n     * @param locale the Locale object to check if it is available\n     * @return true if the locale is a known locale\n     */\n    public static boolean isAvailableLocale(Locale locale) {\n        return cAvailableLocaleSet.contains(locale);\n    }\n\n    /**\n     * <p>Returns the set of available locales.</p>\n     *\n     * @return the set of available locales\n     */\n    public static Set<Locale> availableLocaleSet() {\n        return cAvailableLocaleSet;\n    }\n\n    /**\n     * <p>Returns the list of available locales.</p>\n     *\n     * @return the list of available locales\n     */\n    public static List<Locale> availableLocaleList() {\n        return cAvailableLocaleList;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}