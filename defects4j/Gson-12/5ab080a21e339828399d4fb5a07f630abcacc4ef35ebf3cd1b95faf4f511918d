{
    "generation": "  @Override public void skipValue() throws IOException {\n    JsonToken token = peek();\n    switch (token) {\n      case NAME:\n        // Consumes the name, and pushes the corresponding value onto the stack.\n        // After nextName(), the reader is positioned at the value that needs to be skipped.\n        nextName();\n        // Recursively skip the value that was just pushed.\n        skipValue();\n        break;\n      case BEGIN_ARRAY:\n        // Consumes the BEGIN_ARRAY token and pushes the array's iterator onto the stack.\n        beginArray();\n        // Skip all elements within the array.\n        while (hasNext()) {\n          skipValue(); // Recursively skip each element.\n        }\n        // Consumes the END_ARRAY token and pops the array's iterator from the stack.\n        endArray();\n        break;\n      case BEGIN_OBJECT:\n        // Consumes the BEGIN_OBJECT token and pushes the object's entrySet iterator onto the stack.\n        beginObject();\n        // Skip all name-value pairs within the object.\n        while (hasNext()) {\n          // Consumes the name and pushes the value onto the stack.\n          nextName();\n          // Recursively skip the value associated with the name.\n          skipValue();\n        }\n        // Consumes the END_OBJECT token and pops the object's entrySet iterator from the stack.\n        endObject();\n        break;\n      case STRING:\n      case NUMBER:\n      case BOOLEAN:\n      case NULL:\n        // For primitive values, simply pop them from the stack to consume them.\n        popStack();\n        // After popping a value, if there's a parent element (an array or object),\n        // its index needs to be incremented to reflect that one of its children has been consumed.\n        // `stackSize` now refers to the parent's level, if a parent exists.\n        if (stackSize > 0) {\n          pathIndices[stackSize - 1]++;\n        }\n        break;\n      case END_DOCUMENT:\n        throw new IllegalStateException(\"Expected a value but was \" + token + getPath());\n      case END_OBJECT: // Should not be peeking END_OBJECT when expecting a value\n      case END_ARRAY:  // Should not be peeking END_ARRAY when expecting a value\n        throw new IllegalStateException(\"Expected a value but was \" + token + getPath());\n      default:\n        // This case should ideally not be reached if all JsonToken types are handled.\n        throw new AssertionError(\"Unknown JsonToken type: \" + token);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}