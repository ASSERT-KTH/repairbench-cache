{
    "generation": "  @Override public void skipValue() throws IOException {\n    JsonToken token = peek();\n    switch (token) {\n      case BEGIN_ARRAY:\n        beginArray();\n        while (peek() != JsonToken.END_ARRAY) {\n          skipValue(); // Recursively skip each element in the array\n        }\n        endArray();\n        // After processing the array's contents and its END_ARRAY token,\n        // the array element itself is still on the stack and needs to be popped.\n        popStack();\n        break;\n      case BEGIN_OBJECT:\n        beginObject();\n        while (peek() != JsonToken.END_OBJECT) {\n          nextName(); // Consumes the name (key)\n          skipValue(); // Recursively skip the value associated with the name\n        }\n        endObject();\n        // After processing the object's contents and its END_OBJECT token,\n        // the object element itself is still on the stack and needs to be popped.\n        popStack();\n        break;\n      case NAME:\n        nextName(); // Consumes the name. The reader is now positioned at the value.\n        skipValue(); // Recursively skip the value associated with the name.\n        // The recursive call to skipValue() will handle popping the value from the stack.\n        break;\n      case STRING:\n      case NUMBER:\n      case BOOLEAN:\n      case NULL:\n        // These are primitive values. `nextString()` in JsonTreeReader correctly\n        // consumes them and internally calls `popStack()` to remove them from the stack.\n        nextString();\n        break;\n      case END_DOCUMENT:\n        throw new IllegalStateException(\"Unexpected END_DOCUMENT \" + getPath());\n      case END_OBJECT:\n      case END_ARRAY:\n        // These tokens should only be encountered as delimiters within a loop (e.g.,\n        // `while (peek() != END_OBJECT)`). If `skipValue()` is called directly on them,\n        // it indicates an error in the calling logic as there's no 'value' to skip.\n        throw new IllegalStateException(\"Unexpected \" + token + \" \" + getPath());\n      default:\n        throw new AssertionError();\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}