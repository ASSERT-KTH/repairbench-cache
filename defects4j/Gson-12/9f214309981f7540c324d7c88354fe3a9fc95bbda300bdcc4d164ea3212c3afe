{
    "generation": "  @Override public void skipValue() throws IOException {\n    int count = 0;\n    do {\n      JsonToken token = peek();\n      switch (token) {\n      case BEGIN_ARRAY:\n        beginArray();\n        count++;\n        break;\n      case BEGIN_OBJECT:\n        beginObject();\n        count++;\n        break;\n      case END_ARRAY:\n        endArray();\n        count--;\n        break;\n      case END_OBJECT:\n        endObject();\n        count--;\n        break;\n      case NAME:\n        nextName();\n        break;\n      case STRING:\n      case NUMBER:\n      case BOOLEAN:\n        // JsonTreeReader.nextString() is designed to handle primitive JsonPrimitive types\n        // (STRING, NUMBER, BOOLEAN) by calling their getAsString() method and popping them.\n        nextString();\n        break;\n      case NULL:\n        nextNull();\n        break;\n      case END_DOCUMENT:\n        // If END_DOCUMENT is reached and we are not inside any structure (count is 0),\n        // it means skipping is complete.\n        if (count == 0) {\n          return;\n        }\n        // Otherwise, encountering END_DOCUMENT prematurely while inside a structure is an error.\n        throw new IOException(\"Unexpected END_DOCUMENT token encountered while skipping value\");\n      default:\n        // This case should ideally not be reached if all JsonTokens are covered.\n        throw new AssertionError(\"Unexpected token: \" + token);\n      }\n    } while (count != 0); // Continue looping as long as we are inside an array or object\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}