{
    "generation": "  private static boolean isReduceableFunctionExpression(Node n) {\n    // A function is considered \"reducible\" for rewriting purposes if it's a standard function expression\n    // and not part of an accessor property (getter or setter).\n    // Functions inside getter/setter definitions have special semantics and should not be treated\n    // as regular function expressions for inlining or similar transformations, as this can break the AST\n    // and lead to invalid code, as demonstrated by testIssue538.\n    if (!NodeUtil.isFunctionExpression(n)) {\n      // If it's not a function expression (Token.FUNCTION), it's not reducible.\n      return false;\n    }\n\n    // Check if the function expression is the child of a GETTER_DEF or SETTER_DEF node.\n    // If it is, it should not be reduced.\n    Node parent = n.getParent();\n    if (parent != null && (parent.isGetterDef() || parent.isSetterDef())) {\n      return false;\n    }\n\n    // Otherwise, it's a reduceable function expression.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}