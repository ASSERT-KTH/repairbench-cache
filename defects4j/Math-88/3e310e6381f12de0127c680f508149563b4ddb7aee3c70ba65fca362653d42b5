{
    "generation": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    // When a Phase I shift was performed, subtract its value.\n    Integer artRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double shift = (artRow == null ? 0.0 : getEntry(artRow, getRhsOffset()));\n\n    // To avoid using the same row twice when two variables share the same basic row,\n    // record which rows have already been \u201cused.\u201d\n    Set<Integer> usedRows = new HashSet<Integer>();\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null && !usedRows.contains(basicRow)) {\n            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0.0 : shift);\n            usedRows.add(basicRow);\n        } else {\n            coefficients[i] = 0.0;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}