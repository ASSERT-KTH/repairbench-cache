{
    "generation": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    // Use a set to record which basic rows have already been used.\n    Set<Integer> usedBasicRows = new HashSet<Integer>();\n    \n    // When a solution is unrestricted the value in the artificial variable\n    // is subtracted from each basic variable\n    Integer auxRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = (auxRow == null) ? 0 : getEntry(auxRow, getRhsOffset());\n    \n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null && !usedBasicRows.contains(basicRow)) {\n            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n            usedBasicRows.add(basicRow);\n        } else {\n            coefficients[i] = 0;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}