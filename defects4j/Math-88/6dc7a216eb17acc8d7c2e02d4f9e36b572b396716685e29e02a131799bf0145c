{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRowForMostNegative =\n        getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRowForMostNegative == null ? 0 : getEntry(basicRowForMostNegative, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        // if multiple variables can take a given value \n        // then we choose the first and set the rest equal to 0\n        coefficients[i] =\n            (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n            (restrictToNonNegative ? 0 : mostNegative);\n\n        if (basicRow != null) {\n            // prevent multiple variables assigned the same slack variable from being assigned nonzero\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {\n                if (j == getNumObjectiveFunctions() + i) {\n                    continue; // skip current var\n                }\n                if (tableau.getEntry(basicRow, j) == 1) {\n                    coefficients[i] = 0;\n                    break;\n                }\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}