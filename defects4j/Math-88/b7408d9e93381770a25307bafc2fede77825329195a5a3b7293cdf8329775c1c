{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    // Compute any shift if variables are free (i.e. not restricted to non-negative).\n    Integer shiftRow =\n        getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = shiftRow == null ? 0 : getEntry(shiftRow, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        // Value of variable i is its RHS entry (or zero if non-basic),\n        // minus the shift if variables can be negative.\n        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))\n                       - (restrictToNonNegative ? 0 : mostNegative);\n        // Only when variables are free (restrictToNonNegative == false)\n        // do we need to guard against multiple basics in one row.\n        if (!restrictToNonNegative && basicRow != null) {\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                if (tableau.getEntry(basicRow, j) == 1) {\n                    value = 0;\n                    break;\n                }\n            }\n        }\n        coefficients[i] = value;\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}