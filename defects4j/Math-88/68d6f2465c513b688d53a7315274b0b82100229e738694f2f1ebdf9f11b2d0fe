{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n    // Compute the most negative value once for shifting if unrestricted\n    double mostNegative = 0.0;\n    if (!restrictToNonNegative) {\n        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            double entry = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));\n            if (entry < mostNegative) {\n                mostNegative = entry;\n            }\n        }\n    }\n\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        boolean isBasic = false;\n        if (basicRow != null) {\n            // Check if this variable column is a basic variable in this row\n            if (Math.abs(getEntry(basicRow, getNumObjectiveFunctions() + i) - 1.0) < 1e-8) {\n                // Check all other columns: must be 0 for basicness\n                boolean onlyOne = true;\n                for (int col = getNumObjectiveFunctions(); col < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); col++) {\n                    if (col != getNumObjectiveFunctions() + i &&\n                        Math.abs(getEntry(basicRow, col)) > 1e-8) {\n                        onlyOne = false;\n                        break;\n                    }\n                }\n                if (onlyOne) {\n                    isBasic = true;\n                }\n            }\n        }\n        if (isBasic) {\n            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n        } else {\n            coefficients[i] = 0;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}