{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    double mostNegative = 0;\n    Integer negativeVarBasicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    if (negativeVarBasicRow != null) {\n        mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());\n    }\n    for (int i = 0; i < coefficients.length; i++) {\n        coefficients[i] = 0;\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            coefficients[i] = getEntry(basicRow, getRhsOffset());\n            // check if any previous variable also uses this basic row\n            for (int j = 0; j < i; j++) {\n                Integer previousBasicRow = getBasicRow(getNumObjectiveFunctions() + j);\n                if (previousBasicRow != null && previousBasicRow.intValue() == basicRow.intValue()) {\n                    coefficients[i] = 0;\n                    break;\n                }\n            }\n        }\n        if (!restrictToNonNegative) {\n            coefficients[i] -= mostNegative;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}