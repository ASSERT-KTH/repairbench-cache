{
    "generation": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    boolean[] nonNegative = new boolean[getOriginalNumDecisionVariables()];\n    \n    // Determine which variables are non-negative\n    for (LinearConstraint c : getConstraints()) {\n        for (int i = 0; i < c.getCoefficients().length; i++) {\n            if (c.getCoefficients()[i] != 0) {\n                nonNegative[i] = true;\n                break;\n            }\n        }\n    }\n\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (nonNegative[i]) {\n            coefficients[i] = (basicRow != null) ? getEntry(basicRow, getRhsOffset()) : 0;\n        } else {\n            double mostNegative = 0;\n            Integer mostNegativeRow = getMostNegativeRow();\n            if (mostNegativeRow != null) {\n                mostNegative = getEntry(mostNegativeRow, getRhsOffset());\n            }\n            coefficients[i] = (basicRow != null) ? getEntry(basicRow, getRhsOffset()) - mostNegative : -mostNegative;\n        }\n    }\n\n    // Set non-basic variables to 0\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow == null) {\n            coefficients[i] = 0;\n        }\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}