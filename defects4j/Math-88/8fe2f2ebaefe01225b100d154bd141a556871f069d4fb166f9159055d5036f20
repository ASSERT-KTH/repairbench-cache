{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    // Compute the offset if variables are unrestricted\n    Integer basicRow =\n        getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));\n    // Extract each original variable's value\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow == null) {\n            // non\u2010basic variable = 0\n            coefficients[i] = 0;\n        } else {\n            double value = getEntry(basicRow, getRhsOffset());\n            if (restrictToNonNegative) {\n                // standard non\u2010negative simplex: no offset\n                coefficients[i] = value;\n            } else {\n                // free\u2010variable case: shift and handle degeneracy\n                coefficients[i] = value - mostNegative;\n                // if multiple representations of a free variable are basic\n                // choose the first one and zero out the rest\n                for (int j = getNumObjectiveFunctions();\n                     j < getNumObjectiveFunctions() + i;\n                     j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        coefficients[i] = 0;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}