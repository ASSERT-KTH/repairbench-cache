{
    "generation": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        // prepare array for the original decision variables only\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        // if we allow negative values shift the solution so that the smallest\n        // basic value becomes zero\n        Integer offsetRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = (offsetRow == null) ? 0.0\n                                                   : getEntry(offsetRow, getRhsOffset());\n        // extract each variable's value from the tableau\n        for (int i = 0; i < coefficients.length; i++) {\n            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            double value = (basicRow == null) ? 0.0\n                                              : getEntry(basicRow, getRhsOffset());\n            coefficients[i] = restrictToNonNegative\n                              ? value\n                              : value - mostNegative;\n        }\n        // compute objective value and return\n        return new RealPointValuePair(coefficients,\n                                      f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}