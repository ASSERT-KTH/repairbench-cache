{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    double mostNegative = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < getWidth() - 1; i++) {\n        // Find the minimum (most negative) basic variable RHS for dual simplex correction\n        Integer basicRow = getBasicRow(i);\n        if (basicRow != null) {\n            double entry = getEntry(basicRow, getRhsOffset());\n            if (entry < mostNegative) {\n                mostNegative = entry;\n            }\n        }\n    }\n    if (mostNegative == Double.POSITIVE_INFINITY) {\n        mostNegative = 0;\n    }\n\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        // if multiple variables can take a given value \n        // then we choose the first and set the rest equal to 0\n        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                        (restrictToNonNegative ? 0 : mostNegative);\n        // Remove the logic that sets coefficients[i] to 0 if any previous basic variables appear in this row\n        // This is incorrect for problems with alternate optimal basic solutions\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}