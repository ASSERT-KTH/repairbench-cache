{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    double mostNegative = 0;\n    Integer basicRowOfSlackArtificial =\n        getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    if (basicRowOfSlackArtificial != null) {\n        mostNegative = getEntry(basicRowOfSlackArtificial, getRhsOffset());\n    }\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            boolean identity = true;\n            // ensure the column is an identity column (with a 1 in this row, 0 elsewhere)\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {\n                double entry = tableau.getEntry(basicRow, j);\n                if (j == getNumObjectiveFunctions() + i) {\n                    if (entry != 1) {\n                        identity = false;\n                        break;\n                    }\n                } else {\n                    if (entry != 0) {\n                        identity = false;\n                        break;\n                    }\n                }\n            }\n            coefficients[i] =\n                (identity ? getEntry(basicRow, getRhsOffset()) : 0) -\n                (restrictToNonNegative ? 0 : mostNegative);\n            if (!identity) {\n                coefficients[i] = 0;\n            }\n        } else {\n            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}