{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow =\n        getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    Set<Integer> basicRows = new HashSet<Integer>();\n    \n    // Collect all basic rows\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer row = getBasicRow(getNumObjectiveFunctions() + i);\n        if (row != null) {\n            basicRows.add(row);\n        }\n    }\n    \n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        // if multiple variables can take a given value \n        // then we choose the first and set the rest equal to 0\n        coefficients[i] =\n            (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n            (restrictToNonNegative ? 0 : mostNegative);\n        \n        // If this basic row is used by other variables, set this coefficient to 0\n        if (basicRow != null) {\n            for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {\n                if (j != i && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {\n                    coefficients[i] = 0;\n                    break;\n                }\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}