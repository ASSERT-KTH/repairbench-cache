{
    "generation": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    // Compute the offset (mostNegative) from the extra row if needed.\n    Integer offsetRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double offset = (offsetRow == null ? 0 : getEntry(offsetRow, getRhsOffset()));\n    \n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))\n                       - (restrictToNonNegative ? 0 : offset);\n        // If more than one decision variable appears to be basic in the same row,\n        // only assign the value to the first occurrence.\n        if (basicRow != null) {\n            for (int k = 0; k < i; k++) {\n                Integer otherRow = getBasicRow(getNumObjectiveFunctions() + k);\n                if (otherRow != null && otherRow.equals(basicRow)) {\n                    value = 0;\n                    break;\n                }\n            }\n        }\n        coefficients[i] = value;\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}