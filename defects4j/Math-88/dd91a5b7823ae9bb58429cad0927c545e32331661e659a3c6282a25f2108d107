{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow =\n        getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        // if multiple variables can take a given value \n        // then we choose the first and set the rest equal to 0\n        boolean isBasic = basicRow != null;\n        coefficients[i] =\n            (isBasic ? getEntry(basicRow, getRhsOffset()) : 0) -\n            (restrictToNonNegative ? 0 : mostNegative);\n        // To prevent setting basic variable to 0 if another basic variable shares the same row\n        if (isBasic) {\n            boolean otherBasicFound = false;\n            for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {\n                if (j != i && getBasicRow(getNumObjectiveFunctions() + j) != null &&\n                    getBasicRow(getNumObjectiveFunctions() + j).equals(basicRow)) {\n                    otherBasicFound = true;\n                    break;\n                }\n            }\n            if (otherBasicFound) {\n                coefficients[i] = 0;\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}