{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow =\n        getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n\n        // Default: variable = 0\n        double value = 0;\n\n        // If this column is a basic variable\n        if (basicRow != null) {\n            // Check if column for this variable is a basic column:\n            boolean isBasic = true;\n            for (int row = 0; row < getHeight(); row++) {\n                double entry = tableau.getEntry(row, getNumObjectiveFunctions() + i);\n                if (row == basicRow) {\n                    if (entry != 1.0) {\n                        isBasic = false;\n                        break;\n                    }\n                } else {\n                    if (entry != 0.0) {\n                        isBasic = false;\n                        break;\n                    }\n                }\n            }\n            if (isBasic) {\n                value = getEntry(basicRow, getRhsOffset());\n            }\n        }\n\n        coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}