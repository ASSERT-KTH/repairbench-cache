{
    "generation": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            int var_i = getNumObjectiveFunctions() + i;\n            basicRow = getBasicRow(var_i);\n            if (basicRow != null) {\n                // Variable i is basic\n                coefficients[i] = getEntry(basicRow, getRhsOffset()) -\n                                 (restrictToNonNegative ? 0 : mostNegative);\n\n                // Check if this variable should be set to 0 due to non-uniqueness\n                boolean shouldSetToZero = false;\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        shouldSetToZero = true;\n                        break;\n                    }\n                }\n                if (shouldSetToZero) {\n                    coefficients[i] = 0;\n                }\n            } else {\n                // Variable i is non-basic\n                coefficients[i] = 0;\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}