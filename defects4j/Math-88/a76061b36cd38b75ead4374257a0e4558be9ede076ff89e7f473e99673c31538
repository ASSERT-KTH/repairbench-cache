{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    // Compute the most negative value if not restricting to non-negative variables\n    double mostNegative = 0;\n    if (!restrictToNonNegative) {\n        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));\n            mostNegative = Math.min(mostNegative, value);\n        }\n    }\n    // For each variable, assign its value if basic, otherwise 0\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n        } else {\n            coefficients[i] = 0;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}