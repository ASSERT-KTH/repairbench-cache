{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n    double mostNegative;\n    Integer mostNegativeRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    mostNegative = (mostNegativeRow == null) ? 0 : getEntry(mostNegativeRow, getRhsOffset());\n\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n\n        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n\n        // Check if this variable is actually basic rather than just taking the RHS blindly\n        boolean basicVariableFound = false;\n        if (basicRow != null) {\n            for (int col = getNumObjectiveFunctions(); col < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); col++) {\n                if (col != (getNumObjectiveFunctions() + i) && Math.abs(tableau.getEntry(basicRow, col)) > 1.0e-8) {\n                    // Not a basic variable for this original variable\n                    basicVariableFound = false;\n                    break;\n                }\n                if (col == (getNumObjectiveFunctions() + i) && Math.abs(tableau.getEntry(basicRow, col) - 1.0) < 1.0e-8) {\n                    basicVariableFound = true;\n                }\n            }\n        }\n        coefficients[i] = (basicVariableFound) ? value : 0.0;\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}