{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow;\n    // Identify the most negative variable for unrestricted problems (used for shifting)\n    double mostNegative = Double.POSITIVE_INFINITY;\n    if (!restrictToNonNegative) {\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            double value = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n            if (value < mostNegative) {\n                mostNegative = value;\n            }\n        }\n        if (mostNegative == Double.POSITIVE_INFINITY) {\n            mostNegative = 0;\n        }\n    } else {\n        mostNegative = 0;\n    }\n\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        coefficients[i] =\n            (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n            (restrictToNonNegative ? 0 : mostNegative);\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}