{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    double mostNegative = 0;\n    // Find the most negative variable (for unrestricted variables)\n    Integer basicRowForMostNegative = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    if (basicRowForMostNegative != null) {\n        mostNegative = getEntry(basicRowForMostNegative, getRhsOffset());\n    }\n    // Compute the solution\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        boolean setToZero = false;\n        if (basicRow != null) {\n            // If this basic row is basic for more than one variable, only one should take the value.\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {\n                if (j != (getNumObjectiveFunctions() + i) && getBasicRow(j) != null && getBasicRow(j).equals(basicRow)) {\n                    setToZero = true;\n                    break;\n                }\n            }\n        }\n        if (setToZero || basicRow == null) {\n            coefficients[i] = 0;\n        } else {\n            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}