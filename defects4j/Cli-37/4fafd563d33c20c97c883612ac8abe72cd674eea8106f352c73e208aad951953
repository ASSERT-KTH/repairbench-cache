{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     * <p>\n     * Short options begin with a single hyphen followed by a short option character.\n     * They can be clustered, e.g., \"-abc\".\n     * They may optionally have a value attached, e.g., \"-Dname=value\" or \"-f file\".\n     * A token like \"-long\" where \"long\" is a registered long option is NOT considered a short option.\n     *\n     * @param token The token to check.\n     * @return {@code true} if the token looks like a short option, {@code false} otherwise.\n     */\n    private boolean isShortOption(String token)\n    {\n        // check if the token is null or empty\n        if (token == null || token.isEmpty()) {\n            return false;\n        }\n        \n        // short options must start with a hyphen and be at least two chars long\n        // or be exactly \"-\"\n        if (!token.startsWith(\"-\") || token.length() < 2)\n        {\n            return false;\n        }\n\n        // handle special case \"--\" token for stopping processing options\n        if (\"--\".equals(token)) {\n            return false;\n        }\n\n        // Check if the token resembles a long option starting with a single hyphen, e.g. \"-verbose\"\n        // Such tokens are processed as long options, not short options. See CLI-178, CLI-265\n        if (options.hasLongOption(token.substring(1))) {\n             return false;\n        }\n\n        // If it's not recognized as a long option starting with a single hyphen,\n        // check if the character following the hyphen is a recognized short option.\n        // This is the defining characteristic of a short option or cluster thereof.\n        return options.hasShortOption(token.substring(1, 2));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}