{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // Short options: -S, -SV, -S=V, -SV1=V2, -S1S2\n    // This function should recognize \"-X\", \"-XX\", but not treat \"-long\" as short option, unless \"long\" is a valid short option!\n    // The original implementation only checks the first character.\n    // FIX: Try to check for the longest matching short option prefix after the leading '-'\n    if (!token.startsWith(\"-\") || token.length() < 2) {\n        return false;\n    }\n\n    String t = token.substring(1);\n    // Find the longest matching short option at the start of t\n    for (int i = t.length(); i >= 1; --i) {\n        String opt = t.substring(0, i);\n        if (options.hasShortOption(opt)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}