{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() < 2) {\n            return false;\n        }\n\n        // Check if the first character after '-' is a valid short option\n        String possibleOption = token.substring(1, 2);\n        if (!options.hasShortOption(possibleOption)) {\n            return false;\n        }\n\n        // Handle combined short options like -xyz\n        if (token.length() > 2) {\n            // If there's an equals sign, check if what comes before it are all valid short options\n            int equalsPos = token.indexOf('=');\n            if (equalsPos > 0) {\n                String prefix = token.substring(1, equalsPos);\n                for (int i = 0; i < prefix.length(); i++) {\n                    if (!options.hasShortOption(prefix.substring(i, i+1))) {\n                        return false;\n                    }\n                }\n                return true;\n            } else {\n                // Check all characters after '-' are valid short options\n                String rest = token.substring(1);\n                for (int i = 0; i < rest.length(); i++) {\n                    if (!options.hasShortOption(rest.substring(i, i+1))) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}