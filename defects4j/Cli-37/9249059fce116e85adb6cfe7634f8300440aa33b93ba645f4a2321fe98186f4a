{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() < 2)\n        {\n            return false;\n        }\n\n        // The name of the option, without the leading dash.\n        String optName = token.substring(1);\n\n        // If the entire 'optName' corresponds to a defined long option,\n        // then this token should be treated as a long option, not a short one.\n        // This gives precedence to long options that happen to start with a single hyphen,\n        // preventing them from being misidentified as short options potentially with values or bundled options.\n        if (options.hasLongOption(optName))\n        {\n            return false;\n        }\n\n        // Otherwise, it's a short option if its first character is a registered short option.\n        // This covers traditional short options like -S, -SV, -S=V, -S1S2.\n        return options.hasShortOption(optName.substring(0, 1));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}