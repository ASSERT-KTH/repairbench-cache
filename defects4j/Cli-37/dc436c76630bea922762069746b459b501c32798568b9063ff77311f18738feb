{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() < 2) {\n            return false;\n        }\n\n        // Check if the first character after '-' is a valid short option\n        String firstChar = token.substring(1, 2);\n        if (!options.hasShortOption(firstChar)) {\n            return false;\n        }\n\n        // If there's more characters, they should either be:\n        // 1. More short options (no '=' present)\n        // 2. Or a value after '=' for the first option\n        if (token.length() > 2) {\n            if (token.indexOf('=') > 0) {\n                // Case like -S=V or -SV1=V2\n                return true;\n            } else {\n                // Case like -S1S2 (multiple short options)\n                for (int i = 2; i < token.length(); i++) {\n                    if (!options.hasShortOption(token.substring(i, i+1))) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}