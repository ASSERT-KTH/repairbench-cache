{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() < 2) {\n            return false;\n        }\n\n        // remove leading \"-\"\n        String optNameCandidate = token.substring(1);\n\n        // Check if the token (or part before '=') matches a defined short option.\n        // This handles multi-character short option names like \"-t1\" or \"-last\".\n        int equalSignIndex = optNameCandidate.indexOf('=');\n        String potentialShortOptionName = (equalSignIndex == -1) ? optNameCandidate : optNameCandidate.substring(0, equalSignIndex);\n\n        if (options.hasShortOption(potentialShortOptionName)) {\n            return true;\n        }\n\n        // If the full potential name doesn't match, check if just the first character\n        // is a defined short option. This covers cases like:\n        // - \"-SV\" where 'S' is the short option and 'V' is its attached value.\n        // - \"-S1S2\" where 'S1' is the first short option in a combined sequence.\n        // (The `token.length() >= 2` check ensures `optNameCandidate` has at least one character.)\n        return options.hasShortOption(optNameCandidate.substring(0, 1));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}