{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // Support short options such as -S, -SV, -S=V, -SV1=V2, -S1S2, -t1, not --longoption\n    if (token == null || !token.startsWith(\"-\") || token.startsWith(\"--\") || token.length() < 2) {\n        return false;\n    }\n    // Remove leading '-'\n    String withoutDash = token.substring(1);\n    // Split on '=' if present (e.g. -t1=foo)\n    int equalIndex = withoutDash.indexOf('=');\n    String optToken = (equalIndex >= 0) ? withoutDash.substring(0, equalIndex) : withoutDash;\n    // Accept if the whole part after '-' is a defined short option, or its first char\n    if (options.hasShortOption(optToken)) {\n        return true;\n    }\n    if (optToken.length() >= 1 && options.hasShortOption(optToken.substring(0, 1))) {\n        return true;\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}