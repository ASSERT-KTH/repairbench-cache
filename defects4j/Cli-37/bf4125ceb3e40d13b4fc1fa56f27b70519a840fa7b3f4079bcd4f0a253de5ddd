{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // Accept -S, -SV, -S=V, -SV1=V2, -S1S2 where S* are known short options\n    if (!token.startsWith(\"-\") || token.startsWith(\"--\") || token.length() < 2) {\n        return false;\n    }\n    String t = token.substring(1);\n    // If token contains '=', get part before '='\n    String opt = t.contains(\"=\") ? t.substring(0, t.indexOf('=')) : t;\n\n    // If the entire opt is a registered short option, return true\n    if (options.hasShortOption(opt)) {\n        return true;\n    }\n\n    // If opt is multi-character, check if all individual characters are short options\n    for (int i = 0; i < opt.length(); i++) {\n        String ch = String.valueOf(opt.charAt(i));\n        if (!options.hasShortOption(ch)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}