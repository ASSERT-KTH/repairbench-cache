{
    "generation": "    /**\n     * Recalculate the hash code after deserialization. The hash code of some\n     * keys might have change (hash codes based on the system hash code are\n     * only stable for the same process).\n     * @return the instance with recalculated hash code\n     */\n    private Object readResolve() {\n        calculateHashCode(this.keys);\n        if (getClass() != MultiKey.class) {\n            // For subclasses, super.readResolve() is not called automatically,\n            // so recalculate hash code on subclass fields as well\n            try {\n                java.lang.reflect.Field hashCodeField = null;\n                Class<?> clazz = getClass();\n                while (clazz != null) {\n                    try {\n                        hashCodeField = clazz.getDeclaredField(\"hashCode\");\n                        hashCodeField.setAccessible(true);\n                        break;\n                    } catch (NoSuchFieldException e) {\n                        clazz = clazz.getSuperclass();\n                    }\n                }\n                if (hashCodeField != null) {\n                    int hash = 0;\n                    for (final Object key : this.keys) {\n                        if (key != null) {\n                            hash ^= key.hashCode();\n                        }\n                    }\n                    hashCodeField.setInt(this, hash);\n                }\n            } catch (Exception ignore) {\n                // ignore any reflection errors\n            }\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}