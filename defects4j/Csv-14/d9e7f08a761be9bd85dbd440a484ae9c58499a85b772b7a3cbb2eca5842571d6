{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n\n            if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                quote = true;\n            } else {\n                boolean hasForbidden = false;\n                pos = offset;\n                while (pos < end) {\n                    char currentChar = value.charAt(pos);\n                    if (currentChar == LF || currentChar == CR || currentChar == quoteChar || currentChar == delimChar) {\n                        hasForbidden = true;\n                        break;\n                    }\n                    pos++;\n                }\n                quote = hasForbidden;\n\n                if (!quote) {\n                    char lastChar = value.charAt(end - 1);\n                    if (lastChar <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n\n    out.append(quoteChar);\n\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}