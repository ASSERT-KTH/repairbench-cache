{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        // Use the existing escaping code\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            // Always quote an empty token that is the first on the line.\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            // Instead of forcing quoting when the first character isn\u2019t alphanumeric,\n            // simply force quoting only for problematic characters.\n            char c = value.charAt(offset);\n            if (c <= COMMENT) {\n                quote = true;\n            } else {\n                for (int pos = offset; pos < end; pos++) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                }\n                // Also force quoting if the last character is a control character or a space.\n                if (!quote) {\n                    c = value.charAt(end - 1);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (!quote) {\n        // No encapsulation needed \u2013 write out the original value.\n        out.append(value, offset, end);\n        return;\n    }\n\n    // Write out the field surrounded by quotes. Any quote characters in the field\n    // are doubled.\n    out.append(quoteChar);\n    for (int pos = offset; pos < end; pos++) {\n        char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(quoteChar);\n        }\n        out.append(c);\n    }\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}