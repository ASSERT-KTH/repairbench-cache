{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n\n    boolean quote = false;\n    switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len == 0) {\n                // When the token is empty, quote it if it is the first token on a new record.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                // Check each character: if it is a line break, the quote- or delimiter character,\n                // then we must enclose the field in quotes.\n                for (int i = offset; i < end; i++) {\n                    char c = value.charAt(i);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                }\n                // Also, preserve trailing whitespace by quoting if the last character is whitespace.\n                if (!quote) {\n                    char last = value.charAt(end - 1);\n                    if (last <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (!quote) {\n        out.append(value, offset, end);\n        return;\n    }\n\n    // Write the encapsulator, then the content doubling any embedded quotes, and then the closing encapsulator.\n    out.append(quoteChar);\n    for (int i = offset; i < end; i++) {\n        char c = value.charAt(i);\n        if (c == quoteChar) {\n            // Double the quote character.\n            out.append(quoteChar);\n        }\n        out.append(c);\n    }\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}