{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n                           final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code when no quoting is desired.\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len == 0) {\n                // Always quote an empty token if it is the first on the line.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                // If the field starts with the comment marker when at the start of a record,\n                // force quoting so it isn\u2019t misinterpreted.\n                Character commentMarker = getComment();\n                if (newRecord && commentMarker != null && value.charAt(offset) == commentMarker.charValue()) {\n                    quote = true;\n                }\n                // Look through the field to see if any characters require quoting.\n                for (int i = offset; i < end && !quote; i++) {\n                    char c = value.charAt(i);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                    }\n                }\n                // If there\u2019s trailing whitespace that might cause parsing problems, quote it.\n                if (!quote && len > 0) {\n                    char last = value.charAt(end - 1);\n                    if (last <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (!quote) {\n        // No quoting needed; output the original value.\n        out.append(value, offset, end);\n        return;\n    }\n\n    // Output the field with quotes.\n    out.append(quoteChar);\n    for (int i = offset; i < end; i++) {\n        char c = value.charAt(i);\n        if (c == quoteChar) {\n            // Double the quote character.\n            out.append(quoteChar);\n        }\n        out.append(c);\n    }\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}