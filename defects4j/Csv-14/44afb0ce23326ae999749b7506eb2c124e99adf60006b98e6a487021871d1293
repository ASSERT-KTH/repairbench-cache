{
    "generation": "// the original object is needed so can check for Number\nprivate void printAndQuote(final Object object,\n                           final CharSequence value,\n                           final int offset,\n                           final int len,\n                           final Appendable out,\n                           final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty first token\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n                // quote if the first char is the comment marker\n                if (newRecord && c == COMMENT) {\n                    quote = true;\n                } else {\n                    // scan for delimiter, quote char, CR or LF\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        // quote if the last char is a space or control <= SP\n                        c = value.charAt(end - 1);\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    // no encapsulation needed\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n\n    // encapsulate\n    out.append(quoteChar);\n\n    // double up any internal quote chars\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            // write up to and including this quote\n            out.append(value, start, pos + 1);\n            // next segment starts here (so we'll write the quote again)\n            start = pos;\n        }\n        pos++;\n    }\n\n    // write the remainder and closing quote\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}