{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        final char delimChar = getDelimiter();\n        final char quoteChar = getQuoteCharacter().charValue();\n        final Character escapeChar = getEscapeCharacter();\n\n        QuoteMode quoteModePolicy = getQuoteMode();\n        if (quoteModePolicy == null) {\n            quoteModePolicy = QuoteMode.MINIMAL;\n        }\n        switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len, out, escapeChar);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                    quote = true;\n                } else if (c <= COMMENT) {\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }\n\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n\n        out.append(quoteChar);\n\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            if (c == quoteChar || (escapeChar != null && c == escapeChar)) {\n                out.append(value, start, pos);\n                out.append(c);\n                start = pos + 1;\n            }\n            pos++;\n        }\n\n        out.append(value, start, pos);\n        out.append(quoteChar);\n    }\n\nprivate void printAndEscape(final CharSequence value, int start, int end, final Appendable out, final Character escapeChar)\n        throws IOException {\n    if (escapeChar == null) {\n        out.append(value, start, end);\n        return;\n    }\n    for (int i = start; i < end; i++) {\n        char c = value.charAt(i);\n        if (c == escapeChar || c == getQuoteCharacter().charValue() || c == getDelimiter()) {\n            out.append(value, start, i);\n            out.append(escapeChar);\n            start = i;\n        }\n    }\n    out.append(value, start, end);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}