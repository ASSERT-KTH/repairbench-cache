{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code.\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // Always quote an empty token if it is the first in the record.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                // If a comment marker is defined and the field begins with it,\n                // force quoting so the field isn\u2019t misinterpreted as a comment.\n                char first = value.charAt(offset);\n                if (newRecord && getComment() != null && first == getComment().charValue()) {\n                    quote = true;\n                } else {\n                    // Quote if any character is a line break, the quote character, or the delimiter.\n                    for (int i = offset; i < end; i++) {\n                        char ch = value.charAt(i);\n                        if (ch == LF || ch == CR || ch == quoteChar || ch == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                    }\n                    // Additionally, if the last character is whitespace (<= ' ') then quote.\n                    if (!quote && value.charAt(end - 1) <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (!quote) {\n        // No quoting necessary; simply append the original value.\n        out.append(value, offset, end);\n        return;\n    }\n\n    // Write out quoted text and double any embedded quote characters.\n    out.append(quoteChar);\n    for (int i = offset; i < end; i++) {\n        char ch = value.charAt(i);\n        if (ch == quoteChar) {\n            out.append(quoteChar);\n        }\n        out.append(ch);\n    }\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}