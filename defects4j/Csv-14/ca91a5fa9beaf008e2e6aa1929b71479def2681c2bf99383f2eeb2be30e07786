{
    "generation": "// the original object is needed so can check for Number\nprivate void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n\n    final char delimChar = getDelimiter();\n    final Character quoteCharObj = getQuoteCharacter();\n    final char quoteChar = quoteCharObj != null ? quoteCharObj.charValue() : 0;\n    final Character escapeCharObj = getEscapeCharacter();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        // Use the existing escaping code\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n\n            // RFC4180 TEXTDATA = %x20-21 / %x23-2B / %x2D-7E\n            if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z')) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n        pos = offset; // reset pos\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n\n    if (quoteCharObj == null) {\n        // no quote char defined, just output\n        out.append(value, start, end);\n        return;\n    }\n\n    out.append(quoteChar);\n\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos);\n            out.append(quoteChar);\n            out.append(quoteChar);\n            pos++;\n            start = pos;\n        } else {\n            pos++;\n        }\n    }\n\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}