{
    "generation": "// the original object is needed so can check for Number\nprivate void printAndQuote(final Object object, final CharSequence value,\n                           final int offset, final int len,\n                           final Appendable out, final boolean newRecord)\n        throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n\n    final char delimChar  = getDelimiter();\n    final char quoteChar  = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token if it's the first on the line\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                // check for leading comment marker\n                char first = value.charAt(pos);\n                if (newRecord && first == COMMENT) {\n                    quote = true;\n                } else {\n                    // scan for chars that force quoting\n                    while (pos < end) {\n                        char c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    // if no quote trigger found, check for trailing space/control\n                    if (!quote) {\n                        char last = value.charAt(end - 1);\n                        if (last <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    // if quote==false here, no special handling needed\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n\n    // we need to encapsulate\n    out.append(quoteChar);\n    // resume at the point we stopped scanning for quote triggers\n    while (pos < end) {\n        char c = value.charAt(pos);\n        if (c == quoteChar) {\n            // write out up to and including this quote, then reset start\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n    // write any remaining segment\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}