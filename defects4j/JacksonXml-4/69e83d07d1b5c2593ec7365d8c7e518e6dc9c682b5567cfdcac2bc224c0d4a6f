{
    "generation": "    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException\n    {\n        // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly\n        //    configured root name...\n        if (jgen instanceof ToXmlGenerator) {\n            ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;\n\n            // Get the root name from the current serialization configuration.\n            // This handles cases where ObjectWriter.withRootName() has been used.\n            // Assumes '_config' (SerializationConfig) is a member of the class containing this method.\n            PropertyName rootName = _config.getFullRootName();\n\n            // If no explicit root name is configured, fall back to the default for nulls.\n            if (rootName == null) {\n                rootName = ROOT_NAME_FOR_NULL;\n            }\n\n            // Initialize the XML generator with the determined root name.\n            // This method is expected to set the name and start the root element (e.g., calling writeStartObject()).\n            _initWithRootName(xmlGen, rootName);\n\n            // For a null root value in XML, we should output an empty element.\n            // The root element was started by _initWithRootName; now we close it.\n            // Calling writeEndObject() after writeStartObject() without any content in between\n            // will produce an empty element like \"<rootName/>\".\n            xmlGen.writeEndObject();\n        }\n        // No 'else' block or 'super.serializeValue' is needed here, as this method\n        // is specifically for XML serialization of null, and the non-XML case\n        // would be handled by a higher-level default serialization logic (e.g., in SerializerProvider).\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}