{
    "generation": "// Fixed toFormatter: honor the printer/parser flags even when a Separator is present\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs,\n                                           boolean notPrinter,\n                                           boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    // handle a leading Separator specially\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        // recurse to build the \"after\" formatter\n        PeriodFormatter after = toFormatter(elementPairs.subList(2, size),\n                                             notPrinter,\n                                             notParser);\n        // finish the separator with the sub\u2010printer and sub\u2010parser\n        Separator finished = sep.finish(after.getPrinter(), after.getParser());\n        // respect the notPrinter/notParser flags\n        PeriodPrinter  printer = notPrinter ? null : finished;\n        PeriodParser   parser  = notParser  ? null : finished;\n        return new PeriodFormatter(printer, parser);\n    }\n    // no Separator \u2013 do the normal composite build\n    Object[] comp = createComposite(elementPairs);\n    PeriodPrinter  printer = notParser ? null : (PeriodPrinter) comp[0];\n    PeriodParser   parser  = notPrinter ? null : (PeriodParser)  comp[1];\n    return new PeriodFormatter(printer, parser);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}