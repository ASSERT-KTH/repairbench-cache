{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs,\n                                           boolean notPrinter,\n                                           boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\n            \"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    // Special\u2010case: a leading Separator wraps the entire remainder.\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter inner = toFormatter(\n            elementPairs.subList(2, size), notPrinter, notParser);\n        sep = sep.finish(inner.getPrinter(), inner.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n    // Look for a Separator in the middle of the list.\n    for (int i = 2; i < size; i += 2) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            // Prefix (everything before the separator)\n            List<Object> prefix = elementPairs.subList(0, i);\n            // Suffix (everything after the separator pair)\n            List<Object> suffix = elementPairs.subList(i + 2, size);\n            // Build a formatter for the suffix\n            PeriodFormatter suffixFmt = toFormatter(suffix, notPrinter, notParser);\n            // Finish the separator around the suffix formatter\n            sep = sep.finish(suffixFmt.getPrinter(), suffixFmt.getParser());\n            // Merge prefix + the finished separator\n            List<Object> merged = new ArrayList<Object>(prefix.size() + 2);\n            merged.addAll(prefix);\n            merged.add(sep);\n            merged.add(sep);\n            Object[] comp = createComposite(merged);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter(\n                    (PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n    // No Separator found: simple composite of all pairs.\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter(\n            (PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}