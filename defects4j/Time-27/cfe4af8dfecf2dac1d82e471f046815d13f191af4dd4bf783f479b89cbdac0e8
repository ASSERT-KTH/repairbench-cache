{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs,\n                                           boolean notPrinter,\n                                           boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\n            \"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    // Handle a leading Separator specially\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        // Recurse into the \"after\" elements\n        PeriodFormatter f = toFormatter(elementPairs.subList(2, size),\n                                         notPrinter, notParser);\n        // Finish off the separator with the nested printer/parser\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        // Respect notPrinter / notParser flags on the result\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) sep);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) sep, null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) sep,\n                                       (PeriodParser) sep);\n        }\n    }\n    // No separator at front \u2014 build a flat composite\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0],\n                                   (PeriodParser) comp[1]);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}