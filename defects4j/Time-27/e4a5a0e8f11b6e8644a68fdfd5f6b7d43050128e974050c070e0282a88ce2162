{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs,\n                                           boolean notPrinter,\n                                           boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\n            \"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    //\n    // Handle any Separator found in the list (not just at index 0).\n    // When we see a Separator, split off the \"after\"\u2010part, recurse on it,\n    // finish the Separator with the sub\u2010formatter, and return.\n    //\n    for (int i = 0; i < size; i++) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            // We assume the next element (i+1) is the integer marker\n            // so the remainder starts at i+2.\n            List<Object> remainder = elementPairs.subList(i + 2, size);\n            PeriodFormatter sub = toFormatter(remainder, notPrinter, notParser);\n            sep = sep.finish(sub.getPrinter(), sub.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n    }\n    //\n    // No Separator in the list, do the normal composite\n    //\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0],\n                                   (PeriodParser) comp[1]);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}