{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs,\n                                           boolean notPrinter,\n                                           boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    // handle a leading Separator specially\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        // recurse into the \"after\u2010separator\" elements\n        PeriodFormatter f = toFormatter(elementPairs.subList(2, size),\n                                        notPrinter,\n                                        notParser);\n        // finish off the Separator with the child printer/parser\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        // respect the notPrinter/notParser flags\n        PeriodPrinter printer = notPrinter ? null : sep;\n        PeriodParser parser = notParser ? null : sep;\n        return new PeriodFormatter(printer, parser);\n    }\n    // no Separator marker => just build a composite\n    Object[] comp = createComposite(elementPairs);\n    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];\n    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];\n    return new PeriodFormatter(printer, parser);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}