{
    "generation": "    //-----------------------------------------------------------------------\n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            // Fixed: Only create printer/parser if needed\n            PeriodPrinter printer = notPrinter ? null : f.getPrinter();\n            PeriodParser parser = notParser ? null : f.getParser();\n            sep = sep.finish(printer, parser);\n            if (notPrinter && notParser) {\n                return new PeriodFormatter(null, null);\n            }\n            if (notPrinter) {\n                return new PeriodFormatter(null, sep);\n            }\n            if (notParser) {\n                return new PeriodFormatter(sep, null);\n            }\n            return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}