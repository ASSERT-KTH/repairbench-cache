{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            // Fix: Compose with the remaining part, not just use the separator as both printer/parser\n            return new PeriodFormatter(sep, sep).withFieldsFormatter(f);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}\n\n// The trick is we need to compose the separator and the rest, not just return the separator as printer+parser.\n// So, PeriodFormatter needs to expose a way to set or chain the base formatter (fields) for the PeriodFormatter built for Separator.\n// In Joda-Time, the real PeriodFormatterBuilder code does this via an internal Composite type; here, assuming withFieldsFormatter is a utility to merge/separate the separator and the inner fields based formatter.\n// If you must keep this as only a function patch, then, in the buggy place, replace `return new PeriodFormatter(sep, sep);` with:\n//      Object[] comp = new Object[] { sep, sep };\n//      Object[] rest = createComposite(elementPairs.subList(2, size));\n//      return new PeriodFormatter(new Composite((PeriodPrinter)comp[0], (PeriodPrinter)rest[0]),\n//                                new Composite((PeriodParser)comp[1], (PeriodParser)rest[1]));\n// but the key is: you must *combine* the separator and the inner part, not just return the separator!",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}