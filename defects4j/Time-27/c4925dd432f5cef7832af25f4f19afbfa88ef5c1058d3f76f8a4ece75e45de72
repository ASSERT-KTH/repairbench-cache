{
    "generation": "    //-----------------------------------------------------------------------\n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        // The special case handling for a list starting with a Separator was removed.\n        // It was buggy as it returned a PeriodFormatter containing only the separator,\n        // discarding the formatter created from the remaining elements.\n        // The createComposite method is assumed to correctly handle all elements,\n        // including separators at any position.\n        // Original buggy code:\n//        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n//            Separator sep = (Separator) elementPairs.get(0);\n//                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n//                sep = sep.finish(f.getPrinter(), f.getParser());\n//                return new PeriodFormatter(sep, sep); // BUG: Discards f\n//        }\n\n        // General case: create a composite printer/parser from all elements\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            // If printing is not supported, ensure the parser is still valid.\n            // comp[1] might be null if elementPairs only contains printers or is empty.\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            // If parsing is not supported, ensure the printer is still valid.\n            // comp[0] might be null if elementPairs only contains parsers or is empty.\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            // Both printing and parsing are supported.\n            // comp[0] or comp[1] might be null if elementPairs is effectively empty\n            // for either printing or parsing.\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}