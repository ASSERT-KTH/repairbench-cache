{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs,\n                                           boolean notPrinter,\n                                           boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\n            \"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n\n    /*\n     * Only treat a leading Separator as a group\u2010marker if there is\n     * actually content after it.  Flattening an existing formatter\n     * (which only contributes two entries) should not be seen as\n     * a new separator group.\n     */\n    if (size >= 3 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        // recurse into the sublist after the two separator markers\n        PeriodFormatter inner =\n            toFormatter(elementPairs.subList(2, size),\n                        notPrinter, notParser);\n        sep = sep.finish(inner.getPrinter(), inner.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0],\n                                   (PeriodParser)  comp[1]);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}