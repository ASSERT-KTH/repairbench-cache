{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        if (size == 2) {\n            // There's only a separator and one more element\n            Object obj = elementPairs.get(1);\n            PeriodFormatter f = null;\n            if (obj instanceof PeriodFormatter) {\n                f = (PeriodFormatter) obj;\n            } else if (obj instanceof PeriodPrinter || obj instanceof PeriodParser) {\n                Object[] comp = createComposite(elementPairs.subList(1, size));\n                if (notPrinter) {\n                    f = new PeriodFormatter(null, (PeriodParser) comp[1]);\n                } else if (notParser) {\n                    f = new PeriodFormatter((PeriodPrinter) comp[0], null);\n                } else {\n                    f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n                }\n            } else {\n                throw new IllegalStateException(\"Unexpected separator\");\n            }\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else {\n            PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}