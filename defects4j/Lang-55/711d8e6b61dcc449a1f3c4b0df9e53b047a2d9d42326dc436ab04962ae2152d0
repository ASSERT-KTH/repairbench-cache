{
    "generation": "    /**\n     * <p>Stop the stopwatch.</p>\n     *\n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     */\n    public void stop() {\n        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        // If the stopwatch is currently running, we record the current time as the stopTime.\n        // If the stopwatch is suspended, its 'stopTime' field already holds the time at which it was suspended.\n        // This is the correct value for the total time calculation, as time elapsed during suspension\n        // should not be counted. Therefore, we only update stopTime if the stopwatch was running.\n        if (this.runningState == STATE_RUNNING) {\n            stopTime = System.currentTimeMillis();\n        }\n        this.runningState = STATE_STOPPED;\n    }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}