{
    "generation": "    /**\n     * <p>Stop the stopwatch.</p>\n     * \n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     */\n    public void stop() {\n        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        // When stopping a running stopwatch, update stopTime to current time.\n        // However, if the stopwatch is suspended, its 'stopTime' should conceptually\n        // remain the time it was suspended, as any time passed while suspended\n        // should not contribute to the total elapsed time.\n        // The test testLang315 implies that getTime() should return the same value\n        // after suspend() and after stop() if no resume() occurred.\n        // This means stopTime should only be updated if the stopwatch was actively running.\n        if (this.runningState == STATE_RUNNING) {\n            stopTime = System.currentTimeMillis();\n        }\n        this.runningState = STATE_STOPPED;\n    }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}