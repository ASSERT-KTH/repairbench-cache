{
    "generation": "    /**\n     * <p>Stop the stopwatch.</p>\n     * \n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     */\n    public void stop() {\n        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        \n        // The problem in testLang315 is that if the stopwatch is suspended,\n        // stopTime should have been set when suspend() was called,\n        // marking the end of the active running period.\n        // If stop() is called while suspended, stopTime should *not* be updated\n        // to System.currentTimeMillis() as this would include the time spent while suspended.\n        // It should only be updated if the stopwatch was actively running.\n        if (this.runningState == STATE_RUNNING) {\n            stopTime = System.currentTimeMillis();\n        }\n        // If the stopwatch was STATE_SUSPENDED, stopTime would have already been set\n        // by the suspend() method to mark the end of the last running segment.\n        // Therefore, no update to stopTime is needed in this case.\n\n        this.runningState = STATE_STOPPED;\n    }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}