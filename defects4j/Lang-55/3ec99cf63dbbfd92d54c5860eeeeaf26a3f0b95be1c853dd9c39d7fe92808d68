{
    "generation": "    /**\n     * <p>Stop the stopwatch.</p>\n     * \n     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     */\n    public void stop() {\n        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        this.runningState = STATE_STOPPED;\n    }\n\n    /**\n     * <p>Suspend the stopwatch.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not running.\n     */\n    public void suspend() {\n        if(this.runningState != STATE_RUNNING) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        this.runningState = STATE_SUSPENDED;\n    }\n\n    /**\n     * <p>Resume the stopwatch.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not suspended.\n     */\n    public void resume() {\n        if(this.runningState != STATE_SUSPENDED) {\n            throw new IllegalStateException(\"Stopwatch is not suspended. \");\n        }\n        this.runningState = STATE_RUNNING;\n    }\n\n    /**\n     * <p>Restart the stopwatch.</p>\n     *\n     * @throws IllegalStateException if the StopWatch is not stopped.\n     */\n    public void restart() {\n        if(this.runningState != STATE_STOPPED) {\n            throw new IllegalStateException(\"Stopwatch is not stopped. \");\n        }\n        this.runningState = STATE_STOPPED;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}