{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n\n        if (parent.isGetProp() || parent.isArrayLit() || parent.isObjLitKey()) {\n            // Skip if reference is in a property or array\n            continue;\n        }\n\n        if (!isVarOrAssignExprLhs(name)) {\n            // Only rewrite VAR declarations or assignment statements\n            return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // Handle cases where the object is declared without an assignment\n            return true;\n        }\n\n        if (!val.isObjectLit()) {\n            return false;\n        }\n\n        // Check for self-referential assignments\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isGetterDef() || child.isSetterDef()) {\n                // Skip if getters or setters are present\n                return false;\n            }\n\n            Node childVal = child.getFirstChild();\n            for (Reference t : refs) {\n                Node refNode = t.getNode();\n                while (refNode.getParent() != null) {\n                    if (refNode == childVal) {\n                        return false;\n                    }\n                    refNode = refNode.getParent();\n                }\n            }\n        }\n\n        ret = true;\n    }\n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}