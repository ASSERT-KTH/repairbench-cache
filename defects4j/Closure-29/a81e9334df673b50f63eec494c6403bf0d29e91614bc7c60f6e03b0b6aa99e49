{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n    boolean hasNonInlineableAssignments = false;\n    boolean hasSelfReferentialAssignments = false;\n\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            // A call target maybe using the object as a 'this' value.\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n                return false;\n            }\n            continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n            hasNonInlineableAssignments = true;\n            continue;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // A var with no assignment.\n            continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n            hasNonInlineableAssignments = true;\n            continue;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isGetterDef() || child.isSetterDef()) {\n                // ES5 get/set not supported.\n                hasNonInlineableAssignments = true;\n                break;\n            }\n\n            Node childVal = child.getFirstChild();\n            // Check if childVal is the parent of any of the passed in\n            // references, as that is how self-referential assignments\n            // will happen.\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        hasSelfReferentialAssignments = true;\n                        break;\n                    }\n                    refNode = refNode.getParent();\n                }\n                if (hasSelfReferentialAssignments) break;\n            }\n            if (hasSelfReferentialAssignments) break;\n        }\n\n        if (hasNonInlineableAssignments || hasSelfReferentialAssignments) {\n            continue;\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n    }\n\n    // If we found any non-inlineable assignments or self-referential assignments,\n    // we cannot inline the object literals.\n    return !hasNonInlineableAssignments && !hasSelfReferentialAssignments && ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}