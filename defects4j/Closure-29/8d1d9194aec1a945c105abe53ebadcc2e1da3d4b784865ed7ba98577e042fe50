{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      List<Node> vals = new ArrayList<>();\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // Cannot inline if the property reference is indirect.\n          return false;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        vals.add(val);\n      }\n\n      // All assignments must be object literals\n      if (vals.isEmpty()) {\n        return false;\n      }\n\n      // Make sure that the value is not self-referenceable.\n      for (Node val : vals) {\n        // Check each child of the object literal\n        for (Node child = val.getFirstChild(); child != null;\n            child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            // ES5 getter/setters are not supported.\n            return false;\n          }\n\n          Node childVal = child.getFirstChild();\n          if (childVal != null && !childVal.isQmark()) {\n            // Check if any of childVal's parents match any reference's parent\n            for (Reference ref : refs) {\n              Node refParent = ref.getParent().getParent();\n              if (isAncestor(childVal, refParent)) {\n                // Self-referential assignment\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      ret = true;\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}