{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n\n      // Collect all property names ever used on this object (direct GET/SET/ASSIGN/VAR/DELETE/etc).\n      Set<String> propertyNames = new HashSet<>();\n\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n\n          // record the property name\n          String propName = parent.getLastChild().getString();\n          propertyNames.add(propName);\n\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n\n            // Check for references to generic Object prototype properties (e.g., 'toString', 'hasOwnProperty', etc.)\n            // These should NOT be inlined, to avoid breaking prototype access.\n            // This handles issue724. If the property is not assigned in the object literal, bail.\n            if (!isPropertyDefinedByAssignment(refs, propName)) {\n              return false;\n            }\n            // Otherwise, continue; allowed to read e.g. x.toString() as long as object assigns it.\n          }\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it; see above for handling.\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // Accumulate all keys assigned in this object literal.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          propertyNames.add(child.getString());\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n\n      // If any of the properties accessed (by GETPROP, SETPROP etc) were never defined in an assignment,\n      // cannot inline. This prevents inlining if there are accesses to unknown properties (testObject12, testObject10).\n      for (String propName : propertyNames) {\n        if (!isPropertyDefinedByAssignment(refs, propName)) {\n          return false;\n        }\n      }\n\n      return ret;\n    }\n\n    // Helper: Determines if a property is assigned/defined in any object literal assignment in refs.\n    private boolean isPropertyDefinedByAssignment(List<Reference> refs, String propName) {\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node val = ref.getAssignedValue();\n        if (val != null && val.isObjectLit()) {\n          for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.getString().equals(propName)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}