{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n\n          // Do not inline if this is a call like x.y(), since 'this'\n          // may be referenced by y.\n          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // Only allow GETPROP if it's an access to a property defined in\n          // an object literal *assigned to x somewhere in this scope*.\n\n          // Find the assigned object literal for 'x' in this scope, and see if\n          // it actually defines the accessed property.\n          boolean propertyOk = false;\n          String prop = parent.getLastChild().getString();\n\n          // Go through all assignments to x and see if one is an object literal\n          for (Reference assignRef : refs) {\n            Node assignName = assignRef.getNode();\n            Node assignParent = assignRef.getParent();\n            Node assignGrandparent = assignRef.getGrandparent();\n            if (!isVarOrAssignExprLhs(assignName))\n              continue;\n            Node assignVal = assignRef.getAssignedValue();\n            if (assignVal != null && assignVal.isObjectLit()) {\n              for (Node child = assignVal.getFirstChild(); child != null; child = child.getNext()) {\n                if (child.isGetterDef() || child.isSetterDef()) {\n                  continue; // skip, as these are unsupported elsewhere\n                }\n                if (prop.equals(child.getString())) {\n                  propertyOk = true;\n                  break;\n                }\n              }\n            }\n            if (propertyOk)\n              break;\n          }\n\n          if (!propertyOk) {\n            // The property is not in any known assigned object literal.\n            return false;\n          }\n\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}