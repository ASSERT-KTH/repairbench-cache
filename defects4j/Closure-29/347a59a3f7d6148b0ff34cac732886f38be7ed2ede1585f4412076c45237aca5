{
    "generation": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<String> objectProperties = new HashSet<>();\n\n      // Collect properties from all object literals assigned to the variable\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        if (isVarOrAssignExprLhs(name)) {\n          Node val = ref.getAssignedValue();\n          if (val != null && val.isObjectLit()) {\n            for (Node child = val.getFirstChild(); child != null;\n                 child = child.getNext()) {\n              if (child.isGetterDef() || child.isSetterDef()) {\n                return false;\n              }\n              String propName = child.getFirstChild().getString();\n              objectProperties.add(propName);\n            }\n          }\n        }\n      }\n\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          String propName = parent.getLastChild().getString();\n          if (!objectProperties.contains(propName)) {\n            return false;\n          }\n\n          continue;\n        }\n\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          continue;\n        }\n\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Check for self-referential assignments\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          Node childVal = child.getFirstChild();\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}