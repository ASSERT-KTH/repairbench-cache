{
    "generation": "/**\n * Counts the number of direct (full) references to an object.\n * Specifically we check for references of the following type:\n * <pre>\n *   x;\n *   x.fn();\n * </pre>\n */\nprivate boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  // Keep track of all known property names (from object\u2010literals and\n  // from property assignments like x.foo = ...).\n  Set<String> props = new HashSet<>();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Handle any x.y or x.y = ... forms\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n\n      // Detect a call on a property chain (e.g. x.y(), x.y.z(), x.y.apply(...))\n      // by walking up any getProp nodes, then seeing if the next ancestor\n      // is a CALL whose target is that final getProp.\n      Node chain = parent;\n      Node up = gramps;\n      while (up != null && up.isGetProp()) {\n        chain = up;\n        up = up.getParent();\n      }\n      if (up != null && up.isCall() && up.getFirstChild() == chain) {\n        // we can't inline if the property is used as a call target\n        return false;\n      }\n\n      String key = parent.getLastChild().getString();\n      // If this is a property assignment (x.key = ...), record the key\n      if (gramps.isAssign() && gramps.getFirstChild() == parent) {\n        props.add(key);\n        continue;\n      }\n      // Otherwise it's a read of x.key \u2013 bail out if we've never seen it\n      // in an object literal or a prior x.key = ... assignment.\n      if (!props.contains(key)) {\n        return false;\n      }\n      continue;\n    }\n\n    // At this point we must be looking at either a VAR or a simple 'x = ...'\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // \"var x;\" with no initializer \u2013 that's fine\n      continue;\n    }\n    // We only handle object\u2010literal initializers.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n    // Reject ES5 getters/setters and any self\u2010referential fields.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n    // Record all of the keys in this object literal.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      props.add(child.getString());\n    }\n    ret = true;\n  }\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}