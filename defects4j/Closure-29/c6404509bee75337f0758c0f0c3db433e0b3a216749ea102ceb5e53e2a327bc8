{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean sawLiteralAssign = false;\n  boolean ret = false;\n  // Track all property names we've ever defined (via literal or assignment).\n  Set<String> definedProps = new HashSet<>();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      // We're seeing x.foo or x.foo() or x.foo.bar...\n      Preconditions.checkState(parent.getFirstChild() == name);\n\n      // Bail out if any part of this property chain is being called,\n      // since that may bind 'this' to the original object.\n      Node current = parent;\n      while (true) {\n        Node p = current.getParent();\n        if (p == null) {\n          break;\n        }\n        if (p.isCall() && p.getFirstChild() == current) {\n          return false;\n        }\n        if (!p.isGetProp()) {\n          break;\n        }\n        current = p;\n      }\n\n      // Can't use any property before we've seen an object\u2010literal assignment\n      if (!sawLiteralAssign) {\n        return false;\n      }\n\n      String propName = parent.getLastChild().getString();\n      // If this is a set (x.prop = ...), record it. Otherwise it's a get.\n      if (gramps.isAssign() && gramps.getFirstChild() == parent) {\n        definedProps.add(propName);\n      } else {\n        if (!definedProps.contains(propName)) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    // Anything that's not a property access must be a VAR or simple LHS-assign of the object itself.\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    // A bare \"var x;\" is fine.\n    if (val == null) {\n      continue;\n    }\n    // We only inline object literals.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for self\u2010referential values in the literal.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    // We've found a safe object\u2010literal assignment.\n    sawLiteralAssign = true;\n    ret = true;\n    // Add all of its properties to our set.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      definedProps.add(child.getString());\n    }\n  }\n\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}