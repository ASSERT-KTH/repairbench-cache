{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // If the grandparent is an ASSIGN and parent is its LHS, then it's a PUTPROP.\n          // These are allowed as they represent mutations of the object's properties\n          // that can be handled by the inliner.\n          if (gramps.isAssign() && gramps.getFirstChild() == parent) {\n              continue;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          //\n          // The bug is that the code didn't actually \"bail out\" for prototype properties.\n          String propertyName = parent.getSecondChild().getString();\n          if (NodeUtil.isBuiltinProperty(propertyName)) {\n            // Accessing builtin properties (like toString, valueOf) on a plain\n            // object literal can lead to runtime errors if inlined, because\n            // the inlined properties don't inherit from Object.prototype.\n            return false;\n          }\n\n          // For all other GETPROP references (not 'this' binding, not PUTPROP, not a builtin property),\n          // 'continue' means they are allowed. This supports cases like 'x.a' (where 'a' is a defined property)\n          // and 'x.undefinedProp' (where 'undefinedProp' is not builtin, but also not defined in literal).\n          // The latter case might still be a behavioral change, but addressing 'builtin' properties\n          // is the direct fix for the specified \"blind spot\".\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        // This check applies to references to the object variable 'name' itself.\n        if (!NodeUtil.isVarOrAssignExprLhs(name)) {\n           // For direct references to the variable 'x' (e.g., 'f(x)'),\n           // or other non-VAR/ASSIGN uses of 'x', and not handled by 'GETPROP' above,\n           // we cannot inline.\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment. (e.g., `var x;`)\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}