{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     *\n     * This method returns true if *all* uses are of the proper shape\n     * (var/assign initializations/reads and direct property access), and\n     * (unlike before) does *not* short-circuit if it sees a getProp\n     * to a property not defined on the latest object literal assignment!\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<String> allDefinedProps = null;\n\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false; // Can't inline if used as 'this'\n          }\n          // Otherwise, getProp access is OK, just skip.\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Build set of prop names for latest definition\n        Set<String> curDefinedProps = new HashSet<>();\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n          curDefinedProps.add(child.getString());\n        }\n        // Track the latest assignment's properties\n        allDefinedProps = curDefinedProps;\n\n        // Make sure that the value is not self-referential.\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n          Node childVal = child.getFirstChild();\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        ret = true;\n      }\n\n      // Issue724 fix: if allDefinedProps is null, then there was no object literal assignment,\n      // so don't inline a plain {} assignment unless all getProp accesses are to generic properties!\n      if (allDefinedProps == null) {\n        // There was never an object literal assignment\n        // Only allow inlining if there are no getProp uses, or all getProp uses\n        // are to well-known vanilla Object props (none in our inlining rules).\n        for (Reference ref : refs) {\n          Node name = ref.getNode();\n          Node parent = ref.getParent();\n          Node gramps = ref.getGrandparent();\n          if (parent.isGetProp()) {\n            return false;\n          }\n        }\n      }\n      // Don't inline objects that use prototype properties or\n      // properties not present in the latest object literal on assignment!\n      if (allDefinedProps != null) {\n        for (Reference ref : refs) {\n          Node name = ref.getNode();\n          Node parent = ref.getParent();\n          if (parent.isGetProp()) {\n            Node prop = parent.getLastChild();\n            if (prop.isString()) {\n              String propName = prop.getString();\n              if (!allDefinedProps.contains(propName)) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}