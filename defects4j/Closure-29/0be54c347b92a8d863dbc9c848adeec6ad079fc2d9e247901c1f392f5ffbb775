{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = true; // Assume it's inlinable unless proven otherwise.\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Check for indirect references which are not function calls.\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            // If the grandparent is a call, this is a function call, so don't inline.\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n                ret = false;\n            } else {\n                // Skip further checks for this reference since it's an indirect non-call.\n                continue;\n            }\n        }\n\n        // Ensure the reference is part of a variable declaration or assignment.\n        if (!isVarOrAssignExprLhs(name)) {\n            ret = false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // No assigned value implies potential undefined.\n            ret = false;\n            continue;\n        }\n\n        // Only consider object literals for inlining.\n        if (!val.isObjectLit()) {\n            ret = false;\n            continue;\n        }\n\n        // Check each property for self-references or unsupported features.\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isGetterDef() || child.isSetterDef()) {\n                // Getters/setters are not supported for inlining.\n                ret = false;\n                break;\n            }\n\n            Node childVal = child.getFirstChild();\n            // Check if any reference is self-referential.\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        ret = false;\n                        break;\n                    }\n                    refNode = refNode.getParent();\n                }\n                if (!ret) {\n                    break;\n                }\n            }\n            if (!ret) {\n                break;\n            }\n        }\n    }\n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}