{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean sawObjectLiteral = false;\n  // Track the set of known property names from object literals\n  Set<String> props = new HashSet<>();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      // parent.getFirstChild() is the object reference\n      Preconditions.checkState(parent.getFirstChild() == name);\n\n      // Bail out on method calls (x.y()), since 'this' might be used.\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // If this GETPROP is on the left\u2010hand side of an assignment (x.prop = \u2026),\n      // record that property as now known.\n      if (NodeUtil.isLhsOfAssign(parent)) {\n        String propName = parent.getLastChild().getString();\n        props.add(propName);\n        continue;\n      }\n\n      // Otherwise this is a read of x.prop; bail if we haven't seen it defined.\n      String propName = parent.getLastChild().getString();\n      if (!props.contains(propName)) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignments to the variable itself.\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no initializer; just skip.\n      continue;\n    }\n\n    // We only inline object\u2010literal assignments here.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Record that we've seen an object literal, and collect its keys.\n    sawObjectLiteral = true;\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      // ES5 getters/setters not supported.\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n      String key = child.getString();\n      props.add(key);\n\n      // Disallow simple self\u2010references like x = { a: x.a }.\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n  }\n  return sawObjectLiteral;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}