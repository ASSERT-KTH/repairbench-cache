{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          // However, we need to allow for cases where properties are added later.\n          //\n          // So we'll only bail out if the property access is on the RHS of an assignment\n          // or in a call position, not when it's being assigned to.\n\n          boolean foundPropInAssignmentOrCall = false;\n          Node current = gramps;\n          while (current != null && current.getParent() != null) {\n            if (current.isExprResult()) {\n              current = current.getParent();\n              if (current != null && current.isAssign()) {\n                if (current.getSecondChild() == gramps) {\n                  // Property is on RHS of assignment\n                  foundPropInAssignmentOrCall = true;\n                  break;\n                }\n              } else if (current != null && current.isCall()) {\n                // Property is in call position\n                foundPropInAssignmentOrCall = true;\n                break;\n              }\n            }\n            current = current.getParent();\n          }\n\n          if (foundPropInAssignmentOrCall) {\n            return false;\n          }\n\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        boolean hasGetterOrSetter = false;\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            // ES5 get/set not supported.\n            hasGetterOrSetter = true;\n            break;\n          }\n        }\n\n        if (hasGetterOrSetter) {\n          return false;\n        }\n\n        // Check for self-referential assignments\n        boolean hasSelfReference = false;\n        outer: for (Node child = val.getFirstChild(); child != null;\n                child = child.getNext()) {\n          Node childVal = child.getFirstChild();\n          if (childVal == null) continue;\n\n          // Walk up the tree from the childValue to see if it references any of the refs\n          List<Node> nodesToCheck = new ArrayList<>();\n          nodesToCheck.add(childVal);\n\n          while (!nodesToCheck.isEmpty()) {\n            Node currentNode = nodesToCheck.remove(0);\n            // Check if currentNode is or contains any name from refs\n            for (Reference t : refs) {\n              Node refNode = t.getNode();\n              if (currentNode == refNode) {\n                hasSelfReference = true;\n                break outer;\n              }\n            }\n\n            // Add children to check list\n            for (Node c = currentNode.getFirstChild();\n                 c != null;\n                 c = c.getNext()) {\n              nodesToCheck.add(c);\n            }\n          }\n        }\n\n        if (hasSelfReference) {\n          return false;\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}