{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      Set<String> allDefinedProperties = new HashSet<>();\n      boolean foundObjectLiteralAssignment = false;\n\n      // First pass: Collect all properties defined by object literal assignments\n      // and perform initial checks (e.g., invalid assignment types, self-references, getters/setters).\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n\n        // Only rewrite VAR declarations or simple assignment statements\n        // Direct references (like `x;`) are handled by `val == null` below.\n        if (parent.isExprResult() || parent.isForIn() || parent.isParamList() || parent.isNew()) {\n            // These are usage contexts, not assignments or declarations\n            continue;\n        }\n\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment (e.g., `var x;`) or a reference that is not an assignment.\n          // This pass focuses on collecting properties from assignments.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        foundObjectLiteralAssignment = true;\n\n        // Make sure that the value is not self-referential and doesn't use ES5 getters/setters.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          // Collect property names defined in this object literal.\n          if (child.isStringKey()) {\n            allDefinedProperties.add(child.getString());\n          }\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n      }\n\n      // If no object literal assignment was found at all, it's not a candidate for object literal inlining.\n      // (e.g., `var x; f(x.a)` or `var x = 1;`)\n      if (!foundObjectLiteralAssignment) {\n        return false;\n      }\n\n      // Second pass: Check all references for problematic usage, especially GetProp accesses.\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target may be using the object as a 'this' value.\n          // Inlining should be prevented for `x.fn()` calls where `x.fn` is the target.\n          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // This is the core fix for the \"blind spot\":\n          // If a property is accessed (x.prop) and it's not a call target,\n          // we must ensure that 'prop' was explicitly defined in one of the\n          // object literal assignments. If not, it means the access relies on\n          // the prototype chain (e.g., Object.prototype.toString) or an\n          // undefined property, which prevents safe inlining.\n          String propertyName = parent.getSecondChild().getString(); // The name of the property being accessed (e.g., \"y\" in x.y)\n          if (!allDefinedProperties.contains(propertyName)) {\n            return false;\n          }\n        }\n      }\n\n      // All checks passed. The object appears to be inlinable.\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}