{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Skip if the reference is part of a property access (e.g., x.y)\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // If it's a call like x.y(), check if 'this' is used\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only process VAR declarations or assignment expressions\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // Unassigned variable, skip further checks\n      continue;\n    }\n\n    // Ensure the value is an object literal\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for self-references in the object literal\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // Skip if there are getters or setters\n        return false;\n      }\n\n      // Traverse child nodes to find any self-references\n      Node current = child.getFirstChild();\n      while (current != null && !NodeUtil.isStatementBlock(current)) {\n        // Check if any reference is part of a cycle (self-reference)\n        if (current == ref.getNode()) {\n          return false;\n        }\n        current = current.getParent();\n      }\n    }\n\n    // Mark as acceptable for inlining\n    ret = true;\n  }\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}