{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      continue;\n    }\n\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    for (Reference other : refs) {\n      if (other == ref) break;\n      if (otheresisInDifferentBlock(ref)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nprivate boolean otheresisInDifferentBlock(Reference a, Reference b) {\n  Node aNode = a.getNode();\n  Node bNode = b.getNode();\n  while (!NodeUtil.isStatementBlock(aNode)) {\n    aNode = aNode.getParent();\n  }\n  while (!NodeUtil.isStatementBlock(bNode)) {\n    bNode = bNode.getParent();\n  }\n  return aNode != bNode;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}