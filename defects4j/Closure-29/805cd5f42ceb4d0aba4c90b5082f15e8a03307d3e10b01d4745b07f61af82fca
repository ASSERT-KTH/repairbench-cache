{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  // Have we seen at least one object\u2010literal assignment?\n  boolean seenAssign = false;\n  // The union of all property names ever written by literal assignments or\n  // by direct property sets (obj.prop = ...).\n  Set<String> props = new LinkedHashSet<String>();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Handle obj.prop references (gets or sets) specially.\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // If it's being called, we can't inline (because of 'this' binding).\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      String propName = parent.getLastChild().getString();\n      // A direct property assignment, e.g. obj.prop = value\n      if (gramps.isAssign() && gramps.getFirstChild() == parent) {\n        props.add(propName);\n        continue;\n      }\n      // A property read before any object-literal assignment is bad.\n      if (!seenAssign) {\n        return false;\n      }\n      // We can only read properties we know about.\n      if (!props.contains(propName)) {\n        return false;\n      }\n      continue;\n    }\n\n    // Otherwise it must be a VAR declaration or a simple assignment to the var.\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    // Check if there is an initializing value.\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // `var x;` with no init is fine.\n      continue;\n    }\n\n    // We only inline object-literal assignments.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Disallow ES5 getters/setters or self-referential values.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    // Record all the property names from this literal into our union set.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      props.add(child.getString());\n    }\n    seenAssign = true;\n  }\n\n  return seenAssign;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}