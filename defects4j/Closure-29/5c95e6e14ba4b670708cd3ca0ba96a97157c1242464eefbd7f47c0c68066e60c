{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProps = new HashSet<String>();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Handle property references and assignments\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // Bail out on method calls, since 'this' may be used\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      String prop = parent.getLastChild().getString();\n      // Record property if it's an assignment (x.prop = ...)\n      if (gramps.isAssign() && gramps.getFirstChild() == parent) {\n        validProps.add(prop);\n        continue;\n      }\n      // Otherwise, this is a read; it must have been recorded\n      if (!validProps.contains(prop)) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no initializer.\n      continue;\n    }\n\n    // We only inline object literal assignments.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n    // Don't inline empty object literals (e.g., {}).\n    if (val.getFirstChild() == null) {\n      return false;\n    }\n\n    // Record all literal property names.\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // ES5 getters/setters not supported.\n        return false;\n      }\n      validProps.add(child.getString());\n    }\n\n    // Disallow direct self-referential assignments, e.g., x = { b: x.a }\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    // We've seen a valid object-literal assignment.\n    ret = true;\n  }\n\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}