{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  // Track all properties that have been defined (either in the object\n  // literal or by x.prop = ... assignments) in insertion order.\n  Set<String> props = new java.util.LinkedHashSet<>();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Handle property accesses and assignments: x.prop or x.prop = \u2026\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n\n      // Bail out on direct calls like x.fn()\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // x.prop = ... \u2192 record this new property\n      if (gramps.isAssign() && gramps.getFirstChild() == parent) {\n        String prop = parent.getLastChild().getString();\n        props.add(prop);\n        continue;\n      }\n\n      // x.prop (read) \u2192 must have been defined already\n      String prop = parent.getLastChild().getString();\n      if (!props.contains(prop)) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only allow var-declarations or simple assignments to the variable itself\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    // A var with no initializer is fine, but doesn't define any props\n    if (val == null) {\n      continue;\n    }\n\n    // We only inline object literal assignments\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Record all properties in the literal, bail on ES5 getters/setters\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n      props.add(child.getString());\n    }\n\n    // Disallow self-referential properties (e.g. x = { a: x.b })\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    // We saw a valid object-literal assignment\n    ret = true;\n  }\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}