{
    "generation": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<String> objectProperties = new HashSet<>();\n\n      // Collect all properties from object literals\n      for (Reference ref : refs) {\n          Node name = ref.getNode();\n          if (isVarOrAssignExprLhs(name)) {\n              Node val = ref.getAssignedValue();\n              if (val != null && val.isObjectLit()) {\n                  for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n                      if (child.isStringKey()) {\n                          objectProperties.add(child.getString());\n                      }\n                  }\n              }\n          }\n      }\n\n      for (Reference ref : refs) {\n          Node name = ref.getNode();\n          Node parent = ref.getParent();\n          Node gramps = ref.getGrandparent();\n\n          if (parent.isGetProp()) {\n              Preconditions.checkState(parent.getFirstChild() == name);\n              // Check if this GetProp is part of a call target anywhere in the ancestor chain\n              Node current = parent;\n              boolean isCallTarget = false;\n              while (current != null) {\n                  Node currentParent = current.getParent();\n                  if (currentParent != null && currentParent.isCall() && currentParent.getFirstChild() == current) {\n                      isCallTarget = true;\n                      break;\n                  }\n                  current = currentParent;\n              }\n              if (isCallTarget) {\n                  return false;\n              }\n\n              // Check if the property is defined in the object literal\n              String propName = parent.getLastChild().getString();\n              if (!objectProperties.contains(propName)) {\n                  return false;\n              }\n\n              continue;\n          }\n\n          if (!isVarOrAssignExprLhs(name)) {\n              return false;\n          }\n\n          Node val = ref.getAssignedValue();\n          if (val == null) {\n              continue;\n          }\n\n          if (!val.isObjectLit()) {\n              return false;\n          }\n\n          for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n              if (child.isGetterDef() || child.isSetterDef()) {\n                  return false;\n              }\n\n              Node childVal = child.getFirstChild();\n              for (Reference t : refs) {\n                  Node refNode = t.getParent();\n                  while (!NodeUtil.isStatementBlock(refNode)) {\n                      if (refNode == childVal) {\n                          return false;\n                      }\n                      refNode = refNode.getParent();\n                  }\n              }\n          }\n\n          ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}