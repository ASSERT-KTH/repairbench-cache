{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<Node> assignedValues = new HashSet<>();\n      Set<String> propertyNames = new HashSet<>();\n\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // Collect property names being accessed\n          String propName = parent.getLastChild().getString();\n          propertyNames.add(propName);\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Store the assigned object literal\n        assignedValues.add(val);\n\n        // Collect all property names from the object literal\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n          String propName = child.getString();\n          propertyNames.add(propName);\n        }\n      }\n\n      // Now check for any references to properties that weren't in the original object\n      // and weren't added through subsequent assignments\n      for (Reference ref : refs) {\n        Node parent = ref.getParent();\n        if (parent.isGetProp()) {\n          String propName = parent.getLastChild().getString();\n          if (!propertyNames.contains(propName)) {\n            // Property wasn't in the original object or any subsequent assignment\n            return false;\n          }\n        }\n      }\n\n      // Check for self-referential assignments across the entire list of object literals\n      for (Node val : assignedValues) {\n        if (val.isObjectLit()) {\n          for (Node child = val.getFirstChild(); child != null;\n               child = child.getNext()) {\n            Node childVal = child.getFirstChild();\n            // Check if childVal is the parent of any of the passed in references\n            for (Reference t : refs) {\n              Node refNode = t.getParent();\n              while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n                if (refNode == childVal) {\n                  // There's a self-referential assignment\n                  return false;\n                }\n                refNode = refNode.getParent();\n              }\n            }\n          }\n        }\n      }\n\n      // We have found acceptable object literal assignments.\n      return !assignedValues.isEmpty();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}