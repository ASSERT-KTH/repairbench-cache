{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            // A call target maybe using the object as a 'this' value.\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n                return false;\n            }\n\n            // Proceed to check other references\n            continue;\n        }\n\n        if (!isVarOrAssignExprLhs(name)) {\n            // Only rewrite VAR declarations or simple assignment statements\n            return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // A var with no assignment.\n            continue;\n        }\n\n        if (!val.isObjectLit()) {\n            // We're looking for object literal assignments only.\n            return false;\n        }\n\n        // Check for self-references in the object literal\n        boolean hasSelfReference = false;\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isGetterDef() || child.isSetterDef()) {\n                // ES5 get/set not supported.\n                return false;\n            }\n\n            Node childVal = child.getFirstChild();\n            // Check each reference to see if it refers back to the object being assigned\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        // Self-reference detected\n                        hasSelfReference = true;\n                        break;\n                    }\n                    refNode = refNode.getParent();\n                }\n                if (hasSelfReference) break;\n            }\n            if (hasSelfReference) break;\n        }\n        if (hasSelfReference) {\n            return false;\n        }\n\n        ret = true;\n    }\n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}