{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target may be using the object as a 'this' value.\n          // This is generally not inlinable.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          //\n          // The original code used `continue` here, which means it *didn't* bail out,\n          // leading to issues like `getType.toString` or `a.y2` being inlined incorrectly.\n          //\n          // We need to distinguish between property reads (x.y) and property assignments (x.y = z).\n          // Property assignments can be handled by the inliner (creating a new temp variable).\n          // Property reads, if the property is not guaranteed to be directly on the object,\n          // can lead to incorrect prototype lookups after inlining.\n          if (gramps.isAssign() && gramps.getFirstChild() == parent ||\n              gramps.isInc() || gramps.isDec()) {\n            // This is a write/mutation to a property (e.g., `x.prop = val`, `x.prop++`).\n            // These are handled by the inliner by creating new temporary variables for the property.\n            // So, this specific type of reference is acceptable.\n            continue;\n          } else {\n            // This is a read access (e.g., `x.prop` or `x.prop()`).\n            // Since this function doesn't have knowledge of all properties defined on the object,\n            // and the inliner assumes direct properties, accessing properties that might\n            // come from the prototype chain (like `toString` or undeclared properties)\n            // makes the object not inlinable by this pass.\n            return false;\n          }\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        // References to the object that are not direct assignments or declarations\n        // (and not the special GetProp cases handled above) disqualify inlining.\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment, e.g., `var x;`. This is an acceptable type of reference.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        // If the variable is assigned something other than an object literal,\n        // it cannot be inlined by this pass.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // If we reach here, we've found an acceptable object literal assignment.\n        ret = true;\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported for inlining.\n            return false;\n          }\n\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n      }\n      // Return true only if at least one acceptable object literal assignment was found,\n      // and no disqualifying references were encountered throughout the loop.\n      return ret;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}