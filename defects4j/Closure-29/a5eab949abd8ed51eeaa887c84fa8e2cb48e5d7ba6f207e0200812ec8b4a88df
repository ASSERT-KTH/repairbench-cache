{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-referential.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is referenced in any of the passed in\n          // references\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (refNode != null) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // Check if the object is later modified\n        for (Reference t : refs) {\n          Node refNode = t.getNode();\n          Node parentNode = t.getParent();\n          if (parentNode.isAssign()) {\n            // Assignment to the object\n            if (parentNode.getFirstChild() == refNode) {\n              return false;\n            }\n          } else if (parentNode.isGetProp() && parentNode.getFirstChild() == refNode) {\n            // Property assignment\n            if (t.getGrandparent() != null && t.getGrandparent().isAssign()) {\n              Node assignNode = t.getGrandparent();\n              if (assignNode.getFirstChild() == parentNode) {\n                return false;\n              }\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret && !refs.isEmpty();  // Make sure there's at least one reference\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}