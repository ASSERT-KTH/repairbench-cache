{
    "generation": "// in com.fasterxml.jackson.databind.type.TypeFactory\n@Override\nprotected JavaType _fromClass(Class<?> cls, TypeBindings bindings, ClassStack parent) {\n    // 1) recursion\u2010detection: see if we are already in the middle of\n    //    resolving exactly this class\n    ClassStack.IncompleteRecursion rec = ClassStack.find(parent, cls);\n    if (rec != null) {\n        return rec.type;\n    }\n\n    // 2) cache lookup\n    TypeKey key = new TypeKey(cls, bindings);\n    JavaType cached = _typeCache.get(key);\n    if (cached != null) {\n        return cached;\n    }\n\n    // 3) array handling\n    if (cls.isArray()) {\n        JavaType comp = _fromClass(cls.getComponentType(),\n                                  EMPTY_BINDINGS,\n                                  parent);\n        return ArrayType.construct(comp, cls.getGenericComponentType());\n    }\n\n    // 4) create the \"placeholder\" for this type, register it for recursion\n    SimpleType result = new SimpleType(cls, bindings, null, null);\n    ClassStack.IncompleteRecursion newRec = new ClassStack.IncompleteRecursion(parent, cls);\n    newRec.type = result;\n    _incompleteRecursions.add(newRec);\n\n    // 5) resolve super\u2010class\n    Class<?> superCls = cls.getSuperclass();\n    if (superCls != null) {\n        JavaType superType = _fromClass(superCls, EMPTY_BINDINGS, newRec);\n        result.setSuperClass(superType);\n    }\n\n    // 6) resolve any interfaces\n    Class<?>[] interfaces = cls.getInterfaces();\n    if (interfaces != null && interfaces.length > 0) {\n        JavaType[] intTypes = new JavaType[interfaces.length];\n        for (int i = 0; i < interfaces.length; i++) {\n            intTypes[i] = _fromClass(interfaces[i], EMPTY_BINDINGS, newRec);\n        }\n        result.setSuperInterfaces(intTypes);\n    }\n\n    // 7) done with recursion, cache and return\n    _incompleteRecursions.remove(newRec);\n    _typeCache.put(key, result);\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}