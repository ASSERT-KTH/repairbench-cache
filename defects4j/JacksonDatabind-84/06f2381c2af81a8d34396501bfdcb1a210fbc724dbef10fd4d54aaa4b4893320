{
    "generation": "public JavaType constructType(Type type) {\n    if (type instanceof Class) {\n        Class<?> clazz = (Class<?>) type;\n        // Check cache first\n        JavaType cachedType = _typeCache.get(clazz);\n        if (cachedType != null) {\n            return cachedType;\n        }\n        // Resolve superclass using the cache\n        Class<?> superClass = clazz.getSuperclass();\n        JavaType superType = (superClass == null || superClass == Object.class) \n            ? null \n            : constructType(superClass);\n        // Create the JavaType with resolved supertype\n        JavaType newType = JavaType._fromClass(clazz, superType);\n        _typeCache.put(clazz, newType);\n        return newType;\n    }\n    // Handle other types as before\n    return _fromType(null, type, TypeBindings.emptyBindings());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}