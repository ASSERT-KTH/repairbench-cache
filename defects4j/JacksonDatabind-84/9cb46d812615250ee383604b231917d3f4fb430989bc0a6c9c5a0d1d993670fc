{
    "generation": "package com.fasterxml.jackson.databind.type;\n\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.type.impl.TypeFactoryImpl;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TypeFactory {\n\n    private static final TypeFactory DEFAULT_INSTANCE = new TypeFactoryImpl();\n\n    private final Map<Class<?>, JavaType> typeCache = new HashMap<>();\n\n    public static TypeFactory defaultInstance() {\n        return DEFAULT_INSTANCE;\n    }\n\n    public JavaType constructType(Class<?> rawClass) {\n        if (typeCache.containsKey(rawClass)) {\n            return typeCache.get(rawClass);\n        }\n        JavaType javaType = new TypeFactoryImpl().constructFromRaw(rawClass, null);\n        typeCache.put(rawClass, javaType);\n        return javaType;\n    }\n\n    public JavaType constructType(Class<?> rawClass, JavaType baseType) {\n        if (typeCache.containsKey(rawClass)) {\n            return typeCache.get(rawClass);\n        }\n        JavaType javaType = new TypeFactoryImpl().constructFromRaw(rawClass, baseType);\n        typeCache.put(rawClass, javaType);\n        return javaType;\n    }\n\n    private static class TypeFactoryImpl extends TypeFactory {\n        public JavaType constructFromRaw(Class<?> rawClass, JavaType baseType) {\n            if (baseType == null) {\n                return constructUnsafe(rawClass);\n            }\n            return constructUnsafe(rawClass, baseType);\n        }\n\n        public JavaType constructUnsafe(Class<?> rawClass) {\n            // Implementation to construct JavaType from raw class\n            return new JavaTypeImpl(rawClass);\n        }\n\n        public JavaType constructUnsafe(Class<?> rawClass, JavaType baseType) {\n            // Implementation to construct JavaType from raw class and base type\n            return new JavaTypeImpl(rawClass, baseType);\n        }\n    }\n\n    private static class JavaTypeImpl extends JavaType {\n        private final Class<?> rawClass;\n        private final JavaType baseType;\n\n        public JavaTypeImpl(Class<?> rawClass) {\n            this.rawClass = rawClass;\n            this.baseType = null;\n        }\n\n        public JavaTypeImpl(Class<?> rawClass, JavaType baseType) {\n            this.rawClass = rawClass;\n            this.baseType = baseType;\n        }\n\n        // Other necessary methods and fields\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}