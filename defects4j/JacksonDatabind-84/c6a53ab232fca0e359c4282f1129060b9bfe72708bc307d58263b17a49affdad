{
    "generation": "@Override\npublic JavaType constructType(Type type, TypeBindings bindings) {\n    JavaType result = _typeCache.get(type);\n    if (result != null) {\n        // ensure bindings propagation if missing\n        if (result.getBindings().isEmpty() && bindings != null && !bindings.isEmpty()) {\n            result = result.withBindings(bindings);\n        }\n        return result;\n    }\n\n    // Resolve the type, caching recursive references early\n    if (type instanceof Class<?>) {\n        result = _fromClass(null, (Class<?>) type, EMPTY_BINDINGS);\n    } else if (type instanceof ParameterizedType) {\n        result = _fromParamType(null, (ParameterizedType) type, EMPTY_BINDINGS);\n    } else if (type instanceof GenericArrayType) {\n        result = _fromArrayType(null, (GenericArrayType) type, EMPTY_BINDINGS);\n    } else if (type instanceof TypeVariable<?>) {\n        result = _fromVariable(null, (TypeVariable<?>) type, bindings);\n    } else if (type instanceof WildcardType) {\n        result = _fromWildcard(null, (WildcardType) type, bindings);\n    } else {\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + type.toString());\n    }\n\n    _typeCache.put(type, result);\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}