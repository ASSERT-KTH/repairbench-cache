{
    "generation": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\n\nimport java.io.IOException;\n\npublic class TestTypeFactoryWithRecursiveTypes {\n\n    static class Base {\n        public int base = 1;\n\n        public int getBase() {\n            return base;\n        }\n    }\n\n    static class Sub extends Base {\n        public int sub = 2;\n\n        public int getSub() {\n            return sub;\n        }\n    }\n\n    private ObjectMapper objectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        return mapper;\n    }\n\n    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {\n        TypeFactory tf = TypeFactory.defaultInstance();\n        tf.constructType(Base.class);\n        tf.constructType(Sub.class);\n        Sub sub = new Sub();\n        String serialized = objectMapper().writeValueAsString(sub);\n        assertEquals(\"{\\\"base\\\":1,\\\"sub\\\":2}\", serialized);\n    }\n\n    // Helper class and method from the original test, included for context.\n    static class TypeFactory {\n        private static final TypeFactory instance = new TypeFactory();\n\n        public static TypeFactory defaultInstance() {\n            return instance;\n        }\n\n        public com.fasterxml.jackson.databind.JavaType constructType(Class<?> cls) {\n            return com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance().constructType(cls);\n        }\n    }\n\n    private void assertEquals(String expected, String serialized) {\n        if (!expected.equals(serialized)) {\n            throw new junit.framework.ComparisonFailure(\"expected:<\" + expected + \"> but was:<\" + serialized + \">\", expected, serialized);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}