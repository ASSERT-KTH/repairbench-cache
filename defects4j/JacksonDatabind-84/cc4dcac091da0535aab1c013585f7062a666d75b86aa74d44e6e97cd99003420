{
    "generation": "// In TypeFactory.java, replace the \u201csimple\u2010type\u201d branch in _fromClass so that we only cache\n// truly trivial types (no generics, no super\u2010class, no interfaces), and otherwise always\n// pass the computed superClass/interfaces into the new SimpleType:\n\n@Override\nprotected JavaType _fromClass(Class<?> raw, TypeBindings bindings, ClassStack context) {\n    // 1) handle arrays as before\n    if (raw.isArray()) {\n        JavaType comp = _fromAny(raw.getComponentType(), context);\n        return ArrayType.construct(comp, /*valueHandler*/ null, /*typeHandler*/ null, _typeCache);\n    }\n    // 2) compute super\u2010class\n    JavaType superClass = null;\n    Type genericSuper = raw.getGenericSuperclass();\n    if (genericSuper != null) {\n        superClass = _fromAny(genericSuper, context);\n    }\n    // 3) compute interfaces\n    Type[] genericIfaces = raw.getGenericInterfaces();\n    JavaType[] interfaces;\n    if (genericIfaces == null || genericIfaces.length == 0) {\n        interfaces = NO_TYPES;\n    } else {\n        interfaces = new JavaType[genericIfaces.length];\n        for (int i = 0; i < genericIfaces.length; i++) {\n            interfaces[i] = _fromAny(genericIfaces[i], context);\n        }\n    }\n    // 4) only cache absolutely trivial types (no generics, no super, no interfaces)\n    if (bindings.isEmpty() && superClass == null && interfaces.length == 0) {\n        ClassKey key = new ClassKey(raw);\n        synchronized (_typeCache) {\n            SimpleType cached = (SimpleType) _typeCache.get(key);\n            if (cached != null) {\n                return cached;\n            }\n            SimpleType t = new SimpleType(raw, EMPTY_BINDINGS, null, NO_TYPES, /*valueHandler*/ null);\n            _typeCache.put(key, t);\n            return t;\n        }\n    }\n    // 5) otherwise include the computed superClass and interfaces\n    return new SimpleType(raw, bindings, superClass, interfaces, /*valueHandler*/ null);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}