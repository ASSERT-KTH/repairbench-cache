{
    "generation": "/**\n * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n * Note that the resulting expression will always evaluate to\n * true, as would the x = {...} expression.\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)),\n               value));\n    all.remove(var);\n  }\n\n  // TODO(user): Better source information.\n  for (String var : all) {\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)),\n               NodeUtil.newUndefinedNode(null)));\n  }\n\n  // All assignments evaluate to true, so make sure that the\n  // expr statement evaluates to true in case it matters.\n  nodes.add(new Node(Token.TRUE));\n\n  // Special-case empty object literals (no real assignments)\n  Node replaceNode = ref.getParent();\n  if (nodes.size() == 1) {\n    if (replaceNode.getType() == Token.VAR) {\n      // drop the entire var-declaration\n      replaceNode.getParent().removeChild(replaceNode);\n    } else {\n      // replace just the assignment with `true`\n      Node trueLit = new Node(Token.TRUE);\n      trueLit.copyInformationFromForTree(replaceNode);\n      replaceNode.getParent().replaceChild(replaceNode, trueLit);\n    }\n    return;\n  }\n\n  // Join these using COMMA.  A COMMA node must have 2 children, so we\n  // create a tree. In the tree the first child be the COMMA to match\n  // the parser, otherwise tree equality tests fail.\n  nodes = Lists.reverse(nodes);\n  Node replacement = new Node(Token.COMMA);\n  Node cur = replacement;\n  int i;\n  for (i = 0; i < nodes.size() - 2; i++) {\n    cur.addChildToFront(nodes.get(i));\n    Node t = new Node(Token.COMMA);\n    cur.addChildToFront(t);\n    cur = t;\n  }\n  cur.addChildToFront(nodes.get(i));\n  cur.addChildToFront(nodes.get(i + 1));\n\n  replacement.copyInformationFromForTree(replaceNode);\n\n  if (replaceNode.getType() == Token.VAR) {\n    replaceNode.getParent().replaceChild(\n        replaceNode, NodeUtil.newExpr(replacement));\n  } else {\n    replaceNode.getParent().replaceChild(replaceNode, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}