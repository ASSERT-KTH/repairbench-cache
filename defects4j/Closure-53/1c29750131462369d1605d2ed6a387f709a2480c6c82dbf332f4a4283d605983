{
    "generation": "/**\n * Replaces an assignment like x = {...} with a comma\u2010expression that\n * carries out any side\u2010effectful assignments, and then yields true.\n * In the case of a variable declaration initializer, if no side effects\n * occur (i.e. the object literal is empty) the assignment is removed.\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  // For each property in the object literal, generate an assignment.\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String prop = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(prop)),\n                       value));\n    all.remove(prop);\n  }\n  // For any variables that did not appear in the literal,\n  // assign them undefined.\n  for (String prop : all) {\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(prop)),\n                       NodeUtil.newUndefinedNode(null)));\n  }\n  // All assignments evaluate to true. Append a TRUE so that the entire\n  // expression has the same value as the original assignment.\n  nodes.add(new Node(Token.TRUE));\n\n  // If there is only the TRUE literal then there is no side effect.\n  // In an assignment expression used as a var initializer, we want to remove\n  // such a degenerate assignment entirely.\n  Node replacement;\n  if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else {\n    // Build a comma chain. A COMMA node must have 2 children,\n    // so we build the tree by reversing the list.\n    nodes = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    for (i = 0; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n  replacement.copyInformationFromForTree(ref.getParent());\n\n  // If the assignment is part of a variable declaration, then\n  // if the replacement is trivial (only a TRUE literal), remove it;\n  // otherwise wrap it in an expression statement.\n  Node replace = ref.getParent();\n  if (replace.getType() == Token.VAR) {\n    if (replacement.getType() == Token.TRUE) {\n      // No side effects, so we can remove the initializer.\n      replace.getParent().removeChild(replace);\n    } else {\n      replace.getParent().replaceChild(\n          replace, NodeUtil.newExpr(replacement));\n    }\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}