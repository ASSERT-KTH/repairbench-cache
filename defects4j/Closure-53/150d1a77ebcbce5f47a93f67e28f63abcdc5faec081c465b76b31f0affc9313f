{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // If there are no properties to inline, just remove the var or\n  // replace the assignment with a bare `true` literal.\n  if (varmap.isEmpty()) {\n    Node replace = ref.getParent();\n    if (replace.getType() == Token.VAR) {\n      // Drop the entire var-declaration statement.\n      replace.getParent().removeChild(replace);\n    } else {\n      // Replace the expression-statement with `true`.\n      Node trueNode = new Node(Token.TRUE);\n      trueNode.copyInformationFromForTree(replace);\n      replace.getParent().replaceChild(replace, trueNode);\n    }\n    return;\n  }\n\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n        new Node(Token.ASSIGN,\n                 Node.newString(Token.NAME, varmap.get(var)),\n                 value));\n    all.remove(var);\n  }\n\n  // Assign `undefined` to any properties not present in the literal.\n  for (String var : all) {\n    nodes.add(\n        new Node(Token.ASSIGN,\n                 Node.newString(Token.NAME, varmap.get(var)),\n                 NodeUtil.newUndefinedNode(null)));\n  }\n\n  // Ensure the whole expression returns true.\n  nodes.add(new Node(Token.TRUE));\n\n  Node replacement;\n  if (nodes.size() == 1) {\n    // Only the TRUE literal, no comma tree needed.\n    replacement = nodes.get(0);\n  } else {\n    // Build a binary COMMA tree so each COMMA node has exactly two children.\n    nodes = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    for (i = 0; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}