{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n  // If the object literal assignment is used to initialize a var,\n  // then it is not needed for its computed value. In that case,\n  // simply remove the initializer.\n  Node assignParent = ref.getParent();\n  if (assignParent != null && assignParent.getType() == Token.NAME) {\n    Node varNode = assignParent.getParent();\n    if (varNode != null && varNode.getType() == Token.VAR) {\n      // Remove the initializer from the var declaration.\n      assignParent.removeChild(ref);\n      return;\n    }\n  }\n\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)),\n                       value));\n    all.remove(var);\n  }\n\n  // For any properties that were expected but missing from the literal,\n  // assign undefined.\n  for (String var : all) {\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)),\n                       NodeUtil.newUndefinedNode(null)));\n  }\n\n  // All assignments evaluate to true.  Ensure the overall expression does,\n  // by adding a final TRUE node.\n  nodes.add(new Node(Token.TRUE));\n\n  Node replacement;\n  // If there is only one node (which can happen for an empty object literal),\n  // then there is no need to build a COMMA chain.\n  if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else {\n    // Join these using COMMA operators.  A COMMA node must have exactly 2 children,\n    // so build the tree bottom\u2013up in reverse order.\n    nodes = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    for (i = 0; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n\n  // Replace the original assignment expression with the new code.\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}