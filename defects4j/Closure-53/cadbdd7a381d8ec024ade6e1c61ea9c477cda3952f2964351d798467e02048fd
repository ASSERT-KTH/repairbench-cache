{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)),\n                       value));\n    all.remove(var);\n  }\n  // For any properties that were not present in the object literal,\n  // assign undefined.\n  for (String var : all) {\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)),\n                       NodeUtil.newUndefinedNode(null)));\n  }\n  // Append a final TRUE literal so that the overall expression\n  // always evaluates to true.\n  nodes.add(new Node(Token.TRUE));\n\n  // When there are no property assignments (i.e. only the TRUE node was added)\n  // then this assignment has no side effects. In a VAR declaration we want to remove\n  // the assignment entirely, while in an ordinary assignment we simply replace it with TRUE.\n  Node replace = ref.getParent();\n  if (nodes.size() == 1) {\n    if (replace.getType() == Token.VAR) {\n      replace.getParent().removeChild(replace);\n      return;\n    } else {\n      Node replacement = nodes.get(0);\n      replacement.copyInformationFromForTree(replace);\n      replace.getParent().replaceChild(replace, replacement);\n      return;\n    }\n  }\n\n  // Otherwise, we need to build a tree of comma expressions.\n  // A comma (\",\") operator node must have 2 children. Because we want the\n  // final expression to equal 'true', we must combine the assignments with a trailing true.\n  // Reverse the list so that the tree we build has the comma at its head,\n  // matching the parser's tree structure.\n  nodes = Lists.reverse(nodes);\n  Node replacement = new Node(Token.COMMA);\n  Node cur = replacement;\n  int i = 0;\n  // Create a chain of comma nodes so that each comma has exactly two children.\n  for (; i < nodes.size() - 2; i++) {\n    cur.addChildToFront(nodes.get(i));\n    Node comma = new Node(Token.COMMA);\n    cur.addChildToFront(comma);\n    cur = comma;\n  }\n  cur.addChildToFront(nodes.get(i));\n  cur.addChildToFront(nodes.get(i + 1));\n\n  replacement.copyInformationFromForTree(replace);\n\n  // If the assignment is part of a VAR declaration (as in \"var a = {...}\"),\n  // then we wrap the replacement in an EXPR_RESULT. In the case where the object literal\n  // is empty, we removed the assignment above.\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}