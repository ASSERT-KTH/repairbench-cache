{
    "generation": "/**\n * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n * Note that the resulting expression will always evaluate to\n * true, as would the x = {...} expression.\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n\n  // if val is null, nothing to do\n  if (val == null) {\n    return;\n  }\n\n  blacklistVarReferencesInTree(val, v.scope);\n  if (val.getType() != Token.OBJECTLIT) {\n    // If not an object literal, just bail.\n    return;\n  }\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null;\n       key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)), value));\n    all.remove(var);\n  }\n\n  // TODO(user): Better source information.\n  for (String var : all) {\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)),\n               NodeUtil.newUndefinedNode(null)));\n  }\n\n  // All assignments evaluate to true, so make sure that the\n  // expr statement evaluates to true in case it matters.\n  nodes.add(new Node(Token.TRUE));\n\n  Node replacement;\n\n  if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else if (nodes.size() == 2) {\n    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));\n  } else {\n    // Join these using COMMA.  A COMMA node must have 2 children, so we\n    // create a left-associative tree.\n    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));\n    for (int i = 2; i < nodes.size(); i++) {\n      replacement = new Node(Token.COMMA, replacement, nodes.get(i));\n    }\n  }\n\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}