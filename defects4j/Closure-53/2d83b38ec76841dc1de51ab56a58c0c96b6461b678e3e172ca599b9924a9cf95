{
    "generation": "  private void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n    // Compute all of the assignments necessary\n    List<Node> nodes = Lists.newArrayList();\n    Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n\n    Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n    for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n      String var = key.getString();\n      Node value = key.removeFirstChild();\n      nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));\n      all.remove(var);\n    }\n\n    for (String var : all) {\n      nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));\n    }\n\n    Node replacement;\n    if (!nodes.isEmpty()) {\n      // All assignments evaluate to true, so we chain them with commas and\n      // end with true to ensure the overall expression evaluates to true.\n      nodes.add(new Node(Token.TRUE));\n      nodes = Lists.reverse(nodes);\n      replacement = buildCommaChain(nodes);\n    } else {\n      // If there are no assignments, just return true.\n      replacement = new Node(Token.TRUE);\n    }\n\n    Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n\n    if (replace.getType() == Token.VAR) {\n      replace.getParent().replaceChild(\n          replace, NodeUtil.newExpr(replacement));\n    } else {\n      replace.getParent().replaceChild(replace, replacement);\n    }\n  }\n\n  private static Node buildCommaChain(List<Node> nodes) {\n    if (nodes.isEmpty()) {\n      return null;\n    }\n    Node root = new Node(Token.COMMA);\n    Node current = root;\n    for (int i = 0; i < nodes.size() - 1; i++) {\n      current.addChildToFront(nodes.get(i));\n      Node comma = new Node(Token.COMMA);\n      current.addChildToFront(comma);\n      current = comma;\n    }\n    current.addChildToFront(nodes.get(nodes.size() - 1));\n    return root;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}