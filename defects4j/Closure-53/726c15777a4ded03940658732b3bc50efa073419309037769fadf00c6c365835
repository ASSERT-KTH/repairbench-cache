{
    "generation": "/**\n * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n * Note that the resulting expression will always evaluate to\n * true, as would the x = {...} expression.\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n\n  blacklistVarReferencesInTree(val, v.scope);\n\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n        new Node(Token.ASSIGN,\n            Node.newString(Token.NAME, varmap.get(var)),\n            value));\n    all.remove(var);\n  }\n\n  // TODO(user): Better source information.\n  for (String var : all) {\n    nodes.add(\n        new Node(Token.ASSIGN,\n            Node.newString(Token.NAME, varmap.get(var)),\n            NodeUtil.newUndefinedNode(null)));\n  }\n\n  // Add final true node so that the expression evaluates to true.\n  nodes.add(new Node(Token.TRUE));\n\n  Node replacement;\n\n  if (nodes.size() == 1) {\n    // only 'true' -- no assignments -- so replacement is just true.\n    replacement = nodes.get(0);\n  } else if (nodes.size() == 2) {\n    // two nodes; combine as a comma\n    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));\n  } else {\n    // multiple nodes; build a comma tree\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n\n    // reversed order so the tree is built correctly\n    nodes = Lists.reverse(nodes);\n\n    int i = 0;\n    for (; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}