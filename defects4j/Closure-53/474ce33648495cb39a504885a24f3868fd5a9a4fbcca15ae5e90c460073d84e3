{
    "generation": "/**\n * Replaces an assignment like x = {...} with a comma\u2010expression such as\n * t1 = a, t2 = b, t3 = c, true.\n * Note that the resulting expression will always evaluate to true,\n * as would the original x = {...} expression.\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)),\n                       value));\n    all.remove(var);\n  }\n\n  // For any expected property missing from the object literal,\n  // add an assignment with an undefined initializer.\n  for (String var : all) {\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)),\n                       NodeUtil.newUndefinedNode(null)));\n  }\n\n  // All assignments evaluate to true, so append a literal true.\n  nodes.add(new Node(Token.TRUE));\n\n  Node replacement;\n  // Avoid building a comma-chain if there is only one node.\n  if (nodes.size() < 2) {\n    replacement = nodes.get(0);\n  } else {\n    // Build comma expression tree.\n    // Reverse the list so that the evaluation order is preserved.\n    nodes = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    // For a comma node, we need to have exactly two children.\n    // Build a chain of comma nodes until only two nodes remain.\n    for (i = 0; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n  replacement.copyInformationFromForTree(ref.getParent());\n\n  Node replace = ref.getParent();\n  // In a variable declaration like \"var a = {}\", the assignment has no side\n  // effects and should be removed.  In an assignment statement \"a = {}\", we must\n  // preserve its evaluation (which is true).\n  if (replace.getType() == Token.VAR) {\n    if (replacement.isTrue()) {\n      // Remove the var declaration entirely.\n      replace.getParent().removeChild(replace);\n    } else {\n      replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));\n    }\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}