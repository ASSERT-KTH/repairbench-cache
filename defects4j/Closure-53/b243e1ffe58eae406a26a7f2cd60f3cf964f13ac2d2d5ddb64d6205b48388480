{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO(user): Copy type information.\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n      }\n\n      // TODO(user): Better source information.\n      for (String var : all) {\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));\n      }\n\n      Node replacement;\n        // All assignments evaluate to true, so make sure that the\n        // expr statement evaluates to true in case it matters.\n        nodes.add(new Node(Token.TRUE));\n\n        // Handle the case of a single node (e.g. an empty object literal {}\n        // resulted in only the TRUE node being added).\n        if (nodes.size() == 1) {\n          replacement = nodes.get(0); // Should be the TRUE node\n        } else {\n          // Join these using COMMA.  A COMMA node must have 2 children, so we\n          // create a tree. In the tree the first child must be the COMMA to match\n          // the parser, otherwise tree equality tests fail.\n          // The structure should evaluate the assignments left-to-right, followed by true.\n          // The built structure is COMMA(COMMA(..., COMMA(assign1, assign2)), ...), assign_k), true)\n          nodes = Lists.reverse(nodes); // Results in [true, assign_k, ..., assign1]\n          replacement = new Node(Token.COMMA);\n          Node cur = replacement;\n          int i;\n          // Loop builds the nested comma structure for size >= 3\n          for (i = 0; i < nodes.size() - 2; i++) {\n            cur.addChildToFront(nodes.get(i));\n            Node t = new Node(Token.COMMA);\n            cur.addChildToFront(t);\n            cur = t;\n          }\n          // Add the final two nodes (works for size >= 2)\n          // For size 2, loop doesn't run, i=0. Adds nodes.get(0) and nodes.get(1).\n          // For size 3, loop runs once for i=0. Then adds nodes.get(1) and nodes.get(2).\n          cur.addChildToFront(nodes.get(i));\n          cur.addChildToFront(nodes.get(i + 1));\n       }\n\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n\n      // InlineObjectLiterals#inlineObjectLiteral should handle the VAR case\n      // by calling inlineVariable, not this function. However, if this function\n      // is somehow called for a VAR, we replace the VAR statement with an\n      // expression statement containing the comma list.\n      if (replace.getType() == Token.VAR) {\n        replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));\n      } else {\n        // Replace the original expression (e.g., ASSIGN) with the comma list.\n        replace.getParent().replaceChild(replace, replacement);\n      }\n      // Report code change to allow for further optimizations/looping.\n      compiler.reportCodeChange();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}