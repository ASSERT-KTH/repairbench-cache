{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n  // Do not transform an object literal that is part of a variable declaration.\n  // For example, in \"var a = {}\", the initializer is part of a VAR node,\n  // and we want to leave it alone.\n  Node assignParent = ref.getParent();\n  if (assignParent != null && assignParent.getParent() != null &&\n      assignParent.getParent().getType() == Token.VAR) {\n    return;\n  }\n\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO: Copy type information.\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)), value));\n    all.remove(var);\n  }\n  // For any remaining variables, assign undefined.\n  for (String var : all) {\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(var)),\n                       NodeUtil.newUndefinedNode(null)));\n  }\n\n  Node replacement;\n  // All assignments evaluate to true so that the overall expression does.\n  nodes.add(new Node(Token.TRUE));\n\n  // If there's only one node, there's no need to build a comma chain.\n  if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else {\n    // Build the comma chain. A COMMA node must have exactly 2 children.\n    nodes = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    for (i = 0; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}