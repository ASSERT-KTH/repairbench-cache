{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO(user): Copy type information.\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n      }\n\n      // TODO(user): Better source information.\n      for (String var : all) {\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));\n      }\n\n      Node replacement;\n      // All assignments evaluate to true, so make sure that the\n      // expr statement evaluates to true in case it matters.\n      nodes.add(new Node(Token.TRUE)); // This ensures 'nodes' has at least one element.\n\n      // Join these using COMMA.  A COMMA node must have 2 children, so we\n      // create a tree. In the tree the first child be the COMMA to match\n      // the parser, otherwise tree equality tests fail.\n      if (nodes.size() == 1) {\n          // If only the TRUE node is present (i.e., the object literal was empty {}),\n          // then the replacement is just the TRUE node itself.\n          replacement = nodes.get(0);\n      } else {\n          // If there are multiple assignments (e.g., t1=a, t2=b) plus TRUE,\n          // join them using COMMA.\n          // Example: nodes = [assign1, assign2, TRUE]\n          nodes = Lists.reverse(nodes); // -> [TRUE, assign2, assign1]\n          replacement = new Node(Token.COMMA);\n          Node cur = replacement;\n          int i;\n          // This loop creates (COMMA (COMMA A B) C) structure\n          // It iterates for all but the last two elements.\n          for (i = 0; i < nodes.size() - 2; i++) {\n            cur.addChildToFront(nodes.get(i));\n            Node t = new Node(Token.COMMA);\n            cur.addChildToFront(t);\n            cur = t;\n          }\n          // Add the last two elements.\n          cur.addChildToFront(nodes.get(i));\n          cur.addChildToFront(nodes.get(i + 1));\n      }\n\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n\n      if (replace.getType() == Token.VAR) {\n        // For 'var x = {}' (when varmap is empty), the expected output is '',\n        // meaning the VAR statement should be removed entirely.\n        if (varmap.isEmpty()) {\n          replace.getParent().removeChild(replace);\n        } else {\n          // For 'var x = {a:1}' it becomes 'var x; x.a=1; true;' effectively.\n          // The VAR node is replaced by an expression.\n          replace.getParent().replaceChild(\n              replace, NodeUtil.newExpr(replacement));\n        }\n      } else { // This handles assignments like 'x = {}' or 'x = {a:1}'\n        replace.getParent().replaceChild(replace, replacement);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}