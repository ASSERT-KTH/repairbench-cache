{
    "generation": "  private void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n    // Compute all of the assignments necessary\n    List<Node> nodes = Lists.newArrayList();\n    Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n    Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n    for (Node key = val.getFirstChild(); key != null;\n         key = key.getNext()) {\n      String var = key.getString();\n      Node value = key.removeFirstChild();\n      // TODO(user): Copy type information.\n      nodes.add(\n        new Node(Token.ASSIGN,\n                Node.newString(Token.NAME, varmap.get(var)), value));\n      all.remove(var);\n    }\n\n    // Handle any remaining variables that were not in the object literal.\n    for (String var : all) {\n      nodes.add(\n        new Node(Token.ASSIGN,\n                Node.newString(Token.NAME, varmap.get(var)),\n                NodeUtil.newUndefinedNode(null)));\n    }\n\n    // Add the TRUE node at the end\n    nodes.add(new Node(Token.TRUE));\n\n    // Create the replacement node based on the number of nodes\n    Node replacement;\n    if (nodes.size() == 1) {\n      replacement = nodes.get(0);\n    } else {\n      // All assignments evaluate to true, so make sure that the\n      // expr statement evaluates to true in case it matters.\n      nodes = Lists.reverse(nodes);\n      replacement = new Node(Token.COMMA);\n      Node cur = replacement;\n      int i;\n      for (i = 0; i < nodes.size() - 2; i++) {\n        cur.addChildToFront(nodes.get(i));\n        Node t = new Node(Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n      }\n      cur.addChildToFront(nodes.get(i));\n      cur.addChildToFront(nodes.get(i + 1));\n    }\n\n    Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n\n    if (replace.getType() == Token.VAR) {\n      replace.getParent().replaceChild(\n          replace, NodeUtil.newExpr(replacement));\n    } else {\n      replace.getParent().replaceChild(replace, replacement);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}