{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)), value));\n    all.remove(var);\n  }\n\n  // TODO(user): Better source information.\n  for (String var : all) {\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)),\n               NodeUtil.newUndefinedNode(null)));\n  }\n\n  Node replacement;\n  // All assignments evaluate to true, so make sure that the\n  // expr statement evaluates to true in case it matters.\n  nodes.add(new Node(Token.TRUE));\n\n  // Join these using COMMA.  A COMMA node must have 2 children, so we\n  // create a tree. In the tree the first child be the COMMA to match\n  // the parser, otherwise tree equality tests fail.\n  replacement = nodes.get(0);\n  for (int i = 1; i < nodes.size(); i++) {\n    Node comma = new Node(Token.COMMA, replacement, nodes.get(i));\n    replacement = comma;\n  }\n\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}