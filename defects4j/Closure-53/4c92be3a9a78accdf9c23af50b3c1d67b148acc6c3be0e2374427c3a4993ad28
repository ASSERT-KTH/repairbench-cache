{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n\n  // If the assignment is part of a variable declaration (an initializer),\n  // remove the initializer (so that \u201cvar a = {}\u201d becomes \u201cvar a;\u201d).\n  Node parent = ref.getParent();\n  if (parent != null &&\n      parent.getType() == Token.NAME &&\n      parent.getParent() != null &&\n      parent.getParent().getType() == Token.VAR) {\n    parent.removeChild(ref);\n    return;\n  }\n\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String name = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(name)),\n                       value));\n    all.remove(name);\n  }\n\n  // For any variables not present in the object literal, assign them undefined.\n  for (String name : all) {\n    nodes.add(new Node(Token.ASSIGN,\n                       Node.newString(Token.NAME, varmap.get(name)),\n                       NodeUtil.newUndefinedNode(null)));\n  }\n\n  // All assignments must evaluate to true.\n  nodes.add(new Node(Token.TRUE));\n\n  // If there\u2019s only one node (for example, when the object literal was empty\n  // and no assignments were generated) then simply use it.\n  Node replacement;\n  if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else {\n    // Join the nodes using the comma operator. A COMMA node must have exactly\n    // 2 children, so we build a chain.\n    nodes = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int size = nodes.size();\n    int i;\n    for (i = 0; i < size - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node nextComma = new Node(Token.COMMA);\n      cur.addChildToFront(nextComma);\n      cur = nextComma;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n\n  // Replace the original assignment expression with the new replacement.\n  Node assignExpr = ref.getParent();\n  replacement.copyInformationFromForTree(assignExpr);\n  assignExpr.getParent().replaceChild(assignExpr, replacement);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}