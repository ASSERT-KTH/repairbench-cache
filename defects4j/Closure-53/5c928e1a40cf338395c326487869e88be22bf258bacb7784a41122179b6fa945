{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    nodes.add(\n      new Node(Token.ASSIGN,\n              Node.newString(Token.NAME, varmap.get(var)), value));\n  }\n\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (String var : all) {\n    nodes.add(\n      new Node(Token.ASSIGN,\n              Node.newString(Token.NAME, varmap.get(var)),\n              NodeUtil.newUndefinedNode(null)));\n  }\n\n  Node replacement = nodes.isEmpty() \n    ? NodeUtil.newTrueNode(null) \n    : combineWithCommas(nodes);\n\n  if (replacement != null) {\n    Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n\n    if (replace.getType() == Token.VAR) {\n      replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n    } else {\n      replace.getParent().replaceChild(replace, replacement);\n    }\n  }\n}\n\nprivate Node combineWithCommas(List<Node> nodes) {\n  if (nodes.isEmpty()) {\n    return null;\n  }\n  Node first = nodes.get(0);\n  for (int i = 1; i < nodes.size(); ++i) {\n    Node comma = new Node(Token.COMMA);\n    comma.addChildToFront(nodes.get(i));\n    first.addNext(comma);\n  }\n  return first;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}