{
    "generation": "/**\n * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n * Note that the resulting expression will always evaluate to\n * true, as would the x = {...} expression.\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n\n  // Build up a list of assignments for existing keys...\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(\n        Token.ASSIGN,\n        Node.newString(Token.NAME, varmap.get(var)),\n        value));\n    all.remove(var);\n  }\n  // ...and assign undefined to any remaining props\n  for (String var : all) {\n    nodes.add(new Node(\n        Token.ASSIGN,\n        Node.newString(Token.NAME, varmap.get(var)),\n        NodeUtil.newUndefinedNode(null)));\n  }\n\n  // Special\u2010case an empty literal: no assignments at all.\n  if (nodes.isEmpty()) {\n    Node replace = ref.getParent();\n    if (replace.getType() == Token.VAR) {\n      // Drop the entire var declaration.\n      replace.detach();\n    } else {\n      // Replace the standalone assignment with `true`.\n      Node trueNode = new Node(Token.TRUE);\n      trueNode.copyInformationFromForTree(replace);\n      replace.getParent().replaceChild(replace, trueNode);\n    }\n    return;\n  }\n\n  // Otherwise append `true` so the comma\u2010expression still returns true.\n  nodes.add(new Node(Token.TRUE));\n\n  // And join everything with commas. A COMMA node must have exactly two children,\n  // so we build a little balanced tree.\n  nodes = Lists.reverse(nodes);\n  Node replacement = new Node(Token.COMMA);\n  Node cur = replacement;\n  int i;\n  for (i = 0; i < nodes.size() - 2; i++) {\n    cur.addChildToFront(nodes.get(i));\n    Node t = new Node(Token.COMMA);\n    cur.addChildToFront(t);\n    cur = t;\n  }\n  cur.addChildToFront(nodes.get(i));\n  cur.addChildToFront(nodes.get(i + 1));\n\n  // Finally splice the new tree in.\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n  if (replace.getType() == Token.VAR) {\n    // wrap in an EXPR if we're replacing a var-decl\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}