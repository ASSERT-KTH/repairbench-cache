{
    "generation": "/**\n * Replaces an assignment like x = {...} with a comma\u2010expression\n * containing all the extracted assignments, so that:\n *\n *    x = {a:foo, b:bar}\n *\n * is replaced by\n *\n *    t1 = foo, t2 = bar, true\n *\n * Note that if the assignment occurs in a variable declaration (as an\n * initializer) then it is simply removed.  (This is expected since a\n * variable initializer\u2019s value is not used. For example, in\n *\n *    var a = {}\n *\n * the object literal is dead and inlining it should remove it.)\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String prop = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(Token.ASSIGN,\n              Node.newString(Token.NAME, varmap.get(prop)), value));\n    all.remove(prop);\n  }\n  // For properties missing from the object literal, assign undefined.\n  for (String prop : all) {\n    nodes.add(new Node(Token.ASSIGN,\n              Node.newString(Token.NAME, varmap.get(prop)),\n              NodeUtil.newUndefinedNode(null)));\n  }\n  // Append a literal \"true\" so that the overall expression evaluates to true.\n  nodes.add(new Node(Token.TRUE));\n\n  // Build a comma expression that sequences the assignments.\n  // If there is only one node (e.g. an empty object literal) then simply use it.\n  Node replacement;\n  if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else {\n    // Build a left\u2010associative chain.\n    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));\n    for (int i = 2; i < nodes.size(); i++) {\n      replacement = new Node(Token.COMMA, replacement, nodes.get(i));\n    }\n  }\n  // Copy source information from the original assignment.\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  // If the assignment is part of a var declaration (either the assignment node itself\n  // is a VAR or its parent is a VAR node), then remove it entirely so that \"var a = {}\"\n  // becomes \"var a;\" (and can then be eliminated); otherwise, replace the expression.\n  if (replace.getType() == Token.VAR ||\n      (replace.getParent() != null && replace.getParent().getType() == Token.VAR)) {\n    replace.getParent().removeChild(replace);\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}