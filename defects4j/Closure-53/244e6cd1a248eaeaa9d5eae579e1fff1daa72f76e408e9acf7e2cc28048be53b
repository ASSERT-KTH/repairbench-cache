{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      Node replace = ref.getParent();\n      // If this is a var-declaration of an empty object literal\n      // and there is nothing to inline, just drop it.\n      if (replace.getType() == Token.VAR && varmap.isEmpty()) {\n        replace.getParent().removeChild(replace);\n        return;\n      }\n\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO(user): Copy type information.\n        nodes.add(\n            new Node(Token.ASSIGN,\n                     Node.newString(Token.NAME, varmap.get(var)),\n                     value));\n        all.remove(var);\n      }\n\n      // For any property that wasn't in the literal, assign undefined.\n      // TODO(user): Better source information.\n      for (String var : all) {\n        nodes.add(\n            new Node(Token.ASSIGN,\n                     Node.newString(Token.NAME, varmap.get(var)),\n                     NodeUtil.newUndefinedNode(null)));\n      }\n\n      // All of these sub-expressions are true-ish, so ensure the\n      // whole thing evaluates to true as well.\n      nodes.add(new Node(Token.TRUE));\n\n      // Build the comma-expression tree.  If there's only one node,\n      // just use it directly.\n      Node replacement;\n      if (nodes.size() == 1) {\n        replacement = nodes.get(0);\n      } else {\n        // A COMMA node must have exactly 2 children, so nest them.\n        nodes = Lists.reverse(nodes);\n        replacement = new Node(Token.COMMA);\n        Node cur = replacement;\n        int i;\n        for (i = 0; i < nodes.size() - 2; i++) {\n          cur.addChildToFront(nodes.get(i));\n          Node nextComma = new Node(Token.COMMA);\n          cur.addChildToFront(nextComma);\n          cur = nextComma;\n        }\n        // last two nodes\n        cur.addChildToFront(nodes.get(i));\n        cur.addChildToFront(nodes.get(i + 1));\n      }\n\n      // Preserve source-information\n      replacement.copyInformationFromForTree(replace);\n\n      // Splice it into the AST\n      if (replace.getType() == Token.VAR) {\n        // var x = {...}  =>  EXPR(t1=\u2026,t2=\u2026,true)\n        replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));\n      } else {\n        // x = {...}  =>  t1=\u2026,t2=\u2026,true\n        replace.getParent().replaceChild(replace, replacement);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}