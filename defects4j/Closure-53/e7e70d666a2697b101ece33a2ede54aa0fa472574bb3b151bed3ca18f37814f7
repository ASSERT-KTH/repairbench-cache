{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                           Map<String, String> varmap) {\n  // Compute all of the assignments necessary.\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String prop = key.getString();\n    Node value = key.removeFirstChild();\n    // Create an assignment for properties that exist in the object literal.\n    nodes.add(\n        new Node(Token.ASSIGN,\n                 Node.newString(Token.NAME, varmap.get(prop)),\n                 value));\n    all.remove(prop);\n  }\n  // For properties that are expected (per varmap) but missing in the literal,\n  // assign them to undefined.\n  for (String prop : all) {\n    nodes.add(\n        new Node(Token.ASSIGN,\n                 Node.newString(Token.NAME, varmap.get(prop)),\n                 NodeUtil.newUndefinedNode(null)));\n  }\n\n  // In a non-var assignment the expression must evaluate to true.\n  // However, when the assignment is used as a var initializer,\n  // its value is ignored. (e.g. \"var a = {}\" should become just \"var a;\")\n  //\n  // The AST for a var initializer is a NAME node (with an initializer)\n  // which is a child of a VAR node. In contrast, an assignment expression\n  // like \"a = {}\" is not nested inside a VAR.\n  //\n  // We detect a var initializer if the parent is either a VAR\n  // or a NAME node whose parent is a VAR.\n  Node assignParent = ref.getParent();\n  boolean isVarInitializer = assignParent.getType() == Token.VAR ||\n      (assignParent.getType() == Token.NAME &&\n       assignParent.getParent() != null &&\n       assignParent.getParent().getType() == Token.VAR);\n\n  if (!isVarInitializer) {\n    // For a normal assignment expression, add a trailing TRUE node\n    // because (x = {...}) always evaluates to true.\n    nodes.add(new Node(Token.TRUE));\n  }\n\n  // Build a replacement expression.  If there\u2019s only one node then we use it directly.\n  Node replacement;\n  if (nodes.isEmpty()) {\n    replacement = NodeUtil.newUndefinedNode(null);\n  } else if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else if (nodes.size() == 2) {\n    // For two nodes, a COMMA node with two children is sufficient.\n    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));\n  } else {\n    // For more than two nodes, construct a binary tree of COMMA nodes.\n    // The original algorithm reverses the list in order to preserve evaluation order.\n    Collections.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    for (i = 0; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n  }\n\n  if (isVarInitializer) {\n    // In a var declaration like \"var a = {}\", we want to remove the assignment\n    // altogether and leave just \"var a;\".  However, if any of the assignments have\n    // side\u2011effects (for non\u2011empty object literals) we need to emit them as a separate\n    // expression statement.\n    //\n    // In the AST a var initializer appears as the initializer of a NAME node\n    // that is a child of the VAR node.\n    Node nameNode;\n    if (assignParent.getType() == Token.NAME) {\n      nameNode = assignParent;\n    } else {\n      // Otherwise ref is a child of an ASSIGN node which is itself the initializer of the NAME node.\n      nameNode = assignParent.getParent();\n    }\n    // Remove the initializer (the object literal assignment) from the variable.\n    nameNode.removeChild(ref);\n\n    // If there were any property assignments generated, insert them after the VAR.\n    // (For an empty literal we want nothing extra.)\n    if (!nodes.isEmpty()) {\n      // Check if any of the nodes is an assignment (as opposed to a dangling 'true'\n      // that we wouldn\u2019t have added in a var initializer, but we check defensively).\n      boolean hasSideEffects = false;\n      for (Node n : nodes) {\n        if (n.getType() == Token.ASSIGN) {\n          hasSideEffects = true;\n          break;\n        }\n      }\n      if (hasSideEffects) {\n        // Insert the side-effects as an expression statement immediately after the VAR.\n        Node varNode = nameNode.getParent();  // the VAR node\n        varNode.getParent().addChildAfter(NodeUtil.newExpr(replacement), varNode);\n      }\n    }\n  } else {\n    // For a normal assignment expression, simply replace the whole expression.\n    Node exprParent = assignParent.getParent();\n    replacement.copyInformationFromForTree(assignParent);\n    exprParent.replaceChild(assignParent, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}