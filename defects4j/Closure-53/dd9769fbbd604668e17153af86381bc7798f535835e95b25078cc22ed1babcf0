{
    "generation": "/**\n * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n * Note that the resulting expression will always evaluate to\n * true, as would the x = {...} expression.\n */\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String prop = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(\n        Token.ASSIGN,\n        Node.newString(Token.NAME, varmap.get(prop)),\n        value));\n    all.remove(prop);\n  }\n  // For any properties not in the literal, assign undefined.\n  for (String prop : all) {\n    nodes.add(new Node(\n        Token.ASSIGN,\n        Node.newString(Token.NAME, varmap.get(prop)),\n        NodeUtil.newUndefinedNode(null)));\n  }\n\n  // All assignments evaluate to true, so make sure that the\n  // expr statement evaluates to true in case it matters.\n  nodes.add(new Node(Token.TRUE));\n\n  Node replacement;\n  // If there's only the TRUE node, we don't need a comma tree.\n  if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else {\n    // Join these using COMMA. A COMMA node must have 2 children, so we\n    // create a tree. In the tree the first child be the COMMA to match\n    // the parser, otherwise tree equality tests fail.\n    List<Node> rev = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    for (i = 0; i < rev.size() - 2; i++) {\n      cur.addChildToFront(rev.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(rev.get(i));\n    cur.addChildToFront(rev.get(i + 1));\n  }\n\n  Node replaceNode = ref.getParent();\n  replacement.copyInformationFromForTree(replaceNode);\n\n  if (replaceNode.getType() == Token.VAR) {\n    replaceNode.getParent().replaceChild(\n        replaceNode, NodeUtil.newExpr(replacement));\n  } else {\n    replaceNode.getParent().replaceChild(\n        replaceNode, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}