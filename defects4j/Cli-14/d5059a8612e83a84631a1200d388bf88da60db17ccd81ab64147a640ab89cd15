{
    "generation": "public void validate(final WriteableCommandLine commandLine)\n    throws OptionException {\n    int present = 0;\n    Option unexpected = null;\n\n    for (final Iterator i = options.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n\n        // If the option is present then validate it once.\n        if (commandLine.hasOption(option)) {\n            if (++present > maximum) {\n                unexpected = option;\n                break;\n            }\n            option.validate(commandLine);\n        }\n        // If the option isn't present but is required (or is a Group) then validate it\n        // to trigger an error (for instance, missing required option).\n        else if (option.isRequired() || option instanceof Group) {\n            option.validate(commandLine);\n        }\n    }\n\n    if (unexpected != null) {\n        throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                  unexpected.getPreferredName());\n    }\n\n    if (present < minimum) {\n        throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n    }\n\n    // Validate each anonymous argument.\n    for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n        option.validate(commandLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}