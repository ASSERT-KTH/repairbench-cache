{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // Validate required options and groups.\n            // These options must be validated irrespective of whether they were explicitly found\n            // on the command line, as default values or implied presence might satisfy their requirements.\n            // This also ensures group structures are validated.\n            if (option.isRequired() || option instanceof Group) {\n                option.validate(commandLine);\n            }\n\n            // If the child option is present on the command line (i.e., parsed from input tokens),\n            // increment the count to check against maximum.\n            // Also, validate it if it hasn't already been validated by the preceding block\n            // (i.e., if it's an optional, present option).\n            if (commandLine.hasOption(option)) {\n                if (++present > maximum) {\n                    unexpected = option;\n                    break;\n                }\n\n                // If the option is present AND it's not a required option or a Group (which were\n                // already validated in the first block), then validate it now.\n                // This prevents redundant validation which can cause issues if validation\n                // transforms the stored value type (e.g., String to File).\n                if (!(option.isRequired() || option instanceof Group)) {\n                    option.validate(commandLine);\n                }\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few option\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}