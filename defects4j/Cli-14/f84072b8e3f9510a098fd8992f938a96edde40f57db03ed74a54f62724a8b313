{
    "generation": "public void validate(final WriteableCommandLine commandLine)\n    throws OptionException {\n    int present = 0;\n    Option unexpected = null;\n\n    for (final Iterator i = options.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n\n        // validate nested groups first\n        if (option instanceof Group) {\n            option.validate(commandLine);\n        }\n\n        // if this option (or nested group) is present, count and validate it\n        if (commandLine.hasOption(option)) {\n            if (++present > maximum) {\n                unexpected = option;\n                break;\n            }\n            // only validate non\u2010group options here (groups were validated above)\n            if (!(option instanceof Group)) {\n                option.validate(commandLine);\n            }\n        }\n        // missing required child option\n        else if (option.isRequired()) {\n            throw new OptionException(option, ResourceConstants.MISSING_OPTION);\n        }\n    }\n\n    // too many options chosen\n    if (unexpected != null) {\n        throw new OptionException(this,\n                                  ResourceConstants.UNEXPECTED_TOKEN,\n                                  unexpected.getPreferredName());\n    }\n\n    // too few options chosen at the group level\n    if (present < minimum) {\n        throw new OptionException(this,\n                                  ResourceConstants.MISSING_OPTION);\n    }\n\n    // validate anonymous (un\u2010named) arguments\n    for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n        final Option opt = (Option) i.next();\n        opt.validate(commandLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}