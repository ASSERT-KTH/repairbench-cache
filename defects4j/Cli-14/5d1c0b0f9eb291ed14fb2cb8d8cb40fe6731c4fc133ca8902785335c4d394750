{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // Determine if the option needs validation.\n            // An option needs validation if:\n            // 1. It is a Group (groups always need to check their internal constraints and children).\n            // 2. It is a required option (its absence or invalid state would throw an exception).\n            // 3. It is present on the command line (even if not required, if supplied, it must be valid).\n            boolean needsValidation = false;\n            if (option instanceof Group || option.isRequired() || commandLine.hasOption(option)) {\n                needsValidation = true;\n            }\n\n            // Validate the option exactly once if any of the above conditions are met.\n            if (needsValidation) {\n                option.validate(commandLine);\n            }\n\n            // The 'present' count and 'maximum' check only apply to options that were actually found on the command line.\n            if (commandLine.hasOption(option)) {\n                if (++present > maximum) {\n                    unexpected = option;\n                    break;\n                }\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few option\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}