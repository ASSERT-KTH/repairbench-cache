{
    "generation": "public void validate(final WriteableCommandLine commandLine)\n    throws OptionException {\n    // number of options found\n    int present = 0;\n\n    // reference to first unexpected option\n    Option unexpected = null;\n\n    for (final Iterator i = options.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n\n        // needs validation?\n        boolean validateOptionItself = option.isRequired() || option instanceof Group;\n        if (validateOptionItself) {\n            option.validate(commandLine);\n        }\n\n        // if the child option is present then validate its argument(s)\n        if (commandLine.hasOption(option)) {\n            if (++present > maximum) {\n                unexpected = option;\n                break;\n            }\n\n            // validate option (again) to handle optional options\n            option.validate(commandLine);\n\n            // additionally validate argument values if present\n            Object values = commandLine.getValue(option);\n            if (values instanceof Collection) {\n                for (Object value : (Collection) values) {\n                    if (value instanceof Option) {\n                        ((Option) value).validate(commandLine);\n                    } else if (value instanceof String) {\n                        option.getArgument().validate((String) value);\n                    } else if (value != null) {\n                        option.getArgument().validate(value.toString());\n                    }\n                }\n            } else if (values instanceof Option) {\n                ((Option) values).validate(commandLine);\n            } else if (values instanceof String) {\n                option.getArgument().validate((String) values);\n            } else if (values != null) {\n                option.getArgument().validate(values.toString());\n            }\n        }\n    }\n\n    // too many options\n    if (unexpected != null) {\n        throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                  unexpected.getPreferredName());\n    }\n\n    // too few option\n    if (present < minimum) {\n        throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n    }\n\n    // validate each anonymous argument\n    for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n        option.validate(commandLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}