{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // Determine if the option requires structural validation (e.g., if it's required or a group)\n            boolean structuralValidationNeeded = option.isRequired() || option instanceof Group;\n            if (structuralValidationNeeded) {\n                // Perform structural validation. This call might process and store\n                // validated values (e.g., convert a String filename to a File object).\n                option.validate(commandLine);\n            }\n\n            // If the child option is present in the command line, perform checks related to its presence\n            if (commandLine.hasOption(option)) {\n                // Increment the count of present options and check against the maximum allowed\n                if (++present > maximum) {\n                    unexpected = option;\n                    break;\n                }\n\n                // If the option was NOT already validated by the structuralValidationNeeded block\n                // (i.e., it's an optional option that was simply present), then validate it now.\n                // This prevents redundant validation calls, which could cause ClassCastExceptions\n                // if the first validation transformed the argument's type in the commandLine.\n                if (!structuralValidationNeeded) {\n                    option.validate(commandLine);\n                }\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few option\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}