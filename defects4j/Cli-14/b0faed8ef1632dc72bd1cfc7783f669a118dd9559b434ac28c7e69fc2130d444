{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // Validate options that are required or are groups.\n            // This ensures that all mandatory options are present and valid,\n            // and recursively validates options within groups.\n            // If an option's argument has a validator that converts the value (e.g., String to File),\n            // this call will perform that conversion and store the converted object in the CommandLine.\n            if (option.isRequired() || option instanceof Group) {\n                option.validate(commandLine);\n            }\n\n            // Check if the option is actually present in the commandLine.\n            // This is separate from being 'required' or a 'group'.\n            // This is used for counting options towards the group's minimum/maximum constraints\n            // and for validating arguments of optional, present options that were not covered by the first block.\n            if (commandLine.hasOption(option)) {\n                // Increment the count of present options for this group.\n                if (++present > maximum) {\n                    unexpected = option;\n                    break; // Exit loop immediately if max exceeded\n                }\n\n                // If this option is present, but was NOT already handled by the 'required' or 'group' validation above,\n                // then its arguments still need validation.\n                // This prevents redundant validation calls that could cause ClassCastExceptions\n                // if a previous validation already converted the option's value.\n                if (!option.isRequired() && !(option instanceof Group)) {\n                    option.validate(commandLine);\n                }\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few option\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}