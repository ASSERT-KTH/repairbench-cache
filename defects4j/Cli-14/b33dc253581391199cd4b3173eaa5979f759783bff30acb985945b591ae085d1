{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // Keep track if validation occurred for this option in this pass\n            boolean validated = false;\n\n            // Validate required options or nested groups first.\n            // Their own validate methods should handle missing arguments if required.\n            if (option.isRequired() || option instanceof Group) {\n                option.validate(commandLine);\n                validated = true; // Mark as validated\n            }\n\n            // Check if the option is actually present on the command line\n            if (commandLine.hasOption(option)) {\n                // Increment count of present options for min/max checks\n                if (++present > maximum) {\n                    unexpected = option; // Record the first option that exceeds the maximum\n                    break; // Stop processing further options for this group\n                }\n\n                // Validate the present option *only if* it wasn't already validated\n                // This prevents double validation which can cause issues like ClassCastException\n                // if the first validation changed the value type (e.g., String to File).\n                if (!validated) {\n                    option.validate(commandLine);\n                }\n            }\n        }\n\n        // Check if too many options were found for this group\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // Check if the minimum number of options required for this group was met.\n        // Note: Individual required options are checked by their own validate() methods.\n        // This check is for the group's overall minimum count.\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument associated with this group\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            // Anonymous arguments might have their own validation rules (e.g., type, count)\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}