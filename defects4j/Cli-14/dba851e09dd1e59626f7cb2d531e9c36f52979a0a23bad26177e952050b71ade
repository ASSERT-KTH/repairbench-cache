{
    "generation": "public void validate(final WriteableCommandLine commandLine)\n    throws OptionException {\n    // number of options found\n    int present = 0;\n    // keep track of the first option that overruns the max\n    Option unexpected = null;\n\n    for (final Iterator i = options.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n\n        // if this is a required option or a nested Group, do an early validation\n        boolean validatedEarly = false;\n        if (option.isRequired() || option instanceof Group) {\n            option.validate(commandLine);\n            validatedEarly = true;\n        }\n\n        // now handle presence-based validation\n        if (commandLine.hasOption(option)) {\n            if (++present > maximum) {\n                unexpected = option;\n                break;\n            }\n            // avoid double-validating something we already validated above\n            if (!validatedEarly) {\n                option.validate(commandLine);\n            }\n        }\n    }\n\n    // too many\n    if (unexpected != null) {\n        throw new OptionException(\n            this,\n            ResourceConstants.UNEXPECTED_TOKEN,\n            unexpected.getPreferredName()\n        );\n    }\n\n    // too few\n    if (present < minimum) {\n        throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n    }\n\n    // finally validate any anonymous arguments\n    for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n        final Option anon = (Option) i.next();\n        anon.validate(commandLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}