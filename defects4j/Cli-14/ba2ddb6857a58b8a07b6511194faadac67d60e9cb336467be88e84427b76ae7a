{
    "generation": "    public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // needs validation?\n            boolean validate = option.isRequired() || option instanceof Group;\n            if (validate) {\n                option.validate(commandLine);\n            }\n\n            // if the child option is present then validate it\n            if (commandLine.hasOption(option)) {\n                if (++present > maximum) {\n                    unexpected = option;\n                    break;\n                }\n\n                // Get the value before validation to handle type conversion\n                Object value = commandLine.getValue(option);\n                if (value != null) {\n                    // If there's a validator, let it handle the type conversion\n                    if (option.getArgument() != null && option.getArgument().getValidator() != null) {\n                        try {\n                            option.getArgument().getValidator().validate(value);\n                        } catch (ClassCastException e) {\n                            // Handle type conversion error\n                            throw new OptionException(this, ResourceConstants.UNEXPECTED_TYPE,\n                                                    option.getPreferredName());\n                        }\n                    }\n                }\n                option.validate(commandLine);\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few option\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}