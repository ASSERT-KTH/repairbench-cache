{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[12];\n    in.mark(signature.length);\n    try {\n        int signatureLength = in.read(signature);\n        in.reset();\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        // Dump needs a bigger buffer to check the signature;\n        final byte[] dumpsig = new byte[32];\n        in.mark(dumpsig.length);\n        signatureLength = in.read(dumpsig);\n        in.reset();\n        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        //_tarHeaderSize increased to 1024, allowing to read multiple possible headers\n        final int tarHeaderSize = 1024;\n        final byte[] tarheader = new byte[tarHeaderSize];\n        in.mark(tarHeaderSize);\n        signatureLength = in.read(tarheader);\n        in.reset();\n        if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n            return new TarArchiveInputStream(in);\n        }\n\n        // fallback to the more thorough tar check by trying to read the stream\n        boolean isTar = false;\n        try {\n            // Use a larger buffer to read ahead and check for valid tar entries\n            in.mark(tarHeaderSize);\n            TarArchiveInputStream tais = new TarArchiveInputStream(in);\n            try {\n                tais.getNextEntry();\n                isTar = true;\n                in.reset();\n            } catch (IOException e) {\n                // If getting the next entry fails, it's not a tar\n                isTar = false;\n            } finally {\n                if (!isTar) {\n                    in.reset();\n                }\n            }\n        } catch (Exception e) { // NOPMD\n            // can generate IllegalArgumentException as well as IOException\n            // autodetection, simply not a TAR\n            // ignored\n        }\n\n        if (isTar) {\n            return new TarArchiveInputStream(in);\n        }\n\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}