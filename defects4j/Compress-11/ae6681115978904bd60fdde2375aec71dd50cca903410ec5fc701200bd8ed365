{
    "generation": "    /**\n     * Create an archive input stream from an input stream, autodetecting\n     * the archive type from the first few bytes of the stream. The InputStream\n     * must support marks, like BufferedInputStream.\n     *\n     * @param in the input stream\n     * @return the archive input stream\n     * @throws ArchiveException if the archiver name is not known\n     * @throws IllegalArgumentException if the stream is null or does not support mark\n     */\n    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException {\n        if (in == null) {\n            throw new IllegalArgumentException(\"Stream must not be null.\");\n        }\n\n        if (!in.markSupported()) {\n            throw new IllegalArgumentException(\"Mark is not supported.\");\n        }\n\n        final byte[] signature = new byte[12];\n        in.mark(signature.length);\n        try {\n            int signatureLength = readFully(in, signature); // Use readFully to ensure buffer is filled if possible\n            in.reset();\n            if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                return new ZipArchiveInputStream(in);\n            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                return new JarArchiveInputStream(in);\n            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n                return new ArArchiveInputStream(in);\n            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n                return new CpioArchiveInputStream(in);\n            }\n\n            // Dump needs a bigger buffer to check the signature;\n            final byte[] dumpsig = new byte[32];\n            in.mark(dumpsig.length);\n            signatureLength = readFully(in, dumpsig); // Use readFully\n            in.reset();\n            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n                return new DumpArchiveInputStream(in);\n            }\n\n            // Tar needs an even bigger buffer to check the signature; read the first block\n            final byte[] tarheader = new byte[512];\n            in.mark(tarheader.length);\n            signatureLength = readFully(in, tarheader); // Use readFully\n            in.reset();\n            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n                return new TarArchiveInputStream(in);\n            }\n            // COMPRESS-117/-171 - improve auto-recognition, fallback check\n            // Try to read first block as a tar archive entry, requires mark support\n            if (signatureLength >= 512) { // Only run secondary check if we read the full header\n                TarArchiveInputStream tais = null;\n                try {\n                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                    // COMPRESS-171: TAR needs at least one entry\n                    if (tais.getNextTarEntry() != null) {\n                        // Looks like a TAR archive, return the stream for the real input\n                        return new TarArchiveInputStream(in);\n                    }\n                    // else: No entry found, not identified as TAR\n                } catch (Exception e) { // NOPMD\n                    // can generate IllegalArgumentException as well as IOException\n                    // autodetection, simply not a TAR\n                    // ignored\n                } finally {\n                    if (tais != null) {\n                         try {\n                             tais.close(); // Close the temporary stream\n                         } catch (IOException ignored) { // NOPMD NOSONAR\n                             // Ignore exception closing the BytArrayInputStream\n                         }\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n\n        throw new ArchiveException(\"No Archiver found for the stream signature\");\n    }\n\n    // Helper method to read buffer fully (similar to IOUtils.readFully but local)\n    // Returns the number of bytes read\n    private int readFully(InputStream in, byte[] buffer) throws IOException {\n        int totalRead = 0;\n        int bytesRead;\n        while (totalRead < buffer.length) {\n            bytesRead = in.read(buffer, totalRead, buffer.length - totalRead);\n            if (bytesRead == -1) { // EOF\n                break;\n            }\n            totalRead += bytesRead;\n        }\n        return totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}