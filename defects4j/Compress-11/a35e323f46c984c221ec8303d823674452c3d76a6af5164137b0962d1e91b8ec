{
    "generation": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n * \n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\npublic ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[12];\n    in.mark(signature.length);\n    int signatureLength;\n    try {\n        signatureLength = in.read(signature);\n        in.reset();\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n    if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n        return new ZipArchiveInputStream(in);\n    } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n        return new JarArchiveInputStream(in);\n    } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n        return new ArArchiveInputStream(in);\n    } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n        return new CpioArchiveInputStream(in);\n    }\n\n    // Dump needs a bigger buffer to check the signature;\n    final byte[] dumpsig = new byte[32];\n    in.mark(dumpsig.length);\n    try {\n        signatureLength = in.read(dumpsig);\n        in.reset();\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n    if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n        return new DumpArchiveInputStream(in);\n    }\n\n    // Tar needs an even bigger buffer to check the signature; read the first block.\n    // A valid TAR header always has 512 bytes.\n    final byte[] tarheader = new byte[512];\n    in.mark(tarheader.length);\n    try {\n        signatureLength = in.read(tarheader);\n        in.reset();\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n    if (signatureLength == tarheader.length) {\n        if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n            return new TarArchiveInputStream(in);\n        }\n        // COMPRESS-117 - improve auto-recognition by trying to read the first entry.\n        try {\n            TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n            tais.getNextEntry();\n            return new TarArchiveInputStream(in);\n        } catch (Exception e) { // NOPMD: autodetection, simply not a TAR\n            // ignored\n        }\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}