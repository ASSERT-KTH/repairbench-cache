{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    try {\n        // Check for ZIP, JAR, AR, and CPIO (all need only the first 12 bytes)\n        final byte[] signature = new byte[12];\n        in.mark(signature.length);\n        int len = in.read(signature);\n        in.reset();\n        if (ZipArchiveInputStream.matches(signature, len)) {\n            return new ZipArchiveInputStream(in);\n        }\n        if (JarArchiveInputStream.matches(signature, len)) {\n            return new JarArchiveInputStream(in);\n        }\n        if (ArArchiveInputStream.matches(signature, len)) {\n            return new ArArchiveInputStream(in);\n        }\n        if (CpioArchiveInputStream.matches(signature, len)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        // Dump needs a larger (32 bytes) buffer to check its signature\n        final byte[] dumpsig = new byte[32];\n        in.mark(dumpsig.length);\n        len = in.read(dumpsig);\n        in.reset();\n        if (DumpArchiveInputStream.matches(dumpsig, len)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        // Tar files require a full 512-byte block to be read.\n        final byte[] tarheader = new byte[512];\n        in.mark(tarheader.length);\n        int tarLen = in.read(tarheader);\n        in.reset();\n\n        // Only attempt tar detection if we were able to read a full header.\n        if (tarLen == tarheader.length) {\n            if (TarArchiveInputStream.matches(tarheader, tarLen)) {\n                return new TarArchiveInputStream(in);\n            }\n            // COMPRESS-117 - improve auto-recognition\n            try {\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                // Only if the first entry is non-null do we accept this as a tar archive.\n                if (tais.getNextEntry() != null) {\n                    return new TarArchiveInputStream(in);\n                }\n            } catch (Exception e) { // NOPMD\n                // Not a tar archive; simply fall through.\n            }\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}