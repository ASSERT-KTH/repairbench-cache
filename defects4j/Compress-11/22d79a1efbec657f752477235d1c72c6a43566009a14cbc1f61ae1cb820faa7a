{
    "generation": "    /**\n     * Create an archive input stream from an input stream, autodetecting\n     * the archive type from the first few bytes of the stream. The InputStream\n     * must support marks, like BufferedInputStream.\n     *\n     * @param in the input stream\n     * @return the archive input stream\n     * @throws ArchiveException if the archiver name is not known\n     * @throws IllegalArgumentException if the stream is null or does not support mark\n     */\n    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException {\n        if (in == null) {\n            throw new IllegalArgumentException(\"Stream must not be null.\");\n        }\n\n        if (!in.markSupported()) {\n            throw new IllegalArgumentException(\"Mark is not supported.\");\n        }\n\n        final byte[] signature = new byte[12];\n        // Mark for the maximum bytes needed for detection (512 for TAR)\n        // Allows resetting after reading different amounts.\n        in.mark(512);\n        try {\n            // Read first 12 bytes\n            // Use in.read(), which might read less than 12 bytes if stream is short or EOF is near.\n            int signatureLength = in.read(signature);\n            in.reset(); // Reset stream to the position marked\n\n            // Check formats needing <= 12 bytes\n            if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                return new ZipArchiveInputStream(in);\n            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                return new JarArchiveInputStream(in);\n            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n                return new ArArchiveInputStream(in);\n            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n                return new CpioArchiveInputStream(in);\n            }\n\n            // Check Dump (needs 32 bytes)\n            // Need to read up to 32 bytes for Dump detection\n            final byte[] dumpsig = new byte[32];\n            // No need to mark again; original mark(512) is sufficient\n            signatureLength = in.read(dumpsig); // Reads up to 32 bytes\n            in.reset(); // Reset stream to the position marked\n            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n                return new DumpArchiveInputStream(in);\n            }\n\n            // Check Tar (needs 512 bytes)\n            // Need to read up to 512 bytes for Tar detection\n            final byte[] tarheader = new byte[512];\n            // No need to mark again\n            signatureLength = in.read(tarheader); // Reads up to 512 bytes\n            in.reset(); // Reset stream to the position marked\n            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n                return new TarArchiveInputStream(in);\n            }\n\n            // The try-catch block below attempted to handle cases where TarArchiveInputStream.matches\n            // might fail but the stream could potentially still be parsed. However, this led to\n            // false positives, such as identifying short text files as TAR archives (COMPRESS-171).\n            // Relying solely on the TarArchiveInputStream.matches check is safer for auto-detection.\n            /*\n            // COMPRESS-117 - improve auto-recognition - REMOVED due to COMPRESS-171\n            try {\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                // The check for getNextEntry was too lenient and caused issues\n                tais.getNextEntry();\n                // If getNextEntry didn't throw, it was assumed to be TAR.\n                return new TarArchiveInputStream(in);\n            } catch (Exception e) { // NOPMD\n                // can generate IllegalArgumentException as well as IOException\n                // autodetection, simply not a TAR\n                // ignored\n            }\n            */\n\n            // Add checks for other stream types here if needed (e.g. 7z)\n\n        } catch (IOException e) {\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n\n        // If no archive format matched the signature\n        throw new ArchiveException(\"No Archiver found for the stream signature\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}