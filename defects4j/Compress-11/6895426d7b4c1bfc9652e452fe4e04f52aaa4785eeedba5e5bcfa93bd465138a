{
    "generation": "    /**\n     * Create an archive input stream from an input stream, autodetecting\n     * the archive type from the first few bytes of the stream. The InputStream\n     * must support marks, like BufferedInputStream.\n     *\n     * @param in the input stream\n     * @return the archive input stream\n     * @throws ArchiveException if the archiver name is not known\n     * @throws IllegalArgumentException if the stream is null or does not support mark\n     */\n    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException {\n        if (in == null) {\n            throw new IllegalArgumentException(\"Stream must not be null.\");\n        }\n\n        if (!in.markSupported()) {\n            throw new IllegalArgumentException(\"Mark is not supported.\");\n        }\n\n        final boolean[] archiveFound = new boolean[1];\n        ArchiveInputStream result = null;\n\n        try {\n            // First check for !<arch> signature (Debian bug #523787)\n            final byte[] signature = new byte[8];\n            in.mark(signature.length);\n            int signatureLength = in.read(signature);\n            in.reset();\n            if (ArArchiveInputStream.matches(signature, signatureLength)) {\n                return new ArArchiveInputStream(in);\n            }\n\n            // Try to check if its a TAR file\n            final byte[] tarheader = new byte[512];\n            in.mark(tarheader.length);\n            signatureLength = in.read(tarheader);\n            in.reset();\n\n            // COMPRESS-117 - improve auto-recognition\n            try {\n                // Create a new TarArchiveInputStream to verify the header\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                try {\n                    tais.getNextEntry();\n                    archiveFound[0] = true;\n                    return new TarArchiveInputStream(in);\n                } catch (Exception e) { // NOPMD\n                    // Not a valid TAR file\n                } finally {\n                    try {\n                        tais.close();\n                    } catch (IOException e) {\n                        // ignore\n                    }\n                }\n            } catch (Exception e) { // NOPMD\n                // Not a TAR file\n            }\n\n            // Now check other archive types\n            in.mark(12);\n            signatureLength = in.read(signature);\n            in.reset();\n            if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                archiveFound[0] = true;\n                return new ZipArchiveInputStream(in);\n            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                archiveFound[0] = true;\n                return new JarArchiveInputStream(in);\n            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n                archiveFound[0] = true;\n                return new CpioArchiveInputStream(in);\n            }\n\n            // Dump needs a bigger buffer to check the signature;\n            final byte[] dumpsig = new byte[32];\n            in.mark(dumpsig.length);\n            signatureLength = in.read(dumpsig);\n            in.reset();\n            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n                archiveFound[0] = true;\n                return new DumpArchiveInputStream(in);\n            }\n        } catch (IOException e) {\n            throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n        }\n\n        if (!archiveFound[0]) {\n            throw new ArchiveException(\"No Archiver found for the stream signature\");\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}