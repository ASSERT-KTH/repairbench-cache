{
    "generation": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n    switch (n.getType()) {\n      case Token.HOOK: {\n        // The ?: operator can return either its \"then\" or its \"else\" branch.\n        Node thenBranch = n.getFirstChild().getNext();\n        Node elseBranch = thenBranch.getNext();\n        return mayBeString(thenBranch, true)\n            || mayBeString(elseBranch, true);\n      }\n      case Token.OR:\n      case Token.AND: {\n        // || and && may return any of their operands,\n        // so if any operand may be a string, the whole may be a string.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (mayBeString(c, true)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      default:\n        // For every other node, require all \"results\" to match the string predicate\n        return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    }\n  } else {\n    return mayBeStringHelper(n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}