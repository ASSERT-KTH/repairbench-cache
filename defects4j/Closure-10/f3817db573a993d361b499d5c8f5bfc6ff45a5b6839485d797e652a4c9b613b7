{
    "generation": "static boolean mayBeString(Node n, boolean recurse) {\n  // If we're not recursing into control\u2010flow nodes, just do the simple check.\n  if (!recurse) {\n    return mayBeStringHelper(n);\n  }\n\n  // Otherwise, walk any branches that can return different values\n  switch (n.getType()) {\n    // conditional expression: cond ? thenExpr : elseExpr\n    case Token.HOOK: {\n      Node thenExpr = n.getFirstChild().getNext();\n      Node elseExpr = thenExpr.getNext();\n      return mayBeString(thenExpr, true) || mayBeString(elseExpr, true);\n    }\n\n    // logical AND/OR can return either side\n    case Token.AND:\n    case Token.OR: {\n      Node left = n.getFirstChild();\n      Node right = left.getNext();\n      return mayBeString(left, true) || mayBeString(right, true);\n    }\n\n    // comma operator returns its last child\n    case Token.COMMA:\n      return mayBeString(n.getLastChild(), true);\n\n    // anything else: fall back to the helper\n    default:\n      return mayBeStringHelper(n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}