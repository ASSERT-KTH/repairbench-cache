{
    "generation": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      // When 'recurse' is true, we want to know if the node 'n' *can possibly*\n      // evaluate to a string. The original implementation used 'allResultsMatch',\n      // which checks if *all* possible outcomes of 'n' are strings.\n      // For expressions like 'cond ? \"1\" : 2', 'allResultsMatch' would return false\n      // because '2' is not a string. However, this expression *can* be a string ('1'),\n      // meaning it *may be* a string.\n      // To correctly identify if a node *may be* a string, we need to check if\n      // *any* of its possible results match the MAY_BE_STRING_PREDICATE.\n      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}