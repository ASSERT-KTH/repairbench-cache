{
    "generation": "public static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    // deal with any possible sign up front\n    int start = (chars[0] == '-') ? 1 : 0;\n    // handle hex\n    if (sz > start + 1) {\n        if (chars[start] == '0' && chars[start + 1] == 'x') {\n            int i = start + 2;\n            if (i == sz) {\n                // \"0x\" is not a valid number\n                return false;\n            }\n            for (; i < sz; i++) {\n                char c = chars[i];\n                if ((c < '0' || c > '9') &&\n                    (c < 'a' || c > 'f') &&\n                    (c < 'A' || c > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    sz--;  // we will deal with the last char separately\n    int i = start;\n    // main loop up to the next to last char\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        char c = chars[i];\n        if (c >= '0' && c <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n        } else if (c == '.') {\n            if (hasDecPoint || hasExp) {\n                return false;\n            }\n            hasDecPoint = true;\n        } else if (c == 'e' || c == 'E') {\n            if (hasExp || !foundDigit) {\n                return false;\n            }\n            hasExp = true;\n            allowSigns = true;\n        } else if (c == '+' || c == '-') {\n            if (!allowSigns) {\n                return false;\n            }\n            // sign is only legal immediately after an exponent\n            allowSigns = false;\n            foundDigit = false;\n        } else {\n            return false;\n        }\n        i++;\n    }\n    // handle the last char\n    if (i < chars.length) {\n        char c = chars[i];\n        if (c >= '0' && c <= '9') {\n            // no type qualifier, OK\n            return true;\n        }\n        if (c == 'e' || c == 'E') {\n            // can't end with an exponent\n            return false;\n        }\n        if (c == '.') {\n            // single trailing decimal point is OK if no prior decimal/exponent\n            return !hasDecPoint && !hasExp && foundDigit;\n        }\n        if (!allowSigns && (c == 'd' || c == 'D' || c == 'f' || c == 'F')) {\n            return foundDigit;\n        }\n        if (c == 'l' || c == 'L') {\n            // not allowing L with an exponent or decimal point\n            return foundDigit && !hasExp && !hasDecPoint;\n        }\n        // last character is illegal\n        return false;\n    }\n    // allowSigns==false iff we didn't end on an unfinished exponent\n    return !allowSigns && foundDigit;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}