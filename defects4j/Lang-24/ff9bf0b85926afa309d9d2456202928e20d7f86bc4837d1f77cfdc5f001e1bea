{
    "generation": "/**\n * <p>Checks whether the String a valid Java number.</p>\n *\n * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n * qualifier, scientific notation and numbers marked with a type\n * qualifier (e.g. 123L).</p>\n *\n * <p><code>Null</code> and empty String will return\n * <code>false</code>.</p>\n *\n * @param str  the <code>String</code> to check\n * @return <code>true</code> if the string is a correctly formatted number\n */\npublic static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    // deal with any possible sign up front\n    int start = (chars[0] == '-') ? 1 : 0;\n    // leading 0x indicates hex\n    if (sz > start + 1) {\n        if (chars[start] == '0' && chars[start + 1] == 'x') {\n            int i = start + 2;\n            if (i == sz) {\n                return false; // str == \"0x\"\n            }\n            // checking hex (it can't be anything else)\n            for (; i < sz; i++) {\n                char c = chars[i];\n                if ((c < '0' || c > '9')\n                    && (c < 'a' || c > 'f')\n                    && (c < 'A' || c > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    sz--; // don't want to loop to the last char, check it afterwards\n    int i = start;\n    // loop to the penultimate char or to the last char if we need another digit\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        char c = chars[i];\n        if (c >= '0' && c <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n        } else if (c == '.') {\n            if (hasDecPoint || hasExp) {\n                return false;\n            }\n            hasDecPoint = true;\n        } else if (c == 'e' || c == 'E') {\n            if (hasExp) {\n                return false;\n            }\n            if (!foundDigit) {\n                return false;\n            }\n            hasExp = true;\n            allowSigns = true;\n        } else if (c == '+' || c == '-') {\n            if (!allowSigns) {\n                return false;\n            }\n            allowSigns = false;\n            foundDigit = false; // we need a digit after the E\n        } else {\n            return false;\n        }\n        i++;\n    }\n    if (i < chars.length) {\n        char c = chars[i];\n        // last char is a digit\n        if (c >= '0' && c <= '9') {\n            return true;\n        }\n        // can't end with an exponent\n        if (c == 'e' || c == 'E') {\n            return false;\n        }\n        // single trailing decimal point after non-exponent is ok\n        if (c == '.') {\n            return !hasDecPoint && !hasExp && foundDigit;\n        }\n        // type qualifiers (D, F allowed always if we've seen a digit)\n        if (!allowSigns && (c == 'd' || c == 'D' || c == 'f' || c == 'F')) {\n            return foundDigit;\n        }\n        // 'L' or 'l' only allowed if no decimal point or exponent\n        if (c == 'l' || c == 'L') {\n            return foundDigit && !hasExp && !hasDecPoint;\n        }\n        // otherwise illegal\n        return false;\n    }\n    // true iff we have at least one digit and didn't end on an unfinished exponent\n    return !allowSigns && foundDigit;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}