{
    "generation": "    /**\n     * Returns true iff they are equal as defined by\n     * {@link #equals(double,double,int) equals(x, y, 1)}.\n     *\n     * @param x first value\n     * @param y second value\n     * @return {@code true} if the values are equal.\n     */\n    public static boolean equals(double x, double y) {\n        // The original implementation was:\n        // return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        // This made equals(Double.NaN, Double.NaN) return true.\n        //\n        // The failing test `testArrayEquals` includes an assertion:\n        // `assertFalse(MathUtils.equals(new double[] { Double.NaN }, new double[] { Double.NaN }));`\n        // This assertion implies that the `MathUtils.equals(double[], double[])` method,\n        // when comparing two arrays containing only `Double.NaN`, should return `false`.\n        //\n        // If `MathUtils.equals(double[], double[])` internally uses `MathUtils.equals(double, double)`\n        // for element-wise comparison, then for this test to pass,\n        // `MathUtils.equals(Double.NaN, Double.NaN)` must return `false`.\n        //\n        // The standard Java double comparison `x == y` correctly returns `false` for `Double.NaN == Double.NaN`.\n        // By removing the explicit `Double.isNaN(x) && Double.isNaN(y)` check, the method reverts\n        // to the standard IEEE 754 behavior where NaN is not equal to itself, which aligns with\n        // the expectation of the `testArrayEquals` method.\n        return x == y;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}