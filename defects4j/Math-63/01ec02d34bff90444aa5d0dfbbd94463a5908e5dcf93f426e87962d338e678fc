{
    "generation": "    /**\n     * Returns true iff they are equal as defined by\n     * {@link #equals(double,double,int) equals(x, y, 1)}.\n     *\n     * @param x first value\n     * @param y second value\n     * @return {@code true} if the values are equal.\n     */\n    public static boolean equals(double x, double y) {\n        // The original implementation returned true for (NaN, NaN).\n        // The failing test `assertFalse(MathUtils.equals(new double[] { Double.NaN }, ...))`\n        // indicates that NaN should not be considered equal to NaN in this context.\n        // The standard '==' operator for doubles already treats Double.NaN == Double.NaN as false.\n        // Relying on '==' directly makes NaN != NaN, while correctly handling other double comparisons\n        // (e.g., 0.0 == -0.0 is true, infinity == infinity is true).\n        return x == y;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}