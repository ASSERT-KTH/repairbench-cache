{
    "generation": "    /**\n     * Returns true iff they are equal as defined by\n     * {@link #equals(double,double,int) equals(x, y, 1)}.\n     * <p>\n     * Note: In releases prior to 3.0, this method treated NaNs differently.\n     * {@code equals(Double.NaN, Double.NaN)} returned {@code true}. Beginning\n     * with 3.0, this is no longer the case. Use {@link #equalsIncludingNaN(double,double)}\n     * if you require the old behavior.\n     * </p>\n     *\n     * @param x first value\n     * @param y second value\n     * @return {@code true} if the values are equal.\n     * @since 3.0\n     */\n    public static boolean equals(double x, double y) {\n        // In older versions (like the one implied by the failing test context),\n        // NaN was not considered equal to NaN for array comparisons,\n        // even if the single-element equals might have.\n        // The standard == operator returns false for NaN == NaN, which matches\n        // the behavior expected by the failing test testArrayEquals.\n        return x == y;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}