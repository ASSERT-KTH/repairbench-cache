{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        if (str == null)\n        {\n            return null;\n        }\n\n        try\n        {\n            // According to the Javadoc of this method:\n            // \"If a . is present, it creates a Double, otherwise a Long.\"\n            // The original implementation using NumberUtils.createNumber\n            // does not strictly adhere to this (e.g., it might return BigDecimal for decimals,\n            // or Integer/BigInteger for integers).\n            // This fix enforces the described behavior.\n            if (str.indexOf('.') != -1)\n            {\n                // If a decimal point is present, create a Double.\n                // This resolves the issue where NumberUtils might return a BigDecimal,\n                // which is not equal to a Double during testing despite having the same value.\n                // Double.valueOf handles standard decimal representations, including scientific notation.\n                return Double.valueOf(str);\n            }\n            else\n            {\n                // If no decimal point is present, create a Long.\n                // This will throw NumberFormatException for inputs like \"123L\" or \"0xFF\",\n                // as Long.valueOf does not parse suffixes or other bases.\n                // This aligns with the strict interpretation of the Javadoc, where\n                // such inputs, if not directly convertible to Long, would be invalid.\n                return Long.valueOf(str);\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            // Log the error and return null as per the original contract for invalid numbers.\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}