{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        if (str == null) {\n            return null;\n        }\n        try\n        {\n            // Check if the string contains a decimal point '.'\n            // This aligns with the javadoc description and standard commons-cli behavior.\n            if (str.indexOf('.') != -1)\n            {\n                // If a decimal point is present, create a Double\n                // This fixes the test failure where NumberUtils might return BigDecimal\n                // causing assertEquals(Double, BigDecimal) to fail.\n                return Double.valueOf(str);\n            }\n            else\n            {\n                // Otherwise, create a Long\n                // Note: This won't handle hex (0x...), octal (0...), or type suffixes (L)\n                // like NumberUtils.createNumber does, but matches the javadoc.\n                return Long.valueOf(str);\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            // If parsing fails (e.g., non-numeric input, or format not handled\n            // by Double.valueOf/Long.valueOf like \"0xFF\"), return null.\n            // Avoid printing to System.err in library code.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}