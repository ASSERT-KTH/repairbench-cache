{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        if (str == null) {\n            return null;\n        }\n        try\n        {\n            // Check if the string contains a decimal point '.'\n            // The original implementation delegated to commons-lang NumberUtils.createNumber,\n            // which prefers Float over Double for \"4.5\", causing the test to fail\n            // as it expected a Double.\n            // The javadoc for this method explicitly states that a '.' should result\n            // in a Double, and otherwise a Long. We implement this logic directly.\n            if (str.indexOf('.') != -1)\n            {\n                // If a dot is present, create a Double\n                return Double.valueOf(str);\n            }\n            else\n            {\n                // If no dot is present, create a Long\n                // Note: This interpretation of the javadoc means formats like\n                // \"1e6\" (which doesn't contain '.') or \"0xFF\" will be parsed as Long\n                // and likely throw NumberFormatException, unlike NumberUtils.createNumber.\n                // However, this aligns with the javadoc and fixes the failing test.\n                return Long.valueOf(str);\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            // Print the specific message from the NumberFormatException, like the original.\n            // Using System.err is generally discouraged in libraries, prefer logging.\n             System.err.println(nfe.getMessage());\n             // Return null if parsing fails, consistent with original behavior on NFE.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}