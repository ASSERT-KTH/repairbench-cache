{
    "generation": "import org.apache.commons.cli.ParseException;\n\n/**\n * <p>Create a number from a String. If a . is present, it creates a\n *    Double, otherwise a Long. </p>\n *\n * @param str the value\n * @return the number represented by <code>str</code>\n * @throws ParseException if <code>str</code> is not a number.\n */\npublic static Number createNumber(String str) throws ParseException {\n    try {\n        // check if the string has a '.'\n        if (str.indexOf('.') != -1) {\n            // it has a ., so create a Double\n            return Double.valueOf(str);\n        } else {\n            // create a Long\n            return Long.valueOf(str);\n        }\n    } catch (NumberFormatException e) {\n        // Re-throw the NumberFormatException as a ParseException\n        // Note: Using e.getMessage() preserves the original reason from NumberFormatException.\n        throw new ParseException(e.getMessage());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}