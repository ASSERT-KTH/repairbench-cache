{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a\n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        if (str == null) {\n            return null;\n        }\n        try {\n            // check if the string contains a dot, if so parse as Double\n            if (str.indexOf('.') != -1) {\n                // Double.valueOf handles exponents (e.g., \"1.2e3\") correctly\n                return Double.valueOf(str);\n            } else {\n                // No dot, parse as Long.\n                // Use Long.decode to handle decimal, hex (0x), and octal (0) prefixes.\n                return Long.decode(str);\n            }\n        } catch (NumberFormatException e) {\n            // The Javadoc specifies returning null if str is not a number.\n            // NumberFormatException indicates it's not a valid number format\n            // for Double or Long (depending on the path taken).\n            \n            // The original code printed the error message, but returning null\n            // is the documented behavior for invalid input.\n            // System.err.println(e.getMessage()); // Removed side-effect\n\n            // We might end up here if the string is too large for Long\n            // or has an invalid format. The comment doesn't specify\n            // handling BigInteger/BigDecimal, so returning null is consistent.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}