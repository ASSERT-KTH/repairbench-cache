{
    "generation": "    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        // Handle null or empty string input as per the \"not a number\" contract.\n        if (str == null || str.length() == 0) {\n            return null;\n        }\n\n        try\n        {\n            // According to the Javadoc: \"If a . is present, it creates a Double\"\n            if (str.indexOf('.') != -1) {\n                return Double.valueOf(str);\n            } \n            // According to the Javadoc: \"otherwise a Long\"\n            else {\n                return Long.valueOf(str);\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            // If the string cannot be parsed as a Number (Double or Long),\n            // the contract states that null should be returned.\n            // The original System.err.println is removed as it's typically debug output.\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}