{
    "generation": "    /**\n     * Return whether or not this entry represents a directory.\n     *\n     * @return True if this entry is a directory.\n     */\n    @Override\n    public boolean isDirectory() {\n        if (file != null) {\n            return file.isDirectory();\n        }\n\n        if (linkFlag == LF_DIR) {\n            return true;\n        }\n\n        // Tar files can designate directories using LF_DIR type flag,\n        // or by naming the entry with a trailing slash \"/\".\n        // Archive libraries should treat both cases as directories.\n        // However, some tar implementations (or bugs) might create entries\n        // for non-directory types (files, links) with names ending in \"/\".\n        // This check prioritizes the link flag for definitive non-directory types.\n\n        // If the flag is explicitly known not to be a directory, trust the flag, ignore the name.\n        // Note: LF_NORMAL (0) and LF_OLDNORM (\\0) are ambiguous and can be used for directories\n        // by convention (name ending with \"/\"), so they are not included here.\n        boolean isExplicitNonDirectory =\n                linkFlag == LF_LINK        // Hard link\n             || linkFlag == LF_SYMLINK     // Symbolic link\n             || linkFlag == LF_CHR         // Character device\n             || linkFlag == LF_BLK         // Block device\n             || linkFlag == LF_FIFO        // FIFO queue\n             || linkFlag == LF_CONTIG      // Contiguous file\n             || linkFlag == LF_GNUTYPE_SPARSE; // GNU sparse file\n             // Includes are simplified, meta types like LongLink/PAX headers implicitly fall through\n             // as they won't have names ending in \"/\" representing user data directories.\n\n        if (isExplicitNonDirectory) {\n            return false;\n        }\n\n        // If the type flag is not definitively non-directory (i.e., it's LF_DIR already handled,\n        // LF_NORMAL, LF_OLDNORM, or unknown), then rely on the trailing slash convention.\n        if (getName().endsWith(\"/\")) {\n            return true;\n        }\n\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}