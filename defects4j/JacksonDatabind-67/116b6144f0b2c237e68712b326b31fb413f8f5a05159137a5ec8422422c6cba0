{
    "generation": "    @Override\n    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        KeyDeserializer deser = null;\n        // First, check specified providers\n        if (_factoryConfig.hasKeyDeserializers()) {\n            // Need BeanDesc for annotations etc\n            // NOTE: changed from introspectClassAnnotations() in 2.9, as key types can be more complex\n            BeanDescription beanDesc = config.introspect(type);\n            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                deser = d.findKeyDeserializer(type, config, beanDesc);\n                if (deser != null) {\n                    break;\n                }\n            }\n        }\n\n        // If not found, only possibilities are standard Enum and String/number/etc key types\n        if (deser == null) {\n            if (type.isEnumType()) {\n                // Changed: Don't return yet, let modifiers run\n                deser = _createEnumKeyDeserializer(ctxt, type);\n            } else {\n                deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n            }\n        }\n\n        // And finally, opportunity for modifications\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyKeyDeserializer(config, type, deser);\n                    // Sanity check, shouldn't occur (if modifier follows contract)\n                    if (deser == null) {\n                         throw new IllegalStateException(String.format(\n                                 \"BeanDeserializerModifier (%s) returned null for type [%s]\",\n                                 mod.getClass().getName(), type));\n                    }\n                }\n            }\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}