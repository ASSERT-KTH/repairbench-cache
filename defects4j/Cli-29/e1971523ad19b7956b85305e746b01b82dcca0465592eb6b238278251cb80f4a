{
    "generation": "    /**\n     * Remove the leading and trailing quotes from <code>str</code>.\n     * E.g. if str is '\"one two\"', then 'one two' is returned.\n     *\n     * @param str The string from which the leading and trailing quotes\n     * should be removed.\n     *\n     * @return The string without the leading and trailing quotes.\n     */\n    static String stripLeadingAndTrailingQuotes(String str)\n    {\n        if (str == null || str.isEmpty()) {\n            return str;\n        }\n\n        // Special case for input being a single quote, as per test case\n        // assertEquals(\"\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"\"));\n        if (str.length() == 1 && str.charAt(0) == '\"') {\n            return str;\n        }\n\n        int start = 0;\n        int end = str.length();\n\n        // Check for leading quote on the original string\n        if (str.startsWith(\"\\\"\")) {\n            start = 1;\n        }\n\n        // Check for trailing quote on the original string\n        if (str.endsWith(\"\\\"\")) {\n            end = str.length() - 1;\n        }\n\n        // If the start index has crossed or met the end index,\n        // it implies that the string effectively became empty (e.g., `\"\"` -> `substring(1,1)` -> `\"\"`).\n        // The `substring` method handles `start == end` by returning an empty string.\n        // Cases where `start > end` (like `\"` -> `substring(1,0)`) are prevented by the special case above.\n        return str.substring(start, end);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}