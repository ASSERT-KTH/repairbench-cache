{
    "generation": "    /**\n     * Remove the leading and trailing quotes from <code>str</code>.\n     * E.g. if str is '\"one two\"', then 'one two' is returned.\n     *\n     * @param str The string from which the leading and trailing quotes\n     * should be removed.\n     *\n     * @return The string without the leading and trailing quotes.\n     */\n    static String stripLeadingAndTrailingQuotes(String str)\n    {\n        // If the string is null or too short to have both leading and trailing quotes,\n        // or if it's just a single quote, return it as is.\n        if (str == null || str.length() < 2) {\n            return str;\n        }\n\n        // Check if the string starts with a quote and ends with a quote.\n        if (str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\")) {\n            // Get the content between the potential leading and trailing quotes.\n            String content = str.substring(1, str.length() - 1);\n\n            // Crucially, only strip the quotes if the content itself does not\n            // contain any quotes. This handles cases like:\n            // \"\\\"foo\\\"\" -> \"foo\" (stripped)\n            // \"\\\"foo\\\" and \\\"bar\\\"\" -> \"\\\"foo\\\" and \\\"bar\\\"\" (not stripped because of internal quotes)\n            if (content.indexOf('\"') == -1) {\n                return content;\n            }\n        }\n        \n        // If the string doesn't start and end with quotes,\n        // or if it contains internal quotes (and thus is not a simple quoted literal),\n        // return the original string.\n        return str;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}