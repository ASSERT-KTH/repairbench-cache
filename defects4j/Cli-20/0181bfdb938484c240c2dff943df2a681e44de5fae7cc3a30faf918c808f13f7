{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n    boolean eatTheRest = false;\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        if (eatTheRest)\n        {\n            tokens.add(token);\n            continue;\n        }\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            if (token.indexOf('=') != -1)\n            {\n                tokens.add(token.substring(0, token.indexOf('=')));\n                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        // burst tokens and options\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            // If the token is an option string (like -option) but doesn't match any defined Option, treat as non-option if stopAtNonOption\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            // In stopAtNonOption mode, if an unrecognized option-like string (e.g., -abtoast) is seen, stop flattening and treat rest as arguments\n            else if (stopAtNonOption)\n            {\n                tokens.add(token);\n                eatTheRest = true;\n            }\n            // requires bursting\n            else\n            {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(token);\n            eatTheRest = true;\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}