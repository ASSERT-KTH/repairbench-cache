{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    // initialize state (tokens, currentOption, eatTheRest, etc.)\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        // Rule 1: if we've already hit a non\u2010option and stopAtNonOption was true,\n        // just copy everything through to the end\n        if (eatTheRest)\n        {\n            tokens.add(token);\n        }\n        // Rule 2/5: long options (--foo or --foo=bar)\n        else if (token.startsWith(\"--\"))\n        {\n            int eqPos = token.indexOf('=');\n            if (eqPos != -1)\n            {\n                // --foo=bar\n                String opt     = token.substring(0, eqPos);\n                String optName = opt.substring(2);\n                String val     = token.substring(eqPos + 1);\n\n                if (options.hasOption(optName))\n                {\n                    tokens.add(opt);\n                    tokens.add(val);\n                }\n                else if (stopAtNonOption)\n                {\n                    // unrecognized long option \u2192 stop flattening\n                    process(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n            else\n            {\n                // --foo\n                String optName = token.substring(2);\n                if (options.hasOption(optName))\n                {\n                    tokens.add(token);\n                }\n                else if (stopAtNonOption)\n                {\n                    process(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n        }\n        // Rule 3: single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        // Rule 4/5: short options or bursts\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                // a simple -x\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                // a single known option like -foo (rare)\n                tokens.add(token);\n            }\n            else\n            {\n                // something like -abc or -abfoo\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // Rule 1 continued: first non\u2010option (does not start with '-') when stopAtNonOption\n        else if (stopAtNonOption)\n        {\n            process(token);\n        }\n        // Rule 6: ordinary non\u2010option\n        else\n        {\n            tokens.add(token);\n        }\n\n        // if the last thing we did was set currentOption that takes an argument,\n        // gobble its argument off the iterator now\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}