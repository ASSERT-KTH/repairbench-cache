{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        // if we see the explicit stop marker, add it and simply copy the rest.\n        if (\"--\".equals(token))\n        {\n            tokens.add(token);\n            gobble(iter);\n            break;\n        }\n\n        // When stopAtNonOption is true, if a token that \u201clooks like\u201d an option isn\u2019t recognized,\n        // then no further token should be \u201cburst\u201d or otherwise processed.\n        if (stopAtNonOption)\n        {\n            if (token.startsWith(\"-\"))\n            {\n                boolean valid = false;\n                if (token.startsWith(\"--\"))\n                {\n                    int pos = token.indexOf('=');\n                    String opt = (pos != -1) ? token.substring(0, pos) : token;\n                    valid = options.hasOption(opt);\n                }\n                else // token starts with \"-\" but not \"--\"\n                {\n                    valid = options.hasOption(token);\n                }\n                if (!valid)\n                {\n                    process(token);\n                    gobble(iter);\n                    break;\n                }\n            }\n            else\n            {  // token does not start with \"-\" so it is definitely a non\u2010option.\n                process(token);\n                gobble(iter);\n                break;\n            }\n        }\n\n        // Otherwise, process the token normally...\n        if (token.startsWith(\"--\"))\n        {\n            if (token.indexOf('=') != -1)\n            {\n                tokens.add(token.substring(0, token.indexOf('=')));\n                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        // In non-stop mode gobble any remaining tokens that might be arguments for an option.\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}