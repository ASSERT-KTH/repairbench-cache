{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n\n        // end-of-options marker \"--\"\n        if (\"--\".equals(token)) {\n            tokens.add(token);\n            if (stopAtNonOption) {\n                // add remaining args raw and exit\n                while (iter.hasNext()) {\n                    tokens.add((String) iter.next());\n                }\n                break;\n            }\n        }\n        // long option: \u201c--foo\u201d or \u201c--foo=bar\u201d\n        else if (token.startsWith(\"--\")) {\n            int idx = token.indexOf('=');\n            String name = (idx != -1) ? token.substring(0, idx) : token;\n            String opt  = name.substring(2);\n            if (options.hasOption(opt)) {\n                // recognized long option\n                tokens.add(name);\n                if (idx != -1) {\n                    tokens.add(token.substring(idx + 1));\n                }\n            }\n            else if (stopAtNonOption) {\n                // unrecognized & stopping: add raw and exit\n                tokens.add(token);\n                while (iter.hasNext()) {\n                    tokens.add((String) iter.next());\n                }\n                break;\n            }\n            else {\n                // unrecognized but not stopping: split on '=' as before\n                if (idx != -1) {\n                    tokens.add(name);\n                    tokens.add(token.substring(idx + 1));\n                } else {\n                    tokens.add(token);\n                }\n            }\n        }\n        // lone hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // short option or burstable token\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token)) {\n                tokens.add(token);\n            }\n            else {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // plain argument in stop-at-non-option mode\n        else if (stopAtNonOption) {\n            process(token);\n        }\n        // plain argument normally\n        else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}