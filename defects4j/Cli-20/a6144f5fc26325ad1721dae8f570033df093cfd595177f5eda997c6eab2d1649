{
    "generation": "    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of\n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see\n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled\n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token = (String) iter.next();\n\n            // handle long option --foo or --foo=bar\n            if (token.startsWith(\"--\"))\n            {\n                String optionName = token;\n                int eq = token.indexOf('=');\n                if (eq != -1) {\n                    optionName = token.substring(0, eq);\n                }\n\n                // If stopAtNonOption is true and this long option is not defined,\n                // treat the entire token as a non-option and stop further option parsing.\n                if (stopAtNonOption && !options.hasOption(optionName)) {\n                    // Add the entire token as a literal argument\n                    tokens.add(token);\n                    // Add all remaining tokens as literal arguments without further processing\n                    while (iter.hasNext()) {\n                        tokens.add((String) iter.next());\n                    }\n                    // All subsequent tokens have been added, so we can exit the loop.\n                    break;\n                }\n                // Original logic for defined long options or when stopAtNonOption is false\n                else if (eq != -1)\n                {\n                    tokens.add(optionName);\n                    tokens.add(token.substring(eq + 1, token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n                    // processOptionToken will handle the 'stopAtNonOption' logic internally,\n                    // including calling gobble() if it's an undefined option and stopAtNonOption is true.\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (options.hasOption(token))\n                {\n                    tokens.add(token);\n                }\n                // requires bursting\n                else\n                {\n                    // burstToken will handle the 'stopAtNonOption' logic internally,\n                    // including calling gobble() if bursting encounters an undefined option.\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else // This is a literal non-option (does not start with '-')\n            {\n                // process() will handle the 'stopAtNonOption' logic internally,\n                // including calling gobble() to consume remaining arguments.\n                process(token);\n            }\n\n            // The call to gobble(iter) here was problematic. It would sometimes consume\n            // remaining arguments prematurely if 'currentToken' was null (e.g., after\n            // processing an undefined long option), even if the explicit 'stopAtNonOption'\n            // condition for that token wasn't fully met in the current branch.\n            // The gobble logic should be strictly managed by processOptionToken, burstToken,\n            // or process when they identify a non-option that triggers the stop condition.\n            // In the case of undefined long options, the logic is now handled directly above.\n            // gobble(iter); // Removed\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}