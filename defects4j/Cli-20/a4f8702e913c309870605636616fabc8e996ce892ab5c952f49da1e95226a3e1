{
    "generation": "    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of\n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see\n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled\n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token = (String) iter.next();\n\n            // if we are in the \"stop processing\" mode, just add the token as-is\n            if (this.stopAtNonOption)\n            {\n                tokens.add(token);\n            }\n            // handle long option --foo or --foo=bar\n            else if (token.startsWith(\"--\"))\n            {\n                int eq = token.indexOf('=');\n                String opt = (eq == -1) ? token : token.substring(0, eq);\n\n                // If it's a known long option, process it normally (potentially splitting)\n                if (options.hasOption(opt))\n                {\n                    if (eq != -1) // has an argument part\n                    {\n                        tokens.add(opt); // Add the option name\n                        tokens.add(token.substring(eq + 1)); // Add the argument\n                    }\n                    else // no argument part\n                    {\n                        tokens.add(token); // Add the option name\n                    }\n                }\n                // If it's an unknown long option\n                else\n                {\n                    // If stopAtNonOption is true (parameter), treat this whole token as a non-option\n                    if (stopAtNonOption)\n                    {\n                        tokens.add(token); // Add the full token\n                        this.stopAtNonOption = true; // Trigger internal stop mode\n                    }\n                    else\n                    {\n                        // If stopAtNonOption is false, just add the whole token as is\n                        // Let the Parser.processToken handle it as an unknown option\n                        tokens.add(token);\n                    }\n                }\n            }\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n                    // processOptionToken already handles setting this.stopAtNonOption\n                    // if the option is invalid and stopAtNonOption (param) is true.\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (options.hasOption(token)) // This branch is for special cases like \"-longoption\" that don't burst\n                {\n                    tokens.add(token);\n                }\n                // requires bursting (e.g., -abc) or is an unknown short option string longer than 2 chars\n                else\n                {\n                    // burstToken already handles setting this.stopAtNonOption\n                    // if an invalid option is found during burst and stopAtNonOption (param) is true.\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            // non-option token (doesn't start with '-')\n            else\n            {\n                // if stopAtNonOption is true (parameter), this is the first non-option token,\n                // so we trigger the internal stop mode for subsequent tokens.\n                if (stopAtNonOption)\n                {\n                    this.stopAtNonOption = true;\n                }\n                tokens.add(token); // Add the current non-option token\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}