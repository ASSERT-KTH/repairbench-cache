{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext())\n    {\n        // get the next command line token\n        String token = (String) iter.next();\n\n        if (token.startsWith(\"--\"))\n        {\n            // When we are not splitting further, we leave the token intact.\n            if (stopAtNonOption)\n            {\n                process(token);\n            }\n            else\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            // If we are not in standard (burst) mode, then check first if the token\n            // is a recognized option. If not\u2014and since stopAtNonOption is true\u2014we\n            // simply process the token as a non-option.\n            else if (!stopAtNonOption && options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    process(token);\n                }\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                process(token);\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}