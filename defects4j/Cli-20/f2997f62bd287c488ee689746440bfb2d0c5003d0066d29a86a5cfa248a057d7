{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    boolean eatTheRest = false; // new flag for stopAtNonOption\n\n    // process each command line token\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        if (eatTheRest)\n        {\n            tokens.add(token);\n            continue;\n        }\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            int eqIdx = token.indexOf('=');\n            if (eqIdx != -1)\n            {\n                tokens.add(token.substring(0, eqIdx));\n                tokens.add(token.substring(eqIdx + 1));\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                // e.g., '-a'\n                if (options.hasOption(token))\n                {\n                    tokens.add(token);\n                }\n                else if (options.hasOption(token.substring(1)))\n                {\n                    tokens.add(token);\n                }\n                else\n                {\n                    if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(token);\n                    }\n                    // Otherwise, ignore the token (per original code behaviour)\n                }\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                boolean burstOK = burstToken(token, stopAtNonOption);\n                if (stopAtNonOption && !burstOK)\n                {\n                    eatTheRest = true;\n                }\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                eatTheRest = true;\n            }\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}