{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n    Iterator<String> iter = Arrays.asList(arguments).iterator();\n    // once we hit an argument that should no longer be processed (non\u2010option or one that\n    // isn\u2019t burstable when stopAtNonOption is true) we just add the rest verbatim.\n    boolean eatTheRest = false;\n    while (iter.hasNext()) {\n        String token = iter.next();\n\n        if (eatTheRest) {\n            tokens.add(token);\n        }\n        // A standalone \"--\" signals end of option processing.\n        else if (\"--\".equals(token)) {\n            tokens.add(token);\n            eatTheRest = true;\n        }\n        // Long options (start with \"--\")\n        else if (token.startsWith(\"--\")) {\n            if (stopAtNonOption) {\n                // Do not split even if an '=' appears.\n                tokens.add(token);\n                eatTheRest = true;\n            } else {\n                int pos = token.indexOf('=');\n                if (pos != -1) {\n                    tokens.add(token.substring(0, pos));\n                    tokens.add(token.substring(pos + 1));\n                } else {\n                    tokens.add(token);\n                }\n            }\n        }\n        // A single hyphen is added as is.\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // Short options (start with \"-\" but not exactly \"-\")\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                // For a two-character token, always process it normally.\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                if (stopAtNonOption) {\n                    // When stopAtNonOption is true, even tokens that would normally be burst\n                    // (like \"-abtoast\") are simply added as a whole and we stop further processing.\n                    tokens.add(token);\n                    eatTheRest = true;\n                } else {\n                    if (options.hasOption(token)) {\n                        tokens.add(token);\n                    } else {\n                        burstToken(token, stopAtNonOption);\n                    }\n                }\n            }\n        }\n        // Non-option tokens.\n        else {\n            tokens.add(token);\n            if (stopAtNonOption) {\n                // Once a non-option is encountered, add the rest unchanged.\n                eatTheRest = true;\n            }\n        }\n    }\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}