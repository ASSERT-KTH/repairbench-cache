{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator<String> iter = Arrays.asList(arguments).iterator();\n    // The tokens list is assumed to be an instance field (e.g. an ArrayList<String>)\n    // and gobble(Iterator) is assumed to add the remaining tokens as-is.\n\n    while (iter.hasNext()) {\n        String token = iter.next();\n\n        /*\n         * If we are in \"stop at non-option\" mode AND the current token does not look like\n         * a proper option, then simply add it and copy over the rest of the tokens.\n         */\n        if (stopAtNonOption) {\n            boolean validOption = false;\n            if (\"-\".equals(token) || \"--\".equals(token)) {\n                validOption = true;\n            } else if (token.startsWith(\"--\")) {\n                int pos = token.indexOf('=');\n                if (pos == -1) {\n                    validOption = options.hasOption(token.substring(2));\n                } else {\n                    validOption = options.hasOption(token.substring(2, pos));\n                }\n            } else if (token.startsWith(\"-\")) {\n                if (token.length() == 2) {\n                    validOption = options.hasOption(token.substring(1));\n                } else {\n                    // For a compound token like \"-abtoast\", check the first letter.\n                    validOption = options.hasOption(token.substring(1, 2));\n                }\n            }\n            // If the token is not a recognized option, then stop further processing.\n            if (!validOption) {\n                tokens.add(token);\n                gobble(iter);\n                break;\n            }\n        }\n\n        if (token.startsWith(\"--\")) {\n            // Handle long options. Normally, if the token is of the form --foo=bar\n            // we split it into two tokens. However, if stopAtNonOption is true\n            // (and the token wasn\u2019t deemed a valid option) we just add it as-is.\n            if (token.indexOf('=') != -1) {\n                if (stopAtNonOption) {\n                    tokens.add(token);\n                } else {\n                    int pos = token.indexOf('=');\n                    tokens.add(token.substring(0, pos));\n                    tokens.add(token.substring(pos + 1));\n                }\n            } else {\n                tokens.add(token);\n            }\n        } else if (\"-\".equals(token)) {\n            tokens.add(token);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else if (options.hasOption(token)) {\n                tokens.add(token);\n            } else {\n                // In non-stop mode, break the token into pieces.\n                // But if stopAtNonOption is true we want to stop any bursting.\n                if (stopAtNonOption) {\n                    tokens.add(token);\n                    gobble(iter);\n                    break;\n                } else {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        } else {\n            // A plain token \u2013 since it's a non-option, we stop further processing.\n            tokens.add(token);\n            gobble(iter);\n            break;\n        }\n        gobble(iter);\n    }\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}