{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    // process each command line token\n    while (iter.hasNext())\n    {\n        // get the next command line token\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            String key = token.indexOf('=') != -1 ? token.substring(0, token.indexOf('=')) : token;\n            if (this.options.hasOption(key))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    tokens.add(token);\n                    // add remaining tokens\n                    while (iter.hasNext())\n                    {\n                        tokens.add((String) iter.next());\n                    }\n                    break; // exit processing\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n        }\n\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                if (this.options.hasOption(token))\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else\n                {\n                    if (stopAtNonOption)\n                    {\n                        tokens.add(token);\n                        // add remaining tokens\n                        while (iter.hasNext())\n                        {\n                            tokens.add((String) iter.next());\n                        }\n                        break; // exit processing\n                    }\n                    // else ignore\n                }\n            }\n            else if (this.options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    tokens.add(token);\n                    // add remaining tokens\n                    while (iter.hasNext())\n                    {\n                        tokens.add((String) iter.next());\n                    }\n                    break; // exit processing\n                }\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(token);\n            // add remaining tokens\n            while (iter.hasNext())\n            {\n                tokens.add((String) iter.next());\n            }\n            break; // exit processing\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}