{
    "generation": "/**\n * <p>An implementation of {@link Parser}'s abstract\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n *\n * <p>The following are the rules used by this flatten method.\n * <ol>\n *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n *  burst anymore of <code>arguments</code> entries, just add each\n *  successive entry without further processing.  Otherwise, ignore\n *  <code>stopAtNonOption</code>.</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is two characters\n *  in length and the first character is \"<b>-</b>\" then check if this\n *  is a valid {@link Option} id.  If it is a valid id, then add the\n *  entry to the list of processed tokens and set the current {@link Option}\n *  member.  If it is not a valid id and <code>stopAtNonOption</code> is true,\n *  then the current entry and all remaining entries are copied to the list of \n *  processed tokens.</li>\n *  <li>if the current <code>arguments</code> entry is more than two\n *  characters in length and the first character is \"<b>-</b>\" then\n *  we need to burst the entry to determine its constituents.  For more\n *  information on the bursting algorithm see \n *  {@link PosixParser#burstToken(String, boolean) burstToken} unless\n *  <code>stopAtNonOption</code> is true, in which case the token is added as is.</li>\n *  <li>if the current <code>arguments</code> entry is not handled \n *  by any of the previous rules, then the entry is added to the list\n *  of processed tokens. And if <code>stopAtNonOption</code> is true, then\n *  no further processing is performed.</li>\n * </ol>\n * </p>\n *\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flattening\n * when an non option is found.\n * @return The flattened <code>arguments</code> String array.\n */\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n    boolean eatTheRest = false;\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n        if (eatTheRest)\n        {\n            tokens.add(token);\n            continue;\n        }\n\n        if (\"--\".equals(token))\n        {\n            tokens.add(token);\n            eatTheRest = true;\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            // Handle long options that begin with \"--\"\n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    // When stopAtNonOption is true, do not split; add the token as is.\n                    if (stopAtNonOption)\n                    {\n                        tokens.add(token);\n                    }\n                    else\n                    {\n                        tokens.add(token.substring(0, token.indexOf('=')));\n                        tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n                    }\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n            else  // Token starts with a single '-' (short option or burstable token)\n            {\n                if (token.length() == 2)\n                {\n                    // If stopAtNonOption is true and the option is not valid, treat it as a non-option.\n                    if (stopAtNonOption && !options.hasOption(token))\n                    {\n                        tokens.add(token);\n                        eatTheRest = true;\n                    }\n                    else\n                    {\n                        processOptionToken(token, stopAtNonOption);\n                    }\n                }\n                else\n                {\n                    // Token is more than two characters long.\n                    if (options.hasOption(token))\n                    {\n                        tokens.add(token);\n                    }\n                    else\n                    {\n                        // If we're in stopAtNonOption mode, do not burst; add token as is and stop further processing.\n                        if (stopAtNonOption)\n                        {\n                            tokens.add(token);\n                            eatTheRest = true;\n                        }\n                        else\n                        {\n                            burstToken(token, stopAtNonOption);\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            tokens.add(token);\n            if (stopAtNonOption)\n            {\n                eatTheRest = true;\n            }\n        }\n    }\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}