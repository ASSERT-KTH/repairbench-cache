{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    boolean eatTheRest = false;\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        if (eatTheRest)\n        {\n            tokens.add(token);\n            continue;\n        }\n\n        if (\"--\".equals(token))\n        {\n            tokens.add(token);\n            eatTheRest = true;\n        }\n        else if (token.startsWith(\"--\"))\n        {\n            int equalsIndex = token.indexOf('=');\n            if (equalsIndex != -1 && equalsIndex != 2) // e.g., \"--foo=bar\"\n            {\n                tokens.add(token.substring(0, equalsIndex));\n                tokens.add(token.substring(equalsIndex + 1));\n            }\n            else if(equalsIndex == 2) // e.g., \"--=bar\" (treat as non-option arg if stopAtNonOption)\n            {\n                if (stopAtNonOption)\n                {\n                    tokens.add(token);\n                    eatTheRest = true;\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.indexOf('=') != -1)\n            {\n                // handle special edge case e.g., --zop==1\n                int idx = token.indexOf('=');\n                String optPart = token.substring(0, idx);\n                if (options.hasOption(optPart))\n                {\n                    tokens.add(optPart);\n                    tokens.add(token.substring(idx + 1));\n                }\n                else\n                {\n                    if (stopAtNonOption)\n                    {\n                        tokens.add(token);\n                        eatTheRest = true;\n                    }\n                    else\n                    {\n                        tokens.add(token);\n                    }\n                }\n            }\n            else\n            {\n                // burst token\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                tokens.add(token);\n                eatTheRest = true;\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}