{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        boolean stopProcessing = false;\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            if (stopProcessing) {\n                tokens.add((String) iter.next());\n                continue;\n            }\n\n            // get the next command line token\n            String token = (String) iter.next();\n\n            // handle long option --foo or --foo=bar\n            if (token.startsWith(\"--\"))\n            {\n                int pos = token.indexOf('=');\n                String opt = pos == -1 ? token : token.substring(0, pos);\n                if (this.options.hasOption(opt))\n                {\n                    if (pos != -1)\n                    {\n                        tokens.add(opt);\n                        tokens.add(token.substring(pos + 1));\n                    }\n                    else\n                    {\n                        tokens.add(opt);\n                    }\n                }\n                else\n                {\n                    if (stopAtNonOption)\n                    {\n                        tokens.add(token);\n                        stopProcessing = true;\n                    }\n                    else\n                    {\n                        if (pos != -1)\n                        {\n                            tokens.add(opt);\n                            tokens.add(token.substring(pos + 1));\n                        }\n                        else\n                        {\n                            tokens.add(opt);\n                        }\n                    }\n                }\n            }\n\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n                    String opt = token.substring(1);\n                    if (this.options.hasOption(opt))\n                    {\n                        processOptionToken(token, stopAtNonOption);\n                    }\n                    else\n                    {\n                        if (stopAtNonOption)\n                        {\n                            tokens.add(token);\n                            stopProcessing = true;\n                        }\n                        else\n                        {\n                            processOptionToken(token, stopAtNonOption);\n                        }\n                    }\n                }\n                else if (this.options.hasOption(token))\n                {\n                    tokens.add(token);\n                }\n                // requires bursting\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                    // Check if bursting caused a non-option to be processed\n                    if (stopAtNonOption && !tokens.isEmpty() && !((String) tokens.get(tokens.size() - 1)).startsWith(\"-\"))\n                    {\n                        stopProcessing = true;\n                    }\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                process(token);\n                stopProcessing = true;\n            }\n            else\n            {\n                tokens.add(token);\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}