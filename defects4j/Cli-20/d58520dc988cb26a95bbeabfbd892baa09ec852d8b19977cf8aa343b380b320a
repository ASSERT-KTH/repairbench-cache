{
    "generation": "    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        List<String> processed = new ArrayList<String>();\n        boolean stop = false;\n\n        for (String token : arguments) {\n            if (stop) {\n                processed.add(token);\n            } else if (\"--\".equals(token)) {\n                processed.add(token);\n                stop = true;\n            } else if (\"-\".equals(token)) {\n                processed.add(token);\n            } else if (token.startsWith(\"--\")) {\n                if (token.indexOf('=') != -1) {\n                    processed.add(token.substring(0, token.indexOf('=')));\n                    processed.add(token.substring(token.indexOf('=') + 1, token.length()));\n                } else {\n                    processed.add(token);\n                }\n            } else if (token.startsWith(\"-\")) {\n                if (token.length() == 2) {\n                    processOptionToken(token, stopAtNonOption);\n                    processed.addAll(tokens);\n                    tokens.clear();\n                } else if (options.hasOption(token)) {\n                    processed.add(token);\n                }\n                // requires bursting\n                else {\n                    burstToken(token, stopAtNonOption);\n                    processed.addAll(tokens);\n                    tokens.clear();\n                }\n            } else if (stopAtNonOption) {\n                stop = true;\n                processed.add(token);\n            } else {\n                processed.add(token);\n            }\n        }\n\n        return (String[]) processed.toArray(new String[processed.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}