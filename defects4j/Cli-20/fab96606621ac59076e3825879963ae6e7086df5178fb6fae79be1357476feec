{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n\n        // literal \u201c--\u201d always stops option processing\n        if (\"--\".equals(token)) {\n            process(token);\n        }\n        // long option \u201c--foo\u201d or \u201c--foo=bar\u201d\n        else if (token.startsWith(\"--\")) {\n            int idx = token.indexOf('=');\n            if (idx != -1) {\n                String opt  = token.substring(0, idx);\n                String val  = token.substring(idx + 1);\n                // unknown long option + stopAtNonOption => treat as non-option\n                if (!options.hasOption(opt) && stopAtNonOption) {\n                    process(token);\n                } else {\n                    tokens.add(opt);\n                    tokens.add(val);\n                }\n            } else {\n                // \u201c--foo\u201d without \u201c=\u201d\n                if (!options.hasOption(token) && stopAtNonOption) {\n                    process(token);\n                } else {\n                    tokens.add(token);\n                }\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // short option or needs bursting\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token)) {\n                tokens.add(token);\n            }\n            else {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // no dash and stopOnNonOption => everything else is args\n        else if (stopAtNonOption) {\n            process(token);\n        }\n        // plain argument\n        else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}