{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator<String> iter = Arrays.asList(arguments).iterator();\n    while (iter.hasNext()) {\n        String token = iter.next();\n\n        // if we see the explicit end-of-options token, copy it and all that follows.\n        if (\"--\".equals(token)) {\n            tokens.add(token);\n            while (iter.hasNext()) {\n                tokens.add(iter.next());\n            }\n            break;\n        }\n\n        if (stopAtNonOption) {\n            // In stopAtNonOption mode, we stop any further bursting.\n            // If the token looks like an option but isn\u2019t a valid one, then treat it \n            // (and all following tokens) as non-options.\n            if (token.startsWith(\"-\") && token.length() > 1) {\n                if (token.length() == 2 && options.hasOption(token)) {\n                    // It is a valid short option so process it normally.\n                    processOptionToken(token, stopAtNonOption);\n                } else if (!options.hasOption(token)) {\n                    // Not a valid option: add this token and all remaining tokens untouched.\n                    tokens.add(token);\n                    while (iter.hasNext()) {\n                        tokens.add(iter.next());\n                    }\n                    break;\n                } else {\n                    // It is a valid long option form which would normally be burst,\n                    // but now we simply add it as is.\n                    tokens.add(token);\n                }\n            } else {\n                // Token does not start with \"-\" so it\u2019s a non-option.\n                tokens.add(token);\n                while (iter.hasNext()) {\n                    tokens.add(iter.next());\n                }\n                break;\n            }\n            gobble(iter);\n        } else {\n            // Normal processing: burst tokens into parts if needed.\n            if (token.startsWith(\"--\")) {\n                int pos = token.indexOf('=');\n                if (pos != -1) {\n                    tokens.add(token.substring(0, pos));\n                    tokens.add(token.substring(pos + 1, token.length()));\n                } else {\n                    tokens.add(token);\n                }\n            } else if (\"-\".equals(token)) {\n                tokens.add(token);\n            } else if (token.startsWith(\"-\")) {\n                if (token.length() == 2) {\n                    processOptionToken(token, stopAtNonOption);\n                } else if (options.hasOption(token)) {\n                    tokens.add(token);\n                } else {\n                    burstToken(token, stopAtNonOption);\n                }\n            } else {\n                tokens.add(token);\n            }\n            gobble(iter);\n        }\n    }\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}