{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            int eq = token.indexOf('=');\n            // name is the part before '=' (or the whole token if no '=')\n            String name = (eq != -1) ? token.substring(0, eq) : token;\n            // strip the leading \"--\" to lookup in options\n            String id = name.substring(2);\n\n            // if we're in stopAtNonOption mode and this long\u2010option is not recognized,\n            // treat it (and everything that follows) as arguments\n            if (stopAtNonOption && !options.hasOption(id))\n            {\n                process(token);\n            }\n            else if (eq != -1)\n            {\n                // valid long option with argument\n                tokens.add(name);\n                tokens.add(token.substring(eq + 1));\n            }\n            else\n            {\n                // valid long option without argument\n                tokens.add(token);\n            }\n        }\n        // a lone hyphen is not an option\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        // short option or burstable cluster\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                // it's a valid multi-character option (e.g. -Dfoo)\n                tokens.add(token);\n            }\n            else\n            {\n                // burst clusters like -abX into -a -b X\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // a non-option in stopAtNonOption mode => eat the rest\n        else if (stopAtNonOption)\n        {\n            process(token);\n        }\n        // plain argument\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}