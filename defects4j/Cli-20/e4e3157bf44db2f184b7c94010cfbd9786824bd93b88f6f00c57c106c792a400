{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    boolean eatTheRest = false;\n\n    // process each command line token\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        if (eatTheRest)\n        {\n            tokens.add(token);\n            continue;\n        }\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            int pos = token.indexOf('=');\n            if (pos != -1)\n            {\n                String opt = token.substring(0, pos);\n                String value = token.substring(pos + 1, token.length());\n\n                // Special case: if token starts with \"--\" and a second '=' directly after (e.g., --zop==1)\n                // treat the whole argument as an argument, not an option\n                if (\"--\".equals(opt) || opt.length() < 3 || (opt.charAt(2) == '=')) {\n                    // This covers the case where there is a double-hyphen, no character(s) for the name,\n                    // or in the special \"--zop==1\" where opt is \"--zop\", value starts with '='.\n                    if (stopAtNonOption) {\n                        tokens.add(token);\n                        eatTheRest = true;\n                    } else {\n                        tokens.add(token);\n                    }\n                }\n                else {\n                    tokens.add(opt);\n                    tokens.add(value);\n                }\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            // requires bursting\n            else\n            {\n                if (stopAtNonOption) {\n                    tokens.add(token);\n                    eatTheRest = true;\n                } else {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(token);\n            eatTheRest = true;\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}