{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n    \n    Iterator iter = Arrays.asList(arguments).iterator();\n    // Process tokens one at a time.\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n        \n        // Check for a long option (starts with \"--\")\n        if (token.startsWith(\"--\")) {\n            if (stopAtNonOption) {\n                // Extract the long option name (without any argument attached)\n                String opt = token;\n                int pos = token.indexOf('=');\n                if (pos != -1) {\n                    opt = token.substring(0, pos);\n                }\n                // If it isn\u2019t recognized as a valid option then just add it\n                // and copy the rest of the tokens verbatim.\n                if (!options.hasOption(opt)) {\n                    tokens.add(token);\n                    gobble(iter);\n                    break;\n                }\n            }\n            // If there is an '=' then split into option and its value.\n            if (token.indexOf('=') != -1) {\n                tokens.add(token.substring(0, token.indexOf('=')));\n                tokens.add(token.substring(token.indexOf('=') + 1));\n            } else {\n                tokens.add(token);\n            }\n        }\n        // Single hyphen, add as is.\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // Option with a single '-' at the start.\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                // For a two-character token like \"-x\": if we are in stopAtNonOption mode\n                // and the option isn\u2019t recognized, then add it literally and copy the rest.\n                if (stopAtNonOption && !options.hasOption(token)) {\n                    tokens.add(token);\n                    gobble(iter);\n                    break;\n                }\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                // For tokens with more than two characters.\n                if (stopAtNonOption && !options.hasOption(token)) {\n                    tokens.add(token);\n                    gobble(iter);\n                    break;\n                } else if (options.hasOption(token)) {\n                    tokens.add(token);\n                } else {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        }\n        // Non-option token.\n        else {\n            if (stopAtNonOption) {\n                process(token);\n                gobble(iter);\n                break;\n            } else {\n                tokens.add(token);\n            }\n        }\n        // In all cases, allow gobbling of remaining tokens if needed.\n        gobble(iter);\n    }\n    \n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}