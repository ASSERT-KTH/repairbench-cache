{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    boolean eatTheRest = false;\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        if (eatTheRest)\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"--\"))\n        {\n            int pos = token.indexOf('=');\n            if (pos != -1)\n            {\n                String opt = token.substring(0, pos);\n                if (!options.hasOption(opt))\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(token);\n                }\n                else\n                {\n                    tokens.add(opt);\n                    tokens.add(token.substring(pos + 1));\n                }\n            }\n            else\n            {\n                if (!options.hasOption(token))\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                if (!options.hasOption(token))\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(token);\n                }\n                else\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                burstToken(token, stopAtNonOption);\n                if (stopAtNonOption)\n                {\n                    // burstToken may not consume the whole token as a valid option,\n                    // so check if we should stop processing.\n                    eatTheRest = true;\n                }\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n            tokens.add(token);\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}