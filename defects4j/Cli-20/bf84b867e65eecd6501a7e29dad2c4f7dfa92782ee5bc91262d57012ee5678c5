{
    "generation": "    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of\n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see\n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled\n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init(); // Resets 'tokens' list member\n        this.options = options;\n\n        // Flag to indicate that following tokens are non-options\n        boolean eatTheRest = false;\n\n        List<String> Earguments = Arrays.asList(arguments); // Use List for iterator access\n        Iterator<String> iter = Earguments.iterator();\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token = iter.next();\n\n            // If stopAtNonOption is enabled and a previous token caused a stop,\n            // just add the token and continue.\n            if (eatTheRest)\n            {\n                this.tokens.add(token);\n            }\n            else\n            {\n                // Special token \"--\" : doesn't cause stop, just passes through.\n                // The parser loop will handle \"--\" and potential stop logic.\n                if (\"--\".equals(token))\n                {\n                    this.tokens.add(token);\n                    // If stopAtNonOption is true, subsequent tokens should be added as is.\n                    // However, \"--\" itself signals the end of options regardless. Let the parser handle it.\n                }\n                // Special token \"-\" : passes through.\n                else if (\"-\".equals(token))\n                {\n                    this.tokens.add(token);\n                }\n                // Long option (--foo or --foo=bar)\n                else if (token.startsWith(\"--\"))\n                {\n                    int pos = token.indexOf('=');\n                    String opt = pos == -1 ? token : token.substring(0, pos);\n\n                    // Check if it is a recognized long option\n                    if (options.hasOption(opt))\n                    {\n                        // Recognized, add accordingly\n                        this.tokens.add(opt);\n                        if (pos != -1)\n                        {\n                            this.tokens.add(token.substring(pos + 1));\n                        }\n                    }\n                    // Not a recognized long option\n                    else if (stopAtNonOption)\n                    {\n                        // Trigger stop, add the original token unmodified\n                        eatTheRest = true;\n                        this.tokens.add(token);\n                    }\n                    else\n                    {\n                        // Not stopping, add the token(s) for the parser to handle.\n                        // The original code split token like --foo=bar even if not recognized.\n                        // Maintain this behavior for compatibility, although adding the original token might be safer.\n                        this.tokens.add(opt); // Add the potential option part\n                        if (pos != -1) {\n                           this.tokens.add(token.substring(pos + 1)); // Add the value part\n                        }\n                    }\n                }\n                // Short option (-X) or cluster (-XYZ)\n                else if (token.startsWith(\"-\"))\n                {\n                    // Single short option (-X)\n                    if (token.length() == 2)\n                    {\n                        // Check if it is a recognized option\n                        if (options.hasOption(token))\n                        {\n                            // Recognized, add it\n                            this.tokens.add(token);\n                        }\n                        // Not recognized\n                        else if (stopAtNonOption)\n                        {\n                            // Trigger stop, add original token\n                            eatTheRest = true;\n                            this.tokens.add(token);\n                        }\n                        // else: Not recognized and not stopping -> ignore (Rule 4)\n                        // No token is added.\n                    }\n                    // Cluster (-XYZ) or potentially longer option (-foo)\n                    else if (options.hasOption(token))\n                    {\n                        // Whole token is a single known option\n                        this.tokens.add(token);\n                    }\n                    // Not a single known option, potentially requires bursting\n                    else if (stopAtNonOption)\n                    {\n                        // Rule 1: \"do not burst anymore\". Treat as non-option, trigger stop.\n                        eatTheRest = true;\n                        this.tokens.add(token);\n                    }\n                    else\n                    {\n                        // Not stopping, requires bursting\n                        // Delegate to burstToken (assuming it exists and works correctly for the !stopAtNonOption case)\n                        // burstToken should add the results to this.tokens\n                        burstToken(token, false); // stopAtNonOption is false here\n                    }\n                }\n                // Non-option argument\n                else\n                {\n                    if (stopAtNonOption)\n                    {\n                        // First non-option, trigger stop\n                        eatTheRest = true;\n                        this.tokens.add(token);\n                    }\n                    else\n                    {\n                        // Not stopping, just add the argument\n                        this.tokens.add(token);\n                    }\n                }\n            }\n            // The original code called gobble(iter) here.\n            // Gobbling arguments should be handled by the main parser loop,\n            // not during flattening, especially with stopAtNonOption logic.\n            // Removing gobble(iter) call.\n            // gobble(iter);\n        }\n\n        return (String[]) this.tokens.toArray(new String[this.tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}