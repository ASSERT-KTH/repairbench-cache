{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n    boolean eatTheRest = false; // this flag will tell us to stop flattening and just add the rest\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        if (eatTheRest) {\n            tokens.add(token);\n            continue;\n        }\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            if (token.indexOf('=') != -1)\n            {\n                // for stopAtNonOption, if \"--foo=bar\" or e.g. \"--foo==bar\", treat as non-option if not valid\n                String opt = token.substring(2, token.indexOf('='));\n                String value = token.substring(token.indexOf('=') + 1, token.length());\n                String prefix = token.substring(0, token.indexOf('='));\n\n                // check if \"--foo\" (or \"--foo=\") is a valid long option in options\n                if (!options.hasLongOption(opt) && stopAtNonOption)\n                {\n                    eatTheRest = true;\n                    tokens.add(token);\n                }\n                else\n                {\n                    tokens.add(prefix);\n                    tokens.add(value);\n                }\n            }\n            else\n            {\n                String opt = token.substring(2);\n                if (!options.hasLongOption(opt) && stopAtNonOption)\n                {\n                    eatTheRest = true;\n                    tokens.add(token);\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                // Single short-option candidate; check if valid, stop at non-option\n                String opt = token.substring(1);\n                if (!options.hasOption(opt) && stopAtNonOption)\n                {\n                    eatTheRest = true;\n                    tokens.add(token);\n                }\n                else\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            // requires bursting\n            else\n            {\n                // For stopAtNonOption=true, if this token is not recognized as an option, treat as non-option and stop\n                // But Posix bursting only if recognized as sequence of short options, else treat as ordinary string\n                boolean allValid = true;\n                for (int i = 1; i < token.length(); ++i) {\n                    String ch = String.valueOf(token.charAt(i));\n                    if (!options.hasOption(ch)) {\n                        allValid = false;\n                        break;\n                    }\n                }\n                if (!allValid && stopAtNonOption) {\n                    eatTheRest = true;\n                    tokens.add(token);\n                }\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n            tokens.add(token);\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}