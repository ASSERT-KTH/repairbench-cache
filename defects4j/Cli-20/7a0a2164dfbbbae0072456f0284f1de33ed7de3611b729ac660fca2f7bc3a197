{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n\n        // if we've already stopped at a non\u2010option, just copy the token verbatim\n        if (stopAtNonOption && eatTheRest) {\n            tokens.add(token);\n        }\n        // handle long option --foo or --foo=bar\n        else if (token.startsWith(\"--\")) {\n            int eq = token.indexOf('=');\n            if (eq != -1) {\n                // split only if the name before '=' is a valid long option\n                String name = token.substring(2, eq);\n                if (options.hasOption(name)) {\n                    tokens.add(token.substring(0, eq));\n                    tokens.add(token.substring(eq + 1));\n                }\n                // unknown long\u2010option with \u201c=\u201d and stopAtNonOption \u2192 treat as argument\n                else if (stopAtNonOption) {\n                    process(token);\n                }\n                // unknown long\u2010option but not stopping \u2192 keep verbatim\n                else {\n                    tokens.add(token);\n                }\n            } else {\n                // plain \u201c--foo\u201d style, leave it alone\n                tokens.add(token);\n            }\n        }\n        // a single hyphen is never burst\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // short option or cluster\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token)) {\n                tokens.add(token);\n            }\n            else {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // first non\u2010option when stopAtNonOption \u2192 switch to \"just copy\" mode\n        else if (stopAtNonOption) {\n            process(token);\n        }\n        // normal argument\n        else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}