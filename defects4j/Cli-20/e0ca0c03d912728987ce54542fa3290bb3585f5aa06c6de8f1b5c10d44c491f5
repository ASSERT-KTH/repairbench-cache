{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token = (String) iter.next();\n\n            // handle long option --foo or --foo=bar\n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n                    if (!processOptionToken(token, stopAtNonOption) && stopAtNonOption)\n                    {\n                        // if we can't process the option and stopAtNonOption is true,\n                        // we need to stop processing and add remaining tokens as is\n                        tokens.add(token);\n                        process(iter);\n                        break;\n                    }\n                }\n                else if (options.hasOption(token))\n                {\n                    tokens.add(token);\n                }\n                // requires bursting\n                else\n                {\n                    if (!burstToken(token, stopAtNonOption) && stopAtNonOption)\n                    {\n                        // if bursting fails and stopAtNonOption is true,\n                        // we need to stop processing and add remaining tokens as is\n                        tokens.add(token);\n                        process(iter);\n                        break;\n                    }\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                tokens.add(token);\n                process(iter);\n                break;\n            }\n            else\n            {\n                tokens.add(token);\n            }\n\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}