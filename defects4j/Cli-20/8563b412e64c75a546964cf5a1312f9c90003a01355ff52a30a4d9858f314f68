{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n\n        // handle long options --foo or --foo=bar\n        if (token.startsWith(\"--\")) {\n            int idx = token.indexOf('=');\n            // extract the option name (without the leading \u201c--\u201d and without any \u201c=value\u201d)\n            String optName = (idx != -1\n                    ? token.substring(2, idx)\n                    : token.substring(2));\n\n            // if we're stopping at the first non\u2010option and this long opt is unrecognized,\n            // treat it and the rest as plain arguments\n            if (stopAtNonOption && !options.hasOption(optName)) {\n                process(token);\n            }\n            // otherwise split at \u201c=\u201d if present\n            else if (idx != -1) {\n                tokens.add(token.substring(0, idx));\n                tokens.add(token.substring(idx + 1));\n            }\n            // or just add the long option as is\n            else {\n                tokens.add(token);\n            }\n        }\n        // a lone hyphen is just added\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // single\u2010hyphen options or bursts thereof\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token)) {\n                tokens.add(token);\n            }\n            else {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // a non\u2010option and we're stopping at non\u2010options \u2192 drain the rest\n        else if (stopAtNonOption) {\n            process(token);\n        }\n        // otherwise just add the token\n        else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}