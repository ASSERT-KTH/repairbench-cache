{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    List<String> argList = Arrays.asList(arguments);\n    Iterator<String> iter = argList.iterator();\n\n    boolean eatTheRest = false;\n\n    while (iter.hasNext())\n    {\n        String token = iter.next();\n\n        if (eatTheRest)\n        {\n            tokens.add(token);\n            continue;\n        }\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            int eqPos = token.indexOf('=');\n\n            if (eqPos != -1)\n            {\n                String opt = token.substring(0, eqPos);\n                // If it's like --XXX==YYY (two =), treat as stop\n                if (opt.endsWith(\"=\") && stopAtNonOption)\n                {\n                    eatTheRest = true;\n                    tokens.add(token);\n                }\n                else\n                {\n                    tokens.add(token.substring(0, eqPos));\n                    tokens.add(token.substring(eqPos + 1));\n                }\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n            tokens.add(token);\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}