{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    boolean eatTheRest = false;\n\n    while (iter.hasNext())\n    {\n        String token = (String) iter.next();\n\n        if (eatTheRest)\n        {\n            tokens.add(token);\n            continue;\n        }\n\n        if (\"--\".equals(token))\n        {\n            tokens.add(token);\n            eatTheRest = true;\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"--\"))\n        {\n            int equalIndex = token.indexOf('=');\n            if (equalIndex != -1)\n            {\n                String opt = token.substring(0, equalIndex);\n                String value = token.substring(equalIndex + 1);\n                tokens.add(opt);\n                tokens.add(value);\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                if (options.hasOption(token))\n                {\n                    tokens.add(token);\n                }\n                else if (stopAtNonOption)\n                {\n                    tokens.add(token);\n                    eatTheRest = true;\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                // handle heuristic similar to GNU style --stop parsing after first unknown or malformed option if stopAtNonOption==true\n                boolean knownOption = false;\n                int firstEq = token.indexOf('=');\n\n                String optToken = token;\n                if (firstEq != -1)\n                {\n                    optToken = token.substring(0, firstEq);\n                }\n\n                if (options.hasOption(optToken))\n                {\n                    tokens.add(token);\n                }\n                else if (stopAtNonOption)\n                {\n                    tokens.add(token);\n                    eatTheRest = true;\n                }\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            tokens.add(token);\n            eatTheRest = true;\n        }\n        else\n        {\n            tokens.add(token);\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}