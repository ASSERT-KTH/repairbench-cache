{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        Iterator iter = Arrays.asList(arguments).iterator();\n        boolean stopProcessingFurtherOptions = false; // Flag to indicate if we've entered the \"stop\" mode\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            String token = (String) iter.next();\n\n            // If we are in \"stop\" mode, just add the token and all subsequent tokens as is.\n            if (stopProcessingFurtherOptions) {\n                tokens.add(token);\n                continue; // Move to the next token, which will also be added as is.\n            }\n\n            // handle long option --foo or --foo=bar\n            if (token.startsWith(\"--\"))\n            {\n                String optionName = null;\n                String optionArg = null;\n                int equalsPos = token.indexOf('=');\n\n                if (equalsPos != -1) {\n                    optionName = token.substring(0, equalsPos);\n                    optionArg = token.substring(equalsPos + 1);\n                } else {\n                    optionName = token;\n                }\n\n                // If the long option (or its prefix before '=') is defined, process normally.\n                if (options.hasOption(optionName)) {\n                    tokens.add(optionName);\n                    if (optionArg != null) {\n                        tokens.add(optionArg);\n                    }\n                }\n                // If it's not a defined long option AND stopAtNonOption is true,\n                // add the whole token as a non-option and trigger the stop.\n                else if (stopAtNonOption) {\n                    tokens.add(token); // Add the entire original token\n                    stopProcessingFurtherOptions = true; // Trigger stop for subsequent tokens\n                }\n                // If it's not a defined long option and stopAtNonOption is false,\n                // treat it as an argument (by splitting if it has '=') and let Parser handle it later.\n                else {\n                    tokens.add(optionName);\n                    if (optionArg != null) {\n                        tokens.add(optionArg);\n                    }\n                }\n            }\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n                    // processOptionToken will set currentOption to null if it's a non-option\n                    // and stopAtNonOption is true.\n                    processOptionToken(token, stopAtNonOption);\n                    if (stopAtNonOption && currentOption == null)\n                    {\n                        stopProcessingFurtherOptions = true;\n                    }\n                }\n                else if (options.hasOption(token))\n                {\n                    tokens.add(token);\n                }\n                // requires bursting\n                else\n                {\n                    // burstToken can also set currentOption to null if a non-option char is found\n                    // and stopAtNonOption is true.\n                    burstToken(token, stopAtNonOption);\n                    if (stopAtNonOption && currentOption == null)\n                    {\n                        stopProcessingFurtherOptions = true;\n                    }\n                }\n            }\n            // If the token doesn't start with '-' (a plain argument)\n            else\n            {\n                // Add the token to the intermediate list.\n                tokens.add(token);\n                // If stopAtNonOption is true, this is the first non-option that triggers the stop.\n                if (stopAtNonOption)\n                {\n                    stopProcessingFurtherOptions = true;\n                }\n            }\n\n            // If the stopProcessingFurtherOptions flag was set in this iteration,\n            // consume all remaining tokens from the iterator and add them to 'tokens' list,\n            // then exit the loop.\n            if (stopProcessingFurtherOptions) {\n                while (iter.hasNext()) {\n                    tokens.add((String) iter.next());\n                }\n                break; // Exit the main loop as all remaining tokens are handled.\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}