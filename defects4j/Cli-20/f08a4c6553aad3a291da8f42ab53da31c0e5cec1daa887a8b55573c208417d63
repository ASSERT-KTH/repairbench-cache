{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    // process each command line token\n    while (iter.hasNext())\n    {\n        // get the next command line token\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            if (token.indexOf('=') != -1)\n            {\n                String opt = token.substring(0, token.indexOf('='));\n                String value = token.substring(token.indexOf('=') + 1, token.length());\n                \n                if (options.hasOption(opt)) {\n                    tokens.add(opt);\n                    tokens.add(value);\n                } else if (stopAtNonOption) {\n                    // add the entire argument as is\n                    process(token);\n                    break;\n                } else {\n                    tokens.add(opt);\n                    tokens.add(value);\n                }\n            }\n            else\n            {\n                if (options.hasOption(token)) {\n                    tokens.add(token);\n                } else if (stopAtNonOption) {\n                    process(token);\n                    break;\n                } else {\n                    tokens.add(token);\n                }\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            // requires bursting\n            else if (stopAtNonOption)\n            {\n                process(token);\n                break;\n            }\n            else\n            {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        else\n        {\n            process(token);\n            if (stopAtNonOption) {\n                break;\n            }\n        }\n\n        gobble(iter);\n    }\n\n    // add any remaining tokens\n    while (stopAtNonOption && iter.hasNext())\n    {\n        tokens.add(iter.next());\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}