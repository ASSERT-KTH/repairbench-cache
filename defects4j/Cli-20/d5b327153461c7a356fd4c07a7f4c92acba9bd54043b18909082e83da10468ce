{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext()) {\n        // get the next command line token\n        String token = (String) iter.next();\n\n        // If this is a long option token\n        if (token.startsWith(\"--\")) {\n            // If we are in stop-at-non-option mode, check if it\u2019s a recognized option.\n            // For a token like \"--foo=bar\", check the option part (\"--foo\").\n            if (stopAtNonOption) {\n                String opt = token.indexOf('=') != -1\n                        ? token.substring(0, token.indexOf('='))\n                        : token;\n                if (!options.hasOption(opt)) {\n                    // Not a valid option: treat the token as an argument and copy the rest.\n                    process(token);\n                    gobble(iter);\n                    continue;\n                }\n            }\n            // Otherwise, process normally:\n            if (token.indexOf('=') != -1) {\n                tokens.add(token.substring(0, token.indexOf('=')));\n                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n            } else {\n                tokens.add(token);\n            }\n        }\n        // Single hyphen: just add it.\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // Option tokens beginning with a single hyphen (like \"-a\" or \"-abtoast\")\n        else if (token.startsWith(\"-\")) {\n            // For tokens of length 2 (e.g. \"-a\")\n            if (token.length() == 2) {\n                if (stopAtNonOption && !options.hasOption(token)) {\n                    process(token);\n                    gobble(iter);\n                    continue;\n                }\n                processOptionToken(token, stopAtNonOption);\n            }\n            // Tokens longer than 2 characters (e.g. \"-abtoast\")\n            else {\n                if (stopAtNonOption && !options.hasOption(token)) {\n                    process(token);\n                    gobble(iter);\n                    continue;\n                }\n                if (options.hasOption(token)) {\n                    tokens.add(token);\n                } else {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n        }\n        // If the token does not start with a hyphen and we are stopping at a non-option,\n        // simply process it (typically adds it to the extra arguments).\n        else if (stopAtNonOption) {\n            process(token);\n        }\n        // Otherwise add the token as-is.\n        else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}