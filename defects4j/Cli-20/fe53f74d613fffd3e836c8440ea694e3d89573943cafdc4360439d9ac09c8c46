{
    "generation": "@Override\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator<?> iter = Arrays.asList(arguments).iterator();\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n\n        // long option or \"--\"\n        if (token.startsWith(\"--\")) {\n            int idx = token.indexOf('=');\n            // case \"--foo=bar\"\n            if (idx != -1) {\n                String name = token.substring(0, idx);\n                String val  = token.substring(idx + 1);\n                // if stopping at first non-option and name isn't a known option, treat as plain arg\n                if (stopAtNonOption && !options.hasOption(name)) {\n                    process(token);\n                    break;\n                }\n                tokens.add(name);\n                tokens.add(val);\n            }\n            // case \"--foo\" or \"--\"\n            else {\n                if (stopAtNonOption && !options.hasOption(token)) {\n                    process(token);\n                    break;\n                }\n                tokens.add(token);\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // short or clustered options\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token)) {\n                tokens.add(token);\n            }\n            else {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // non-option\n        else if (stopAtNonOption) {\n            process(token);\n            break;\n        }\n        else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}