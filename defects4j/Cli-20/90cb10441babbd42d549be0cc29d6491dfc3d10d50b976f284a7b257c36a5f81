{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        Iterator<String> iter = Arrays.asList(arguments).iterator();\n        boolean stopAtNonOptionFound = false; // Added flag to track when we've hit a non-option\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token = iter.next();\n\n            // If we've already found a non-option and stop is true, just process remaining tokens\n            if (stopAtNonOptionFound) {\n                tokens.add(token);\n                continue;\n            }\n\n            // handle long option --foo or --foo=bar\n            if (token.startsWith(\"--\"))\n            {\n                if (token.indexOf('=') != -1)\n                {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n                }\n                else\n                {\n                    tokens.add(token);\n                }\n            }\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n                    processOptionToken(token, stopAtNonOption);\n                }\n                else if (options.hasOption(token))\n                {\n                    tokens.add(token);\n                }\n                // requires bursting\n                else\n                {\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                // Found our first non-option token with stopAtNonOption true\n                tokens.add(token);\n                stopAtNonOptionFound = true;\n            }\n            else\n            {\n                tokens.add(token);\n            }\n\n            // Only gobble if we haven't hit our stop condition yet\n            if (!stopAtNonOptionFound) {\n                gobble(iter);\n            }\n        }\n\n        return tokens.toArray(new String[0]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}