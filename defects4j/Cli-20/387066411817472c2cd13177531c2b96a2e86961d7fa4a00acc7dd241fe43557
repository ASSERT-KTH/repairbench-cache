{
    "generation": "    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of \n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see \n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled \n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        // an iterator for the command line tokens\n        // Assign to the class field 'iter' so helper methods can access it\n        this.iter = Arrays.asList(arguments).iterator();\n\n        // process each command line token\n        while (iter.hasNext())\n        {\n            // get the next command line token\n            String token = (String) iter.next();\n\n            // handle long option --foo or --foo=bar\n            if (token.startsWith(\"--\"))\n            {\n                String optionName = null;\n                int equalSign = token.indexOf('=');\n\n                if (equalSign != -1) {\n                    // Extract the option name before '='\n                    optionName = token.substring(2, equalSign);\n                } else {\n                    // Extract the option name after '--'\n                    optionName = token.substring(2);\n                }\n\n                // If stopAtNonOption is true and the long option is not defined\n                // in the options, then treat the entire token as a non-option\n                // and stop flattening.\n                // PosixParser's hasOption check typically works with the short name (e.g., \"z\" for \"--zop\").\n                // If the option name extracted from the long token is not recognized, it's a non-option.\n                if (stopAtNonOption && !options.hasOption(optionName)) {\n                    tokens.add(token); // Add the entire token as a single non-option\n                    gobble(iter);      // Gobble remaining tokens from the original arguments array\n                    break;             // Exit the loop as flattening has stopped\n                }\n\n                // Otherwise (if not stopping, or if it's a known option), process normally\n                if (equalSign != -1)\n                {\n                    tokens.add(token.substring(0, equalSign)); // Add --foo part\n                    tokens.add(token.substring(equalSign + 1)); // Add bar part (value)\n                }\n                else\n                {\n                    tokens.add(token); // Add --foo as-is\n                }\n            }\n\n            // single hyphen\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            // Short options starting with '-' (e.g., -a, -abc)\n            else if (token.startsWith(\"-\"))\n            {\n                if (token.length() == 2)\n                {\n                    // processOptionToken may call gobble if stop condition is met (e.g., -x where 'x' is not an option)\n                    processOptionToken(token, stopAtNonOption);\n                }\n                // Check if it's a known short option with a specific full name, e.g., \"-foo\" where 'foo' is an option\n                else if (options.hasOption(token.substring(1))) // For token like -foo, check if 'foo' is an option\n                {\n                    tokens.add(token);\n                }\n                // Otherwise, it's a burstable token like -abc or an invalid one like -abtoast\n                else\n                {\n                    // burstToken may call gobble if stop condition is met (e.g., -abtoast where 't' is not an option)\n                    burstToken(token, stopAtNonOption);\n                }\n            }\n            // If token does not start with '-' (i.e., it's a plain argument) and stopAtNonOption is true,\n            // then it's a non-option, and we stop flattening.\n            else if (stopAtNonOption)\n            {\n                tokens.add(token); // Add the non-option\n                gobble(iter);      // Gobble remaining tokens from the original arguments array\n                break;             // Exit the loop as flattening has stopped\n            }\n            // Token does not start with '-' and stopAtNonOption is false, just add it.\n            else\n            {\n                tokens.add(token);\n            }\n\n            // REMOVED: The unconditional gobble(iter) call from here.\n            // `gobble` is now only called when a 'stop' condition is met within the processing logic,\n            // which then exhausts the iterator and causes the loop to terminate.\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}