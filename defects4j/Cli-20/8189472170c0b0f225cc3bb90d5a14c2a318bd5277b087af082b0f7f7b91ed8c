{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\")) {\n            int idx = token.indexOf('=');\n            if (idx != -1) {\n                // extract option name between \"--\" and \"=\"\n                String opt = token.substring(2, idx);\n                // if unknown long option and stopAtNonOption, stop flattening\n                if (!options.hasOption(opt) && stopAtNonOption) {\n                    tokens.add(token);\n                    while (iter.hasNext()) {\n                        tokens.add((String) iter.next());\n                    }\n                    break;\n                }\n                // known --foo=bar: split into \"--foo\" and \"bar\"\n                tokens.add(token.substring(0, idx));\n                tokens.add(token.substring(idx + 1));\n            } else {\n                // handle \"--foo\" (no \"=value\")\n                String opt = token.substring(2);\n                if (!options.hasOption(opt) && stopAtNonOption) {\n                    tokens.add(token);\n                    while (iter.hasNext()) {\n                        tokens.add((String) iter.next());\n                    }\n                    break;\n                }\n                tokens.add(token);\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // single-dash short options or bursts\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else if (options.hasOption(token)) {\n                tokens.add(token);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // non-option and stopAtNonOption => stop flattening\n        else if (stopAtNonOption) {\n            tokens.add(token);\n            while (iter.hasNext()) {\n                tokens.add((String) iter.next());\n            }\n            break;\n        }\n        // plain argument\n        else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}