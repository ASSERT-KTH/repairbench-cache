{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext()) {\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\")) {\n            // special marker \"--\"\n            if (\"--\".equals(token)) {\n                tokens.add(token);\n            } else {\n                int idx = token.indexOf('=');\n                String name = (idx != -1)\n                              ? token.substring(2, idx)\n                              : token.substring(2);\n                if (options.hasOption(name)) {\n                    if (idx != -1) {\n                        tokens.add(token.substring(0, idx));\n                        tokens.add(token.substring(idx + 1));\n                    } else {\n                        tokens.add(token);\n                    }\n                } else {\n                    if (stopAtNonOption) {\n                        process(token);\n                    } else {\n                        tokens.add(token);\n                    }\n                }\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // single-dash options or bursting\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else if (options.hasOption(token)) {\n                tokens.add(token);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // non-option token\n        else if (stopAtNonOption) {\n            process(token);\n        } else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}