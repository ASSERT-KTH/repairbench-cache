{
    "generation": "    /**\n     * <p>An implementation of {@link Parser}'s abstract\n     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n     *\n     * <p>The following are the rules used by this flatten method.\n     * <ol>\n     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n     *  burst anymore of <code>arguments</code> entries, just add each\n     *  successive entry without further processing.  Otherwise, ignore\n     *  <code>stopAtNonOption</code>.</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n     *  just add the entry to the list of processed tokens</li>\n     *  <li>if the current <code>arguments</code> entry is two characters\n     *  in length and the first character is \"<b>-</b>\" then check if this\n     *  is a valid {@link Option} id.  If it is a valid id, then add the\n     *  entry to the list of processed tokens and set the current {@link Option}\n     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n     *  is true, then the remaining entries are copied to the list of\n     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n     *  <li>if the current <code>arguments</code> entry is more than two\n     *  characters in length and the first character is \"<b>-</b>\" then\n     *  we need to burst the entry to determine its constituents.  For more\n     *  information on the bursting algorithm see\n     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n     *  <li>if the current <code>arguments</code> entry is not handled\n     *  by any of the previous rules, then the entry is added to the list\n     *  of processed tokens.</li>\n     * </ol>\n     * </p>\n     *\n     * @param options The command line {@link Options}\n     * @param arguments The command line arguments to be parsed\n     * @param stopAtNonOption Specifies whether to stop flattening\n     * when an non option is found.\n     * @return The flattened <code>arguments</code> String array.\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        init();\n        this.options = options;\n\n        Iterator iter = Arrays.asList(arguments).iterator();\n\n        while (iter.hasNext())\n        {\n            String token = (String) iter.next();\n\n            // This flag is used to detect if this.gobble was set to true\n            // by a helper method (processOptionToken or burstToken) in this iteration.\n            // This is needed because those methods set gobble but do not add the current token.\n            boolean gobbleStateBeforeCall = this.gobble;\n\n            // handle long option --foo or --foo=bar\n            if (token.startsWith(\"--\"))\n            {\n                String optName;\n                int equalsPos = token.indexOf('=');\n\n                if (equalsPos != -1)\n                {\n                    optName = token.substring(0, equalsPos); // \"--foo\"\n                }\n                else\n                {\n                    optName = token; // \"--foo\"\n                }\n\n                // Check if the option name (e.g. \"foo\" from \"--foo\") is defined.\n                // Options.hasOption() expects \"foo\", not \"--foo\".\n                if (options.hasOption(optName.substring(2)))\n                {\n                    tokens.add(optName);\n                    if (equalsPos != -1)\n                    {\n                        tokens.add(token.substring(equalsPos + 1));\n                    }\n                }\n                else if (stopAtNonOption) // Not a valid long option, and stopAtNonOption is true\n                {\n                    tokens.add(token); // Add the original token as is\n                    this.gobble = true; // Stop further processing for subsequent tokens\n                }\n                else // Not a valid long option, and stopAtNonOption is false\n                {\n                    tokens.add(token); // Treat it as an argument\n                }\n            }\n            // handle -- token (end of options)\n            else if (\"--\".equals(token))\n            {\n                tokens.add(token); // Add the -- token\n                this.gobble = true; // All subsequent tokens are arguments\n            }\n            // single hyphen -\n            else if (\"-\".equals(token))\n            {\n                tokens.add(token);\n            }\n            else if (token.startsWith(\"-\")) // short options or bundles: -a, -ab, -abc\n            {\n                if (token.length() == 2) // like -a\n                {\n                    processOptionToken(token, stopAtNonOption);\n                    // If processOptionToken set this.gobble (meaning it found an invalid option for stopAtNonOption),\n                    // it does NOT add the token. So, add it here.\n                    if (stopAtNonOption && this.gobble && !gobbleStateBeforeCall)\n                    {\n                        tokens.add(token);\n                    }\n                }\n                // Removed: `else if (options.hasOption(token))` block.\n                // PosixParser rule 5 states that tokens > 2 chars starting with '-' must be burst.\n                // This means the `else` branch (which calls burstToken) should always be taken.\n                else // token.length() > 2 (e.g. -abtoast)\n                {\n                    burstToken(token, stopAtNonOption);\n                    // If burstToken set this.gobble for the same reason, add the token.\n                    if (stopAtNonOption && this.gobble && !gobbleStateBeforeCall)\n                    {\n                        tokens.add(token);\n                    }\n                }\n            }\n            // Non-hyphen token (e.g. \"myarg\")\n            else\n            {\n                // If stopAtNonOption is true, this non-hyphen token should trigger stopping.\n                if (stopAtNonOption)\n                {\n                    tokens.add(token); // Add the token itself\n                    this.gobble = true; // Set gobble for subsequent tokens\n                }\n                else // Not stopAtNonOption, just add as argument\n                {\n                    tokens.add(token);\n                }\n            }\n\n            // If this.gobble is true, this method will drain the rest of the iterator.\n            // This is the correct mechanism for handling Rule 1.\n            gobble(iter);\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}