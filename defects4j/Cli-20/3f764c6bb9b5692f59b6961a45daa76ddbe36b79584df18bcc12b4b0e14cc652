{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator<String> iter = Arrays.asList(arguments).iterator();\n\n    // process each command line token\n    while (iter.hasNext()) {\n        // get the next command line token\n        String token = iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\")) {\n            if (token.indexOf('=') != -1) {\n                if (token.startsWith(\"--\") && token.length() > 2 && token.substring(2, 3).equals(\"=\")) {\n                    tokens.add(token);\n                } else {\n                    tokens.add(token.substring(0, token.indexOf('=')));\n                    tokens.add(token.substring(token.indexOf('=') + 1));\n                }\n            } else {\n                tokens.add(token);\n            }\n        } \n        // single hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        } \n        // handle short option -foo or -foo=bar\n        else if (token.startsWith(\"-\") && token.length() > 1) {\n            if (token.substring(1).indexOf('=') != -1) {\n                String opt = token.substring(0, token.substring(1).indexOf('=') + 1);\n                String value = token.substring(token.substring(1).indexOf('=') + 2);\n                if (options.hasOption(opt.substring(1))) {\n                    tokens.add(opt);\n                    tokens.add(value);\n                } else if (stopAtNonOption) {\n                    process(token);\n                } else {\n                    burstToken(token, stopAtNonOption);\n                }\n            } else if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else if (options.hasOption(token.substring(1, 2))) {\n                tokens.add(token.substring(0, 2));\n                tokens.addAll(Arrays.asList(token.substring(2).split(\"\")));\n            } else if (stopAtNonOption) {\n                process(token);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        } \n        // handle non-option\n        else if (stopAtNonOption) {\n            process(token);\n        } else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}