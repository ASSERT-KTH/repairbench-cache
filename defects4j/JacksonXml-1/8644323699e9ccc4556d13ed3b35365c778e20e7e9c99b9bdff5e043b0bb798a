{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    _binaryValue = null;\n    if (_nextToken != null) {\n        JsonToken t = _nextToken;\n        _currToken = t;\n        _nextToken = null;\n        switch (t) {\n        case START_OBJECT:\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            break;\n        case START_ARRAY:\n            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            break;\n        case END_OBJECT:\n        case END_ARRAY:\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case FIELD_NAME:\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            break;\n        default:\n            // VALUE_STRING, VALUE_NULL ok\n        }\n        return t;\n    }\n    int token = _xmlTokens.next();\n\n    // Loop in case we need to eat/convert a start\u2010element that\n    // really just indicates an array element\n    while (token == XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            // Nested empty\u2010object case: start a new JSON object\n            _nextToken = JsonToken.FIELD_NAME;\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            // In an array, skip the wrapper start and loop on\n            token = _xmlTokens.next();\n            _mayBeLeaf = true;\n            continue;\n        }\n        String name = _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        // Handle virtual wrapping of lists\n        if (_namesToWrap != null && _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf = true;\n        return (_currToken = JsonToken.FIELD_NAME);\n    }\n\n    switch (token) {\n    case XmlTokenStream.XML_END_ELEMENT:\n        // Empty element: emit an empty JSON object instead of null\n        if (_mayBeLeaf) {\n            _mayBeLeaf = false;\n            _nextToken = JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        // Normal closing of object/array\n        _currToken = _parsingContext.inArray()\n                ? JsonToken.END_ARRAY\n                : JsonToken.END_OBJECT;\n        _parsingContext = _parsingContext.getParent();\n        _namesToWrap = _parsingContext.getNamesToWrap();\n        return _currToken;\n\n    case XmlTokenStream.XML_ATTRIBUTE_NAME:\n        if (_mayBeLeaf) {\n            // Turn a leaf into an object when seeing the first attribute\n            _mayBeLeaf = false;\n            _nextToken = JsonToken.FIELD_NAME;\n            _currText = _xmlTokens.getText();\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        return (_currToken = JsonToken.FIELD_NAME);\n\n    case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n        _currText = _xmlTokens.getText();\n        return (_currToken = JsonToken.VALUE_STRING);\n\n    case XmlTokenStream.XML_TEXT:\n        _currText = _xmlTokens.getText();\n        if (_mayBeLeaf) {\n            // Leaf text\n            _mayBeLeaf = false;\n            _xmlTokens.skipEndElement();\n            // If in array and truly empty, close array, else emit text\n            if (_parsingContext.inArray() && _isEmpty(_currText)) {\n                _currToken = JsonToken.END_ARRAY;\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                return _currToken;\n            }\n            return (_currToken = JsonToken.VALUE_STRING);\n        } else {\n            // Skip empty text in objects\n            if (_parsingContext.inObject()\n                    && (_currToken != JsonToken.FIELD_NAME)\n                    && _isEmpty(_currText)) {\n                _currToken = JsonToken.END_OBJECT;\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                return _currToken;\n            }\n        }\n        // Otherwise, text becomes a property\n        _parsingContext.setCurrentName(_cfgNameForTextElement);\n        _nextToken = JsonToken.VALUE_STRING;\n        return (_currToken = JsonToken.FIELD_NAME);\n\n    case XmlTokenStream.XML_END:\n        return (_currToken = null);\n    }\n\n    // Should never occur\n    _throwInternal();\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}