{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        _binaryValue = null;\n        if (_nextToken != null) {\n            JsonToken t = _nextToken;\n            _currToken = t;\n            _nextToken = null;\n            switch (t) {\n            case START_OBJECT:\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default: // VALUE_STRING, VALUE_NULL\n                // should be fine as is?\n            }\n            return t;\n        }\n        int token = _xmlTokens.next();\n\n        // Need to have a loop just because we may have to eat/convert\n        // a start-element that indicates an array element.\n        while (token == XmlTokenStream.XML_START_ELEMENT) {\n            // If we thought we might get leaf, no such luck\n            if (_mayBeLeaf) {\n                // If we thought the previous element was a leaf (e.g., <foo>),\n                // but then found a child element (e.g., <foo><bar>), it means <foo>\n                // is actually an object.\n                _mayBeLeaf = false; // It's no longer a leaf, it's an object\n                _nextToken = JsonToken.FIELD_NAME; // _nextToken is for <bar>\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1); // Context for <foo>\n                return (_currToken = JsonToken.START_OBJECT); // Return START_OBJECT for <foo>\n            }\n            if (_parsingContext.inArray()) {\n                // If we are in an array context (e.g. `List<Record>`), and we\n                // encounter a START_ELEMENT (e.g. `<records>`), this marks\n                // the beginning of a new item in the array. This item will\n                // always be an object in JSON representation.\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1); // Create context for the array element (e.g., Record)\n                _nextToken = null; // Clear next token state for new object.\n                _mayBeLeaf = true; // Set _mayBeLeaf to true, expecting a leaf content (text, attributes, or empty) within this new object.\n                                   // If we immediately see an END_ELEMENT, it's an empty object.\n                return (_currToken = JsonToken.START_OBJECT); // Return START_OBJECT for the array element\n            }\n            String name = _xmlTokens.getLocalName();\n            _parsingContext.setCurrentName(name);\n\n            // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.\n            // Couple of ways to do it; but start by making _xmlTokens replay the thing...\n            if (_namesToWrap != null && _namesToWrap.contains(name)) {\n                _xmlTokens.repeatStartElement();\n            }\n\n            _mayBeLeaf = true;\n            // Ok: in array context we need to skip reporting field names.\n            // But what's the best way to find next token?\n            return (_currToken = JsonToken.FIELD_NAME);\n        }\n\n        // Ok; beyond start element, what do we get?\n        switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            // Simple, except that if this is a leaf, need to suppress end:\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // As per [dataformat-xml#180]: empty element means empty Object.\n                // If the previous token was START_OBJECT (e.g. for an array element that immediately closed),\n                // the object context is already created.\n                if (_currToken == JsonToken.START_OBJECT) { // This implies an array element that is empty: <records></records>\n                    _currToken = JsonToken.END_OBJECT;\n                    _parsingContext = _parsingContext.getParent(); // Pop the object context\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n                // Otherwise, _mayBeLeaf was set when returning FIELD_NAME (e.g. for <field/> or <field></field>).\n                // We need to create an object context for this field's value, and then close it.\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _nextToken = JsonToken.END_OBJECT;\n                return (_currToken = JsonToken.START_OBJECT);\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            return _currToken;\n            \n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken = JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            return (_currToken = JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                /* One more refinement (pronunced like \"hack\") is that if\n                 * we had an empty String (or all white space), and we are\n                 * deserializing an array, we better hide the empty text.\n                 */\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        // Per [dataformat-xml#180]: empty text node for an array element\n                        // means it's an empty object. The START_OBJECT was already returned.\n                        // Now we need to return END_OBJECT and pop the context.\n                        _currToken = JsonToken.END_OBJECT;\n                        _parsingContext = _parsingContext.getParent();\n                        _namesToWrap = _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken = JsonToken.VALUE_STRING);\n            } else {\n                // [dataformat-xml#177]: empty text may also need to be skipped\n                if (_parsingContext.inObject()\n                        && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                    _currToken = JsonToken.END_OBJECT;\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n            }\n            // If not a leaf (or otherwise ignorable), need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken = null);\n        }\n        \n        // should never get here\n        _throwInternal();\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}