{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    _binaryValue = null;\n    if (_nextToken != null) {\n        JsonToken t = _nextToken;\n        _currToken = t;\n        _nextToken = null;\n        switch (t) {\n        case START_OBJECT:\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            break;\n        case START_ARRAY:\n            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            break;\n        case END_OBJECT:\n        case END_ARRAY:\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case FIELD_NAME:\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            break;\n        default: // VALUE_STRING, VALUE_NULL\n            // should be fine as is?\n        }\n        return t;\n    }\n    int token = _xmlTokens.next();\n\n    // Loop needed to handle a start-element that indicates an array element.\n    while (token == XmlTokenStream.XML_START_ELEMENT) {\n        // If we thought we might get leaf, now we need to convert\n        if (_mayBeLeaf) {\n            // leave _mayBeLeaf set, as we start a new context\n            _nextToken = JsonToken.FIELD_NAME;\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            // In array context, skip reporting field name but mark potential leaf state.\n            token = _xmlTokens.next();\n            _mayBeLeaf = true;\n            continue;\n        }\n        String name = _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n\n        // Wrap element if needed\n        if (_namesToWrap != null && _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n\n        _mayBeLeaf = true;\n        return (_currToken = JsonToken.FIELD_NAME);\n    }\n\n    switch (token) {\n    case XmlTokenStream.XML_END_ELEMENT:\n        // Instead of exposing an empty element as VALUE_NULL, expose it as an empty Object.\n        if (_mayBeLeaf) {\n            _mayBeLeaf = false;\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            _nextToken = JsonToken.END_OBJECT;\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n        _parsingContext = _parsingContext.getParent();\n        _namesToWrap = _parsingContext.getNamesToWrap();\n        return _currToken;\n            \n    case XmlTokenStream.XML_ATTRIBUTE_NAME:\n        // If there was a chance of leaf node, no more...\n        if (_mayBeLeaf) {\n            _mayBeLeaf = false;\n            _nextToken = JsonToken.FIELD_NAME;\n            _currText = _xmlTokens.getText();\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        return (_currToken = JsonToken.FIELD_NAME);\n    case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n        _currText = _xmlTokens.getText();\n        return (_currToken = JsonToken.VALUE_STRING);\n    case XmlTokenStream.XML_TEXT:\n        _currText = _xmlTokens.getText();\n        if (_mayBeLeaf) {\n            _mayBeLeaf = false;\n            // Also: must skip following END_ELEMENT\n            _xmlTokens.skipEndElement();\n            if (_parsingContext.inArray()) {\n                if (_isEmpty(_currText)) {\n                    // Expose empty Object for empty text in arrays\n                    _currToken = JsonToken.END_ARRAY;\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n            }\n            return (_currToken = JsonToken.VALUE_STRING);\n        } else {\n            // Empty text in an object may need to be skipped\n            if (_parsingContext.inObject()\n                    && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                _currToken = JsonToken.END_OBJECT;\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                return _currToken;\n            }\n        }\n        _parsingContext.setCurrentName(_cfgNameForTextElement);\n        _nextToken = JsonToken.VALUE_STRING;\n        return (_currToken = JsonToken.FIELD_NAME);\n    case XmlTokenStream.XML_END:\n        return (_currToken = null);\n    }\n    \n    // Should never reach here\n    _throwInternal();\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}