{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    _binaryValue = null;\n    if (_nextToken != null) {\n        JsonToken t = _nextToken;\n        _currToken = t;\n        _nextToken = null;\n        switch (t) {\n        case START_OBJECT:\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            break;\n        case START_ARRAY:\n            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            break;\n        case END_OBJECT:\n        case END_ARRAY:\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case FIELD_NAME:\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            break;\n        default: // VALUE_STRING, VALUE_NULL\n            // nothing special\n        }\n        return t;\n    }\n\n    int token = _xmlTokens.next();\n\n    // may need to loop if encountering a start-element in an array\n    while (token == XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            // we thought might be leaf, but found nested; start an object\n            _nextToken = JsonToken.FIELD_NAME;\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            // in array context, skip the element wrapper\n            token = _xmlTokens.next();\n            _mayBeLeaf = true;\n            continue;\n        }\n        String name = _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap != null && _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf = true;\n        return (_currToken = JsonToken.FIELD_NAME);\n    }\n\n    switch (token) {\n    case XmlTokenStream.XML_END_ELEMENT:\n        if (_mayBeLeaf) {\n            _mayBeLeaf = false;\n            // expose empty element as empty Object, not null\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            _nextToken = JsonToken.END_OBJECT;\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        _currToken = _parsingContext.inArray()\n            ? JsonToken.END_ARRAY\n            : JsonToken.END_OBJECT;\n        _parsingContext = _parsingContext.getParent();\n        _namesToWrap = _parsingContext.getNamesToWrap();\n        return _currToken;\n\n    case XmlTokenStream.XML_ATTRIBUTE_NAME:\n        if (_mayBeLeaf) {\n            _mayBeLeaf = false;\n            _nextToken = JsonToken.FIELD_NAME;\n            _currText = _xmlTokens.getText();\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken = JsonToken.START_OBJECT);\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        return (_currToken = JsonToken.FIELD_NAME);\n\n    case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n        _currText = _xmlTokens.getText();\n        return (_currToken = JsonToken.VALUE_STRING);\n\n    case XmlTokenStream.XML_TEXT:\n        _currText = _xmlTokens.getText();\n        if (_mayBeLeaf) {\n            _mayBeLeaf = false;\n            // skip the matching end-element\n            _xmlTokens.skipEndElement();\n            // if array and empty text, expose as empty Object\n            if (_parsingContext.inArray() && _isEmpty(_currText)) {\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                _nextToken = JsonToken.END_OBJECT;\n                return (_currToken = JsonToken.START_OBJECT);\n            }\n            // otherwise, normal string value\n            return (_currToken = JsonToken.VALUE_STRING);\n        } else {\n            // skip ignorable whitespace in object context\n            if (_parsingContext.inObject()\n                    && (_currToken != JsonToken.FIELD_NAME)\n                    && _isEmpty(_currText)) {\n                _currToken = JsonToken.END_OBJECT;\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                return _currToken;\n            }\n        }\n        // non-leaf text becomes a text property\n        _parsingContext.setCurrentName(_cfgNameForTextElement);\n        _nextToken = JsonToken.VALUE_STRING;\n        return (_currToken = JsonToken.FIELD_NAME);\n\n    case XmlTokenStream.XML_END:\n        return (_currToken = null);\n    }\n\n    // should never happen\n    _throwInternal();\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}