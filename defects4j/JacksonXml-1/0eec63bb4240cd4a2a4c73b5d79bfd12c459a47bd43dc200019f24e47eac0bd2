{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        _binaryValue = null;\n        if (_nextToken != null) {\n            JsonToken t = _nextToken;\n            _currToken = t;\n            _nextToken = null;\n            switch (t) {\n            case START_OBJECT:\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                 // 10-Oct-2016, tatu: Since this is virtual, needs to be set explicitly\n                //   via this method, not just rely on underlying XML stream:\n                 _parsingContext.setCurrentName(_currText);\n                 break;\n            default: // VALUE_STRING, VALUE_NULL\n                // should be fine as is?\n            }\n            return t;\n        }\n        int token = _xmlTokens.next();\n\n        // Need to have a loop just because we may have to eat/convert\n        // a start-element that indicates an array element.\n        while (token == XmlTokenStream.XML_START_ELEMENT) {\n            // If we thought we might get leaf, no such luck\n            if (_mayBeLeaf) {\n                // leave _mayBeLeaf set, as we start a new context\n                _nextToken = JsonToken.FIELD_NAME;\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                // Ok: must reset current text, since it's not related to this element\n                _currText = _xmlTokens.getLocalName();\n                return (_currToken = JsonToken.START_OBJECT);\n            }\n            if (_parsingContext.inArray()) {\n                // Yup: in array, so this element could be verified; but it won't be\n                // reported anyway, and we need to process following event.\n                token = _xmlTokens.next();\n                _mayBeLeaf = true;\n                continue;\n            }\n            String name = _xmlTokens.getLocalName();\n            _parsingContext.setCurrentName(name);\n            _currText = name; // to be exposed by getCurrentName()\n\n            // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.\n            // Couple of ways to do it; but start by making _xmlTokens replay the thing...\n            if (_namesToWrap != null && _namesToWrap.contains(name)) {\n                _xmlTokens.repeatStartElement();\n            }\n\n            _mayBeLeaf = true;\n            // Ok: in array context we need to skip reporting field names.\n            // But what's the best way to find next token?\n            return (_currToken = JsonToken.FIELD_NAME);\n        }\n\n        // Ok; beyond start element, what do we get?\n        switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            // Simple, except that if this is a leaf, need to suppress end:\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                //    expose as empty Object, not null. Empty String is another\n                //    possibility, but this seems saner.\n                // 28-Oct-2016, tatu: Actually, must skip the mandatory END_ELEMENT that\n                //    follows the TEXT node (whether empty or not)... although maybe that\n                //    should be handled via call to `skipEndElement()` instead. For now, fine.\n                return (_currToken = JsonToken.END_OBJECT);\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();\n            return _currToken;\n\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                // We don't yet have the value; need to keep current name. Best way is to\n                // just store it for now... (note: NOT _currText, which is used for values)\n                 _staxName = _xmlTokens.getLocalName();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken = JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            _currText = _xmlTokens.getLocalName();\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            // note: _staxName is null if we are not converting leaf->object\n            if (_staxName != null) {\n                _parsingContext.setCurrentName(_staxName);\n                _currText = _staxName;\n                _staxName = null;\n                _nextToken = JsonToken.VALUE_STRING;\n                return (_currToken = JsonToken.FIELD_NAME);\n            }\n            _currText = _xmlTokens.getText();\n            return (_currToken = JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n\n                // 06-Jan-2015, tatu: This is the case for <tag> </tag> which should be exposed as\n                //    String value, except if it's empty String... empty String is problematic,\n                //    needs to be considered same as <tag/>, basically.\n                if (_parsingContext.inArray()) {\n                     // [dataformat-xml#180] Need to consider empty textual value as indication\n                     // of empty Object; not null, not just ignore. Need to see what needs\n                     // to be done but... maybe this is enough?\n                     if (_isEmpty(_currText)) {\n                         return (_currToken = JsonToken.END_OBJECT);\n                     }\n                } else if (_isEmpty(_currText)) {\n                    // [dataformat-xml#180], same as above, but not in array context\n                     return (_currToken = JsonToken.END_OBJECT);\n                }\n                // And non-empty text then is just String value, whether in array or not:\n                return (_currToken = JsonToken.VALUE_STRING);\n            }\n            // [dataformat-xml#177]: Otherwise, if we are in Object, have something other\n            // than FIELD_NAME, and get empty text, need to just skip it...\n            if (_parsingContext.inObject()\n                    && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                 return nextToken();\n            }\n            // If not a leaf (or otherwise ignorable), need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            _currText = _cfgNameForTextElement;\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken = null);\n        }\n\n        // should never get here\n        _throwInternal();\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}