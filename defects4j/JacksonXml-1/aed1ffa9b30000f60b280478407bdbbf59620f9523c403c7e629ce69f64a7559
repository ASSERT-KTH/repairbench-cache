{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        _binaryValue = null;\n        if (_nextToken != null) {\n            JsonToken t = _nextToken;\n            _currToken = t;\n            _nextToken = null;\n            // Need to duplicate context handling from below, just in case\n            switch (t) {\n            case START_OBJECT:\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                 // 16-Feb-2015, tatu: Binding side has no access to Stax XML local name,\n                 //   so it has to be pushed here. Context needs to be parent tho\n                 _parsingContext.setCurrentName(_currText); // Use the text passed from FIELD_NAME case\n                break;\n            default: // VALUE_STRING, VALUE_NULL etc\n            }\n            return t;\n        }\n        int token = _xmlTokens.next();\n\n        // Need to have a loop just because we may have to eat/convert\n        // a start-element that indicates an array element.\n        while (token == XmlTokenStream.XML_START_ELEMENT) {\n            // If we thought we might get leaf, no such luck: promote to OBJECT\n            if (_mayBeLeaf) {\n                 _nextToken = JsonToken.FIELD_NAME;\n                 // important: createContext automatically creates OBJECT, bumps up level\n                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                 // Should try to retain local name... But use name FIELD_NAME will report\n                 _currText = _xmlTokens.getLocalName();\n                 // 16-Feb-2015, tatu: Need to set name for context too\n                 _parsingContext.setCurrentName(_currText);\n                 return (_currToken = JsonToken.START_OBJECT);\n            }\n            // Or, seeing element in array context?\n            if (_parsingContext.inArray()) {\n                 // In array context, START_ELEMENT implies START_OBJECT for the list element.\n                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1); // Context for the list item\n                 _mayBeLeaf = true; // This object could be empty, i.e. </...> immediately after\n                 // We don't consume the next token yet. Return START_OBJECT for the item.\n                 return (_currToken = JsonToken.START_OBJECT); // FIX for [#180], part 1\n            }\n            \n            // Otherwise, regular FIELD_NAME entry\n            String name = _xmlTokens.getLocalName();\n            _parsingContext.setCurrentName(name);\n\n            // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.\n            if (_namesToWrap != null && _namesToWrap.contains(name)) {\n                _xmlTokens.repeatStartElement();\n            }\n\n            _mayBeLeaf = true;\n            // Need to store local name to be used by _nextToken handling...\n            _currText = name;\n            return (_currToken = JsonToken.FIELD_NAME);\n        }\n\n        // Ok; beyond start element, what do we get?\n        switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            // Simple, except that if this is a leaf, need to suppress end:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf = false;\n                 // As per [dataformat-xml#180], need to represent as empty Object.\n                 // We should have returned START_OBJECT just before this due to START_ELEMENT in array.\n                 // Now close it. Context is the object context created then.\n                 _currToken = JsonToken.END_OBJECT; // FIX for [#180], part 2a\n                 _parsingContext = _parsingContext.getParent(); // Pop the object context\n                 _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();\n                 return _currToken; // FIX for [#180], part 2b\n             }\n            // Otherwise, normal end element; requires matching START_OBJECT/ARRAY was returned\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = (_parsingContext == null) ? null : _parsingContext.getNamesToWrap();\n            return _currToken;\n            \n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more... Promote to Object.\n             if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                 // important: createContext automatically creates OBJECT, bumps up level\n                 _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                 // We also know the field name (_xmlTokens has it)\n                 _currText = _xmlTokens.getLocalName();\n                 _parsingContext.setCurrentName(_currText); // Also need to set for the context!\n                 return (_currToken = JsonToken.START_OBJECT);\n             }\n             // otherwise, just a FIELD_NAME token...\n            _currText = _xmlTokens.getLocalName(); // Need to store local name to be used by _nextToken handling...\n            _parsingContext.setCurrentName(_currText);\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            return (_currToken = JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                /* One more refinement (pronunced like \"hack\") is that if\n                 * we had an empty String (or all white space), and we are\n                 * deserializing an array, we better hide the empty text.\n                 */\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n\n                // 21-Feb-2015, tatu: Moved from END_ELEMENT handling part\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                        //    expose as empty Object, not null (or, worse, as used to\n                        //    be done, by swallowing the token)\n                        // -> This seems wrong place? Empty text is not empty object?\n                        // TODO: Maybe return VALUE_NULL instead? Or let caller decide?\n                        // For now, let's revert to earlier behavior of swallowing\n                        return nextToken();\n//                        _currToken = JsonToken.END_ARRAY;\n//                        _parsingContext = _parsingContext.getParent();\n//                        _namesToWrap = _parsingContext.getNamesToWrap();\n//                        return _currToken;\n                    }\n                }\n                return (_currToken = JsonToken.VALUE_STRING);\n            } else {\n                // [dataformat-xml#177]: empty text may also need to be skipped\n                 if (_parsingContext.inObject()\n                         && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                     // But what is the appropriate token to return? Seems like we should just\n                     // try to advance?\n                      return nextToken();\n//                    _currToken = JsonToken.END_OBJECT;\n//                    _parsingContext = _parsingContext.getParent();\n//                    _namesToWrap = _parsingContext.getNamesToWrap();\n//                    return _currToken;\n                 }\n             }\n            // If not a leaf (or otherwise ignorable), need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken = null);\n        }\n        \n        // should never get here\n        _throwInternal();\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}