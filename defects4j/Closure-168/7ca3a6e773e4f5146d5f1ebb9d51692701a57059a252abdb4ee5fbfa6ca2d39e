{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    //\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      // Be careful of bleeding functions, which create variables\n      // in the inner scope, not the scope where the name appears.\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n\n  // Fix for testIssue726: Check for function calls and their parameter types\n  if (n.isCall() && n.getFirstChild() != null) {\n    Node callNode = n.getFirstChild();\n    if (callNode.isName()) {\n      String functionName = callNode.getString();\n      Scope scope = t.getScope();\n      Var functionVar = scope.getVar(functionName);\n      if (functionVar != null && functionVar.isFunction()) {\n        Node functionNode = functionVar.getNode();\n        if (functionNode.isFunction()) {\n          Node paramsNode = functionNode.getFirstChild();\n          if (paramsNode.isParamList()) {\n            for (Node paramNode : paramsNode.children()) {\n              if (paramNode.isParam()) {\n                Node typeNode = paramNode.getFirstChild();\n                if (typeNode.isType()) {\n                  // Check if the actual parameter type matches the formal parameter type\n                  Node actualParamNode = n.getChildAt(1); // Assuming the first parameter is at index 1\n                  if (actualParamNode != null && actualParamNode.isLiteral()) {\n                    String actualType = actualParamNode.getType().toString();\n                    String formalType = typeNode.getType().toString();\n                    if (!actualType.equals(formalType)) {\n                      data.get(t.getScopeRoot()).recordTypeMismatch(actualType, formalType);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}