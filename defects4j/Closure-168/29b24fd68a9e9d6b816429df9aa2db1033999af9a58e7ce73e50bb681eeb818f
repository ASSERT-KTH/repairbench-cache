{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    // Skip analysis for shallow scopes (global or near\u2010global).\n    return;\n  }\n\n  // When a variable is written (\u201cassigned\u201d) in an inner scope, we want to mark it;\n  // however, in cases like \"self.bar(...)\" the name \"self\" appears as a child of a GETPROP\n  // that is not actually an assignment.  So, for a bare name node, make sure it isn\u2019t\n  // merely the object part of a property access.\n  if (n.isName() &&\n      (parent == null || !(parent.isGetProp() && parent.getFirstChild() == n)) &&\n      NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      // Mark as escaped if the variable is used in an inner scope.\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  }\n  // For property assignments like \"obj.prop = \u2026\", only record the escape when the GETPROP\n  // node itself is being assigned (i.e. it is the LHS of an assignment).\n  else if (n.isGetProp() &&\n           n.isUnscopedQualifiedName() &&\n           parent != null &&\n           parent.isAssign() &&\n           parent.getFirstChild() == n) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}