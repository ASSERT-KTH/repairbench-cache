{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n\n    if (n.isReturn() && n.getFirstChild() != null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    }\n\n    // Only process variables in function scopes\n    if (t.getScopeDepth() > 2) {\n        if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {\n            String name = n.getString();\n            Scope currentScope = t.getScope();\n            Var var = currentScope.getVar(name);\n            if (var != null) {\n                Scope ownerScope = var.getScope();\n                if (ownerScope != currentScope && ownerScope.isLocal()) {\n                    data.get(ownerScope.getRootNode()).recordAssignedName(name);\n                }\n                // Check if the variable is used in a closure, indicating it's escaped\n                if (currentScope.getOwnerFunction() != null) {\n                    data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n                }\n            }\n        } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {\n            String name = NodeUtil.getRootOfQualifiedName(n).getString();\n            Scope scope = t.getScope();\n            Var var = scope.getVar(name);\n            if (var != null) {\n                Scope ownerScope = var.getScope();\n                if (scope != ownerScope && ownerScope.isLocal() && scope.getOwnerFunction() != null) {\n                    data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}