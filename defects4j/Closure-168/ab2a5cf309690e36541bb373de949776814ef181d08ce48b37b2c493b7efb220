{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  // Record any non-empty return in this function.\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  // We only collect \"escaped\" and \"reassigned\" locals in functions deeper\n  // than two levels (global + one function).\n  if (t.getScopeDepth() <= 2) {\n    return;\n  }\n\n  // 1) Handle writes to simple names.\n  if (n.isName() && NodeUtil.isLValue(n)\n      && !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      // (a) multiple writes in the same function\n      if (ownerScope.isLocal() && scope == ownerScope) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      // (b) writes to an outer-scope local => escaped var\n      if (ownerScope.isLocal() && scope != ownerScope) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n\n  // 2) Handle _reads_ of simple names (free\u2010variable capture).\n  } else if (n.isName() && !NodeUtil.isLValue(n)\n             && !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      // any read of an outer\u2010scope local in a nested function is an escape\n      if (ownerScope.isLocal() && scope != ownerScope) {\n        data.get(t.getScopeRoot()).recordEscapedVarName(name);\n      }\n    }\n\n  // 3) Handle writes to qualified names (a.b = ...)\n  } else if (n.isGetProp()\n             && n.isUnscopedQualifiedName()\n             && NodeUtil.isLValue(n)) {\n    String root = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(root);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal() && scope != ownerScope) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}