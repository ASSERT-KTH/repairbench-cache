{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Don't do any of this in the global scope.\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  // Track any non\u2010empty return (for higher\u2010order analysis).\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  // Only skip the literal global scope \u2014 we still need to\n  // observe assignments (e.g. \u201cvar self = this\u201d) in first\u2010order functions.\n  if (t.getScopeDepth() <= 1) {\n    return;\n  }\n\n  // Record simple name assignments and escapes.\n  if (n.isName()\n      && NodeUtil.isLValue(n)\n      // Skip specially \u201cbleeding\u201d function names.\n      && !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n\n  // Record qualified\u2010name escapes (e.g. obj.prop = ...).\n  } else if (n.isGetProp()\n             && n.isUnscopedQualifiedName()\n             && NodeUtil.isLValue(n)) {\n    String root = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(root);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}