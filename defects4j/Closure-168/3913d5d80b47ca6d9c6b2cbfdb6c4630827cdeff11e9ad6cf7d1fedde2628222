{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  // Record if this function ever returns a non\u2010empty value\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  // Only record deeper\u2010scope assignments/escapes\n  if (t.getScopeDepth() <= 2) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  // Handle both writes and reads of simple names\n  if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        // If this name is being written to, record re-assignment\n        if (NodeUtil.isLValue(n)) {\n          data.get(ownerScope.getRootNode()).recordAssignedName(name);\n        }\n        // If we're in a deeper scope than where it was declared,\n        // record that it \"escapes\" that scope\n        if (scope != ownerScope) {\n          data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n        }\n      }\n    }\n\n  // Also handle writes to qualified names (e.g. obj.prop = ...)\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n             NodeUtil.isLValue(n)) {\n    String root = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(root);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal() && scope != ownerScope) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}