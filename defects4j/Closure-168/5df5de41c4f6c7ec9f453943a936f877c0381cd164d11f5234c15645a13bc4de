{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Never analyze in the global (script) scope.\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  // Record any non-empty return (i.e. returning a value) on the\n  // current function.\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  // Only do the expensive name\u2010and\u2010property\u2010tracking in non-global scopes.\n  // (We treat globals as escaped by default, so skip them here.)\n  if (t.getScopeDepth() <= 2) {\n    return;\n  }\n\n  // Track assignments to local names.\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n\n  // Also treat *any* property\u2010read on an unscoped root name as an escape,\n  // not just when it\u2019s on the left\u2010hand side of an assignment.\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName()) {\n    String root = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(root);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}