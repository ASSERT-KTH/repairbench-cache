{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Skip only true globals.\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  // Process nodes for all non\u2010global functions.\n  // (Previously we returned for scope depth \u22642, which\n  //  skipped first\u2010order functions that declare variables used\n  //  in inner functions. Now we only return for depth <2.)\n  if (t.getScopeDepth() < 2) {\n    return;\n  }\n\n  // For a plain name reference, record an assignment only if\n  // it really occurs as an assignment target\u2014that is, not when the\n  // name is merely used as the object in a property access.\n  if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {\n    if (NodeUtil.isLValue(n) && (parent == null || !parent.isGetProp())) {\n      String name = n.getString();\n      Scope scope = t.getScope();\n      Var var = scope.getVar(name);\n      if (var != null) {\n        Scope ownerScope = var.getScope();\n        if (ownerScope.isLocal()) {\n          data.get(ownerScope.getRootNode()).recordAssignedName(name);\n        }\n        if (scope != ownerScope && ownerScope.isLocal()) {\n          data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n        }\n      }\n    }\n  }\n  // For a get-property node, record an escaped qualified name only if it is\n  // really assigned to (for example, in \"obj.prop = \u2026\").\n  else if (n.isGetProp() && n.isUnscopedQualifiedName()) {\n    if (parent != null && parent.isAssign() && parent.getFirstChild() == n) {\n      String name = NodeUtil.getRootOfQualifiedName(n).getString();\n      Scope scope = t.getScope();\n      Var var = scope.getVar(name);\n      if (var != null) {\n        Scope ownerScope = var.getScope();\n        if (scope != ownerScope && ownerScope.isLocal()) {\n          data.get(ownerScope.getRootNode())\n              .recordEscapedQualifiedName(n.getQualifiedName());\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}