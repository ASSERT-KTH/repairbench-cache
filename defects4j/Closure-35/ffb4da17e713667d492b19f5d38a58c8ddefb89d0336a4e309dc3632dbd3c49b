{
    "generation": "/**\n * Suppose X is an object with inferred properties.\n * Suppose also that X is used in a way where it would only type-check\n * correctly if some of those properties are widened.\n * Then we should be polite and automatically widen X's properties for him.\n *\n * For a concrete example, consider:\n * param x {{prop: (number|undefined)}}\n * function f(x) {}\n * f({});\n *\n * If we give the anonymous object an inferred property of (number|undefined),\n * then this code will type-check appropriately.\n */\nprivate void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  // If we're dealing with a union, recurse on each alternate branch.\n  if (type.isUnionType()) {\n    for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n      inferPropertyTypesToMatchConstraint(alt, constraint);\n    }\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType =\n        ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          // If the property doesn't even exist on the obj yet,\n          // widen it with void so that \"absent\" is allowed.\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}