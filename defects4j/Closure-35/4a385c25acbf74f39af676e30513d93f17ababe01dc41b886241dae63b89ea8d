{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      // Handle the case where 'type' might be a union type.\n      // We need to ensure that each object alternate in the union\n      // satisfies the constraint by potentially inferring properties.\n      JSType typeRestricted = type.restrictByNotNullOrUndefined();\n      for (JSType typeAlternate : typeRestricted.getUnionMembers()) {\n        ObjectType objType = ObjectType.cast(typeAlternate);\n        if (objType != null) {\n          for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            // If the property is not explicitly declared on the object type,\n            // we may need to infer it based on the constraint.\n            if (!objType.isPropertyTypeDeclared(prop)) {\n              JSType typeToInfer = propType;\n              // If the object type doesn't even have the property implicitly,\n              // it means the property is missing. In this case, the constraint\n              // implies it could be void (undefined).\n              if (!objType.hasProperty(prop)) {\n                // We need access to JSTypeRegistry to get VOID_TYPE.\n                // Assuming 'registry' is an accessible field/method providing it.\n                typeToInfer =\n                    registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE)\n                        .getLeastSupertype(propType);\n              }\n              // Define the inferred property on this object type alternate.\n              // This helps satisfy the constraint for this branch of the union.\n              // The 'null' indicates this is an inferred property without a specific AST node.\n              objType.defineInferredProperty(prop, typeToInfer, /* node= */ null);\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}