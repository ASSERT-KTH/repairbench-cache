{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop); // Type T from constraint {prop: T}\n          if (!objType.isPropertyTypeDeclared(prop)) { // Only modify undeclared properties\n            JSType typeToInfer = null; // The type we will infer for the property\n            JSType existingType = objType.getPropertyType(prop); // Existing inferred type E\n\n            if (!objType.hasProperty(prop)) {\n              // Property is missing on the object type.\n              // Infer it as T | undefined.\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            } else {\n              // Property exists and is inferred (since !isPropertyTypeDeclared is true).\n              // Widen the existing type E to accommodate the constraint type T.\n              // The widened type should be the least supertype of E and T.\n              if (existingType != null && !existingType.isUnknownType()) {\n                 typeToInfer = existingType.getLeastSupertype(propType);\n              } else {\n                 // If existing type is null or unknown, just use the constraint type T.\n                 typeToInfer = propType;\n              }\n            }\n\n            // Define or update the inferred property if we determined a type\n            // and the new type is actually different from the existing one.\n            if (typeToInfer != null) {\n               if (existingType == null || existingType.isUnknownType() ||\n                   !typeToInfer.isEquivalentTo(existingType)) {\n                  objType.defineInferredProperty(prop, typeToInfer, null);\n               }\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}