{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      // The original code implicitly assumed 'type' was a single ObjectType.\n      // However, 'type' can be a union of object types (e.g., from an if/else branch).\n      // We need to apply the property inference to each constituent object type within the union.\n\n      JSType restrictedType = type.restrictByNotNullOrUndefined();\n\n      // Collect all relevant object types from the restrictedType.\n      // We use a Set to handle potential duplicates if the union contains redundant members.\n      Set<ObjectType> objTypesToInfer = new LinkedHashSet<>();\n      for (JSType member : restrictedType.getUnionMembers()) {\n          // We only want to infer properties on object literals or structural record types,\n          // not on instances of declared classes/interfaces or built-in objects (like Object, Function).\n          if (member.isObjectType()\n              && !member.isConstructorResolved()\n              && !member.isInterfaceResolved()\n              && !member.isBuiltinObject()) {\n              objTypesToInfer.add(member.toObjectType());\n          }\n      }\n\n      for (ObjectType objType : objTypesToInfer) {\n        // objType is now guaranteed to be an ObjectType that is eligible for inferred property modification.\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            // If the property is not explicitly declared on objType (e.g., in an object literal).\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              // If the property does not exist on objType at all (neither declared nor inferred).\n              // We infer its type to be 'propType' unioned with 'undefined'.\n              // This is crucial for cases like `f({});` where `x` expects `{prop: number|undefined}`.\n              // If `objType` is `{}` (represented by NoObjectType) and `constraint` implies `propType`,\n              // then the inferred type for the missing property should include undefined.\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}