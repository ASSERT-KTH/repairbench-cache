{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            // If the property is already inferred to a type that's not related\n            // to the type of this property on the constraint, then widen to unknown.\n            // This is to prevent a case where a property is inferred to two different types\n            // in different branches of the code, and we pick one arbitrarily.\n            JSType existingType = objType.getPropertyType(prop);\n            if (existingType != null && !existingType.isSubtypeOf(typeToInfer)\n                && !typeToInfer.isSubtypeOf(existingType)) {\n              typeToInfer = getNativeType(UNKNOWN_TYPE);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}