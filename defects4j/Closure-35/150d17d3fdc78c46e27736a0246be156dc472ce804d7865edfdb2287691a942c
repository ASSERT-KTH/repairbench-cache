{
    "generation": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj == null || !constraintObj.isRecordType()) {\n    return;\n  }\n\n  // If \u201ctype\u201d is a union of object types (as is typical for an object literal\n  // coming from different control\u2010flow branches) then process each alternate.\n  UnionType union = type.toMaybeUnionType();\n  if (union != null) {\n    for (JSType alt : union.getAlternates()) {\n      ObjectType altObj = ObjectType.cast(alt.restrictByNotNullOrUndefined());\n      if (altObj == null) {\n        continue;\n      }\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        // Only automatically widen properties that weren\u2019t explicitly declared.\n        if (!altObj.isPropertyTypeDeclared(prop)) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType typeToInfer = propType;\n          // If the property isn\u2019t present on this alternate, widen its type by\n          // unioning with undefined.\n          if (!altObj.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          altObj.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n    return;\n  }\n\n  // Otherwise, treat type as a single object type.\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType != null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}