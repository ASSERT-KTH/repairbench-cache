{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            // Property is not declared, so we infer it directly\n            objType.defineInferredProperty(prop, propType, null);\n          } else {\n            // Property is declared, so we need to widen it\n            JSType currentPropType = objType.getPropertyType(prop);\n            JSType widenedType = getNativeType(VOID_TYPE).getLeastSupertype(propType, currentPropType);\n            objType.defineInferredProperty(prop, widenedType, null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}