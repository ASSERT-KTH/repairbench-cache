{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   *\n   * This function is also responsible for handling structural matching\n   * of object literal types defined in unions. For example,\n   * ({prop1: 1}|{prop2: 2}) assigned to {prop1: (number|undefined)}\n   * requires prop1 to be added to the {prop2: 2} branch.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    // Handle union types by looking at each branch of the union recursively.\n    // This is necessary for cases like Issue 669 where a union of object\n    // literals needs to be matched against a record type constraint.\n    if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        inferPropertyTypesToMatchConstraint(alternate, constraint);\n      }\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    // We only need to infer properties for record types constraints.\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      // If the type being checked is an object type, try to infer missing properties.\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n\n          // If the constraint has a property that's not explicitly declared\n          // on the object type, and the object type doesn't already have\n          // this property (either declared or inferred), then infer it.\n          // We check !isPropertyTypeDeclared to ensure we don't override\n          // explicitly declared properties (e.g., from superclasses).\n          // We check !hasProperty to ensure we only add truly missing properties.\n          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {\n            // Infer the property type using the constraint's property type,\n            // widened by undefined. This makes the object structurally\n            // compatible with the constraint, assuming the property is optional.\n            JSType typeToInfer =\n                registry.getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n          // NOTE: The original code had logic to potentially redefine existing inferred\n          // properties (!isPropertyTypeDeclared && hasProperty). This logic was removed\n          // as it seemed to overwrite existing types rather than widening them,\n          // potentially leading to incorrect type information or errors.\n          // Compatibility of existing properties is handled by standard subtyping checks.\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}