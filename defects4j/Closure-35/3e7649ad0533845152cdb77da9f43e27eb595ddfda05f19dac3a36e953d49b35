{
    "generation": "  /**\n   * Suppos e X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      // Collect all potential object types from 'type' that might need property inference.\n      // This handles single object types as well as union types of objects.\n      ImmutableList<JSType> typesToInfer = null;\n      if (type.isUnionType()) {\n        typesToInfer = type.toMaybeUnionType().getAlternates();\n      } else if (type.isObjectType()) {\n        typesToInfer = ImmutableList.of(type);\n      }\n\n      if (typesToInfer != null) {\n        for (JSType currentType : typesToInfer) {\n          // Only process actual object types (after stripping null/undefined).\n          ObjectType objType = ObjectType.cast(currentType.restrictByNotNullOrUndefined());\n          if (objType != null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n              JSType propType = constraintObj.getPropertyType(prop);\n              // Only infer if the property is not explicitly declared on objType.\n              // This is crucial to avoid overwriting user-declared types.\n              if (!objType.isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                // If the property doesn't exist on the object, it should be inferred as\n                // its constraint type OR undefined, whatever is more general.\n                // For example, if constraint wants 'number|undefined' and the property\n                // doesn't exist, we infer 'number|undefined'.\n                if (!objType.hasProperty(prop)) {\n                  typeToInfer =\n                      getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                }\n                // Define or widen the inferred property.\n                // defineInferredProperty will take the least common supertype\n                // between the existing inferred type and typeToInfer.\n                objType.defineInferredProperty(prop, typeToInfer, null);\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}