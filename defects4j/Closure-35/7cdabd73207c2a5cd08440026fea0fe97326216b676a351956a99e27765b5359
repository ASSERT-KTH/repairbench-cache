{
    "generation": "/**\n * Suppose X is an object with inferred properties.\n * Suppose also that X is used in a way where it would only type-check\n * correctly if some of those properties are widened.\n * Then we should be polite and automatically widen X's properties for him.\n *\n * For a concrete example, consider:\n * param x {{prop: (number|undefined)}}\n * function f(x) {}\n * f({});\n *\n * If we give the anonymous object an inferred property of (number|undefined),\n * then this code will type-check appropriately.\n */\nprivate void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  // Only record\u2010typed constraints are interesting.\n  JSType constRestricted = constraint.restrictByNotNullOrUndefined();\n  ObjectType constraintObj = ObjectType.cast(constRestricted);\n  if (constraintObj == null || !constraintObj.isRecordType()) {\n    return;\n  }\n\n  // Strip null/undefined from the actual type.\n  JSType actualRestricted = type.restrictByNotNullOrUndefined();\n  // If it\u2019s a union, recurse into each alternative so we widen each record.\n  if (actualRestricted.isUnionType()) {\n    for (JSType alt : actualRestricted.toMaybeUnionType().getAlternates()) {\n      inferPropertyTypesToMatchConstraint(alt, constraint);\n    }\n    return;\n  }\n\n  // Otherwise if it\u2019s a single object, add any missing props.\n  ObjectType objType = ObjectType.cast(actualRestricted);\n  if (objType == null) {\n    return;\n  }\n\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!objType.isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      // If the object didn\u2019t even have the property, make it optional.\n      if (!objType.hasProperty(prop)) {\n        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n      }\n      objType.defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}