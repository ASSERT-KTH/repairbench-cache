{
    "generation": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  // Strip null/undefined from the actual type.\n  JSType typeNonNull = type.restrictByNotNullOrUndefined();\n  // If it's a union, recurse on each alternate.\n  UnionType unionType = typeNonNull.toMaybeUnionType();\n  if (unionType != null) {\n    for (JSType alt : unionType.getAlternates()) {\n      inferPropertyTypesToMatchConstraint(alt, constraint);\n    }\n    return;\n  }\n\n  // Strip null/undefined from the constraint and check for a record.\n  JSType constraintNonNull = constraint.restrictByNotNullOrUndefined();\n  ObjectType constraintObj = ObjectType.cast(constraintNonNull);\n  if (constraintObj == null || !constraintObj.isRecordType()) {\n    return;\n  }\n\n  // Now infer any missing properties on our object.\n  ObjectType objType = ObjectType.cast(typeNonNull);\n  if (objType == null) {\n    return;\n  }\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!objType.isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!objType.hasProperty(prop)) {\n        // Widen to allow undefined if the property isn't present at all.\n        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n      }\n      objType.defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}