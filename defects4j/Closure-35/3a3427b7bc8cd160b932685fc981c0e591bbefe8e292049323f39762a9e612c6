{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          // We only want to infer properties that are not declared and are missing.\n          // If a property is present (even if inferred) or declared,\n          // the normal subtyping check should handle it.\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            if (!objType.hasProperty(prop)) {\n              // Property is missing, so infer it.\n              // We widen the inferred type with void/undefined.\n              JSType typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n            // If the property exists but is not declared (i.e., inferred previously),\n            // do nothing here. Let the sub-typing check verify compatibility.\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}