{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      JSType nonNullType = type.restrictByNotNullOrUndefined();\n\n      // If the type is a union, infer properties on each member;\n      // otherwise just on the single object type.\n      if (nonNullType.isUnionType()) {\n        for (JSType alt : nonNullType.toMaybeUnionType().getAlternates()) {\n          ObjectType objType = ObjectType.cast(alt);\n          if (objType == null) {\n            continue;\n          }\n          for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n              JSType typeToInfer = propType;\n              if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              }\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n      } else {\n        ObjectType objType = ObjectType.cast(nonNullType);\n        if (objType != null) {\n          for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n              JSType typeToInfer = propType;\n              if (!objType.hasProperty(prop)) {\n                typeToInfer =\n                    getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              }\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}