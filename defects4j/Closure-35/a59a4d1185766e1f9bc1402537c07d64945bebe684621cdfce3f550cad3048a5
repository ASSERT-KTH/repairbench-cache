{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propTypeFromConstraint = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            // Determine the current property type in objType.\n            // If the property doesn't exist in objType, treat its current type as VOID_TYPE (undefined)\n            // for the purpose of finding the least supertype.\n            JSType currentPropType = objType.hasProperty(prop)\n                ? objType.getPropertyType(prop)\n                : getNativeType(VOID_TYPE); // Treat non-existent as undefined\n\n            // The type to infer for this property should be the least common supertype\n            // of its current type (or undefined if not present) and the constraint's property type.\n            JSType typeToInfer = currentPropType.getLeastSupertype(propTypeFromConstraint);\n\n            // Only update the inferred property if the type has actually changed (i.e., widened or added).\n            // This prevents unnecessary re-definition and potential infinite loops if types are equivalent.\n            if (!typeToInfer.equals(currentPropType)) {\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}