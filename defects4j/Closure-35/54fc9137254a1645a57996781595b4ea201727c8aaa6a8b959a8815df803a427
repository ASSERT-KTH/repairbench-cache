{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   *\n   * This function may modify {@code objType} by adding inferred properties.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n\n    // We only infer properties on object types, and only if the constraint\n    // is a record type.\n    if (objType != null && constraintObj != null && constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop); // The type required by the constraint.\n        // We only infer properties that aren't explicitly declared.\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType existingType = objType.getPropertyType(prop); // The current type on the object (possibly null).\n\n          if (!objType.hasProperty(prop)) {\n            // Case 1: Property is missing on the object type.\n            // Infer the property type as potentially missing (constraint type | undefined).\n            // This allows {} to satisfy {{prop: (number|undefined)}} by inferring\n            // prop to be (number|undefined).\n            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else if (existingType != null && !existingType.isSubtype(propType)) {\n            // Case 2: Property exists and is inferred, but its type is not a subtype\n            // of the constraint type.\n            // Widen the inferred property type to the least supertype (LUB) of the\n            // existing type and the constraint type.\n            // Example: objType has {prop: number}, constraint requires {prop: string}.\n            // We widen {prop: number} to {prop: (number|string)}.\n            JSType typeToInfer = existingType.getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n          // Case 3: Property exists, is inferred, and its type is already a subtype\n          // of the constraint type. Do nothing, the existing inferred type is sufficient.\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}