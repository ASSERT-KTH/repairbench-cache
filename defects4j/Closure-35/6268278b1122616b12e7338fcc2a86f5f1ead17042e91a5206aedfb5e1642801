{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          // Check if objType has this property declared. If so, do nothing.\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType constraintPropType = constraintObj.getPropertyType(prop); // Non-nullable constraint type\n\n            if (!objType.hasProperty(prop)) {\n              // Property is missing on objType, infer it as undefined union constraint type.\n              // Use the non-nullable constraint type from constraintObj for the union.\n              JSType typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(constraintPropType);\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            } else {\n              // Property exists on objType and is inferred.\n              // Check if the existing type is compatible with the full constraint type.\n              JSType existingPropType = objType.getPropertyType(prop);\n              // Get the full constraint type, possibly including |undefined.\n              JSType fullConstraintPropType = constraint.getPropertyType(prop);\n\n              if (existingPropType.isSubtype(fullConstraintPropType)) {\n                // If compatible, potentially widen objType's inferred property\n                // to match the base type from the constraint (constraintPropType is non-nullable).\n                // This handles cases like objType.prop = SPECIFIC_OBJECT being widened\n                // to objType.prop = OBJECT based on the constraint.\n                // It avoids incorrectly changing an incompatible type (e.g., number to string).\n                objType.defineInferredProperty(prop, constraintPropType, null);\n              }\n              // If not compatible, do nothing. Let the type checker catch the error during\n              // the main subtype check.\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}