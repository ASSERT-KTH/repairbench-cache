{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      JSType restrictedType = type.restrictByNotNullOrUndefined();\n      if (restrictedType == null) {\n        return;\n      }\n      for (ObjectType objType : getObjectTypes(restrictedType)) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  private static Iterable<ObjectType> getObjectTypes(JSType type) {\n    if (type.isUnionType()) {\n      UnionType unionType = type.toMaybeUnionType();\n      List<ObjectType> objectTypes = new ArrayList<>();\n      for (JSType alt : unionType.getAlternates()) {\n        ObjectType objType = ObjectType.cast(alt);\n        if (objType != null) {\n          objectTypes.add(objType);\n        }\n      }\n      return objectTypes;\n    } else {\n      ObjectType objType = ObjectType.cast(type);\n      return objType != null ? Collections.singletonList(objType) : Collections.emptyList();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}