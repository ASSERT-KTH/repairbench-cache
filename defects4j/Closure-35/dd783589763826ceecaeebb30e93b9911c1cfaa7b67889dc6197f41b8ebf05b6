{
    "generation": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        // Only infer properties that were not explicitly declared.\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          // Always widen the property type by unioning it with undefined.\n          // This ensures that even if the property exists on some branches,\n          // we get a common widened type (e.g. (number|undefined)) as required.\n          JSType widenedType =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          objType.defineInferredProperty(prop, widenedType, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}