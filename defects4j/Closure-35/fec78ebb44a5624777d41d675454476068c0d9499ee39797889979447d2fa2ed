{
    "generation": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  // If type is a union type, apply inference to each alternate.\n  // This fixes Issue 669 where the object (e.g. \"results\") is actually a union\n  // of record types. We want to make sure each alternate gets widened appropriately.\n  UnionType union = type.toMaybeUnionType();\n  if (union != null) {\n    for (JSType alt : union.getAlternates()) {\n      inferPropertyTypesToMatchConstraint(alt, constraint);\n    }\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            // Widen by taking the least supertype of undefined and the property type.\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}