{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      // Don't infer properties on prototypes or classes, because it leads to\n      // confusing behavior.\n      // Don't infer properties on unresolved objects, because we might infer\n      // the wrong thing. see testIssue801\n      if (objType != null && objType.getConstructor() == null && !objType.isUnknownType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (objType.isPropertyTypeDeclared(prop)) {\n            // Property is declared, don't infer or widen.\n            continue;\n          }\n\n          if (objType.hasProperty(prop)) {\n            // Property exists and is inferred. Check if widening is needed.\n            JSType existingType = objType.getPropertyType(prop);\n            // Widen only if the existing inferred type isn't a subtype of the constraint.\n            if (!existingType.isSubtype(propType)) {\n              // Use the constraint's type for widening.\n              // Check to prevent infinite recursion for recursive types.\n               if (!propType.equals(existingType)) {\n                 objType.defineInferredProperty(prop, propType, null);\n               }\n            }\n            // If existingType IS a subtype of propType, do nothing. It's already compatible.\n          } else {\n            // Property does not exist on objType. Infer it.\n            // The inferred type should account for the possibility of absence (undefined)\n            // plus what the constraint expects.\n            JSType typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}