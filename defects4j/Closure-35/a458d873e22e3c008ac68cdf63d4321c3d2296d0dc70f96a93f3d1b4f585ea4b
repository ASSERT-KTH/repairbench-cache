{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType currentType = objType.getPropertyType(prop);\n\n          if (currentType == null) {\n            // Property does not exist in the object type, so we need to define it.\n            objType.defineInferredProperty(prop, propType, null);\n          } else {\n            // Property exists, but we need to widen it if necessary.\n            JSType widenedType = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            if (!currentType.isSubtypeOf(widenedType)) {\n              objType.defineInferredProperty(prop, widenedType, null);\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}