{
    "generation": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          // Instead of using the constraint\u2019s property type directly when\n          // the property is already present, always widen the existing property\u2019s\n          // type with undefined.  This makes sure that even if the property exists\n          // in some branches but is missing in others, its overall type includes undefined.\n          JSType currentPropType = objType.hasProperty(prop)\n              ? objType.getPropertyType(prop)\n              : null;\n          JSType typeToInfer = getNativeType(VOID_TYPE)\n              .getLeastSupertype(currentPropType != null\n                  ? currentPropType\n                  : constraintObj.getPropertyType(prop));\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}