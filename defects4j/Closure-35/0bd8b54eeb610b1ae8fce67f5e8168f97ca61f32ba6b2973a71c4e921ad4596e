{
    "generation": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        JSType existingPropType = objType.getPropertyType(prop);\n\n        if (existingPropType == null || !existingPropType.isEquivalentTo(propType)) {\n          JSType typeToInfer = propType;\n          if (existingPropType == null) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          } else {\n            typeToInfer = existingPropType.getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}