{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      JSType restrictedType = type.restrictByNotNullOrUndefined();\n      if (restrictedType != null) {\n        if (restrictedType.isUnionType()) {\n          for (JSType alt : restrictedType.toMaybeUnionType().getAlternates()) {\n            ObjectType objType = ObjectType.cast(alt);\n            if (objType != null) {\n              processPropertiesForObjectType(constraintObj, objType);\n            }\n          }\n        } else {\n          ObjectType objType = ObjectType.cast(restrictedType);\n          if (objType != null) {\n            processPropertiesForObjectType(constraintObj, objType);\n          }\n        }\n      }\n    }\n  }\n\n  private void processPropertiesForObjectType(\n      ObjectType constraintObj, ObjectType objType) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer =\n              getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}