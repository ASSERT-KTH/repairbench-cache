{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasOwnProperty(prop)) {\n              // Use 'getNativeType(VOID_TYPE)' as the baseline, and make sure\n              // to include 'undefined' in the inferred type.\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            } else {\n              // If the object has the property (even as an inferred property),\n              // then widen its type to the union with the constraint.\n              JSType currentType = objType.getPropertyType(prop);\n              typeToInfer = currentType.getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}