{
    "generation": "  /**\n   * Suppose X is an object with inferred properties.\n   * Suppose also that X is used in a way where it would only type-check\n   * correctly if some of those properties are widened.\n   * Then we should be polite and automatically widen X's properties for him.\n   *\n   * For a concrete example, consider:\n   * param x {{prop: (number|undefined)}}\n   * function f(x) {}\n   * f({});\n   *\n   * If we give the anonymous object an inferred property of (number|undefined),\n   * then this code will type-check appropriately.\n   *\n   * This function should only add properties to object literals that start\n   * empty (like {}). It shouldn't add properties to object literals that\n   * already have properties (like {a: 1}).\n   */\n  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n\n      // Check if objType is known to be an object literal that was initially empty.\n      // An object literal ({}) starts with no properties defined.\n      // We also don't want to add properties to instance types (like new Foo()).\n      // This prevents incorrectly adding missing properties to objects that already\n      // have properties, like in the case of `{prop2: 3}` which shouldn't be\n      // automatically upgraded to match `{{prop1: (Object|undefined)}}`.\n      if (objType != null && objType.getOwnPropertyNames().isEmpty()\n          && !objType.isInstanceType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          // We only add the property if it's not already declared or present.\n          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {\n            // Make the inferred property optional by unioning with void.\n            JSType typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, typeToInfer, /* node= */ null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}