{
    "generation": "    private InputStream getCurrentStream() throws IOException {\n        if (deferredBlockStreams.isEmpty()) {\n            // COMPRESS-348: If deferredBlockStreams is empty and the current entry\n            // has a size of 0, then we should provide an empty stream\n            // instead of throwing an IllegalStateException.\n            // This allows `read()` to return -1 for zero-sized entries,\n            // as expected by the test for \"2.txt\" and \"5.txt\".\n            // It is assumed that 'currentEntry' is a field accessible within this class.\n            if (currentEntry != null && currentEntry.getSize() == 0) {\n                return new ByteArrayInputStream(new byte[0]);\n            }\n            throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n        }\n        \n        while (deferredBlockStreams.size() > 1) {\n            // In solid compression mode we need to decompress all leading folder'\n            // streams to get access to an entry. We defer this until really needed\n            // so that entire blocks can be skipped without wasting time for decompression.\n            final InputStream stream = deferredBlockStreams.remove(0);\n            IOUtils.skip(stream, Long.MAX_VALUE);\n            stream.close();\n        }\n\n        return deferredBlockStreams.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}