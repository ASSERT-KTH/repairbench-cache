{
    "generation": "    private InputStream getCurrentStream() throws IOException {\n        if (deferredBlockStreams.isEmpty()) {\n            // This situation can occur if getNextEntry() returns a non-null entry\n            // (e.g., a zero-length entry or an entry at the end of a block that has\n            // already consumed the last stream in deferredBlockStreams) but\n            // no new block stream is available or set up for the current entry.\n            // Instead of throwing an IllegalStateException, which would imply\n            // that getNextEntry() was not called or failed to set up the stream,\n            // we return an empty InputStream. This makes sense for zero-length\n            // entries, as subsequent read() calls will correctly return -1.\n            return new ByteArrayInputStream(new byte[0]);\n        }\n        \n        while (deferredBlockStreams.size() > 1) {\n            // In solid compression mode we need to decompress all leading folder'\n            // streams to get access to an entry. We defer this until really needed\n            // so that entire blocks can be skipped without wasting time for decompression.\n            final InputStream stream = deferredBlockStreams.remove(0);\n            IOUtils.skip(stream, Long.MAX_VALUE);\n            stream.close();\n        }\n\n        return deferredBlockStreams.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}