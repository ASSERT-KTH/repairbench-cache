{
    "generation": "    private InputStream getCurrentStream() throws IOException {\n        if (deferredBlockStreams.isEmpty()) {\n            // If deferredBlockStreams is empty, it means there's no active stream for the current entry.\n            // This can happen for zero-length entries after they've been processed (e.g., read() returned -1),\n            // or if the current entry has already been fully read and its stream was correctly removed or never added.\n            // Instead of throwing an IllegalStateException, which implies a protocol violation (getNextEntry() not called),\n            // we return an InputStream that immediately signals EOF (-1 on first read).\n            // This allows SevenZFile.read() to return -1 gracefully, which is the expected behavior\n            // for exhausted or zero-length entries, resolving the COMPRESS-348 issue.\n            return new java.io.ByteArrayInputStream(new byte[0]);\n        }\n        \n        while (deferredBlockStreams.size() > 1) {\n            // In solid compression mode we need to decompress all leading folder'\n            // streams to get access to an entry. We defer this until really needed\n            // so that entire blocks can be skipped without wasting time for decompression.\n            final InputStream stream = deferredBlockStreams.remove(0);\n            IOUtils.skip(stream, Long.MAX_VALUE);\n            stream.close();\n        }\n\n        return deferredBlockStreams.get(0);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}