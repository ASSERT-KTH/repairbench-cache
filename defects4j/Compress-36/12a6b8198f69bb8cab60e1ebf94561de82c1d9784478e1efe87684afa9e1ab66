{
    "generation": "private InputStream getCurrentStream() throws IOException {\n    if (deferredBlockStreams.isEmpty()) {\n        throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n    }\n\n    while (deferredBlockStreams.size() > 1) {\n        // In solid compression mode we need to decompress all leading folder'\n        // streams to get access to an entry. We defer this until really needed\n        // so that entire blocks can be skipped without wasting time for decompression.\n        final InputStream stream = deferredBlockStreams.remove(0);\n        IOUtils.skip(stream, Long.MAX_VALUE);\n        stream.close();\n    }\n\n    InputStream currentStream = deferredBlockStreams.get(0);\n\n    // Fix: for empty entries the stream may immediately signal EOF,\n    // so treat empty stream similarly to having no stream at all.\n    // To avoid IllegalStateException on read, consume and remove empty streams here.\n    while (true) {\n        currentStream.mark(1);\n        int b = currentStream.read();\n        if (b != -1) {\n            currentStream.reset();\n            return currentStream;\n        } else {\n            // underlying stream is exhausted -> discard it\n            currentStream.close();\n            deferredBlockStreams.remove(0);\n            if (deferredBlockStreams.isEmpty()) {\n                // all streams exhausted\n                throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n            } else {\n                currentStream = deferredBlockStreams.get(0);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}