{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    // if it's the same class, nothing to do\n    if (_class == subclass) {\n        return this;\n    }\n    // must actually be a subtype\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"\n            + subclass.getName()\n            + \" not a sub-type of \"\n            + _class.getName());\n    }\n    // re-resolve via the factory so that all bindings, supertypes\n    // and interfaces get recomputed correctly for the subclass\n    return _typeFactory.constructType(subclass, _bindings);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}