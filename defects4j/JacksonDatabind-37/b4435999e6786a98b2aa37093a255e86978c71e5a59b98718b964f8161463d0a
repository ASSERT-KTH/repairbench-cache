{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        // The original code passed _bindings, _superClass, and _superInterfaces directly\n        // from the current type ('this') to the new SimpleType.\n        // This is problematic because these properties (especially _bindings) should be\n        // re-resolved and specific to the 'subclass', not inherited directly from the\n        // potentially more generic or differently-bound super-type.\n        // For a `SimpleType`, which typically represents a non-generic class, its `TypeBindings`\n        // should usually be empty. If the `subclass` is non-generic (like `JsonMapSchema` in the test case),\n        // passing potentially non-empty bindings from a generic `_class` can lead to\n        // incorrect type introspection (e.g., \"0 known properties\").\n        // By explicitly setting TypeBindings.emptyBindings(), we ensure the new SimpleType\n        // for the `subclass` starts with correct, empty bindings, which is appropriate for\n        // most simple, non-generic classes. The `_superClass` and `_superInterfaces` might\n        // still need full re-resolution by `TypeFactory`, but correcting `_bindings` is\n        // often the critical step for property discovery.\n        return new SimpleType(subclass, TypeBindings.emptyBindings(), _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}