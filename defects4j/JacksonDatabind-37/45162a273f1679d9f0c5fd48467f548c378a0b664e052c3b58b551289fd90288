{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    // Ensure the subclass is compatible with the current type\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not a subtype of \" + _class.getName());\n    }\n    // Re-resolve bindings for the new subclass\n    TypeBindings newBindings = _typeFactory._resolveBindings(subclass, _bindings);\n    return new SimpleType(subclass, newBindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}