{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    // Instead of reusing the original super-class and interface info (which may be wrong for the subclass),\n    // re-resolve the complete type hierarchy for the new subclass.\n    SimpleType narrowed = TypeFactory.defaultInstance().constructSimpleType(subclass, _bindings);\n    if (_valueHandler != null) {\n        narrowed = narrowed.withValueHandler(_valueHandler);\n    }\n    if (_typeHandler != null) {\n        narrowed = narrowed.withTypeHandler(_typeHandler);\n    }\n    if (_asStatic) {\n        narrowed = narrowed.withStaticTyping();\n    }\n    return narrowed;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}