{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        // 15-Jan-2016, tatu: And concerning super-class/interfaces, quite difficult\n        //    actually. Best best is to actually punt and ask TypeFactory to reconstruct...\n        //    but without TypeFactory that's not possible. Hence, for now, just wipe\n        //    type hierarchy components, hope for best\n\n        // Handling of type parameters unfortunately complicated; for now, require\n        // that we start with non-generic type (which simplifies things)\n        // Note: Code analysis suggests _bindings is never null\n        if (!_bindings.isEmpty()) {\n            // Placeholder for error reporting logic that might exist in the actual class,\n            // based on the commit history related to the fix.\n            // The exact mechanism to report this might differ slightly.\n            // Throwing an exception here reflects the intent of the historical fix.\n            // In later Jackson versions, this limitation might have been removed.\n            throw new IllegalArgumentException(String.format(\n                    \"Internal error: trying to narrow type %s with generic parameter bindings, not yet supported\",\n                    toString()));\n        }\n\n        // NOTE: Passing 'this' as super class is questionable, but part of the fix for #1083\n        // Super-interfaces null also part of it. This avoids passing incorrect information\n        // from the original type to the narrowed type, which caused the bug.\n        return new SimpleType(subclass, TypeBindings.emptyBindings(), this, null,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}