{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName()\n                + \" not subtype of \" + _class.getName());\n    }\n    // Delegate to the TypeFactory so that the subtype is fully re-resolved,\n    // including proper handling of super-types and any annotations.\n    return TypeFactory.defaultInstance().constructSpecializedType(this, subclass);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}