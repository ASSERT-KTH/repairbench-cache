{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // 22-Jan-2016, tatu: We may need to allow \"narrowing\" to a subtype\n    //   when dealing with \"untyped\" (that is, `SimpleType` that\n    //   represents `Object` or `JsonNode` or such)\n    if ((_class == Object.class || _class == JsonNode.class)\n            && _class.isAssignableFrom(subclass)) {\n        // ... and then \"narrow\" back to sub-class\n        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n    // Should we check that there is a sub-class relationship?\n    // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n    //    placeholder values, so no.\n    /*\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    */\n    // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n    throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n            +_class.getName());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}