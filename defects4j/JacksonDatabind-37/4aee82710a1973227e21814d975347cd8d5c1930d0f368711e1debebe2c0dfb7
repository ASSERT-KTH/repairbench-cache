{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        //\n        // The original comment correctly identifies a problem: copying the TypeBindings,\n        // superClass, and superInterfaces from the current type to the narrower type\n        // is generally incorrect. These properties are specific to the original '_class'\n        // and its generic context, not necessarily to the 'subclass'.\n        //\n        // For a SimpleType, which represents a non-generic class (one that doesn't\n        // define its own type parameters like List<E> or Map<K,V>), its own bindings\n        // should typically be empty. Furthermore, its super-class and super-interfaces\n        // should be derived directly from the 'subclass' itself by the TypeFactory\n        // during introspection, rather than being inherited from the parent type.\n        // A JavaType instance usually does not have direct access to the TypeFactory\n        // to perform a full re-resolution of the type hierarchy.\n        //\n        // Therefore, when narrowing a SimpleType, the most appropriate action is to\n        // create a new SimpleType for the 'subclass' with reset (empty/null)\n        // bindings and supertype information. This relies on the higher-level\n        // TypeFactory and ClassIntrospector to correctly resolve the subclass's\n        // own type hierarchy when needed (e.g., for property discovery).\n        //\n        // The valueHandler, typeHandler, and asStatic flags are typically attributes\n        // of the type's usage or serialization behavior and should be preserved.\n        return new SimpleType(subclass, _bindings.emptyBindings(),\n                null, null, _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}