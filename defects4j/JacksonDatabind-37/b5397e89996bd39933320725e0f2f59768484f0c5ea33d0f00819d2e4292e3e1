{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no explicit check for sub-class relationship.\n        // However, we should ensure that the new type is compatible with the original type.\n        // This is particularly important for handling cases where the subclass might not\n        // be a direct subclass but is still compatible in the context of deserialization.\n        // Therefore, we re-resolve the type to ensure compatibility.\n        \n        return TypeFactory.defaultInstance().constructType(subclass, _bindings, _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}