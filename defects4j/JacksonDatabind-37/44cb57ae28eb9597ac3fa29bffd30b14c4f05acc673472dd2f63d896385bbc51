{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        // Problem: When narrowing to a specific subclass (e.g., a concrete POJO),\n        // the TypeBindings from the original (potentially generic) type should not\n        // be blindly inherited by the new SimpleType. A SimpleType for a raw,\n        // non-generic class should typically have empty bindings.\n        // Incorrectly carrying over bindings can lead to introspection issues\n        // (e.g., \"0 known properties\") because Jackson's internal type resolution\n        // or bean property discovery gets confused by incorrect generic type information.\n        // The fix is to use empty bindings for the new SimpleType unless the subclass\n        // itself is a generic type that requires specific bindings, which is not\n        // the case for SimpleType's primary use-case (raw, non-generic classes).\n        return new SimpleType(subclass, TypeBindings.emptyBindings(), _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}