{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    // Instead of reusing the old binding/super types, re-resolve the type information with the TypeFactory.\n    JavaType result = TypeFactory.defaultInstance().constructSimpleType(subclass, null);\n    if (_valueHandler != null) {\n        result = result.withValueHandler(_valueHandler);\n    }\n    if (_typeHandler != null) {\n        result = result.withTypeHandler(_typeHandler);\n    }\n    if (_asStatic && !result.isStatic()) {\n        result = result.withStaticTyping();\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}