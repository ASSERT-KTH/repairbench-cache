{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    // Instead of reusing cached super-type details, re-resolve the type fully.\n    JavaType newType = TypeFactory.defaultInstance().constructType(subclass, _bindings);\n    if (newType instanceof SimpleType) {\n        SimpleType st = (SimpleType) newType;\n        if (_valueHandler != st.getValueHandler()) {\n            st = st.withValueHandler(_valueHandler);\n        }\n        if (_typeHandler != st.getTypeHandler()) {\n            st = st.withTypeHandler(_typeHandler);\n        }\n        if (_asStatic && !st.isStatic()) {\n            st = st.withStaticTyping();\n        }\n        return st;\n    }\n    return newType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}