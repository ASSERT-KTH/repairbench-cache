{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Should we check that there is a sub-class relationship?\n    // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n    //    placeholder values, so no.\n    /*\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    */\n    // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n    return new SimpleType(subclass, _bindings, _narrowSuperClass(subclass), _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}\n\nprivate JavaType _narrowSuperClass(Class<?> subclass) {\n    if (_superClass == null) {\n        return null;\n    }\n    Class<?> superClassRaw = _superClass.getRawClass();\n    // If subclass does not extend superClassRaw, leave unchanged\n    if (!superClassRaw.isAssignableFrom(subclass)) {\n        return _superClass;\n    }\n    if (superClassRaw == subclass.getSuperclass()) {\n        return _superClass;  // direct superclass, so leave as is\n    }\n    // Otherwise, create a new SimpleType to represent the narrowed superclass chain\n    return new SimpleType(subclass.getSuperclass(), _bindings,\n            _superClass.getSuperClass(), _superClass.getInterfaces(),\n            _superClass.getValueHandler(), _superClass.getTypeHandler(),\n            _superClass.isStatic());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}