{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass) {\n        if (_class == subclass) {\n            return this;\n        }\n        // Compute superclass and super interfaces for the subclass\n        Class<?> superClass = subclass.getSuperclass();\n        JavaType superClassType = (superClass == null) ? null : _typeFactory.constructType(superClass);\n        List<JavaType> superInterfaceTypes = new ArrayList<>();\n        for (Class<?> iface : subclass.getInterfaces()) {\n            superInterfaceTypes.add(_typeFactory.constructType(iface));\n        }\n        // Create new bindings, perhaps empty or resolved\n        TypeBindings newBindings = _typeFactory.emptyBindings();\n        // Alternatively, maybe create bindings from the subclass's type parameters\n        return new SimpleType(subclass, newBindings, superClassType, superInterfaceTypes,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}