{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // 16-Jan-2016, tatu: Not sure if we should try to narrow bindings or not.\n    // For now, let's just keep bindings as-is (that is, no `_bindings` passed).\n    // As per [databind#1083] need to re-lookup generics.\n    JavaType subtype = _typeFactory._fromClass(null, subclass, TypeBindings.emptyBindings());\n    // 28-Jun-2016, tatu: Seems we should not force new instance always, since\n    //    canonical ones are cheap but not so much other types (SimpleType esp).\n    if ((_bindings == subtype.getBindings())\n            && (_superClass == subtype.getSuperClass())\n            && (_superInterfaces == subtype.getInterfaces())) {\n        return this;\n    }\n    return subtype;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}