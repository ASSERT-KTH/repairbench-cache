{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Instead of directly creating a new SimpleType, we should use proper construction\n    // to ensure all type information is correctly resolved and maintained\n    JavaType result = TypeFactory.defaultInstance().constructSpecializedType(this, subclass);\n    // Preserve handlers from original type\n    if (_valueHandler != null || _typeHandler != null) {\n        result = result.withHandlers(this);\n    }\n    if (_asStatic) {\n        result = result.withStaticTyping();\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}