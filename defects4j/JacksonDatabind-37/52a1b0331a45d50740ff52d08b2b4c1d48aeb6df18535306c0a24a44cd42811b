{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        return new SimpleJavaType(subclass, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    protected JavaType _widen(Class<?> supertype)\n    {\n        if (_class == supertype) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!supertype.isAssignableFrom(_class)) {\n            throw new IllegalArgumentException(\"Class \"+_class.getName()+\" not super-type of \"\n                    +supertype.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        return new SimpleJavaType(supertype, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    protected JavaType _changeBaseType(JavaType newBaseType)\n    {\n        return new SimpleJavaType(_class, newBaseType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    protected JavaType _changeValueHandler(ValueHandler newValueHandler)\n    {\n        return new SimpleJavaType(_class, _baseType, newValueHandler, _typeHandler, _asStatic);\n    }\n\n    @Override\n    protected JavaType _changeTypeHandler(TypeHandler newTypeHandler)\n    {\n        return new SimpleJavaType(_class, _baseType, _valueHandler, newTypeHandler, _asStatic);\n    }\n\n    @Override\n    protected JavaType _changeAsStatic()\n    {\n        return new SimpleJavaType(_class, _baseType, _valueHandler, _typeHandler, !_asStatic);\n    }\n\n    @Override\n    public boolean equals(Object o)\n    {\n        if (o == this) {\n            return true;\n        }\n        if (o == null) {\n            return false;\n        }\n        if (o.getClass() != getClass()) {\n            return false;\n        }\n        SimpleJavaType other = (SimpleJavaType) o;\n        if (_class != other._class) {\n            return false;\n        }\n        if (_baseType != other._baseType) {\n            return false;\n        }\n        if (_valueHandler != other._valueHandler) {\n            return false;\n        }\n        if (_typeHandler != other._typeHandler) {\n            return false;\n        }\n        if (_asStatic != other._asStatic) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hashCode()\n    {\n        int code = _class.hashCode();\n        code = code * 31 + _baseType.hashCode();\n        code = code * 31 + _valueHandler.hashCode();\n        code = code * 31 + _typeHandler.hashCode();\n        code = code * 31 + (_asStatic ? 1 : 0);\n        return code;\n    }\n\n    @Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        if (_asStatic) {\n            sb.append(\"static \");\n        }\n        sb.append(_class.getName());\n        if (_baseType != null) {\n            sb.append(\"<\");\n            sb.append(_baseType.toString());\n            sb.append(\">\");\n        }\n        return sb.toString();\n    }\n}\n\n//src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java\npackage com.fasterxml.jackson.databind.type;\n\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.JsonSerializable;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\nimport com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor;\nimport com.fasterxml.jackson.databind.util.ClassUtil;\nimport com.fasterxml.jackson.databind.util.RawValue;\nimport com.fasterxml.jackson.databind.util.StdConverter;\nimport com.fasterxml.jackson.databind.util.StdTypeResolverBuilder;\nimport com.fasterxml.jackson.databind.util.StdValueInstantiator;\nimport com.fasterxml.jackson.databind.util.TokenBuffer;\nimport com.fasterxml.jackson.databind.util.TypeKey;\nimport com.fasterxml.jackson.databind.util.TypeResolutionContext;\nimport com.fasterxml.jackson.databind.util.TypeResolverBuilder;\nimport com.fasterxml.jackson.databind.util.ValueInstantiator;\nimport com.fasterxml.jackson.databind.util.ValueMatcher;\nimport com.fasterxml.jackson.databind.util.ValueMatcherGenerator;\nimport com.fasterxml.jackson.databind.util.ValueReader;\nimport com.fasterxml.jackson.databind.util.ValueReaderGenerator;\nimport com.fasterxml.jackson.databind.util.ValueWriter;\nimport com.fasterxml.jackson.databind.util.ValueWriterGenerator;\nimport com.fasterxml.jackson.databind.util.ViewMatcher;\nimport com.fasterxml.jackson.databind.util.ViewMatcherGenerator;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.IdentityHashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.concurrent.ConcurrentSkipListSet;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicIntegerArray;\nimport java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.atomic.AtomicLongArray;\nimport java.util.concurrent.atomic.AtomicLongFieldUpdater;\nimport java.util.concurrent.atomic.AtomicMarkableReference;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicReferenceArray;\nimport java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\nimport java.util.concurrent.atomic.AtomicStampedReference;\nimport java.util.concurrent.atomic.DoubleAccumulator;\nimport java.util.concurrent.atomic.DoubleAdder;\nimport java.util.concurrent.atomic.FloatAccumulator;\nimport java.util.concurrent.atomic.FloatAdder;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAdder;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAdder;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAdder;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAdder;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAdder;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAdder;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.concurrent.atomic.LongAccumulator;\nimport java.util.\n                _valueHandler, _typeHandler, _asStatic);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}