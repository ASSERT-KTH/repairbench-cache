{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n    // But must update _superClass (and interfaces) references so that\n    // they correctly refer to subclass info instead of original _class.\n    // Fix: we should try to recalculate _superClass and _superInterfaces for subclass\n\n    // Re-resolve supertypes for the subclass:\n    // Only possible if bindings are passed along\n    return new SimpleType(subclass,\n            _bindings,\n            // Resolve super class and interfaces for subclass\n            _buildSuperClass(subclass),\n            _buildSuperInterfaces(subclass),\n            _valueHandler, _typeHandler, _asStatic);\n}\n\n// Helper methods for recalculating superClass/superInterfaces\nprotected JavaType _buildSuperClass(Class<?> subclass) {\n    Class<?> superClass = subclass.getSuperclass();\n    return (superClass == null) ? null : new SimpleType(superClass, _bindings, null, null, _valueHandler, _typeHandler, _asStatic);\n}\n\nprotected JavaType[] _buildSuperInterfaces(Class<?> subclass) {\n    Class<?>[] interfaces = subclass.getInterfaces();\n    if (interfaces == null || interfaces.length == 0) {\n        return null;\n    }\n    JavaType[] result = new JavaType[interfaces.length];\n    for (int i = 0; i < interfaces.length; ++i) {\n        result[i] = new SimpleType(interfaces[i], _bindings, null, null, _valueHandler, _typeHandler, _asStatic);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}