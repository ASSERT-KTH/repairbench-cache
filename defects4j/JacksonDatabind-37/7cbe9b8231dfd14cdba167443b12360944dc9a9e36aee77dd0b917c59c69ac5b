{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Check if subclass is actually a subclass or implementation of _class\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not subtype of \" + _class.getName());\n    }\n    // Re-resolve super-class and interfaces for the new subtype to avoid stale type hierarchy\n    return new SimpleType(subclass, _bindings, _narrowSuper(subclass), null,\n            _valueHandler, _typeHandler, _asStatic);\n}\n\n// Helper method to resolve the supertype of the subclass within this hierarchy\nprotected JavaType _narrowSuper(Class<?> subclass) {\n    Class<?> superClassRaw = subclass.getSuperclass();\n    if (superClassRaw == null || superClassRaw == Object.class) {\n        return null;\n    }\n    // If superclass equals to current _class, reuse this type\n    if (superClassRaw == _class) {\n        return this;\n    }\n    // Otherwise, go recursively upwards\n    return _narrowSuper(superClassRaw);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}