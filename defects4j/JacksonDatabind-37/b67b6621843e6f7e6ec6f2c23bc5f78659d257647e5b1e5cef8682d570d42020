{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        \n        // As per [databind#742], need to allow narrowing from abstract/interface\n        // to concrete types.\n        if (_class.isInterface() || _class.isAbstract()) {\n            if (!subclass.isAssignableFrom(_class)) {\n                return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                        _valueHandler, _typeHandler, _asStatic);\n            }\n        }\n        \n        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}