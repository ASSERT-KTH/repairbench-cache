{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        // The correct way to \"re-resolve\" with a narrower class is to use TypeFactory.\n        // It will correctly handle generic bindings, super-types, and convert to\n        // specific collection/map types if 'subclass' is one.\n        // The original logic just copied bindings, which is problematic for generic types.\n        return TypeFactory.defaultInstance().constructSpecializedType(this, subclass);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}