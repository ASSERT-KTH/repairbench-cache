{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        // 21-Apr-2016, tatu: But how can we re-resolve? Need TypeFactory!\n        //    For now, must NOT try to use this method; instead caller MUST use\n        //    TypeFactory.constructSpecializedType().\n        // For now: let's try to pass it, but fail if we have actual type variables\n        // to worry about.\n        // NOTE: only relevant for SimpleType, as other types need bindings.\n        if (!_bindings.isEmpty()) {\n            throw new IllegalArgumentException(\"SimpleType.narrow cannot be used on types with type parameters: \"+_class.getName()+\" vs \"+subclass.getName());\n        }\n        \n        // FIX: If original type was static (e.g., `java.lang.Object`) but the narrowed\n        // subclass is not `Object.class`, then the new type should not be static.\n        // This ensures proper property introspection for specific types.\n        boolean newAsStatic = _asStatic && (subclass == Object.class);\n\n        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, newAsStatic);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}