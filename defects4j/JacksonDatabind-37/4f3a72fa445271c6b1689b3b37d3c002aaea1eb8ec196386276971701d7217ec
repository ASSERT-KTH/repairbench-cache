{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n    //    placeholder values, so no.\n\n    // Adjust super-class and super-interfaces when narrowing to a subclass\n    JavaType newSuperClass = _superClass;\n    if (newSuperClass != null) {\n        // If current superClass is not assignable from new subclass, recalc\n        Class<?> currSuperRaw = newSuperClass.getRawClass();\n        if (!currSuperRaw.isAssignableFrom(subclass)) {\n            newSuperClass = null;\n        }\n    }\n\n    JavaType[] newSuperInterfaces = _superInterfaces;\n    if (newSuperInterfaces != null && newSuperInterfaces.length > 0) {\n        int len = newSuperInterfaces.length;\n        JavaType[] adjInterfaces = new JavaType[len];\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            JavaType iface = newSuperInterfaces[i];\n            if (iface.getRawClass().isAssignableFrom(subclass)) {\n                adjInterfaces[count++] = iface;\n            }\n        }\n        if (count != len) {\n            if (count == 0) {\n                newSuperInterfaces = null;\n            } else {\n                newSuperInterfaces = new JavaType[count];\n                System.arraycopy(adjInterfaces, 0, newSuperInterfaces, 0, count);\n            }\n        }\n    }\n\n    return new SimpleType(subclass, _bindings, newSuperClass, newSuperInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}