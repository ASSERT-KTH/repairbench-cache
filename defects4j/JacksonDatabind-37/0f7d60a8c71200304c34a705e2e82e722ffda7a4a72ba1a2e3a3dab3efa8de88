{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        \n        // 27-May-2020, tatu: [databind#2774] need to ensure parameterization is retained,\n        //   as would occur if we resolved from scratch\n        if (_bindings == null || _bindings.isEmpty()) {\n            return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n        // tricky: MUST resolve bindings again, otherwise parameterization is lost\n        return _replaceClass(subclass);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}