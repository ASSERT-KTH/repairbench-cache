{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // When narrowing, we must properly resolve super-type and interfaces of the new subclass.\n    // Build new superClass and superInterfaces reflecting the actual class hierarchy of subclass.\n    JavaType superClass = null;\n    JavaType[] superInterfaces = null;\n    if (subclass.getSuperclass() != null) {\n        superClass = _bindings.resolveType(subclass.getGenericSuperclass());\n    }\n    Class<?>[] interfaces = subclass.getInterfaces();\n    if (interfaces.length > 0) {\n        superInterfaces = new JavaType[interfaces.length];\n        for (int i = 0; i < interfaces.length; ++i) {\n            superInterfaces[i] = _bindings.resolveType(subclass.getGenericInterfaces()[i]);\n        }\n    }\n    return new SimpleType(subclass, _bindings, superClass, superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}