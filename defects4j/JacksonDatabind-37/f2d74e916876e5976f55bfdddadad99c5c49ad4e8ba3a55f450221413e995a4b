{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        // However, we should not create a new SimpleType if the subclass is not a subclass of _class\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        // But we should keep the original bindings, superClass, superInterfaces, etc.\n        // unless the subclass is a different type (e.g., a Collection or Map type)\n        if (isCollectionLikeType() || isMapLikeType()) {\n            return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        } else {\n            // If it's a simple type, we should just create a new SimpleType with the subclass\n            return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic, _factory, _mixInAnnotations);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}