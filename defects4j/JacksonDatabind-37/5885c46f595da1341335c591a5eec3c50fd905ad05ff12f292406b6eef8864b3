{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \" + _class.getName());\n    }\n    // Instead of reusing the original _superClass and _superInterfaces (which were computed\n    // for _class), pass null so that the new SimpleType will re-resolve its hierarchy.\n    return new SimpleType(subclass, _bindings, null, null,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}