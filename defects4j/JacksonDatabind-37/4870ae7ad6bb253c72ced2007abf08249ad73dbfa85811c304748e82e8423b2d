{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Re-resolve super types for new subclass to get correct type hierarchy\n    HierarchicType superClass = _superClass;\n    if (superClass != null) {\n        superClass = superClass.deepCloneWithoutSubtype();\n    }\n    HierarchicType[] superInterfaces = _superInterfaces;\n    if (superInterfaces != null) {\n        superInterfaces = new HierarchicType[superInterfaces.length];\n        for (int i = 0; i < superInterfaces.length; i++) {\n            superInterfaces[i] = superInterfaces[i].deepCloneWithoutSubtype();\n        }\n    }\n    return new SimpleType(subclass, _bindings, superClass, superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}