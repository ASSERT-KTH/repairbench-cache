{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        // When looking at VAR initializers for declared VARs, we tend\n        // to use the declared type over the type it's being\n        // initialized to in the global scope.\n        //\n        // For example,\n        // /** @param {number} */ var f = goog.abstractMethod;\n        // it's obvious that the programmer wants you to use\n        // the declared function signature, not the inferred signature.\n        //\n        // Or,\n        // /** @type {Object.<string>} */ var x = {};\n        // the one-time anonymous object on the right side\n        // is as narrow as it can possibly be, but we need to make\n        // sure we back-infer the <string> element constraint on\n        // the left hand side, so we use the left hand side.\n        //\n        // However, we need to make an exception for null/undefined. If a\n        // variable is assigned null or undefined, the scope *must* reflect that,\n        // even if it was a VAR declaration with a declared type.\n\n        // Update the scope if this is an assignment (not a VAR declaration),\n        // or the VAR's type is inferred, or the assigned type is null/undefined.\n        boolean updateScope = !isVarDeclaration ||\n                              var == null ||\n                              var.isTypeInferred() ||\n                              resultType.isNullType() ||\n                              resultType.isVoidType();\n\n        if (updateScope) {\n          // Update the variable's type in the current scope.\n          redeclareSimpleVar(scope, left, resultType);\n        }\n\n        // Set the type of the NAME node itself.\n        // For VAR declarations or assignments where the previous type was unknown,\n        // use the result type. Otherwise (assignment with known previous type),\n        // set it to null.\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        // If the variable's type in the symbol table (Var object) was originally\n        // inferred, update it globally to the least supertype of the old inferred\n        // type and the new result type. This handles back-inference.\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}