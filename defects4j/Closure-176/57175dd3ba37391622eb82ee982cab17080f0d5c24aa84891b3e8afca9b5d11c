{
    "generation": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\nprivate void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      // Even if there is a declared type on the var, if we assign\n      // null or undefined we want to narrow the var to null/undefined\n      // so that later x.push(...) will be caught as an error.\n      boolean isNullOrUndef =\n          resultType.isNullType() || resultType.isVoidType();\n      boolean isVarTypeBetter =\n          isNullOrUndef\n          || !isVarDeclaration\n          || var == null\n          || var.isTypeInferred();\n\n      if (isVarTypeBetter) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n      left.setJSType(\n          (isVarDeclaration || leftType == null)\n              ? resultType\n              : null);\n\n      if (var != null && var.isTypeInferred()) {\n        JSType oldType = var.getType();\n        var.setType(\n            oldType == null\n                ? resultType\n                : oldType.getLeastSupertype(resultType));\n      }\n      break;\n\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(\n            left,\n            qualifiedName,\n            leftType == null ? unknownType : leftType,\n            resultType);\n      }\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}