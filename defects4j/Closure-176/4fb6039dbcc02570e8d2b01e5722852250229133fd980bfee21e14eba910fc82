{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        // Special-case null/undefined initializers for declared vars:\n        // we want x=null to give x a null type in the flow scope\n        // so that x.push(...) later triggers a warning.\n        boolean isNullOrUndefined =\n            resultType.isNullType() || resultType.isVoidType();\n        boolean isVarTypeBetter =\n            !isVarDeclaration || var == null || var.isTypeInferred() || isNullOrUndefined;\n\n        if (isVarTypeBetter) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(\n            (isVarDeclaration || leftType == null) ? resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null\n              ? resultType\n              : oldType.getLeastSupertype(resultType));\n        }\n        break;\n\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(\n              left,\n              qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}