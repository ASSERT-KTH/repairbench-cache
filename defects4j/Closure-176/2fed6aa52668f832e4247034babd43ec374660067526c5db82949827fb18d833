{
    "generation": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\nprivate void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n\n      if (isVarTypeBetter) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n      left.setJSType(isVarDeclaration || leftType == null ?\n          resultType : null);\n\n      if (var != null && var.isTypeInferred()) {\n        JSType oldType = var.getType();\n        var.setType(oldType == null ?\n            resultType : oldType.getLeastSupertype(resultType));\n      }\n      break;\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(left, qualifiedName,\n            leftType == null ? unknownType : leftType,\n            resultType);\n      }\n\n      // Do not always overwrite the node's JSType with resultType.\n      // If the current type is null / unknown, update it to resultType.\n      // Otherwise, retain old type (for example when x is null but declared as Array,\n      // do not change x's type to null permanently).\n      JSType currentType = left.getJSType();\n      if (currentType == null || currentType.isUnknownType()) {\n        left.setJSType(resultType);\n      }\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}