{
    "generation": "private void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      // In the original code, declared variables (which are not type inferred)\n      // never had their flow types updated. This meant that if a declared var was\n      // given a value that was incompatible with its annotation (e.g. {Array} x = null),\n      // the flow type would remain the annotated type, and errors on property accesses\n      // would not be reported.\n      // Here, for declared variables we update the flow type if the new (result) type\n      // is not a subtype of the declared type.\n      boolean isVarTypeBetter;\n      if (!isVarDeclaration || var == null) {\n        isVarTypeBetter = true;\n      } else {\n        isVarTypeBetter = !resultType.isSubtype(var.getType());\n      }\n\n      if (isVarTypeBetter) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n      left.setJSType(isVarDeclaration || leftType == null ? resultType : null);\n\n      if (var != null && var.isTypeInferred()) {\n        JSType oldType = var.getType();\n        var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));\n      }\n      break;\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(\n            left,\n            qualifiedName,\n            leftType == null ? unknownType : leftType,\n            resultType);\n      }\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}