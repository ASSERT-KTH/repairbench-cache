{
    "generation": "private void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      // When a var declaration has an explicit type (leftType) but the initializer\u2019s\n      // type (resultType) is not a subtype of it, we want to use the initializer\u2019s type.\n      // For example, if you write:\n      //   /** @type {Array} */ var x = null;\n      // then although the declared type is Array, the initializer is null and we want\n      // x\u2019s flow type to become null (so that x.push(...) will be flagged).\n      // In other cases (or if there is no declared type) we fall back to the usual logic.\n      if ((isVarDeclaration && leftType != null && !resultType.isSubtype(leftType))\n          || !isVarDeclaration || var == null || var.isTypeInferred()) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n      left.setJSType(resultType);\n\n      if (var != null) {\n        JSType oldType = var.getType();\n        var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));\n      }\n      break;\n\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(left, qualifiedName,\n            leftType == null ? unknownType : leftType, resultType);\n      }\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}