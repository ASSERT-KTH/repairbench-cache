{
    "generation": "private void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      // When looking at VAR initializers for declared VARs, we tend\n      // to use the declared type over the type it's being\n      // initialized to in the global scope.\n      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n\n      if (isVarTypeBetter) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n\n      // Preserve the declared type if it exists\n      if (var != null && var.getType() != null) {\n        left.setJSType(var.getType());\n      } else {\n        left.setJSType(isVarDeclaration || leftType == null ? resultType : null);\n      }\n\n      if (var != null && var.isTypeInferred()) {\n        JSType oldType = var.getType();\n        var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));\n      }\n      break;\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(left, qualifiedName,\n            leftType == null ? unknownType : leftType, resultType);\n      }\n\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}