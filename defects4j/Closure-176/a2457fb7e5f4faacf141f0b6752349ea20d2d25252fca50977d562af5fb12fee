{
    "generation": "private void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      // As before, prefer the declared type over the initializer\n      // except when the initializer is null (or undefined), which\n      // we want to propagate so that x.push on a null x is caught.\n      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n      boolean shouldUseResultType =\n          isVarTypeBetter\n          || resultType.isNullType()\n          || resultType.isVoidType();\n\n      if (shouldUseResultType) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n      left.setJSType(\n          isVarDeclaration || leftType == null\n              ? resultType\n              : null);\n\n      if (var != null && var.isTypeInferred()) {\n        JSType oldType = var.getType();\n        var.setType(oldType == null\n            ? resultType\n            : oldType.getLeastSupertype(resultType));\n      }\n      break;\n\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(\n            left, qualifiedName,\n            leftType == null ? unknownType : leftType,\n            resultType);\n      }\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}