{
    "generation": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\nprivate void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n\n      // If we have a declared variable, use its declared type when it's better\n      if (isVarTypeBetter) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n      left.setJSType(isVarDeclaration || leftType == null ?\n          resultType : null);\n\n      if (var != null && var.isTypeInferred()) {\n        JSType oldType = var.getType();\n        var.setType(oldType == null\n            ? resultType\n            : oldType.getLeastSupertype(resultType));\n      }\n      break;\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(left, qualifiedName,\n            leftType == null ? unknownType : leftType,\n            resultType);\n      }\n      left.setJSType(resultType);\n      // Fix: do not propagate null/unknown types as property type, which effectively\n      // erases previous useful type info (e.g., object type from jsdoc)\n      if (resultType != null &&\n          !resultType.isUnknownType() &&\n          !resultType.isNullType()) {\n        ensurePropertyDefined(left, resultType);\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}