{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = NodeUtil.isVarDeclaration(left);\n\n        // When looking at VAR initializers for declared VARs, we tend\n        // to use the declared type over the type it's being\n        // initialized to in the global scope.\n        //\n        // For example,\n        // /** @param {number} */ var f = goog.abstractMethod;\n        // it's obvious that the programmer wants you to use\n        // the declared function signature, not the inferred signature.\n        //\n        // Or,\n        // /** @type {Object.<string>} */ var x = {};\n        // the one-time anonymous object on the right side\n        // is as narrow as it can possibly be, but we need to make\n        // sure we back-infer the <string> element constraint on\n        // the left hand side, so we use the left hand side.\n        //\n        // However, we *must* update the scope if the new type is null or\n        // undefined. Otherwise, we might not issue warnings for null-dereferences\n        // (like in issue 1056).\n        //\n        // The original logic only updated the scope if:\n        // a) It wasn't a VAR declaration initialization, OR\n        // b) The var's type was inferred.\n        // This prevented updates for VARs with declared types, causing the bug.\n        // boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n\n        // New logic: Always update the scope to reflect the assigned type.\n        // Flow-sensitive typing requires tracking the current type in the scope.\n        // The declared type is still stored on the Var object for other checks.\n        redeclareSimpleVar(scope, left, resultType);\n\n        // Update the JSType of the NAME node itself. Use original logic here,\n        // as changing it might have unintended side effects. The main fix\n        // is always updating the flow scope via redeclareSimpleVar.\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        // Update the Var's overall type if it was originally inferred.\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break; // End of Token.NAME case\n\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break; // End of Token.GETPROP case\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}