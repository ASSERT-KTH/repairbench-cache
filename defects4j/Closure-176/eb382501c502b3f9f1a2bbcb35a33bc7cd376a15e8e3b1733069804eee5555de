{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        // Update the scope with the result type known in this flow.\n        // This ensures that flow typing reflects the assignment's outcome,\n        // regardless of whether the variable had a declared type.\n        // For example, after `/** @type {Array} */ var x = null;`, the\n        // scope should know that x is currently null.\n        redeclareSimpleVar(scope, left, resultType);\n\n        // Original logic for deciding whether to use declared type over inferred type\n        // for other purposes (like setting node JSType or updating Var type).\n        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n            // Makes it easier to check for NPEs.\n\n        // TODO(nicksantos): This might be a better check once we have\n        // back-inference of object/array constraints.  It will probably\n        // introduce more type warnings.  It uses the result type iff it's\n        // strictly narrower than the declared var type.\n        //\n        //boolean isVarTypeBetter = isVarDeclaration &&\n        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)\n        //     || !resultType.isSubtype(varType));\n\n\n        // Set the JSType for the AST node. Use the result type if this is\n        // a VAR declaration or the LHS node didn't have a type initially.\n        // Otherwise, let the node inherit its type or keep its existing type.\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        // Update the Var's static type only if it was inferred.\n        // We don't want assignments to overwrite a declared type.\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break; // End of Token.NAME case\n\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}