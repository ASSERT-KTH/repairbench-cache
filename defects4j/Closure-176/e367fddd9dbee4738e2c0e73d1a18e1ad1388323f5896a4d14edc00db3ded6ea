{
    "generation": "private void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      // When looking at VAR initializers for declared VARs, we tend\n      // to use the declared type over the type it's being\n      // initialized to in the global scope.\n      //\n      // For example,\n      // /** @param {number} */ var f = goog.abstractMethod;\n      // it's obvious that the programmer wants you to use\n      // the declared function signature, not the inferred signature.\n      //\n      // Or,\n      // /** @type {Object.<string>} */ var x = {};\n      // the one-time anonymous object on the right side\n      // is as narrow as it can possibly be, but we need to make\n      // sure we back-infer the <string> element constraint on\n      // the left hand side, so we use the left hand side.\n\n      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n          // Makes it easier to check for NPEs.\n\n      if (isVarTypeBetter) {\n        redeclareSimpleVar(scope, left, resultType);\n      }\n      left.setJSType(resultType);\n\n      if (var != null) {\n        JSType oldType = var.getType();\n        if (oldType != null && leftType != null && !leftType.isUnknownType()) {\n          // Don't override the declared type with the initialized type\n          // unless the declared type is inferred\n          if (var.isTypeInferred()) {\n            var.setType(oldType.getLeastSupertype(resultType));\n          }\n        } else if (oldType == null || oldType.isUnknownType()) {\n          var.setType(resultType);\n        }\n      }\n      break;\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(left, qualifiedName,\n            leftType == null ? unknownType : leftType,\n            resultType);\n      }\n\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}