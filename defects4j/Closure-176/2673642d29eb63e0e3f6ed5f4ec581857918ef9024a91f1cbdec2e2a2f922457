{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        // When looking at VAR initializers for declared VARs, we tend\n        // to use the declared type over the type it's being\n        // initialized to in the global scope.\n        //\n        // For example,\n        // /** @param {number} */ var f = goog.abstractMethod;\n        // it's obvious that the programmer wants you to use\n        // the declared function signature, not the inferred signature.\n        //\n        // Or,\n        // /** @type {Object.<string>} */ var x = {};\n        // the one-time anonymous object on the right side\n        // is as narrow as it can possibly be, but we need to make\n        // sure we back-infer the <string> element constraint on\n        // the left hand side, so we use the left hand side.\n\n        // The type in the FlowScope should always reflect the result of the assignment\n        // for precise flow analysis. The declared type (if any) acts as an upper bound\n        // that is used for subsequent type checking, but the current value's type\n        // should be propagated through the flow.\n        redeclareSimpleVar(scope, left, resultType);\n\n        // Update the Var object's overall inferred type if it's currently inferred.\n        // This is where declared types take precedence over assigned types\n        // in determining the *variable's overall type*, not its flow-sensitive type.\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        // If var has a declared type (not inferred), its type on the Var object\n        // should not be changed by this assignment. It retains its declared type.\n        // This handles cases like `/** @type {Array} */ var x = null;` where `x`\n        // should still be considered `Array` for its overall type, but `null`\n        // for current flow analysis.\n\n        // The previous line `left.setJSType(isVarDeclaration || leftType == null ? resultType : null);`\n        // is now handled by `redeclareSimpleVar` which sets `name.setJSType(type)`.\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}