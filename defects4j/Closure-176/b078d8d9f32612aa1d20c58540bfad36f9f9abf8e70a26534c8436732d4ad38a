{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        // When looking at VAR initializers for declared VARs, we tend\n        // to use the declared type over the type it's being\n        // initialized to in the global scope.\n        //\n        // For example,\n        // /** @param {number} */ var f = goog.abstractMethod;\n        // it's obvious that the programmer wants you to use\n        // the declared function signature, not the inferred signature.\n        //\n        // Or,\n        // /** @type {Object.<string>} */ var x = {};\n        // the one-time anonymous object on the right side\n        // is as narrow as it can possibly be, but we need to make\n        // sure we back-infer the <string> element constraint on\n        // the left hand side, so we use the left hand side.\n\n        // Determine if the resultType should update the variable's type in the scope.\n        boolean shouldUpdateVarInScope;\n        if (var == null || var.isTypeInferred()) {\n          // If the variable is new or its type is inferred, always update its type in the scope.\n          shouldUpdateVarInScope = true;\n        } else {\n          // If the variable has a declared type (not inferred):\n          // We only update its type in the scope if it's an assignment\n          // and the resultType is not null or undefined.\n          // For initializers of declared vars (isVarDeclaration == true),\n          // this condition will be false, preventing overwrite by resultType.\n          shouldUpdateVarInScope = !isVarDeclaration &&\n              !(resultType.isEquivalentTo(registry.getNativeType(JSTypeNative.NULL_TYPE)) ||\n                resultType.isEquivalentTo(registry.getNativeType(JSTypeNative.VOID_TYPE)));\n        }\n\n        if (shouldUpdateVarInScope) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n\n        // Set the JSType for the current NAME node.\n        // For VAR declarations with a declared type (leftType != null),\n        // prefer the declared type for the node itself.\n        // Otherwise (for inferred variables or assignments), use the resultType.\n        if (isVarDeclaration && leftType != null) {\n          left.setJSType(leftType);\n        } else {\n          left.setJSType(resultType);\n        }\n\n        // The following block is redundant. Its functionality is covered by\n        // `redeclareSimpleVar` when `shouldUpdateVarInScope` is true,\n        // and it would not be entered if `shouldUpdateVarInScope` is false\n        // (as it implies !var.isTypeInferred()).\n        // if (var != null && var.isTypeInferred()) {\n        //   JSType oldType = var.getType();\n        //   var.setType(oldType == null ?\n        //       resultType : oldType.getLeastSupertype(resultType));\n        // }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}