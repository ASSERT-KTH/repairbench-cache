{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n\n        // Parameters of the scope function and bleeding functions are handled\n        // by other checks (e.g., BAD_PARAMETERS), so we ignore them here.\n        if (v.isParam() || v.isBleedingFunction()) {\n          continue;\n        }\n\n        // Determine if the current variable is an alias.\n        // An alias is defined as a VAR declaration where its initial value\n        // is a qualified name (e.g., `var alias = goog.dom.something`).\n        boolean isAlias = false;\n        if (parent.isVar()) { // This checks if it's a `var` declaration (e.g., `var x = ...`)\n            Node value = n.getFirstChild(); // Get the right-hand side (initial value) of the assignment\n            if (value != null && value.isQualifiedName()) {\n                // If the initial value is a qualified name, then it's an alias.\n                isAlias = true;\n            }\n        }\n\n        if (isAlias) {\n          // This is an actual alias. Register it for transformation.\n          String name = n.getString();\n          // Use the 'v' (Var) object directly, no need to lookup again from scope.\n          aliases.put(name, v);\n\n          // Get the qualified name from the initial value of the alias variable.\n          String qualifiedName = v.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // This is a local variable that is not an alias.\n          // This covers:\n          // - `var x = 10;` (a VAR declaration, but value is not a qualified name)\n          // - `var x = goog.dom + 10;` (value is an ADD operation, not a qualified name)\n          // - `var x = goog['dom'];` (value is a GETELEM operation, not a qualified name)\n          // - `function f() {}` (a FUNCTION declaration, which is not a VAR declaration)\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}