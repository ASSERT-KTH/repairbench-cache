{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode(); // n is the NAME node (e.g., 'x' in 'var x = 10')\n\n        // Get the initial value of the variable.\n        // For 'var x = 10;', initialValue is the NUMBER node '10'.\n        // For 'var x = goog.foo.bar;', initialValue is the GETPROP node for 'goog.foo.bar'.\n        // For 'function f() {}', initialValue is the FUNCTION node.\n        // For 'var x;', initialValue is null.\n        // For a function parameter 'a' in 'function(a){}', initialValue is null.\n        Node initialValue = v.getInitialValue();\n\n        // Determine if the variable should be treated as an alias.\n        // An alias is a variable initialized with a qualified name (e.g., 'goog.foo.bar').\n        // It must have an initial value, and that value must be a qualified name.\n        boolean isAlias = initialValue != null && initialValue.isQualifiedName();\n\n        if (isAlias) {\n          // This variable is an alias (e.g., 'var x = goog.foo.bar;')\n          String name = n.getString(); // The local name (e.g., \"x\")\n\n          // Store the alias variable.\n          // Note: scope.getVar(name) would return 'v' itself.\n          aliases.put(name, v);\n\n          // Get the full qualified name from the initial value node.\n          String qualifiedName = initialValue.getQualifiedName();\n\n          // Add this alias transformation to be applied later.\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // This variable is not an alias (e.g., 'var x = 10;', 'function f() {}', 'var x;')\n\n          // According to comments, bleeding functions and parameters\n          // already get a BAD_PARAMETERS error, so we should not report\n          // GOOG_SCOPE_NON_ALIAS_LOCAL for them to avoid duplicate/conflicting errors.\n          // For all other local variables that are not aliases, report them.\n          if (!v.isParameter() && !v.isBleedingFn()) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}