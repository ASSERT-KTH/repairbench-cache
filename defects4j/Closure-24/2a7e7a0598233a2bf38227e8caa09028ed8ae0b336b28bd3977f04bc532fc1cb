{
    "generation": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    int type = n.getType();\n    Node parent = n.getParent();\n    // Do not report errors for const or let declarations.\n    if (type == Token.CONST || type == Token.LET) {\n      continue;\n    }\n    if (parent.isVar()) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        aliases.put(name, aliasVar);\n\n        String qualifiedName =\n            aliasVar.getInitialValue().getQualifiedName();\n        transformation.addAlias(name, qualifiedName);\n        // Bleeding functions already get a BAD_PARAMETERS error, so just\n        // do nothing.\n        // Parameters of the scope function also get a BAD_PARAMETERS\n        // error.\n      } else {\n        // Report non-alias local variables.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}