{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode(); // The NAME node (e.g., 'x')\n        Node parent = v.getParentNode(); // The declaration node (VAR, FUNCTION, CATCH...)\n\n        // Parameters of the scope function produce a BAD_PARAMETERS error elsewhere,\n        // so ignore them here.\n        // Bleeding functions defined inside the scope are also ignored, as they\n        // are not declared variables in this scope.\n        if (v.isParameter()) {\n          continue;\n        }\n\n        // Check if the variable declaration is a valid alias:\n        // var alias = qualified.name;\n        boolean isVar = parent.isVar();\n        Node initialValue = v.getInitialValue();\n        boolean isValidAlias = isVar\n            && initialValue != null\n            && initialValue.isQualifiedName();\n\n        if (isValidAlias) {\n          // Record the alias\n          String name = n.getString(); // Or v.getName()\n          // Check if aliasVar is null? v should always be in the scope.\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n\n          // Note: initialValue is guaranteed non-null and QName here.\n          String qualifiedName = initialValue.getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // Not a valid alias. This includes:\n          // - var x; (initialValue == null)\n          // - var x = 10; (!initialValue.isQualifiedName())\n          // - var x = foo() + bar(); (!initialValue.isQualifiedName())\n          // - function f() {} (!isVar)\n          // - catch(e) {} (!isVar for e)\n          // We report an error for these cases, as they are invalid declarations\n          // directly inside a goog.scope block besides aliases.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}