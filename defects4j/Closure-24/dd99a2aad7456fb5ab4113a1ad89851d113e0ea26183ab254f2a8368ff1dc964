{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n\n        // Check if it's a variable declared with 'var'.\n        // If n is a NAME node and its parent is a VAR node, it's a var declaration.\n        if (parent.isVar()) {\n          // A variable declared via `var name = initializer;`\n          // In goog.scope, such a variable must be an alias to a qualified name.\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            // This is a qualified name alias: var alias = goog.dom.something;\n            String name = n.getString();\n            // 'v' is already the Var object for 'name'.\n            aliases.put(name, v);\n\n            // Get the qualified name string from the initial value node.\n            // v.getInitialValue() provides the node for the RHS of the assignment.\n            String qualifiedName = v.getInitialValue().getQualifiedName();\n            transformation.addAlias(name, qualifiedName);\n          } else {\n            // This is a 'var' declaration but its initializer is not a qualified name.\n            // e.g., var x = 10; var x = goog.dom + 10; var x = goog['dom'];\n            // These are not allowed in goog.scope.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        } else if (n.isFunction()) {\n          // This handles function declarations: 'function f() {}'\n          // In goog.scope, all local variables, including function declarations,\n          // must be aliases. Function declarations cannot be aliases to qualified names.\n          // Therefore, they are always reported as errors.\n          //\n          // The comments about \"Bleeding functions\" and \"Parameters of the scope function\"\n          // imply that certain types of functions/parameters are handled by other checks\n          // or are implicitly filtered out from this check.\n          // A simple `function f() {}` declared directly within a `goog.scope` block\n          // is a regular local variable that should be reported if it's not an alias.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n        // Other types of variables (e.g., function parameters, catch variables)\n        // are implicitly skipped by the above conditions (their parents are not VAR,\n        // and they are not FUNCTION nodes themselves). This aligns with the\n        // comments suggesting they are handled by other checks/errors.\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}