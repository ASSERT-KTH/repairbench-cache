{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode(); // This is the NAME node (e.g., 'x' in var x = ...)\n        // Skip variables introduced by externs files, the built-in externs, bleeding functions,\n        // catch declarations, and function parameters.\n        if (n == null\n            || v.isExtern() // Added check for externs\n            || v.isBuiltin() // Added check for builtins\n            || v.isBleedingFunction()\n            || v.isCatch()\n            || v.isParam()\n            || v.isSynAlias()) { // Skip synthetic alias for goog.scope parameter\n          continue;\n        }\n\n        Node parent = n.getParent();\n        if (parent == null) {\n          continue; // Should not happen for valid AST, but good practice\n        }\n\n        boolean isAlias = false;\n        // Check if it's a variable declaration (VAR only, based on original code)\n        // with an initializer that is a qualified name.\n        if (parent.isVar()) {\n          Node initialValue = v.getInitialValue();\n          if (initialValue != null && initialValue.isQualifiedName()) {\n            String name = v.getName(); // The alias name (e.g., 'dom')\n            String qualifiedName = initialValue.getQualifiedName();\n\n            // Check that the qualified name is valid and not referring back to the alias\n            // itself (like var x = x; which isn't useful). Also check for null.\n            if (qualifiedName != null && !name.equals(qualifiedName)) {\n              // Record the alias\n              aliases.put(name, v);\n              transformation.addAlias(name, qualifiedName);\n              isAlias = true;\n            }\n          }\n        }\n        // else if (parent.isLet() || parent.isConst()) {\n        // TODO(robbyw): Support let/const aliases if needed in the future.\n        // }\n\n        // If it wasn't successfully processed as a valid alias (e.g., it's a function decl,\n        // class decl, var without initializer, var with non-QName initializer), report error.\n        if (!isAlias) {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}