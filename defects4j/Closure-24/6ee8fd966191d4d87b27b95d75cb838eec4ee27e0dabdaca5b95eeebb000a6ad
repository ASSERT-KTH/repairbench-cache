{
    "generation": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n        if (parent.isVar()) {\n            if (n.hasChildren()) {\n                if (n.getChildCount() > 1) {\n                    Node initializer = n.getChildAtIndex(1);\n                    if (initializer.isQualifiedName()) {\n                        String name = n.getFirstChild().getString();\n                        Var aliasVar = scope.getVar(name);\n                        aliases.put(name, aliasVar);\n\n                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                        transformation.addAlias(name, qualifiedName);\n                    } else {\n                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n                    }\n                } else {\n                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n                }\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}