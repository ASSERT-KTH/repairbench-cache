{
    "generation": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null) {\n      continue;\n    }\n    Node parent = n.getParent();\n    if (parent == null) {\n      continue;\n    }\n    if (parent.isVar()) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        aliases.put(name, aliasVar);\n\n        Node init = aliasVar.getInitialValue();\n        if (init != null) {\n          String qualifiedName = init.getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        }\n        // Bleeding functions and parameters are handled elsewhere.\n      } else {\n        // Non-alias local declarations in goog.scope bodies are not allowed.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    } else if (n.isFunction()) {\n      // Function declarations at the top of a goog.scope are not allowed.\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}