{
    "generation": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    int type = n.getType();\n    Node parent = n.getParent();\n    if (parent.isVar()) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          aliases.put(name, aliasVar);\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          if (qualifiedName != null) {\n            transformation.addAlias(name, qualifiedName);\n          }\n        } else {\n          // Handle the case where aliasVar or its initial value is null\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      } else {\n        // TODO(robbyw): Support using locals for private variables.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    } else if (parent.isFunction()) {\n      // Handle function declarations separately if needed\n      // For now, just skip them as they are not aliases\n    } else {\n      // Handle other cases where parent is not VAR or FUNCTION\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}