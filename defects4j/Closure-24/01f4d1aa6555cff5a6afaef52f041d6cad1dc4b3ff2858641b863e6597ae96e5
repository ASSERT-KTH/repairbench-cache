{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode(); // The NAME node for variable v\n        Node parent = n.getParent();\n\n        // Parameters, catch variables, bleeding functions, and defines are ignored.\n        // They are either handled elsewhere or not relevant for aliasing.\n        if (v.isParam() || v.isCatch() || v.isBleedingFunction() || v.isDefine()) {\n           continue;\n        }\n\n        boolean isAliasDefinition = false;\n        // Check if it's a variable declaration (var/let/const)\n        if (parent.isVar() || parent.isLet() || parent.isConst()) {\n           Node initializer = v.getInitialValue(); // Get the initializer RHS node\n           // Check if initializer exists and is a qualified name\n           if (initializer != null && initializer.isQualifiedName()) {\n               String qualifiedName = initializer.getQualifiedName();\n               // Check if getQualifiedName() returns a non-null value,\n               // ensuring it's a simple qualified name like a.b.c not complex like a.b['c']\n               if (qualifiedName != null) {\n                   // This is a valid alias definition.\n                   isAliasDefinition = true;\n                   String name = v.getName();\n                   aliases.put(name, v);\n                   transformation.addAlias(name, qualifiedName);\n               }\n           }\n        }\n        // Other declarations like functions (parent.isFunction()),\n        // classes (parent.isClass()) are not valid alias definitions.\n\n        // If this variable declaration within the scope is not a recognized\n        // alias pattern (var/let/const name = qualified.name;), report an error.\n        if (!isAliasDefinition) {\n           // This reports an error for:\n           // - var x;\n           // - var x = 10;\n           // - var x = foo() + 1;\n           // - function f() {}\n           // - class C {}\n           // - let/const declarations not matching the alias pattern.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}