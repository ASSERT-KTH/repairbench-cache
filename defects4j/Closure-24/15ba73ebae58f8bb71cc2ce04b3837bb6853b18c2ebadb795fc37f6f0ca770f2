{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n// buggy code\n//        if (parent.isVar()) {\n//          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n//          String name = n.getString();\n//          Var aliasVar = scope.getVar(name);\n//          aliases.put(name, aliasVar);\n//          String qualifiedName =\n//              aliasVar.getInitialValue().getQualifiedName();\n//          transformation.addAlias(name, qualifiedName);\n//          // Bleeding functions already get a BAD_PARAMETERS error, so just\n//          // do nothing.\n//          // Parameters of the scope function also get a BAD_PARAMETERS\n//          // error.\n//        } else {\n//          // TODO(robbyw): Support using locals for private variables.\n//          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n//        }\n//        }\n        if (parent != null && parent.isVar()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n          String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n          // Bleeding functions already get a BAD_PARAMETERS error, so just\n          // do nothing.\n          // Parameters of the scope function also get a BAD_PARAMETERS\n          // error.\n        } else {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n        }\n\n      }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}