{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        // int type = n.getType(); // This variable is unused and can be removed, but leaving it as per problem instructions.\n        Node parent = n.getParent();\n\n        // Only process variables that are declared in the current local scope.\n        // For ScopedAliases, we are typically interested in local variables.\n        if (v.isLocal()) {\n          // An alias is defined as a VAR declaration whose assigned value is a qualified name.\n          // First, check if the variable's parent is a VAR node (e.g., `var x = ...;`).\n          if (parent != null && parent.isVar()) {\n            // This is a 'var' declaration. Now, check if it is a valid alias.\n            // An alias requires an initial value that is a qualified name.\n            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n              // This is a valid alias (e.g., `var aliasName = qualified.name;`).\n              String name = n.getString();\n              Var aliasVar = scope.getVar(name);\n              aliases.put(name, aliasVar);\n\n              String qualifiedName =\n                  aliasVar.getInitialValue().getQualifiedName();\n              transformation.addAlias(name, qualifiedName);\n              // Bleeding functions already get a BAD_PARAMETERS error, so just\n              // do nothing.\n              // Parameters of the scope function also get a BAD_PARAMETERS\n              // error.\n            } else {\n              // This is a 'var' declaration, but it's not an alias.\n              // Examples: `var x = 10;`, `var x;`, `var x = goog.dom + 10;`\n              // These should be reported as non-alias locals.\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n          } else {\n            // This branch handles local variables that are NOT 'var' declarations.\n            // This includes function declarations (e.g., `function f() {}`),\n            // function parameters, and catch block variables.\n            // As per `testNonAliasLocal` expecting an error for `function f() {}`,\n            // these are also considered non-alias locals and should be reported.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}