{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode(); // The NAME node for the variable\n\n        // Parameters of the `goog.scope` function itself are handled by another error\n        // (BAD_PARAMETERS), so they should not be reported as GOOG_SCOPE_NON_ALIAS_LOCAL.\n        // Bleeding functions (if treated as parameters in some context) also fall under this.\n        if (v.isParam()) {\n          continue;\n        }\n\n        // An alias is defined as a local variable initialized with a qualified name.\n        Node initialValue = v.getInitialValue();\n\n        // Check if the initial value exists and if it is a qualified name (e.g., goog.foo.Bar).\n        if (initialValue != null && initialValue.isQualifiedName()) {\n          // This variable is an alias.\n          String name = n.getString(); // The local name (e.g., 'Foo' in `var Foo = goog.foo.Foo;`)\n          String qualifiedName = initialValue.getQualifiedName(); // The full qualified name ('goog.foo.Foo')\n\n          // Store the alias mapping.\n          aliases.put(name, v); // 'v' is the Var object representing the alias.\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // This variable is a local variable but not an alias.\n          // This includes cases like:\n          // - `var x = 10;` (initialValue is a NUMBER, not a qualified name)\n          // - `var x;` (initialValue is null)\n          // - `function f() {}` (initialValue is the FUNCTION node itself, not a qualified name)\n          // - `var x = goog['dom'];` (initialValue is a GETELEM, not a qualified name)\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}