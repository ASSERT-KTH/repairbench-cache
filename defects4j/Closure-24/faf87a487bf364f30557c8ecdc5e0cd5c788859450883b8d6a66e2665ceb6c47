{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        // Bleeding functions already get a BAD_PARAMETERS error, so just\n        // do nothing. Parameters of the scope function also get a BAD_PARAMETERS\n        // error. These variables should be skipped as they are handled by other\n        // checks.\n        if (v.isBleedingFunction() || v.isParameter()) {\n          continue;\n        }\n\n        Node initialValue = v.getInitialValue();\n\n        // An alias is defined as a local variable whose initial value is a qualified name.\n        // For example: `var x = goog.some.path;`\n        if (initialValue != null && initialValue.isQualifiedName()) {\n          String name = v.getName();\n          // The Var 'v' itself is the aliasVar.\n          aliases.put(name, v);\n\n          String qualifiedName = initialValue.getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // If a local variable is not an alias (i.e., its initial value is not a qualified name,\n          // or it has no initial value, or it's a function declaration, etc.),\n          // it should be reported as a non-alias local variable in a goog.scope.\n          // This includes cases like:\n          // `var x = 10;`\n          // `var x = goog.dom + 10;`\n          // `var x = goog['dom'];` (as goog['dom'] is not a qualified name node)\n          // `function f() {}`\n          report(t, v.getNode(), GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}