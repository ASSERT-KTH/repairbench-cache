{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n\n        // Bleeding functions already get a BAD_PARAMETERS error, so just do nothing.\n        // Parameters of the scope function also get a BAD_PARAMETERS error.\n        if (v.isBleedingFunction() || v.isParam()) {\n          continue;\n        }\n\n        // In a goog.scope block, only 'var' declarations that alias a qualified name\n        // are allowed. All other local declarations (e.g., 'var x = 10', 'function f() {}')\n        // should be reported as errors.\n        //\n        // An alias is identified by:\n        // 1. It being a 'var' declaration (n.getParent().isVar())\n        // 2. It having an initializer (n.hasChildren())\n        // 3. Its initializer being a qualified name (n.getFirstChild().isQualifiedName())\n        if (n.getParent().isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n          // This is a valid alias, process it.\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name); // Retrieves the Var object again, effectively 'v'.\n          aliases.put(name, aliasVar);\n\n          String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // This variable or function declaration is not a valid alias according to\n          // goog.scope rules. Report an error.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}