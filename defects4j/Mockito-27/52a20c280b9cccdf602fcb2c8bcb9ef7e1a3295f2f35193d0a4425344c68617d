{
    "generation": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        // Retrieve the original settings, which include listeners, default answer, etc.\n        org.mockito.mock.MockCreationSettings<T> originalSettings = oldMockHandler.getMockSettings();\n\n        // Create a new handler instance. Assuming the constructor MockHandler(MockHandlerInterface)\n        // correctly initializes a handler suitable for reset, possibly copying immutable settings.\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n\n        // Create a new MethodInterceptorFilter with the new handler BUT using the *original* settings.\n        // This ensures that the configuration of the mock (like invocation listeners) is preserved.\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, originalSettings);\n\n        // Set the new filter as the callback for the mock instance.\n        // Assumes the mock implements net.sf.cglib.proxy.Factory or similar interface.\n        ((Factory) mock).setCallback(0, newFilter);\n    }\n\n    // Assuming the following helper method exists in the class or is accessible.\n    // This is a common way to get the handler in Mockito internals.\n    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        return org.mockito.internal.util.MockUtil.getMockHandler(mock);\n    }\n\n    // Assuming the mock objects implement this interface (typical for CGLIB/ByteBuddy).\n    // Adjust the import based on the actual proxy mechanism used (e.g., net.bytebuddy.dynamic.scaffold.InstrumentedType).\n    private interface Factory {\n        void setCallback(int index, Object callback);\n        // Potentially other methods depending on the proxy library.\n    }\n\n    // Assuming MockHandler and MethodInterceptorFilter are accessible internal classes\n    // (e.g., from org.mockito.internal.handler and org.mockito.internal.creation packages).\n    // The specific constructor `new MockHandler<T>(oldMockHandler)` might be specific to the codebase/version.\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}