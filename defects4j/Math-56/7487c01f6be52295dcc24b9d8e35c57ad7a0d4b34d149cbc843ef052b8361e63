{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n        final int[] indices = new int[dimension];\n        int count = 0;\n        for (int i = 0; i < last; i++) {\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            while (count <= index) {\n                count += offset;\n                ++idx;\n            }\n            --idx;\n            count -= offset;\n            indices[i] = idx;\n        }\n// buggy code\n//        int idx = 1;\n//        while (count < index) {\n//            count += idx;\n//            ++idx;\n//        }\n//        --idx;\n//        indices[last] = idx;\n        int idx = 0;\n        while (count < index) {\n            count += idx;\n            ++idx;\n        }\n        indices[last] = idx;\n\n        return indices;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}