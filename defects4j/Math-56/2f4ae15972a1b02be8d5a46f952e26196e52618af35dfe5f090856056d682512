{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n\n        int count = 0;\n        for (int i = 0; i < last; i++) {\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            // Find the largest idx such that count + idx * offset <= index\n            // The loop structure effectively does this by incrementing count\n            // until it exceeds index, then backtracking.\n            while (count <= index) {\n                count += offset;\n                ++idx;\n            }\n            // The loop went one step too far\n            --idx;\n            // Revert the last addition to count to reflect the contribution\n            // of this dimension's index (idx * offset).\n            count -= offset;\n            indices[i] = idx;\n        }\n\n        // The remaining part of the index corresponds to the last dimension.\n        // Since the offset for the last dimension is 1, the index\n        // for the last dimension is simply the remaining value.\n        indices[last] = index - count;\n\n        return indices;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}