{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n\n        int count = 0;\n        for (int i = 0; i < last; i++) {\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            while (count <= index) {\n                count += offset;\n                ++idx;\n            }\n            --idx;\n            count -= offset;\n            indices[i] = idx;\n        }\n\n        // The 'count' variable at this point represents the sum of the unidimensional\n        // contributions from the dimensions 0 through (last - 1).\n        // For example, if dimensions are [D0, D1, D2] and 'index' is the\n        // unidimensional equivalent of [i0, i1, i2], then after the loop,\n        // 'count' will be (i0 * D1*D2) + (i1 * D2).\n        // Therefore, the value for the last dimension (indices[last]) is simply\n        // the original 'index' minus this accumulated 'count'.\n        indices[last] = index - count;\n\n        return indices;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}