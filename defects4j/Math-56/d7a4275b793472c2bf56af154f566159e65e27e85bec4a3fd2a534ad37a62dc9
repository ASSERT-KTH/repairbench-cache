{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n        int currentRemainingIndex = index; // This variable will hold the part of the index not yet decomposed.\n\n        // Iterate through each dimension from the most significant to the least significant.\n        // The uniCounterOffset[i] stores the product of the sizes of all dimensions\n        // from (i+1) to (dimension-1). This acts as the stride for dimension 'i'.\n        // For example, if dimensions are (d0, d1, d2), then:\n        // uniCounterOffset[0] = d1 * d2\n        // uniCounterOffset[1] = d2\n        // uniCounterOffset[2] = 1\n        for (int i = 0; i < dimension; i++) {\n            int offset = uniCounterOffset[i];\n            indices[i] = currentRemainingIndex / offset; // Calculate the coordinate for the current dimension.\n            currentRemainingIndex %= offset;             // Update the remaining index for the next dimension.\n        }\n\n        return indices;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}