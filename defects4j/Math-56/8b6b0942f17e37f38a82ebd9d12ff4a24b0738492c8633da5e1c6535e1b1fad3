{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n        \n        // Use a new variable to track the remaining part of the unidimensional index.\n        // This 'remainingIndex' will be progressively reduced.\n        int remainingIndex = index; \n\n        // Iterate through dimensions from highest to lowest (based on uniCounterOffset)\n        // 'last' typically refers to dimension - 1. So this loop goes from 0 to dimension - 2.\n        for (int i = 0; i < last; i++) {\n            final int offset = uniCounterOffset[i];\n            \n            // Calculate the count for the current dimension.\n            // This is equivalent to indices[i] = remainingIndex / offset;\n            int currentDimCount = 0;\n            while (remainingIndex >= offset) {\n                remainingIndex -= offset;\n                ++currentDimCount;\n            }\n            indices[i] = currentDimCount;\n        }\n\n        // For the last dimension, the remaining value in 'remainingIndex' is its count.\n        // This is equivalent to indices[last] = remainingIndex / 1;\n        indices[last] = remainingIndex;\n\n        return indices;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}