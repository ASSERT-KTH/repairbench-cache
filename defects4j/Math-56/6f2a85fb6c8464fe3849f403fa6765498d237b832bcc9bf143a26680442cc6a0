{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n\n        int count = 0;\n        // Iterate through dimensions from most significant to second least significant\n        for (int i = 0; i < last; i++) {\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            // This loop effectively calculates:\n            // idx = floor((index - count) / offset)\n            // and updates count to be 'count + idx * offset'\n            while (count <= index) {\n                count += offset;\n                ++idx;\n            }\n            // After the loop, 'count' has incremented 'offset' one too many times,\n            // and 'idx' is one too high. Adjust them back.\n            --idx;\n            count -= offset;\n            indices[i] = idx;\n        }\n\n        // For the last dimension (least significant), uniCounterOffset[last] is always 1.\n        // The value for the last dimension is simply the remainder of the total index\n        // after accounting for all higher dimensions.\n        // The variable 'count' already holds the sum of contributions from higher dimensions.\n        // The original code used a loop (while (count < index) { count += idx; ++idx; } --idx;)\n        // which was calculating a triangular number sequence for the last digit, which is incorrect\n        // for a standard mixed-radix counter.\n        indices[last] = index - count;\n\n        return indices;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}