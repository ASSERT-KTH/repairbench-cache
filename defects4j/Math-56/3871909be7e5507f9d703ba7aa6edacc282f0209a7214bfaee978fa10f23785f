{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n\n        int count = 0; // Stores index contribution from dimensions processed so far\n        for (int i = 0; i < last; i++) { // Process dimensions 0 to dimension - 2\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            int accumulatedOffset = count; // Temporary variable starting from previous count\n\n            // Find how many 'offset' blocks fit into the index *after* accounting for 'count'.\n            // Calculate the count if we add the current offset.\n            int nextAccumulatedOffset = accumulatedOffset + offset;\n            // Check if the next count is within the index bounds.\n            while (nextAccumulatedOffset <= index) {\n                // If it is, increment the index for the current dimension,\n                // update the accumulated offset, and calculate the next potential offset.\n                accumulatedOffset = nextAccumulatedOffset;\n                nextAccumulatedOffset += offset;\n                ++idx;\n            }\n            // After the loop, 'idx' holds the correct count for the current dimension 'i'.\n            indices[i] = idx;\n\n            // Update the count with the contribution from the current dimension.\n            // count becomes the base value for the next dimension's calculation.\n            count += idx * offset;\n        }\n\n        // The remaining part of the index corresponds to the last dimension (offset = 1).\n        // The count for the last dimension is simply the remaining index value.\n        indices[last] = index - count;\n\n        return indices;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}