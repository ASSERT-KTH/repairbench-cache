{
    "generation": "    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n        int remainingIndex = index;\n\n        // The uniCounterOffset array stores the stride for each dimension.\n        // uniCounterOffset[i] is the product of the sizes of dimensions\n        // from i+1 up to dimension-1.\n        // For example, if sizes = {S0, S1, S2}, then:\n        // uniCounterOffset[0] = S1 * S2\n        // uniCounterOffset[1] = S2\n        // uniCounterOffset[2] = 1\n        //\n        // The conversion from a unidimensional index to multidimensional indices (d0, d1, ..., d_k)\n        // follows a base conversion principle:\n        // index = d0 * (S1*S2*...*Sk) + d1 * (S2*...*Sk) + ... + dk * (1)\n        //\n        // So, di = (remaining part of index) / uniCounterOffset[i]\n        // and the new remaining part is (remaining part of index) % uniCounterOffset[i]\n\n        for (int i = 0; i < dimension; i++) {\n            indices[i] = remainingIndex / uniCounterOffset[i];\n            remainingIndex %= uniCounterOffset[i];\n        }\n\n        return indices;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}