{
    "generation": "  /**\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   */\n  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main js sources.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      // The list of inputs that will be processed for main JS sources.\n      // This will be potentially reordered by dependency management.\n      List<CompilerInput> inputsForFilteringAndSorting = inputs;\n\n      // Check if the sources need to be re-ordered.\n      if (options.dependencyOptions.needsManagement() &&\n          !options.skipAllPasses &&\n          options.closurePass) {\n        for (CompilerInput input : inputs) {\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          // Reassign `inputsForFilteringAndSorting` to the dependency-sorted list.\n          inputsForFilteringAndSorting =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        }\n      }\n\n      // This list will store the inputs that are truly main JS sources\n      // and should be added to jsRoot, in their correct (dependency) order.\n      List<CompilerInput> finalMainInputsForJsRoot = new ArrayList<>();\n      boolean modulesModified = false; // Flag to track if modules' internal lists were modified\n\n      // Iterate through the (potentially dependency-sorted) list of inputs.\n      // During this iteration, we parse ASTs, identify externs/no-compile,\n      // and build the `finalMainInputsForJsRoot` list.\n      for (CompilerInput input : inputsForFilteringAndSorting) {\n        Node n = input.getAstRoot(this); // Get/parse AST\n\n        // Inputs can have a null AST (e.g., empty file, or error during parsing)\n        if (n == null) {\n          // If AST is null, it means the input won't contribute to the AST.\n          // Remove it from its module to keep module structure consistent.\n          if (input.getModule() != null) {\n              input.getModule().remove(input);\n              modulesModified = true;\n          }\n          continue; // Skip this input, it won't be added to jsRoot.\n        }\n\n        if (n.getJSDocInfo() != null) {\n          JSDocInfo info = n.getJSDocInfo();\n          if (info.isExterns()) {\n            // If the input file is explicitly marked as an externs file, then\n            // assume the programmer made a mistake and throw it into\n            // the externs pile anyways.\n            externsRoot.addChildToBack(n); // Add AST to externs root\n            input.setIsExtern(true);\n\n            // Remove from its module's inputs so it's not considered a main JS input.\n            if (input.getModule() != null) {\n                input.getModule().remove(input);\n                modulesModified = true;\n            }\n            externs.add(input); // Add to compiler's global externs list\n            continue; // Skip adding to `finalMainInputsForJsRoot`\n          } else if (info.isNoCompile()) {\n            if (input.getModule() != null) {\n                input.getModule().remove(input);\n                modulesModified = true;\n            }\n            continue; // Skip adding to `finalMainInputsForJsRoot`\n          }\n        }\n        // If it's a main JS input (not externs, not noCompile, not null AST),\n        // add it to the list for final compilation.\n        finalMainInputsForJsRoot.add(input);\n      }\n\n      // After filtering and potential reordering, update the Compiler's global `inputs` list\n      // to the exact set of inputs that should be compiled as main JS, in their correct order.\n      this.inputs = finalMainInputsForJsRoot;\n\n      // If any modules had inputs removed, ensure consistency by filling empty modules.\n      if (modulesModified) {\n          fillEmptyModules(modules);\n      }\n      // The `staleInputs` flag and `rebuildInputsFromModules()` call are no longer needed here,\n      // as `this.inputs` has been directly set to the correctly filtered and ordered list.\n\n      // Build the AST.\n      // This loop now iterates over `this.inputs` which is `finalMainInputsForJsRoot`.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this); // Should retrieve cached AST, guaranteed not null for valid inputs.\n        // It's still good to check for null just in case of unexpected scenarios,\n        // although logically n should not be null here for inputs that made it to finalMainInputsForJsRoot.\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}