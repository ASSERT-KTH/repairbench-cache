{
    "generation": "  /**\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   */\n  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Initialize the AST roots.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Phase 1: Parse externs sources and add their ASTs to externsRoot.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      boolean inputsModifiedByDocInfo = false;\n\n      // Phase 2: Process AMD/CommonJS modules. This might modify the set of\n      // inputs and modules.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n        // If AMD/CJS processing happens, inputs/modules might have been modified.\n        inputsModifiedByDocInfo = true;\n      }\n\n      // Phase 3: Identify inputs marked as externs or no-compile via JSDoc.\n      // Filter these inputs from the main 'inputs' list and update module structure.\n      List<CompilerInput> currentJsInputs = new ArrayList<>();\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this); // Get AST (parse if not already parsed)\n\n        // Inputs can have a null AST during initial parse if there's a parsing error,\n        // or if they are in a state that doesn't require parsing yet.\n        // If it's null, we can't check JSDoc, so assume it's a JS input for now.\n        if (n == null) {\n          currentJsInputs.add(input);\n          continue;\n        }\n\n        if (n.getJSDocInfo() != null) {\n          JSDocInfo info = n.getJSDocInfo();\n          if (info.isExterns()) {\n            // If the input file is explicitly marked as an externs file, then\n            // assume the programmer made a mistake and throw it into\n            // the externs pile anyways.\n            externsRoot.addChildToBack(n);\n            input.setIsExtern(true);\n            input.getModule().remove(input); // Remove from its current JS module\n            externs.add(input); // Add to the externs list\n            inputsModifiedByDocInfo = true;\n            continue; // Skip this input for main JS compilation\n          } else if (info.isNoCompile()) {\n            input.getModule().remove(input); // Remove from its current module\n            inputsModifiedByDocInfo = true;\n            continue; // Skip this input for main JS compilation\n          }\n        }\n        // If not externs or no-compile, it's a regular JS input.\n        currentJsInputs.add(input);\n      }\n      // Update the global 'inputs' list with the filtered set of actual JS inputs.\n      inputs = currentJsInputs;\n\n      // Phase 4: If any inputs were modified or moved, rebuild the 'inputs' list\n      // from the definitive 'modules' structure. This ensures 'inputs' is consistent\n      // with the content of modules, even if it undoes any prior sorting.\n      if (inputsModifiedByDocInfo) {\n        fillEmptyModules(modules);\n        rebuildInputsFromModules();\n      }\n\n      // Phase 5: Apply dependency management. This will sort the 'inputs' list\n      // according to Closure 'goog.require'/'goog.provide' dependencies.\n      if (options.dependencyOptions.needsManagement() &&\n          !options.skipAllPasses &&\n          options.closurePass) {\n        for (CompilerInput input : inputs) {\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          // The 'inputs' list is now correctly sorted.\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n          if (hasErrors()) {\n            return null;\n          }\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n          if (hasErrors()) {\n            return null;\n          }\n        }\n      }\n\n      // Phase 6: Build the AST for the main JS sources (jsRoot) using the final,\n      // sorted 'inputs' list.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this); // Get AST (parse if not already parsed).\n        if (n == null) {\n          // This should ideally not happen if getAstRoot parses it correctly and\n          // no errors are reported. Continue defensively.\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}