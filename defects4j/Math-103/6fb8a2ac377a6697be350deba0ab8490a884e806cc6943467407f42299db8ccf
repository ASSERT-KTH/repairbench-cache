{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        if (Double.isInfinite(x)) {\n            if (x > 0) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        }\n        double dev = x - mean;\n        if (Math.abs(dev) > 20 * standardDeviation) {\n            if (dev < 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));\n        } catch (MathException ex) {\n            if (x - mean < 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}