{
    "generation": "/**\n * For this distribution, X, this method returns P(X < <code>x</code>).\n * @param x the value at which the CDF is evaluated.\n * @return CDF evaluated at <code>x</code>. \n * @throws MathException if the algorithm fails to converge; unless\n * x is more than 20 standard deviations from the mean, in which case the\n * convergence exception is caught and 0 or 1 is returned.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = 20 * standardDeviation;\n    if (x < mean - dev) {\n        return 0;\n    } else if (x > mean + dev) {\n        return 1;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // Re-throw the exception if x is within 20 standard deviations\n            if (Math.abs(x - mean) <= dev) {\n                throw ex;\n            }\n            // Return 0 or 1 if x is more than 20 standard deviations away\n            return x < mean ? 0 : 1;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}