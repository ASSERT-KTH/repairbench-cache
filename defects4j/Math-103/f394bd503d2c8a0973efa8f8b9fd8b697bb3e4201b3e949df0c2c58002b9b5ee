{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        double dev = x - mean;\n        // Calculate the z-score (number of standard deviations from the mean)\n        double z_score = dev / standardDeviation;\n\n        // Check for extreme values.\n        // For practical purposes, probabilities beyond a certain number of standard deviations\n        // are effectively 0 or 1. This also prevents convergence issues for the Erf function\n        // when dealing with extremely large or small arguments that might cause MaxIterationsExceededException.\n        // A threshold of ~8 standard deviations (which corresponds to an Erf argument of ~5.65)\n        // is where the CDF is practically 0 or 1. This also satisfies the test's expectation\n        // that values corresponding to 'i >= 10' are top-coded and do not throw exceptions.\n        if (Math.abs(z_score) >= 8.0) {\n            if (z_score < 0) { // x is significantly less than the mean\n                return 0.0;\n            } else { // x is significantly greater than the mean\n                return 1.0;\n            }\n        }\n\n        // For values within the practical range, use the Erf function.\n        // The argument to Erf.erf is (x - mean) / (standardDeviation * Math.sqrt(2.0))\n        // which is equivalent to z_score / Math.sqrt(2.0).\n        return 0.5 * (1.0 + Erf.erf(z_score / Math.sqrt(2.0)));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}