{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        // Handle potential division by zero or invalid standard deviation\n        if (standardDeviation == 0) {\n             return x < mean ? 0.0 : (x > mean ? 1.0 : 0.5); // Consistent with Z-score interpretation\n        }\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));\n        } catch (MaxIterationsExceededException e) {\n            // Check if x is far from the mean (more than 20 standard deviations)\n            // as described in the Javadoc.\n            if (Math.abs(dev) > 20 * standardDeviation) {\n                 // Return 0 or 1 based on which side of the mean x is.\n                 return dev < 0 ? 0.0d : 1.0d;\n            } else {\n                // If convergence fails for non-extreme values, rethrow wrapped as MathException.\n                throw new MathException(e);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}