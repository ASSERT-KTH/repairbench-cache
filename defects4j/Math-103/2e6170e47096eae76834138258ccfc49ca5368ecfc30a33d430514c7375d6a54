{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n            // JIRA MATH-167: For extreme values, NormalDistribution.cumulativeProbability()\n            // should return 0 or 1 directly to prevent MaxIterationsExceededException\n            // from the Erf.erf function, as the probability is effectively 0 or 1.\n            // The Javadoc states \"unless x is more than 20 standard deviations from the mean\".\n            \n            // Calculate how many standard deviations x is from the mean.\n            // Assuming standardDeviation > 0. If standardDeviation were 0, this\n            // would be a division by zero, but NormalDistribution usually enforces positive std dev.\n            double n = (x - mean) / standardDeviation;\n\n            // Define the threshold for \"extreme\" values based on standard deviations.\n            // A common value used in such contexts is around 20 standard deviations.\n            final double EXTREME_DEVIATIONS = 20.0;\n\n            // If x is extremely far below the mean, the cumulative probability is effectively 0.\n            if (n <= -EXTREME_DEVIATIONS) {\n                return 0.0;\n            }\n\n            // If x is extremely far above the mean, the cumulative probability is effectively 1.\n            if (n >= EXTREME_DEVIATIONS) {\n                return 1.0;\n            }\n            \n            // Otherwise, calculate the cumulative probability using the error function.\n            // The argument to Erf.erf is (x - mean) / (standardDeviation * sqrt(2)).\n            // Since n = (x - mean) / standardDeviation, the argument becomes n / sqrt(2).\n            return 0.5 * (1.0 + Erf.erf(n / Math.sqrt(2.0)));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}