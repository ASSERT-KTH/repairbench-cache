{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // The formula for CDF of Normal Distribution is 0.5 * (1 + erf((x - mean) / (sigma * sqrt(2))))\n        double arg = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n\n        try {\n            return 0.5 * (1.0 + Erf.erf(arg));\n        } catch (MathException ex) {\n            // As per Javadoc, if Erf.erf fails to converge for extreme values,\n            // we should return 0 or 1 directly.\n            // The threshold is 20 standard deviations from the mean.\n            double z = (x - mean) / standardDeviation;\n            if (z > 20.0) { // x is more than 20 standard deviations above the mean\n                return 1.0;\n            } else if (z < -20.0) { // x is more than 20 standard deviations below the mean\n                return 0.0;\n            } else {\n                // If the convergence exception occurs for a value that is not extreme,\n                // re-throw the original exception.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}