{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n            // Calculate the number of standard deviations from the mean\n            double z = (x - mean) / standardDeviation;\n\n            // Handle extreme values directly to prevent convergence issues and return 0 or 1.\n            // This aligns with the Javadoc: \"unless x is more than 20 standard deviations from the mean,\n            // in which case the convergence exception is caught and 0 or 1 is returned.\"\n            // By returning early for these extreme values, we effectively \"catch\" the potential\n            // exception by preventing the problematic calculation altogether.\n            if (z > 20) {\n                return 1.0;\n            }\n            if (z < -20) {\n                return 0.0;\n            }\n\n            // For values within the typical range (inclusive of 20 standard deviations),\n            // use the Erf function. The argument to Erf.erf is z / sqrt(2).\n            return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}