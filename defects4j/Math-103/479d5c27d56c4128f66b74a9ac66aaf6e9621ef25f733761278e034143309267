{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Calculate the standard score (z-score)\n        double z = (x - mean) / standardDeviation;\n\n        // Check for extreme values as per Javadoc. For values at or beyond 20 standard deviations\n        // from the mean, return 0 or 1 directly to prevent convergence exceptions\n        // from the underlying Erf.erf computation.\n        if (z >= 20) { // x is 20 or more standard deviations above the mean\n            return 1.0;\n        } else if (z <= -20) { // x is 20 or more standard deviations below the mean\n            return 0.0;\n        }\n\n        // For values within this range, proceed with the erf calculation.\n        // The argument to Erf.erf is z / sqrt(2)\n        return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}