{
    "generation": "    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        double dev = x - mean;\n        double sd = standardDeviation;\n        // For greater than 20 s.d. from mean, avoid computation, top code\n        if (dev < -20 * sd) {\n            return 0.0;\n        }\n        if (dev > 20 * sd) {\n            return 1.0;\n        }\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (sd * Math.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // Top-code for extreme values\n            if (dev < 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}