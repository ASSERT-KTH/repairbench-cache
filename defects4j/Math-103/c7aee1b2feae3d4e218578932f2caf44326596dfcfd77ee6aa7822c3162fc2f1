{
    "generation": "    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>.\n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        try {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n        } catch (MathException e) {\n            // If we get a convergence error, handle extreme values\n            double dev = Math.abs((x - mean) / standardDeviation);\n            if (dev > 20) {\n                if (x < mean) {\n                    return 0.0;\n                } else {\n                    return 1.0;\n                }\n            }\n            throw e;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}