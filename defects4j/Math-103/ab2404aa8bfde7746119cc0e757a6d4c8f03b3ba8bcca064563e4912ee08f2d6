{
    "generation": "/**\n * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n * @param x the value at which the CDF is evaluated.\n * @return CDF evaluated at <code>x</code>. \n * @throws MathException if the algorithm fails to converge; unless\n * x is more than 20 standard deviations from the mean, in which case the\n * convergence exception is caught and 0 or 1 is returned.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = x - mean;\n    double sd = standardDeviation;\n    double denom = sd * Math.sqrt(2.0);\n    double arg = dev / denom;\n\n    // if x is extremely far in the tail, avoid Erf calculation issues\n    if (dev < -20 * sd) {\n        return 0.0d;\n    }\n    if (dev > 20 * sd) {\n        return 1.0d;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf(arg));\n    } catch (MaxIterationsExceededException ex) {\n        if (dev < 0) {\n            return 0.0d;\n        } else {\n            return 1.0d;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}