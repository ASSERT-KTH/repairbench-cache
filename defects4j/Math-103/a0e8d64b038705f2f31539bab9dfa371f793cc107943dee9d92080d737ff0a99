{
    "generation": "/**\n * For this distribution, X, this method returns P(X < x).\n * @param x the value at which the CDF is evaluated.\n * @return CDF evaluated at x.\n * @throws MathException if the algorithm fails to converge; unless\n * x is more than 20 standard deviations from the mean, in which case the\n * convergence exception is caught and 0 or 1 is returned.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = x - mean;\n    double sd = standardDeviation;\n    double u  = dev / sd;\n\n    // top\u2010coding for extreme values\n    if (u <= -20.0) {\n        return 0.0;\n    }\n    if (u >=  20.0) {\n        return 1.0;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf(u / Math.sqrt(2.0)));\n    } catch (MathException ex) {\n        // if still fails to converge for extreme u, return the tail\n        if (u <= -20.0) {\n            return 0.0;\n        }\n        if (u >=  20.0) {\n            return 1.0;\n        }\n        // otherwise propagate\n        throw ex;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}