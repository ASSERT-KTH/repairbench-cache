{
    "generation": "    /**\n     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluted at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Calculate the difference from the mean\n        final double dev = x - mean;\n        \n        // Define a threshold for extreme values. As per the Javadoc, if 'x' is\n        // more than 20 standard deviations from the mean, we should return\n        // 0 or 1 directly. This also prevents potential MaxIterationsExceededException\n        // from the underlying Erf.erf function for very large arguments.\n        // We use an inclusive comparison (>=) to handle boundary cases that might\n        // still cause convergence issues (e.g., exactly 20 standard deviations away).\n        final double extremeValueThreshold = 20 * standardDeviation;\n\n        if (dev > extremeValueThreshold) {\n            // x is significantly above the mean (more than 20 standard deviations)\n            return 1.0;\n        } else if (dev < -extremeValueThreshold) {\n            // x is significantly below the mean (more than 20 standard deviations)\n            return 0.0;\n        }\n\n        // For values within the extremeValueThreshold, use the Erf function.\n        // The argument to Erf.erf is (x - mean) / (standardDeviation * Math.sqrt(2.0))\n        // which can be written as dev / (standardDeviation * Math.sqrt(2.0)).\n        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}