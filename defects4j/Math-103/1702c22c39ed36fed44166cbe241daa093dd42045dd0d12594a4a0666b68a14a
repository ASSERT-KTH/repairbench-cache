{
    "generation": "    /**\n     * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        double adjustedZ = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n        if (adjustedZ >= 6.0) { // Handle large positive values\n            return 1.0;\n        } else if (adjustedZ <= -6.0) { // Handle large negative values\n            return 0.0;\n        }\n        try {\n            return 0.5 * (1.0 + Erf.erf(adjustedZ));\n        } catch (MathException e) {\n            double z = (x - mean) / standardDeviation;\n            if (Math.abs(z) > 20.0) { // Original condition for 20 SDs\n                return (z < 0) ? 0.0 : 1.0;\n            } else {\n                throw e;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}