{
    "generation": "    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n        // According to the test case, 'for each' loops are not supported and should\n        // trigger an error. The 'ForInLoop' AST node from Rhino can represent both\n        // standard 'for...in' and the 'for each...in' extension.\n        // We need to check if this is a 'for each' loop using the isForEach() method\n        // provided by the Rhino AstNode.\n        if (loopNode.isForEach()) {\n            // Report the unsupported language extension error.\n            // 'compiler' is a field available in the AstFactory class.\n            // We create a Node representing the source location for the error.\n            // 'newNode(Token.FOR, loopNode)' creates a new com.google.javascript.rhino.Node\n            // with Token.FOR type and copies line/column information from the\n            // original Rhino AstNode 'loopNode'. This is used as the location for the JSError.\n            compiler.report(\n                JSError.forNode(\n                    newNode(Token.FOR, loopNode), // Use the 'for' token's location\n                    com.google.javascript.jscomp.parsing.RhinoErrorReporter.UNSUPPORTED_LANGUAGE_FEATURE,\n                    \"for each\"));\n            // Return an empty node to allow the compilation process to continue\n            // if configured to do so (e.g., in a best-effort compilation),\n            // while ensuring the error has been registered with the compiler.\n            // The test primarily checks for the presence of this error.\n            return newNode(Token.EMPTY);\n        }\n\n        // Original logic for transforming standard 'for...in' loops.\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}