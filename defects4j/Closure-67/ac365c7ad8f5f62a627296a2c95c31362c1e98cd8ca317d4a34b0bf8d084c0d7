{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild(); // The LHS of the assignment\n      // Check if the LHS is a qualified name access (GETPROP or GETELEM)\n      // and is a valid LHS.\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && (n.isGetProp() || n.isGetElem())) {\n\n        // Now check that the object being assigned to is a prototype.\n        // e.g. for x.y = foo, check that x is *.prototype\n        // e.g. for x['y'] = foo, check that x is *.prototype\n        Node objectNode = n.getFirstChild(); // The object part (e.g., x)\n        if (objectNode.isGetProp()) {\n          // Check if it's of the form <something>.prototype\n          Node propertyNameNode = objectNode.getLastChild();\n          if (propertyNameNode != null && propertyNameNode.isString() &&\n              propertyNameNode.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}