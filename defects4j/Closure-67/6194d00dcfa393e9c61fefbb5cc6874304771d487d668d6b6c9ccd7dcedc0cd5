{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {\n    Node lhs = n.getFirstChild();\n    if (lhs.getType() == Token.GETPROP) {\n      // We want to exclude the assignment itself from the usage list\n      boolean isChainedProperty = lhs.getFirstChild().getType() == Token.GETPROP;\n\n      if (isChainedProperty) {\n        Node child = lhs.getFirstChild().getFirstChild().getNext();\n        if (child.getType() == Token.STRING && \"prototype\".equals(child.getString())) {\n          return true;\n        }\n      } else {\n        Node propertyNameNode = lhs.getFirstChild().getNext();\n        if (propertyNameNode.getType() == Token.STRING && \"prototype\".equals(propertyNameNode.getString())) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}