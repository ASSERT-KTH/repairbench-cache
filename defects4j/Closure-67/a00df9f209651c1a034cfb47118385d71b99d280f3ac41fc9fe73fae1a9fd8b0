{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP) {\n\n    Node getProp = n;\n    Node propTarget = getProp.getFirstChild();\n    Node propName = propTarget != null ? propTarget.getNext() : null;\n\n    // Check direct prototype: e.g., e.prototype.method\n    if (propTarget != null && propTarget.getType() == Token.GETPROP) {\n      Node innerObj = propTarget.getFirstChild();\n      Node innerProp = innerObj != null ? innerObj.getNext() : null;\n      if (innerProp != null &&\n          innerProp.getType() == Token.STRING &&\n          innerProp.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n\n    // Check chained property: e.g., e.prototype['alias1'] = e.prototype.method1 = ...\n    if (propTarget != null && propTarget.getType() == Token.GETPROP) {\n      Node innerObj = propTarget.getFirstChild();\n      Node innerProp = innerObj != null ? innerObj.getNext() : null;\n      if (innerProp != null &&\n          innerProp.getType() == Token.STRING &&\n          innerProp.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}