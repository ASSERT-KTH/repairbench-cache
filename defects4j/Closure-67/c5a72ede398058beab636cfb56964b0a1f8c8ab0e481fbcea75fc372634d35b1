{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP) {\n    // We want to include both chained (e.prototype.method = ...) and\n    // bracket notation (e.prototype['method'] = ...) assignments.\n    Node propAccess = n;\n    // Handle chained assign (e.g., e.prototype.method1 = ...)\n    Node obj = propAccess.getFirstChild();\n    if (obj != null) {\n      boolean isChainedProperty = obj.getType() == Token.GETPROP;\n      if (isChainedProperty) {\n        Node maybeProto = obj.getFirstChild().getNext();\n        if (maybeProto != null &&\n            maybeProto.getType() == Token.STRING &&\n            maybeProto.getString().equals(\"prototype\")) {\n          return true;\n        }\n      } else {\n        // Handle direct property access (e.g., e.prototype['x'] = ...)\n        // or (e.prototype.x = ...)\n        Node target = propAccess.getFirstChild();\n        if (target != null &&\n            target.getType() == Token.GETPROP) {\n          Node maybeProto = target.getFirstChild().getNext();\n          if (maybeProto != null &&\n              maybeProto.getType() == Token.STRING &&\n              maybeProto.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n    }\n    // For e.prototype['alias1'] = ... assignments\n    if (propAccess.getFirstChild() != null &&\n        propAccess.getFirstChild().getType() == Token.GETPROP) {\n      Node getter = propAccess.getFirstChild();\n      Node maybeProto = getter.getFirstChild().getNext();\n      if (maybeProto != null &&\n          maybeProto.getType() == Token.STRING &&\n          maybeProto.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}