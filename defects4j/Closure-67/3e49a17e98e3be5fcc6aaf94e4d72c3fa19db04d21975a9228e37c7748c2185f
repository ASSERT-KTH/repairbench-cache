{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          // The LHS must be a GETPROP (for obj.prototype.prop) or GETELEM (for obj.prototype['prop']).\n          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)\n          ) {\n        // We want to exclude the assignment itself from the usage list\n        // `n` represents the LHS, e.g., `e.prototype.method1` or `e.prototype['alias1']`.\n        // `n.getFirstChild()` will be the object on which the property is accessed, e.g., `e.prototype`.\n        // We need to check if this object is itself a GETPROP, specifically `X.prototype`.\n        boolean isChainedProperty =\n            n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          // If `n.getFirstChild()` is `e.prototype` (a GETPROP node),\n          // its first child is `e` (the base object), and its next sibling\n          // (which is the property name) must be the string \"prototype\".\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          // Check if the property name of `n.getFirstChild()` is \"prototype\".\n          if (child != null && child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}