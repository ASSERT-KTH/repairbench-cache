{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n    Node n = assign.getFirstChild();\n    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n            && n.getType() == Token.GETPROP) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n            Node child = n.getFirstChild().getFirstChild().getNext();\n            // Check if the parent node is also a GETPROP to handle chained assignments correctly\n            if (n.getParent().getType() == Token.GETPROP && child.getType() == Token.STRING &&\n                    child.getString().equals(\"prototype\")) {\n                return true;\n            }\n        } else {\n            // Handle the case where it's a direct assignment to a prototype property\n            Node lhs = n.getFirstChild();\n            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getType() == Token.STRING &&\n                    lhs.getLastChild().getString().equals(\"prototype\")) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}