{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty;\n        if (n.getType() == Token.GETPROP) {\n          isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n        } else { // Token.GETELEM\n          isChainedProperty = n.getFirstChild().getType() == Token.GETELEM;\n        }\n\n        if (isChainedProperty) {\n          Node child;\n          if (n.getFirstChild().getType() == Token.GETPROP) {\n            child = n.getFirstChild().getFirstChild().getNext();\n          } else { // GETELEM\n            child = n.getFirstChild().getLastChild();\n          }\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        } else { // Check for simple case like o.prototype = ...\n          Node nameNode = n.getFirstChild();\n          if (nameNode.getType() == Token.GETPROP) {\n            Node propertyName = nameNode.getLastChild();\n            if (propertyName.getType() == Token.STRING &&\n                propertyName.getString().equals(\"prototype\")) {\n              return true;\n            }\n          } else if (nameNode.getType() == Token.GETELEM) {\n            Node propertyName = nameNode.getLastChild();\n            if (propertyName.getType() == Token.STRING &&\n                propertyName.getString().equals(\"prototype\")) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}