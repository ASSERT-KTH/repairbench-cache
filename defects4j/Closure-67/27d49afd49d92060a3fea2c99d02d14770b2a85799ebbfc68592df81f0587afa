{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    Node firstChild = n.getFirstChild();\n    \n    // Handle direct prototype property\n    if (firstChild.getType() == Token.GETPROP) {\n      Node child = firstChild.getFirstChild().getNext();\n      \n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n    \n    // Handle bracket notation\n    if (firstChild.getType() == Token.GETELEM) {\n      Node child = firstChild.getFirstChild().getNext();\n      if (firstChild.getFirstChild().getType() == Token.GETPROP &&\n          NodeUtil.isPrototypeProperty(firstChild.getFirstChild())) {\n        return true;\n      }\n    }\n  }\n  \n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}