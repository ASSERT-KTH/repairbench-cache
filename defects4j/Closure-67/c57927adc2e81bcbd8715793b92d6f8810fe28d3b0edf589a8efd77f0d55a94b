{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      // Ensure assign is an ASSIGN node\n      if (!assign.isAssign()) {\n        return false;\n      }\n\n      Node n = assign.getFirstChild(); // The LHS of the assignment\n\n      // Check if LHS is GETPROP (obj.prop) or GETELEM (obj['prop'])\n      if (n != null && (n.isGetProp() || n.isGetElem())) {\n          // Check if it's a valid, simple assignment LHS using NodeUtil utility.\n          if (!NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {\n             return false;\n          }\n\n          // n represents 'Something.prototype.propertyName' or 'Something.prototype['propertyName']'\n          // n.getFirstChild() should represent 'Something.prototype'\n          Node base = n.getFirstChild();\n\n          // Check if 'Something.prototype' is represented by a GETPROP node.\n          // Accessing .prototype is expected to be via GETPROP.\n          if (base.isGetProp()) {\n              // Check if the property name of 'base' is 'prototype'.\n              // The second child of a GETPROP node is the property name string.\n              Node prototypeNode = base.getLastChild();\n\n              // Check if it's the string literal \"prototype\"\n              if (prototypeNode.isString() && prototypeNode.getString().equals(\"prototype\")) {\n                  // Matches the pattern Something.prototype.propertyName = ...\n                  // or Something.prototype['propertyName'] = ...\n                  return true;\n              }\n          }\n      }\n\n      // Did not match the expected prototype assignment pattern\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}