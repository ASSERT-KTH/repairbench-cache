{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        } else {\n          // Handle direct property assignments like e.prototype['alias1'] = ...\n          Node parent = n.getParent();\n          if (parent != null && parent.getType() == Token.ASSIGN) {\n            Node rhs = parent.getLastChild();\n            if (rhs != null && rhs.getType() == Token.GETPROP) {\n              Node rhsChild = rhs.getFirstChild().getFirstChild().getNext();\n              if (rhsChild != null && rhsChild.getType() == Token.STRING &&\n                  rhsChild.getString().equals(\"prototype\")) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}