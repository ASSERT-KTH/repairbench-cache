{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n      ) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP ||\n        (n.getFirstChild().getType() == Token.GETELEM && n.getFirstChild().getFirstChild().getType() == Token.GETPROP);\n\n    if (isChainedProperty) {\n      Node getProp = n.getFirstChild();\n      Node base = getProp.getFirstChild();\n      Node prop = base != null ? base.getNext() : null;\n\n      if (base != null && prop != null &&\n          prop.getType() == Token.STRING &&\n          prop.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}