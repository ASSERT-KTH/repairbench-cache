{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n      ) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node lhs = n.getFirstChild();\n      Node child = lhs.getFirstChild().getNext();\n\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    } else if (assign.getParent().isExprResult()) {\n      // Check for a.b.c = d.e = ...;\n      Node parent = assign.getParent();\n      Node grandparent = parent.getParent();\n      if (grandparent.isAssign()) {\n        Node grn = grandparent.getFirstChild();\n        if (grn.isGetProp() && grn.getFirstChild().getType() == Token.GETPROP) {\n          Node lhs = grn.getFirstChild();\n          Node child = lhs.getFirstChild().getNext();\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}