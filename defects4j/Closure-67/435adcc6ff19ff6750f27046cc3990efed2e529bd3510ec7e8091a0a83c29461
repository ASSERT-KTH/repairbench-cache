{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      // Ensure 'n' is not null, is a valid LHS for an assignment, and is either a GETPROP (e.g., a.b)\n      // or GETELEM (e.g., a[b]).\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {\n\n        // The target of the assignment must be a property access that looks like 'object.prototype.propertyName'\n        // or 'object.prototype['propertyName']'.\n        // This means the 'object' part of the access (n.getFirstChild()) must itself represent\n        // a property access to 'prototype'.\n        Node prototypeAccessNode = n.getFirstChild(); // This represents 'object.prototype' or similar\n\n        // Check if prototypeAccessNode is a GETPROP (e.g., 'object.prototype')\n        // We are looking for the 'prototype' part of 'object.prototype'.\n        if (prototypeAccessNode != null && prototypeAccessNode.getType() == Token.GETPROP) {\n          // For a GETPROP node, its last child is the property name.\n          // So, prototypeAccessNode.getLastChild() should be the 'prototype' string.\n          Node propertyNameNode = prototypeAccessNode.getLastChild();\n\n          if (propertyNameNode != null && propertyNameNode.getType() == Token.STRING &&\n              propertyNameNode.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}