{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n    Node n = assign.getFirstChild();\n    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {\n        return hasPrototypeProperty(n);\n    }\n    return false;\n}\n\nprivate boolean hasPrototypeProperty(Node node) {\n    if (node == null) {\n        return false;\n    }\n    if (node.getType() == Token.GETPROP) {\n        Node propertyNode = node.getFirstChild().getNext();\n        if (propertyNode != null && propertyNode.getType() == Token.STRING\n                && \"prototype\".equals(propertyNode.getString())) {\n            return true;\n        }\n        return hasPrototypeProperty(node.getFirstChild()) || hasPrototypeProperty(propertyNode);\n    }\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n        if (hasPrototypeProperty(child)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}