{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          // Add check for Token.STRING or Token.GETPROP for cases like prototype['alias1']\n          while (child != null) {\n            if (child.getType() == Token.STRING &&\n                child.getString().equals(\"prototype\")) {\n              return true;\n            }\n            // Check if it's a computed property access\n            if (child.getType() == Token.GETPROP &&\n                child.getLastChild().getString().equals(\"prototype\")) {\n              return true;\n            }\n            child = child.getNext();\n          }\n        } else {\n          // Check for cases where prototype is accessed directly (not chained)\n          Node child = n.getFirstChild().getNext();\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}