{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node current = n.getFirstChild();\n          while (current != null && current.getType() == Token.GETPROP) {\n            Node propName = current.getFirstChild().getNext();\n            if (propName.getType() == Token.STRING &&\n                \"prototype\".equals(propName.getString())) {\n              return true;\n            }\n            current = current.getFirstChild();\n          }\n        }\n\n        // Check for direct prototype property assignment\n        Node propName = n.getFirstChild().getNext();\n        if (propName.getType() == Token.STRING &&\n            \"prototype\".equals(propName.getString())) {\n          return true;\n        }\n      }\n\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}