{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n      ) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty =\n        n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node proto = n.getFirstChild().getFirstChild().getNext();\n\n      if (proto != null &&\n          proto.getType() == Token.STRING &&\n          proto.getString().equals(\"prototype\")) {\n        return true;\n      }\n    } else {\n      // Fix: allow `e.prototype['alias1']`\n      Node proto = n.getFirstChild();\n      Node prop = proto != null ? proto.getNext() : null;\n      if (proto != null &&\n          proto.getType() == Token.GETPROP &&\n          proto.getFirstChild() != null &&\n          proto.getFirstChild().getType() == Token.NAME &&\n          proto.getFirstChild().getNext() != null &&\n          proto.getFirstChild().getNext().getType() == Token.STRING &&\n          proto.getFirstChild().getNext().getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}