{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && NodeUtil.isGet(n) // Fix: Allow both GETPROP (dot access) and GETELEM (bracket access)\n          ) {\n        // We want to exclude the assignment itself from the usage list\n        // This 'isChainedProperty' check determines if the object being\n        // accessed (n.getFirstChild()) is itself a GETPROP, which is\n        // typical for 'X.prototype'.\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          // If 'n' is 'X.prototype.foo' or 'X.prototype[\"foo\"]':\n          // n.getFirstChild() is the 'X.prototype' part (a GETPROP node).\n          // n.getFirstChild().getFirstChild() is 'X'.\n          // n.getFirstChild().getFirstChild().getNext() is the 'prototype' STRING node.\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child != null && child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}