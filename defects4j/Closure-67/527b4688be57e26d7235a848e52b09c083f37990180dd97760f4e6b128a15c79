{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n      ) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isPrototype =\n        n.getFirstChild() != null &&\n        n.getFirstChild().getType() == Token.GETPROP &&\n        n.getFirstChild().getFirstChild() != null &&\n        n.getFirstChild().getFirstChild().getNext() != null &&\n        n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&\n        \"prototype\".equals(n.getFirstChild().getFirstChild().getNext().getString());\n\n    // Also handle bracket notation: e.g., a.prototype['foo']\n    boolean isPrototypeBracket =\n        n.getFirstChild() != null &&\n        n.getFirstChild().getType() == Token.GETPROP &&\n        n.getFirstChild().getFirstChild() != null &&\n        n.getFirstChild().getFirstChild().getNext() != null &&\n        n.getFirstChild().getFirstChild().getNext().isString() &&\n        \"prototype\".equals(n.getFirstChild().getFirstChild().getNext().getString());\n\n    // Additionally, handle direct: x.prototype.foo = ...\n    boolean directPrototype =\n        n.getFirstChild() != null &&\n        n.getFirstChild().getType() == Token.GETPROP &&\n        n.getFirstChild().getFirstChild() != null &&\n        n.getFirstChild().getFirstChild().getNext() != null &&\n        n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&\n        \"prototype\".equals(n.getFirstChild().getFirstChild().getNext().getString());\n\n    // Handle x.prototype['foo'] = ...\n    boolean directBracketPrototype =\n        n.getFirstChild() != null &&\n        n.getFirstChild().getType() == Token.GETELEM &&\n        n.getFirstChild().getFirstChild() != null &&\n        n.getFirstChild().getFirstChild().getType() == Token.GETPROP &&\n        n.getFirstChild().getFirstChild().getFirstChild() != null &&\n        n.getFirstChild().getFirstChild().getFirstChild().getNext() != null &&\n        n.getFirstChild().getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&\n        \"prototype\".equals(n.getFirstChild().getFirstChild().getFirstChild().getNext().getString());\n\n    // Accept x.prototype.foo = ... or x.prototype['foo'] = ...\n    if (isPrototype || isPrototypeBracket || directPrototype || directBracketPrototype) {\n      return true;\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}