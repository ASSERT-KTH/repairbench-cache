{
    "generation": "/**\n * Method called to check if the default type handler should be\n * used for given type.\n * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n * use typing; that is both due to them being concrete and final,\n * and since actual serializers and deserializers will also ignore any\n * attempts to enforce typing.\n */\npublic boolean useForType(JavaType t)\n{\n    // First, handle array types by peeling off the array layer\n    if (t.isArrayType()) {\n        t = t.getContentType();\n    }\n\n    switch (_appliesFor) {\n        case NON_CONCRETE_AND_ARRAYS:\n            // fall through\n        case OBJECT_AND_NON_CONCRETE:\n            // [databind#793]: Do not apply default typing to JsonNode and its subtypes\n            if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n                return false;\n            }\n            return (t.getRawClass() == Object.class)\n                    || (!t.isConcrete());\n\n        case NON_FINAL:\n            // [databind#793]: Do not apply default typing to JsonNode and its subtypes\n            if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n                return false;\n            }\n            return !t.isFinal();\n        default:\n            //case JAVA_LANG_OBJECT:\n            return (t.getRawClass() == Object.class);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}