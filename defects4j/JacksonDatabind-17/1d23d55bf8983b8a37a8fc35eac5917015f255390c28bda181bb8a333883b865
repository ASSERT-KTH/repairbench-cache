{
    "generation": "        /**\n         * Method called to check if the default type handler should be\n         * used for given type.\n         * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n         * use typing; that is both due to them being concrete and final,\n         * and since actual serializers and deserializers will also ignore any\n         * attempts to enforce typing.\n         */\n        public boolean useForType(JavaType t)\n        {\n            switch (_appliesFor) {\n            case NON_CONCRETE_AND_ARRAYS:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // fall through\n            case OBJECT_AND_NON_CONCRETE:\n                // Lassen comment out this variant which might make bit more sense: requires concrete to be non-Object\n//                return t.isJavaLangObject() ||\n//                      (!t.isConcrete() && !TreeNode.class.isAssignableFrom(t.getRawClass()));\n\n                // But this is closer to historical behavior (identical to 2.5):\n                // include Object.class, // or interface, abstract class; but exclude TreeNodes\n                    return (t.getRawClass() == Object.class) ||\n                            (!t.isConcrete()\n                                // [databind#88] Should not apply to JSON tree models:\n                                && !TreeNode.class.isAssignableFrom(t.getRawClass()));\n\n            case NON_FINAL:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // [databind#88] Should not apply to JSON tree models:\n                // But also, NON_FINAL includes everything that is not final,\n                // except for Object.class, Strings, Booleans etc:\n                if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n                    return false;\n                }\n                return !t.isFinal();\n            default:\n            //case JAVA_LANG_OBJECT:\n//                return t.isJavaLangObject();\n                return (t.getRawClass() == Object.class);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}