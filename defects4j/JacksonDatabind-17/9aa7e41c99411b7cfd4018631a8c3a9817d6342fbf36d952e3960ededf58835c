{
    "generation": "        /**\n         * Method called to check if the default type handler should be\n         * used for given type.\n         * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n         * use typing; that is both due to them being concrete and final,\n         * and since actual serializers and deserializers will also ignore any\n         * attempts to enforce typing.\n         */\n        public boolean useForType(JavaType t)\n        {\n            switch (_appliesFor) {\n            case NON_CONCRETE_AND_ARRAYS:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // fall through\n            case OBJECT_AND_NON_CONCRETE:\n                // [databind#88] Should not apply to JSON tree models:\n                // If the type is a JsonNode (or subtype of TreeNode), we should NEVER apply default typing.\n                // This is because JsonNode types are internally handled by the tree model itself\n                // and adding external type information to them is problematic and unnecessary.\n                if (com.fasterxml.jackson.databind.node.TreeNode.class.isAssignableFrom(t.getRawClass())) {\n                    return false;\n                }\n                // For other types, apply if it's java.lang.Object or a non-concrete type.\n                return (t.getRawClass() == Object.class) || !t.isConcrete();\n\n            case NON_FINAL:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // [Issue#88] Should not apply to JSON tree models:\n                return !t.isFinal() && !com.fasterxml.jackson.databind.node.TreeNode.class.isAssignableFrom(t.getRawClass());\n            default:\n            //case JAVA_LANG_OBJECT:\n                return (t.getRawClass() == Object.class);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}