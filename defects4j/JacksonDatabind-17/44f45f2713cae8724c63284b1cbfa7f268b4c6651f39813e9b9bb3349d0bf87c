{
    "generation": "        /**\n         * Method called to check if the default type handler should be\n         * used for given type.\n         * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n         * use typing; that is both due to them being concrete and final,\n         * and since actual serializers and deserializers will also ignore any\n         * attempts to enforce typing.\n         */\n        public boolean useForType(JavaType t)\n        {\n            // Need to skip primitives, basic wrappers too\n            // NOTE: JsonNode needs special handling here too...\n            /* 12-Jun-2015, tatu: How about checking for interfaces? Need to handle, possibly?\n             *   Question is which mode applies: NON_CONCRETE seems logical.\n             */\n            // 01-Aug-2016, tatu: Let's also consider check for abstract types here...\n            //  relevant for some specific JsonNode subtypes?\n            // 13-Aug-2018, tatu: [databind#793]; prevent ALL JsonNode subtypes from using\n            \n            switch (_appliesFor) {\n            case NON_CONCRETE_AND_ARRAYS:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // fall through\n            case OBJECT_AND_NON_CONCRETE:\n                // Overrides Object.class, non-concrete types, but specifically excludes JsonNode:\n                // [databind#793] / [databind#88] Should not apply to JSON tree models:\n                if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n                    return false;\n                }\n                return (t.getRawClass() == Object.class) || !t.isConcrete();\n\n            case NON_FINAL:\n                while (t.isArrayType()) {\n                    t = t.getContentType();\n                }\n                // [databind#88] Should not apply to JSON tree models:\n                if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n                    return false;\n                }\n                // will always include interfaces and abstract classes (but NOT Object.class)\n                return !t.isFinal();\n            default:\n            //case JAVA_LANG_OBJECT:\n                return (t.getRawClass() == Object.class);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}