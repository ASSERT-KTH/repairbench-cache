{
    "generation": "/**\n * Method called to check if the default type handler should be\n * used for given type.\n * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n * use typing; that is both due to them being concrete and final,\n * and since actual serializers and deserializers will also ignore any\n * attempts to enforce typing.\n */\npublic boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        {\n            JavaType origType = t;\n            while (t.isArrayType()) {\n                t = t.getContentType();\n            }\n            // [databind#793]: Do NOT apply default typing to TreeNode and its subtypes (for JsonNode)\n            if (TreeNode.class.isAssignableFrom(origType.getRawClass())) {\n                return false;\n            }\n            // fall through\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        // [databind#793]: Do NOT apply default typing to TreeNode and its subtypes (for JsonNode)\n        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n            return false;\n        }\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n        );\n\n    case NON_FINAL:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        // [Issue#88] Should not apply to JSON tree models:\n        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n            return false;\n        }\n        return !t.isFinal();\n    default:\n        //case JAVA_LANG_OBJECT:\n        // [databind#793]: Do NOT apply default typing to TreeNode and its subtypes (for JsonNode)\n        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {\n            return false;\n        }\n        return (t.getRawClass() == Object.class);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}