{
    "generation": "protected JavaType _fromClass(Class<?> cls, TypeBindings bindings)\n{\n    // First: have we already seen this type? If yes, return cached instance\n    JavaType result = _typeCache.get(cls, bindings);\n    if (result != null) {\n        return result;\n    }\n\n    // If not, need to construct it\n    JavaType superClass = null;\n    JavaType[] superInterfaces = null;\n    Type[] actualTypeArgs = null;\n\n    // First: figure out superclass and interfaces\n    Class<?> current = cls;\n    while (current != null && current != Object.class) {\n        Class<?> superCl = current.getSuperclass();\n        if (superCl != null && superCl != Object.class) {\n            Type genericSuper = current.getGenericSuperclass();\n            if (genericSuper instanceof ParameterizedType) {\n                ParameterizedType pt = (ParameterizedType) genericSuper;\n                actualTypeArgs = pt.getActualTypeArguments();\n            }\n            superClass = _fromClass(superCl, bindings);\n        }\n        current = superCl;\n    }\n\n    // Then interfaces\n    Class<?>[] interfaces = cls.getInterfaces();\n    if (interfaces.length > 0) {\n        superInterfaces = new JavaType[interfaces.length];\n        for (int i = 0; i < interfaces.length; ++i) {\n            superInterfaces[i] = _fromClass(interfaces[i], bindings);\n        }\n    }\n\n    // And then construct the type\n    result = new SimpleType(cls, bindings, superClass, superInterfaces, actualTypeArgs);\n\n    // Important: cache before resolving, to prevent infinite recursion\n    _typeCache.add(result);\n\n    // Finally, resolve if necessary\n    if (result.containsUnresolvedType()) {\n        result = result.resolve(_typeCache);\n        _typeCache.add(result);\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}