{
    "generation": "@Override\npublic JavaType constructType(Type type) {\n    JavaType result = _typeCache.get(type);\n    if (result != null) {\n        return result;\n    }\n\n    // For recursive types, pre-add a placeholder to avoid infinite recursion\n    ResolvedRecursiveType resolvedRecursiveType = new ResolvedRecursiveType(type);\n    _typeCache.put(type, resolvedRecursiveType);\n\n    try {\n        result = _fromAny(null, type, TypeBindings.emptyBindings());\n        if (resolvedRecursiveType != result) {\n            resolvedRecursiveType.setReference(result);\n            // Replace placeholder with resolved type in cache\n            _typeCache.put(type, result);\n        } else {\n            // For fully recursive type, ensure recursive placeholder remains in cache\n            _typeCache.put(type, resolvedRecursiveType);\n            result = resolvedRecursiveType;\n        }\n        return result;\n    } catch (Throwable t) {\n        // Remove placeholder on failure\n        _typeCache.remove(type);\n        throw t;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}