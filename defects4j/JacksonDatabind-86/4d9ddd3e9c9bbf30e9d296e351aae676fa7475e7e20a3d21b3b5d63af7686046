{
    "generation": "protected JavaType _findSuperTypeForResolution(Class<?> cls, boolean forceLookup)\n{\n    // First: do we already have a type definition\n    JavaType supertype = _superTypeCache.get(cls);\n    if (supertype != null) {\n        // If it's already resolved: great!\n        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {\n            return supertype;\n        }\n    }\n    // If not, must find:\n    supertype = _findSuperTypeForResolution2(cls, forceLookup);\n    // As per [databind#2490], might have been resolved in the meantime\n    if (supertype != null && !supertype.isContainerType()) {\n        return supertype;\n    }\n    // If not, we need to resolve it now\n    if (supertype == null) {\n        supertype = _findSuperTypeForResolution2(cls, forceLookup);\n    }\n    // and if we still don't have it, we need to fail\n    if (supertype == null) {\n        throw new IllegalArgumentException(\"Could not find super type for \" + cls.getName());\n    }\n    // Finally, if it's a container type, we need to resolve its content type\n    if (supertype.isContainerType()) {\n        ContainerType<?> containerType = (ContainerType<?>) supertype;\n        if (containerType.getContentType() == null) {\n            JavaType contentType = _findSuperTypeForResolution(containerType.getContentTypeHandler().handledType(), forceLookup);\n            if (contentType == null) {\n                throw new IllegalArgumentException(\"Could not find content type for \" + containerType.getName());\n            }\n            supertype = containerType.withContentType(contentType);\n        }\n    }\n    // and if it's still not resolved, we need to resolve it now\n    if (supertype.isContainerType() && ((ContainerType<?>) supertype).getContentType() == null) {\n        throw new IllegalArgumentException(\"Could not resolve content type for \" + supertype.getName());\n    }\n    return supertype;\n}\n\nprivate JavaType _findSuperTypeForResolution2(Class<?> cls, boolean forceLookup) {\n    // First: do we already have a type definition\n    JavaType supertype = _superTypeCache.get(cls);\n    if (supertype != null) {\n        // If it's already resolved: great!\n        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {\n            return supertype;\n        }\n    }\n    // If not, must find:\n    for (Class<?> curr = cls; curr != null; curr = curr.getSuperclass()) {\n        // First: see if there's a type definition for the class itself\n        supertype = _findSuperType(curr, forceLookup);\n        if (supertype != null) {\n            break;\n        }\n    }\n    return supertype;\n}\n\nprivate JavaType _findSuperType(Class<?> cls, boolean forceLookup) {\n    // First: do we already have a type definition\n    JavaType supertype = _superTypeCache.get(cls);\n    if (supertype != null) {\n        // If it's already resolved: great!\n        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {\n            return supertype;\n        }\n    }\n    // If not, must find:\n    TypeVariable<?>[] vars = cls.getTypeParameters();\n    if (vars.length == 0) { // no type variables, can't be recursive\n        return null;\n    }\n    // Then: see if there's a type definition for any of its type variables\n    for (TypeVariable<?> var : vars) {\n        JavaType type = _findSuperTypeForVariable(cls, var, forceLookup);\n        if (type != null) {\n            return type;\n        }\n    }\n    return null;\n}\n\nprivate JavaType _findSuperTypeForVariable(Class<?> cls, TypeVariable<?> var, boolean forceLookup) {\n    // First: do we already have a type definition\n    JavaType supertype = _superTypeCache.get(cls);\n    if (supertype != null) {\n        // If it's already resolved: great!\n        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {\n            return supertype;\n        }\n    }\n    // If not, must find:\n    for (Type bound : var.getBounds()) {\n        if (bound instanceof Class) {\n            Class<?> boundClass = (Class<?>) bound;\n            if (boundClass.equals(cls) || boundClass.isAssignableFrom(cls)) {\n                return _findSuperType(boundClass, forceLookup);\n            }\n        } else if (bound instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) bound;\n            if (parameterizedType.getRawType().equals(cls)) {\n                return _findSuperType(cls, forceLookup);\n            }\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}