{
    "generation": "private JavaType getType() {\n    Type superClass = getGenericSuperclass();\n    Type[] typeArgs = getGenericInterfaces();\n\n    if (superClass == null && (typeArgs == null || typeArgs.length == 0)) {\n        return new ResolvedRecursiveType(this, null, null);\n    }\n\n    JavaType superClassType = superClass != null ? _typeFactory.constructType(superClass) : null;\n    JavaType[] typeArgsTypes = typeArgs != null ? _typeFactory.constructTypes(typeArgs) : null;\n\n    return new ResolvedRecursiveType(this, superClassType, typeArgsTypes);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}