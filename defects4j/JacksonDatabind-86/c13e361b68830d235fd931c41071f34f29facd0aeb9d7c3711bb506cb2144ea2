{
    "generation": "protected JavaType _fromClass(Class<?> rawType, TypeBindings bindings)\n{\n    // First: see if we have a cached type\n    JavaType result = _cachedTypes.get(rawType);\n    if (result != null) {\n        return result;\n    }\n\n    // If not, need to construct it\n    if (rawType.isPrimitive()) {\n        result = _constructPrimitiveType(rawType);\n    } else if (rawType.isArray()) {\n        result = _constructArrayType(rawType);\n    } else {\n        // Need to handle recursive types properly\n        if (_recursiveTypes == null) {\n            _recursiveTypes = new HashMap<>();\n        }\n        if (_recursiveTypes.containsKey(rawType)) {\n            return _recursiveTypes.get(rawType);\n        }\n\n        // Create placeholder for recursive type\n        ResolvedRecursiveType recursiveType = new ResolvedRecursiveType(rawType, null, null, null);\n        _recursiveTypes.put(rawType, recursiveType);\n\n        try {\n            result = _constructSimpleType(rawType, bindings);\n        } finally {\n            _recursiveTypes.remove(rawType);\n        }\n\n        // Ensure superclass is properly resolved\n        if (result instanceof ResolvedRecursiveType) {\n            ResolvedRecursiveType rrType = (ResolvedRecursiveType) result;\n            rrType.setSuperClass(_fromClass(rawType.getSuperclass(), bindings));\n        }\n    }\n\n    // Cache the result\n    if (result != null) {\n        _cachedTypes.put(rawType, result);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}