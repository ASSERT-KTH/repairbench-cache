{
    "generation": "// In com.fasterxml.jackson.databind.type.TypeFactory:\n\n/**\n * Internal helper to construct a JavaType for a Class.\n * Fix: even for simple (non\u2010generic) raw types we must populate\n * super\u2010class and interface hierarchy so that getSuperClass()\n * is never left null.\n */\nprotected JavaType _fromClass(Class<?> raw, TypeBindings bindings,\n                              JavaType superClass, JavaType[] interfaces)\n{\n    // caching branch for simple raw (non\u2010generic) types\n    if ((bindings == null || bindings.isEmpty())\n            && superClass == null\n            && (interfaces == null || interfaces.length == 0)) {\n        synchronized (_typeCache) {\n            JavaType cached = _typeCache.get(raw);\n            if (cached != null) {\n                return cached;\n            }\n            // fully resolve the class hierarchy\n            // 1) super\u2010class\n            JavaType sc = null;\n            Type rawSup = raw.getGenericSuperclass();\n            if (rawSup != null) {\n                sc = _constructType(rawSup, null, null, null);\n            }\n            // 2) interfaces\n            Type[] rawIfaces = raw.getGenericInterfaces();\n            JavaType[] intfs = new JavaType[rawIfaces.length];\n            for (int i = 0; i < rawIfaces.length; ++i) {\n                intfs[i] = _constructType(rawIfaces[i], null, null, null);\n            }\n            // 3) build a SimpleType that includes hierarchy\n            SimpleType simple = new SimpleType(raw,\n                                               TypeBindings.create(raw, null, this),\n                                               sc, intfs,\n                                               /* no type\u2010params */ null,\n                                               /* asStatic */ _cfgStaticTyping);\n            _typeCache.put(raw, simple);\n            return simple;\n        }\n    }\n\n    // --- otherwise, fall back to full generic/recursive\u2010resolution path ---\n\n    // [the existing generic/recursive\u2010type logic follows here,\n    //  unchanged from the previous implementation]\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}