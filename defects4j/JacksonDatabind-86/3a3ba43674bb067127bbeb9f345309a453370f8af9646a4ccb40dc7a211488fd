{
    "generation": "protected JavaType _resolveSuperType(JavaType type, TypeBindings bindings) {\n    // Need to iterate since we may have multiple levels of abstraction\n    while (true) {\n        Class<?> raw = type.getRawClass();\n        JavaType superType = _fromSuperClass(raw, bindings);\n        if (superType != null) {\n            // Issue-1647: If the super type is a ResolvedRecursiveType, we need to resolve it\n            // to avoid infinite recursion\n            if (superType instanceof ResolvedRecursiveType) {\n                ResolvedRecursiveType recursiveType = (ResolvedRecursiveType) superType;\n                JavaType resolved = recursiveType.getResolvedType();\n                if (resolved != null) {\n                    superType = resolved;\n                }\n            }\n            type = superType;\n            bindings = type.getBindings();\n            continue;\n        }\n        // or interfaces, if any\n        Type[] intTypes = raw.getGenericInterfaces();\n        if (intTypes != null) {\n            JavaType intType = _resolveInterfaces(type, bindings, intTypes);\n            if (intType != null) {\n                return intType;\n            }\n        }\n        // or, if none, super-class (if any)\n        Type superGeneric = raw.getGenericSuperclass();\n        if (superGeneric == null) {\n            return type;\n        }\n        Class<?> superRaw = TypeFactory.rawClass(superGeneric);\n        // 30-Sep-2020, tatu: [databind#2854] Need to ensure we can link back (to avoid\n        //     problem with self-referential types)\n        JavaType superClass = _fromClass(superRaw, bindings);\n        type = superClass;\n        // 19-Mar-2015, tatu: Should we update bindings here? Mostly shouldn't matter\n        //   because we'll hit `bindings` when checking super-class, interfaces.\n        //   Except, I believe there is a case with self-referential types...\n        bindings = type.getBindings();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}