{
    "generation": "    @Override // since 2.8\n    public JavaType _resolvedType(JavaType actualType) {\n        // This is called by TypeBindings when actual type is known.\n        // It's IMPORTANT that we return 'this' so that references to this\n        // type (e.g. in other TypeBindings) are updated, but this type\n        // itself is \"resolved\".\n        // As per [databind#1647]: need to propagate resolution for super-type,\n        // as well as any other type properties:\n        _resolvedType = actualType;\n\n        // 20-Dec-2016, tatu: Propagate 'resolved type' info. This must be done\n        //    for _superClass, _valueType and _keyType as they may have been\n        //    pointing to unresolved recursive types as well.\n        //    NOTE: _bindings is NOT updated, since it's immutable (just copied)\n        //    from original TypeBindings.\n        JavaType newSuperClass = actualType.getSuperClass();\n        if (newSuperClass != null) {\n            // Need to update 'this' instance's actual superClass too\n            if (_superClass != null) {\n                _superClass = _superClass._resolvedType(newSuperClass);\n            } else {\n                _superClass = newSuperClass;\n            }\n        }\n        JavaType newValueType = actualType.getContentType();\n        if (newValueType != null) {\n            if (_valueType != null) {\n                _valueType = _valueType._resolvedType(newValueType);\n            } else {\n                _valueType = newValueType;\n            }\n        }\n        // !!! 02-Jan-2017, tatu: Not sure if _keyType would ever contain recursive ref,\n        //    but just in case:\n        JavaType newKeyType = actualType.getKeyType();\n        if (newKeyType != null) {\n            if (_keyType != null) {\n                _keyType = _keyType._resolvedType(newKeyType);\n            } else {\n                _keyType = newKeyType;\n            }\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}