{
    "generation": "protected JavaType _constructType(Class<?> type) {\n    if (type == null) {\n        return null;\n    }\n\n    // Check if we have a cached type\n    JavaType cached = _findType(type);\n    if (cached != null) {\n        return cached;\n    }\n\n    // Check if the class is a basic type, otherwise proceed\n    if (type.isPrimitive()) {\n        return constructPrimitiveType(type);\n    }\n\n    // Resolve the superclass and interfaces (if any)\n    JavaType superClass = null;\n    if (!type.isInterface()) {\n        Class<?> superClassClass = type.getSuperclass();\n        if (superClassClass != null) {\n            superClass = constructType(superClassClass);\n        }\n    }\n\n    // Collect the class properties, including those from the superclass\n    BeanDescription beanDesc = getIntrospect().getBeanDescription(type);\n\n    // Get the method creators and properties\n    BeanEnumResolver beanResolver = new BeanEnumResolver(objectMapper(), beanDesc, createCreators);\n    BeanPropertyMap creators = beanResolver.findCreators();\n\n    // Get the class's own properties\n    BeanPropertyMap props = beanDesc.findBeanProperties(null);\n\n    // If superclass has properties, include them in the current properties\n    if (superClass != null && superClass instanceof JavaTypenio.JsonSerializer) {\n        BeanPropertyMap superProps = ((JavaType)localObjectResolver.resolve(superClass)).beanDesc.findBeanProperties(null);\n        if (superProps != null && !superProps.isEmpty()) {\n            props.putAll(superProps);\n        }\n    }\n\n    // Construct the type based on the properties and superclass\n    JavaType resultType = (BeanPropertyMap.isEmpty(props)) \n        ? constructNonBeanType(type, superClass) \n        : constructBeanType(type, superClass, beanDesc, beanResolver, props, creators);\n\n    // Cache and return the constructed type\n    _addType(resultType);\n    return resultType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}