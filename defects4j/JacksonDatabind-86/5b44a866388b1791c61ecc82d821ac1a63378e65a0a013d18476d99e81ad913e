{
    "generation": "protected JavaType _fromClass(Class<?> clz, TypeBindings context, \n        JavaType superClass, JavaType[] superInterfaces)\n{\n    // First: if this is a JavaType, just pass it through\n    if (clz instanceof JavaType) {\n        return (JavaType) clz;\n    }\n\n    // Ok: canonicalize... to avoid having multiple instances\n    context = _cleanBindings(clz, context);\n    // 28-Jun-2017, tatu: Workaround for [databind#1658] -- cache miss, loop\n    final JavaType prevT = context.getType(clz);\n    if (prevT != null) {\n        return prevT;\n    }\n\n    // First thing to do is to check if it's an array type\n    JavaType type = _fromArrayType(clz, context, superClass);\n    if (type != null) {\n        return type;\n    }\n\n    // Collection or Map?\n    type = _fromCollectionType(clz, context, superClass);\n    if (type == null) {\n        type = _fromMapType(clz, context, superClass);\n    }\n    if (type == null) {\n        // ... or something else?\n        type = _fromOtherClass(clz, context, superClass);\n    }\n\n    // [databind#1658]: may have resolved recursive type; if so, cache it\n    if (type != null) {\n        // 26-Mar-2018, tatu: [databind#1647] Need to also consider possible super-class\n        //    type parameters, when resolving recursive types. To do that, we need to\n        //    \"upgrade\" to `ResolvedRecursiveType` if super-class is already one.\n        //    Most of the time this won't matter, but sometimes it does.\n        JavaType typeWithSuper = type;\n        if (superClass instanceof ResolvedRecursiveType) {\n            ResolvedRecursiveType rr = (ResolvedRecursiveType) superClass;\n            // 14-Mar-2019, tatu: [databind#2301] Looks like we do need to resolve\n            //   to fully bind, so let's do that.\n            rr.setReferenceType(type);\n            typeWithSuper = rr;\n        }\n        context._replaceSelfReference(clz, typeWithSuper);\n        return typeWithSuper;\n    }\n    return _fromClass(clz, context);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}