{
    "generation": "protected JavaType _fromClass(Class<?> clz, TypeBindings context, \n        // TypeBindings context, \n        RecursiveTypeBindings typeBindings)\n{\n    // 18-Apr-2019, tatu: Need to cache to avoid infinite recursion for self-referential types.\n    //    But to do that, we need to give type \"placeholder\" first, to allow\n    //    resolving bindings (otherwise we may get into loop of resolving\n    //    same type)\n\n    // As to [databind#1647], may need to resolve `clz` before constructing\n    // `JavaType`; this is needed for \"self-referential\" types (ones with\n    // generics referring to the type itself).\n    if (_typeBindings == null) {\n        _typeBindings = RecursiveTypeBindings.emptyBindings();\n    }\n    JavaType result = _typeBindings.findType(clz);\n    if (result != null) {\n        return result;\n    }\n    // First things first: class must be resolved via super-types\n    ResolvedTypeImpl resolved = new ResolvedTypeImpl(clz, _typeBindings);\n    // then check if it's already in main cache (needed for cyclic types)\n    result = _cachedTypes.get(clz);\n    if (result != null) {\n        return result;\n    }\n    // If not, need to start by resolving parent type first\n    TypeBindings b = resolved.typeBindings();\n    // 14-Mar-2016, tatu: Not sure if this is really needed, but it can't hurt to try\n    //    recreating, if we might be missing resolved super types. But can we force\n    //    re-resolution?\n    b = b.childInstance();\n    JavaType superType = _resolveSuperType(clz, b, typeBindings);\n    resolved.setSuperType(superType);\n    // and then resolve all type bindings\n    JavaType[] typeParams = _resolveTypeParams(clz, b, typeBindings);\n    resolved.setTypeParams(typeParams);\n    // and just for fun, back-reference to this type (to allow construction\n    // of recursive types: needed for Enums, for example)\n    _cachedTypes.put(clz, resolved);\n    return resolved;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}