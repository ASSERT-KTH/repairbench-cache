{
    "generation": "public class ResolvedRecursiveType extends TypeBase {\n    private final TypeFactory _typeFactory;\n    private final JavaType _superClass;\n    private final JavaType _keyType;\n    private final JavaType _contentType;\n    private final JavaType[] _valueType;\n    private final JavaType _componentType;\n    private final int _hashCode;\n\n    private ResolvedRecursiveType(TypeFactory typeFactory, JavaType superClass, JavaType keyType,\n            JavaType contentType, JavaType[] valueType, JavaType componentType) {\n        _typeFactory = typeFactory;\n        _superClass = superClass;\n        _keyType = keyType;\n        _contentType = contentType;\n        _valueType = valueType;\n        _componentType = componentType;\n        _hashCode = computeHash();\n    }\n\n    public static ResolvedRecursiveType construct(TypeFactory typeFactory, JavaType superClass,\n            JavaType keyType, JavaType contentType, JavaType[] valueType, JavaType componentType) {\n        return new ResolvedRecursiveType(typeFactory, superClass, keyType, contentType, valueType, componentType);\n    }\n\n    @Override\n    public JavaType getSuperClass() {\n        if (_superClass != null) {\n            if (_superClass instanceof ResolvedRecursiveType) {\n                ResolvedRecursiveType rr = (ResolvedRecursiveType) _superClass;\n                if (rr.getSuperClass() != null) {\n                    return rr.getSuperClass();\n                }\n            }\n            return _superClass;\n        }\n        return super.getSuperClass();\n    }\n\n    @Override\n    public JavaType getKeyType() {\n        return (_keyType instanceof ResolvedRecursiveType) ?\n                ((ResolvedRecursiveType) _keyType).getKeyType() :\n                _keyType;\n    }\n\n    @Override\n    public JavaType getContentType() {\n        return (_contentType instanceof ResolvedRecursiveType) ?\n                ((ResolvedRecursiveType) _contentType).getContentType() :\n                _contentType;\n    }\n\n    @Override\n    public JavaType[] getValueType() {\n        if (_valueType == null || _valueType.length == 0) {\n            return null;\n        }\n        JavaType[] result = new JavaType[_valueType.length];\n        for (int i = 0; i < _valueType.length; i++) {\n            if (_valueType[i] instanceof ResolvedRecursiveType) {\n                result[i] = ((Resolved RecursiveType) _valueType[i]).getValueType()[0];\n            } else {\n                result[i] = _valueType[i];\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public JavaType getComponentType() {\n        return (_componentType instanceof ResolvedRecursiveType) ?\n                ((ResolvedRecursiveType) _componentType).getComponentType() :\n                _componentType;\n    }\n\n    @Override\n    public int getHash() {\n        return _hashCode;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append('[');\n        sb.append(\"base:\").append(_superClass);\n        if (_keyType != null) {\n            sb.append(',').append(\"key:\").append(_keyType);\n        }\n        if (_contentType != null) {\n            sb.append(',').append(\"content:\").append(_contentType);\n        }\n        if (_valueType != null && _valueType.length > 0) {\n            sb.append(',').append(\"value:\").append(_valueType[0]);\n        }\n        if (_componentType != null) {\n            sb.append(',').append(\"component:\").append(_componentType);\n        }\n        sb.append(']');\n        return sb.toString();\n    }\n\n    protected int computeHash() {\n        int hash = 1;\n        hash = hash * 31 + (_superClass != null ? _superClass.getHash() : 0);\n        hash = hash * 31 + (_keyType != null ? _keyType.getHash() : 0);\n        hash = hash * 31 + (_contentType != null ? _contentType.getHash() : 0);\n        if (_valueType != null) {\n            for (JavaType type : _valueType) {\n                hash = hash * 31 + (type != null ? type.getHash() : 0);\n            }\n        }\n        hash = hash * 31 + (_componentType != null ? _componentType.getHash() : 0);\n        return hash;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}