{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into arrays.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node array = left.getFirstChild();\n    if (!array.isArrayLit()) {\n        // The array may be part of a more complex expression, just return.\n        return n;\n    }\n\n    // Extract the array elements\n    List<Node> elements = new ArrayList<>();\n    for (Node child = array.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isEmpty() || child.isNormalBlock()) {\n            elements.add(child);\n        }\n    }\n\n    if (elements.size() <= intIndex) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node elem = elements.get(intIndex);\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        // Detach the element so it can be reused without affecting the original array\n        elem.detach();\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}