{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    // Locate the element at the given index.\n    Node elem = left.getFirstChild();\n    for (int i = 0; i < intIndex && elem != null; i++) {\n        elem = elem.getNext();\n    }\n\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    // Only fold when no other elements have side effects (we'll still\n    // execute the selected element if it has side effects).\n    for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {\n        if (child == elem) {\n            continue;\n        }\n        if (NodeUtil.mayHaveSideEffects(child)) {\n            return n;\n        }\n    }\n\n    Node replacement;\n    if (elem.isEmpty()) {\n        replacement = NodeUtil.newUndefinedNode(elem);\n    } else {\n        replacement = elem;\n        left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value.\n    parent.replaceChild(n, replacement);\n    reportCodeChange();\n    return replacement;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}