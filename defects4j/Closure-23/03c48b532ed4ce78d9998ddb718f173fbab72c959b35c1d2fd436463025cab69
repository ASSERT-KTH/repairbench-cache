{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Locate the element at the given index\n  Node child = left.getFirstChild();\n  Node targetElem = null;\n  int i = 0;\n  while (child != null && i <= intIndex) {\n    if (i == intIndex) {\n      targetElem = child;\n      break;\n    }\n    child = child.getNext();\n    i++;\n  }\n  if (targetElem == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Make sure dropping the other elements doesn't drop side-effects\n  for (Node other = left.getFirstChild(); other != null; other = other.getNext()) {\n    if (other == targetElem) {\n      continue;\n    }\n    // empty slots are just \"undefined\", no side-effects\n    if (!other.isEmpty() && NodeUtil.mayHaveSideEffects(other)) {\n      return n;\n    }\n  }\n\n  // Prepare the replacement node\n  Node replacement;\n  if (targetElem.isEmpty()) {\n    replacement = NodeUtil.newUndefinedNode(targetElem);\n  } else {\n    // Detach the chosen element so we can reinsert it\n    left.removeChild(targetElem);\n    replacement = targetElem;\n  }\n\n  // Replace the entire GETELEM with the folded value\n  parent.replaceChild(n, replacement);\n  reportCodeChange();\n  return replacement;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}