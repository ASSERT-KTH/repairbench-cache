{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Locate the element at the requested index.\n  Node current = left.getFirstChild();\n  for (int i = 0; i < intIndex && current != null; i++) {\n    current = current.getNext();\n  }\n  if (current == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Don't fold if we'd drop any side-effectful elements.\n  for (Node c = left.getFirstChild(); c != null; c = c.getNext()) {\n    if (c == current) {\n      continue;\n    }\n    if (NodeUtil.mayHaveSideEffects(c)) {\n      return n;\n    }\n  }\n\n  // Prepare the replacement node.\n  Node replacement;\n  if (current.isEmpty()) {\n    replacement = NodeUtil.newUndefinedNode(current);\n  } else {\n    left.removeChild(current);\n    replacement = current;\n  }\n\n  // Replace the entire GETELEM with the folded value.\n  parent.replaceChild(n, replacement);\n  reportCodeChange();\n  return replacement;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}