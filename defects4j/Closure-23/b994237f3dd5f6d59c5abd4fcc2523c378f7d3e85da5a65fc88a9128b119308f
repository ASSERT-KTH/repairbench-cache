{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element at the given index.\n    // 'current' will eventually point to the desired element if found.\n    Node current = left.getFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n      // If we run out of elements before reaching the desired index,\n      // then the index is out of bounds.\n      if (current == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      current = current.getNext();\n    }\n\n    // After the loop, 'current' should be the element at 'intIndex'.\n    // If it's null, it means the index is out of bounds (e.g., [10,20][2]).\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // If the element at the index is an EMPTY node (e.g., `[,10][0]`),\n    // replace it with an 'undefined' node.\n    if (current.isEmpty()) {\n      // Create a new undefined node, inheriting source info from the original EMPTY node.\n      current = NodeUtil.newUndefinedNode(current);\n    } else {\n      // Otherwise, remove the actual element node from its parent (the array literal).\n      left.removeChild(current);\n    }\n\n    // Replace the entire GETELEM node ('n') with the found/modified element ('current').\n    n.getParent().replaceChild(n, current);\n    reportCodeChange();\n    return current;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}