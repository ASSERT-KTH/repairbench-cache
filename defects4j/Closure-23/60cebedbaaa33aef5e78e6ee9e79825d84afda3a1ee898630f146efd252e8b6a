{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Iterate to find the element at the specified index.\n    // 'current' will point to the node at 'intIndex' if found.\n    Node current = left.getFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n        if (current == null) {\n            // We've gone past the end of the array before reaching the desired index.\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n        current = current.getNext();\n    }\n\n    // After the loop, 'current' should be the element node at 'intIndex'.\n    // If 'current' is null here, it means the index was out of bounds\n    // (e.g., array has 2 elements, index is 2 or more).\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // If the element is an empty node (e.g., `[,10][0]`), it should fold to `undefined`.\n    if (current.isEmpty()) {\n      current = NodeUtil.newUndefinedNode(current);\n    } else {\n      // Otherwise, remove the actual element from its parent array literal.\n      left.removeChild(current);\n    }\n\n    // Replace the entire GETELEM (n) with the folded value (current).\n    n.getParent().replaceChild(n, current);\n    reportCodeChange();\n    return current;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}