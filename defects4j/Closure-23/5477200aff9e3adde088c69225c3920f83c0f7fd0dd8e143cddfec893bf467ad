{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the child node at the given index.\n    // The original loop logic was flawed for finding the Nth child,\n    // especially for index 0 or when the loop terminates.\n    // This updated loop correctly advances the 'targetChild' pointer\n    // 'intIndex' times to reach the desired element.\n    Node targetChild = left.getFirstChild();\n    for (int i = 0; targetChild != null && i < intIndex; i++) {\n      targetChild = targetChild.getNext();\n    }\n\n    // If targetChild is null after the loop, it means the index is out of bounds\n    // (e.g., trying to access index 2 in an array with only 2 elements, or index 0 in an empty array).\n    if (targetChild == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // If the element is an EMPTY node (e.g., from a sparse array like `[,10][0]`),\n    // it should fold to 'void 0'. Otherwise, use the actual element.\n    Node replacementNode;\n    if (targetChild.isEmpty()) {\n      replacementNode = NodeUtil.newUndefinedNode(targetChild);\n    } else {\n      // Remove the child from its current parent (the array literal)\n      // before it's used as a replacement for the GETELEM node.\n      left.removeChild(targetChild);\n      replacementNode = targetChild;\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, replacementNode);\n    reportCodeChange();\n    return replacementNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}