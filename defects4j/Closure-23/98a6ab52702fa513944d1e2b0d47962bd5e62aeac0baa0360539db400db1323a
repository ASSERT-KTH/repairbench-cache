{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Iterate through the children of the ARRAYLIT node to find the element\n    // at the specified index.\n    Node current = left.getFirstChild();\n    for (int i = 0; current != null && i < intIndex; i++) {\n      current = current.getNext();\n    }\n\n    // If the index is out of bounds\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = current;\n\n    // Element is the value (e.g. number, string)\n    // Handle holes in the array.\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      // Detach the element from the original array literal.\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM expression with the element's value.\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}