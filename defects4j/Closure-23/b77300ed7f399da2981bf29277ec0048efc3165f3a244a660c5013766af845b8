{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Traverse to the element at intIndex.\n    // 'current' will point to the element at the target index after the loop.\n    Node current = left.getFirstChild();\n    for (int i = 0; current != null && i < intIndex; i++) {\n      current = current.getNext();\n    }\n\n    // After the loop, if 'current' is null, it means the index was out of bounds\n    // (e.g., array too short, or empty array).\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // If the found element is an EMPTY node (e.g., the first element of `[,10]`),\n    // it should be replaced by 'undefined'. Otherwise, use the actual node.\n    Node resultNode;\n    if (current.isEmpty()) {\n      resultNode = NodeUtil.newUndefinedNode(current);\n    } else {\n      // If it's a real node, remove it from the array literal as it's being \"folded out\".\n      left.removeChild(current);\n      resultNode = current;\n    }\n\n    // Replace the entire GETELEM node 'n' with the determined 'resultNode'.\n    n.getParent().replaceChild(n, resultNode);\n    reportCodeChange();\n    return resultNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}