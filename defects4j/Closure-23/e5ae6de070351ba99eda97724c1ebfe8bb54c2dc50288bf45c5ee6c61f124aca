{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element at the given index.\n    // 'current' will point to the node at 'intIndex' after the loop,\n    // or be null if the index is out of bounds.\n    Node current = left.getFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n        if (current == null) {\n            // Ran out of elements before reaching the desired index\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n        current = current.getNext();\n    }\n\n    // After the loop, 'current' should be the element at 'intIndex'.\n    // If it's null, the index is out of bounds.\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = current; // This is the found element.\n\n    // If the element is an empty slot (e.g., in `[,10][0]`), replace it with 'undefined'.\n    // Otherwise, detach it from the array literal before re-parenting.\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM expression with the found element.\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}