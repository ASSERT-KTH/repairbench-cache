{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Look up the element at the given index.\n  Node elem = left.getFirstChild();\n  for (int i = 0; i < intIndex && elem != null; i++) {\n    elem = elem.getNext();\n  }\n  if (elem == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Ensure that folding does not cancel the evaluation of\n  // any sibling of the array literal that might have side effects.\n  for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {\n    if (child != elem && NodeUtil.mayHaveSideEffects(child)) {\n      return n;\n    }\n  }\n\n  // Replace an empty (hole) with an explicit undefined.\n  if (elem.isEmpty()) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    left.removeChild(elem);\n  }\n\n  n.getParent().replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}