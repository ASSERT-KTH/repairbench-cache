{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  // If GETPROP/GETELEM is used as an assignment target then the array literal\n  // is acting as a temporary that must be kept (eg. \"[][0] += 1\").\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Sometimes people use complex expressions to index into arrays\n    // (or strings to index into array methods).\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Walk through the array literal to get the element at position intIndex.\n  Node elem = left.getFirstChild();\n  for (int i = 0; i < intIndex; i++) {\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    elem = elem.getNext();\n  }\n  if (elem == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // For the folding to be semantics\u2010preserving, we must not drop the side\n  // effects of any expression that (in the original array literal)\n  // would have been evaluated but is not the element being accessed.\n  for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {\n    if (child != elem && !child.isEmpty() && NodeUtil.mayHaveSideEffects(child)) {\n      return n;\n    }\n  }\n\n  // If the element is \u201cempty\u201d (a hole in the array), replace it with undefined.\n  if (elem.isEmpty()) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    left.removeChild(elem);\n  }\n\n  n.getParent().replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}