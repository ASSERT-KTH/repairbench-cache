{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node current = left.getFirstChild();\n    int curIndex = 0;\n    Node elem = null;\n    // Traverse through the array literal, skipping empty slots\n    while (current != null) {\n        if (!current.isEmpty()) {\n            if (curIndex == intIndex) {\n                elem = current;\n                break;\n            }\n            curIndex++;\n        } else {\n            if (curIndex == intIndex) {\n                elem = current;\n                break;\n            }\n            curIndex++;\n        }\n        current = current.getNext();\n    }\n\n    // If we didn't reach the desired index, it's out of bounds\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node toReplace;\n    if (elem.isEmpty()) {\n        toReplace = NodeUtil.newUndefinedNode(elem);\n    } else if (NodeUtil.mayHaveSideEffects(elem, compiler)) {\n        // Don't fold if the element may have side-effects\n        return n;\n    } else {\n        // Remove the node from the array and use it\n        toReplace = elem.cloneTree();\n    }\n\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, toReplace);\n    reportCodeChange();\n    return toReplace;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}