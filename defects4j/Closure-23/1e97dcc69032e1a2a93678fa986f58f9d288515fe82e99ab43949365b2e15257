{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Walk to the element at intIndex, checking for side-effects in earlier ones.\n  Node current = left.getFirstChild();\n  for (int i = 0; current != null && i < intIndex; i++) {\n    if (NodeUtil.hasSideEffects(current)) {\n      // Can't fold if any earlier element has side-effects.\n      return n;\n    }\n    current = current.getNext();\n  }\n\n  if (current == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // We found the element node.\n  Node elem = current;\n  Node replacement;\n  if (elem.isEmpty()) {\n    // It's a hole: [ , x ][0] => undefined\n    replacement = NodeUtil.newUndefinedNode(elem);\n  } else {\n    // Detach the literal element so we can reuse it directly.\n    left.removeChild(elem);\n    replacement = elem;\n  }\n\n  parent.replaceChild(n, replacement);\n  reportCodeChange();\n  return replacement;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}