{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    // Check if the index is valid (integer, not NaN, not infinite)\n    // Ensure that the index is not negative\n    if (intIndex != index || Double.isNaN(index) || Double.isInfinite(index)) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element node at the specified index\n    Node current = left.getFirstChild();\n    for (int i = 0; current != null && i < intIndex; i++) {\n      current = current.getNext();\n    }\n\n    // Check if the index is out of bounds (too large)\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // We found the element node (`current`)\n    Node elem = current;\n    Node replacementNode;\n\n    if (elem.isEmpty()) {\n      // An empty slot in an array literal (e.g., [,,1][0]) evaluates to undefined.\n      // Create a new undefined node. We don't need to remove the original EMPTY node\n      // because the entire GETELEM (including the array literal) will be replaced.\n      replacementNode = NodeUtil.newUndefinedNode(elem);\n    } else {\n      // For non-empty elements, we need to detach the element from the\n      // original array literal before using it as the replacement.\n      left.removeChild(elem);\n      replacementNode = elem;\n    }\n\n    // Replace the entire GETELEM node with the element node (or undefined).\n    parent.replaceChild(n, replacementNode);\n    reportCodeChange();\n    return replacementNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}