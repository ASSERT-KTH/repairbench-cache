{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    // Iterate 'intIndex' times to move 'current' to the node at the desired index.\n    for (int i = 0; i < intIndex; i++) {\n        // If we run out of elements before reaching the target index, it's out of bounds.\n        if (current == null) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n        current = current.getNext();\n    }\n\n    // After the loop, 'current' should be the element at 'intIndex'.\n    // If 'current' is null here, it means the index was past the end of the array.\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = current; // 'elem' is now the node at the desired index.\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      // For non-empty elements, remove the element from the array literal.\n      // This is crucial for simplifying the array literal itself.\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}