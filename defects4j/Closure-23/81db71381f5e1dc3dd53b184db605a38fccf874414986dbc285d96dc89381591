{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Find the element at the requested index.\n  Node current = left.getFirstChild();\n  for (int i = 0; current != null && i < intIndex; i++) {\n    current = current.getNext();\n  }\n  if (current == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  // Bail if any other element (before or after) has side effects,\n  // since array literals always evaluate all elements.\n  for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {\n    if (child != current && NodeUtil.hasSideEffects(child)) {\n      return n;\n    }\n  }\n\n  // Extract or replace with \"undefined\" if it's a hole.\n  Node elem;\n  if (current.isEmpty()) {\n    elem = NodeUtil.newUndefinedNode(current);\n  } else {\n    elem = current;\n    left.removeChild(current);\n  }\n\n  // Replace the entire GETELEM with the folded value.\n  parent.replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}