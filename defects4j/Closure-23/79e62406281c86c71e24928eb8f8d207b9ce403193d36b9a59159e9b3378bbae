{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    int i = 0;\n    while (current != null && i < intIndex) {\n      current = current.getNext();\n      i++;\n    }\n\n    Node elem = current;\n\n    // The length of the array literal is the number of elements (sparse arrays,\n    // empty elements are still counted; e.g. [,,10] has length 3).\n    int arrayLength = 0;\n    Node tmp = left.getFirstChild();\n    while (tmp != null) {\n      arrayLength++;\n      tmp = tmp.getNext();\n    }\n\n    // Only fold if the index is in-bounds. In JS, valid indices are those where\n    // 0 <= index < array.length (even if the element is empty/undefined).\n    if (intIndex >= arrayLength) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem == null) {\n      // Should not actually happen: handled above already, but just in case.\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}