{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    int i = 0;\n\n    // Correct logic: find the i-th non-empty initializer.\n    while (current != null) {\n      if (!current.isEmpty()) {\n        if (i == intIndex) {\n          elem = current;\n          break;\n        }\n        i++;\n      } else {\n        if (i == intIndex) {\n          elem = current;\n          break;\n        }\n        i++;\n      }\n      current = current.getNext();\n    }\n\n    // If the index is out of bounds (sparse array),\n    // count total number of slots in the array.\n    int totalCount = 0;\n    for (Node c = left.getFirstChild(); c != null; c = c.getNext()) {\n      totalCount++;\n    }\n    if (intIndex >= totalCount) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // If elem is null, it must be an empty slot (hole)\n    if (elem == null) {\n      // Find the empty slot at intIndex\n      Node cur = left.getFirstChild();\n      int idx = 0;\n      while (cur != null) {\n        if (idx == intIndex) {\n          elem = cur;\n          break;\n        }\n        cur = cur.getNext();\n        idx++;\n      }\n      if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}