{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    // Check that the index is a positive integer.\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    // Loop through the children of the ARRAYLIT node until the desired index.\n    for (int i = 0; current != null && i < intIndex; i++) {\n      current = current.getNext();\n    }\n\n    // Check if the index is out of bounds.\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // 'current' is the element node we want.\n    Node elem = current;\n\n    // Clone the node and replace the GETELEM node.\n    // We can't use the original node because it's still attached to the ARRAYLIT.\n    // If we remove it, the ARRAYLIT might be modified unexpectedly if used elsewhere.\n    // Cloning ensures we don't alter the original array structure directly.\n    Node replacementNode;\n    if (elem.isEmpty()) {\n      // Replace EMPTY placeholder with an actual undefined node.\n      replacementNode = NodeUtil.newUndefinedNode(elem);\n    } else {\n      // Clone the element to replace the GETELEM call.\n      replacementNode = elem.cloneNode();\n    }\n\n    // Replace the entire GETELEM with the cloned value node.\n    n.getParent().replaceChild(n, replacementNode);\n    reportCodeChange();\n    return replacementNode;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}