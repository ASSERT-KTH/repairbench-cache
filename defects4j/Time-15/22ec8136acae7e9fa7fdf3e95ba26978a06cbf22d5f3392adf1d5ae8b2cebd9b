{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     *\n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n\n        // Handle Integer.MIN_VALUE case separately because of sign flip\n        if (val2 == Integer.MIN_VALUE) {\n            if (val1 != 0 && val1 != -1) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return val1 * (long)val2;\n        }\n\n        long total;\n        if (val2 < 0) {\n            long absVal2 = -(long)val2;\n            if (val1 > 0) {\n                long absTotal = safeMultiplyAbs(val1, absVal2);\n                if (absTotal > Long.MAX_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                total = -absTotal;\n            } else if (val1 < 0) {\n                long absVal1 = -val1;\n                long absTotal = safeMultiplyAbs(absVal1, absVal2);\n                if (absTotal > Long.MAX_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                total = absTotal;\n            } else {\n                total = 0;\n            }\n        } else {\n            if (val1 > 0) {\n                long absTotal = safeMultiplyAbs(val1, val2);\n                if (absTotal < 0) { // overflow\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                total = absTotal;\n            } else if (val1 < 0) {\n                long absVal1 = -val1;\n                long absTotal = safeMultiplyAbs(absVal1, val2);\n                if (absTotal < 0) { // overflow\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                total = -absTotal;\n            } else {\n                total = 0;\n            }\n        }\n\n        // Additional check for Long.MIN_VALUE cases\n        if (val1 == Long.MIN_VALUE) {\n            if (val2 != 0 && val2 != 1 && val2 != -1) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n        }\n\n        return total;\n    }\n\n    private static long safeMultiplyAbs(long a, long b) {\n        // Check for overflow before multiplying\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n\n        long absTotal = Math.multiplyExact(a, b);\n        if (absTotal < 0) { // overflow happened (since inputs were positive)\n            return Long.MAX_VALUE + 1; // indicate overflow\n        }\n        return absTotal;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}