{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                // Check for overflow when negating Long.MIN_VALUE.\n                // -Long.MIN_VALUE results in Long.MIN_VALUE, which is an overflow.\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n            default:\n                // For other val2 values, perform multiplication and check for overflow.\n                // This check relies on the property that if val1 * val2 overflows,\n                // the result 'total' will wrap around, and total / val2 will not equal val1.\n                // This is generally robust for non-zero val2 (which is ensured by the switch cases).\n                long total = val1 * val2;\n                if (total / val2 != val1) {\n                  throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return total;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}