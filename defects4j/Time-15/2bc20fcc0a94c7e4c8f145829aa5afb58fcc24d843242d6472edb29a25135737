{
    "generation": "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    // Special handling for val2 == Integer.MIN_VALUE\n    if (val2 == Integer.MIN_VALUE) {\n        if (val1 == 0L) {\n            return 0L;\n        }\n        if (val1 > 0L) {\n            if (val1 > Long.MAX_VALUE / val2) { // Note: val2 is negative, so this is a positive division\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n        } else {\n            if (val1 < Long.MIN_VALUE / val2) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n        }\n    }\n    long total = val1 * val2;\n    // Avoid division by zero and overflow when val2 == -1 and val1 == Long.MIN_VALUE\n    if (val2 != 0 && (total / val2 != val1 || (val1 == Long.MIN_VALUE && val2 == -1))) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}