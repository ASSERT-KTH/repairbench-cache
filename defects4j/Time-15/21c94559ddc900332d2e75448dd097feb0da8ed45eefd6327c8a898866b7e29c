{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     *\n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        // Handle edge cases where multiplication would overflow\n        if (val2 == -1) {\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        }\n        if (val2 == 0) {\n            return 0L;\n        }\n        if (val2 == 1) {\n            return val1;\n        }\n\n        // Check for potential overflow before multiplying\n        if (val1 > 0) {  // val1 is positive\n            if (val2 > 0) {  // both positive\n                if (val1 > (Long.MAX_VALUE / val2)) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n            } else {  // val1 positive, val2 negative\n                if (val2 < 0 && val1 > (Long.MIN_VALUE / val2)) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n            }\n        } else {  // val1 is negative or zero\n            if (val1 < 0) {\n                if (val2 > 0) {  // val1 negative, val2 positive\n                    if (val1 < (Long.MIN_VALUE / val2)) {\n                        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                    }\n                } else {  // both negative (or val2 negative)\n                    if (val2 < 0 && val1 < (Long.MAX_VALUE / val2)) {\n                        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                    }\n                }\n            }\n        }\n        return val1 * val2;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}