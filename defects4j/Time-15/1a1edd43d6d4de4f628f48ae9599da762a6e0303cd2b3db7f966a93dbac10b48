{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                // Check for overflow negating Long.MIN_VALUE\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        // Perform the multiplication and check for overflow\n        long total = val1 * val2;\n        // The check `total / val2 != val1` is used to detect overflow.\n        // It works because if `val1 * val2` overflows, the division `total / val2`\n        // will not yield `val1` back, except for the special case handled above\n        // (`val1 = Long.MIN_VALUE, val2 = -1`).\n        // We don't need to worry about division by zero as `val2 = 0` is handled by the switch.\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}