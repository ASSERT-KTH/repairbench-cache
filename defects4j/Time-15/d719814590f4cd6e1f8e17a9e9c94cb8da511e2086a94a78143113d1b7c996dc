{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                // MIN_VALUE cannot be negated without overflow, so this is a special case.\n                // -Long.MIN_VALUE results in Long.MIN_VALUE itself in Java due to two's complement.\n                // Mathematically, it should be Long.MAX_VALUE + 1, which overflows a long.\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        // Check for overflow. If the multiplication overflowed, dividing the result\n        // by val2 will not yield the original val1. This is a common and effective\n        // way to detect overflow when val2 is not 0, 1, or -1 (which are handled).\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}