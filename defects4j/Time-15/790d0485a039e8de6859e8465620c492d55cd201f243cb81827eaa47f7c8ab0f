{
    "generation": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                // When val2 is -1, -val1 is returned.\n                // Multiplying Long.MIN_VALUE by -1 results in an overflow\n                // because abs(Long.MIN_VALUE) is greater than Long.MAX_VALUE.\n                // In Java, -Long.MIN_VALUE evaluates to Long.MIN_VALUE due to overflow.\n                // We must detect this specific overflow case.\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        \n        // Perform the multiplication. 'total' might hold a wrapped-around value if overflow occurs.\n        long total = val1 * val2;\n        \n        // Check for overflow. If 'total' divided by 'val2' does not return the original 'val1',\n        // it implies that an overflow occurred during the multiplication.\n        // This check is generally robust for non-zero 'val2' values.\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}