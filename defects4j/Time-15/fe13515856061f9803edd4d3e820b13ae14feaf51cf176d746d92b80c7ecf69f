{
    "generation": "/**\n * Multiply two values throwing an exception if overflow occurs.\n *\n * @param val1  the first value\n * @param val2  the second value\n * @return the new total\n * @throws ArithmeticException if the value is too big or too small\n * @since 1.2\n */\npublic static long safeMultiply(long val1, int val2) {\n    if (val2 == 0) {\n        return 0L;\n    }\n    if (val2 == 1) {\n        return val1;\n    }\n    if (val2 == -1) {\n        return -val1;\n    }\n\n    // Check for overflow\n    if (val1 != 0 && val2 != 0) {\n        if (val1 > 0 && val2 > 0 && val1 > (Long.MAX_VALUE / val2)) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        if (val1 < 0 && val2 < 0 && val1 < (Long.MIN_VALUE / val2)) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        if (val1 > 0 && val2 < 0 && val1 > (Long.MIN_VALUE / val2)) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        if (val1 < 0 && val2 > 0 && val1 < (Long.MAX_VALUE / val2)) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n    }\n\n    return val1 * val2;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}