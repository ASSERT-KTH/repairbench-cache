{
    "generation": "public static long safeMultiply(long val1, int val2) {\n    // Handle special cases first\n    if (val2 == -1) {\n        if (val1 == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return -val1;\n    }\n    if (val2 == 0) {\n        return 0L;\n    }\n    if (val2 == 1) {\n        return val1;\n    }\n    long total = val1 * val2;\n    // Check for overflow\n    if (val1 > Long.MAX_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    if (val1 < Long.MIN_VALUE / val2) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    if (val2 == Integer.MIN_VALUE && val1 != 0 && (val1 != 1 && val1 != -1)) {\n        // Special case: Integer.MIN_VALUE * >1 or <-1 always overflows long unless val1 is 0 or 1 or -1\n        if (val1 > 1 || val1 < -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n    }\n    if (val2 != 0 && total / val2 != val1) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}