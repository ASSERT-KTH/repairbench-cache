{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   * A value is valid if it is a number, string, or boolean literal,\n   * a unary operator applied to a valid value, a binary operator applied to\n   * two valid values, or a name that refers to another define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true; // Literals are valid.\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT: // BITNOT is unary\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Binary operators are only valid if both children are valid.\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.ADD: // Added ADD operator\n        Node first = val.getFirstChild();\n        Node second = val.getLastChild();\n        // Check that both children exist and are valid defines\n        return first != null && second != null &&\n               isValidDefineValue(first, defines) &&\n               isValidDefineValue(second, defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        // Non-qualified names or getprops that aren't known defines are invalid\n        return false;\n\n      default:\n        // Other types are invalid\n        return false;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}