{
    "generation": "/**\n * Determines whether the given value may be assigned to a define.\n *\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\nstatic boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // Binary operators are only valid if both children are valid.\n    case Token.BITAND:\n    case Token.BITOR:\n    case Token.BITXOR:\n    case Token.ADD:\n      // Only support ADD for string and number, but here, we allow ADD like & and |.\n      // Only allow if both children are valid.\n      if (val.getFirstChild() != null && val.getSecondChild() != null) {\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getSecondChild(), defines);\n      }\n      return false;\n\n    // Unary operators are valid if the child is valid.\n    case Token.NOT:\n    case Token.NEG:\n    case Token.BITNOT:\n      if (val.getFirstChild() != null) {\n        return isValidDefineValue(val.getFirstChild(), defines);\n      }\n      return false;\n\n    // Names are valid if and only if they are defines themselves.\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n      return false;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}