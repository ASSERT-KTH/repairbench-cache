{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      // Literal constants are always valid define values.\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Unary operators are valid if their single child is valid.\n      case Token.NOT: // !x\n      case Token.NEG: // -x\n      case Token.BITNOT: // ~x\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Binary operators are valid if both their children are valid.\n      // This includes arithmetic, bitwise, logical, and comparison operators.\n      case Token.BITAND:  // x & y\n      case Token.BITOR:   // x | y\n      case Token.BITXOR:  // x ^ y\n      case Token.ADD:     // x + y (e.g., \"a\" + \"b\" or 1 + 2)\n      case Token.SUB:     // x - y\n      case Token.MUL:     // x * y\n      case Token.DIV:     // x / y\n      case Token.MOD:     // x % y\n      case Token.LSH:     // x << y\n      case Token.RSH:     // x >> y\n      case Token.URSH:    // x >>> y\n      case Token.EQ:      // x == y\n      case Token.NE:      // x != y\n      case Token.LT:      // x < y\n      case Token.LE:      // x <= y\n      case Token.GT:      // x > y\n      case Token.GE:      // x >= y\n      case Token.SHEQ:    // x === y\n      case Token.SHNE:    // x !== y\n      case Token.AND:     // x && y\n      case Token.OR:      // x || y\n        return isValidDefineValue(val.getFirstChild(), defines) &&\n               isValidDefineValue(val.getLastChild(), defines);\n\n      // Ternary operator (conditional) is valid if all three of its children are valid.\n      case Token.HOOK: // x ? y : z\n        return isValidDefineValue(val.getFirstChild(), defines) && // condition\n               isValidDefineValue(val.getFirstChild().getNext(), defines) && // true branch\n               isValidDefineValue(val.getLastChild(), defines); // false branch\n\n      // Names (identifiers or qualified names) are valid if and only if they refer to\n      // existing defines.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        // If it's a simple name like \"foo\" or a GETPROP like \"obj.prop\" that isn't\n        // a qualified name (e.g., dynamic property access), it's not a valid define value.\n        return false;\n    }\n    // Any other token type (e.g., function, object literal, array literal, new, call, etc.)\n    // is not a valid define value.\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}