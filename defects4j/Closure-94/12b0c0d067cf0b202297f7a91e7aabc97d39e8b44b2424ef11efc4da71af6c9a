{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      // Binary operators are only valid if both children are valid.\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n      // Unary operators are only valid if the child is valid.\n      case Token.NOT:\n        return isValidDefineValue(val.getFirstChild(), defines);\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }\n    return false;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}