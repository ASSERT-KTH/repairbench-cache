{
    "generation": "/**\n * Determines whether the given value may be assigned to a define.\n *\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\nstatic boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Binary operators: check both children.\n        case Token.BITAND:\n        case Token.BITNOT:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.BITSHL:\n        case Token.BITSHR:\n        case Token.BITUSHR:\n        case Token.TXT:\n        case Token.CONCAT:\n            if (val.hasTwoChildren()) {\n                return isValidDefineValue(val.getFirstChild(), defines) &&\n                       isValidDefineValue(val.getLastChild(), defines);\n            } else {\n                // If it doesn't have two children, it's invalid.\n                return false;\n            }\n\n        // Unary operators: check the child.\n        case Token.NOT:\n        case Token.NEG:\n            return isValidDefineValue(val.getFirstChild(), defines);\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n        case Token.GETPROP:\n            if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n            // If it's not a qualified name, it's invalid.\n            return false;\n\n        default:\n            return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}