{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // Unary operators are valid if their single child is valid.\n    case Token.NOT:\n    case Token.NEG:\n    case Token.BITNOT:\n      return isValidDefineValue(val.getFirstChild(), defines);\n\n    // Binary operators are valid if both children are valid.\n    case Token.BITAND:\n    case Token.BITOR:\n    case Token.BITXOR:\n    case Token.ADD:\n      Node left = val.getFirstChild();\n      Node right = left.getNext();\n      return isValidDefineValue(left, defines)\n          && isValidDefineValue(right, defines);\n\n    // Names/qualified names are only valid if they've been declared as defines.\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n      break;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}