{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    // Literal values.\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // Names are only valid if they are defined.\n    case Token.NAME:\n    case Token.GETPROP:\n      return val.isQualifiedName() && defines.contains(val.getQualifiedName());\n\n    // Unary operators: only check the single child.\n    case Token.NEG:\n    case Token.NOT:\n    case Token.BITNOT:\n      return isValidDefineValue(val.getFirstChild(), defines);\n\n    // Binary operators: both children must be valid.\n    case Token.ADD:\n    case Token.SUB:\n    case Token.MUL:\n    case Token.DIV:\n    case Token.MOD:\n    case Token.BITAND:\n    case Token.BITOR:\n    case Token.BITXOR:\n      return isValidDefineValue(val.getFirstChild(), defines) &&\n             isValidDefineValue(val.getLastChild(), defines);\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}