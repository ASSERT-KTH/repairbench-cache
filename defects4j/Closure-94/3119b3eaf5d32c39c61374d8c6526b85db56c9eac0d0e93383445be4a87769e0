{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT:\n        // Check if UNARY_PLUS is valid? Currently not supported.\n        // case Token.POS:\n        Node firstChild = val.getFirstChild();\n        return firstChild != null && isValidDefineValue(firstChild, defines);\n\n      // Binary operators are only valid if both children are valid.\n      case Token.AND:\n      case Token.OR:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.ADD:\n      case Token.SUB: // Allow subtraction\n      case Token.MUL: // Allow multiplication\n      case Token.DIV: // Allow division\n      case Token.MOD: // Allow modulo\n      case Token.LSH: // Allow left shift\n      case Token.RSH: // Allow right shift\n      case Token.URSH: // Allow unsigned right shift\n        Node left = val.getFirstChild();\n        Node right = val.getLastChild();\n        return left != null && right != null\n            && isValidDefineValue(left, defines)\n            && isValidDefineValue(right, defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}