{
    "generation": "  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are invalid for define values\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.POW:\n      case Token.SHR:\n      case Token.SHL:\n      case Token.BITXOR:\n        return false;\n\n      // Unary operators are valid only if the child is a literal\n      case Token.NOT:\n      case Token.NEG:\n        return val.getFirstChild().getType() == Token.STRING ||\n               val.getFirstChild().getType() == Token.NUMBER ||\n               val.getFirstChild().getType() == Token.TRUE ||\n               val.getFirstChild().getType() == Token.FALSE;\n\n      // Names and getprop are valid if they are defines\n      case Token.NAME:\n      case Token.GETPROP:\n        return val.isQualifiedName() && defines.contains(val.getQualifiedName());\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}