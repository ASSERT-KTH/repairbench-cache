{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT: // !x\n      case Token.NEG: // -x (unary minus)\n      case Token.BITNOT: // ~x (bitwise NOT)\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Binary operators are valid if both children are valid.\n      case Token.ADD: // x + y\n      case Token.SUB: // x - y\n      case Token.MUL: // x * y\n      case Token.DIV: // x / y\n      case Token.MOD: // x % y\n      case Token.BITAND: // x & y\n      case Token.BITOR: // x | y\n      case Token.BITXOR: // x ^ y\n      case Token.LSH: // x << y\n      case Token.RSH: // x >> y\n      case Token.URSH: // x >>> y\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        // Fall through to false if it's not a qualified name\n        // (e.g., an invalid GETPROP or a simple NAME that is not a define itself).\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}