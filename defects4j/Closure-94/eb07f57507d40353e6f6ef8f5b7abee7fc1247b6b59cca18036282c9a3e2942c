{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // Binary operators: both operands must be valid.\n    case Token.ADD:\n    case Token.SUB:\n    case Token.MUL:\n    case Token.DIV:\n    case Token.MOD:\n    case Token.BITAND:\n    case Token.BITOR:\n    case Token.BITXOR:\n    case Token.LSH:\n    case Token.RSH:\n    case Token.URSH: {\n      for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n        if (!isValidDefineValue(child, defines)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    // Unary operators: single operand must be valid.\n    case Token.NOT:\n    case Token.NEG:\n    case Token.BITNOT:\n      return isValidDefineValue(val.getFirstChild(), defines);\n\n    // Names or qualified names only if present in the defines set.\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n      break;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}