{
    "generation": "/**\n * Determines whether the given value may be assigned to a define.\n *\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\nstatic boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // Binary operators are only valid if both children are valid.\n    case Token.BITAND:\n    case Token.BITNOT:\n    case Token.BITOR:\n    case Token.BITXOR:\n    case Token.ADD:\n      {\n        // Check that both children are valid (for binary ops: add, bit operators)\n        Node firstChild = val.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Unary ops like BITNOT just have one child\n        if (secondChild == null) {\n          // treat as unary operator: bitnot\n          return isValidDefineValue(firstChild, defines);\n        } else {\n          return isValidDefineValue(firstChild, defines) && isValidDefineValue(secondChild, defines);\n        }\n      }\n\n    // Unary operators are valid if the child is valid.\n    case Token.NOT:\n    case Token.NEG:\n      return isValidDefineValue(val.getFirstChild(), defines);\n\n    // Names are valid if and only if they are defines themselves.\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n      break;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}