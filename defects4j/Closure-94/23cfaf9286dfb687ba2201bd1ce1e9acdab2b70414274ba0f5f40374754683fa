{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    // Literals are always fine.\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // A name or qualified property must be a known @define.\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n      return false;\n\n    // Unary operators: just check their single child.\n    case Token.NOT:\n    case Token.NEG:\n    case Token.BITNOT:\n      return isValidDefineValue(val.getFirstChild(), defines);\n\n    // Binary operators: both operands must be valid.\n    case Token.ADD:\n    case Token.SUB:\n    case Token.MUL:\n    case Token.DIV:\n    case Token.MOD:\n    case Token.BITAND:\n    case Token.BITOR:\n    case Token.BITXOR:\n      Node lhs = val.getFirstChild();\n      Node rhs = (lhs == null) ? null : lhs.getNext();\n      return lhs != null\n          && rhs != null\n          && isValidDefineValue(lhs, defines)\n          && isValidDefineValue(rhs, defines);\n\n    // Everything else is invalid for a @define init.\n    default:\n      return false;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}