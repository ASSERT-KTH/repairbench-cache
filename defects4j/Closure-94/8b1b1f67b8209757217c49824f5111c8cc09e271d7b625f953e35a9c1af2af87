{
    "generation": "/**\n * Determines whether the given value may be assigned to a define.\n *\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\nstatic boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // Unary operators are valid if their single child is valid.\n    case Token.NOT:\n    case Token.NEG:\n    case Token.BITNOT:\n      return isValidDefineValue(val.getFirstChild(), defines);\n\n    // Binary operators are valid only if both operands are valid.\n    case Token.BITAND:\n    case Token.BITOR:\n    case Token.BITXOR:\n    case Token.ADD:\n      Node left = val.getFirstChild();\n      Node right = (left != null) ? left.getNext() : null;\n      return left != null\n          && right != null\n          && isValidDefineValue(left, defines)\n          && isValidDefineValue(right, defines);\n\n    // Names or qualified names are valid only if already declared as defines.\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n      // fall through to default\n\n    default:\n      return false;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}