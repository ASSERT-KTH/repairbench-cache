{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Unary operators are valid if their single child is valid.\n      case Token.NOT:  // Logical NOT, e.g., !true\n      case Token.NEG:  // Unary minus, e.g., -1\n      case Token.BITNOT: // Bitwise NOT, e.g., ~1\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Binary operators are valid if both children are valid.\n      // This includes arithmetic, bitwise, logical, and comparison operators.\n      case Token.ADD:    // Addition and String Concatenation, e.g., 1 + 2, 'a' + 'b'\n      case Token.SUB:    // Subtraction, e.g., 5 - 3\n      case Token.MUL:    // Multiplication, e.g., 2 * 3\n      case Token.DIV:    // Division, e.g., 6 / 2\n      case Token.MOD:    // Modulo, e.g., 7 % 3\n      case Token.BITAND: // Bitwise AND, e.g., 1 & 2\n      case Token.BITOR:  // Bitwise OR, e.g., 1 | 2\n      case Token.BITXOR: // Bitwise XOR, e.g., 1 ^ 2\n      case Token.AND:    // Logical AND, e.g., true && false\n      case Token.OR:     // Logical OR, e.g., true || false\n      case Token.EQ:     // Equality, e.g., 1 == 1\n      case Token.NE:     // Inequality, e.g., 1 != 2\n      case Token.SHEQ:   // Strict Equality, e.g., 1 === 1\n      case Token.SHNE:   // Strict Inequality, e.g., 1 !== 2\n      case Token.LT:     // Less than, e.g., 1 < 2\n      case Token.LE:     // Less than or equal, e.g., 1 <= 1\n      case Token.GT:     // Greater than, e.g., 2 > 1\n      case Token.GE:     // Greater than or equal, e.g., 2 >= 2\n        return isValidDefineValue(val.getFirstChild(), defines) &&\n               isValidDefineValue(val.getLastChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        // Fall through to false if it's not a qualified name or not found in defines.\n    }\n    return false;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}