{
    "generation": "  /**\n   * Determines whether the given value may be assigned to a define.\n   *\n   * @param val The value being assigned.\n   * @param defines The list of names of existing defines.\n   */\n  static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Unary operators are valid if their single child is valid.\n      case Token.NOT:    // Logical NOT (!)\n      case Token.NEG:    // Unary minus (-)\n      case Token.POS:    // Unary plus (+)\n      case Token.BITNOT: // Bitwise NOT (~)\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Binary operators are valid if both of their children are valid.\n      case Token.ADD:    // Addition (+)\n      case Token.SUB:    // Subtraction (-)\n      case Token.MUL:    // Multiplication (*)\n      case Token.DIV:    // Division (/)\n      case Token.MOD:    // Modulo (%)\n      case Token.BITAND: // Bitwise AND (&)\n      case Token.BITOR:  // Bitwise OR (|)\n      case Token.BITXOR: // Bitwise XOR (^)\n      case Token.LSH:    // Left Shift (<<)\n      case Token.RSH:    // Right Shift (>>)\n      case Token.URSH:   // Unsigned Right Shift (>>>)\n      case Token.EQ:     // Equal (==)\n      case Token.NE:     // Not Equal (!=)\n      case Token.LT:     // Less Than (<)\n      case Token.LE:     // Less Than or Equal (<=)\n      case Token.GT:     // Greater Than (>)\n      case Token.GE:     // Greater Than or Equal (>=)\n      case Token.AND:    // Logical AND (&&)\n      case Token.OR:     // Logical OR (||)\n        return isValidDefineValue(val.getFirstChild(), defines) &&\n               isValidDefineValue(val.getLastChild(), defines);\n\n      // Names (simple or qualified property accesses) are valid if and only if\n      // they refer to an existing define.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n        // If it's a GETPROP but not a qualified name (e.g., object[key]),\n        // it's not a valid define value. This falls through to return false.\n        break;\n\n      default:\n        return false;\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}