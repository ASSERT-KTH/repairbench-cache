{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    // Unary operators: valid if their single child is valid.\n    case Token.NOT:\n    case Token.NEG:\n    case Token.BITNOT: {\n      Node child = val.getFirstChild();\n      return child != null && isValidDefineValue(child, defines);\n    }\n\n    // Binary operators: valid if both operands are valid.\n    case Token.BITAND:\n    case Token.BITOR:\n    case Token.BITXOR:\n    case Token.ADD: {\n      Node left = val.getFirstChild();\n      Node right = (left != null) ? left.getNext() : null;\n      return left != null\n          && right != null\n          && isValidDefineValue(left, defines)\n          && isValidDefineValue(right, defines);\n    }\n\n    // Names/qualified names: valid only if they've been defined.\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n      return false;\n\n    default:\n      return false;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}