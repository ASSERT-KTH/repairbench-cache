{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n\n        int pos = 0;\n        // 'pos' will track the character index in the 'input' CharSequence.\n        // The loop should iterate as long as 'pos' is within the bounds of 'input'.\n        int inputLen = input.length(); \n\n        while (pos < inputLen) {\n            // Call the abstract translate method.\n            // This method takes the character index 'pos' and returns the number of characters it consumed.\n            int consumed = translate(input, pos, out); \n\n            if (consumed == 0) {\n                // If the translator did not handle the current code point,\n                // we write it directly to the output.\n                int codePoint = Character.codePointAt(input, pos);\n                out.write(Character.toChars(codePoint));\n                // Advance 'pos' by the actual number of characters consumed by this code point.\n                pos += Character.charCount(codePoint);\n            } else {\n                // If the translator handled 'consumed' characters,\n                // advance 'pos' by that amount.\n                pos += consumed;\n            }\n            // No additional 'pos++' here; 'pos' is advanced correctly in each branch.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}