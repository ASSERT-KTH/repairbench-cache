{
    "generation": "/**\n * Translate an input onto a Writer. This is intentionally final as its algorithm is \n * tightly coupled with the abstract method of this class. \n *\n * @param input CharSequence that is being translated\n * @param out Writer to translate the text to\n * @throws IOException if and only if the Writer produces an IOException\n */\npublic final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codepoint = Character.codePointAt(input, pos);\n            char[] c = Character.toChars(codepoint);\n            out.write(c);\n            pos += c.length;\n        } else {\n            // contract with translators is that they have to understand codepoints \n            // and they just took care of a surrogate pair or more\n            int count = 0;\n            int i = pos;\n            while (count < consumed && i < len) {\n                int codepoint = Character.codePointAt(input, i);\n                int charCount = Character.charCount(codepoint);\n                i += charCount;\n                count++;\n            }\n            pos = i;\n        }\n        // Move to next position if not already incremented\n        if (pos < len && consumed == 0) { // fix to avoid double increment\n            // Already incremented by c.length above\n            // do nothing\n        } else if (pos < len) {\n            // Already set in the above translation, so do nothing\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}