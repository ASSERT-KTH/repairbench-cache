{
    "generation": "/**\n * Translate an input onto a Writer. This is intentionally final as its algorithm is \n * tightly coupled with the abstract method of this class. \n *\n * @param input CharSequence that is being translated\n * @param out Writer to translate the text to\n * @throws IOException if and only if the Writer produces an IOException\n */\npublic final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codepoint = Character.codePointAt(input, pos);\n            out.write(Character.toChars(codepoint));\n            pos += Character.charCount(codepoint);\n        } else {\n            int codepointCount = 0;\n            int tempPos = pos;\n            // accumulate codepoints for the number of consumed chars\n            while (codepointCount < consumed && tempPos < len) {\n                int codepoint = Character.codePointAt(input, tempPos);\n                tempPos += Character.charCount(codepoint);\n                codepointCount++;\n            }\n            pos = tempPos;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}