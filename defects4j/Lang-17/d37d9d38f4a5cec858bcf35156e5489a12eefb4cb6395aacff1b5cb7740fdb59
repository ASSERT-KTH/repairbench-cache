{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        // The loop condition should be based on the character length of the input,\n        // as 'pos' represents a character index.\n        int inputLength = input.length();\n\n        while (pos < inputLength) { // Loop while we haven't processed all characters\n            // Get the current code point at 'pos' and determine how many characters it occupies.\n            // This is crucial for advancing 'pos' correctly if the translator does not consume it.\n            int codePoint = Character.codePointAt(input, pos);\n            int charCount = Character.charCount(codePoint); // 1 for BMP, 2 for supplementary character\n\n            // Call the abstract translate method, passing the current character position.\n            // This method should return the number of characters it consumed from 'input' starting at 'pos'.\n            int consumed = translate(input, pos, out);\n\n            if (consumed == 0) {\n                // If the custom translator did not consume any characters (returned 0),\n                // then we write the current code point as characters to the output writer.\n                char[] c = Character.toChars(codePoint);\n                out.write(c);\n                // Advance 'pos' by the number of characters that constitute the current code point.\n                pos += charCount;\n            } else {\n                // If the custom translator consumed characters (returned > 0),\n                // then we advance 'pos' by the exact number of characters it consumed.\n                // The translator is responsible for handling surrogate pairs if it translates them.\n                pos += consumed;\n            }\n            // The problematic logic with `for (int pt...)`, `pos--`, and `pos++`\n            // has been removed as it was incorrect and led to off-by-one errors.\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}