{
    "generation": "/**\n * Translate an input onto a Writer. This is intentionally final as its algorithm is \n * tightly coupled with the abstract method of this class. \n *\n * @param input CharSequence that is being translated\n * @param out Writer to translate the text to\n * @throws IOException if and only if the Writer produces an IOException\n */\npublic final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            // nothing translated, write the code point as-is\n            int codepoint = Character.codePointAt(input, pos);\n            char[] chars = Character.toChars(codepoint);\n            out.write(chars);\n            pos += chars.length;\n        } else {\n            // skip the code points that the translator consumed\n            for (int i = 0; i < consumed; i++) {\n                int codepoint = Character.codePointAt(input, pos);\n                pos += Character.charCount(codepoint);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}