{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // This should be a character index\n        int len = input.length(); // This should be the total number of characters\n        while (pos < len) {\n            // Call the abstract translate method, passing the current character index 'pos'.\n            // The abstract translate method is expected to return the number of characters consumed.\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If nothing was consumed by the translator, it means no specific translation\n                // for the current character(s) is needed. Write the current code point as-is.\n                int codePoint = Character.codePointAt(input, pos); // Get the code point at the current character position.\n                out.write(Character.toChars(codePoint)); // Write the character(s) corresponding to this code point.\n                pos += Character.charCount(codePoint); // Advance 'pos' by the number of characters consumed by this code point (1 for BMP, 2 for supplementary).\n            } else {\n                // The translator consumed 'consumed' characters. Advance 'pos' by this amount.\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}