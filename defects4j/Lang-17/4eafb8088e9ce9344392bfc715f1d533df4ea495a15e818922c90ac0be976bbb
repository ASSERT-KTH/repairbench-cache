{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // 'pos' is now consistently a character index\n        int len = input.length(); // 'len' is now consistently the total number of characters\n        while (pos < len) {\n            // Get the code point at the current character position.\n            int codePoint = Character.codePointAt(input, pos);\n            \n            // Call the abstract translate method. This method receives the character index\n            // and is expected to return the number of *code points* it consumed.\n            // For typical CodePointTranslator implementations, this will be 0 or 1.\n            int consumed = translate(input, pos, out); \n            \n            if (consumed == 0) {\n                // If the translator did not consume this code point, write it directly.\n                out.write(Character.toChars(codePoint));\n            } \n            // In either case (consumed == 0 or consumed == 1), we have processed exactly one\n            // code point from the input starting at 'pos'. We must advance 'pos' by the\n            // number of characters that code point occupies (1 for BMP, 2 for supplementary).\n            pos += Character.charCount(codePoint);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}