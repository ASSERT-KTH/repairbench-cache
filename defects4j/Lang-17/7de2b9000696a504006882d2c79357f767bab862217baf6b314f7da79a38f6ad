{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n\n        int pos = 0;\n        int inputLen = input.length(); // Corrected: Loop limit should be input.length() (char units)\n\n        while (pos < inputLen) {\n            // Attempt to translate the character(s) at 'pos'.\n            // The abstract translate method returns the number of chars consumed (1 or 2), or 0 if no translation.\n            int consumed = translate(input, pos, out); \n\n            if (consumed == 0) {\n                // If no translation occurred, write the current code point as is.\n                // Determine the code point at the current 'pos'.\n                int codePoint = Character.codePointAt(input, pos);\n                // Write the characters representing this code point to the output.\n                out.write(Character.toChars(codePoint));\n                // Advance 'pos' by the number of Java chars this code point occupies (1 or 2).\n                pos += Character.charCount(codePoint);\n            } else {\n                // If a translation occurred, the 'translate' method has already written to 'out'.\n                // 'consumed' is the number of Java chars that were handled by the translator.\n                // Advance 'pos' by that amount.\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}