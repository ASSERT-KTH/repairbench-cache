{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        // Use the char length of the input sequence for iteration control\n        int len = input.length(); \n        while (pos < len) {\n            // Call the abstract translate method which returns the number of *chars* consumed\n            int consumed = translate(input, pos, out); \n            // If no characters were consumed, this means the character at pos was not translated.\n            // We need to write the character as-is and advance the position.\n            if (consumed == 0) {\n                // Get the code point at the current position. Handles supplementary characters correctly.\n                int codepoint = Character.codePointAt(input, pos);\n                // Write the character(s) for this code point to the output writer.\n                out.write(Character.toChars(codepoint));\n                // Advance the position by the number of char units used by this code point.\n                pos += Character.charCount(codepoint);\n            }\n            else {\n                // If characters were consumed, the translate method handled the translation\n                // and writing to the output writer. We simply need to advance the position\n                // by the number of characters consumed by the translator.\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}