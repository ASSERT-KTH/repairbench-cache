{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(final CharSequence input, final Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        final int len = input.length(); // Use character length for iteration index\n        while (pos < len) {\n            // Call the abstract translate method which is responsible for complex translation logic\n            final int consumed = translate(input, pos, out); \n            \n            // If consume is 0, means the character/codepoint at 'pos' was not handled by the specific translator.\n            // In this case, we should write the raw character/codepoint.\n            if (consumed == 0) {\n                // Get the codepoint at the current position. Handles supplementary characters (surrogate pairs).\n                final int codePoint = Character.codePointAt(input, pos);\n                // Write the character(s) corresponding to the codepoint.\n                out.write(Character.toChars(codePoint));\n                // Advance the position by the number of chars used by the codepoint (1 for BMP, 2 for supplementary).\n                pos += Character.charCount(codePoint); \n            } else {\n                // If consumed is > 0, the translate method handled 'consumed' characters starting at 'pos'.\n                // Advance the position by the number of characters consumed by the translator.\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}