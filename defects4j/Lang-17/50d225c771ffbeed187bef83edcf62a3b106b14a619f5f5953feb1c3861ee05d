{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        // The 'translate' abstract method takes a character index.\n        // Therefore, 'pos' must represent a character index into the input CharSequence.\n        // The loop should iterate over the character length of the input.\n        int len = input.length(); // Use character length, not code point count.\n\n        while (pos < len) {\n            // Call the abstract translate method.\n            // 'translate(input, pos, out)' expects 'pos' to be a character index.\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If no specific translation occurred, write the current code point directly.\n                // We need to determine the code point at the current character position 'pos'\n                // to correctly handle both BMP characters and supplementary characters (surrogate pairs).\n                int codePoint = Character.codePointAt(input, pos);\n                char[] c = Character.toChars(codePoint);\n                out.write(c);\n                // Advance 'pos' by the number of characters that constitute this code point.\n                // For BMP characters, this is 1. For supplementary characters, this is 2.\n                pos += Character.charCount(codePoint);\n            }\n            else {\n                // If the translator consumed characters, advance 'pos' by the number of\n                // characters it reported consuming.\n                pos += consumed;\n            }\n            // The original code had a 'pos++' here which was incorrect.\n            // 'pos' is already advanced correctly within the if/else block\n            // based on whether a translation occurred and how many characters were processed.\n            // Adding an extra 'pos++' would skip characters or misalign the processing.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}