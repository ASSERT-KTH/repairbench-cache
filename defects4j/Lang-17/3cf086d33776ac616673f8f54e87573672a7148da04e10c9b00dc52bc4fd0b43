{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int inputLen = input.length(); // Use character length for iteration\n        while (pos < inputLen) { // Iterate based on character index\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // Translator didn't handle it, so write the current code point directly.\n                // Advance pos by the number of chars in this code point.\n                int codePoint = Character.codePointAt(input, pos);\n                out.write(Character.toChars(codePoint));\n                pos += Character.charCount(codePoint); // Correctly advance pos\n            }\n            else {\n                // Translator handled 'consumed' characters.\n                // Advance pos by 'consumed'.\n                pos += consumed; // Correctly advance pos\n            }\n            // Removed the problematic 'pos++;' from here, as 'pos' is now advanced within the if/else blocks.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}