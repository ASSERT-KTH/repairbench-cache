{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // 'pos' is a character index\n        int inputLen = input.length(); // Total number of characters in the input\n\n        while (pos < inputLen) {\n            // Call the abstract translate method, passing the current character index 'pos'\n            int consumed = translate(input, pos, out);\n\n            if (consumed == 0) {\n                // If the abstract translator did not consume any characters (i.e., it didn't handle the current code point),\n                // then we write the current code point as-is.\n                \n                // Get the code point at the current 'pos' (character index)\n                int codePoint = Character.codePointAt(input, pos);\n                \n                // Convert the code point back to a char array (handles surrogate pairs correctly)\n                char[] c = Character.toChars(codePoint);\n                \n                // Write the characters\n                out.write(c);\n                \n                // Advance 'pos' by the number of characters consumed for this code point (1 for BMP, 2 for supplementary)\n                pos += Character.charCount(codePoint);\n            } else {\n                // If the abstract translator consumed characters, advance 'pos' by the number of characters it consumed.\n                // The 'consumed' value directly indicates how many characters from 'input' were processed.\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}