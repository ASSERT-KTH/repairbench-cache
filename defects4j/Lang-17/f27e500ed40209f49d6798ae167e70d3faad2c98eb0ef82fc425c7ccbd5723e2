{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        // The 'pos' variable is a character index within the CharSequence.\n        // Therefore, 'len' should represent the total number of characters in the input.\n        // The original code used Character.codePointCount, which calculates code points,\n        // leading to incorrect loop termination and index calculations.\n        int len = input.length();\n        while (pos < len) {\n            // Attempt to translate the character sequence starting at 'pos'.\n            // The 'translate' abstract method (implemented by subclasses) is expected to\n            // write the translated output to 'out' and return the number of characters\n            // consumed from the input 'CharSequence'.\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If 'translate' did not consume any characters (i.e., no special translation\n                // was performed for the current characters), then write the code point\n                // at the current position directly to the output.\n                \n                // Get the code point at the current character index. This correctly handles\n                // both BMP characters (1 char) and surrogate pairs (2 chars).\n                int codePoint = Character.codePointAt(input, pos);\n                // Convert the code point back to a char array for writing.\n                char[] c = Character.toChars(codePoint);\n                out.write(c);\n                // Advance 'pos' by the number of characters this code point occupies.\n                // This ensures that 'pos' correctly skips past the character(s) just written.\n                pos += Character.charCount(codePoint);\n            }\n            else {\n                // If 'translate' consumed characters (i.e., 'consumed' > 0),\n                // it means the translator handled the characters starting at 'pos'\n                // and wrote its own output.\n                // We simply need to advance 'pos' by the number of characters\n                // that the translator reported it consumed.\n                pos += consumed;\n            }\n            // There should be no additional 'pos++' here. The 'pos' variable is\n            // correctly advanced within the if/else block based on whether a translation\n            // occurred and how many characters were processed. An extra increment\n            // would lead to skipping characters or incorrect indexing.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}