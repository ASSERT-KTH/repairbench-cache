{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length(); // Use the character length, not code point count\n        while (pos < len) {\n            // Call the abstract method to translate character(s) at index pos\n            // This method should return the number of characters consumed from input\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If consume is 0, means no translation was performed\n                // Get the code point at the current character index\n                // Note: charAt(pos) is insufficient for supplementary characters\n                int codepoint = Character.codePointAt(input, pos);\n                // Write the characters corresponding to the code point to the output\n                out.write(Character.toChars(codepoint));\n                // Advance the position by the number of characters composing the code point\n                pos += Character.charCount(codepoint);\n            }\n            else {\n                // If consumed is > 0, the translate method handled writing to 'out'\n                // and consumed 'consumed' characters.\n                // Advance the position by the number of characters consumed.\n                pos += consumed;\n                // Note: This logic assumes the contract that 'translate(input, pos, out)'\n                // returns the number of characters consumed. This contradicts the\n                // previous implementation's apparent assumption based on its loop structure\n                // but aligns with observed behavior of subclasses like LookupTranslator\n                // and fixes the reported bug.\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}