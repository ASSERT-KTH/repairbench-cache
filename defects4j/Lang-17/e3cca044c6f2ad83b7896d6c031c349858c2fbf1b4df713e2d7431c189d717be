{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0; // position in the input string, based on char index\n        int len = input.length();\n        while (pos < len) {\n            // Call the abstract method to translate character(s) starting at 'pos'\n            // It returns the number of characters consumed by the translation.\n            int consumed = translate(input, pos, out);\n\n            // If no characters were consumed, it means the character(s) at 'pos'\n            // were not translated and should be written out verbatim.\n            if (consumed == 0) {\n                // Identify the full Unicode code point starting at 'pos'.\n                // This handles supplementary characters (surrogate pairs) correctly.\n                int codepoint = Character.codePointAt(input, pos);\n                // Write the code point as its char representation(s).\n                out.write(Character.toChars(codepoint));\n                // Advance the position by the number of chars this code point occupies.\n                pos += Character.charCount(codepoint);\n            }\n            // If characters were consumed (i.e., translation occurred),\n            // advance the position by the number of chars consumed.\n            else {\n                pos += consumed;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}