{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        // Use character length for loop boundary, as 'pos' is a character index.\n        int inputLen = input.length(); \n\n        while (pos < inputLen) {\n            // Call the abstract translate method to handle the current position\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If the abstract translator did not handle it (returned 0),\n                // then we handle it by writing the current code point directly.\n                int codePoint = Character.codePointAt(input, pos);\n                char[] chars = Character.toChars(codePoint);\n                out.write(chars);\n                // Advance position by the number of characters in this code point.\n                pos += Character.charCount(codePoint);\n            } else {\n                // If the abstract translator handled it, 'consumed' indicates\n                // how many characters it processed from the input.\n                // Advance position by the number of characters consumed by the translator.\n                pos += consumed;\n            }\n            // No global pos++ here, as pos is already advanced correctly\n            // within the if/else block based on the consumed characters.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}