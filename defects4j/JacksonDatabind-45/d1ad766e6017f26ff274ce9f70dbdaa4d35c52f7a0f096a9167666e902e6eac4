{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector()\n                .findFormat((Annotated) property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            // If the shape explicitly indicates numeric, then use timestamp output.\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            // Otherwise, force String formatting if any explicit formatting properties exist:\n            // a non-empty pattern, locale, or timezone, or if shape is explicitly STRING.\n            if (format.hasPattern() || format.hasLocale() || format.getTimeZone() != null\n                    || shape == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    // No annotation (or not forcing a change), so use serializer\u2019s default settings.\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}