{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n\n                JsonFormat.Shape shape = format.getShape();\n\n                // Simple case first: serialize as numeric timestamp?\n                if (shape.isNumeric()) {\n                    // Force timestamp format (ignore global defaults)\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // Next: textual format? This includes Shape.STRING, or Shape.ANY/unspecified\n                // if pattern/locale/timezone are specified (even if global default is timestamp).\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                        || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    // [databind#960]: default to format settings, not defaults\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    // Force String format (ignore global defaults)\n                    return withFormat(Boolean.FALSE, df);\n                }\n                // Otherwise (Shape is ANY or SCALAR etc, or null/default,\n                // and no pattern/locale/timezone specified)\n                // -> fall through and return `this` to let global defaults apply\n            }\n        }\n        // No annotation/property, or annotation doesn't specify anything forcing a particular format\n        // -> return `this` to use default settings configured globally\n        return this;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}