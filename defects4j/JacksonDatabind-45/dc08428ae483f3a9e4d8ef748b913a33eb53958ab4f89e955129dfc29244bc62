{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n                JsonFormat.Shape shape = format.getShape();\n\n                // Case 1: Explicitly numeric format\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // Case 2: Explicitly string format OR implicitly string format (due to pattern/locale/timezone with Shape.ANY)\n                boolean asString = false;\n                if (shape == JsonFormat.Shape.STRING) {\n                    asString = true;\n                } else if (shape == JsonFormat.Shape.ANY) {\n                    // If shape is ANY, consider it string if pattern, locale or timezone is specified\n                    if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n                        asString = true;\n                    }\n                }\n\n                if (asString) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n        // If no specific format determined by @JsonFormat, return 'this'\n        // to let global configuration (e.g., SerializationFeature.WRITE_DATES_AS_TIMESTAMPS) apply.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}