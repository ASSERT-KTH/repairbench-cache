{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n                // Simple case first: serialize as numeric timestamp?\n                JsonFormat.Shape shape = format.getShape();\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // Handle Shape.STRING or other non-numeric cases\n                if (shape == JsonFormat.Shape.STRING) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n\n                // Infer shape based on annotation presence and user configuration\n                // Default to string format unless WRITE_DATES_AS_TIMESTAMPS is enabled\n                if (format.getShape() == JsonFormat.Shape.ANY) {\n                    // Check if the user has enabled WRITE_DATES_AS_TIMESTAMPS\n                    if (serializers.getSerializationFeatureEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n                        return withFormat(Boolean.TRUE, null);\n                    } else {\n                        // Use default date format\n                        final String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                        final Locale loc = serializers.getLocale();\n                        TimeZone tz = serializers.getTimeZone();\n                        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                        df.setTimeZone(tz);\n                        return withFormat(Boolean.FALSE, df);\n                    }\n                }\n            }\n        }\n        // When no format is specified, use the user's configuration\n        if (serializers.getSerializationFeatureEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n            return withFormat(Boolean.TRUE, null);\n        } else {\n            final String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = serializers.getLocale();\n            TimeZone tz = serializers.getTimeZone();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}