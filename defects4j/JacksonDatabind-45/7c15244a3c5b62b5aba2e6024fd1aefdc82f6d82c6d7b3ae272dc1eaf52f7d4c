{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = (property == null) ? null\n            : serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n    if (format != null) {\n        // If there is an explicit formatting override (pattern, locale, or timezone),\n        // then we force string formatting.\n        if (format.hasPattern() || format.hasLocale() || format.getTimeZone() != null) {\n            TimeZone tz = format.getTimeZone();\n            String pattern = format.hasPattern()\n                    ? format.getPattern()\n                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            Locale loc = format.hasLocale()\n                    ? format.getLocale()\n                    : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n        // Otherwise, if a shape is explicitly defined (and not just \"ANY\"),\n        // use it.\n        JsonFormat.Shape shape = format.getShape();\n        if (shape != JsonFormat.Shape.ANY) {\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) {\n                // Even if no pattern was provided, force string formatting.\n                TimeZone tz = serializers.getTimeZone();\n                String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                Locale loc = serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    // No explicit format override; use provider configuration.\n    boolean useTimestamp = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    if (useTimestamp) {\n        return withFormat(Boolean.TRUE, null);\n    } else {\n        TimeZone tz = serializers.getTimeZone();\n        Locale loc = serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, loc);\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}