{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n            // Check if the format has specific settings that would dictate shape\n            boolean hasShapeIndicators = format.hasPattern() || format.hasLocale() || format.hasTimeZone()\n                    || format.getShape() != JsonFormat.Shape.ANY;\n\n            if (hasShapeIndicators) {\n                JsonFormat.Shape shape = format.getShape();\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                if (shape == JsonFormat.Shape.STRING || shape == JsonFormat.Shape.ANY) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n    }\n\n    // Default case: follow the serialization feature setting\n    if (serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}