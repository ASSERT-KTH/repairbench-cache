{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            // Use the original method for finding format annotations\n            // Assume property.getMember() is the correct source for annotations\n            AnnotatedMember member = property.getMember();\n            JsonFormat.Value format = null;\n            // Check if member is null just in case\n            if (member != null) {\n                // findFormat takes Annotated; AnnotatedMember implements Annotated.\n                 format = serializers.getAnnotationIntrospector().findFormat(member);\n            }\n\n            if (format != null) {\n                JsonFormat.Shape shape = format.getShape();\n\n                // Simple case first: serialize as numeric timestamp?\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // Check if the shape implies String format. This is the case if:\n                // - Shape is explicitly Shape.STRING\n                // - Shape is Shape.ANY (or unspecified/default) AND pattern/locale/timezone is set\n                //   (implies String format that overrides global timestamp setting)\n                boolean asString = (shape == JsonFormat.Shape.STRING) ||\n                                   (shape == JsonFormat.Shape.ANY &&\n                                       (format.hasPattern() || format.hasLocale() || format.hasTimeZone()));\n\n                if (asString) {\n                    // If timezone not specified in @JsonFormat, use SerializerProvider's default.\n                    // Note: format.getTimeZone() returns null if not specified\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    // Jackson's default format string if pattern not specified:\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale(); // Use SerializerProvider's locale if not specified\n\n                    // Important: create a new SimpleDateFormat instance, do not reuse.\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n\n                    // If timezone was not specified via @JsonFormat, use the one from provider\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    // Return a new serializer instance configured with specified format\n                    // Boolean.FALSE indicates do not use timestamp; df is the custom DateFormat\n                    return withFormat(Boolean.FALSE, df);\n                }\n                // If not numeric and not explicitly/implicitly string (e.g., Shape.ANY without\n                // pattern/locale/timezone), fall through to return 'this'.\n            }\n        }\n        // If no property, or no JsonFormat annotation found, or it doesn't specify\n        // numeric/string format (e.g. Shape.ANY without pattern etc.),\n        // return the default serializer instance (`this`). This instance will respect the\n        // global configuration (like WRITE_DATES_AS_TIMESTAMPS).\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}