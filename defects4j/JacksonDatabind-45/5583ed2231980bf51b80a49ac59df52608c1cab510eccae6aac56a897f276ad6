{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            // Use the property's annotated member to find FormatOverrides\n            // (From 2.7+)\n            AnnotatedMember member = property.getMember();\n            if (member != null) {\n                JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(member);\n                if (format != null) {\n                    JsonFormat.Shape shape = format.getShape();\n\n                    // Simple case first: serialize as numeric timestamp?\n                    if (shape.isNumeric()) {\n                        return withFormat(Boolean.TRUE, null);\n                    }\n\n                    // If not numeric, textual it is:\n                    // But possibly using default `SimpleDateFormat` variant?\n                    // 11-Nov-2015, tatu: Needs to be handled explicitly, see [databind#939]\n                    // 10-Oct-2016, tatu: And further fixes for [databind#1343] related to Shape.ANY\n                    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                             || format.hasLocale() || format.hasTimeZone()) {\n                        TimeZone tz = format.getTimeZone();\n                        final String pattern = format.hasPattern()\n                                        ? format.getPattern()\n                                        // Need to override globally defined pattern?\n                                        // 10-Oct-2016, tatu: For 2.8, yes -- but likely should NOT override\n                                        //    Base settings for 2.9, see [databind#1343]\n                                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                        final Locale loc = format.hasLocale()\n                                        ? format.getLocale()\n                                        : serializers.getLocale();\n                        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                        if (tz == null) {\n                            tz = serializers.getTimeZone();\n                        }\n                        df.setTimeZone(tz);\n                        return withFormat(Boolean.FALSE, df);\n                    }\n                    // 20-Mar-2016, tatu: Maybe shape is `Shape.ANY` or `SCALAR`?\n                    //   If so, could be that we want timestamp regardless of configuration?\n                    //   Let's support this by explicit request:\n                    /* Not yet implemented\n                    if (shape == JsonFormat.Shape.SCALAR) {\n                       // 13-Nov-2016, tatu: TO BE IMPLEMENTED LATER?\n\n                    }\n                    */\n\n                    // Otherwise, need to make decision based on Global settings...\n                }\n            }\n        }\n        // If no specific format found, return the default serializer (which respects global settings)\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}