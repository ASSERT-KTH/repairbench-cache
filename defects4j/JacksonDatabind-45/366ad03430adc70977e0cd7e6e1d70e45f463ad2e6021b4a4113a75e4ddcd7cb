{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n\n                // Simple case first: serialize as numeric timestamp?\n                JsonFormat.Shape shape = format.getShape();\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // Check for any format hints that would imply string format\n                boolean useStringFormat = (shape == JsonFormat.Shape.STRING)\n                                      || (format.hasPattern())\n                                      || (format.hasLocale())\n                                      || (format.getTimeZone() != null);\n\n                if (useStringFormat) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n        // For the default case, we need to respect the WRITE_DATES_AS_TIMESTAMPS setting\n        if (!serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n            TimeZone tz = serializers.getTimeZone();\n            SimpleDateFormat df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601,\n                    serializers.getLocale());\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}