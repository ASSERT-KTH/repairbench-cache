{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n                // First, check explicit shape\n                JsonFormat.Shape shape = format.getShape();\n\n                // If explicit numeric shape, return numeric serializer\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // If explicit string shape, OR if Shape.ANY but pattern/locale/timezone is specified\n                // (which implies string serialization)\n                if (shape == JsonFormat.Shape.STRING ||\n                    (shape == JsonFormat.Shape.ANY\n                        && (format.hasPattern() || format.hasLocale() || format.hasTimeZone())))\n                {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601; // Default to ISO-8601 if no pattern specified\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n        // If no JsonFormat annotation, or JsonFormat.Shape.ANY without pattern/locale/timezone,\n        // or other non-matching shapes, return 'this' to let default configuration apply.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}