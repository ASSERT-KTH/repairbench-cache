{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n            if (format != null) {\n\n                // Handle Shape.ANY case without pattern, locale, or timezone\n                if (format.getShape() == JsonFormat.Shape.ANY) {\n                    if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n                        // Existing handling for when pattern, locale, or timezone is present\n                        TimeZone tz = format.getTimeZone();\n                        final String pattern = format.getPattern();\n                        final Locale loc = format.getLocale();\n                        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                        if (tz == null) {\n                            tz = serializers.getTimeZone();\n                        }\n                        df.setTimeZone(tz);\n                        return withFormat(Boolean.FALSE, df);\n                    } else {\n                        // Check the SerializationFeature.WRITE_DATES_AS_TIMESTAMPS setting\n                        if (serializers.getSerializationFeature DefaultManager_instance,\n                                SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n                            return withFormat(Boolean.TRUE, null);\n                        } else {\n                            // Use default string format without custom pattern, using default locale and timezone\n                            final String defaultPattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                            final Locale defaultLocale = serializers.getLocale();\n                            TimeZone defaultTz = serializers.getTimeZone();\n                            SimpleDateFormat defaultDf = new SimpleDateFormat(defaultPattern, defaultLocale);\n                            defaultDf.setTimeZone(defaultTz);\n                            return withFormat(Boolean.FALSE, defaultDf);\n                        }\n                    }\n                }\n\n                // Simple case first: serialize as numeric timestamp?\n                JsonFormat.Shape shape = format.getShape();\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                if (format.getShape() == JsonFormat.Shape.STRING) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.getPattern();\n                    final Locale loc = format.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern != null ? pattern : StdDateFormat.DATE_FORMAT_STR_ISO8601, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}