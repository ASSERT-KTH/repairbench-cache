{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n            if (format != null) {\n                JsonFormat.Shape shape = format.getShape();\n\n                // Simple case first: serialize as numeric timestamp?\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // Check for STRING shape or Shape.ANY with specific formatting details that imply STRING\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                        || format.hasLocale() || format.hasTimeZone() || format.hasLenient()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    // As per [databind#1424]: default to ISO8601, not base implementations default\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    Boolean lenient = format.getLenient();\n                    if (lenient != null) {\n                        df.setLenient(lenient);\n                    }\n                    return withFormat(Boolean.FALSE, df);\n                }\n                \n                // Otherwise, Shape.ANY is fine (use defaults), or some other shape like OBJECT etc.\n                // For Dates this typically means relying on global defaults, i.e. WRITE_DATES_AS_TIMESTAMPS\n            }\n        }\n        // If no annotation/property, or shape is ANY without specific overrides, return 'this'\n        // to use the default configuration (which might be timestamp or string based on global settings)\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}