{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n\n            // Determine the shape based on the format or default to user config\n            JsonFormat.Shape shape = format.getShape();\n            if (shape == null || shape == JsonFormat.Shape.ANY) {\n                // If shape is not set, check user config\n                boolean asTimestamp = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n                if (asTimestamp) {\n                    return withFormat(Boolean.TRUE, null);\n                } else {\n                    return withFormat(Boolean.FALSE, null);\n                }\n            }\n\n            // Simple case: numeric timestamp?\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n\n            // Otherwise, handle string representation\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                            ? format.getPattern()\n                            : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}