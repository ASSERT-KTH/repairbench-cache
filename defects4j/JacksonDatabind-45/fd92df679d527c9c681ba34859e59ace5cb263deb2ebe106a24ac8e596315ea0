{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property)\n        throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // If the annotation explicitly specifies a pattern, timezone, or locale,\n            // or forces STRING via shape, then use String formatting regardless\n            // of the WRITE_DATES_AS_TIMESTAMPS setting.\n            if (format.hasPattern() \n                    || format.getTimeZone() != null \n                    || format.hasLocale()\n                    || format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n            // Otherwise, if the format explicitly calls for numeric shape,\n            // force numeric timestamp format.\n            if (format.getShape().isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n        }\n    }\n    // No meaningful annotation overrides: use the serializer as configured\n    // (which will defer to SerializationFeature.WRITE_DATES_AS_TIMESTAMPS).\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}