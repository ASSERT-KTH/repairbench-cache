{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property)\n        throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector()\n                .findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // If the shape is explicitly numeric, use timestamp serialization.\n            if (format.getShape().isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            // Force string serialization if the shape is explicitly STRING\n            // or if pattern, locale, or timezone information is provided.\n            if (format.getShape() == JsonFormat.Shape.STRING\n                    || format.hasPattern()\n                    || format.hasLocale()\n                    || format.getTimeZone() != null) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}