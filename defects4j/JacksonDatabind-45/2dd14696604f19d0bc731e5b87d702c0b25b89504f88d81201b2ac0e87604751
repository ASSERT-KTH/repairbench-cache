{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    // First, determine global setting for timestamps\n    boolean writeTimestamps = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector()\n            .findFormat((Annotated) property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            boolean hasPattern  = format.hasPattern();\n            boolean hasLocale   = format.hasLocale();\n            boolean hasTimeZone = format.hasTimeZone();\n            // explicit numeric override\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            // explicit string shape or any format override (pattern/locale/timezone)\n            if (shape == JsonFormat.Shape.STRING\n                    || hasPattern\n                    || hasLocale\n                    || hasTimeZone) {\n                // pick or default the pattern\n                String pattern = hasPattern\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                // pick or default the locale\n                Locale loc = hasLocale\n                        ? format.getLocale()\n                        : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                // pick or default the time zone\n                TimeZone tz = hasTimeZone\n                        ? format.getTimeZone()\n                        : serializers.getTimeZone();\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n            // annotation present but no meaningful override: fall back to global setting\n            return withFormat(writeTimestamps, null);\n        }\n    }\n    // no annotation: fall back to global setting\n    return withFormat(writeTimestamps, null);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}