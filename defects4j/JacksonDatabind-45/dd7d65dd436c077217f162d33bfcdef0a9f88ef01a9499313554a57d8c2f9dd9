{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                                ? format.getLocale()\n                                : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n\n            // But Shape.ANY is a bit different, since it means \"default\", basically.\n            // So, let's check that, and fall back to contextual configuration.\n            if (shape == JsonFormat.Shape.ANY) {\n                Boolean shouldWriteAsTimestamp = _defaultAsBoolean(serializers, SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n                return withFormat(shouldWriteAsTimestamp, null);\n            }\n        }\n    }\n    // No @JsonFormat => default to user config\n    Boolean shouldWriteAsTimestamp = _defaultAsBoolean(serializers, SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    if (_useTimestamp == shouldWriteAsTimestamp) {\n        return this;\n    }\n    return withFormat(shouldWriteAsTimestamp, null);\n}\n\n// Utility method to identify the effective value of a boolean feature\n// in a SerializerProvider (which may or may not be a DefaultSerializerProvider)\nprivate Boolean _defaultAsBoolean(SerializerProvider serializers, SerializationFeature feature) {\n    return serializers.isEnabled(feature);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}