{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n\n            boolean useStringFormat = (shape == JsonFormat.Shape.STRING) \n                || (shape == JsonFormat.Shape.ANY \n                    && (format.hasPattern() \n                        || format.hasLocale() \n                        || format.getTimeZone() != null));\n\n            if (useStringFormat) {\n                final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                                ? format.getLocale()\n                                : serializers.getLocale();\n                TimeZone tz = format.getTimeZone();\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}