{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property)\n        throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            // First, if the annotation explicitly says \"numeric\" then use timestamps.\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            // If the user has specified a custom pattern, locale, or timezone\u2014or explicitly set Shape.STRING\u2014\n            // then force textual (formatted) date serialization.\n            if (shape == JsonFormat.Shape.STRING || format.hasPattern() || format.hasLocale() || format.getTimeZone() != null) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    // If no contextual annotation (or an \"empty\" one) exists, then use the default \n    // (which respects SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}