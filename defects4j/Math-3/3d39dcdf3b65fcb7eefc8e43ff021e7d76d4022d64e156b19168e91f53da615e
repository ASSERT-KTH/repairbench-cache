{
    "generation": "public static double linearCombination(final double[] a, final double[] b)\n    throws DimensionMismatchException {\n    final int len = a.length;\n    if (len != b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    // short\u2010circuit for length < 2 to avoid out\u2010of\u2010bounds indexing\n    if (len < 2) {\n        double result = 0;\n        for (int i = 0; i < len; i++) {\n            result += a[i] * b[i];\n        }\n        return result;\n    }\n\n    // Revert to scalar multiplication with error splitting\n    final double[] prodHigh = new double[len];\n    double prodLowSum = 0;\n\n    for (int i = 0; i < len; i++) {\n        final double ai = a[i];\n        final double ca = SPLIT_FACTOR * ai;\n        final double aHigh = ca - (ca - ai);\n        final double aLow = ai - aHigh;\n\n        final double bi = b[i];\n        final double cb = SPLIT_FACTOR * bi;\n        final double bHigh = cb - (cb - bi);\n        final double bLow = bi - bHigh;\n\n        prodHigh[i] = ai * bi;\n        final double prodLow = aLow * bLow\n                             - (((prodHigh[i] - aHigh * bHigh)\n                                 - aLow * bHigh)\n                                - aHigh * bLow);\n        prodLowSum += prodLow;\n    }\n\n    // Accurate pairwise summation of prodHigh[]\n    final double prodHighCur = prodHigh[0];\n    double prodHighNext = prodHigh[1];\n    double sHighPrev = prodHighCur + prodHighNext;\n    double sPrime = sHighPrev - prodHighNext;\n    double sLowSum = (prodHighNext - (sHighPrev - sPrime))\n                   + (prodHighCur  - sPrime);\n\n    final int lenMinusOne = len - 1;\n    for (int i = 1; i < lenMinusOne; i++) {\n        prodHighNext = prodHigh[i + 1];\n        final double sHighCur = sHighPrev + prodHighNext;\n        sPrime = sHighCur - prodHighNext;\n        sLowSum += (prodHighNext - (sHighCur - sPrime))\n                 + (sHighPrev   - sPrime);\n        sHighPrev = sHighCur;\n    }\n\n    double result = sHighPrev + (prodLowSum + sLowSum);\n\n    if (Double.isNaN(result)) {\n        // Fallback if there were infinities or NaNs\n        result = 0;\n        for (int i = 0; i < len; i++) {\n            result += a[i] * b[i];\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}