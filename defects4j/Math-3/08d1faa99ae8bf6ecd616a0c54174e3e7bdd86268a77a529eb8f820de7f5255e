{
    "generation": "    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws org.apache.commons.math3.exception.DimensionMismatchException {\n        final int len = a.length;\n        if (len != b.length) {\n            throw new org.apache.commons.math3.exception.DimensionMismatchException(len, b.length);\n        }\n\n        // Handle empty arrays case\n        if (len == 0) {\n            return 0.0;\n        }\n\n        // Multiplication phase (Accurate Fused Multiply-Add)\n        // Calculate high part of each product and sum of low parts accurately.\n        final double[] prodHigh = new double[len];\n        double prodLowSum = 0;\n\n        for (int i = 0; i < len; i++) {\n            final double ai = a[i];\n            // Split ai into high and low parts\n            final double ca = SPLIT_FACTOR * ai;\n            final double aHigh = ca - (ca - ai);\n            final double aLow = ai - aHigh;\n\n            final double bi = b[i];\n            // Split bi into high and low parts\n            final double cb = SPLIT_FACTOR * bi;\n            final double bHigh = cb - (cb - bi);\n            final double bLow = bi - bHigh;\n\n            // Accurate multiplication ai * bi using Dekker's algorithm\n            // prodHigh[i] gets the high part of the product ai * bi\n            prodHigh[i] = ai * bi;\n            // prodLow accumulates the low part of the product ai * bi\n            final double prodLow = aLow * bLow - (((prodHigh[i] -\n                                                    aHigh * bHigh) -\n                                                   aLow * bHigh) -\n                                                  aHigh * bLow);\n            // Accumulate the low parts of the products\n            prodLowSum += prodLow;\n        }\n\n        // Summation phase (Accurate Summation of prodHigh)\n        double result;\n        if (len == 1) {\n            // If only one element, the result is the high part of the product\n            // plus the accumulated low parts (which is just the low part of the single product).\n            result = prodHigh[0] + prodLowSum;\n        } else {\n            // Use TwoSum algorithm (pairwise summation) to sum elements of prodHigh accurately.\n            // sHighPrev holds the current high part of the sum.\n            // sLowSum holds the accumulated low parts generated during the summation steps.\n            double sHighPrev = prodHigh[0];\n            double sLowSum = 0.0; // Accumulator for low parts of TwoSum\n\n            // Start summation with the second element (index 1)\n            double prodHighCur = prodHigh[1];\n            // Calculate high part of sum(sHighPrev, prodHighCur)\n            double sHighCur = sHighPrev + prodHighCur;\n            // Calculate low part of sum(sHighPrev, prodHighCur) using TwoSum algorithm\n            double sPrime = sHighCur - prodHighCur;\n            sLowSum = (prodHighCur - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n            // Update the running high part sum\n            sHighPrev = sHighCur;\n\n            // Process remaining elements from the third one (index 2) up to len-1\n            for (int i = 2; i < len; i++) {\n                prodHighCur = prodHigh[i];\n                // Calculate high part of sum(sHighPrev, prodHighCur)\n                sHighCur = sHighPrev + prodHighCur;\n                // Calculate low part of sum(sHighPrev, prodHighCur) using TwoSum algorithm\n                sPrime = sHighCur - prodHighCur;\n                // Accumulate the low part generated in this summation step\n                sLowSum += (prodHighCur - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n                // Update the running high part sum\n                sHighPrev = sHighCur;\n            }\n\n            // Final result combines:\n            // - sHighPrev: High part of the sum of all prodHigh[i]\n            // - prodLowSum: Sum of low parts from the initial multiplications (a[i]*b[i])\n            // - sLowSum: Sum of low parts generated during the summation of prodHigh[i]\n            result = sHighPrev + (prodLowSum + sLowSum);\n        }\n\n        // Fallback for NaN results (e.g., due to Infinity or NaN inputs)\n        if (Double.isNaN(result)) {\n            // either we have split infinite numbers or some coefficients were NaNs,\n            // just rely on the naive implementation and let IEEE754 handle this\n            result = 0;\n            for (int i = 0; i < len; ++i) {\n                result += a[i] * b[i];\n            }\n        }\n\n        return result;\n    }\n\n    // NOTE: This code assumes SPLIT_FACTOR is defined elsewhere in the class, e.g.:\n    // private static final double SPLIT_FACTOR = 134217729.0d; // 2^27 + 1\n    // It also assumes DimensionMismatchException is available.",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}