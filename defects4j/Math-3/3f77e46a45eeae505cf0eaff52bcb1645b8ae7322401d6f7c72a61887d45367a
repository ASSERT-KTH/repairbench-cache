{
    "generation": "    /**\n     * Compute a linear combination accurately.\n     * This method computes the sum of the products\n     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n     * It does so by using specific multiplication and addition algorithms to\n     * preserve accuracy and reduce cancellation effects.\n     * <br/>\n     * It is based on the 2005 paper\n     * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n     *\n     * @param a Factors.\n     * @param b Factors.\n     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n     * @throws DimensionMismatchException if arrays dimensions don't match\n     */\n    public static double linearCombination(final double[] a, final double[] b)\n        throws DimensionMismatchException {\n        final int len = a.length;\n        if (len != b.length) {\n            throw new DimensionMismatchException(len, b.length);\n        }\n\n        // Handle special cases\n        if (len == 0) {\n            return 0.0;\n        }\n\n        // Step 1: Product computation using Dekker's method\n        // The following is an adaptation of the algorithm presented in the paper.\n        // We split each factor ai and bi into two parts, a High and a Low part,\n        // such that ai = aHigh + aLow and bi = bHigh + bLow.\n        // Then the product ai * bi is\u0437\u0435\u0439 = (aHigh + aLow) * (bHigh + bLow)\n        //                     = aHigh * bHigh + aHigh * bLow + aLow * bHigh + aLow * bLow\n        // We compute the high part (prodHigh) as ai * bi and the low part (prodLow)\n        // as the remaining terms.\n        final double[] prodHigh = new double[len];\n        double prodLowSum = 0;\n\n        // The splitting factor is 2^27 + 1 = 134217729.0. This is chosen because\n        // double-precision numbers have a 53-bit mantissa. Splitting at the 27th\n        // bit allows representing the high and low parts exactly as doubles.\n        final double SPLIT_FACTOR = (1L << 27) + 1.0;\n\n        for (int i = 0; i < len; i++) {\n            final double ai = a[i];\n            final double ca = SPLIT_FACTOR * ai;\n            final double aHigh = ca - (ca - ai); // High part of ai\n            final double aLow = ai - aHigh;      // Low part of ai\n\n            final double bi = b[i];\n            final double cb = SPLIT_FACTOR * bi;\n            final double bHigh = cb - (cb - bi); // High part of bi\n            final double bLow = bi - bHigh;      // Low part of bi\n\n            // Compute the high part of the product\n            prodHigh[i] = ai * bi;\n\n            // Compute the low part of the product using Dekker's algorithm\n            // prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)\n            // This captures the error term of the standard multiplication ai * bi\n            final double prodLow = aLow * bLow - (((prodHigh[i] -\n                                                    aHigh * bHigh) -\n                                                   aLow * bHigh) -\n                                                  aHigh * bLow);\n            // Accumulate the low parts\n            prodLowSum += prodLow;\n        }\n\n\n        // Handle the case of a single element array after calculating\n        // the high-accuracy product.\n        if (len == 1) {\n            double result = prodHigh[0] + prodLowSum;\n            // Check for NaN result, which can happen if input contains NaNs\n            // or infinities were split. Fall back to simple multiplication.\n            if (Double.isNaN(result)) {\n                 result = a[0] * b[0];\n            }\n            return result;\n        }\n\n        // Step 2: Summation of high parts using TwoSum algorithm\n        // We use the TwoSum algorithm to sum the high parts (prodHigh) accurately.\n        // The TwoSum algorithm computes s = x + y and t = error(x + y) such that s + t = x + y exactly.\n        double prodHighCur = prodHigh[0];\n        double prodHighNext = prodHigh[1];\n        double sHighPrev = prodHighCur + prodHighNext; // s = prodHigh[0] + prodHigh[1]\n        double sPrime = sHighPrev - prodHighNext;      // Helper variable for TwoSum\n        // Calculate the initial low part (error) of the sum\n        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\n\n        final int lenMinusOne = len - 1;\n        for (int i = 1; i < lenMinusOne; i++) {\n            prodHighNext = prodHigh[i + 1];\n            // Add the next high part to the current sum\n            final double sHighCur = sHighPrev + prodHighNext; // s = sHighPrev + prodHighNext\n            sPrime = sHighCur - prodHighNext;                // Helper variable for TwoSum\n            // Accumulate the low parts (errors) of the sum\n            // t = (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime)\n            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n            sHighPrev = sHighCur; // Update the high part of the sum\n        }\n\n        // Step 3: Final combination\n        // The final result is the sum of the high parts' sum (sHighPrev),\n        // the low parts' sum (sLowSum from TwoSum), and the low parts of the products (prodLowSum).\n        // Add the low parts first to minimize error.\n        double result = sHighPrev + (prodLowSum + sLowSum);\n\n        // Final check for NaN result. This can happen if inputs are NaN,\n        // or if infinities were involved in the splitting process.\n        if (Double.isNaN(result)) {\n            // Resort to naive summation implementation, letting IEEE754 handle anomalies.\n            result = 0;\n            for (int i = 0; i < len; ++i) {\n                result += a[i] * b[i];\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}