{
    "generation": "public static double linearCombination(final double[] a, final double[] b)\n    throws DimensionMismatchException {\n\n    final int len = a.length;\n    if (len != b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n\n    // Handle trivial cases (empty or single-element arrays)\n    if (len < 2) {\n        double sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += a[i] * b[i];\n        }\n        return sum;\n    }\n\n    // Accurate dot\u2010product for length >= 2\n    final double[] prodHigh = new double[len];\n    double prodLowSum = 0;\n\n    for (int i = 0; i < len; i++) {\n        final double ai = a[i];\n        final double ca = SPLIT_FACTOR * ai;\n        final double aHigh = ca - (ca - ai);\n        final double aLow = ai - aHigh;\n\n        final double bi = b[i];\n        final double cb = SPLIT_FACTOR * bi;\n        final double bHigh = cb - (cb - bi);\n        final double bLow = bi - bHigh;\n\n        prodHigh[i] = ai * bi;\n        final double prodLow = aLow * bLow\n            - (((prodHigh[i] - aHigh * bHigh)\n                - aLow * bHigh)\n               - aHigh * bLow);\n        prodLowSum += prodLow;\n    }\n\n    // Sum the high parts with compensated summation\n    double prodHighPrev = prodHigh[0];\n    double prodHighNext = prodHigh[1];\n    double sHigh = prodHighPrev + prodHighNext;\n    double sPrime = sHigh - prodHighNext;\n    double sLowSum = (prodHighNext - (sHigh - sPrime))\n                  + (prodHighPrev - sPrime);\n\n    final int lenMinusOne = len - 1;\n    for (int i = 1; i < lenMinusOne; i++) {\n        prodHighNext = prodHigh[i + 1];\n        final double sHighNew = sHigh + prodHighNext;\n        sPrime = sHighNew - prodHighNext;\n        sLowSum += (prodHighNext - (sHighNew - sPrime))\n                 + (sHigh - sPrime);\n        sHigh = sHighNew;\n    }\n\n    double result = sHigh + (prodLowSum + sLowSum);\n\n    if (Double.isNaN(result)) {\n        // Fallback on naive dot-product if something went wrong\n        result = 0;\n        for (int i = 0; i < len; i++) {\n            result += a[i] * b[i];\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}