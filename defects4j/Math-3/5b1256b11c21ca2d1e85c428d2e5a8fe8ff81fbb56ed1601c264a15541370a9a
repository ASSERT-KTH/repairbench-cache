{
    "generation": "/**\n * Compute a linear combination accurately.\n * This method computes the sum of the products\n * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.\n * It does so by using specific multiplication and addition algorithms to\n * preserve accuracy and reduce cancellation effects.\n * <br/>\n * It is based on the 2005 paper\n * <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\">\n * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,\n * and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n *\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n * @throws DimensionMismatchException if arrays dimensions don't match\n */\npublic static double linearCombination(final double[] a, final double[] b)\n    throws DimensionMismatchException {\n\n    final int len = a.length;\n    if (len != b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n    // For 0- or 1-length arrays, just do the simple dot product.\n    if (len < 2) {\n        double result = 0;\n        for (int i = 0; i < len; i++) {\n            result += a[i] * b[i];\n        }\n        return result;\n    }\n\n    // Split each product into a high and low part to reduce cancellation.\n    final double[] prodHigh = new double[len];\n    double prodLowSum = 0;\n    for (int i = 0; i < len; i++) {\n        final double ai = a[i];\n        final double ca = SPLIT_FACTOR * ai;\n        final double aHigh = ca - (ca - ai);\n        final double aLow  = ai - aHigh;\n        final double bi = b[i];\n        final double cb = SPLIT_FACTOR * bi;\n        final double bHigh = cb - (cb - bi);\n        final double bLow  = bi - bHigh;\n        prodHigh[i] = ai * bi;\n        final double prodLow =\n            aLow * bLow\n            - (((prodHigh[i] - aHigh * bHigh)\n                - aLow   * bHigh)\n               - aHigh  * bLow);\n        prodLowSum += prodLow;\n    }\n\n    // Accurately sum the high parts using a pairwise compensated sum.\n    double sHighPrev    = prodHigh[0] + prodHigh[1];\n    double sPrime       = sHighPrev - prodHigh[1];\n    double sLowSum      = (prodHigh[1] - (sHighPrev - sPrime))\n                        + (prodHigh[0] - sPrime);\n    final int lenMinusOne = len - 1;\n    for (int i = 1; i < lenMinusOne; i++) {\n        final double next = prodHigh[i + 1];\n        final double sHighCur = sHighPrev + next;\n        sPrime      = sHighCur - next;\n        sLowSum    += (next - (sHighCur - sPrime))\n                     + (sHighPrev - sPrime);\n        sHighPrev   = sHighCur;\n    }\n\n    double result = sHighPrev + (prodLowSum + sLowSum);\n    if (Double.isNaN(result)) {\n        // Fallback to naive dot product if we encounter NaNs or Infs.\n        result = 0;\n        for (int i = 0; i < len; i++) {\n            result += a[i] * b[i];\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}