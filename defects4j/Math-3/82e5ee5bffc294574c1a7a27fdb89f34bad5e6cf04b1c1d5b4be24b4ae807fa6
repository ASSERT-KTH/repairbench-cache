{
    "generation": "public static double linearCombination(final double[] a, final double[] b)\n    throws DimensionMismatchException {\n    final int len = a.length;\n    if (len != b.length) {\n        throw new DimensionMismatchException(len, b.length);\n    }\n\n    // Handle the case of zero-length arrays (if needed)\n    if (len == 0) {\n        return 0.0;\n    }\n\n    final double[] prodHigh = new double[len];\n    double prodLowSum = 0;\n\n    for (int i = 0; i < len; i++) {\n        final double ai = a[i];\n        final double ca = SPLIT_FACTOR * ai;\n        final double aHigh = ca - (ca - ai);\n        final double aLow = ai - aHigh;\n\n        final double bi = b[i];\n        final double cb = SPLIT_FACTOR * bi;\n        final double bHigh = cb - (cb - bi);\n        final double bLow = bi - bHigh;\n        prodHigh[i] = ai * bi;\n        final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n        prodLowSum += prodLow;\n    }\n\n    // For a single element array, no further summation is needed.\n    if (len == 1) {\n        return prodHigh[0] + prodLowSum;\n    }\n\n    // Accumulate the high order parts with Kahan's summation-like algorithm\n    double sHighPrev = prodHigh[0] + prodHigh[1];\n    double sPrime = sHighPrev - prodHigh[1];\n    double sLowSum = (prodHigh[1] - (sHighPrev - sPrime)) + (prodHigh[0] - sPrime);\n\n    for (int i = 1; i < len - 1; i++) {\n        final double next = prodHigh[i + 1];\n        final double sHighCur = sHighPrev + next;\n        sPrime = sHighCur - next;\n        sLowSum += (next - (sHighCur - sPrime)) + (sHighPrev - sPrime);\n        sHighPrev = sHighCur;\n    }\n\n    double result = sHighPrev + (prodLowSum + sLowSum);\n\n    if (Double.isNaN(result)) {\n        // Either we have split infinite numbers or some coefficients were NaNs,\n        // so just rely on the naive implementation and let IEEE754 handle this.\n        result = 0;\n        for (int i = 0; i < len; ++i) {\n            result += a[i] * b[i];\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}