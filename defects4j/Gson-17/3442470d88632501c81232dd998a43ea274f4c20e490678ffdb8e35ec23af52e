{
    "generation": "  @Override\n  public Date read(JsonReader in) throws IOException {\n    if (in.peek() == JsonToken.NULL) {\n      in.nextNull();\n      return null;\n    }\n    // The original code threw a JsonParseException if the token was not a STRING.\n    // This was problematic for two reasons:\n    // 1. It didn't handle JsonToken.NULL, which should deserialize to null.\n    // 2. For other unexpected tokens (like BEGIN_OBJECT in testUnexpectedToken),\n    //    the test expects an IllegalStateException, which JsonReader.nextString()\n    //    would naturally throw if the token is not a string. By preemptively\n    //    throwing JsonParseException, we bypassed this expected behavior.\n    Date date = deserializeToDate(in.nextString());\n    if (dateType == Date.class) {\n      return date;\n    } else if (dateType == Timestamp.class) {\n      return new Timestamp(date.getTime());\n    } else if (dateType == java.sql.Date.class) {\n      return new java.sql.Date(date.getTime());\n    } else {\n      // This must never happen: dateType is guarded in the primary constructor\n      throw new AssertionError();\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}