{
    "generation": "  @Override\n  public Date read(JsonReader in) throws IOException {\n    JsonToken peek = in.peek();\n    if (peek == JsonToken.NULL) {\n      in.nextNull();\n      return null;\n    }\n    if (peek != JsonToken.STRING) {\n      // The test expects IllegalStateException for unexpected tokens.\n      // Gson's standard adapters often throw IllegalStateException or JsonSyntaxException.\n      // Let's use IllegalStateException to match the test expectation.\n      // Include the actual token type and path in the message for better debugging.\n      throw new IllegalStateException(\"Expected STRING but was \" + peek + \" at path \" + in.getPath());\n    }\n    Date date = deserializeToDate(in.nextString());\n    if (dateType == Date.class) {\n      return date;\n    } else if (dateType == Timestamp.class) {\n      return new Timestamp(date.getTime());\n    } else if (dateType == java.sql.Date.class) {\n      return new java.sql.Date(date.getTime());\n    } else {\n      // This must never happen: dateType is guarded in the primary constructor\n      throw new AssertionError();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}