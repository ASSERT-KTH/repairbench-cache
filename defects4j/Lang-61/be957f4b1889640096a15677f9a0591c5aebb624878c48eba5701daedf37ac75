{
    "generation": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        // If the string to find is longer than the content, it cannot be found.\n        if (strLen > size) {\n            return -1;\n        }\n        \n        char[] thisBuf = buffer;\n        \n        // Calculate the maximum possible starting index for a match.\n        // A match starting at 'i' with length 'strLen' must end at 'i + strLen - 1'.\n        // This last character must be within the valid content indices, i.e., 'i + strLen - 1 < size'.\n        // This implies 'i + strLen <= size', or 'i <= size - strLen'.\n        // So, the loop for 'i' should go up to 'size - strLen', inclusive.\n        int lastPossibleStart = size - strLen;\n        \n        outer:\n        for (int i = startIndex; i <= lastPossibleStart; i++) {\n            for (int j = 0; j < strLen; j++) {\n                // The index 'i + j' will not exceed 'lastPossibleStart + strLen - 1',\n                // which is '(size - strLen) + strLen - 1 = size - 1'.\n                // This ensures array access is always within the valid 'size' bounds.\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}