{
    "generation": "/**\n * Searches the string builder to find the first reference to the specified\n * string starting searching from the given index.\n * <p>\n * Note that a null input string will return -1, whereas the JDK throws an exception.\n * \n * @param str  the string to find, null returns -1\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the first index of the string, or -1 if not found\n */\npublic int indexOf(String str, int startIndex) {\n    // clamp negative startIndex to zero\n    startIndex = (startIndex < 0 ? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    // single char search\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    // empty string\n    if (strLen == 0) {\n        return startIndex;\n    }\n    // too long to match\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n    // last possible start index is size - strLen\n    int max = size - strLen;\n    outer:\n    for (int i = startIndex; i <= max; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j] != str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}