{
    "generation": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        // Check if the search string is longer than the current content\n        // or if the startIndex already puts it past the possible start position\n        if (strLen > size || startIndex > size - strLen) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        // The maximum index to start the comparison is size - strLen\n        int loopEnd = size - strLen; \n        outer:\n        for (int i = startIndex; i <= loopEnd; i++) {\n            for (int j = 0; j < strLen; j++) {\n                // Check bounds isn't strictly necessary here due to loopEnd calculation,\n                // but defensively ensures we don't read past 'size' if logic changed elsewhere.\n                // However, the primary fix is the loopEnd calculation.\n                // The original code's i < (thisBuf.length - strLen) was the main issue.\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}