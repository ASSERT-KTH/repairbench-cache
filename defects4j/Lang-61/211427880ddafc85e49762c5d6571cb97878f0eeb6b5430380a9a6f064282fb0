{
    "generation": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        // If the search string is longer than the current content size, it cannot be found.\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        \n        // The original code calculated 'len' based on 'thisBuf.length' (buffer capacity),\n        // instead of 'size' (actual content length). This could lead to\n        // ArrayIndexOutOfBoundsException when 'i + j' accesses beyond 'size'.\n        // The loop limit should be based on the actual content size, 'size'.\n        // The last possible starting index for a match is 'size - strLen'.\n        // Any starting index 'i' beyond this would mean the string 'str' extends\n        // beyond the valid content of the StrBuilder.\n        int lastPossibleStart = size - strLen;\n        \n        outer:\n        // The loop should iterate from startIndex up to and including lastPossibleStart.\n        // If startIndex is already beyond lastPossibleStart, the loop won't execute,\n        // which is correct as no match can be found.\n        for (int i = startIndex; i <= lastPossibleStart; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}