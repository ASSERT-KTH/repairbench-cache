{
    "generation": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        // The original calculation for 'len' (thisBuf.length - strLen) was based on the\n        // physical capacity of the buffer, not the logical size of the StrBuilder's content.\n        // This could lead to searching beyond the actual end of the string, accessing\n        // stale or invalid characters in the buffer, which might cause an\n        // ArrayIndexOutOfBoundsException or incorrect results, especially after operations\n        // like 'deleteFirst' that change the 'size' without necessarily resizing 'buffer'.\n        // The loop should iterate only up to the last possible starting index for a match.\n        // If a match starts at index 'i', it occupies indices from 'i' to 'i + strLen - 1'.\n        // For 'i + strLen - 1' to be within bounds of the StrBuilder's content,\n        // 'i + strLen - 1' must be less than 'size', or 'i + strLen' must be less than or equal to 'size'.\n        // This implies 'i' must be less than or equal to 'size - strLen'.\n        // So, the exclusive upper bound for 'i' in the loop is 'size - strLen + 1'.\n        int len = size - strLen + 1;\n        outer:\n        for (int i = startIndex; i < len; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}