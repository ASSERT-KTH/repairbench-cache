{
    "generation": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        // Ensure startIndex is valid\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n\n        // Check for edge cases: null string, startIndex out of bounds\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        \n        int strLen = str.length();\n\n        // Empty string is found at the start index\n        if (strLen == 0) {\n            // The condition startIndex >= size is already checked above.\n            // If size is 0, startIndex must also be 0 here.\n            return startIndex;\n        }\n\n        // Use faster search for single character\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n\n        // Cannot find a string longer than the current size\n        if (strLen > size) {\n            return -1;\n        }\n\n        // Check for search string within the available characters\n        // The loop needs to go up to size - strLen to avoid accessing indices beyond 'size'\n        char[] thisBuf = buffer;\n        int loopEnd = size - strLen; // Calculate the correct upper bound for the loop\n\n        // If startIndex is already past the point where the string could possibly fit\n        if (startIndex > loopEnd) {\n             return -1;\n        }\n\n        outer:\n        // Iterate through possible start positions in the buffer\n        // The loop index 'i' should go up to and including 'loopEnd'\n        for (int i = startIndex; i <= loopEnd; i++) {\n            // Check if the substring starting at 'i' matches 'str'\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    // Mismatch found, continue to the next possible start position\n                    continue outer;\n                }\n            }\n            // Full match found\n            return i;\n        }\n        \n        // String not found\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}