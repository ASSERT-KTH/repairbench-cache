{
    "generation": "    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        \n        if (str == null) { // Handle null string explicitly as per Javadoc\n            return -1;\n        }\n\n        int strLen = str.length();\n\n        if (strLen == 1) { // Optimization for single character search\n            return indexOf(str.charAt(0), startIndex);\n        }\n        \n        if (strLen == 0) { // Empty string is always found at startIndex, consistent with JDK String.indexOf\n            return startIndex;\n        }\n\n        // If startIndex is at or beyond the current content size, a non-empty string cannot be found.\n        if (startIndex >= size) {\n            return -1;\n        }\n        \n        // If the string to find is longer than the actual content, it cannot be found.\n        if (strLen > size) {\n            return -1;\n        }\n\n        char[] thisBuf = buffer;\n        \n        // The maximum possible starting index for a match is 'size - strLen'.\n        // If the string starts at this index, its last character will be at (size - strLen) + (strLen - 1) = size - 1,\n        // which is the last valid index within the content.\n        int searchLimit = size - strLen;\n\n        outer:\n        for (int i = startIndex; i <= searchLimit; i++) { // Loop up to searchLimit (inclusive)\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer; // Mismatch, try next starting position\n                }\n            }\n            return i; // All characters matched, return current starting index\n        }\n        return -1; // No match found\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}