{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // If the indent is greater than or equal to the total width,\n    // chunk every non\u2010whitespace character on its own line.\n    if (nextLineTabStop >= width) {\n        String trimmed = text.trim();\n        // pad up to width-1 so that each line is exactly width chars wide\n        String padding = createPadding(width - 1);\n        for (int i = 0; i < trimmed.length(); i++) {\n            char c = trimmed.charAt(i);\n            if (!Character.isWhitespace(c)) {\n                sb.append(padding).append(c).append(defaultNewLine);\n            }\n        }\n        return sb;\n    }\n\n    int pos = findWrapPos(text, width, 0);\n\n    // no wrap required\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // first line\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // normal indent for subsequent lines\n    final String padding = createPadding(nextLineTabStop);\n\n    // wrap remaining text\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n        // handle the case where a single word is longer than the width\n        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}