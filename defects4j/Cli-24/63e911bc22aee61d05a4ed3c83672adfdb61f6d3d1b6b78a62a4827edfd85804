{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb,\n                                         int width,\n                                         int nextLineTabStop,\n                                         String text)\n{\n    // If the indent is as large as (or larger than) the available width,\n    // we have no room to put any text on the same line, so\n    // fall back to one\u2010char\u2010per\u2010line chunking, using width-1 spaces.\n    if (nextLineTabStop >= width) {\n        int effectiveIndent = (width > 1 ? width - 1 : 0);\n        String padding = createPadding(effectiveIndent);\n        for (int i = 0; i < text.length(); i++) {\n            sb.append(padding)\n              .append(text.charAt(i))\n              .append(defaultNewLine);\n        }\n        return sb;\n    }\n\n    // Normal wrapping logic\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos)))\n      .append(defaultNewLine);\n\n    final String padding = createPadding(nextLineTabStop);\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n\n        // Avoid infinite loop when the wrap position is exactly\n        // at the end of the padding\n        if (text.length() > width && pos == nextLineTabStop - 1) {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos)))\n          .append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}