{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Calculate the effective width available for the text content on subsequent lines.\n        // This accounts for the `nextLineTabStop` (indent).\n        final int effectiveWidth = width - nextLineTabStop;\n\n        // If the effective width is zero or negative, it means there's no space\n        // for the actual description text after considering the indent.\n        // This is an unrenderable state, thus an IllegalStateException is thrown.\n        if (effectiveWidth <= 0)\n        {\n            throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n                                            \"- no room for the description\");\n        }\n\n        // All following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            // Prepend the padding to the remaining text for subsequent lines.\n            text = padding + text.substring(pos).trim();\n            \n            // Find the wrap position for the new text.\n            // The `findWrapPos` method should operate on the 'effectiveWidth'\n            // because the `text` parameter now includes the padding.\n            pos = findWrapPos(text, effectiveWidth, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            // This is an existing safeguard to prevent cases where findWrapPos\n            // might suggest a wrap point inside the padding (e.g., pos == nextLineTabStop - 1)\n            // when the overall text length (including padding) is still greater than\n            // the total line width. In such cases, it forces the line to fill up\n            // to the total width.\n            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}