{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // stops infinite loop happening\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n                                        \"- no room for the description\");\n    }\n\n    // all following lines must be padded with nextLineTabStop space\n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        // Calculate available width for content after accounting for padding\n        int availableWidth = width - nextLineTabStop;\n        pos = findWrapPos(text, width, nextLineTabStop) + nextLineTabStop;\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // If we're about to split at a position that's just the padding, force a split at width\n        if ( (text.length() > width) && (pos == nextLineTabStop) )  // Changed from pos == nextLineTabStop - 1\n        {\n            pos = width + nextLineTabStop;  // This might need adjustment\n        }\n        else if (pos <= nextLineTabStop) {\n            // Make sure we don't get stuck in an infinite loop\n            pos = width + nextLineTabStop;  // This will effectively take the first width characters after padding\n        }\n\n        // Ensure pos is within bounds\n        if (pos > text.length()) {\n            pos = text.length();\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}