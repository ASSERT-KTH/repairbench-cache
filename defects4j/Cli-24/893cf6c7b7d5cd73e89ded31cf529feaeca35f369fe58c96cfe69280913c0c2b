{
    "generation": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // instead of throwing exception, we'll adjust the padding if it's too large\n            nextLineTabStop = width - 1;\n            if (nextLineTabStop < 0)\n            {\n                nextLineTabStop = 0;\n            }\n        }\n\n        // all following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            String remainingText = text.substring(pos).trim();\n            text = padding + remainingText;\n\n            if (text.length() <= width)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n            pos = findWrapPos(text, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n            if ( (text.length() > width) && (pos == nextLineTabStop) )\n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = padding + remainingText.substring(Math.min(pos - nextLineTabStop, remainingText.length()));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}