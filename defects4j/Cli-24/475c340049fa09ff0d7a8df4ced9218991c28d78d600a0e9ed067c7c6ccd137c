{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\n@Override\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop,\n                                         String text)\n{\n    // Special case: no room to render even one character at the normal indent.\n    // Fall back to breaking the text into single characters,\n    // indented to (width - 1) so each line is exactly 'width' long.\n    if (nextLineTabStop >= width)\n    {\n        final String padding = createPadding(width - 1);\n        text = rtrim(text);\n        for (int i = 0; i < text.length(); i++)\n        {\n            char c = text.charAt(i);\n            if (!Character.isWhitespace(c))\n            {\n                sb.append(padding)\n                  .append(c)\n                  .append(defaultNewLine);\n            }\n        }\n        return sb;\n    }\n\n    int pos = findWrapPos(text, width, 0);\n\n    // if the text fits on one line, just append it\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // otherwise render the first chunk and wrap the rest\n    sb.append(rtrim(text.substring(0, pos)))\n      .append(defaultNewLine);\n\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // if a single \"word\" is longer than the line, force a chop\n        if ((text.length() > width) && (pos == nextLineTabStop - 1))\n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos)))\n          .append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}