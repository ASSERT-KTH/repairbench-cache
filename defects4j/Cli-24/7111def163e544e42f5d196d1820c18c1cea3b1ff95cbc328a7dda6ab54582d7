{
    "generation": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // CLI-162: Ensure there's always at least one character space available for the description\n        // after accounting for the nextLineTabStop indent.\n        // If the calculated width is less than or equal to the nextLineTabStop,\n        // it means there's no room for the description text itself.\n        // To allow at least one character to be printed per line after indent,\n        // we force the effective width to be nextLineTabStop + 1.\n        if (width <= nextLineTabStop)\n        {\n            width = nextLineTabStop + 1;\n        }\n\n        // All lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n\n        int pos = findWrapPos(text, width, 0);\n\n        // If the text fits on one line (after potential trimming), append it with padding\n        if (pos == -1)\n        {\n            sb.append(padding).append(rtrim(text));\n            return sb;\n        }\n\n        // If the text needs wrapping, append the first segment with padding and a new line\n        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // This check should now be unreachable due to the width adjustment above.\n        // It's kept here for robustness as it was in the original code,\n        // preventing infinite loops in unexpected scenarios.\n        if (nextLineTabStop >= width)\n        {\n            // This indicates a logical error if reached, as width should be at least nextLineTabStop + 1\n            throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n                                            \"- no room for the description (internal error, width should have been adjusted)\");\n        }\n\n        while (true)\n        {\n            // For subsequent lines, the text itself starts with the padding\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text); // 'text' already contains padding\n                return sb;\n            }\n            \n            // The following conditional was part of the original buggy code but was removed\n            // in the official fix for CLI-162 in Commons CLI 1.4. Removing it simplifies\n            // the logic and allows `findWrapPos` to handle wrapping correctly.\n            // if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            // {\n            //     pos = width;\n            // }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}