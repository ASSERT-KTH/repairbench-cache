{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // Remove this check to allow for splitting long words with possible zero padding\n    // if (nextLineTabStop >= width)\n    // {\n    //     // stops infinite loop happening\n    //     throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n    //                                     \"- no room for the description\");\n    // }\n\n    // all following lines must be padded with nextLineTabStop space\n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        // If the padding itself is longer than width, fall back to width\n        int effectiveWidth = Math.max(width, padding.length() + 1);\n        pos = findWrapPos(text, width, 0);\n\n        // Special handling for long words that must be split character by character\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // If the found wrap position is at or before the indent, and the line is too long,\n        // forcibly wrap at width to split a long word.\n        if ((text.length() > width) && (pos <= nextLineTabStop))\n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}