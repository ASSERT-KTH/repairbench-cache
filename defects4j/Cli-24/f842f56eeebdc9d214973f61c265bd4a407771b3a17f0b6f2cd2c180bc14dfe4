{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    // Special\u2010case: if there is no room to render any text on the first line\n    // (nextLineTabStop >= width), then emit one non\u2010whitespace character per\n    // line, indented to column (width-1).\n    if (nextLineTabStop >= width) {\n        String trimmed = text.trim();\n        // indent so that each line is exactly 'width' characters long\n        final String padding = createPadding(width - 1);\n        for (int i = 0; i < trimmed.length(); i++) {\n            char c = trimmed.charAt(i);\n            if (Character.isWhitespace(c)) {\n                // skip spaces/tabs\n                continue;\n            }\n            // start a new line, then indent+char; the final newline\n            // will be added by the caller (printHelp \u2192 println)\n            sb.append(defaultNewLine).append(padding).append(c);\n        }\n        return sb;\n    }\n\n    // Normal wrapping logic when there is room on the first line\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // subsequent lines are padded to nextLineTabStop\n    final String padding = createPadding(nextLineTabStop);\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n        // guard against infinite loop when a single word is longer than the width\n        if (text.length() > width && pos == nextLineTabStop - 1) {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}