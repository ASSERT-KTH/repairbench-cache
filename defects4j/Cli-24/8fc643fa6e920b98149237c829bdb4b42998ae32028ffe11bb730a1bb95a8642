{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    // Special case: no room to join description on same line \u2192 emit one char per line\n    if (nextLineTabStop >= width) {\n        // remove any trailing spaces (from the option padding)\n        while (sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ') {\n            sb.setLength(sb.length() - 1);\n        }\n        // compute a safe indent (so padding + 1 char \u2264 width)\n        final int indent = width > 1 ? width - 1 : 0;\n        final String padding = createPadding(indent);\n        // trim outer whitespace, but skip internal spaces when breaking\n        String s = text.trim();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isWhitespace(c)) {\n                continue;\n            }\n            sb.append(defaultNewLine)\n              .append(padding)\n              .append(c);\n        }\n        return sb;\n    }\n\n    // Normal word-wrapping when indent < width\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    // first line\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    final String padding = createPadding(nextLineTabStop);\n    String remainder = text.substring(pos);\n\n    // subsequent lines\n    while (true) {\n        String line = padding + remainder.trim();\n        pos = findWrapPos(line, width, 0);\n        if (pos == -1) {\n            sb.append(line);\n            return sb;\n        }\n        // if the only break is right after the padding, force a full-width break\n        if ((line.length() > width) && (pos == nextLineTabStop - 1)) {\n            pos = width;\n        }\n        sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n        remainder = line.substring(pos);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}