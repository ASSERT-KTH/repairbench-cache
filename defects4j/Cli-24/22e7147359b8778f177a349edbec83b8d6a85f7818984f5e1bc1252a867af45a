{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        // If no reasonable break was found and the text is wider than the available\n        // width, force a break at column \"width\".\n        if (text.length() > width) {\n            pos = width;\n        } else {\n            sb.append(rtrim(text));\n            return sb;\n        }\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // Instead of throwing an exception when the computed indent is \n    // greater than (or equal to) the total width, simply ignore the requested indent.\n    if (nextLineTabStop >= width)\n    {\n        nextLineTabStop = width - 1;\n    }\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        // Remove the part that has been output and add the indent for the next line.\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            // If no wrap position was found but there is still text,\n            // if the text is too long, force a break at width.\n            if (text.length() > width) {\n                pos = width;\n            } else {\n                sb.append(text);\n                return sb;\n            }\n        }\n        \n        // When the break occurs too early (i.e. before the indent region),\n        // force a break at the maximum available width.\n        if ((text.length() > width) && (pos < nextLineTabStop))\n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}