{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // Remove the early failure check: because when width < indent, we still may need to chunk text letter by letter\n    //if (nextLineTabStop >= width)\n    //{\n    //    throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n    //                                    \"- no room for the description\");\n    //}\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n\n        // choose max width for search on this line - if indent >= width, after indent the remaining width can be 0 or negative\n        // so for chunking we must allow wrapping at least after the indent, even if it means just 1 char per line\n        int searchWidth = Math.max(width, nextLineTabStop + 1);\n\n        pos = findWrapPos(text, searchWidth, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        }\n\n        // if very long word forces wrapping, do not wrap at indent edge\n        if ((text.length() > searchWidth) && (pos == nextLineTabStop - 1))\n        {\n            pos = searchWidth;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}