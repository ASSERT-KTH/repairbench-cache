{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        // First handle the case where all text fits in one line without wrapping\n        if (text.length() <= width) {\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // If padding would leave no room for content, we'll start at position 0\n            nextLineTabStop = 0;\n        }\n\n        // All following lines must be padded with nextLineTabStop space\n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            String remainingText = text.substring(pos).trim();\n            String paddedText = padding + remainingText;\n\n            if (paddedText.length() <= width) {\n                sb.append(paddedText);\n                return sb;\n            }\n\n            pos = findWrapPos(paddedText, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(paddedText);\n                return sb;\n            }\n\n            // If we're in a situation where padding takes most of the space\n            // and we're not making progress, just allow more text to be included\n            if (paddedText.length() > width && pos <= padding.length())\n            {\n                pos = Math.min(width, paddedText.length());\n            }\n\n            sb.append(rtrim(paddedText.substring(0, pos))).append(defaultNewLine);\n            text = remainingText; // Continue with the remaining text (without padding yet)\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}