{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // This check prevents an infinite loop if the padding for subsequent lines\n        // consumes all available width, leaving no room for content.\n        if (nextLineTabStop >= width)\n        {\n            throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n                                            \"- no room for the description\");\n        }\n\n        // First line: text is unpadded, width is the total line width.\n        // findWrapPos will try to fit as much as possible up to 'width'.\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) // Entire text fits on the first line\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        // Append the first line, trimmed, followed by a newline\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Prepare padding for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n        // Calculate the effective width for content on subsequent lines.\n        // This is the total line width minus the padding.\n        final int effectiveWidth = width - nextLineTabStop;\n\n        // The unrendered portion of the text after the first line.\n        String currentTextToRender = text.substring(pos).trim();\n\n        while (true)\n        {\n            // If no more text, we're done\n            if (currentTextToRender.isEmpty())\n            {\n                break; \n            }\n\n            // Find wrap position within the current segment of text, using the effective content width.\n            // currentTextToRender is already trimmed and does not contain padding.\n            pos = findWrapPos(currentTextToRender, effectiveWidth, 0);\n\n            if (pos == -1) // Current segment fits on one line (after padding)\n            {\n                // Prepend padding, then append the remaining text.\n                sb.append(padding).append(currentTextToRender);\n                return sb;\n            }\n            \n            // Append the padded line, trimmed, followed by a newline.\n            // rtrim is applied to the content portion only, so it won't affect the padding.\n            sb.append(padding).append(rtrim(currentTextToRender.substring(0, pos))).append(defaultNewLine);\n            \n            // Update the text to be rendered for the next iteration\n            currentTextToRender = currentTextToRender.substring(pos).trim();\n        }\n        return sb; \n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}