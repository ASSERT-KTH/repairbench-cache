{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // First line: find wrap position within the original text and width.\n        // The padding for the first line is handled by the calling method (e.g., renderDescription).\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        \n        // Append the first line content\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // For all subsequent lines, apply padding and re-wrap.\n        // The effective width for the actual text content on subsequent lines\n        // is 'width - nextLineTabStop'.\n        // If this value is 0 or negative, we must allow at least one character\n        // per line to prevent infinite loops or empty lines when characters\n        // are expected (as per CLI-162 test case).\n        final String padding = createPadding(nextLineTabStop);\n        \n        // The actual width available for text content after the indent on subsequent lines\n        // Ensure at least 1 character can be printed, even if width - nextLineTabStop is 0 or less.\n        int effectiveContentWidth = Math.max(1, width - nextLineTabStop);\n\n        // The remaining text to be processed, starting from 'pos' of the original text.\n        // Trim here to handle potential leading whitespace from the previous substring.\n        String remainingText = text.substring(pos).trim();\n\n        while (true)\n        {\n            if (remainingText.isEmpty()) {\n                // All text has been rendered\n                break; \n            }\n\n            // Find wrap position in the 'remainingText' using the 'effectiveContentWidth'\n            pos = findWrapPos(remainingText, effectiveContentWidth, 0);\n\n            if (pos == -1)\n            {\n                // All remaining text fits on one line after padding.\n                sb.append(padding).append(remainingText);\n                break; // Exit the loop\n            }\n            \n            // Append padding + the wrapped part of the remaining text\n            sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);\n            \n            // Update remainingText for the next iteration, trimming again\n            remainingText = remainingText.substring(pos).trim();\n        }\n        return sb;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}