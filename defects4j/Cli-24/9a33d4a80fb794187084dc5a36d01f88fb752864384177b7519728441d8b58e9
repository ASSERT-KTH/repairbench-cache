{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    // find first wrap position\n    int pos = findWrapPos(text, width, 0);\n\n    // if no wrap needed, just append and return\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // special case: indent is at or beyond the available width\n    // so we cannot place any description text on the first line\n    if (nextLineTabStop >= width)\n    {\n        // break at the first whitespace (or at width if none)\n        int firstSpace = text.indexOf(' ');\n        int split = (firstSpace != -1 ? firstSpace : width);\n\n        // first line: just up to the split (the option syntax)\n        sb.append(rtrim(text.substring(0, split)))\n          .append(defaultNewLine);\n\n        // then chunk every remaining character (skipping whitespace)\n        String padding = createPadding(nextLineTabStop);\n        String remainder = text.substring(split).trim();\n        for (int i = 0; i < remainder.length(); i++)\n        {\n            char c = remainder.charAt(i);\n            if (Character.isWhitespace(c))\n            {\n                continue;\n            }\n            sb.append(padding)\n              .append(c)\n              .append(defaultNewLine);\n        }\n        return sb;\n    }\n\n    // normal case: we have room for at least some text on the first line\n    sb.append(rtrim(text.substring(0, pos)))\n      .append(defaultNewLine);\n\n    // prepare padding for subsequent lines\n    final String padding = createPadding(nextLineTabStop);\n\n    // wrap the rest\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // guard against infinite loop when the only break is in the padding\n        if ((text.length() > width) && (pos == nextLineTabStop - 1))\n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos)))\n          .append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}