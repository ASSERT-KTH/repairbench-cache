{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            // Text fits on one line\n            sb.append(rtrim(text)); // Trim trailing spaces\n            return sb;\n        }\n\n        // Append the first line, trimming trailing spaces\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Check if indentation is feasible - prevent potential issues later\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n                                            \"- no room for the description\");\n        }\n\n        // Pad subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            // Prepare the text for the next line (pad + remaining text)\n            // Ensure leading/trailing whitespace from the remainder is handled\n            text = padding + text.substring(pos).trim();\n            // Find the wrap position for the padded text\n            pos = findWrapPos(text, width, 0);\n\n            // If the rest fits on one line (including padding)\n            if (pos == -1)\n            {\n                sb.append(text); // Append remaining text (already has padding)\n                return sb;\n            }\n\n            // If the calculated wrap position falls within the padding area\n            // (pos <= nextLineTabStop), it implies that the first word after\n            // the padding doesn't fit within the remaining width on the line.\n            // In this scenario, and only if the text actually exceeds the width,\n            // we must force a break at the line's width boundary to ensure\n            // forward progress and handle potential infinite loops.\n            if (pos <= nextLineTabStop && text.length() > width)\n            {\n                // Force the wrap position to the maximum width\n                pos = width;\n            }\n\n            // Append the line chunk up to the determined wrap position.\n            // Do NOT trim trailing spaces here, as the leading padding\n            // for the next line relies on the correct positioning.\n            sb.append(text.substring(0, pos)).append(defaultNewLine);\n            // Loop continues, processing text starting from the new 'pos' for the next line\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}