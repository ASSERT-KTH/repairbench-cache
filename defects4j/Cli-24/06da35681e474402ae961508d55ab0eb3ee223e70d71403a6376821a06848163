{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        // Handle the edge case where the indent is greater than or equal to the width.\n        // In this situation, wrap character by character.\n        // Added width > 0 check for robustness, though typically width should be positive.\n        // Also check if text is null or empty, return original buffer if so.\n        if (text == null || text.length() == 0) {\n             return sb;\n        }\n        \n        if (nextLineTabStop >= width && width > 0) {\n            final String padding = createPadding(nextLineTabStop);\n            // Start with the trimmed text to avoid leading/trailing whitespace issues\n            String remainingText = text.trim();\n\n            while (remainingText.length() > 0) {\n                // Append padding and the first character of the current remaining text\n                sb.append(padding).append(remainingText.charAt(0)).append(defaultNewLine);\n                // Prepare the remainder for the next iteration: remove the first char and trim leading spaces\n                if (remainingText.length() > 1) {\n                     remainingText = remainingText.substring(1).trim();\n                } else {\n                    remainingText = \"\"; // No more characters left\n                }\n            }\n            return sb; // Finished handling this special case\n        }\n\n        // --- Normal processing when nextLineTabStop < width ---\n\n        // Find the wrap position for the first line (no padding assumed here)\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            // The entire text fits on the first line without wrapping\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        // Append the first wrapped line segment\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Setup for subsequent lines which require padding\n        final String padding = createPadding(nextLineTabStop);\n        // Get the text remaining after the first line wrap, trimmed\n        String remainingText = text.substring(pos).trim();\n\n        // Loop to wrap the remaining text with padding\n        while (remainingText.length() > 0) {\n             // Calculate the actual width available for text content on subsequent lines\n             // Ensure availableWidth is positive. It should be because nextLineTabStop < width\n             int availableWidth = Math.max(1, width - nextLineTabStop); // Use Math.max to ensure at least 1\n\n             // Find the wrap position within the remaining text based on the available width\n             pos = findWrapPos(remainingText, availableWidth, 0);\n\n             if (pos == -1) {\n                 // The rest of the text fits on the current line within the available width\n                 sb.append(padding).append(remainingText);\n                 remainingText = \"\"; // Mark as done, loop will terminate\n             } else {\n                 // Wrap is needed for the remaining text\n                 // Append the padding and the chunk of text that fits\n                 sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);\n                 // Update remaining text for the next iteration\n                 remainingText = remainingText.substring(pos).trim();\n             }\n        } // end while\n\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}