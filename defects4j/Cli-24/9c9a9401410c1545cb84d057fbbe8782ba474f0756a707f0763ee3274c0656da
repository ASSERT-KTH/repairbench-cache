{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text) {\n    // If the indent is as large as (or larger than) the available width,\n    // we can't fit more than one character per line.  Chunk it char-by-char.\n    if (nextLineTabStop >= width) {\n        // Use an indent of width-1 so that exactly one char will fit each line\n        final String padding = createPadding(width - 1);\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            // skip pure-whitespace characters so we don't emit blank lines\n            if (!Character.isWhitespace(c)) {\n                sb.append(padding)\n                  .append(c)\n                  .append(defaultNewLine);\n            }\n        }\n        return sb;\n    }\n\n    int pos = findWrapPos(text, width, 0);\n    // if it all fits on one line, just append it\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // otherwise, wrap at the first break\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // prepare the padding for subsequent lines\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        // trim leading whitespace on the remainder and re-prefix it\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        // last chunk?\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n\n        // guard against infinite loop when the only break is at the indent\n        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos)))\n          .append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}