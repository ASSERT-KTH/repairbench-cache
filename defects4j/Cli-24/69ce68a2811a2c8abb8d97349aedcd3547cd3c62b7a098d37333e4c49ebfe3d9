{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        if (width == 1) {\n            // Special case: when width==1, just chunk the text letter by letter with indentation ignored\n        } else {\n            // stops infinite loop happening\n            throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n                                            \"- no room for the description\");\n        }\n    }\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n\n        int wrapPos;\n        if (nextLineTabStop >= width && width == 1) {\n            // When indent >= width and width==1, forcibly wrap one char per line ignoring indent\n            wrapPos = 1;\n        } else {\n            wrapPos = findWrapPos(text, width, 0);\n        }\n\n        pos = wrapPos;\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        if ((text.length() > width) && (pos == nextLineTabStop -1))\n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}