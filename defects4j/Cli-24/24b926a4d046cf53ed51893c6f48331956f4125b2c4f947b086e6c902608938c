{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        \n        // If the next line is too long, break it at the maximum width\n        if (nextLineTabStop >= width) {\n            pos = width - 1;\n        } else {\n            pos = findWrapPos(text, width, 0);\n            \n            if (pos == -1) {\n                sb.append(text);\n                return sb;\n            }\n            \n            if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\n                pos = width;\n            }\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        \n        // If we didn't find a proper wrapping position, handle one character at a time\n        if (nextLineTabStop >= width) {\n            text = text.substring(pos);\n            if (text.length() <= 0) {\n                break;\n            }\n        }\n    }\n    \n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}