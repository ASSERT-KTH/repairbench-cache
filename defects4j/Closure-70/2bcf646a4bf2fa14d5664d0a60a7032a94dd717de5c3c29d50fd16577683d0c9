{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          // Check if the parameter is already declared in the function's scope\n          if (scope.isDeclared(astParameter.getString(), false)) {\n            // If it's already declared, handle the duplicate declaration\n            handleDuplicateDeclaration(astParameter, functionNode, jsDocParameter.getJSType());\n          } else {\n            defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n          }\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments\n\nprivate void handleDuplicateDeclaration(Node astParameter, Node functionNode, JSType type) {\n  String paramName = astParameter.getString();\n  if (scope.isDeclared(paramName, false)) {\n    // Check if the previous declaration was in the same function\n    Var previousVar = scope.getVar(paramName);\n    if (previousVar.getScope().getRootNode() == functionNode) {\n      // If it was in the same function, report a duplicate variable declaration\n      reportDuplicateVarDeclaration(astParameter, paramName, previousVar.getType());\n    } else {\n      // Otherwise, it's a different scope, so just redefine the slot\n      defineSlot(astParameter, functionNode, type, true);\n    }\n  }\n}\n\nprivate void reportDuplicateVarDeclaration(Node node, String varName, JSType originalType) {\n  JSType newType = node.getJSType();\n  if (originalType != null && newType != null && !originalType.isEquivalentTo(newType)) {\n    warning(DUPLICATE_VAR_DECLARATION, node, varName, originalType.toString(), newType.toString());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}