{
    "generation": "    /**\n     * Declares all of a function's arguments.\n     */\n    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      // The body node is not directly used here but is the sibling after parameters.\n      // Node body = astParameters.getNext();\n\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n\n      // Get the JSDoc parameters node, if available.\n      Node jsDocParametersNode = null;\n      if (functionType != null) {\n        jsDocParametersNode = functionType.getParametersNode();\n      }\n\n      // Initialize the pointer to the first JSDoc parameter.\n      Node currentJsDocParameter = null;\n      if (jsDocParametersNode != null) {\n        currentJsDocParameter = jsDocParametersNode.getFirstChild();\n      }\n\n      // Iterate over each AST parameter.\n      // We must define a slot for every AST parameter, regardless of whether JSDoc is present.\n      for (Node astParameter : astParameters.children()) {\n        JSType paramType = null;\n        // If there's a corresponding JSDoc parameter, use its type.\n        if (currentJsDocParameter != null) {\n          paramType = currentJsDocParameter.getJSType();\n          // Move to the next JSDoc parameter for the next iteration.\n          currentJsDocParameter = currentJsDocParameter.getNext();\n        }\n        // Define the slot for the AST parameter.\n        // The 'true' indicates it's a function argument.\n        defineSlot(astParameter, functionNode, paramType, true);\n      }\n    } // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}