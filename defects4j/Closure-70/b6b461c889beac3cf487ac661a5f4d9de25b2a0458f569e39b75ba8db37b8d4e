{
    "generation": "    /**\n     * Declares all of a function's arguments.\n     */\n    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            String paramName = astParameter.getString();\n            if (jsDocParameter != null) {\n              JSType paramType = jsDocParameter.getJSType();\n              defineSlot(astParameter, functionNode, paramType, true);\n              // Check for duplicate declarations in the function body\n              if (body != null) {\n                checkDuplicateDeclarations(body, paramName, paramType);\n              }\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          }\n        }\n      }\n    } // end declareArguments\n\n    /**\n     * Helper method to check for duplicate variable declarations in the function body.\n     */\n    private void checkDuplicateDeclarations(Node body, String paramName, JSType paramType) {\n      for (Node child : body.children()) {\n        if (child.isVar()) {\n          for (Node varNode : child.children()) {\n            if (varNode.getString().equals(paramName)) {\n              JSType varType = varNode.getJSType();\n              if (varType != null && !varType.isEquivalentTo(paramType)) {\n                compiler.report(\n                    JSError.make(\n                        varNode,\n                        TypeCheck.DUP_VAR_DECLARATION,\n                        \"variable {0} redefined with type {1}, original definition\" +\n                        \" at {2} with type {3}\",\n                        paramName,\n                        varType.toString(),\n                        paramName,\n                        paramType.toString()));\n              }\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}