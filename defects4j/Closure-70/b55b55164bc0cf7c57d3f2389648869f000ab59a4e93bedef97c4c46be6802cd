{
    "generation": "    /**\n     * Declares all of a function's arguments.\n     */\n    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      // The 'body' variable is unused.\n      // Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              // Copy JSDocInfo from the JSDoc parameter node to the AST parameter node.\n              // This is crucial for correctly reporting warnings like \"variable redefined\",\n              // as the compiler needs access to the original declaration's source information\n              // (e.g., line number, JSDoc comment) via the AST node.\n              if (jsDocParameter.getJSDocInfo() != null) {\n                astParameter.setJSDocInfo(jsDocParameter.getJSDocInfo());\n              }\n              defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              // If there are more AST parameters than JSDoc parameters, define\n              // the remaining AST parameters without specific JSDoc types.\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}