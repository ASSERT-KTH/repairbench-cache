{
    "generation": "    /* (non-Javadoc)\n     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n     */\n    public Object answer(InvocationOnMock invocation) {\n        if (methodsGuru.isToString(invocation.getMethod())) {\n            Object mock = invocation.getMock();\n            MockName name = mockUtil.getMockName(mock);\n            if (name.isDefault()) {\n                return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n            } else {\n                return name.toString();\n            }\n        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n            // see issue 184.\n            // When a mock is compared to itself (same reference), compareTo() should return 0 to be consistent with equals() and hashCode().\n            // For different instances, it should return a non-zero value, as they are not the same.\n            // This ensures that collections like TreeSet behave as expected when adding the same mock instance multiple times.\n            Object mock = invocation.getMock();\n            Object argument = invocation.getArguments()[0]; // compareTo methods typically have one argument\n\n            if (mock == argument) {\n                return 0;\n            } else {\n                return 1; // Return 1 (any non-zero value) for different instances\n            }\n        }\n        \n        Class<?> returnType = invocation.getMethod().getReturnType();\n        return returnValueFor(returnType);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}