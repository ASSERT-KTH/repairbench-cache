{
    "generation": "    /* (non-Javadoc)\n     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n     */\n    public Object answer(InvocationOnMock invocation) {\n        if (methodsGuru.isToString(invocation.getMethod())) {\n            Object mock = invocation.getMock();\n            MockName name = mockUtil.getMockName(mock);\n            if (name.isDefault()) {\n                return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n            } else {\n                return name.toString();\n            }\n        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n            //see issue 184.\n            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same.\n            //Only for compareTo() method by the Comparable interface\n            Object[] args = invocation.getArguments();\n            if (args != null && args.length == 1 && args[0] == invocation.getMock()) {\n                // If comparing the mock to itself, return 0 as per Comparable contract for identical objects\n                return 0;\n            } else {\n                // Otherwise, return 1 (anything but 0 is good to indicate they are not the same for comparison purposes)\n                return 1;\n            }\n        }\n        \n        Class<?> returnType = invocation.getMethod().getReturnType();\n        return returnValueFor(returnType);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}