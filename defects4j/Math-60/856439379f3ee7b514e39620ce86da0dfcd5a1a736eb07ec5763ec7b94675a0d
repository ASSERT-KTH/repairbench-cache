{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite cases explicitly to avoid NaN from Erf.erf(infinity)\n        if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        }\n        if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n\n        final double dev = x - mean;\n        // Check for extreme values as per Javadoc: +/- 40 standard deviations\n        // This avoids calling Erf.erf for arguments where it might fail or is unnecessary\n        if (Math.abs(dev) > 40 * standardDeviation) {\n             return x < mean ? 0.0 : 1.0;\n        }\n\n        // Try calculating using Erf function for non-extreme finite values\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // If Erf.erf fails to converge for values within the expected range,\n            // fall back to returning 0 or 1 based on the side of the mean.\n            // This provides a safety net consistent with the extreme value handling.\n            if (x < mean) { // Check which tail failed\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n            // Note: Depending on the expected reliability of Erf.erf within this range,\n            // re-throwing the exception might be an alternative: throw ex;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}