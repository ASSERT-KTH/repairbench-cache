{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If the underlying erf implementation fails to converge (including for\n * infinite or extremely large {@code x}), values more than 20 standard\n * deviations out are top\u2010coded to 0 or 1 to avoid propagating exceptions.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n * @throws MathException if the algorithm fails to converge for moderate {@code x}.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    try {\n        return 0.5 * (1.0 +\n                      Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < mean - 20 * standardDeviation) {\n            return 0.0;\n        } else if (x > mean + 20 * standardDeviation) {\n            return 1.0;\n        } else {\n            throw ex;\n        }\n    } catch (ConvergenceException ex) {\n        if (x < mean - 20 * standardDeviation) {\n            return 0.0;\n        } else if (x > mean + 20 * standardDeviation) {\n            return 1.0;\n        } else {\n            throw ex;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}