{
    "generation": "    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        double result;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                        (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 40 * standardDeviation)) { // Using 40 instead of 20 to handle more extreme cases\n                return 0;\n            } else if (x > (mean + 40 * standardDeviation)) {\n                return 1;\n            } else {\n                // If we get here, we're in the dangerous area near the limits of what we\n                // can compute - return the asymptotic approximation.\n                // From: J. K. Blishin, \"Abscissas and weights for Gaussian Quadrature,\" 1928\n                if (x - mean < 0) { // left tail\n                    double rho = FastMath.exp(-(x - mean) * (x - mean) / (2 * standardDeviation * standardDeviation));\n                    double omega = 0.5 * Erf.erfc(x / (standardDeviation * FastMath.sqrt(2.0)));\n                    double correction = rho / FastMath.sqrt(2.0 * Math.PI) * (1 / (x - mean) - 1 / ((x - mean) * (x - mean) * (x - mean)));\n                    result = omega - correction;\n                } else { // right tail\n                    double rho = FastMath.exp(-(x - mean) * (x - mean) / (2 * standardDeviation * standardDeviation));\n                    double omega = 0.5 * Erf.erfc(-x / (standardDeviation * FastMath.sqrt(2.0)));\n                    double correction = rho / FastMath.sqrt(2.0 * Math.PI) * (1 / (x - mean) - 1 / ((x - mean) * (x - mean) * (x - mean)));\n                    result = 1 - (omega - correction);\n                }\n                if (result < 0) {\n                    return 0;\n                } else if (result > 1) {\n                    return 1;\n                }\n                return result;\n            }\n        } catch (ConvergenceException ex) {\n            if (x < (mean - 40 * standardDeviation)) { // Using 40 instead of 20 to handle more extreme cases\n                return 0;\n            } else if (x > (mean + 40 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}