{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        final double arg = dev / (standardDeviation * FastMath.sqrt(2.0));\n\n        // Handle cases where the argument to erf becomes infinite.\n        // This covers x being +/-Infinity, +/-Double.MAX_VALUE, or\n        // standardDeviation being extremely small (approaching 0, but not 0).\n        if (Double.isInfinite(arg)) {\n            if (arg == Double.POSITIVE_INFINITY) {\n                return 1.0;\n            } else { // arg == Double.NEGATIVE_INFINITY\n                return 0.0;\n            }\n        }\n\n        try {\n            return 0.5 * (1.0 + Erf.erf(arg));\n        } catch (MaxIterationsExceededException ex) {\n            // This catch block handles convergence issues for finite,\n            // but very large/small, inputs that did not result in 'arg' being infinite.\n            // The conditions here align with the original code's intent to top-code\n            // values when the computation fails due to extreme values.\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                // If the computation fails for an x within this range,\n                // re-throw the exception as it's not an \"extreme\" value for top-coding.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}