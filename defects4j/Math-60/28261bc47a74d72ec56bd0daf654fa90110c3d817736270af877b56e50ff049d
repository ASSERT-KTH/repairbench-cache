{
    "generation": "public double cumulativeProbability(double x) throws MathException {\n    // Handle NaN.\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    // Handle infinities.\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0.0;\n    }\n    \n    // Compute the deviation from the mean.\n    double dev = x - mean;\n    // If x is more than 40 standard deviations from the mean then return the limiting value.\n    if (dev < -40 * standardDeviation) {\n        return 0.0;\n    }\n    if (dev > 40 * standardDeviation) {\n        return 1.0;\n    }\n    \n    try {\n        // Otherwise use the error function calculation.\n        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        // Fallback in the very rare event the algorithm fails to converge.\n        return (dev < 0) ? 0.0 : 1.0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}