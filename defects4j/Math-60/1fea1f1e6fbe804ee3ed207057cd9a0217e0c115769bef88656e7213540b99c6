{
    "generation": "public double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    // Handle infinite and extreme values first\n    if (Double.isInfinite(x)) {\n        return x < 0 ? 0.0 : 1.0;\n    }\n    // Handle extreme standard deviations\n    if (standardDeviation == 0) {\n        return x < mean ? 0.0 : 1.0;\n    }\n    // For very large x values, return 0.0 or 1.0 appropriately\n    if (Math.abs(x) > Double.MAX_VALUE * 0.5) { // Adjust threshold as needed\n        return x < mean ? 0.0 : 1.0;\n    }\n    try {\n        if (FastMath.abs(dev) > 40 * standardDeviation) {\n            if (x < mean) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n        return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 20 * standardDeviation)) {\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}