{
    "generation": "    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite values explicitly\n        if (Double.isNaN(x)) {\n            return Double.NaN;\n        }\n        if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n        if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        }\n        final double dev = x - mean;\n        // Use much wider bounds for top-coding as doc says 40 SD, not 20\n        if (x < (mean - 40 * standardDeviation)) {\n            return 0.0;\n        }\n        if (x > (mean + 40 * standardDeviation)) {\n            return 1.0;\n        }\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                        (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // fallback just in case\n            if (x < (mean - 40 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 40 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}