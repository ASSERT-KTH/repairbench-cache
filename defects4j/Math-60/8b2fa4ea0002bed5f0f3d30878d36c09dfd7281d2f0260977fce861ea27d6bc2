{
    "generation": "public double cumulativeProbability(double x) throws MathException {\n    // Handle infinite values explicitly to avoid issues in computing erf.\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0.0;\n    }\n\n    double dev = x - mean;\n    // For values extremely far from the mean, return 0 or 1 directly.\n    if (dev < -40 * standardDeviation) {\n        return 0.0;\n    }\n    if (dev > 40 * standardDeviation) {\n        return 1.0;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        // If the algorithm fails to converge, use top-coding near the tails.\n        if (x < (mean - 20 * standardDeviation)) {\n            return 0.0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1.0;\n        } else {\n            throw new MathException(\"Unable to compute cumulative probability\", ex);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}