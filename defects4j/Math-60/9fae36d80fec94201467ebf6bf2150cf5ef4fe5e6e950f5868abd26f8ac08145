{
    "generation": "public double cumulativeProbability(double x) throws MathException {\n    // handle infinity explicitly, to avoid passing to Erf.erf\n    if (Double.isInfinite(x)) {\n        if (x < 0) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n    // handle NaN (return NaN as per standard convention)\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    final double dev = x - mean;\n    // Top-code extreme values. For very large values, avoid unnecessary evaluation.\n    if (x < (mean - 40 * standardDeviation)) {\n        return 0.0;\n    } else if (x > (mean + 40 * standardDeviation)) {\n        return 1.0;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        // For robustness, fallback to a smaller range\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0.0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1.0;\n        } else {\n            throw ex;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}