{
    "generation": "    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinities explicitly to avoid evaluation errors in Erf.erf\n        if (Double.isNaN(x)) {\n            return Double.NaN;\n        } else if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        } else if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        }\n\n        final double dev = x - mean;\n\n        // Top-code: handle extreme cases before calling Erf.erf to avoid unnecessary errors\n        // Uses 40 standard deviations as cutoff as in Javadoc\n        if (dev < -40 * standardDeviation) {\n            return 0.0;\n        } else if (dev > 40 * standardDeviation) {\n            return 1.0;\n        }\n\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // fallback, more conservative cutoff as in JDK 1.5\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0.0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0;\n            } else {\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}