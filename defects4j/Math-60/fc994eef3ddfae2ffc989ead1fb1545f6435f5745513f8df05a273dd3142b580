{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite cases explicitly\n        if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        }\n        if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n\n        final double dev = x - mean;\n        // Handle cases far from the mean explicitly to avoid potential issues with Erf.erf\n        // The threshold 40 is based on the javadoc comment.\n        // It prevents passing extreme values (like Double.MAX_VALUE) to Erf.erf,\n        // which might cause convergence issues or return NaN.\n        if (Math.abs(dev) / standardDeviation > 40) {\n             return dev < 0 ? 0.0d : 1.0d;\n        }\n\n        // Proceed with the Erf.erf calculation for non-extreme finite values\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // Fallback handling if Erf.erf fails to converge for values not caught above\n            if (x < (mean - 20 * standardDeviation)) { // Use a threshold consistent with old behavior or javadoc? Keep 20 for now.\n                return 0.0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0;\n            } else {\n                // If convergence fails for values closer to the mean, rethrow.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}