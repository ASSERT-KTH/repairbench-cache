{
    "generation": "public double cumulativeProbability(double x) throws MathException {\n    // Handle extreme values explicitly to avoid computation issues\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0.0;\n    }\n\n    final double dev = x - mean;\n    final double threshold = 40 * standardDeviation;\n    if (dev < -threshold) {\n        return 0.0;\n    }\n    if (dev > threshold) {\n        return 1.0;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        // Fallback is not likely needed anymore, but maintain for safety\n        if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}