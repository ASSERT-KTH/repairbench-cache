{
    "generation": "public double cumulativeProbability(double x) throws MathException {\n    // Handle infinite values explicitly.\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0.0;\n    }\n    \n    final double dev = x - mean;\n    \n    // If x is more than 40 standard deviations away from the mean,\n    // return 0 or 1. This avoids triggering numerical issues in Erf.\n    if (dev > 40 * standardDeviation) {\n        return 1.0;\n    }\n    if (dev < -40 * standardDeviation) {\n        return 0.0;\n    }\n    \n    try {\n        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        // In the very unlikely event the algorithm fails to converge,\n        // fall back to top-coding based on the sign of the deviation.\n        return dev < 0 ? 0.0 : 1.0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}