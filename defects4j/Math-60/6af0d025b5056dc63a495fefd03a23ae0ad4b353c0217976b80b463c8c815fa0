{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite values explicitly to prevent numerical issues and\n        // ConvergenceException when passing infinity to Erf.erf.\n        if (Double.isInfinite(x)) {\n            if (x == Double.POSITIVE_INFINITY) {\n                return 1.0;\n            } else { // x == Double.NEGATIVE_INFINITY\n                return 0.0;\n            }\n        }\n\n        final double dev = x - mean;\n        try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // This block handles cases where the Erf.erf computation might exceed\n            // its iteration limit for very extreme but finite values of x.\n            // The current threshold of 20 standard deviations is retained from the original code.\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                // If the value is not considered \"extreme enough\" to be top-coded,\n                // rethrow the original exception.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}