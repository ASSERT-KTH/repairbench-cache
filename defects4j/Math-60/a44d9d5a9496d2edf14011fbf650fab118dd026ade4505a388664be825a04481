{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n * @throws MathException if the algorithm fails to converge\n */\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n\n    // Top\u2010code extreme values beyond 40\u03c3\n    if (dev <= -40.0 * standardDeviation) {\n        return 0.0;\n    }\n    if (dev >=  40.0 * standardDeviation) {\n        return 1.0;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (ConvergenceException ex) {\n        // In some JDKs Erf.erf/erfc may fail for very large arguments;\n        // for |x - mean| > 20\u03c3 we simply return 0 or 1\n        if (dev <= -20.0 * standardDeviation) {\n            return 0.0;\n        } else if (dev >= 20.0 * standardDeviation) {\n            return 1.0;\n        }\n        throw ex;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}