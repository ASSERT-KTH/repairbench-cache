{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite values directly\n        if (Double.isInfinite(x)) {\n            if (x == Double.POSITIVE_INFINITY) {\n                return 1.0;\n            } else { // x == Double.NEGATIVE_INFINITY\n                return 0.0;\n            }\n        }\n\n        // Apply the 40 standard deviations rule mentioned in the Javadoc.\n        // This covers cases like Double.MAX_VALUE which are effectively infinite\n        // for the purpose of the CDF and could cause numerical issues or exceptions\n        // if passed to the Erf.erf function directly.\n        final double fortyStdDev = 40.0 * standardDeviation;\n        if (x > mean + fortyStdDev) {\n            return 1.0;\n        }\n        if (x < mean - fortyStdDev) {\n            return 0.0;\n        }\n\n        final double dev = x - mean;\n        try {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                        (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MathException ex) { // Catch MathException as it's the base for ConvergenceException and MaxIterationsExceededException\n            // This catch block remains for cases where the Erf.erf still throws an exception\n            // (e.g., MaxIterationsExceededException or ConvergenceException)\n            // for values within the 40-std-dev range but still far enough\n            // to cause numerical issues for Erf.erf.\n            // The 20-std-dev thresholds here are empirical for such exceptions.\n            final double twentyStdDev = 20.0 * standardDeviation;\n            if (x < (mean - twentyStdDev)) {\n                return 0;\n            } else if (x > (mean + twentyStdDev)) {\n                return 1;\n            } else {\n                // If the algorithm fails for values not considered extreme\n                // by the 20-std-dev threshold, rethrow the exception.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}