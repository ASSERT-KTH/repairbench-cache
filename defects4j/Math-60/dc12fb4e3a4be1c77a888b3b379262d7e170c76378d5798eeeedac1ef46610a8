{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite values explicitly to avoid ConvergenceException from Erf.erf\n        // when its argument becomes +/- Infinity due to large 'x'.\n        if (Double.isInfinite(x)) {\n            if (x == Double.POSITIVE_INFINITY) {\n                return 1.0;\n            } else { // x == Double.NEGATIVE_INFINITY\n                return 0.0;\n            }\n        }\n\n        final double dev = x - mean;\n        try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (ConvergenceException ex) { // Changed from MaxIterationsExceededException\n            // This catch block handles cases where Erf.erf fails to converge\n            // for very large (but finite) values of x, or other convergence issues.\n            // As per Javadoc, for values far from the mean, return 0 or 1.\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0.0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0;\n            } else {\n                // If the value is not extremely far from the mean but convergence still fails,\n                // re-throw the exception as it indicates a genuine problem.\n                throw ex;\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}