{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite values explicitly first, as Erf.erf might struggle with them.\n        if (Double.isInfinite(x)) {\n            if (x == Double.POSITIVE_INFINITY) {\n                return 1.0;\n            } else { // x == Double.NEGATIVE_INFINITY\n                return 0.0;\n            }\n        }\n\n        // As per the Javadoc, if x is more than 40 standard deviations from the mean,\n        // the probability is effectively 0 or 1. This also prevents Erf.erf from\n        // being called with extremely large arguments that could cause convergence issues\n        // or numerical instability.\n        final double dev = x - mean;\n        final double zScore = dev / standardDeviation; // This is the Z-score (number of standard deviations from the mean)\n        final double EXTREME_Z_SCORE_CUTOFF = 40.0; // From Javadoc: 40 standard deviations\n\n        if (zScore > EXTREME_Z_SCORE_CUTOFF) {\n            return 1.0;\n        } else if (zScore < -EXTREME_Z_SCORE_CUTOFF) {\n            return 0.0;\n        }\n\n        // If not an extreme value, try to compute using the error function.\n        try {\n            return 0.5 * (1.0 + Erf.erf(zScore / FastMath.sqrt(2.0)));\n        } catch (MaxIterationsExceededException ex) {\n            // This catch block handles cases where Erf.erf might still fail\n            // for arguments that are not as \"extremely\" large as handled by the\n            // initial 40-sigma check, but where the result is still effectively 0 or 1.\n            // The original comment \"JDK 1.5 blows at 38\" suggests this specific range\n            // for which Erf.erf might throw MaxIterationsExceededException.\n            if (x < (mean - 20 * standardDeviation)) { // 20 sigma cutoff for these cases\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                // If the value is within 20 standard deviations and Erf.erf still fails,\n                // it indicates a true failure of the algorithm that should be propagated.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}