{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        // Handle infinite values explicitly to avoid numerical issues and exceptions from Erf.erf\n        if (Double.isInfinite(x)) {\n            if (x == Double.POSITIVE_INFINITY) {\n                return 1.0;\n            } else { // x == Double.NEGATIVE_INFINITY\n                return 0.0;\n            }\n        }\n\n        final double dev = x - mean;\n        // Calculate the number of standard deviations x is from the mean\n        final double z = dev / standardDeviation;\n\n        // As per Javadoc, if x is more than 40 standard deviations from the mean,\n        // the probability is effectively 0 or 1. This also helps prevent issues\n        // with Erf.erf for extremely large finite inputs (like Double.MAX_VALUE).\n        if (FastMath.abs(z) > 40) {\n            if (z > 0) { // x is significantly above the mean\n                return 1.0;\n            } else { // x is significantly below the mean\n                return 0.0;\n            }\n        }\n\n        try {\n            // The argument to Erf.erf is (x - mean) / (standardDeviation * sqrt(2))\n            // which simplifies to z / sqrt(2)\n            return 0.5 * (1.0 + Erf.erf(z / FastMath.sqrt(2.0)));\n        } catch (ConvergenceException ex) { // Catch the more general ConvergenceException\n            // This catch block provides a fallback for convergence issues for values\n            // that are still \"extreme\" but not caught by the 40-std-dev check above.\n            // The original comment mentioned \"JDK 1.5 blows at 38\", suggesting Erf might fail\n            // for values around 20-38 standard deviations.\n            if (x < (mean - 20 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                // Re-throw the exception if the convergence failure is for a value\n                // that is not considered extreme enough for top-coding.\n                throw ex;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}