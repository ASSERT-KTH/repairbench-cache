{
    "generation": "public double cumulativeProbability(double x) throws MathException {\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0;\n    } else if (x == Double.POSITIVE_INFINITY) {\n        return 1;\n    }\n    final double dev = x - mean;\n    final double devInStd = dev / standardDeviation;\n    if (devInStd < -40) {\n        return 0;\n    } else if (devInStd > 40) {\n        return 1;\n    }\n    try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n              (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        if (dev < -20 * standardDeviation) {\n            return 0;\n        } else if (dev > 20 * standardDeviation) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}