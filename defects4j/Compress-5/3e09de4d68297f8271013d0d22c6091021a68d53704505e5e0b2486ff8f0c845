{
    "generation": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                // If we hit EOF before reading the expected number of bytes, the entry is truncated.\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    if (readBytesOfEntry < csize) {\n                        throw new ZipException(\"Truncated ZIP file\");\n                    }\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        // For non-STORED (i.e. DEFLATED) entries:\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int numRead;\n        try {\n            numRead = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n        if (numRead > 0) {\n            readBytesOfEntry += numRead;\n        } else if (numRead == 0 && inf.finished()) {\n            // If the inflater has finished but we haven't produced all expected bytes,\n            // then the entry is truncated.\n            if (current.getSize() != -1 && readBytesOfEntry < current.getSize()) {\n                throw new ZipException(\"Truncated ZIP file\");\n            }\n            return -1;\n        }\n        crc.update(buffer, start, numRead);\n        return numRead;\n    }\n    throw new ArrayIndexOutOfBoundsException();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}