{
    "generation": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n\n    // avoid int overflow, check null buffer\n    if (start < 0 || length < 0 || start > buffer.length || buffer.length - start < length) {\n        throw new ArrayIndexOutOfBoundsException();\n    }\n\n    if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n        int csize = (int) current.getSize();\n        if (readBytesOfEntry >= csize) {\n            return -1;\n        }\n        if (offsetInBuffer >= lengthOfLastRead) {\n            offsetInBuffer = 0;\n            if ((lengthOfLastRead = in.read(buf)) == -1) {\n                return -1;\n            }\n            count(lengthOfLastRead);\n            bytesReadFromStream += lengthOfLastRead;\n        }\n        int toRead = length > lengthOfLastRead\n            ? lengthOfLastRead - offsetInBuffer\n            : length;\n        if ((csize - readBytesOfEntry) < toRead) {\n            toRead = csize - readBytesOfEntry;\n        }\n        System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n        offsetInBuffer += toRead;\n        readBytesOfEntry += toRead;\n        crc.update(buffer, start, toRead);\n        return toRead;\n    }\n\n    // DEFLATED entry\n    while (true) {\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead <= 0) {\n                // no more data but entry not finished -> truncated\n                throw new IOException(\"Truncated ZIP file\");\n            }\n            bytesReadFromStream += lengthOfLastRead;\n        }\n        int n;\n        try {\n            n = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n        if (n > 0) {\n            crc.update(buffer, start, n);\n            return n;\n        }\n        if (inf.finished()) {\n            // end of this entry\n            return -1;\n        }\n        // read == 0 but not finished, loop to fill more input\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}