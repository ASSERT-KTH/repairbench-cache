{
    "generation": "public int read(byte[] buffer, int start, int length) throws IOException {\n\tif (closed) {\n\t\tthrow new IOException(\"The stream is closed\");\n\t}\n\tif (inf.finished() || current == null) {\n\t\treturn -1;\n\t}\n\n\tif (start <= buffer.length && length >= 0 && start >= 0\n\t\t&& buffer.length - start >= length) {\n\t\tif (current.getMethod() == ZipArchiveOutputStream.STORED) {\n\t\t\tint csize = (int) current.getSize();\n\t\t\tif (readBytesOfEntry >= csize) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (offsetInBuffer >= lengthOfLastRead) {\n\t\t\t\toffsetInBuffer = 0;\n\t\t\t\tif ((lengthOfLastRead = in.read(buf)) == -1) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tcount(lengthOfLastRead);\n\t\t\t\tbytesReadFromStream += lengthOfLastRead;\n\t\t\t}\n\t\t\tint toRead = length > lengthOfLastRead\n\t\t\t\t? lengthOfLastRead - offsetInBuffer\n\t\t\t\t: length;\n\t\t\tif ((csize - readBytesOfEntry) < toRead) {\n\t\t\t\ttoRead = csize - readBytesOfEntry;\n\t\t\t}\n\t\t\tif (toRead <= 0) {\n\t\t\t\tif (readBytesOfEntry >= csize) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new IOException(\"Truncated ZIP file\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n\t\t\toffsetInBuffer += toRead;\n\t\t\treadBytesOfEntry += toRead;\n\t\t\tcrc.update(buffer, start, toRead);\n\t\t\treturn toRead;\n\t\t}\n\t\tif (inf.needsInput()) {\n\t\t\tfill();\n\t\t\tif (lengthOfLastRead > 0) {\n\t\t\t\tbytesReadFromStream += lengthOfLastRead;\n\t\t\t}\n\t\t}\n\t\tint read = 0;\n\t\ttry {\n\t\t\tread = inf.inflate(buffer, start, length);\n\t\t} catch (DataFormatException e) {\n\t\t\tthrow new ZipException(e.getMessage());\n\t\t}\n\t\tif (read == 0 && inf.finished()) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (read == 0 && length > 0) {\n\t\t\tthrow new IOException(\"Truncated ZIP file\");\n\t\t}\n\t\tcrc.update(buffer, start, read);\n\t\treturn read;\n\t}\n\tthrow new ArrayIndexOutOfBoundsException();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}