{
    "generation": "    public int read(byte[] buffer, int start, int length) throws IOException {\n        if (closed) {\n            throw new IOException(\"The stream is closed\");\n        }\n        if (inf.finished() || current == null) {\n            return -1;\n        }\n\n        // avoid int overflow, check null buffer\n        if (start <= buffer.length && length >= 0 && start >= 0\n            && buffer.length - start >= length) {\n\n            // If length is 0, no bytes are read, return 0.\n            // This is a standard InputStream contract behavior.\n            if (length == 0) {\n                return 0;\n            }\n\n            if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n                int csize = (int) current.getSize();\n                if (readBytesOfEntry >= csize) {\n                    return -1;\n                }\n                if (offsetInBuffer >= lengthOfLastRead) {\n                    offsetInBuffer = 0;\n                    if ((lengthOfLastRead = in.read(buf)) == -1) {\n                        return -1;\n                    }\n                    count(lengthOfLastRead);\n                    bytesReadFromStream += lengthOfLastRead;\n                }\n                int toRead = length > lengthOfLastRead\n                    ? lengthOfLastRead - offsetInBuffer\n                    : length;\n                if ((csize - readBytesOfEntry) < toRead) {\n                    toRead = csize - readBytesOfEntry;\n                }\n                System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n                offsetInBuffer += toRead;\n                readBytesOfEntry += toRead;\n                crc.update(buffer, start, toRead);\n                return toRead;\n            }\n            // DEFLATED path\n            if (inf.needsInput()) {\n                fill(); // This method updates lengthOfLastRead\n                if (lengthOfLastRead > 0) {\n                    bytesReadFromStream += lengthOfLastRead;\n                }\n                // If fill() returned 0 bytes (meaning in.read(buf) returned 0),\n                // and the inflater is not finished, it implies the underlying stream\n                // is exhausted for this entry, but the entry itself is not fully decompressed.\n                // This is a truncated stream.\n                if (lengthOfLastRead == 0 && !inf.finished()) {\n                    throw new IOException(\"Truncated ZIP file\");\n                }\n            }\n            int read = 0;\n            try {\n                read = inf.inflate(buffer, start, length);\n            } catch (DataFormatException e) {\n                throw new ZipException(e.getMessage());\n            }\n            if (read == 0 && inf.finished()) {\n                return -1;\n            }\n            // If 'read' is 0 here and !inf.finished(), it means inf.needsInput() is true.\n            // The next call to read() will then re-enter the 'if (inf.needsInput())' block,\n            // call fill(), and the added check will handle the truncation if lengthOfLastRead is 0.\n\n            crc.update(buffer, start, read);\n            return read;\n        }\n        throw new ArrayIndexOutOfBoundsException();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}