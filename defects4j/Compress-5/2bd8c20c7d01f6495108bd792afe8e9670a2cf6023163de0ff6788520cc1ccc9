{
    "generation": "@Override\npublic int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    // argument checks\n    if (buffer == null) {\n        throw new NullPointerException(\"buffer is null\");\n    }\n    if (start < 0 || length < 0 || start > buffer.length || buffer.length - start < length) {\n        throw new ArrayIndexOutOfBoundsException();\n    }\n    if (length == 0) {\n        return 0;\n    }\n\n    // STORED (uncompressed) entries\n    if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n        int csize = (int) current.getSize();\n        if (readBytesOfEntry >= csize) {\n            return -1;\n        }\n        if (offsetInBuffer >= lengthOfLastRead) {\n            offsetInBuffer = 0;\n            lengthOfLastRead = in.read(buf);\n            if (lengthOfLastRead == -1) {\n                throw new IOException(\"Truncated ZIP file\");\n            }\n            count(lengthOfLastRead);\n            bytesReadFromStream += lengthOfLastRead;\n        }\n        int avail = lengthOfLastRead - offsetInBuffer;\n        int toRead = Math.min(avail, length);\n        int remain = csize - readBytesOfEntry;\n        if (remain < toRead) {\n            toRead = remain;\n        }\n        System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n        offsetInBuffer += toRead;\n        readBytesOfEntry += toRead;\n        crc.update(buffer, start, toRead);\n        return toRead;\n    }\n\n    // DEFLATED (compressed) entries\n    if (inf.needsInput()) {\n        fill();\n        // if no more compressed data, the entry is truncated\n        if (lengthOfLastRead <= 0) {\n            throw new IOException(\"Truncated ZIP file\");\n        }\n        bytesReadFromStream += lengthOfLastRead;\n    }\n    int n;\n    try {\n        n = inf.inflate(buffer, start, length);\n    } catch (DataFormatException e) {\n        throw new ZipException(e.getMessage());\n    }\n    if (n == 0) {\n        if (inf.finished()) {\n            return -1;\n        }\n        // needs more input but got none -> truncated\n        if (inf.needsInput()) {\n            throw new IOException(\"Truncated ZIP file\");\n        }\n    }\n    crc.update(buffer, start, n);\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}