{
    "generation": "    public int read(byte[] buffer, int start, int length) throws IOException {\n        if (closed) {\n            throw new IOException(\"The stream is closed\");\n        }\n        if (inf.finished() || current == null) {\n            return -1;\n        }\n\n        // avoid int overflow, check null buffer\n        if (start <= buffer.length && length >= 0 && start >= 0\n            && buffer.length - start >= length) {\n            if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n                int csize = (int) current.getSize();\n                if (readBytesOfEntry >= csize) {\n                    return -1;\n                }\n                if (offsetInBuffer >= lengthOfLastRead) {\n                    offsetInBuffer = 0;\n                    if ((lengthOfLastRead = in.read(buf)) == -1) {\n                        return -1;\n                    }\n                    count(lengthOfLastRead);\n                    bytesReadFromStream += lengthOfLastRead;\n                }\n                int toRead = length > lengthOfLastRead\n                    ? lengthOfLastRead - offsetInBuffer\n                    : length;\n                if ((csize - readBytesOfEntry) < toRead) {\n                    toRead = csize - readBytesOfEntry;\n                }\n                System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n                offsetInBuffer += toRead;\n                readBytesOfEntry += toRead;\n                crc.update(buffer, start, toRead);\n                return toRead;\n            }\n            if (inf.needsInput()) {\n                fill();\n                if (lengthOfLastRead > 0) {\n                    bytesReadFromStream += lengthOfLastRead;\n                }\n            }\n            int read = 0;\n            try {\n                read = inf.inflate(buffer, start, length);\n            } catch (DataFormatException e) {\n                throw new ZipException(e.getMessage());\n            }\n\n            // Handle cases where inflate returns 0 bytes.\n            if (read == 0) {\n                if (inf.finished()) {\n                    // Inflater has finished decompressing the entry normally.\n                    return -1;\n                }\n                // Inflater is not finished but produced 0 bytes. This means it needs more input.\n                // If we also previously hit EOF from the underlying input stream (lengthOfLastRead == -1),\n                // it indicates that the compressed data stream for this entry is truncated.\n                if (inf.needsInput() && lengthOfLastRead == -1) {\n                    throw new IOException(\"Truncated ZIP file\");\n                }\n                // If read is 0, but not finished, and not a truncation,\n                // it implies that inflate will try again next time, possibly after another fill().\n                // In this case, we return 0 and the loop will continue.\n            }\n            \n            crc.update(buffer, start, read);\n            return read;\n        }\n        throw new ArrayIndexOutOfBoundsException();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}