{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator != null ? creator.startBuilding(p, ctxt, _objectIdReader) : null;\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // First, check for external type id (like \"@class\") to handle polymorphic types\n        if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            continue;\n        }\n\n        // Then, check if it's a creator property\n        if (creator != null) {\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Use buffer to handle creator properties properly\n                Object value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);\n                buffer.assignParameter(creatorProp, value);\n                continue;\n            }\n        }\n\n        // Handle other properties like object id, regular properties, etc.\n        // ... (rest of the property handling logic remains unchanged)",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}