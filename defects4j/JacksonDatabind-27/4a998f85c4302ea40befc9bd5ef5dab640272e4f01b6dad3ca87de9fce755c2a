{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // first: let's check to see if this might be part of value with external type id:\n            // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,\n            //   since it is not the bean\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                ;\n            } else {\n                // Instead of assigning the actual value eagerly here,\n                // buffer the token into `tokens` buffer\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n                continue;\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // external type id (or property that depends on it)?\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n        /* As per [JACKSON-313], things marked as ignorable should not be\n         * passed to any setter\n         */\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            continue;\n        }\n        // otherwise, unknown: skip\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n    }\n    tokens.writeEndObject();\n\n    Object bean;\n    try {\n        // Now construct bean\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here actually\n    }\n\n    // Re-parse buffered properties AFTER instantiation\n    JsonParser bufferedParser = tokens.asParser(p);\n    bufferedParser.nextToken(); // START_OBJECT\n    for (JsonToken currToken = bufferedParser.nextToken();\n            currToken == JsonToken.FIELD_NAME;\n            currToken = bufferedParser.nextToken()) {\n        String propName = bufferedParser.getCurrentName();\n        bufferedParser.nextToken();\n        // First, try assign as constructor property (again!)\n        SettableBeanProperty prop = creator.findCreatorProperty(propName);\n        if (prop != null) {\n            prop.deserializeAndSet(bufferedParser, ctxt, bean);\n            continue;\n        }\n        prop = _beanProperties.find(propName);\n        if (prop != null) {\n            prop.deserializeAndSet(bufferedParser, ctxt, bean);\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(bufferedParser, ctxt, bean, propName);\n            continue;\n        }\n        if (_anySetter != null) {\n            try {\n                _anySetter.deserializeAndSet(bufferedParser, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        // unknown property, just skip\n        bufferedParser.skipChildren();\n    }\n    // and finally; clear buffer:\n    tokens.close();\n\n    return ext.complete(p, ctxt, bean);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}