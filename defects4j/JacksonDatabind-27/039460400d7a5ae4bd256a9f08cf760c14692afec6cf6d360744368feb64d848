{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // First: check if this might be part of value with external type id:\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                // handled, nothing more to do\n            } else {\n                // assignParameter will return true when last creator property is assigned\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; // never gets here\n                    }\n                    // Now buffer any remaining tokens\n                    while (t == JsonToken.FIELD_NAME) {\n                        String name = p.getCurrentName();\n                        p.nextToken();\n                        // We need to buffer all properties that are NOT creator properties into TokenBuffer\n                        SettableBeanProperty cp = creator.findCreatorProperty(name);\n                        if (cp != null) {\n                            // Instead of failing, just skip this value, since creator properties are handled\n                            p.skipChildren();\n                            t = p.nextToken();\n                            continue;\n                        }\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    // Complete external type resolution now that we have bean\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    // need to parse buffered properties as regular properties now\n                    JsonParser buffered = tokens.asParser(p);\n                    buffered.nextToken(); // skip START_OBJECT\n                    while (buffered.nextToken() == JsonToken.FIELD_NAME) {\n                        String name = buffered.getCurrentName();\n                        buffered.nextToken();\n                        SettableBeanProperty prop = _beanProperties.find(name);\n                        if (prop != null) {\n                            prop.deserializeAndSet(buffered, ctxt, bean);\n                        } else if (ext.handlePropertyValue(buffered, ctxt, name, bean)) {\n                            // handled by external type id handler\n                        } else if (_ignorableProps != null && _ignorableProps.contains(name)) {\n                            handleIgnoredProperty(buffered, ctxt, handledType(), name);\n                        } else if (_anySetter != null) {\n                            _anySetter.deserializeAndSet(buffered, ctxt, bean, name);\n                        } else {\n                            // unknown property; skip\n                            buffered.skipChildren();\n                        }\n                    }\n                    // Now complete external type ids with the constructed bean\n                    return ext.complete(buffered, ctxt, bean);\n                }\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // external type id (or property that depends on it)?\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n        /* As per [JACKSON-313], things marked as ignorable should not be\n         * passed to any setter\n         */\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // We hit END_OBJECT; resolve the pieces:\n    try {\n        Object bean = creator.build(ctxt, buffer);\n        // Need to parse buffered tokens as well\n        tokens.writeEndObject();\n        JsonParser buffered = tokens.asParser(p);\n        buffered.nextToken(); // skip START_OBJECT\n        while (buffered.nextToken() == JsonToken.FIELD_NAME) {\n            String name = buffered.getCurrentName();\n            buffered.nextToken();\n            SettableBeanProperty prop = _beanProperties.find(name);\n            if (prop != null) {\n                prop.deserializeAndSet(buffered, ctxt, bean);\n            } else if (ext.handlePropertyValue(buffered, ctxt, name, bean)) {\n                // handled by external type id handler\n            } else if (_ignorableProps != null && _ignorableProps.contains(name)) {\n                handleIgnoredProperty(buffered, ctxt, handledType(), name);\n            } else if (_anySetter != null) {\n                _anySetter.deserializeAndSet(buffered, ctxt, bean, name);\n            } else {\n                // unknown property; skip\n                buffered.skipChildren();\n            }\n        }\n        return ext.complete(buffered, ctxt, bean);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}