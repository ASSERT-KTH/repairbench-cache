{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // [databind#928]: ExternalTypeId properties (especially content property)\n                // that are also Creator properties need special handling.\n                // We must buffer the value's tokens to allow both ExternalTypeHandler\n                // and creator property deserialization to access them.\n                TokenBuffer tb = new TokenBuffer(p, ctxt);\n                tb.copyCurrentStructure(p); // This consumes tokens from 'p' and copies to 'tb'.\n                                            // 'p' is now advanced past the current property's value.\n\n                // First, let ExternalTypeHandler try to process these tokens.\n                // It will consume its own parser from 'tb'. Pass null for 'bean' as it's not yet built.\n                JsonParser tbParserForExt = tb.asParser(p); // Use original parser's codec/features\n                tbParserForExt.nextToken(); // Move to START_OBJECT/VALUE_STRING from 'tb's root\n                ext.handlePropertyValue(tbParserForExt, ctxt, propName, null);\n                tbParserForExt.close(); // Close the temporary parser created from tb\n\n                // Now, check if this creator property is specifically the external type ID property itself.\n                // If it is, it's fully handled by 'ext' and not part of the creator parameters.\n                // Note: _externalTypeIdHandler.getTypeProperty() is a protected field, but typically accessible\n                // in this context as part of the deserializer.\n                if (_externalTypeIdHandler != null && creatorProp == _externalTypeIdHandler.getTypeProperty()) {\n                    continue; // Type ID property is consumed by ext, not assigned to creator buffer.\n                }\n\n                // For all other creator properties (including external type 'content' property),\n                // we must deserialize the value and assign it to the PropertyValueBuffer.\n                // Create another parser from the same TokenBuffer for deserialization.\n                JsonParser tbParserForCreator = tb.asParser(p);\n                tbParserForCreator.nextToken(); // Move to START_OBJECT/VALUE_STRING from 'tb's root.\n                Object value = _deserializeWithErrorWrapping(tbParserForCreator, ctxt, creatorProp);\n                tbParserForCreator.close(); // Close the temporary parser created from tb\n\n                // Assign the deserialized value to the creator property buffer.\n                if (buffer.assignParameter(creatorProp, value)) {\n                    // Last creator property to set? Build the bean.\n                    // 'p' is already advanced by tb.copyCurrentStructure, so we use its current token state.\n                    t = p.getCurrentToken(); // Current token of 'p' is now after the copied structure.\n                                             // The outer loop's `t = p.nextToken()` will correctly get the next field name or END_OBJECT.\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; // never gets here\n                    }\n                    // if so, need to copy all remaining tokens into buffer\n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); // to skip name\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        // !!! 08-Jul-2011, tatu: Could theoretically support; but for now\n                        //   it's too complicated, so bail out\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return ext.complete(p, ctxt, bean);\n                }\n                continue; // Continue loop for next field if not all creator params are collected\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            // external type id (or property that depends on it)?\n            // For non-creator properties, handlePropertyValue passes null for bean, and consumes p directly.\n            // This is fine.\n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n            /* As per [JACKSON-313], things marked as ignorable should not be\n             * passed to any setter\n             */\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // \"any property\"?\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        // We hit END_OBJECT; resolve the pieces:\n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null; // never gets here\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}