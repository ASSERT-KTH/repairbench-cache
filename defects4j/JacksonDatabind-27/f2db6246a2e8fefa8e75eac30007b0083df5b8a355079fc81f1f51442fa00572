{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator != null ? creator.startBuilding(p, ctxt, _objectIdReader) : null;\n\n        TokenBuffer tokens = new TokenBuffer(p);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken();\n\n            // Check for external type id first\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                // If external type id is handled, process buffered properties if available\n                if (creator != null) {\n                    Object bean = creator.build(ctxt, buffer);\n                    return ext.complete(p, ctxt, bean);\n                }\n                continue;\n            }\n\n            // Creator property\n            if (creator != null) {\n                SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n                if (creatorProp != null) {\n                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                        t = p.nextToken();\n                        while (t == JsonToken.FIELD_NAME) {\n                            p.nextToken();\n                            tokens.copyCurrentStructure(p);\n                            t = p.nextToken();\n                        }\n                        Object bean = creator.build(ctxt, buffer);\n                        if (bean.getClass() != _beanType.getRawClass()) {\n                            throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        }\n                        return ext.complete(p, ctxt, bean);\n                    }\n                    continue;\n                }\n            }\n\n            // Object Id property\n            if (buffer != null && buffer.readIdProperty(propName)) {\n                continue;\n            }\n\n            // Regular property or external type id dependent\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                if (buffer != null) {\n                    buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                } else {\n                    tokens.copyCurrentStructure(p);\n                }\n                continue;\n            }\n\n            // Handle ignorable properties\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n\n            // Any property handler\n            if (_anySetter != null) {\n                if (buffer != null) {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } else {\n                    tokens.copyCurrentStructure(p);\n                }\n            }\n        }\n\n        // Handle the case where all properties were buffered and external type id was not processed\n        if (creator != null) {\n            Object bean = creator.build(ctxt, buffer);\n            return ext.complete(p, ctxt, bean);\n        }\n\n        throw ctxt.mappingException(\"Unexpected end of JSON input\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}