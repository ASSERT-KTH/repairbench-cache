{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        // 05-May-2021, tatu: As per [databind#3121], may need TokenBuffer for some cases\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // first: let's check to see if this might be part of value with external type id:\n                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,\n                //   since it is not the bean. Returning true means handler found Type Id property\n                // Fix for [databind#928], pass `null` instead of `buffer`\n                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                    // If property was handled, skip normal handling. Buffer may have been populated\n                    ;\n                } else {\n                    // If not handled by external handler, means it's a regular creator property\n                    // (not the one associated with type id -- if any). Assign parameter value:\n                    // Also, do not try to build bean yet, may need type info\n                    buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));\n                }\n                continue;\n            }\n\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n\n            // Regular properties requires buffering. But before that, maybe external type handler needs it?\n            // 23-Aug-2021, tatu: As per [databind#3271], need to let ext handler have a go first\n             if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                 continue;\n             }\n\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n\n            /* As per [JACKSON-313], things marked as ignorable should not be\n             * passed to any setter\n             */\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n\n            // \"any property\"?\n            // 23-Aug-2021, tatu: Needs similar handling as regular properties,\n            //    wrt external type handling. Give handler chance first.\n            //    (note: call was already made earlier, so we know handler did not handle it)\n            if (_anySetter != null) {\n                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                 continue; // Any property handled, move to next field\n            }\n\n            // Unknown property? Add to token buffer, maybe needed by type handler\n            // (otherwise handled by standard unknown property handling)\n             tokens.writeFieldName(propName);\n             tokens.copyCurrentStructure(p);\n        } // End of loop for properties\n\n        // We hit END_OBJECT; resolve the pieces:\n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (Exception e) {\n             // 28-Aug-2019, tatu: As per [databind#2435], need to wrap more exceptions\n             return wrapInstantiationProblem(e, ctxt);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}