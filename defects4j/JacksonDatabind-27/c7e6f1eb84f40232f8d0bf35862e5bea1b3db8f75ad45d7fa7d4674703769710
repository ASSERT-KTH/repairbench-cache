{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // First, let external type handler process value for possible type information\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            // If handled by external type handler, skip further processing\n            continue;\n        }\n\n        // Creator property handling\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                t = p.nextToken(); // move to following FIELD_NAME/END_OBJECT\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                // Copy remaining tokens into buffer if any\n                while (t == JsonToken.FIELD_NAME) {\n                    p.nextToken(); // skip name\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken();\n                }\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                }\n                return ext.complete(p, ctxt, bean);\n            }\n            continue;\n        }\n\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n\n        // Regular property?\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n\n        // Check if property is ignorable\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n\n        // Handle any property\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}