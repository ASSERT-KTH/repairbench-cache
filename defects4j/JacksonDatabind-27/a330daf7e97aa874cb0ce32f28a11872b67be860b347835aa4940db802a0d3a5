{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt); // pass ctxt for 2.9+\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    // Track whether a property-based creator was just finished and bean was constructed\n    Object bean = null;\n    while (t == JsonToken.FIELD_NAME) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // First: check to see if this may be part of value with external type id:\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                // handled by external type id handler\n            } else {\n                // Last creator property to set?\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    // We have all creator properties bound, can instantiate POJO:\n                    t = p.nextToken(); // move to following FIELD_NAME/END_OBJECT\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; // never gets here\n                    }\n                    // Now that we have a bean, continue binding properties\n                    // Copy all remaining tokens into tokens buffer to process after ext.complete\n                    while (t == JsonToken.FIELD_NAME) {\n                        String name = p.getCurrentName();\n                        p.nextToken();\n                        // For creator properties that are also external type IDs,\n                        // we must buffer them for external type handler\n                        if (!ext.handlePropertyValue(p, ctxt, name, bean)) {\n                            // If not external type property, buffer for later\n                            tokens.writeFieldName(name);\n                            tokens.copyCurrentStructure(p);\n                        }\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    TokenBuffer mergedTokens = tokens;\n                    // Replay buffered properties to external type handler for possible use\n                    JsonParser bufferedParser = mergedTokens.asParser(p);\n                    bufferedParser.nextToken(); // skip START_OBJECT\n                    while (bufferedParser.nextToken() == JsonToken.FIELD_NAME) {\n                        String name = bufferedParser.getCurrentName();\n                        bufferedParser.nextToken();\n                        ext.handlePropertyValue(bufferedParser, ctxt, name, bean);\n                    }\n                    // And now, resolve external type properties\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return ext.complete(p, ctxt, bean);\n                }\n            }\n            t = p.getCurrentToken();\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            t = p.nextToken();\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            t = p.nextToken();\n            continue;\n        }\n        // external type id (or property that depends on it)?\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            t = p.getCurrentToken();\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            t = p.nextToken();\n            continue;\n        }\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            t = p.nextToken();\n            continue;\n        }\n        // Otherwise, skip unknown property:\n        handleUnknownProperty(p, ctxt, bean, propName);\n        t = p.getCurrentToken();\n    }\n\n    // No early completion with property-based creator, do resolution now:\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}