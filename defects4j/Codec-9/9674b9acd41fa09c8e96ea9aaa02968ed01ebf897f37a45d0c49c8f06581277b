{
    "generation": "    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     *\n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n        // Determine the line length based on the isChunked parameter.\n        // Use 0 for lineLength if not chunked, otherwise use the standard MIME chunk size.\n        final int lineLength = isChunked ? MIME_CHUNK_SIZE : 0;\n        // Calculate the potential output length using the determined lineLength.\n        // The static getEncodeLength should correctly calculate non-chunked length when lineLength is 0.\n        // CHUNK_SEPARATOR is only used by getEncodeLength if lineLength > 0.\n        final long len = getEncodeLength(binaryData, lineLength, CHUNK_SEPARATOR);\n\n        // Check if the calculated length exceeds the maximum allowed size.\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n        }\n\n        // Create a Base64 encoder instance with the specified parameters, matching the length calculation.\n        // If chunked, use the constructor which defaults to MIME_CHUNK_SIZE and standard separator.\n        // If not chunked, use the constructor specifying lineLength=0.\n        final Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}