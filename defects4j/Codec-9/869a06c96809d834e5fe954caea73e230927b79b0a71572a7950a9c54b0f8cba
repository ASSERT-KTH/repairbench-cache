{
    "generation": "    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @param maxResultSize\n     *            The maximum result size to accept.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than maxResultSize\n     * @since 1.4\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n        // N.B. :: Be careful handling maxResultSize = Integer.MAX_VALUE / 1.33 which is rounded down to\n        // Integer.MAX_VALUE because of integer division. The upper limit for a Base64-encoded byte array is\n        // Integer.MAX_VALUE / 4 * 3 = 1,610,612,733 which gives Integer.MAX_VALUE / 1.333333334 which is rounded up\n        // to Integer.MAX_VALUE / 1.33 = 1,614,411,840. Therefore, the check must be performed including the separators.\n\n        // Calculate the output size based on the isChunked parameter\n        long len;\n        if (isChunked) {\n            // Use the static method getEncodeLength that calculates the length including MIME chunking\n            len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n        } else {\n            // Calculate the length without chunking (each 3 bytes -> 4 bytes)\n            // Implementation based on the formula: ceil(n / 3) * 4\n            len = ((long)binaryData.length + 2) / 3 * 4;\n        }\n\n        // Check if the calculated length exceeds the maximum allowed size\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n        }\n                \n        // Create the Base64 encoder instance with the appropriate chunking setting\n        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}