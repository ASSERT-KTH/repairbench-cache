{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute values of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n            return 1;\n        }\n        \n        // Use absolute values to avoid issues with Integer.MIN_VALUE\n        u = Math.abs(u);\n        v = Math.abs(v);\n        \n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n            u >>= 1;\n            v >>= 1;\n            k++;\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        \n        int t;\n        do {\n            t = u - v;\n            while (t != 0 && (t & 1) == 0) {\n                t >>= 1;\n            }\n            if (t != 0) {\n                u = v;\n                v = t;\n            }\n        } while (t != 0);\n        \n        return (v << k);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}