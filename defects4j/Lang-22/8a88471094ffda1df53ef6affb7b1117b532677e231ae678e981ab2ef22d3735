{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // From Commons Math:\n        //if either operand is abs 1, return 1:\n        // Note: Cannot use Math.abs(int) as it may overflow\n        if (u == 0 || v == 0) {\n            // According to Knuth 4.5.2 Algorithm B, gcd(a, 0) = |a|\n            // However, this method requires non-zero args. If we relax this constraint,\n            // handling it here avoids issues with the negative number logic below.\n            // Need to handle Integer.MIN_VALUE carefully.\n             if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n                 throw new ArithmeticException(\"overflow: gcd is 2^31\");\n             }\n             return Math.abs(u + v); // If u=0, returns |v|; if v=0 returns |u|\n        }\n\n        // Handling MIN_VALUE is tricky. Math.abs(MIN_VALUE) returns MIN_VALUE.\n        // The original code's initial check was `if (Math.abs(u) <= 1 || Math.abs(v) <= 1)`\n        // which incorrectly evaluated to true for `u = MIN_VALUE` because MIN_VALUE <= 1.\n        // We need to correctly check if the absolute value is 1.\n        long absU = Math.abs((long)u);\n        long absV = Math.abs((long)v);\n        if (absU == 1 || absV == 1) {\n            return 1;\n        }\n\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u>0) { u=-u; } // make u negative\n        if (v>0) { v=-v; } // make v negative\n        // B1. [Find power of 2]\n        int k=0;\n        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n            u/=2; v/=2; k++; // cast out twos.\n        }\n        if (k==31) {\n             // We handling the case gcd(MIN_VALUE, MIN_VALUE) here.\n             // Also gcd(MIN_VALUE, 0) and gcd(0, MIN_VALUE) are ruled out by parameter validation.\n             // Could be gcd(Integer.MIN_VALUE, x) where x is some multiple of 2^31 - cannot happen for int.\n             // Could be gcd(x, y) where result is 2^31 - eg gcd(2^31, 2^31). Handled above?\n             // Needs review for other cases eg gcd(MIN_VALUE, 2^30*k)?\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t&1)==0) { // while t is even..\n                // Possible overflow here? Min value is -2^31. If t = -2^31 / 2^k,\n                // it should be safe as k < 31 ensures t != MIN_VALUE here?\n                // No, t could be MIN_VALUE if u was MIN_VALUE and v was odd.\n                // e.g. gcd(MIN_VALUE, 1) -> u=MIN_VALUE, v=-1, k=0. t = v = -1. Ok.\n                // e.g. gcd(MIN_VALUE, 3) -> u=MIN_VALUE, v=-3, k=0. t = v = -3. Ok.\n                // e.g. gcd(MIN_VALUE+1, MIN_VALUE) -> u=MIN_VALUE+1, v=MIN_VALUE, k=0.\n                //      u=- (MIN_VALUE+1) = MAX_VALUE, v=MIN_VALUE\n                //      (u&1)==1 -> true. t = v = MIN_VALUE.\n                //      while((MIN_VALUE & 1) == 0) -> true.\n                //      t /= 2 -> t = MIN_VALUE / 2. continues... ok.\n                t/=2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t>0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            // u and v are negative. v-u is (-ve) - (-ve). Can overflow?\n            // Example: v = -1, u = MIN_VALUE. v-u = -1 - MIN_VALUE = -1 + MAX_VALUE + 1 = MAX_VALUE. ok.\n            // Example: v = MIN_VALUE, u = -1. v-u = MIN_VALUE - (-1) = MIN_VALUE + 1. ok.\n            t = (v - u)/2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t!=0);\n        // Rationale for return value: gcd(u, v) = gcd(u, u-v). At the end, t=0 implies u=v.\n        // Since u, v are kept negative, u holds -gcd of odd parts.\n        // Multiply by 2^k and negate to get positive gcd.\n        // Result is -u * 2^k. -u cannot overflow if u is negative and not MIN_VALUE.\n        // Could u be MIN_VALUE here?\n        // If loop terminates, u=v. If u=v=MIN_VALUE, this case is handled by k=31 check.\n        // If gcd(MIN_VALUE, x) = g > 1. Example gcd(MIN_VALUE, 2)=2. Final u = -1. Return -(-1) * 2 = 2.\n        // If gcd(MIN_VALUE, x) = 1. Example gcd(MIN_VALUE, 3)=1. Final u = -1. Return -(-1) * 1 = 1.\n        // Seems safe.\n        return -u*(1<<k); // gcd is -u*2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}