{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int uOrig, int vOrig) {\n        // Use long for all calculations to avoid overflow problems when taking absolute value\n        // or during other intermediate calculations involving Integer.MIN_VALUE.\n        long u = uOrig;\n        long v = vOrig;\n\n        // From Commons Math:\n        // if either operand is abs 1, return 1:\n        // Note: Math.abs(Long.MIN_VALUE) is Long.MIN_VALUE due to overflow,\n        // but this condition (Long.MIN_VALUE <= 1) is still false.\n        // This initial check mostly handles cases like gcd(X, 1) or gcd(1, X).\n        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n            return 1;\n        }\n\n        // keep u and v negative, as negative integers range down to\n        // -2^63, while positive numbers can only be as large as 2^63-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow, though -Long.MIN_VALUE is still Long.MIN_VALUE)\n        if (u > 0) { u = -u; } // make u negative\n        if (v > 0) { v = -v; } // make v negative\n\n        // B1. [Find power of 2]\n        int k = 0;\n        // The loop condition and divisions work correctly with long.\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n            u /= 2; v /= 2; k++; // cast out twos.\n        }\n        \n        // This check detects cases where the GCD is 2^31 (absolute value of Long.MIN_VALUE),\n        // which cannot be represented as a positive int.\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        \n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        long t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n        \n        // The GCD is |u| * 2^k.\n        // Since u is negative (or Long.MIN_VALUE), -u will be the positive absolute value.\n        // 1L << k ensures the shift is done as a long operation.\n        long result = -u * (1L << k);\n\n        // Final check to ensure the result fits within a positive int.\n        // The only case this would be necessary beyond k==31 is if -u itself was extremely large\n        // and k was small, leading to a product > Integer.MAX_VALUE.\n        // For gcd, this primarily means the result is 2^31 (when inputs are MIN_VALUE, MIN_VALUE),\n        // which is already handled by the k==31 check.\n        if (result > Integer.MAX_VALUE) {\n             throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        return (int) result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}