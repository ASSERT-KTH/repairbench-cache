{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    // handle the case where u or v is Integer.MIN_VALUE\n    if (u == Integer.MIN_VALUE && v == 0) {\n        return Math.abs(u);\n    }\n    if (v == Integer.MIN_VALUE && u == 0) {\n        return Math.abs(v);\n    }\n\n    // From Commons Math:\n    //if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n    // make u and v negative, to avoid overflow issues with Integer.MIN_VALUE\n    int uTemp = u;\n    int vTemp = v;\n    if (uTemp>0) { uTemp=-uTemp; } // make u negative\n    if (vTemp>0) { vTemp=-vTemp; } // make v negative\n    // B1. [Find power of 2]\n    int k=0;\n    while ((uTemp&1)==0 && (vTemp&1)==0 && k<31) { // while u and v are both even...\n        uTemp/=2; vTemp/=2; k++; // cast out twos.\n    }\n    if (k==31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least\n    //     one is odd.\n    int t = ((uTemp&1)==1) ? vTemp : -(uTemp/2)/*B3*/;\n    // t negative: u was odd, v may be even (t replaces v)\n    // t positive: u was even, v is odd (t replaces u)\n    do {\n        /* assert u<0 && v<0; */\n        // B4/B3: cast out twos from t.\n        while ((t&1)==0) { // while t is even..\n            t/=2; // cast out twos\n        }\n        // B5 [reset max(u,v)]\n        if (t>0) {\n            uTemp = -t;\n        } else {\n            vTemp = t;\n        }\n        // B6/B3. at this point both u and v should be odd.\n        t = (vTemp - uTemp)/2;\n        // |u| larger: t positive (replace u)\n        // |v| larger: t negative (replace v)\n    } while (t!=0);\n    return -uTemp*(1<<k); // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}