{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // If either argument is zero, gcd(u,v) = |u| + |v|\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n    // From Commons Math:\n    // if either operand is abs 1, return 1:\n    if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n        return 1;\n    }\n    // keep u and v negative to avoid overflow when negating Integer.MIN_VALUE\n    if (u > 0) u = -u;\n    if (v > 0) v = -v;\n\n    // Special case to prevent infinite gcd when both u and v are Integer.MIN_VALUE\n    if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {\n        return Integer.MIN_VALUE;\n    }\n\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n\n    int gcd = -u * (1 << k);\n\n    // Fix to avoid returning Integer.MIN_VALUE when gcd can be smaller\n    if (gcd == Integer.MIN_VALUE) {\n        // Check if both inputs are multiples of 2, so gcd divides by 2 is safe\n        int divisor = 2;\n        while (divisor <= (1 << k) && gcd % divisor == 0) {\n            int candidate = gcd / divisor;\n            // candidate > 0 so no overflow\n            if ((u % divisor == 0) && (v % divisor == 0)) {\n                gcd = candidate;\n                divisor *= 2;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return gcd;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}