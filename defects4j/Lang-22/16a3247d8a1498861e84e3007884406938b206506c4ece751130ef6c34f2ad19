{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // Handle zero cases explicitly to avoid incorrect reduction\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n    // if either operand is abs 1, return 1\n    if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n        return 1;\n    }\n\n    // Keep u and v negative, to handle MIN_VALUE without overflow\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n\n    int gcd = -u * (1 << k);\n\n    // Special handling: gcd(Integer.MIN_VALUE, 2) should be MIN_VALUE/2 = -1073741824\n    // but as MIN_VALUE is indivisible, algorithm returns MIN_VALUE, but in such case reduce gcd.\n    if (gcd == Integer.MIN_VALUE) {\n        // Check if divisible by 2 without remainder\n        if ((v % 2) == 0 || (u % 2) == 0) {\n            gcd = Integer.MIN_VALUE / 2;\n        }\n    }\n\n    return gcd;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}