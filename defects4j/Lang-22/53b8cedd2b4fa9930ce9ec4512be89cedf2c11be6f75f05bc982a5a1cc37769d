{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // Special handling for Integer.MIN_VALUE, because Math.abs(MIN_VALUE) = MIN_VALUE due to overflow\n        if (u == 0 || v == 0) {\n            throw new ArithmeticException(\"Overflow: Input to gcd is zero\");\n        }\n        if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {\n            return Integer.MIN_VALUE;\n        }\n        if (u == Integer.MIN_VALUE) {\n            // gcd(MIN_VALUE, v) = gcd(|MIN_VALUE|, |v|); MIN_VALUE is always even, so divide both by 2\n            if ((v & 1) == 0) {\n                // v even, divide both by 2 until at least one is odd\n                return greatestCommonDivisor(u / 2, v / 2) << 1;\n            } else {\n                // v odd\n                return greatestCommonDivisor(u / 2, v);\n            }\n        }\n        if (v == Integer.MIN_VALUE) {\n            return greatestCommonDivisor(u, v / 2);\n        }\n        u = Math.abs(u);\n        v = Math.abs(v);\n        // From Commons Math:\n        //if either operand is abs 1, return 1:\n        if (u == 1 || v == 1) {\n            return 1;\n        }\n        int k = 0;\n        while (((u & 1) == 0) && ((v & 1) == 0) && k < 31) {\n            u >>= 1;\n            v >>= 1;\n            k++;\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // Now u or v is odd\n        while ((u & 1) == 0) {\n            u >>= 1;\n        }\n        do {\n            while ((v & 1) == 0) {\n                v >>= 1;\n            }\n            if (u > v) {\n                int t = u;\n                u = v;\n                v = t;\n            }\n            v = v - u;\n        } while (v != 0);\n        return u << k;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}