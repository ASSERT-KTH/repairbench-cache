{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    // From Commons Math:\n    //if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n    \n    // handle special case where u or v is Integer.MIN_VALUE\n    if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {\n        return Math.abs(multiplyByTwo(gcdPositive(Math.abs(divideByTwo(u)), Math.abs(divideByTwo(v)))));\n    }\n    \n    // keep u and v negative, as negative integers range down to\n    // -2^31, while positive numbers can only be as large as 2^31-1\n    // (i.e. we can't necessarily negate a negative number without\n    // overflow)\n    if (u>0) { u=-u; } // make u negative\n    if (v>0) { v=-v; } // make v negative\n    // B1. [Find power of 2]\n    int k=0;\n    while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n        u/=2; v/=2; k++; // cast out twos.\n    }\n    if (k==31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least\n    //     one is odd.\n    int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n    // t negative: u was odd, v may be even (t replaces v)\n    // t positive: u was even, v is odd (t replaces u)\n    do {\n        /* assert u<0 && v<0; */\n        // B4/B3: cast out twos from t.\n        while ((t&1)==0) { // while t is even..\n            t/=2; // cast out twos\n        }\n        // B5 [reset max(u,v)]\n        if (t>0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        // B6/B3. at this point both u and v should be odd.\n        t = (v - u)/2;\n        // |u| larger: t positive (replace u)\n        // |v| larger: t negative (replace v)\n    } while (t!=0);\n    return -u*(1<<k); // gcd is u*2^k\n}\n\n// Helper methods to safely handle Integer.MIN_VALUE\nprivate static int divideByTwo(int n) {\n    if (n % 2 == 0) {\n        return n / 2;\n    } else {\n        return n < 0 ? (n - 1) / 2 : (n + 1) / 2;\n    }\n}\n\nprivate static int multiplyByTwo(int n) {\n    return n << 1;\n}\n\nprivate static int gcdPositive(int a, int b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    \n    int shift = 0;\n    while (((a | b) & 1) == 0) {\n        a >>= 1;\n        b >>= 1;\n        shift++;\n    }\n    \n    while ((a & 1) == 0) {\n        a >>= 1;\n    }\n    \n    do {\n        while ((b & 1) == 0) {\n            b >>= 1;\n        }\n        \n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        b -= a;\n    } while (b != 0);\n    \n    return a << shift;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}