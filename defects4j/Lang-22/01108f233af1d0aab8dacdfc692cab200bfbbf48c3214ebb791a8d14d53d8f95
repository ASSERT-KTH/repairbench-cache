{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    if (u == 0) {\n        return v;\n    }\n    if (v == 0) {\n        return u;\n    }\n\n    // Use binary GCD algorithm (Stein's algorithm)\n    int shift;\n    for (shift = 0; ((u | v) & 1) == 0; ++shift) {\n        u >>= 1;\n        v >>= 1;\n    }\n\n    while ((u & 1) == 0)\n        u >>= 1;\n\n    do {\n        while ((v & 1) == 0)\n            v >>= 1;\n\n        if (u > v) {\n            int t = v;\n            v = u;\n            u = t;\n        }\n\n        v = v - u;\n    } while (v != 0);\n\n    return u << shift;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}