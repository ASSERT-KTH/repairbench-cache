{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    // Special cases for Integer.MIN_VALUE and zero (should not occur here, but for safety).\n    if (u == 0 || v == 0) {\n        if (u == 0 && v == 0) {\n            throw new ArithmeticException(\"gcd(0,0) is undefined\");\n        }\n        return Math.abs(u == 0 ? v : u);\n    }\n\n    // Work on absolute values to avoid negative overflow issues.\n    // We must handle Integer.MIN_VALUE specially because Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE (overflow).\n    int a = u == Integer.MIN_VALUE ? Integer.MIN_VALUE : Math.abs(u);\n    int b = v == Integer.MIN_VALUE ? Integer.MIN_VALUE : Math.abs(v);\n\n    // If either is Integer.MIN_VALUE, divide it by two until it's odd (careful with /2 on min value).\n    // Count the number of common trailing zeros.\n    int shift = 0;\n    while (((a | b) & 1) == 0 && shift < 31 && a != 0 && b != 0) {\n        a >>>= 1;\n        b >>>= 1;\n        shift++;\n    }\n    if (shift == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // Remove remaining factors of 2 from a\n    while ((a & 1) == 0) {\n        a >>>= 1;\n    }\n    // Main loop\n    do {\n        while ((b & 1) == 0) {\n            b >>>= 1;\n        }\n        if (a > b) {\n            int tmp = a;\n            a = b;\n            b = tmp;\n        }\n        b = b - a;\n    } while (b != 0);\n    // gcd is a << shift\n    // Return negative only if both inputs were Integer.MIN_VALUE (rare edge), else positive\n    int result = a << shift;\n    return result < 0 ? -result : result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}