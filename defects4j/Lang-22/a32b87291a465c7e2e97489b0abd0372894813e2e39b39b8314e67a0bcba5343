{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // Handle zero inputs explicitly (should not happen in GCD calls, but defensive)\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // If absolute values are 1, gcd is 1\n    if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n        return 1;\n    }\n\n    // Keep u and v negative to avoid overflow\n    if (u > 0) { u = -u; }\n    if (v > 0) { v = -v; }\n\n    // B1. Find power of 2 divisor\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n\n    int gcd = -u * (1 << k);\n\n    // Additional fix: if gcd == Integer.MIN_VALUE, divide gcd and k by 2 until gcd != MIN_VALUE OR k == 0\n    while (gcd == Integer.MIN_VALUE && k > 0) {\n        gcd /= 2;\n        k--;\n    }\n\n    return gcd;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}