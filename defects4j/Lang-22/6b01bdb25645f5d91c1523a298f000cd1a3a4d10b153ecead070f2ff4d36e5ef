{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * <p>Special cases:\n     * <ul>\n     * <li>The invocations {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},\n     * {@code gcd(Integer.MIN_VALUE, 0)} and {@code gcd(0, Integer.MIN_VALUE)}\n     * throw an {@code ArithmeticException}, because the result {@code 2^31}\n     * cannot be represented as a positive {@code int} number.</li>\n     * <li>{@code gcd(x, 0)} is {@code |x|}</li>\n     * <li>{@code gcd(0, y)} is {@code |y|}</li>\n     * <li>{@code gcd(0, 0)} is {@code 0}</li>\n     * </ul></p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // From Commons Math, with additional handling for edge cases as per Javadoc and test failures.\n\n        // Handle GCD of zero cases according to Javadoc:\n        // gcd(x, 0) is |x|\n        // gcd(0, y) is |y|\n        // gcd(0, 0) is 0\n        // Also, special case for MIN_VALUE overflow when one operand is 0.\n        if (u == 0) {\n            if (v == 0) {\n                return 0; // gcd(0,0) = 0\n            }\n            // If gcd is 2^31, it cannot be represented as a positive int.\n            if (v == Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(v); // gcd(0,y) = |y|\n        } else if (v == 0) {\n            // If gcd is 2^31, it cannot be represented as a positive int.\n            if (u == Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(u); // gcd(x,0) = |x|\n        }\n\n        // The original `if (Math.abs(u) <= 1 || Math.abs(v) <= 1) { return 1; }`\n        // was buggy for 0. For values like 1 or -1, the binary GCD algorithm below\n        // handles them correctly (e.g., gcd(MIN_VALUE, 1) naturally yields 1).\n        // This shortcut is no longer needed and was problematic.\n\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u > 0) { u = -u; } // make u negative\n        if (v > 0) { v = -v; } // make v negative\n\n        // B1. [Find power of 2]\n        int k = 0;\n        // while u and v are both even...\n        // and k is less than 31 (to prevent 1 << 31 overflow later and indicate 2^31 is unrepresentable positive int)\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            // This indicates the gcd is 2^31, which cannot be represented as a positive int.\n            // This can happen if u and v were both Integer.MIN_VALUE, or other numbers\n            // that lead to 2^31 as gcd (and are not caught by the zero checks above).\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        int t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;\n        \n        do {\n            /* assert u<0 && v<0; */ // This comment refers to the *initial* u,v. After replacements, they can be positive temporarily.\n                                     // However, the algorithm relies on t being reduced and replacing one of u or v.\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t; // u becomes the new negative odd number\n            } else {\n                v = t;  // v is replaced by the negative odd number t\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n\n        // gcd is u * 2^k. Note: u is negative here, so -u makes it positive.\n        // 1 << k calculates 2^k.\n        return -u * (1 << k);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}