{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // From Commons Math:\n        //if either operand is abs 1, return 1:\n        // The original check 'Math.abs(u) <= 1 || Math.abs(v) <= 1' is problematic\n        // because Math.abs(Integer.MIN_VALUE) returns Integer.MIN_VALUE due to overflow,\n        // which is less than or equal to 1, leading to incorrect GCD calculation (returning 1)\n        // for valid cases like gcd(Integer.MIN_VALUE, 2).\n        // A direct check for 1 or -1 avoids this overflow issue.\n        if (u == 1 || u == -1 || v == 1 || v == -1) {\n            return 1;\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u>0) { u=-u; } // make u negative\n        if (v>0) { v=-v; } // make v negative\n        // B1. [Find power of 2]\n        int k=0;\n        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\n            u/=2; v/=2; k++; // cast out twos.\n        }\n        // The original code threw an ArithmeticException if k==31, indicating gcd is 2^31.\n        // However, 2^31 can be represented as Integer.MIN_VALUE (-2^31) in int.\n        // The algorithm naturally produces -u * (1 << k). If u becomes -1 and k is 31,\n        // this evaluates to -(-1) * (1 << 31) which is Integer.MIN_VALUE.\n        // Returning Integer.MIN_VALUE is a valid way to represent 2^31 in this context,\n        // and it satisfies the \"never zero\" javadoc.\n        // Removing this exception allows for correct GCD calculation when 2^31 is the result.\n        // For example, gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) should yield Integer.MIN_VALUE.\n        /*\n        if (k==31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        */\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t&1)==0) { // while t is even..\n                t/=2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t>0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u)/2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t!=0);\n        return -u*(1<<k); // gcd is u*2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}