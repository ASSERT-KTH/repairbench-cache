{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    // Special case: if u is Integer.MIN_VALUE or v is Integer.MIN_VALUE,\n    // work with their unsigned equivalents because -Integer.MIN_VALUE overflows\n\n    // From Commons Math:\n    //if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n\n    // Take absolute values, but be careful with Integer.MIN_VALUE\n    int a = u == Integer.MIN_VALUE ? Integer.MIN_VALUE : Math.abs(u);\n    int b = v == Integer.MIN_VALUE ? Integer.MIN_VALUE : Math.abs(v);\n\n    // Degenerate case, handled elsewhere in Fraction, so just to be sure\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n\n    // B1. [Find power of 2]\n    int k = 0;\n    // Use unsigned right shift for MIN_VALUE cases (it is even, as 2's complement)\n    while (((a & 1) == 0) && ((b & 1) == 0) && k < 31) { // both even\n        a >>>= 1;\n        b >>>= 1;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // Now a or b is odd\n    // Remove all factors of 2 from a\n    while ((a & 1) == 0) {\n        a >>>= 1;\n    }\n    // From here, a is always odd.\n    do {\n        // Remove all factors of 2 from b\n        while ((b & 1) == 0) {\n            b >>>= 1;\n        }\n        // Now both a and b are odd.\n        // Swap if necessary so a <= b.\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        b = b - a;\n    } while (b != 0);\n\n    // Restore common factors of 2\n    return a << k;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}