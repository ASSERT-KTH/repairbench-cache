{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n    // From Commons Math:\n    // if either operand is abs 1, return 1:\n    if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n        return 1;\n    }\n    // keep u and v negative, as negative integers range down to\n    // -2^31, while positive numbers can only be as large as 2^31-1\n    // (i.e. we can't necessarily negate a negative number without\n    // overflow)\n    if (u > 0) { u = -u; } // make u negative\n    if (v > 0) { v = -v; } // make v negative\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n        u /= 2; v /= 2; k++; // cast out twos.\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        // B5\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    int gcd = -u * (1 << k);\n\n    // Fix to handle Integer.MIN_VALUE to avoid problem when gcd is divisible by 2 but gcd==-2147483648 (MIN_VALUE) so gcd/2==MIN_VALUE/2 as expected\n    // Special handling when gcd == Integer.MIN_VALUE and divisible by 2 (even number)\n    // We'll reduce gcd by 2 iteratively as long as it's even\n    while ((gcd & 1) == 0 && gcd != 0) {\n        int divided = gcd / 2;\n        // Check if division by 2 produces a loss of precision (due to overflow)\n        if (gcd == Integer.MIN_VALUE && divided == Integer.MIN_VALUE) {\n            break;\n        }\n        gcd = divided;\n    }\n    return Math.abs(gcd);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}