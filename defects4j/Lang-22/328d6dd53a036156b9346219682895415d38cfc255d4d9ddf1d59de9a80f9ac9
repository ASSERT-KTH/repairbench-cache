{
    "generation": "    private static int greatestCommonDivisor(int u, int v) {\n        // From Commons Math:\n        // if either operand is abs 1, return 1:\n        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n            return 1;\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        if (u > 0) {\n            u = -u; // make u negative\n        }\n        if (v > 0) {\n            v = -v; // make v negative\n        }\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        //     one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/*B3*/;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n\n        // Correct the overflow issue\n        long result = -u;\n        if (k > 0) {\n            result = result * (1L << k);\n        }\n        if (result > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"overflow: gcd is too large\");\n        }\n        return (int) result; // gcd is u*2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}