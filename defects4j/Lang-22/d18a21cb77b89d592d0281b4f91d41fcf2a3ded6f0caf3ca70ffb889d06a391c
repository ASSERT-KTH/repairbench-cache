{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    // if either operand is \u00b11, gcd is 1\n    if (u == 1 || u == -1 || v == 1 || v == -1) {\n        return 1;\n    }\n    // keep u and v negative, to handle Integer.MIN_VALUE correctly\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    // B1. find power of two common factors\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        // both u and v were divisible by 2^31 => gcd overflows int\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. u and v are now odd or one has had all factors of 2 removed\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    // main loop\n    do {\n        // remove factors of 2 from t\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        // reset larger of u, v\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        // t = (|v| - |u|) / 2, but using signed negatives\n        t = (v - u) / 2;\n    } while (t != 0);\n    // restore common factors of 2\n    return -u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}