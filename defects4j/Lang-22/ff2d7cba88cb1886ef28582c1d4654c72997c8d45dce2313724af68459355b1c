{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // Special case: if either operand is abs 1, return 1:\n        if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n            return 1;\n        }\n        // Keep u and v negative to avoid overflow\n        if (u > 0) {\n            u = -u;\n        }\n        if (v > 0) {\n            v = -v;\n        }\n        // Cast out factors of 2\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n            u /= 2;\n            v /= 2;\n            k++;\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"Overflow: gcd is 2^31\");\n        }\n        // Make sure u is the odd one\n        int t;\n        if ((u & 1) == 1) {\n            t = v;\n        } else {\n            t = -(u / 2);\n        }\n        do {\n            // Cast out factors of 2 from t\n            while ((t & 1) == 0) {\n                t /= 2;\n            }\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            t = (v - u) / 2;\n        } while (t != 0);\n        // Preserve the sign of u\n        int gcd = u;\n        if (u < 0) {\n            gcd = -u;\n        }\n        // Apply the power of 2 and preserve the sign\n        if (k > 0 && (gcd > 0 ? (Integer.MAX_VALUE >> k) >= gcd : (Integer.MIN_VALUE >> k) <= gcd)) {\n            return (int) (gcd * (1L << k));\n        } else {\n            return gcd << k;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}