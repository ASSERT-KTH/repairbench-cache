{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        // Handle special cases first (zero, min value).\n        if (u == 0 || v == 0) {\n            return Math.abs(u) + Math.abs(v); // Only one can be nonzero, \"+\", not \"||\" for min value\n        }\n        //if either operand is abs 1, return 1:\n        if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n            return 1;\n        }\n        // can't handle MIN_VALUE directly in abs, so ensure positive\n        int a = u, b = v;\n        if (a < 0) {\n            a = (a == Integer.MIN_VALUE) ? Integer.MIN_VALUE : -a;\n        }\n        if (b < 0) {\n            b = (b == Integer.MIN_VALUE) ? Integer.MIN_VALUE : -b;\n        }\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while (((a & 1) == 0) && ((b & 1) == 0) && k < 31) {\n            a >>>= 1;\n            b >>>= 1;\n            k++;\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        // Now a or b is odd.\n        while ((a & 1) == 0) {\n            a >>>= 1;\n        }\n        do {\n            while ((b & 1) == 0) {\n                b >>>= 1;\n            }\n            if (a > b) {\n                int t = a;\n                a = b;\n                b = t;\n            }\n            b = b - a;\n        } while (b != 0);\n\n        return a << k;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}