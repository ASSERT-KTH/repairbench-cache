{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    if (u == 0 || v == 0) {\n        return Math.abs(u | v); // If either is zero, return abs(other)\n    }\n    // keep u and v negative (minimize risk of overflow)\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n    int k = 0;\n    // Common factors of 2\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    int gcd = -u * (1 << k);\n\n    // Special handling for Integer.MIN_VALUE to avoid dividing by zero or overflow\n    // If gcd == Integer.MIN_VALUE, try to divide it by 2 once more where possible\n    if (gcd == Integer.MIN_VALUE) {\n        // attempt to divide by 2 if both original inputs are divisible by 2 and after reduction gcd is still Integer.MIN_VALUE\n        if ((u % 2 == 0) && (v % 2 == 0)) {\n            gcd = gcd / 2;\n        }\n    }\n    return gcd;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}