{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    // Special cases (handle Integer.MIN_VALUE to avoid overflow)\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // Use absolute values to avoid sign issues\n    // (make result always positive)\n    long a = Math.abs((long) u);\n    long b = Math.abs((long) v);\n\n    // Knuth's algorithm with longs\n    int shift = 0;\n    while ((a & 1) == 0 && (b & 1) == 0 && shift < 63) {\n        a >>= 1;\n        b >>= 1;\n        shift++;\n    }\n    if (shift == 63) {\n        throw new ArithmeticException(\"overflow: gcd is 2^63\");\n    }\n\n    // Now a or b is odd\n    while ((a & 1) == 0)\n        a >>= 1;\n    while (b != 0) {\n        while ((b & 1) == 0)\n            b >>= 1;\n        if (a > b) {\n            long t = a;\n            a = b;\n            b = t;\n        }\n        b = b - a;\n    }\n\n    // Now a * 2^shift is the gcd, and can't be > Integer.MAX_VALUE since\n    // it divides input integers\n    long g = a << shift;\n    if (g > Integer.MAX_VALUE) {\n        throw new ArithmeticException(\"overflow: gcd > Integer.MAX_VALUE\");\n    }\n    return (int) g;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}