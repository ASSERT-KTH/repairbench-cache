{
    "generation": "/**\n * <p>Gets the greatest common divisor of the absolute value of\n * two numbers, using the \"binary gcd\" method which avoids\n * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n * This algorithm is due to Josef Stein (1961).</p>\n *\n * @param u  a non-zero number\n * @param v  a non-zero number\n * @return the greatest common divisor, never zero\n */\nprivate static int greatestCommonDivisor(int u, int v) {\n    // Special handling for Integer.MIN_VALUE to avoid division errors.\n    if (u == Integer.MIN_VALUE && v == 0) {\n        return Integer.MIN_VALUE;\n    }\n    if (v == Integer.MIN_VALUE && u == 0) {\n        return Integer.MIN_VALUE;\n    }\n    //if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n    // keep u and v negative, as negative integers range down to\n    // -2^31, while positive numbers can only be as large as 2^31-1\n    // (i.e. we can't necessarily negate a negative number without\n    // overflow)\n    if (u > 0) { u = -u; } // make u negative\n    if (v > 0) { v = -v; } // make v negative\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n        u /= 2;\n        v /= 2;\n        k++; // cast out twos.\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : -(u / 2); /*B3*/\n    // t negative: u was odd, v may be even (t replaces v)\n    // t positive: u was even, v is odd (t replaces u)\n    do {\n        /* assert u<0 && v<0; */\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) { // while t is even..\n            t /= 2; // cast out twos\n        }\n        // B5 [reset max(u,v)]\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        // B6/B3. at this point both u and v should be odd.\n        t = (v - u) / 2;\n        // |u| larger: t positive (replace u)\n        // |v| larger: t negative (replace v)\n    } while (t != 0);\n    // Fix: Use unsigned right shift for Integer.MIN_VALUE support\n    // (-u) may be Integer.MIN_VALUE, so use division instead of left shift where k > 0\n    if (k == 0) {\n        return -u;\n    } else {\n        // Use unsigned right shift (>>>), but since u is negative, -u is positive (unless Integer.MIN_VALUE)\n        // But -2147483648 >> 1 == -1073741824 so -2147483648/2== -1073741824\n        // We want gcd(-2147483648,2) == 1073741824, which is -(Integer.MIN_VALUE/2), which is 1073741824.\n        // So correct formula: return -u / (1 << ( -k ));\n        // Observe that (1 << k) divides u, so safe to use division:\n        return (-u) / (1 << k);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}