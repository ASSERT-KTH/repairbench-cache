{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // If either operand is \u00b11, the gcd is 1.\n    if (u == 1 || u == -1 || v == 1 || v == -1) {\n        return 1;\n    }\n    // Keep u and v negative to avoid overflow \n    // (e.g. Integer.MIN_VALUE cannot be negated safely).\n    if (u > 0) { \n        u = -u; \n    }\n    if (v > 0) { \n        v = -v; \n    }\n    // B1. Find the greatest power of 2 dividing both u and v.\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    // Main loop of the binary GCD algorithm.\n    do {\n        // Remove factors of 2 in t.\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        // Depending on the sign of t, update u or v.\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    return -u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}