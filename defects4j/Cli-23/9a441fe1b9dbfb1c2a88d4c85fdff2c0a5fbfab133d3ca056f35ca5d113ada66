{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            int lastPos = pos;\n            \n            // Get the remaining part of the original text\n            String remainder = text.substring(lastPos);\n\n            // If the remaining text, after trimming, is empty, all content has been processed.\n            // This prevents an infinite loop if `text` becomes just `padding` in the next step.\n            String trimmedRemainder = remainder.trim();\n            if (trimmedRemainder.isEmpty())\n            {\n                return sb;\n            }\n\n            // Prepend the padding to the trimmed remainder for the next line\n            text = padding + trimmedRemainder;\n            \n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            } else\n            if (pos == lastPos)\n            {\n                // This condition indicates that findWrapPos is stuck,\n                // meaning no further wrapping can occur (e.g., due to a word longer\n                // than the available line width after padding).\n                // Instead of throwing an exception, append the remaining text as-is\n                // and terminate to avoid an infinite loop (as per CLI-162 intention).\n                sb.append(text);\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}