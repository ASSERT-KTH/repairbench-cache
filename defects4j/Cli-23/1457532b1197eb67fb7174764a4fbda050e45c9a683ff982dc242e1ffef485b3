{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        // The actual whitespace is taken from text.charAt(pos), after the substring.\n        boolean addPadding = false;\n\n        if (pos < text.length() && Character.isWhitespace(text.charAt(pos))) {\n            // If the character at the wrap position is whitespace,\n            // then we can safely trim it.\n            text = text.substring(pos).trim();\n            addPadding = true;\n        } else {\n            // Otherwise, just start at the wrap position (might be in the middle of a word).\n            text = text.substring(pos);\n            // If the new text starts with whitespace, trim it and add padding\n            if (text.length() > 0 && Character.isWhitespace(text.charAt(0))) {\n                text = text.trim();\n                addPadding = true;\n            }\n        }\n        if (addPadding) {\n            text = padding + text;\n        }\n\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        } else\n        if (pos == lastPos)\n        {\n            // Rather than throwing, append the rest even if it's longer than width\n            sb.append(text);\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}