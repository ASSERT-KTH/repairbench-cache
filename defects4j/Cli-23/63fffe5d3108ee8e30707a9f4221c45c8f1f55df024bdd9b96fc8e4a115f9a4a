{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space\n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // Check if we're not making any progress\n        if (pos == lastPos)\n        {\n            // If the text is too long, try to find a space to break at\n            int forcedBreak = width;\n            while (forcedBreak > 0 && !Character.isWhitespace(text.charAt(forcedBreak - 1)))\n            {\n                forcedBreak--;\n            }\n\n            if (forcedBreak > 0)\n            {\n                pos = forcedBreak;\n            }\n            else\n            {\n                // If we can't find a space, we have to break at the width limit\n                pos = width;\n            }\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (pos == lastPos)\n        {\n            // If we're still stuck, we need to break the infinite loop\n            // by forcing a break at the width limit\n            text = padding + text.substring(pos).trim();\n            if (text.length() > width)\n            {\n                sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);\n                text = padding + text.substring(width).trim();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}