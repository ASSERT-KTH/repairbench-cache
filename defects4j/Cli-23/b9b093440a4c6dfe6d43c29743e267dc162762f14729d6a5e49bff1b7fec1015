{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // Initial line processing:\n        // `findWrapPos` on the raw text, searching from index 0.\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // `text` now holds the *remaining content* after the first line break.\n        // It is trimmed here to remove any leading/trailing whitespace\n        // that was part of the original text after the first line break.\n        text = text.substring(pos).trim(); \n\n        // All following lines must be padded.\n        final String padding = createPadding(nextLineTabStop);\n\n        // Loop for subsequent lines\n        while (true)\n        {\n            // Construct the string to find wrap position in: padding + actual content.\n            String lineForWrap = padding + text;\n\n            // Find wrap position. Start searching from nextLineTabStop.\n            // The 'width' parameter is the *total* line width.\n            // `findWrapPos` is assumed to handle the `startPos` argument correctly,\n            // meaning it searches for a break point within `lineForWrap` from `startPos`\n            // up to `width`.\n            pos = findWrapPos(lineForWrap, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                // If remaining text (after padding) fits on one line, append it.\n                sb.append(rtrim(lineForWrap));\n                return sb;\n            }\n            \n            // Check for infinite loop: if no actual content characters were consumed.\n            // This happens if `pos` is less than or equal to `nextLineTabStop`,\n            // meaning `findWrapPos` could only find a break within the padding itself,\n            // or at the very start of the actual content, and the actual content is not empty.\n            // In such a scenario, the content would not be consumed, leading to an infinite loop.\n            if (pos <= nextLineTabStop && text.length() > 0)\n            {\n                throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + lineForWrap);\n            }\n            \n            // Append the current line (padded part + content part).\n            // `rtrim` removes trailing spaces from the wrapped line.\n            sb.append(rtrim(lineForWrap.substring(0, pos))).append(defaultNewLine);\n\n            // Update `text` to be the remaining content for the next iteration.\n            // `lineForWrap.substring(pos)` is the part after the break point.\n            // `.trim()` ensures any leading/trailing whitespace of *that specific remaining content* is removed.\n            // This is safe because `pos` is now guaranteed to be greater than `nextLineTabStop`\n            // (due to the infinite loop check), meaning `pos` is within or after the actual content.\n            text = lineForWrap.substring(pos).trim();\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}