{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        // Remove leading whitespace on the remaining text, then prefix padding\n        // (avoid padding-only lines, which would cause an infinite loop)\n        text = text.substring(lastPos).trim();\n\n        // If there's nothing left, break.\n        if (text.length() == 0) {\n            break;\n        }\n\n        text = padding + text;\n\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        } \n        // If wrapping position does not move, force to wrap at line width to avoid infinite loop.\n        if (pos == lastPos)\n        {\n            // Defensive: If no spaces exist to wrap on, but text is too long,\n            // break forcibly at max width\n            pos = width;\n            if (pos > text.length())\n                pos = text.length();\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // If forcibly breaking line and nothing left, break out (prevents infinite loop for long unbreakable lines)\n        if (pos >= text.length()) {\n            break;\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}