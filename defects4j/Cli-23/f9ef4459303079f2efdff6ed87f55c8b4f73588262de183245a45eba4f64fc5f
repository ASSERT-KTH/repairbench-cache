{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb,\n                                         int width,\n                                         int nextLineTabStop,\n                                         String text)\n{\n    // first line\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos)))\n      .append(defaultNewLine);\n\n    // prepare for remaining lines\n    final String padding = createPadding(nextLineTabStop);\n    String remainder = text.substring(pos).trim();\n    // subsequent lines must wrap at (width - nextLineTabStop)\n    int wrapWidth = width - nextLineTabStop;\n\n    while (remainder.length() > 0) {\n        // if there's no room to wrap, dump the rest\n        if (wrapWidth <= 0) {\n            sb.append(padding).append(remainder);\n            break;\n        }\n        pos = findWrapPos(remainder, wrapWidth, 0);\n        // if no break position found, dump the rest\n        if (pos == -1) {\n            sb.append(padding).append(remainder);\n            break;\n        }\n        // emit this line\n        sb.append(padding)\n          .append(rtrim(remainder.substring(0, pos)))\n          .append(defaultNewLine);\n        // prepare next chunk\n        remainder = remainder.substring(pos).trim();\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}