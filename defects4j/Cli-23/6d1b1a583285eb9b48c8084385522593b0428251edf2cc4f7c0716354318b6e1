{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        // Bugfix: Do not keep prepending padding + trim(), just append padding to original text after advancing pos\n        text = text.substring(lastPos);\n\n        // Remove leading spaces; don't trim trailing to preserve inner structure of text\n        while (text.length() > 0 && Character.isWhitespace(text.charAt(0))) {\n            text = text.substring(1);\n        }\n\n        // The text could be empty after trimming leading whitespace; if so, stop\n        if (text.length() == 0) {\n            return sb;\n        }\n\n        text = padding + text;\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        }\n        // Remove infinite loop check. The 'lastPos == pos' situation can occur when the substring taken above starts with a long word.\n        // Instead, we'll forcibly break the line at the width if wrapping is not possible.\n        // Check if pos <= padding.length(), which would mean the next word does not fit on the line, so forcibly break after width chars.\n        if (pos <= padding.length()) {\n            // break after width chars\n            pos = width;\n            if (pos > text.length()) {\n                pos = text.length();\n            }\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}