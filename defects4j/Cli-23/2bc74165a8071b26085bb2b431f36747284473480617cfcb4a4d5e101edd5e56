{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        // Handle first line indentation an wrap position\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            // No wrap needed for the first line\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        // Append the first line and the newline character\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // The text to process for subsequent lines, trimmed\n        String remainingText = text.substring(pos).trim();\n\n        // Create padding for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n\n        // Process the remaining text line by line\n        while (remainingText.length() > 0)\n        {\n            // Prepend padding to the remaining text for the current line\n            String currentLine = padding + remainingText;\n            pos = findWrapPos(currentLine, width, 0);\n\n            if (pos == -1)\n            {\n                // No further wrapping needed, append the rest of the text\n                sb.append(rtrim(currentLine));\n                // Mark remaining text as empty to exit the loop\n                remainingText = \"\"; \n            }\n            else\n            {\n                // Calculate the part of the line to append and the text for the next iteration\n                String lineToAppend = currentLine.substring(0, pos);\n                String nextRemainingText = currentLine.substring(pos).trim();\n\n                // Check for potential infinite loop: if the remaining text doesn't change\n                // after trimming and padding, it means we are stuck. This can happen if\n                // the wrap position falls within the padding or doesn't advance the processing\n                // of the actual text content.\n                if (nextRemainingText.equals(remainingText))\n                {\n                    // Throw the exception as intended by the original code for CLI-162\n                    throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + currentLine);\n                    // Note: An alternative might be to append the rest of the line and break,\n                    // but the original fix for CLI-162 specifically added this exception.\n                    // sb.append(rtrim(currentLine));\n                    // remainingText = \"\";\n                }\n                else\n                {\n                    // Append the wrapped line part and continue with the next remaining text\n                    sb.append(rtrim(lineToAppend)).append(defaultNewLine);\n                    remainingText = nextRemainingText;\n                }\n            }\n        }\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}