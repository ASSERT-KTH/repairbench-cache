{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        // Remove leading whitespace from the cut text to prevent unnecessary indentation growth\n        text = text.substring(pos).trim();\n        if (text.length() == 0) {\n            break;\n        }\n        text = padding + text;\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        }\n        // Instead of checking pos == lastPos (which can fail with many leading spaces), we check whether any progress is made:\n        // i.e., if next substring is empty or no position advancement, just break out to avoid infinite loop\n        if (pos <= padding.length())\n        {\n            // forcibly split at width if still impossible to wrap\n            if (text.length() > width) {\n                sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);\n                text = text.substring(width).trim();\n                if (text.length() == 0)\n                    break;\n                text = padding + text;\n                pos = findWrapPos(text, width, 0);\n                if (pos == -1) {\n                    sb.append(text);\n                    return sb;\n                }\n                lastPos = 0; // prevent infinite loop\n                continue;\n            } else {\n                sb.append(text);\n                return sb;\n            }\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}