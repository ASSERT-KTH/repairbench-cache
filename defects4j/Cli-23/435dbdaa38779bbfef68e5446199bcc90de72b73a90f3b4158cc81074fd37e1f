{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // Handle the first line separately to avoid leading whitespace\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space characters\n    final String padding = createPadding(nextLineTabStop);\n\n    // Use a StringBuilder to efficiently build the padded text\n    StringBuilder paddedText = new StringBuilder(padding);\n    paddedText.append(text.substring(pos).trim());\n\n    // Ensure that the remaining text is wrapped correctly\n    while (true) {\n        text = paddedText.toString();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        // Check if the wrap position is at the beginning, indicating no progress\n        if (pos <= padding.length()) {\n            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        paddedText.replace(0, pos, padding);\n        paddedText.delete(padding.length(), paddedText.length()).append(text.substring(pos).trim());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}