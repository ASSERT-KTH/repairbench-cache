{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space\n        // characters\n        final String padding = createPadding(nextLineTabStop);\n        final int paddingWidth = padding.length();\n\n        while (true)\n        {\n            // Get the rest of the text, trimmed\n            text = text.substring(pos).trim();\n\n            // Check if there is any text left\n            if (text.length() == 0) {\n                return sb;\n            }\n\n            // Add the padding to the beginning of the text\n            text = padding + text;\n\n            // find the wrap position\n            pos = findWrapPos(text, width, 0);\n\n            // Check if the remaining text fits on one line\n            if (pos == -1)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n            // Fix for CLI-162: an infinite loop happens when\n            // the available width is less than the padding width,\n            // so findWrapPos calculation returns position > 0 but <= padding width.\n            // In this case, we should just append the rest of the text and stop.\n            if (pos <= paddingWidth)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n\n            // Append the substring taking care to trim tailing whitespace\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}