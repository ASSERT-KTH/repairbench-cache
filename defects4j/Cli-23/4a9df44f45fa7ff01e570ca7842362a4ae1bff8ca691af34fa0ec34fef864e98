{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // Wrap the first line using the full width\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // If there isn\u2019t enough room for any indented text, just output the rest.\n    if (width - nextLineTabStop <= 0) {\n        sb.append(text.substring(pos).trim());\n        return sb;\n    }\n\n    final String padding = createPadding(nextLineTabStop);\n    \n    while (true) {\n        // Prepend the padding to the remaining text, trimming any leading/trailing spaces.\n        text = padding + text.substring(pos).trim();\n        // For subsequent lines, the pad area is not available for text so start\n        // searching from nextLineTabStop instead of 0.\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n        // If no progress can be made (i.e. we can\u2019t break past the indent),\n        // then just append the rest of the text to avoid an infinite loop.\n        if (pos <= nextLineTabStop) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}