{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        // Handle first line wrapping (no padding)\n        int pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            // All fits on first line\n            sb.append(rtrim(text));\n            return sb;\n        }\n        // Append first line\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Setup for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n        final int effectiveWidth = width - padding.length();\n\n        // The text to wrap for subsequent lines\n        String currentText = text.substring(pos).trim();\n\n        while (currentText.length() > 0)\n        {\n            // If padding consumes the whole width or more, we cannot sensibly wrap further lines.\n            // Append the rest of the text on the next line, padded.\n            if (effectiveWidth <= 0) {\n                // Append the padded remaining text and stop.\n                sb.append(padding).append(rtrim(currentText));\n                // No newline here, assuming the caller handles final line breaks. If sb is reused,\n                // the next append will happen naturally. If this is the absolute end,\n                // a final newline might be missing, but this matches the original's potential behaviour\n                // in the case where the first line fit (no newline added).\n                // Let's add the newline for consistency with the loop below.\n                sb.append(padding).append(rtrim(currentText)).append(defaultNewLine);\n                currentText = \"\"; // Mark as done\n                break;\n            }\n\n            // Find wrap point in the *remaining text* using the *effective width*\n            pos = findWrapPos(currentText, effectiveWidth, 0);\n\n            String lineFragment; // Text fragment for the current line (part of currentText)\n            if (pos == -1)\n            {\n                // The rest of currentText fits within the effective width\n                lineFragment = currentText; // Take all remaining text\n                currentText = \"\"; // Mark as done\n            }\n            else\n            {\n                // Wrap currentText at 'pos'\n                lineFragment = currentText.substring(0, pos);\n                currentText = currentText.substring(pos).trim(); // Update remaining text\n            }\n\n            // Append the padded line fragment\n            sb.append(padding).append(rtrim(lineFragment)).append(defaultNewLine);\n\n            // Loop continues if currentText has length\n        }\n\n        // The loop structure ensures a newline is added after the last piece.\n        // If the original text ended perfectly at a wrap point, the last 'currentText' might be empty\n        // or just whitespace, resulting in an extra newline potentially.\n        // However, the trim() operations should minimize this.\n        // Consider if the final newline should always be there. The original code\n        // added it in the loop, so we maintain that.\n\n        return sb; // StringBuffer is returned, containing all appended lines.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}