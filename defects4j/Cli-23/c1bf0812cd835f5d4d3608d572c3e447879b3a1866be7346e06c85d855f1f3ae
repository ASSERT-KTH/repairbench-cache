{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            String nextLine = padding + text.substring(pos).trim();\n            int lastPos = pos;\n            pos = findWrapPos(nextLine, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(nextLine);\n                return sb;\n            }\n            else if (pos == lastPos)\n            {\n                // If no wrap position found and we're stuck, force a break at width\n                sb.append(nextLine.substring(0, width)).append(defaultNewLine);\n                nextLine = padding + nextLine.substring(width).trim();\n                if (nextLine.length() <= width)\n                {\n                    sb.append(nextLine);\n                    return sb;\n                }\n                pos = 0;\n                continue;\n            }\n\n            sb.append(rtrim(nextLine.substring(0, pos))).append(defaultNewLine);\n            pos += padding.length(); // adjust for padding in next iteration\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}