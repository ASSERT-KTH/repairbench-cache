{
    "generation": "/**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        if (width <= 0) {\n            throw new IllegalArgumentException(\"width must be greater than 0\");\n        }\n        \n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            int lastPos = pos;\n            String textPart = text.substring(pos).trim();\n            \n            // If the remaining text is longer than the allowed width, we need to wrap it\n            if (textPart.length() > width) {\n                pos = findWrapPos(textPart, width, 0);\n                if (pos == -1) {\n                    pos = width; // wrap at the width if no better position is found\n                }\n            } else {\n                pos = textPart.length();\n            }\n            \n            sb.append(padding).append(rtrim(textPart.substring(0, pos))).append(defaultNewLine);\n\n            // Check if we have processed all text\n            if (pos == textPart.length()) {\n                break;\n            }\n\n            // Update the remaining text\n            text = padding + textPart.substring(pos).trim();\n        }\n\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}