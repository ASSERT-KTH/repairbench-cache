{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n\n        // Remove leading spaces to prevent pathological padding growth\n        text = text.substring(pos).trim();\n\n        // If text is now empty after trimming, break out of the loop\n        if (text.length() == 0) {\n            return sb;\n        }\n\n        // pad the current line\n        text = padding + text;\n\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // If the wrapping position is at the same place as before even after trimming,\n        // it means a single word is longer than a line width;\n        // Instead of throwing exception, forcibly wrap at width\n        if (pos == lastPos)\n        {\n            // Prevent infinite loop: forcibly hard wrap\n            pos = width < text.length() ? width : text.length();\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}