{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // Handle empty or null text\n        if (text == null || text.length() == 0) {\n             return sb;\n        }\n\n        // Find wrap position for the first line (no padding calculation needed)\n        // Start searching from the beginning of the text (startPos = 0)\n        int pos = findWrapPos(text, width, 0);\n\n        // If text fits on one line\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        // Append the first line\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Prepare padding for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n        // The effective width available for text on subsequent lines\n        // Ensure positivity, though findWrapPos should handle width <= 0 correctly\n        // by returning -1 or a position within the text if it finds a newline/tab early.\n        final int subsequentWidth = Math.max(1, width - padding.length()); \n\n\n        // Start processing the remainder\n        String remainder = text.substring(pos).trim();\n\n        // Loop while there is remaining text to process\n        while (remainder.length() > 0)\n        {\n            // If the available width on subsequent lines is non-positive\n            // (because padding is too large). This case means subsequentWidth was <= 0 before Math.max.\n            // We append the remaining text on one padded line which might exceed the target width,\n            // but avoids errors and infinite loops.\n             if (width - padding.length() <= 0) {\n                  sb.append(padding).append(rtrim(remainder));\n                  return sb; // Exit after appending the rest\n             }\n\n            // Find wrap position in the *remainder* using the *subsequentWidth*\n            // Start searching from the beginning of the remainder (startPos = 0)\n            pos = findWrapPos(remainder, subsequentWidth, 0);\n\n            // If the rest of the remainder fits on the current line\n            if (pos == -1)\n            {\n                // Append the final padded line\n                sb.append(padding).append(rtrim(remainder));\n                // Ensure the loop terminates\n                remainder = \"\"; \n            }\n            else // A wrap position was found\n            {\n                // Append the wrappable part of the remainder, prepended with padding\n                sb.append(padding).append(rtrim(remainder.substring(0, pos))).append(defaultNewLine);\n                // Update the remainder for the next iteration\n                remainder = remainder.substring(pos).trim();\n            }\n        }\n\n        // Return the StringBuffer containing the wrapped text\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}